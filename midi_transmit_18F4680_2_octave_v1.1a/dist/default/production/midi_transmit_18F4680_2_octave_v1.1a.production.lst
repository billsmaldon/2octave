

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Jan 29 19:50:08 2024

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4680
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1,noexec
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     9                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
    10                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
    11                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
    12                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    13                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    17                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    18                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    19                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    21                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    23                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    24                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    26                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    27                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    28                           	psect	text0,global,reloc=2,class=CODE,delta=1
    29                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text2,global,reloc=2,class=CODE,delta=1
    31                           	psect	text3,global,reloc=2,class=CODE,delta=1
    32                           	psect	text4,global,reloc=2,class=CODE,delta=1
    33                           	psect	text5,global,reloc=2,class=CODE,delta=1
    34                           	psect	text6,global,reloc=2,class=CODE,delta=1
    35                           	psect	text7,global,reloc=2,class=CODE,delta=1
    36                           	psect	text8,global,reloc=2,class=CODE,delta=1
    37                           	psect	text9,global,reloc=2,class=CODE,delta=1
    38                           	psect	text10,global,reloc=2,class=CODE,delta=1
    39                           	psect	text11,global,reloc=2,class=CODE,delta=1
    40                           	psect	text12,global,reloc=2,class=CODE,delta=1
    41                           	psect	text13,global,reloc=2,class=CODE,delta=1
    42                           	psect	text14,global,reloc=2,class=CODE,delta=1
    43                           	psect	text15,global,reloc=2,class=CODE,delta=1
    44                           	psect	text16,global,reloc=2,class=CODE,delta=1
    45                           	psect	text17,global,reloc=2,class=CODE,delta=1
    46                           	psect	text18,global,reloc=2,class=CODE,delta=1
    47                           	psect	text19,global,reloc=2,class=CODE,delta=1
    48                           	psect	text20,global,reloc=2,class=CODE,delta=1
    49                           	psect	text21,global,reloc=2,class=CODE,delta=1
    50                           	psect	text22,global,reloc=2,class=CODE,delta=1
    51                           	psect	text23,global,reloc=2,class=CODE,delta=1
    52                           	psect	text24,global,reloc=2,class=CODE,delta=1
    53                           	psect	text25,global,reloc=2,class=CODE,delta=1
    54                           	psect	text26,global,reloc=2,class=CODE,delta=1
    55                           	psect	text27,global,reloc=2,class=CODE,delta=1
    56                           	psect	text28,global,reloc=2,class=CODE,delta=1
    57                           	psect	text29,global,reloc=2,class=CODE,delta=1
    58                           	psect	text30,global,reloc=2,class=CODE,delta=1
    59                           	psect	text31,global,reloc=2,class=CODE,delta=1
    60                           	psect	text32,global,reloc=2,class=CODE,delta=1
    61                           	psect	text33,global,reloc=2,class=CODE,delta=1
    62                           	psect	text34,global,reloc=2,class=CODE,delta=1
    63                           	psect	text35,global,reloc=2,class=CODE,delta=1
    64                           	psect	text36,global,reloc=2,class=CODE,delta=1
    65                           	psect	text37,global,reloc=2,class=CODE,delta=1
    66                           	psect	text38,global,reloc=2,class=CODE,delta=1
    67                           	psect	text39,global,reloc=2,class=CODE,delta=1
    68                           	psect	text40,global,reloc=2,class=CODE,delta=1
    69                           	psect	text41,global,reloc=2,class=CODE,delta=1
    70                           	psect	text42,global,reloc=2,class=CODE,delta=1
    71                           	psect	text43,global,reloc=2,class=CODE,delta=1
    72                           	psect	text44,global,reloc=2,class=CODE,delta=1
    73                           	psect	text45,global,reloc=2,class=CODE,delta=1
    74                           	psect	text46,global,reloc=2,class=CODE,delta=1
    75                           	psect	text47,global,reloc=2,class=CODE,delta=1
    76                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=2
    77                           	psect	text49,global,reloc=2,class=CODE,delta=1
    78                           	psect	text50,global,reloc=2,class=CODE,delta=1
    79                           	psect	text51,global,reloc=2,class=CODE,delta=1
    80                           	psect	text52,global,reloc=2,class=CODE,delta=1
    81                           	psect	text53,global,reloc=2,class=CODE,delta=1
    82                           	psect	text54,global,reloc=2,class=CODE,delta=1
    83                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=2
    84                           	psect	text56,global,reloc=2,class=CODE,delta=1
    85                           	psect	text57,global,reloc=2,class=CODE,delta=1
    86                           	psect	text58,global,reloc=2,class=CODE,delta=1
    87                           	psect	text59,global,reloc=2,class=CODE,delta=1
    88                           	psect	text60,global,reloc=2,class=CODE,delta=1
    89                           	psect	text61,global,reloc=2,class=CODE,delta=1
    90                           	psect	text62,global,reloc=2,class=CODE,delta=1
    91                           	psect	text63,global,reloc=2,class=CODE,delta=1
    92                           	psect	text64,global,reloc=2,class=CODE,delta=1
    93                           	psect	text65,global,reloc=2,class=CODE,delta=1
    94                           	psect	text66,global,reloc=2,class=CODE,delta=1
    95                           	psect	text67,global,reloc=2,class=CODE,delta=1
    96                           	psect	text68,global,reloc=2,class=CODE,delta=1
    97                           	psect	text69,global,reloc=2,class=CODE,delta=1
    98                           	psect	text70,global,reloc=2,class=CODE,delta=1
    99                           	psect	text71,global,reloc=2,class=CODE,delta=1
   100                           	psect	text72,global,reloc=2,class=CODE,delta=1
   101                           	psect	text73,global,reloc=2,class=CODE,delta=1
   102                           	psect	text74,global,reloc=2,class=CODE,delta=1
   103                           	psect	text75,global,reloc=2,class=CODE,delta=1
   104                           	psect	text76,global,reloc=2,class=CODE,delta=1
   105                           	psect	text77,global,reloc=2,class=CODE,delta=1
   106                           	psect	text78,global,reloc=2,class=CODE,delta=1
   107                           	psect	text79,global,reloc=2,class=CODE,delta=1
   108                           	psect	text80,global,reloc=2,class=CODE,delta=1
   109                           	psect	text81,global,reloc=2,class=CODE,delta=1
   110                           	psect	text82,global,reloc=2,class=CODE,delta=1
   111                           	psect	text83,global,reloc=2,class=CODE,delta=1
   112                           	psect	text84,global,reloc=2,class=CODE,delta=1
   113                           	psect	text85,global,reloc=2,class=CODE,delta=1
   114                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=2
   115                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=2
   116                           	psect	text88,global,reloc=2,class=CODE,delta=1
   117                           	psect	text89,global,reloc=2,class=CODE,delta=1
   118                           	psect	text90,global,reloc=2,class=CODE,delta=1
   119                           	psect	text91,global,reloc=2,class=CODE,delta=1
   120                           	psect	text92,global,reloc=2,class=CODE,delta=1
   121                           	psect	text93,global,reloc=2,class=CODE,delta=1
   122                           	psect	text94,global,reloc=2,class=CODE,delta=1
   123                           	psect	text95,global,reloc=2,class=CODE,delta=1
   124                           	psect	text96,global,reloc=2,class=CODE,delta=1
   125                           	psect	text97,global,reloc=2,class=CODE,delta=1
   126                           	psect	text98,global,reloc=2,class=CODE,delta=1
   127                           	psect	text99,global,reloc=2,class=CODE,delta=1
   128                           	psect	text100,global,reloc=2,class=CODE,delta=1
   129                           	psect	text101,global,reloc=2,class=CODE,delta=1
   130                           	psect	text102,global,reloc=2,class=CODE,delta=1
   131                           	psect	text103,global,reloc=2,class=CODE,delta=1
   132                           	psect	text104,global,reloc=2,class=CODE,delta=1
   133                           	psect	text105,global,reloc=2,class=CODE,delta=1
   134                           	psect	text106,global,reloc=2,class=CODE,delta=1
   135                           	psect	text107,global,reloc=2,class=CODE,delta=1
   136                           	psect	text108,global,reloc=2,class=CODE,delta=1
   137                           	psect	text109,global,reloc=2,class=CODE,delta=1
   138                           	psect	text110,global,reloc=2,class=CODE,delta=1
   139                           	psect	text111,global,reloc=2,class=CODE,delta=1
   140                           	psect	text112,global,reloc=2,class=CODE,delta=1,group=2
   141                           	psect	text113,global,reloc=2,class=CODE,delta=1
   142                           	psect	text114,global,reloc=2,class=CODE,delta=1,group=2
   143                           	psect	text115,global,reloc=2,class=CODE,delta=1,group=2
   144                           	psect	text116,global,reloc=2,class=CODE,delta=1,group=2
   145                           	psect	text117,global,reloc=2,class=CODE,delta=1,group=2
   146                           	psect	text118,global,reloc=2,class=CODE,delta=1,group=2
   147                           	psect	text119,global,reloc=2,class=CODE,delta=1,group=2
   148                           	psect	text120,global,reloc=2,class=CODE,delta=1,group=2
   149                           	psect	text121,global,reloc=2,class=CODE,delta=1
   150                           	psect	text122,global,reloc=2,class=CODE,delta=1
   151                           	psect	text123,global,reloc=2,class=CODE,delta=1
   152                           	psect	text124,global,reloc=2,class=CODE,delta=1
   153                           	psect	text125,global,reloc=2,class=CODE,delta=1
   154                           	psect	text126,global,reloc=2,class=CODE,delta=1
   155                           	psect	text127,global,reloc=2,class=CODE,delta=1
   156                           	psect	text128,global,reloc=2,class=CODE,delta=1
   157                           	psect	text129,global,reloc=2,class=CODE,delta=1,group=1
   158                           	psect	text130,global,reloc=2,class=CODE,delta=1,group=1
   159                           	psect	text131,global,reloc=2,class=CODE,delta=1,group=1
   160                           	psect	text132,global,reloc=2,class=CODE,delta=1
   161                           	psect	text133,global,reloc=2,class=CODE,delta=1,group=2
   162                           	psect	text134,global,reloc=2,class=CODE,delta=1
   163                           	psect	text135,global,reloc=2,class=CODE,delta=1,group=2
   164                           	psect	text136,global,reloc=2,class=CODE,delta=1
   165                           	psect	text137,global,reloc=2,class=CODE,delta=1
   166                           	psect	text138,global,reloc=2,class=CODE,delta=1
   167                           	psect	text139,global,reloc=2,class=CODE,delta=1
   168                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   169                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   170                           	psect	text141,global,reloc=2,class=CODE,delta=1
   171                           	psect	text142,global,reloc=2,class=CODE,delta=1
   172                           	psect	text143,global,reloc=2,class=CODE,delta=1
   173                           	psect	text144,global,reloc=2,class=CODE,delta=1
   174                           	psect	text145,global,reloc=2,class=CODE,delta=1
   175                           	psect	text146,global,reloc=2,class=CODE,delta=1
   176                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   177                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   178                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   179  0000                     
   180                           ; Version 1.45
   181                           ; Generated 16/11/2017 GMT
   182                           ; 
   183                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   184                           ; All rights reserved.
   185                           ; 
   186                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   187                           ; 
   188                           ; Redistribution and use in source and binary forms, with or without modification, are
   189                           ; permitted provided that the following conditions are met:
   190                           ; 
   191                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   192                           ;        conditions and the following disclaimer.
   193                           ; 
   194                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   195                           ;        of conditions and the following disclaimer in the documentation and/or other
   196                           ;        materials provided with the distribution.
   197                           ; 
   198                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   199                           ;        software without specific prior written permission.
   200                           ; 
   201                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   202                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   203                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   204                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   205                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   206                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   207                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   208                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   209                           ; 
   210                           ; 
   211                           ; Code-generator required, PIC18F4680 Definitions
   212                           ; 
   213                           ; SFR Addresses
   214  0000                     
   215                           	psect	eeprom_data
   216  F00000  00 24 00 32 FF FF FF FF 	db	0,36,0,50,255,255,255,255	;# 
   217  0000                     
   218 ;;___awdiv@quotient	offset	0
   219 ;;___awdiv@sign	offset	2
   220 ;;___awdiv@counter	offset	3
   221 ;;___awdiv@dividend	offset=-2 (param)
   222 ;;___awdiv@divisor	offset=-4 (param)
   223 ;;noteOn@channel	offset=-1 (param)
   224 ;;noteOn@pitch	offset=-2 (param)
   225 ;;noteOn@velocity	offset=-3 (param)
   226 ;;random_pitches_non_repeating@randomIndex	offset	0
   227 ;;random_pitches_non_repeating@temp	offset	1
   228 ;;random_pitches_non_repeating@i	offset	2
   229 ;;random_pitches@random_array_index	offset	0
   230 ;;random_pitches@i	offset	1
   231 ;;___awmod@sign	offset	0
   232 ;;___awmod@counter	offset	1
   233 ;;___awmod@dividend	offset=-2 (param)
   234 ;;___awmod@divisor	offset=-4 (param)
   235 ;;noteOff@channel	offset=-1 (param)
   236 ;;noteOff@pitch	offset=-2 (param)
   237 ;;noteOff@velocity	offset=-3 (param)
   238 ;;sendUSB@ii	offset	0
   239 ;;sendUSB@i	offset	1
   240 ;;sendUSB@midiMessage	offset	2
   241 ;;sendUSB@message1	offset=-1 (param)
   242 ;;sendUSB@message2	offset=-2 (param)
   243 ;;sendUSB@message3	offset=-3 (param)
   244 ;;sendOut@i	offset	0
   245 ;;sendOut@midiMessage	offset	1
   246 ;;sendOut@number_of_midi_message_bytes	offset	4
   247 ;;sendOut@message1	offset=-1 (param)
   248 ;;sendOut@message2	offset=-2 (param)
   249 ;;sendOut@message3	offset=-3 (param)
   250 ;;___lbmod@rem	offset	0
   251 ;;___lbmod@counter	offset	1
   252 ;;___lbmod@dividend	offset=-1 (param)
   253 ;;___lbmod@divisor	offset=-2 (param)
   254 ;;___lmul@product	offset	0
   255 ;;___lmul@multiplier	offset=-4 (param)
   256 ;;___lmul@multiplicand	offset=-8 (param)
   257 ;;random_pitches_non_repeating@randomIndex	offset	0
   258 ;;random_pitches_non_repeating@temp	offset	1
   259 ;;random_pitches_non_repeating@i	offset	2
   260 ;;random_pitches@random_array_index	offset	0
   261 ;;random_pitches@i	offset	1
   262 ;;___lmul@product	offset	0
   263 ;;___lmul@multiplier	offset=-4 (param)
   264 ;;___lmul@multiplicand	offset=-8 (param)
   265 ;;noteOn@channel	offset=-1 (param)
   266 ;;noteOn@pitch	offset=-2 (param)
   267 ;;noteOn@velocity	offset=-3 (param)
   268 ;;noteOff@channel	offset=-1 (param)
   269 ;;noteOff@pitch	offset=-2 (param)
   270 ;;noteOff@velocity	offset=-3 (param)
   271 ;;sendUSB@ii	offset	0
   272 ;;sendUSB@i	offset	1
   273 ;;sendUSB@midiMessage	offset	2
   274 ;;sendUSB@message1	offset=-1 (param)
   275 ;;sendUSB@message2	offset=-2 (param)
   276 ;;sendUSB@message3	offset=-3 (param)
   277 ;;sendOut@i	offset	0
   278 ;;sendOut@midiMessage	offset	1
   279 ;;sendOut@number_of_midi_message_bytes	offset	4
   280 ;;sendOut@message1	offset=-1 (param)
   281 ;;sendOut@message2	offset=-2 (param)
   282 ;;sendOut@message3	offset=-3 (param)
   283 ;;___awmod@sign	offset	0
   284 ;;___awmod@counter	offset	1
   285 ;;___awmod@dividend	offset=-2 (param)
   286 ;;___awmod@divisor	offset=-4 (param)
   287 ;;___awdiv@quotient	offset	0
   288 ;;___awdiv@sign	offset	2
   289 ;;___awdiv@counter	offset	3
   290 ;;___awdiv@dividend	offset=-2 (param)
   291 ;;___awdiv@divisor	offset=-4 (param)
   292 ;;___lbmod@rem	offset	0
   293 ;;___lbmod@counter	offset	1
   294 ;;___lbmod@dividend	offset=-1 (param)
   295 ;;___lbmod@divisor	offset=-2 (param)
   296                           
   297                           	psect	idataCOMRAM
   298  0099DF                     __pidataCOMRAM:
   299                           	opt stack 0
   300                           
   301                           ;initializer for _number_to_display
   302  0099DF  FF80               	dw	65408
   303                           
   304                           ;initializer for _NOTE_LENGTH_PULSES
   305  0099E1  0C                 	db	12
   306                           
   307                           ;initializer for _OCTAVES
   308  0099E2  03                 	db	3
   309                           
   310                           ;initializer for _which_screen
   311  0099E3  02                 	db	2
   312                           
   313                           ;initializer for _octave
   314  0099E4  04                 	db	4
   315                           
   316                           ;initializer for _velocity
   317  0099E5  7F                 	db	127
   318                           
   319                           ;initializer for _drumchannel
   320  0099E6  09                 	db	9
   321                           
   322                           	psect	idataBANK0
   323  0099D4                     __pidataBANK0:
   324                           	opt stack 0
   325                           
   326                           ;initializer for _DRUM_CC
   327  0099D4  50                 	db	80
   328  0099D5  51                 	db	81
   329  0099D6  52                 	db	82
   330  0099D7  53                 	db	83
   331  0099D8  55                 	db	85
   332  0099D9  56                 	db	86
   333  0099DA  57                 	db	87
   334  0099DB  58                 	db	88
   335                           
   336                           ;initializer for _iterator_focus
   337  0099DC  FF                 	db	255
   338                           
   339                           ;initializer for _ema_integer
   340  0099DD  32                 	db	50
   341                           
   342                           ;initializer for _BPM
   343  0099DE  78                 	db	120
   344                           
   345                           	psect	idataBANK1
   346  00993C                     __pidataBANK1:
   347                           	opt stack 0
   348                           
   349                           ;initializer for _DRUM_NOTE
   350  00993C  24                 	db	36
   351  00993D  26                 	db	38
   352  00993E  27                 	db	39
   353  00993F  28                 	db	40
   354  009940  2A                 	db	42
   355  009941  2E                 	db	46
   356  009942  31                 	db	49
   357  009943  36                 	db	54
   358                           
   359                           ;initializer for _randx
   360  009944  0001               	dw	1
   361  009946  0000               	dw	0
   362                           
   363                           ;initializer for _HYST_VAL
   364  009948  0020               	dw	32
   365                           
   366                           ;initializer for _PRESCALER
   367  00994A  04                 	db	4
   368                           
   369                           ;initializer for _PPQN
   370  00994B  30                 	db	48
   371                           
   372                           ;initializer for _command
   373  00994C  80                 	db	128
   374                           
   375                           ;initializer for _string_to_display
   376  00994D  74                 	db	116
   377  00994E  45                 	db	69
   378  00994F  53                 	db	83
   379  009950  74                 	db	116
   380  009951  00                 	db	0
   381                           
   382                           ;initializer for _major_triad
   383  009952  00                 	db	0
   384  009953  04                 	db	4
   385  009954  07                 	db	7
   386                           
   387                           	psect	idataBANK2
   388  00907A                     __pidataBANK2:
   389                           	opt stack 0
   390                           
   391                           ;initializer for _inputPotsArray
   392  00907A  00                 	db	0
   393  00907B  46                 	db	70
   394  00907C  10                 	db	16
   395  00907D  00                 	db	0
   396  00907E  47                 	db	71
   397  00907F  11                 	db	17
   398  009080  00                 	db	0
   399  009081  48                 	db	72
   400  009082  12                 	db	18
   401  009083  00                 	db	0
   402  009084  49                 	db	73
   403  009085  13                 	db	19
   404  009086  00                 	db	0
   405  009087  4A                 	db	74
   406  009088  14                 	db	20
   407  009089  00                 	db	0
   408  00908A  4B                 	db	75
   409  00908B  15                 	db	21
   410  00908C  00                 	db	0
   411  00908D  4C                 	db	76
   412  00908E  16                 	db	22
   413  00908F  00                 	db	0
   414  009090  66                 	db	102
   415  009091  17                 	db	23
   416  009092  00                 	db	0
   417  009093  67                 	db	103
   418  009094  18                 	db	24
   419  009095  00                 	db	0
   420  009096  68                 	db	104
   421  009097  19                 	db	25
   422  009098  00                 	db	0
   423  009099  6A                 	db	106
   424  00909A  1A                 	db	26
   425  00909B  00                 	db	0
   426  00909C  6B                 	db	107
   427  00909D  1B                 	db	27
   428  00909E  00                 	db	0
   429  00909F  6C                 	db	108
   430  0090A0  1C                 	db	28
   431  0090A1  00                 	db	0
   432  0090A2  6D                 	db	109
   433  0090A3  1D                 	db	29
   434  0090A4  00                 	db	0
   435  0090A5  FD                 	db	253
   436  0090A6  FD                 	db	253
   437  0090A7  00                 	db	0
   438  0090A8  FE                 	db	254
   439  0090A9  FE                 	db	254
   440                           
   441                           ;initializer for _NOTE_LENGTH_PULSES_ARRAY
   442  0090AA  30                 	db	48
   443  0090AB  48                 	db	72
   444  0090AC  20                 	db	32
   445  0090AD  18                 	db	24
   446  0090AE  24                 	db	36
   447  0090AF  10                 	db	16
   448  0090B0  0C                 	db	12
   449  0090B1  12                 	db	18
   450  0090B2  08                 	db	8
   451  0090B3  06                 	db	6
   452  0090B4  09                 	db	9
   453  0090B5  04                 	db	4
   454                           
   455                           ;initializer for _number_of_interrupts
   456  0090B6  007D               	dw	125
   457  0090B8  0000               	dw	0
   458                           
   459                           ;initializer for _diminished_7th
   460  0090BA  00                 	db	0
   461  0090BB  03                 	db	3
   462  0090BC  06                 	db	6
   463  0090BD  09                 	db	9
   464                           
   465                           ;initializer for _half_diminished_7th
   466  0090BE  00                 	db	0
   467  0090BF  03                 	db	3
   468  0090C0  06                 	db	6
   469  0090C1  0A                 	db	10
   470                           
   471                           ;initializer for _minor_7th
   472  0090C2  00                 	db	0
   473  0090C3  03                 	db	3
   474  0090C4  07                 	db	7
   475  0090C5  0A                 	db	10
   476                           
   477                           ;initializer for _major_7th
   478  0090C6  00                 	db	0
   479  0090C7  04                 	db	4
   480  0090C8  07                 	db	7
   481  0090C9  0B                 	db	11
   482                           
   483                           ;initializer for _dominant_7th
   484  0090CA  00                 	db	0
   485  0090CB  04                 	db	4
   486  0090CC  07                 	db	7
   487  0090CD  0A                 	db	10
   488                           
   489                           ;initializer for _diminished_triad
   490  0090CE  00                 	db	0
   491  0090CF  03                 	db	3
   492  0090D0  06                 	db	6
   493                           
   494                           ;initializer for _augmented_triad
   495  0090D1  00                 	db	0
   496  0090D2  04                 	db	4
   497  0090D3  08                 	db	8
   498                           
   499                           ;initializer for _minor_triad
   500  0090D4  00                 	db	0
   501  0090D5  03                 	db	3
   502  0090D6  07                 	db	7
   503                           
   504                           	psect	idataBANK3
   505  008DBE                     __pidataBANK3:
   506                           	opt stack 0
   507                           
   508                           ;initializer for _menuArray
   509  008DBE  08                 	db	8
   510  008DBF  00                 	db	0
   511  008DC0  00                 	db	0
   512  008DC1  0C                 	db	12
   513  008DC2  00                 	db	0
   514  008DC3  00                 	db	0
   515  008DC4  07                 	db	7
   516  008DC5  00                 	db	0
   517  008DC6  00                 	db	0
   518  008DC7  04                 	db	4
   519  008DC8  00                 	db	0
   520  008DC9  00                 	db	0
   521  008DCA  05                 	db	5
   522  008DCB  00                 	db	0
   523  008DCC  00                 	db	0
   524  008DCD  02                 	db	2
   525  008DCE  00                 	db	0
   526  008DCF  00                 	db	0
   527  008DD0  05                 	db	5
   528  008DD1  00                 	db	0
   529  008DD2  00                 	db	0
   530  008DD3  02                 	db	2
   531  008DD4  00                 	db	0
   532  008DD5  00                 	db	0
   533  008DD6  08                 	db	8
   534  008DD7  00                 	db	0
   535  008DD8  00                 	db	0
   536  008DD9  08                 	db	8
   537  008DDA  00                 	db	0
   538  008DDB  00                 	db	0
   539  008DDC  05                 	db	5
   540  008DDD  00                 	db	0
   541  008DDE  00                 	db	0
   542  008DDF  02                 	db	2
   543  008DE0  00                 	db	0
   544  008DE1  00                 	db	0
   545  008DE2  07                 	db	7
   546  008DE3  00                 	db	0
   547  008DE4  00                 	db	0
   548  008DE5  07                 	db	7
   549  008DE6  00                 	db	0
   550  008DE7  00                 	db	0
   551  008DE8  02                 	db	2
   552  008DE9  00                 	db	0
   553  008DEA  00                 	db	0
   554  008DEB  02                 	db	2
   555  008DEC  00                 	db	0
   556  008DED  00                 	db	0
   557  008DEE  05                 	db	5
   558  008DEF  00                 	db	0
   559  008DF0  00                 	db	0
   560  008DF1  05                 	db	5
   561  008DF2  00                 	db	0
   562  008DF3  00                 	db	0
   563  008DF4  02                 	db	2
   564  008DF5  00                 	db	0
   565  008DF6  00                 	db	0
   566  008DF7  09                 	db	9
   567  008DF8  00                 	db	0
   568  008DF9  00                 	db	0
   569  008DFA  02                 	db	2
   570  008DFB  00                 	db	0
   571  008DFC  00                 	db	0
   572  008DFD  07                 	db	7
   573  008DFE  00                 	db	0
   574  008DFF  00                 	db	0
   575  008E00  0C                 	db	12
   576  008E01  00                 	db	0
   577  008E02  00                 	db	0
   578  008E03  02                 	db	2
   579  008E04  00                 	db	0
   580  008E05  00                 	db	0
   581  008E06  01                 	db	1
   582  008E07  00                 	db	0
   583  008E08  00                 	db	0
   584  008E09  01                 	db	1
   585  008E0A  00                 	db	0
   586  008E0B  00                 	db	0
   587  008E0C  01                 	db	1
   588  008E0D  00                 	db	0
   589  008E0E  00                 	db	0
   590  008E0F  02                 	db	2
   591  008E10  00                 	db	0
   592  008E11  00                 	db	0
   593  008E12  01                 	db	1
   594  008E13  00                 	db	0
   595  008E14  00                 	db	0
   596  008E15  01                 	db	1
   597  008E16  00                 	db	0
   598  008E17  00                 	db	0
   599  008E18  04                 	db	4
   600  008E19  00                 	db	0
   601  008E1A  00                 	db	0
   602  008E1B  01                 	db	1
   603  008E1C  00                 	db	0
   604  008E1D  00                 	db	0
   605  008E1E  01                 	db	1
   606  008E1F  00                 	db	0
   607  008E20  00                 	db	0
   608  008E21  01                 	db	1
   609  008E22  00                 	db	0
   610  008E23  00                 	db	0
   611  008E24  01                 	db	1
   612  008E25  00                 	db	0
   613  008E26  00                 	db	0
   614                           
   615                           	psect	mediumconst
   616  00E8C2                     __pmediumconst:
   617                           	opt stack 0
   618  00E8C2  00                 	db	0
   619  00E8C3  4B                 	db	75
   620  00E8C4  45                 	db	69
   621  00E8C5  59                 	db	89
   622  00E8C6  42                 	db	66
   623  00E8C7  4F                 	db	79
   624  00E8C8  41                 	db	65
   625  00E8C9  52                 	db	82
   626  00E8CA  44                 	db	68
   627  00E8CB  20                 	db	32
   628  00E8CC  4D                 	db	77
   629  00E8CD  4F                 	db	79
   630  00E8CE  44                 	db	68
   631  00E8CF  45                 	db	69
   632  00E8D0  3A                 	db	58
   633  00E8D1  00                 	db	0
   634  00E8D2  00                 	db	0
   635  00E8D3  00                 	db	0
   636  00E8D4  41                 	db	65
   637  00E8D5  52                 	db	82
   638  00E8D6  50                 	db	80
   639  00E8D7  45                 	db	69
   640  00E8D8  47                 	db	71
   641  00E8D9  47                 	db	71
   642  00E8DA  49                 	db	73
   643  00E8DB  4F                 	db	79
   644  00E8DC  20                 	db	32
   645  00E8DD  4D                 	db	77
   646  00E8DE  45                 	db	69
   647  00E8DF  4E                 	db	78
   648  00E8E0  55                 	db	85
   649  00E8E1  3A                 	db	58
   650  00E8E2  00                 	db	0
   651  00E8E3  00                 	db	0
   652  00E8E4  00                 	db	0
   653  00E8E5  54                 	db	84
   654  00E8E6  52                 	db	82
   655  00E8E7  41                 	db	65
   656  00E8E8  4E                 	db	78
   657  00E8E9  53                 	db	83
   658  00E8EA  50                 	db	80
   659  00E8EB  4F                 	db	79
   660  00E8EC  53                 	db	83
   661  00E8ED  45                 	db	69
   662  00E8EE  20                 	db	32
   663  00E8EF  4D                 	db	77
   664  00E8F0  4F                 	db	79
   665  00E8F1  44                 	db	68
   666  00E8F2  45                 	db	69
   667  00E8F3  3A                 	db	58
   668  00E8F4  00                 	db	0
   669  00E8F5  00                 	db	0
   670  00E8F6  44                 	db	68
   671  00E8F7  52                 	db	82
   672  00E8F8  55                 	db	85
   673  00E8F9  4D                 	db	77
   674  00E8FA  20                 	db	32
   675  00E8FB  4D                 	db	77
   676  00E8FC  4F                 	db	79
   677  00E8FD  44                 	db	68
   678  00E8FE  45                 	db	69
   679  00E8FF  3A                 	db	58
   680  00E900  00                 	db	0
   681  00E901  00                 	db	0
   682  00E902  00                 	db	0
   683  00E903  00                 	db	0
   684  00E904  00                 	db	0
   685  00E905  00                 	db	0
   686  00E906  00                 	db	0
   687  00E907  50                 	db	80
   688  00E908  4F                 	db	79
   689  00E909  54                 	db	84
   690  00E90A  53                 	db	83
   691  00E90B  20                 	db	32
   692  00E90C  4D                 	db	77
   693  00E90D  4F                 	db	79
   694  00E90E  44                 	db	68
   695  00E90F  45                 	db	69
   696  00E910  3A                 	db	58
   697  00E911  00                 	db	0
   698  00E912  00                 	db	0
   699  00E913  00                 	db	0
   700  00E914  00                 	db	0
   701  00E915  00                 	db	0
   702  00E916  00                 	db	0
   703  00E917  00                 	db	0
   704  00E918  4D                 	db	77
   705  00E919  49                 	db	73
   706  00E91A  44                 	db	68
   707  00E91B  49                 	db	73
   708  00E91C  20                 	db	32
   709  00E91D  43                 	db	67
   710  00E91E  48                 	db	72
   711  00E91F  41                 	db	65
   712  00E920  4E                 	db	78
   713  00E921  4E                 	db	78
   714  00E922  45                 	db	69
   715  00E923  4C                 	db	76
   716  00E924  53                 	db	83
   717  00E925  3A                 	db	58
   718  00E926  00                 	db	0
   719  00E927  00                 	db	0
   720  00E928  00                 	db	0
   721  00E929  50                 	db	80
   722  00E92A  52                 	db	82
   723  00E92B  4F                 	db	79
   724  00E92C  47                 	db	71
   725  00E92D  52                 	db	82
   726  00E92E  41                 	db	65
   727  00E92F  4D                 	db	77
   728  00E930  20                 	db	32
   729  00E931  43                 	db	67
   730  00E932  48                 	db	72
   731  00E933  41                 	db	65
   732  00E934  4E                 	db	78
   733  00E935  47                 	db	71
   734  00E936  45                 	db	69
   735  00E937  3A                 	db	58
   736  00E938  00                 	db	0
   737  00E939  00                 	db	0
   738  00E93A  45                 	db	69
   739  00E93B  45                 	db	69
   740  00E93C  50                 	db	80
   741  00E93D  52                 	db	82
   742  00E93E  4F                 	db	79
   743  00E93F  4D                 	db	77
   744  00E940  20                 	db	32
   745  00E941  4D                 	db	77
   746  00E942  45                 	db	69
   747  00E943  4E                 	db	78
   748  00E944  55                 	db	85
   749  00E945  3A                 	db	58
   750  00E946  00                 	db	0
   751  00E947  00                 	db	0
   752  00E948  00                 	db	0
   753  00E949  00                 	db	0
   754  00E94A  00                 	db	0
   755  00E94B  43                 	db	67
   756  00E94C  48                 	db	72
   757  00E94D  52                 	db	82
   758  00E94E  4F                 	db	79
   759  00E94F  4D                 	db	77
   760  00E950  41                 	db	65
   761  00E951  54                 	db	84
   762  00E952  49                 	db	73
   763  00E953  43                 	db	67
   764  00E954  00                 	db	0
   765  00E955  00                 	db	0
   766  00E956  00                 	db	0
   767  00E957  00                 	db	0
   768  00E958  00                 	db	0
   769  00E959  00                 	db	0
   770  00E95A  00                 	db	0
   771  00E95B  00                 	db	0
   772  00E95C  4D                 	db	77
   773  00E95D  41                 	db	65
   774  00E95E  4A                 	db	74
   775  00E95F  4F                 	db	79
   776  00E960  52                 	db	82
   777  00E961  00                 	db	0
   778  00E962  00                 	db	0
   779  00E963  00                 	db	0
   780  00E964  00                 	db	0
   781  00E965  00                 	db	0
   782  00E966  00                 	db	0
   783  00E967  00                 	db	0
   784  00E968  00                 	db	0
   785  00E969  00                 	db	0
   786  00E96A  00                 	db	0
   787  00E96B  00                 	db	0
   788  00E96C  00                 	db	0
   789  00E96D  4D                 	db	77
   790  00E96E  49                 	db	73
   791  00E96F  4E                 	db	78
   792  00E970  4F                 	db	79
   793  00E971  52                 	db	82
   794  00E972  00                 	db	0
   795  00E973  00                 	db	0
   796  00E974  00                 	db	0
   797  00E975  00                 	db	0
   798  00E976  00                 	db	0
   799  00E977  00                 	db	0
   800  00E978  00                 	db	0
   801  00E979  00                 	db	0
   802  00E97A  00                 	db	0
   803  00E97B  00                 	db	0
   804  00E97C  00                 	db	0
   805  00E97D  00                 	db	0
   806  00E97E  4D                 	db	77
   807  00E97F  4F                 	db	79
   808  00E980  44                 	db	68
   809  00E981  45                 	db	69
   810  00E982  53                 	db	83
   811  00E983  00                 	db	0
   812  00E984  00                 	db	0
   813  00E985  00                 	db	0
   814  00E986  00                 	db	0
   815  00E987  00                 	db	0
   816  00E988  00                 	db	0
   817  00E989  00                 	db	0
   818  00E98A  00                 	db	0
   819  00E98B  00                 	db	0
   820  00E98C  00                 	db	0
   821  00E98D  00                 	db	0
   822  00E98E  00                 	db	0
   823  00E98F  50                 	db	80
   824  00E990  45                 	db	69
   825  00E991  4E                 	db	78
   826  00E992  54                 	db	84
   827  00E993  41                 	db	65
   828  00E994  54                 	db	84
   829  00E995  4F                 	db	79
   830  00E996  4E                 	db	78
   831  00E997  49                 	db	73
   832  00E998  43                 	db	67
   833  00E999  20                 	db	32
   834  00E99A  4D                 	db	77
   835  00E99B  41                 	db	65
   836  00E99C  4A                 	db	74
   837  00E99D  4F                 	db	79
   838  00E99E  52                 	db	82
   839  00E99F  00                 	db	0
   840  00E9A0  50                 	db	80
   841  00E9A1  45                 	db	69
   842  00E9A2  4E                 	db	78
   843  00E9A3  54                 	db	84
   844  00E9A4  41                 	db	65
   845  00E9A5  54                 	db	84
   846  00E9A6  4F                 	db	79
   847  00E9A7  4E                 	db	78
   848  00E9A8  49                 	db	73
   849  00E9A9  43                 	db	67
   850  00E9AA  20                 	db	32
   851  00E9AB  4D                 	db	77
   852  00E9AC  49                 	db	73
   853  00E9AD  4E                 	db	78
   854  00E9AE  4F                 	db	79
   855  00E9AF  52                 	db	82
   856  00E9B0  00                 	db	0
   857  00E9B1  54                 	db	84
   858  00E9B2  52                 	db	82
   859  00E9B3  49                 	db	73
   860  00E9B4  41                 	db	65
   861  00E9B5  44                 	db	68
   862  00E9B6  00                 	db	0
   863  00E9B7  00                 	db	0
   864  00E9B8  00                 	db	0
   865  00E9B9  00                 	db	0
   866  00E9BA  00                 	db	0
   867  00E9BB  00                 	db	0
   868  00E9BC  00                 	db	0
   869  00E9BD  00                 	db	0
   870  00E9BE  00                 	db	0
   871  00E9BF  00                 	db	0
   872  00E9C0  00                 	db	0
   873  00E9C1  00                 	db	0
   874  00E9C2  44                 	db	68
   875  00E9C3  49                 	db	73
   876  00E9C4  41                 	db	65
   877  00E9C5  54                 	db	84
   878  00E9C6  4F                 	db	79
   879  00E9C7  4E                 	db	78
   880  00E9C8  49                 	db	73
   881  00E9C9  43                 	db	67
   882  00E9CA  20                 	db	32
   883  00E9CB  54                 	db	84
   884  00E9CC  20                 	db	32
   885  00E9CD  4D                 	db	77
   886  00E9CE  41                 	db	65
   887  00E9CF  4A                 	db	74
   888  00E9D0  4F                 	db	79
   889  00E9D1  52                 	db	82
   890  00E9D2  00                 	db	0
   891  00E9D3  44                 	db	68
   892  00E9D4  49                 	db	73
   893  00E9D5  41                 	db	65
   894  00E9D6  54                 	db	84
   895  00E9D7  4F                 	db	79
   896  00E9D8  4E                 	db	78
   897  00E9D9  49                 	db	73
   898  00E9DA  43                 	db	67
   899  00E9DB  20                 	db	32
   900  00E9DC  54                 	db	84
   901  00E9DD  20                 	db	32
   902  00E9DE  4D                 	db	77
   903  00E9DF  49                 	db	73
   904  00E9E0  4E                 	db	78
   905  00E9E1  4F                 	db	79
   906  00E9E2  52                 	db	82
   907  00E9E3  00                 	db	0
   908  00E9E4  53                 	db	83
   909  00E9E5  45                 	db	69
   910  00E9E6  56                 	db	86
   911  00E9E7  45                 	db	69
   912  00E9E8  4E                 	db	78
   913  00E9E9  54                 	db	84
   914  00E9EA  48                 	db	72
   915  00E9EB  00                 	db	0
   916  00E9EC  00                 	db	0
   917  00E9ED  00                 	db	0
   918  00E9EE  00                 	db	0
   919  00E9EF  00                 	db	0
   920  00E9F0  00                 	db	0
   921  00E9F1  00                 	db	0
   922  00E9F2  00                 	db	0
   923  00E9F3  00                 	db	0
   924  00E9F4  00                 	db	0
   925  00E9F5  44                 	db	68
   926  00E9F6  49                 	db	73
   927  00E9F7  41                 	db	65
   928  00E9F8  54                 	db	84
   929  00E9F9  4F                 	db	79
   930  00E9FA  4E                 	db	78
   931  00E9FB  49                 	db	73
   932  00E9FC  43                 	db	67
   933  00E9FD  20                 	db	32
   934  00E9FE  37                 	db	55
   935  00E9FF  20                 	db	32
   936  00EA00  4D                 	db	77
   937  00EA01  41                 	db	65
   938  00EA02  4A                 	db	74
   939  00EA03  4F                 	db	79
   940  00EA04  52                 	db	82
   941  00EA05  00                 	db	0
   942  00EA06  44                 	db	68
   943  00EA07  49                 	db	73
   944  00EA08  41                 	db	65
   945  00EA09  54                 	db	84
   946  00EA0A  4F                 	db	79
   947  00EA0B  4E                 	db	78
   948  00EA0C  49                 	db	73
   949  00EA0D  43                 	db	67
   950  00EA0E  20                 	db	32
   951  00EA0F  37                 	db	55
   952  00EA10  20                 	db	32
   953  00EA11  4D                 	db	77
   954  00EA12  49                 	db	73
   955  00EA13  4E                 	db	78
   956  00EA14  4F                 	db	79
   957  00EA15  52                 	db	82
   958  00EA16  00                 	db	0
   959  00EA17  69                 	db	105
   960  00EA18  6F                 	db	111
   961  00EA19  6E                 	db	110
   962  00EA1A  69                 	db	105
   963  00EA1B  61                 	db	97
   964  00EA1C  6E                 	db	110
   965  00EA1D  00                 	db	0
   966  00EA1E  00                 	db	0
   967  00EA1F  00                 	db	0
   968  00EA20  00                 	db	0
   969  00EA21  00                 	db	0
   970  00EA22  00                 	db	0
   971  00EA23  00                 	db	0
   972  00EA24  00                 	db	0
   973  00EA25  00                 	db	0
   974  00EA26  00                 	db	0
   975  00EA27  00                 	db	0
   976  00EA28  64                 	db	100
   977  00EA29  6F                 	db	111
   978  00EA2A  72                 	db	114
   979  00EA2B  69                 	db	105
   980  00EA2C  61                 	db	97
   981  00EA2D  6E                 	db	110
   982  00EA2E  00                 	db	0
   983  00EA2F  00                 	db	0
   984  00EA30  00                 	db	0
   985  00EA31  00                 	db	0
   986  00EA32  00                 	db	0
   987  00EA33  00                 	db	0
   988  00EA34  00                 	db	0
   989  00EA35  00                 	db	0
   990  00EA36  00                 	db	0
   991  00EA37  00                 	db	0
   992  00EA38  00                 	db	0
   993  00EA39  70                 	db	112
   994  00EA3A  68                 	db	104
   995  00EA3B  72                 	db	114
   996  00EA3C  79                 	db	121
   997  00EA3D  67                 	db	103
   998  00EA3E  69                 	db	105
   999  00EA3F  61                 	db	97
  1000  00EA40  6E                 	db	110
  1001  00EA41  00                 	db	0
  1002  00EA42  00                 	db	0
  1003  00EA43  00                 	db	0
  1004  00EA44  00                 	db	0
  1005  00EA45  00                 	db	0
  1006  00EA46  00                 	db	0
  1007  00EA47  00                 	db	0
  1008  00EA48  00                 	db	0
  1009  00EA49  00                 	db	0
  1010  00EA4A  6C                 	db	108
  1011  00EA4B  79                 	db	121
  1012  00EA4C  64                 	db	100
  1013  00EA4D  69                 	db	105
  1014  00EA4E  61                 	db	97
  1015  00EA4F  6E                 	db	110
  1016  00EA50  00                 	db	0
  1017  00EA51  00                 	db	0
  1018  00EA52  00                 	db	0
  1019  00EA53  00                 	db	0
  1020  00EA54  00                 	db	0
  1021  00EA55  00                 	db	0
  1022  00EA56  00                 	db	0
  1023  00EA57  00                 	db	0
  1024  00EA58  00                 	db	0
  1025  00EA59  00                 	db	0
  1026  00EA5A  00                 	db	0
  1027  00EA5B  6D                 	db	109
  1028  00EA5C  69                 	db	105
  1029  00EA5D  78                 	db	120
  1030  00EA5E  6F                 	db	111
  1031  00EA5F  6C                 	db	108
  1032  00EA60  79                 	db	121
  1033  00EA61  64                 	db	100
  1034  00EA62  69                 	db	105
  1035  00EA63  61                 	db	97
  1036  00EA64  6E                 	db	110
  1037  00EA65  00                 	db	0
  1038  00EA66  00                 	db	0
  1039  00EA67  00                 	db	0
  1040  00EA68  00                 	db	0
  1041  00EA69  00                 	db	0
  1042  00EA6A  00                 	db	0
  1043  00EA6B  00                 	db	0
  1044  00EA6C  61                 	db	97
  1045  00EA6D  65                 	db	101
  1046  00EA6E  6F                 	db	111
  1047  00EA6F  6C                 	db	108
  1048  00EA70  69                 	db	105
  1049  00EA71  61                 	db	97
  1050  00EA72  6E                 	db	110
  1051  00EA73  00                 	db	0
  1052  00EA74  00                 	db	0
  1053  00EA75  00                 	db	0
  1054  00EA76  00                 	db	0
  1055  00EA77  00                 	db	0
  1056  00EA78  00                 	db	0
  1057  00EA79  00                 	db	0
  1058  00EA7A  00                 	db	0
  1059  00EA7B  00                 	db	0
  1060  00EA7C  00                 	db	0
  1061  00EA7D  6C                 	db	108
  1062  00EA7E  6F                 	db	111
  1063  00EA7F  63                 	db	99
  1064  00EA80  72                 	db	114
  1065  00EA81  69                 	db	105
  1066  00EA82  61                 	db	97
  1067  00EA83  6E                 	db	110
  1068  00EA84  00                 	db	0
  1069  00EA85  00                 	db	0
  1070  00EA86  00                 	db	0
  1071  00EA87  00                 	db	0
  1072  00EA88  00                 	db	0
  1073  00EA89  00                 	db	0
  1074  00EA8A  00                 	db	0
  1075  00EA8B  00                 	db	0
  1076  00EA8C  00                 	db	0
  1077  00EA8D  00                 	db	0
  1078  00EA8E  6D                 	db	109
  1079  00EA8F  61                 	db	97
  1080  00EA90  6A                 	db	106
  1081  00EA91  6F                 	db	111
  1082  00EA92  72                 	db	114
  1083  00EA93  20                 	db	32
  1084  00EA94  74                 	db	116
  1085  00EA95  72                 	db	114
  1086  00EA96  69                 	db	105
  1087  00EA97  61                 	db	97
  1088  00EA98  64                 	db	100
  1089  00EA99  00                 	db	0
  1090  00EA9A  00                 	db	0
  1091  00EA9B  00                 	db	0
  1092  00EA9C  00                 	db	0
  1093  00EA9D  00                 	db	0
  1094  00EA9E  00                 	db	0
  1095  00EA9F  6D                 	db	109
  1096  00EAA0  69                 	db	105
  1097  00EAA1  6E                 	db	110
  1098  00EAA2  6F                 	db	111
  1099  00EAA3  72                 	db	114
  1100  00EAA4  20                 	db	32
  1101  00EAA5  74                 	db	116
  1102  00EAA6  72                 	db	114
  1103  00EAA7  69                 	db	105
  1104  00EAA8  61                 	db	97
  1105  00EAA9  64                 	db	100
  1106  00EAAA  00                 	db	0
  1107  00EAAB  00                 	db	0
  1108  00EAAC  00                 	db	0
  1109  00EAAD  00                 	db	0
  1110  00EAAE  00                 	db	0
  1111  00EAAF  00                 	db	0
  1112  00EAB0  61                 	db	97
  1113  00EAB1  75                 	db	117
  1114  00EAB2  67                 	db	103
  1115  00EAB3  6D                 	db	109
  1116  00EAB4  65                 	db	101
  1117  00EAB5  6E                 	db	110
  1118  00EAB6  74                 	db	116
  1119  00EAB7  65                 	db	101
  1120  00EAB8  64                 	db	100
  1121  00EAB9  20                 	db	32
  1122  00EABA  74                 	db	116
  1123  00EABB  72                 	db	114
  1124  00EABC  69                 	db	105
  1125  00EABD  61                 	db	97
  1126  00EABE  64                 	db	100
  1127  00EABF  00                 	db	0
  1128  00EAC0  00                 	db	0
  1129  00EAC1  64                 	db	100
  1130  00EAC2  69                 	db	105
  1131  00EAC3  6D                 	db	109
  1132  00EAC4  69                 	db	105
  1133  00EAC5  6E                 	db	110
  1134  00EAC6  69                 	db	105
  1135  00EAC7  73                 	db	115
  1136  00EAC8  68                 	db	104
  1137  00EAC9  65                 	db	101
  1138  00EACA  64                 	db	100
  1139  00EACB  20                 	db	32
  1140  00EACC  74                 	db	116
  1141  00EACD  72                 	db	114
  1142  00EACE  69                 	db	105
  1143  00EACF  61                 	db	97
  1144  00EAD0  64                 	db	100
  1145  00EAD1  00                 	db	0
  1146  00EAD2  64                 	db	100
  1147  00EAD3  6F                 	db	111
  1148  00EAD4  6D                 	db	109
  1149  00EAD5  69                 	db	105
  1150  00EAD6  6E                 	db	110
  1151  00EAD7  61                 	db	97
  1152  00EAD8  6E                 	db	110
  1153  00EAD9  74                 	db	116
  1154  00EADA  20                 	db	32
  1155  00EADB  37                 	db	55
  1156  00EADC  74                 	db	116
  1157  00EADD  68                 	db	104
  1158  00EADE  00                 	db	0
  1159  00EADF  00                 	db	0
  1160  00EAE0  00                 	db	0
  1161  00EAE1  00                 	db	0
  1162  00EAE2  00                 	db	0
  1163  00EAE3  6D                 	db	109
  1164  00EAE4  61                 	db	97
  1165  00EAE5  6A                 	db	106
  1166  00EAE6  6F                 	db	111
  1167  00EAE7  72                 	db	114
  1168  00EAE8  20                 	db	32
  1169  00EAE9  37                 	db	55
  1170  00EAEA  74                 	db	116
  1171  00EAEB  68                 	db	104
  1172  00EAEC  00                 	db	0
  1173  00EAED  00                 	db	0
  1174  00EAEE  00                 	db	0
  1175  00EAEF  00                 	db	0
  1176  00EAF0  00                 	db	0
  1177  00EAF1  00                 	db	0
  1178  00EAF2  00                 	db	0
  1179  00EAF3  00                 	db	0
  1180  00EAF4  6D                 	db	109
  1181  00EAF5  69                 	db	105
  1182  00EAF6  6E                 	db	110
  1183  00EAF7  6F                 	db	111
  1184  00EAF8  72                 	db	114
  1185  00EAF9  20                 	db	32
  1186  00EAFA  37                 	db	55
  1187  00EAFB  74                 	db	116
  1188  00EAFC  68                 	db	104
  1189  00EAFD  00                 	db	0
  1190  00EAFE  00                 	db	0
  1191  00EAFF  00                 	db	0
  1192  00EB00  00                 	db	0
  1193  00EB01  00                 	db	0
  1194  00EB02  00                 	db	0
  1195  00EB03  00                 	db	0
  1196  00EB04  00                 	db	0
  1197  00EB05  68                 	db	104
  1198  00EB06  61                 	db	97
  1199  00EB07  6C                 	db	108
  1200  00EB08  66                 	db	102
  1201  00EB09  20                 	db	32
  1202  00EB0A  64                 	db	100
  1203  00EB0B  69                 	db	105
  1204  00EB0C  6D                 	db	109
  1205  00EB0D  69                 	db	105
  1206  00EB0E  6E                 	db	110
  1207  00EB0F  69                 	db	105
  1208  00EB10  73                 	db	115
  1209  00EB11  68                 	db	104
  1210  00EB12  65                 	db	101
  1211  00EB13  64                 	db	100
  1212  00EB14  00                 	db	0
  1213  00EB15  00                 	db	0
  1214  00EB16  64                 	db	100
  1215  00EB17  69                 	db	105
  1216  00EB18  6D                 	db	109
  1217  00EB19  69                 	db	105
  1218  00EB1A  6E                 	db	110
  1219  00EB1B  69                 	db	105
  1220  00EB1C  73                 	db	115
  1221  00EB1D  68                 	db	104
  1222  00EB1E  65                 	db	101
  1223  00EB1F  64                 	db	100
  1224  00EB20  20                 	db	32
  1225  00EB21  37                 	db	55
  1226  00EB22  74                 	db	116
  1227  00EB23  68                 	db	104
  1228  00EB24  00                 	db	0
  1229  00EB25  00                 	db	0
  1230  00EB26  00                 	db	0
  1231  00EB27  48                 	db	72
  1232  00EB28  41                 	db	65
  1233  00EB29  4C                 	db	76
  1234  00EB2A  46                 	db	70
  1235  00EB2B  20                 	db	32
  1236  00EB2C  53                 	db	83
  1237  00EB2D  54                 	db	84
  1238  00EB2E  45                 	db	69
  1239  00EB2F  50                 	db	80
  1240  00EB30  00                 	db	0
  1241  00EB31  00                 	db	0
  1242  00EB32  00                 	db	0
  1243  00EB33  00                 	db	0
  1244  00EB34  00                 	db	0
  1245  00EB35  00                 	db	0
  1246  00EB36  00                 	db	0
  1247  00EB37  00                 	db	0
  1248  00EB38  43                 	db	67
  1249  00EB39  49                 	db	73
  1250  00EB3A  52                 	db	82
  1251  00EB3B  43                 	db	67
  1252  00EB3C  4C                 	db	76
  1253  00EB3D  45                 	db	69
  1254  00EB3E  20                 	db	32
  1255  00EB3F  4F                 	db	79
  1256  00EB40  46                 	db	70
  1257  00EB41  20                 	db	32
  1258  00EB42  46                 	db	70
  1259  00EB43  49                 	db	73
  1260  00EB44  46                 	db	70
  1261  00EB45  54                 	db	84
  1262  00EB46  48                 	db	72
  1263  00EB47  53                 	db	83
  1264  00EB48  00                 	db	0
  1265  00EB49  44                 	db	68
  1266  00EB4A  52                 	db	82
  1267  00EB4B  55                 	db	85
  1268  00EB4C  4D                 	db	77
  1269  00EB4D  20                 	db	32
  1270  00EB4E  49                 	db	73
  1271  00EB4F  53                 	db	83
  1272  00EB50  20                 	db	32
  1273  00EB51  4E                 	db	78
  1274  00EB52  4F                 	db	79
  1275  00EB53  54                 	db	84
  1276  00EB54  45                 	db	69
  1277  00EB55  20                 	db	32
  1278  00EB56  4F                 	db	79
  1279  00EB57  4E                 	db	78
  1280  00EB58  00                 	db	0
  1281  00EB59  00                 	db	0
  1282  00EB5A  44                 	db	68
  1283  00EB5B  52                 	db	82
  1284  00EB5C  55                 	db	85
  1285  00EB5D  4D                 	db	77
  1286  00EB5E  20                 	db	32
  1287  00EB5F  49                 	db	73
  1288  00EB60  53                 	db	83
  1289  00EB61  20                 	db	32
  1290  00EB62  43                 	db	67
  1291  00EB63  43                 	db	67
  1292  00EB64  00                 	db	0
  1293  00EB65  00                 	db	0
  1294  00EB66  00                 	db	0
  1295  00EB67  00                 	db	0
  1296  00EB68  00                 	db	0
  1297  00EB69  00                 	db	0
  1298  00EB6A  00                 	db	0
  1299  00EB6B  44                 	db	68
  1300  00EB6C  52                 	db	82
  1301  00EB6D  55                 	db	85
  1302  00EB6E  4D                 	db	77
  1303  00EB6F  20                 	db	32
  1304  00EB70  43                 	db	67
  1305  00EB71  43                 	db	67
  1306  00EB72  20                 	db	32
  1307  00EB73  54                 	db	84
  1308  00EB74  59                 	db	89
  1309  00EB75  50                 	db	80
  1310  00EB76  45                 	db	69
  1311  00EB77  00                 	db	0
  1312  00EB78  00                 	db	0
  1313  00EB79  00                 	db	0
  1314  00EB7A  00                 	db	0
  1315  00EB7B  00                 	db	0
  1316  00EB7C  44                 	db	68
  1317  00EB7D  52                 	db	82
  1318  00EB7E  55                 	db	85
  1319  00EB7F  4D                 	db	77
  1320  00EB80  20                 	db	32
  1321  00EB81  53                 	db	83
  1322  00EB82  45                 	db	69
  1323  00EB83  54                 	db	84
  1324  00EB84  20                 	db	32
  1325  00EB85  4E                 	db	78
  1326  00EB86  4E                 	db	78
  1327  00EB87  23                 	db	35
  1328  00EB88  00                 	db	0
  1329  00EB89  00                 	db	0
  1330  00EB8A  00                 	db	0
  1331  00EB8B  00                 	db	0
  1332  00EB8C  00                 	db	0
  1333  00EB8D  44                 	db	68
  1334  00EB8E  52                 	db	82
  1335  00EB8F  55                 	db	85
  1336  00EB90  4D                 	db	77
  1337  00EB91  20                 	db	32
  1338  00EB92  53                 	db	83
  1339  00EB93  45                 	db	69
  1340  00EB94  54                 	db	84
  1341  00EB95  20                 	db	32
  1342  00EB96  43                 	db	67
  1343  00EB97  43                 	db	67
  1344  00EB98  23                 	db	35
  1345  00EB99  00                 	db	0
  1346  00EB9A  00                 	db	0
  1347  00EB9B  00                 	db	0
  1348  00EB9C  00                 	db	0
  1349  00EB9D  00                 	db	0
  1350  00EB9E  44                 	db	68
  1351  00EB9F  52                 	db	82
  1352  00EBA0  55                 	db	85
  1353  00EBA1  4D                 	db	77
  1354  00EBA2  20                 	db	32
  1355  00EBA3  43                 	db	67
  1356  00EBA4  43                 	db	67
  1357  00EBA5  20                 	db	32
  1358  00EBA6  54                 	db	84
  1359  00EBA7  52                 	db	82
  1360  00EBA8  49                 	db	73
  1361  00EBA9  47                 	db	71
  1362  00EBAA  47                 	db	71
  1363  00EBAB  45                 	db	69
  1364  00EBAC  52                 	db	82
  1365  00EBAD  00                 	db	0
  1366  00EBAE  00                 	db	0
  1367  00EBAF  44                 	db	68
  1368  00EBB0  52                 	db	82
  1369  00EBB1  55                 	db	85
  1370  00EBB2  4D                 	db	77
  1371  00EBB3  20                 	db	32
  1372  00EBB4  43                 	db	67
  1373  00EBB5  43                 	db	67
  1374  00EBB6  20                 	db	32
  1375  00EBB7  54                 	db	84
  1376  00EBB8  4F                 	db	79
  1377  00EBB9  47                 	db	71
  1378  00EBBA  47                 	db	71
  1379  00EBBB  4C                 	db	76
  1380  00EBBC  45                 	db	69
  1381  00EBBD  00                 	db	0
  1382  00EBBE  00                 	db	0
  1383  00EBBF  00                 	db	0
  1384  00EBC0  44                 	db	68
  1385  00EBC1  52                 	db	82
  1386  00EBC2  55                 	db	85
  1387  00EBC3  4D                 	db	77
  1388  00EBC4  20                 	db	32
  1389  00EBC5  31                 	db	49
  1390  00EBC6  20                 	db	32
  1391  00EBC7  4E                 	db	78
  1392  00EBC8  4E                 	db	78
  1393  00EBC9  3A                 	db	58
  1394  00EBCA  20                 	db	32
  1395  00EBCB  00                 	db	0
  1396  00EBCC  00                 	db	0
  1397  00EBCD  00                 	db	0
  1398  00EBCE  00                 	db	0
  1399  00EBCF  00                 	db	0
  1400  00EBD0  00                 	db	0
  1401  00EBD1  44                 	db	68
  1402  00EBD2  52                 	db	82
  1403  00EBD3  55                 	db	85
  1404  00EBD4  4D                 	db	77
  1405  00EBD5  20                 	db	32
  1406  00EBD6  32                 	db	50
  1407  00EBD7  20                 	db	32
  1408  00EBD8  4E                 	db	78
  1409  00EBD9  4E                 	db	78
  1410  00EBDA  3A                 	db	58
  1411  00EBDB  20                 	db	32
  1412  00EBDC  00                 	db	0
  1413  00EBDD  00                 	db	0
  1414  00EBDE  00                 	db	0
  1415  00EBDF  00                 	db	0
  1416  00EBE0  00                 	db	0
  1417  00EBE1  00                 	db	0
  1418  00EBE2  44                 	db	68
  1419  00EBE3  52                 	db	82
  1420  00EBE4  55                 	db	85
  1421  00EBE5  4D                 	db	77
  1422  00EBE6  20                 	db	32
  1423  00EBE7  33                 	db	51
  1424  00EBE8  20                 	db	32
  1425  00EBE9  4E                 	db	78
  1426  00EBEA  4E                 	db	78
  1427  00EBEB  3A                 	db	58
  1428  00EBEC  20                 	db	32
  1429  00EBED  00                 	db	0
  1430  00EBEE  00                 	db	0
  1431  00EBEF  00                 	db	0
  1432  00EBF0  00                 	db	0
  1433  00EBF1  00                 	db	0
  1434  00EBF2  00                 	db	0
  1435  00EBF3  44                 	db	68
  1436  00EBF4  52                 	db	82
  1437  00EBF5  55                 	db	85
  1438  00EBF6  4D                 	db	77
  1439  00EBF7  20                 	db	32
  1440  00EBF8  34                 	db	52
  1441  00EBF9  20                 	db	32
  1442  00EBFA  4E                 	db	78
  1443  00EBFB  4E                 	db	78
  1444  00EBFC  3A                 	db	58
  1445  00EBFD  20                 	db	32
  1446  00EBFE  00                 	db	0
  1447  00EBFF  00                 	db	0
  1448  00EC00  00                 	db	0
  1449  00EC01  00                 	db	0
  1450  00EC02  00                 	db	0
  1451  00EC03  00                 	db	0
  1452  00EC04  44                 	db	68
  1453  00EC05  52                 	db	82
  1454  00EC06  55                 	db	85
  1455  00EC07  4D                 	db	77
  1456  00EC08  20                 	db	32
  1457  00EC09  35                 	db	53
  1458  00EC0A  20                 	db	32
  1459  00EC0B  4E                 	db	78
  1460  00EC0C  4E                 	db	78
  1461  00EC0D  3A                 	db	58
  1462  00EC0E  20                 	db	32
  1463  00EC0F  00                 	db	0
  1464  00EC10  00                 	db	0
  1465  00EC11  00                 	db	0
  1466  00EC12  00                 	db	0
  1467  00EC13  00                 	db	0
  1468  00EC14  00                 	db	0
  1469  00EC15  44                 	db	68
  1470  00EC16  52                 	db	82
  1471  00EC17  55                 	db	85
  1472  00EC18  4D                 	db	77
  1473  00EC19  20                 	db	32
  1474  00EC1A  36                 	db	54
  1475  00EC1B  20                 	db	32
  1476  00EC1C  4E                 	db	78
  1477  00EC1D  4E                 	db	78
  1478  00EC1E  3A                 	db	58
  1479  00EC1F  20                 	db	32
  1480  00EC20  00                 	db	0
  1481  00EC21  00                 	db	0
  1482  00EC22  00                 	db	0
  1483  00EC23  00                 	db	0
  1484  00EC24  00                 	db	0
  1485  00EC25  00                 	db	0
  1486  00EC26  44                 	db	68
  1487  00EC27  52                 	db	82
  1488  00EC28  55                 	db	85
  1489  00EC29  4D                 	db	77
  1490  00EC2A  20                 	db	32
  1491  00EC2B  37                 	db	55
  1492  00EC2C  20                 	db	32
  1493  00EC2D  4E                 	db	78
  1494  00EC2E  4E                 	db	78
  1495  00EC2F  3A                 	db	58
  1496  00EC30  20                 	db	32
  1497  00EC31  00                 	db	0
  1498  00EC32  00                 	db	0
  1499  00EC33  00                 	db	0
  1500  00EC34  00                 	db	0
  1501  00EC35  00                 	db	0
  1502  00EC36  00                 	db	0
  1503  00EC37  44                 	db	68
  1504  00EC38  52                 	db	82
  1505  00EC39  55                 	db	85
  1506  00EC3A  4D                 	db	77
  1507  00EC3B  20                 	db	32
  1508  00EC3C  38                 	db	56
  1509  00EC3D  20                 	db	32
  1510  00EC3E  4E                 	db	78
  1511  00EC3F  4E                 	db	78
  1512  00EC40  3A                 	db	58
  1513  00EC41  20                 	db	32
  1514  00EC42  00                 	db	0
  1515  00EC43  00                 	db	0
  1516  00EC44  00                 	db	0
  1517  00EC45  00                 	db	0
  1518  00EC46  00                 	db	0
  1519  00EC47  00                 	db	0
  1520  00EC48  44                 	db	68
  1521  00EC49  52                 	db	82
  1522  00EC4A  55                 	db	85
  1523  00EC4B  4D                 	db	77
  1524  00EC4C  20                 	db	32
  1525  00EC4D  31                 	db	49
  1526  00EC4E  20                 	db	32
  1527  00EC4F  43                 	db	67
  1528  00EC50  43                 	db	67
  1529  00EC51  3A                 	db	58
  1530  00EC52  20                 	db	32
  1531  00EC53  00                 	db	0
  1532  00EC54  00                 	db	0
  1533  00EC55  00                 	db	0
  1534  00EC56  00                 	db	0
  1535  00EC57  00                 	db	0
  1536  00EC58  00                 	db	0
  1537  00EC59  44                 	db	68
  1538  00EC5A  52                 	db	82
  1539  00EC5B  55                 	db	85
  1540  00EC5C  4D                 	db	77
  1541  00EC5D  20                 	db	32
  1542  00EC5E  32                 	db	50
  1543  00EC5F  20                 	db	32
  1544  00EC60  43                 	db	67
  1545  00EC61  43                 	db	67
  1546  00EC62  3A                 	db	58
  1547  00EC63  20                 	db	32
  1548  00EC64  00                 	db	0
  1549  00EC65  00                 	db	0
  1550  00EC66  00                 	db	0
  1551  00EC67  00                 	db	0
  1552  00EC68  00                 	db	0
  1553  00EC69  00                 	db	0
  1554  00EC6A  44                 	db	68
  1555  00EC6B  52                 	db	82
  1556  00EC6C  55                 	db	85
  1557  00EC6D  4D                 	db	77
  1558  00EC6E  20                 	db	32
  1559  00EC6F  33                 	db	51
  1560  00EC70  20                 	db	32
  1561  00EC71  43                 	db	67
  1562  00EC72  43                 	db	67
  1563  00EC73  3A                 	db	58
  1564  00EC74  20                 	db	32
  1565  00EC75  00                 	db	0
  1566  00EC76  00                 	db	0
  1567  00EC77  00                 	db	0
  1568  00EC78  00                 	db	0
  1569  00EC79  00                 	db	0
  1570  00EC7A  00                 	db	0
  1571  00EC7B  44                 	db	68
  1572  00EC7C  52                 	db	82
  1573  00EC7D  55                 	db	85
  1574  00EC7E  4D                 	db	77
  1575  00EC7F  20                 	db	32
  1576  00EC80  34                 	db	52
  1577  00EC81  20                 	db	32
  1578  00EC82  43                 	db	67
  1579  00EC83  43                 	db	67
  1580  00EC84  3A                 	db	58
  1581  00EC85  20                 	db	32
  1582  00EC86  00                 	db	0
  1583  00EC87  00                 	db	0
  1584  00EC88  00                 	db	0
  1585  00EC89  00                 	db	0
  1586  00EC8A  00                 	db	0
  1587  00EC8B  00                 	db	0
  1588  00EC8C  44                 	db	68
  1589  00EC8D  52                 	db	82
  1590  00EC8E  55                 	db	85
  1591  00EC8F  4D                 	db	77
  1592  00EC90  20                 	db	32
  1593  00EC91  35                 	db	53
  1594  00EC92  20                 	db	32
  1595  00EC93  43                 	db	67
  1596  00EC94  43                 	db	67
  1597  00EC95  3A                 	db	58
  1598  00EC96  20                 	db	32
  1599  00EC97  00                 	db	0
  1600  00EC98  00                 	db	0
  1601  00EC99  00                 	db	0
  1602  00EC9A  00                 	db	0
  1603  00EC9B  00                 	db	0
  1604  00EC9C  00                 	db	0
  1605  00EC9D  44                 	db	68
  1606  00EC9E  52                 	db	82
  1607  00EC9F  55                 	db	85
  1608  00ECA0  4D                 	db	77
  1609  00ECA1  20                 	db	32
  1610  00ECA2  36                 	db	54
  1611  00ECA3  20                 	db	32
  1612  00ECA4  43                 	db	67
  1613  00ECA5  43                 	db	67
  1614  00ECA6  3A                 	db	58
  1615  00ECA7  20                 	db	32
  1616  00ECA8  00                 	db	0
  1617  00ECA9  00                 	db	0
  1618  00ECAA  00                 	db	0
  1619  00ECAB  00                 	db	0
  1620  00ECAC  00                 	db	0
  1621  00ECAD  00                 	db	0
  1622  00ECAE  44                 	db	68
  1623  00ECAF  52                 	db	82
  1624  00ECB0  55                 	db	85
  1625  00ECB1  4D                 	db	77
  1626  00ECB2  20                 	db	32
  1627  00ECB3  37                 	db	55
  1628  00ECB4  20                 	db	32
  1629  00ECB5  43                 	db	67
  1630  00ECB6  43                 	db	67
  1631  00ECB7  3A                 	db	58
  1632  00ECB8  20                 	db	32
  1633  00ECB9  00                 	db	0
  1634  00ECBA  00                 	db	0
  1635  00ECBB  00                 	db	0
  1636  00ECBC  00                 	db	0
  1637  00ECBD  00                 	db	0
  1638  00ECBE  00                 	db	0
  1639  00ECBF  44                 	db	68
  1640  00ECC0  52                 	db	82
  1641  00ECC1  55                 	db	85
  1642  00ECC2  4D                 	db	77
  1643  00ECC3  20                 	db	32
  1644  00ECC4  38                 	db	56
  1645  00ECC5  20                 	db	32
  1646  00ECC6  43                 	db	67
  1647  00ECC7  43                 	db	67
  1648  00ECC8  3A                 	db	58
  1649  00ECC9  20                 	db	32
  1650  00ECCA  00                 	db	0
  1651  00ECCB  00                 	db	0
  1652  00ECCC  00                 	db	0
  1653  00ECCD  00                 	db	0
  1654  00ECCE  00                 	db	0
  1655  00ECCF  00                 	db	0
  1656  00ECD0  50                 	db	80
  1657  00ECD1  4F                 	db	79
  1658  00ECD2  54                 	db	84
  1659  00ECD3  53                 	db	83
  1660  00ECD4  20                 	db	32
  1661  00ECD5  52                 	db	82
  1662  00ECD6  45                 	db	69
  1663  00ECD7  53                 	db	83
  1664  00ECD8  4F                 	db	79
  1665  00ECD9  4C                 	db	76
  1666  00ECDA  55                 	db	85
  1667  00ECDB  54                 	db	84
  1668  00ECDC  49                 	db	73
  1669  00ECDD  4F                 	db	79
  1670  00ECDE  4E                 	db	78
  1671  00ECDF  00                 	db	0
  1672  00ECE0  00                 	db	0
  1673  00ECE1  50                 	db	80
  1674  00ECE2  4F                 	db	79
  1675  00ECE3  54                 	db	84
  1676  00ECE4  53                 	db	83
  1677  00ECE5  20                 	db	32
  1678  00ECE6  41                 	db	65
  1679  00ECE7  4C                 	db	76
  1680  00ECE8  50                 	db	80
  1681  00ECE9  48                 	db	72
  1682  00ECEA  41                 	db	65
  1683  00ECEB  00                 	db	0
  1684  00ECEC  00                 	db	0
  1685  00ECED  00                 	db	0
  1686  00ECEE  00                 	db	0
  1687  00ECEF  00                 	db	0
  1688  00ECF0  00                 	db	0
  1689  00ECF1  00                 	db	0
  1690  00ECF2  50                 	db	80
  1691  00ECF3  4F                 	db	79
  1692  00ECF4  54                 	db	84
  1693  00ECF5  53                 	db	83
  1694  00ECF6  20                 	db	32
  1695  00ECF7  53                 	db	83
  1696  00ECF8  45                 	db	69
  1697  00ECF9  54                 	db	84
  1698  00ECFA  20                 	db	32
  1699  00ECFB  43                 	db	67
  1700  00ECFC  43                 	db	67
  1701  00ECFD  23                 	db	35
  1702  00ECFE  00                 	db	0
  1703  00ECFF  00                 	db	0
  1704  00ED00  00                 	db	0
  1705  00ED01  00                 	db	0
  1706  00ED02  00                 	db	0
  1707  00ED03  53                 	db	83
  1708  00ED04  4C                 	db	76
  1709  00ED05  49                 	db	73
  1710  00ED06  44                 	db	68
  1711  00ED07  45                 	db	69
  1712  00ED08  50                 	db	80
  1713  00ED09  4F                 	db	79
  1714  00ED0A  54                 	db	84
  1715  00ED0B  20                 	db	32
  1716  00ED0C  53                 	db	83
  1717  00ED0D  45                 	db	69
  1718  00ED0E  54                 	db	84
  1719  00ED0F  20                 	db	32
  1720  00ED10  43                 	db	67
  1721  00ED11  43                 	db	67
  1722  00ED12  23                 	db	35
  1723  00ED13  00                 	db	0
  1724  00ED14  4A                 	db	74
  1725  00ED15  4F                 	db	79
  1726  00ED16  59                 	db	89
  1727  00ED17  53                 	db	83
  1728  00ED18  54                 	db	84
  1729  00ED19  49                 	db	73
  1730  00ED1A  43                 	db	67
  1731  00ED1B  4B                 	db	75
  1732  00ED1C  20                 	db	32
  1733  00ED1D  53                 	db	83
  1734  00ED1E  45                 	db	69
  1735  00ED1F  54                 	db	84
  1736  00ED20  20                 	db	32
  1737  00ED21  43                 	db	67
  1738  00ED22  43                 	db	67
  1739  00ED23  23                 	db	35
  1740  00ED24  00                 	db	0
  1741  00ED25  50                 	db	80
  1742  00ED26  4F                 	db	79
  1743  00ED27  54                 	db	84
  1744  00ED28  53                 	db	83
  1745  00ED29  20                 	db	32
  1746  00ED2A  4C                 	db	76
  1747  00ED2B  4F                 	db	79
  1748  00ED2C  20                 	db	32
  1749  00ED2D  52                 	db	82
  1750  00ED2E  45                 	db	69
  1751  00ED2F  53                 	db	83
  1752  00ED30  00                 	db	0
  1753  00ED31  00                 	db	0
  1754  00ED32  00                 	db	0
  1755  00ED33  00                 	db	0
  1756  00ED34  00                 	db	0
  1757  00ED35  00                 	db	0
  1758  00ED36  50                 	db	80
  1759  00ED37  4F                 	db	79
  1760  00ED38  54                 	db	84
  1761  00ED39  53                 	db	83
  1762  00ED3A  20                 	db	32
  1763  00ED3B  48                 	db	72
  1764  00ED3C  49                 	db	73
  1765  00ED3D  20                 	db	32
  1766  00ED3E  52                 	db	82
  1767  00ED3F  45                 	db	69
  1768  00ED40  53                 	db	83
  1769  00ED41  00                 	db	0
  1770  00ED42  00                 	db	0
  1771  00ED43  00                 	db	0
  1772  00ED44  00                 	db	0
  1773  00ED45  00                 	db	0
  1774  00ED46  00                 	db	0
  1775  00ED47  50                 	db	80
  1776  00ED48  31                 	db	49
  1777  00ED49  20                 	db	32
  1778  00ED4A  43                 	db	67
  1779  00ED4B  43                 	db	67
  1780  00ED4C  3A                 	db	58
  1781  00ED4D  00                 	db	0
  1782  00ED4E  00                 	db	0
  1783  00ED4F  00                 	db	0
  1784  00ED50  00                 	db	0
  1785  00ED51  00                 	db	0
  1786  00ED52  00                 	db	0
  1787  00ED53  00                 	db	0
  1788  00ED54  00                 	db	0
  1789  00ED55  00                 	db	0
  1790  00ED56  00                 	db	0
  1791  00ED57  00                 	db	0
  1792  00ED58  50                 	db	80
  1793  00ED59  32                 	db	50
  1794  00ED5A  20                 	db	32
  1795  00ED5B  43                 	db	67
  1796  00ED5C  43                 	db	67
  1797  00ED5D  3A                 	db	58
  1798  00ED5E  00                 	db	0
  1799  00ED5F  00                 	db	0
  1800  00ED60  00                 	db	0
  1801  00ED61  00                 	db	0
  1802  00ED62  00                 	db	0
  1803  00ED63  00                 	db	0
  1804  00ED64  00                 	db	0
  1805  00ED65  00                 	db	0
  1806  00ED66  00                 	db	0
  1807  00ED67  00                 	db	0
  1808  00ED68  00                 	db	0
  1809  00ED69  50                 	db	80
  1810  00ED6A  33                 	db	51
  1811  00ED6B  20                 	db	32
  1812  00ED6C  43                 	db	67
  1813  00ED6D  43                 	db	67
  1814  00ED6E  3A                 	db	58
  1815  00ED6F  00                 	db	0
  1816  00ED70  00                 	db	0
  1817  00ED71  00                 	db	0
  1818  00ED72  00                 	db	0
  1819  00ED73  00                 	db	0
  1820  00ED74  00                 	db	0
  1821  00ED75  00                 	db	0
  1822  00ED76  00                 	db	0
  1823  00ED77  00                 	db	0
  1824  00ED78  00                 	db	0
  1825  00ED79  00                 	db	0
  1826  00ED7A  50                 	db	80
  1827  00ED7B  34                 	db	52
  1828  00ED7C  20                 	db	32
  1829  00ED7D  43                 	db	67
  1830  00ED7E  43                 	db	67
  1831  00ED7F  3A                 	db	58
  1832  00ED80  00                 	db	0
  1833  00ED81  00                 	db	0
  1834  00ED82  00                 	db	0
  1835  00ED83  00                 	db	0
  1836  00ED84  00                 	db	0
  1837  00ED85  00                 	db	0
  1838  00ED86  00                 	db	0
  1839  00ED87  00                 	db	0
  1840  00ED88  00                 	db	0
  1841  00ED89  00                 	db	0
  1842  00ED8A  00                 	db	0
  1843  00ED8B  50                 	db	80
  1844  00ED8C  35                 	db	53
  1845  00ED8D  20                 	db	32
  1846  00ED8E  43                 	db	67
  1847  00ED8F  43                 	db	67
  1848  00ED90  3A                 	db	58
  1849  00ED91  00                 	db	0
  1850  00ED92  00                 	db	0
  1851  00ED93  00                 	db	0
  1852  00ED94  00                 	db	0
  1853  00ED95  00                 	db	0
  1854  00ED96  00                 	db	0
  1855  00ED97  00                 	db	0
  1856  00ED98  00                 	db	0
  1857  00ED99  00                 	db	0
  1858  00ED9A  00                 	db	0
  1859  00ED9B  00                 	db	0
  1860  00ED9C  50                 	db	80
  1861  00ED9D  36                 	db	54
  1862  00ED9E  20                 	db	32
  1863  00ED9F  43                 	db	67
  1864  00EDA0  43                 	db	67
  1865  00EDA1  3A                 	db	58
  1866  00EDA2  00                 	db	0
  1867  00EDA3  00                 	db	0
  1868  00EDA4  00                 	db	0
  1869  00EDA5  00                 	db	0
  1870  00EDA6  00                 	db	0
  1871  00EDA7  00                 	db	0
  1872  00EDA8  00                 	db	0
  1873  00EDA9  00                 	db	0
  1874  00EDAA  00                 	db	0
  1875  00EDAB  00                 	db	0
  1876  00EDAC  00                 	db	0
  1877  00EDAD  50                 	db	80
  1878  00EDAE  37                 	db	55
  1879  00EDAF  20                 	db	32
  1880  00EDB0  43                 	db	67
  1881  00EDB1  43                 	db	67
  1882  00EDB2  3A                 	db	58
  1883  00EDB3  00                 	db	0
  1884  00EDB4  00                 	db	0
  1885  00EDB5  00                 	db	0
  1886  00EDB6  00                 	db	0
  1887  00EDB7  00                 	db	0
  1888  00EDB8  00                 	db	0
  1889  00EDB9  00                 	db	0
  1890  00EDBA  00                 	db	0
  1891  00EDBB  00                 	db	0
  1892  00EDBC  00                 	db	0
  1893  00EDBD  00                 	db	0
  1894  00EDBE  53                 	db	83
  1895  00EDBF  31                 	db	49
  1896  00EDC0  20                 	db	32
  1897  00EDC1  43                 	db	67
  1898  00EDC2  43                 	db	67
  1899  00EDC3  3A                 	db	58
  1900  00EDC4  20                 	db	32
  1901  00EDC5  00                 	db	0
  1902  00EDC6  00                 	db	0
  1903  00EDC7  00                 	db	0
  1904  00EDC8  00                 	db	0
  1905  00EDC9  00                 	db	0
  1906  00EDCA  00                 	db	0
  1907  00EDCB  00                 	db	0
  1908  00EDCC  00                 	db	0
  1909  00EDCD  00                 	db	0
  1910  00EDCE  00                 	db	0
  1911  00EDCF  53                 	db	83
  1912  00EDD0  32                 	db	50
  1913  00EDD1  20                 	db	32
  1914  00EDD2  43                 	db	67
  1915  00EDD3  43                 	db	67
  1916  00EDD4  3A                 	db	58
  1917  00EDD5  20                 	db	32
  1918  00EDD6  00                 	db	0
  1919  00EDD7  00                 	db	0
  1920  00EDD8  00                 	db	0
  1921  00EDD9  00                 	db	0
  1922  00EDDA  00                 	db	0
  1923  00EDDB  00                 	db	0
  1924  00EDDC  00                 	db	0
  1925  00EDDD  00                 	db	0
  1926  00EDDE  00                 	db	0
  1927  00EDDF  00                 	db	0
  1928  00EDE0  53                 	db	83
  1929  00EDE1  33                 	db	51
  1930  00EDE2  20                 	db	32
  1931  00EDE3  43                 	db	67
  1932  00EDE4  43                 	db	67
  1933  00EDE5  3A                 	db	58
  1934  00EDE6  20                 	db	32
  1935  00EDE7  00                 	db	0
  1936  00EDE8  00                 	db	0
  1937  00EDE9  00                 	db	0
  1938  00EDEA  00                 	db	0
  1939  00EDEB  00                 	db	0
  1940  00EDEC  00                 	db	0
  1941  00EDED  00                 	db	0
  1942  00EDEE  00                 	db	0
  1943  00EDEF  00                 	db	0
  1944  00EDF0  00                 	db	0
  1945  00EDF1  53                 	db	83
  1946  00EDF2  34                 	db	52
  1947  00EDF3  20                 	db	32
  1948  00EDF4  43                 	db	67
  1949  00EDF5  43                 	db	67
  1950  00EDF6  3A                 	db	58
  1951  00EDF7  20                 	db	32
  1952  00EDF8  00                 	db	0
  1953  00EDF9  00                 	db	0
  1954  00EDFA  00                 	db	0
  1955  00EDFB  00                 	db	0
  1956  00EDFC  00                 	db	0
  1957  00EDFD  00                 	db	0
  1958  00EDFE  00                 	db	0
  1959  00EDFF  00                 	db	0
  1960  00EE00  00                 	db	0
  1961  00EE01  00                 	db	0
  1962  00EE02  53                 	db	83
  1963  00EE03  35                 	db	53
  1964  00EE04  20                 	db	32
  1965  00EE05  43                 	db	67
  1966  00EE06  43                 	db	67
  1967  00EE07  3A                 	db	58
  1968  00EE08  20                 	db	32
  1969  00EE09  00                 	db	0
  1970  00EE0A  00                 	db	0
  1971  00EE0B  00                 	db	0
  1972  00EE0C  00                 	db	0
  1973  00EE0D  00                 	db	0
  1974  00EE0E  00                 	db	0
  1975  00EE0F  00                 	db	0
  1976  00EE10  00                 	db	0
  1977  00EE11  00                 	db	0
  1978  00EE12  00                 	db	0
  1979  00EE13  53                 	db	83
  1980  00EE14  36                 	db	54
  1981  00EE15  20                 	db	32
  1982  00EE16  43                 	db	67
  1983  00EE17  43                 	db	67
  1984  00EE18  3A                 	db	58
  1985  00EE19  20                 	db	32
  1986  00EE1A  00                 	db	0
  1987  00EE1B  00                 	db	0
  1988  00EE1C  00                 	db	0
  1989  00EE1D  00                 	db	0
  1990  00EE1E  00                 	db	0
  1991  00EE1F  00                 	db	0
  1992  00EE20  00                 	db	0
  1993  00EE21  00                 	db	0
  1994  00EE22  00                 	db	0
  1995  00EE23  00                 	db	0
  1996  00EE24  53                 	db	83
  1997  00EE25  37                 	db	55
  1998  00EE26  20                 	db	32
  1999  00EE27  43                 	db	67
  2000  00EE28  43                 	db	67
  2001  00EE29  3A                 	db	58
  2002  00EE2A  20                 	db	32
  2003  00EE2B  00                 	db	0
  2004  00EE2C  00                 	db	0
  2005  00EE2D  00                 	db	0
  2006  00EE2E  00                 	db	0
  2007  00EE2F  00                 	db	0
  2008  00EE30  00                 	db	0
  2009  00EE31  00                 	db	0
  2010  00EE32  00                 	db	0
  2011  00EE33  00                 	db	0
  2012  00EE34  00                 	db	0
  2013  00EE35  4A                 	db	74
  2014  00EE36  58                 	db	88
  2015  00EE37  20                 	db	32
  2016  00EE38  43                 	db	67
  2017  00EE39  43                 	db	67
  2018  00EE3A  3A                 	db	58
  2019  00EE3B  20                 	db	32
  2020  00EE3C  00                 	db	0
  2021  00EE3D  00                 	db	0
  2022  00EE3E  00                 	db	0
  2023  00EE3F  00                 	db	0
  2024  00EE40  00                 	db	0
  2025  00EE41  00                 	db	0
  2026  00EE42  00                 	db	0
  2027  00EE43  00                 	db	0
  2028  00EE44  00                 	db	0
  2029  00EE45  00                 	db	0
  2030  00EE46  4A                 	db	74
  2031  00EE47  59                 	db	89
  2032  00EE48  20                 	db	32
  2033  00EE49  43                 	db	67
  2034  00EE4A  43                 	db	67
  2035  00EE4B  3A                 	db	58
  2036  00EE4C  20                 	db	32
  2037  00EE4D  00                 	db	0
  2038  00EE4E  00                 	db	0
  2039  00EE4F  00                 	db	0
  2040  00EE50  00                 	db	0
  2041  00EE51  00                 	db	0
  2042  00EE52  00                 	db	0
  2043  00EE53  00                 	db	0
  2044  00EE54  00                 	db	0
  2045  00EE55  00                 	db	0
  2046  00EE56  00                 	db	0
  2047  00EE57  4D                 	db	77
  2048  00EE58  61                 	db	97
  2049  00EE59  69                 	db	105
  2050  00EE5A  6E                 	db	110
  2051  00EE5B  20                 	db	32
  2052  00EE5C  63                 	db	99
  2053  00EE5D  68                 	db	104
  2054  00EE5E  61                 	db	97
  2055  00EE5F  6E                 	db	110
  2056  00EE60  6E                 	db	110
  2057  00EE61  65                 	db	101
  2058  00EE62  6C                 	db	108
  2059  00EE63  00                 	db	0
  2060  00EE64  00                 	db	0
  2061  00EE65  00                 	db	0
  2062  00EE66  00                 	db	0
  2063  00EE67  00                 	db	0
  2064  00EE68  44                 	db	68
  2065  00EE69  72                 	db	114
  2066  00EE6A  75                 	db	117
  2067  00EE6B  6D                 	db	109
  2068  00EE6C  20                 	db	32
  2069  00EE6D  63                 	db	99
  2070  00EE6E  68                 	db	104
  2071  00EE6F  61                 	db	97
  2072  00EE70  6E                 	db	110
  2073  00EE71  6E                 	db	110
  2074  00EE72  65                 	db	101
  2075  00EE73  6C                 	db	108
  2076  00EE74  00                 	db	0
  2077  00EE75  00                 	db	0
  2078  00EE76  00                 	db	0
  2079  00EE77  00                 	db	0
  2080  00EE78  00                 	db	0
  2081  00EE79  53                 	db	83
  2082  00EE7A  61                 	db	97
  2083  00EE7B  76                 	db	118
  2084  00EE7C  65                 	db	101
  2085  00EE7D  20                 	db	32
  2086  00EE7E  73                 	db	115
  2087  00EE7F  65                 	db	101
  2088  00EE80  74                 	db	116
  2089  00EE81  74                 	db	116
  2090  00EE82  69                 	db	105
  2091  00EE83  6E                 	db	110
  2092  00EE84  67                 	db	103
  2093  00EE85  73                 	db	115
  2094  00EE86  00                 	db	0
  2095  00EE87  00                 	db	0
  2096  00EE88  00                 	db	0
  2097  00EE89  00                 	db	0
  2098  00EE8A  4C                 	db	76
  2099  00EE8B  6F                 	db	111
  2100  00EE8C  61                 	db	97
  2101  00EE8D  64                 	db	100
  2102  00EE8E  20                 	db	32
  2103  00EE8F  73                 	db	115
  2104  00EE90  65                 	db	101
  2105  00EE91  74                 	db	116
  2106  00EE92  74                 	db	116
  2107  00EE93  69                 	db	105
  2108  00EE94  6E                 	db	110
  2109  00EE95  67                 	db	103
  2110  00EE96  73                 	db	115
  2111  00EE97  00                 	db	0
  2112  00EE98  00                 	db	0
  2113  00EE99  00                 	db	0
  2114  00EE9A  00                 	db	0
  2115  00EE9B  52                 	db	82
  2116  00EE9C  65                 	db	101
  2117  00EE9D  73                 	db	115
  2118  00EE9E  74                 	db	116
  2119  00EE9F  6F                 	db	111
  2120  00EEA0  72                 	db	114
  2121  00EEA1  65                 	db	101
  2122  00EEA2  20                 	db	32
  2123  00EEA3  64                 	db	100
  2124  00EEA4  65                 	db	101
  2125  00EEA5  66                 	db	102
  2126  00EEA6  61                 	db	97
  2127  00EEA7  75                 	db	117
  2128  00EEA8  6C                 	db	108
  2129  00EEA9  74                 	db	116
  2130  00EEAA  73                 	db	115
  2131  00EEAB  00                 	db	0
  2132  00EEAC  45                 	db	69
  2133  00EEAD  6E                 	db	110
  2134  00EEAE  63                 	db	99
  2135  00EEAF  6F                 	db	111
  2136  00EEB0  64                 	db	100
  2137  00EEB1  65                 	db	101
  2138  00EEB2  72                 	db	114
  2139  00EEB3  20                 	db	32
  2140  00EEB4  50                 	db	80
  2141  00EEB5  6F                 	db	111
  2142  00EEB6  6C                 	db	108
  2143  00EEB7  61                 	db	97
  2144  00EEB8  72                 	db	114
  2145  00EEB9  69                 	db	105
  2146  00EEBA  74                 	db	116
  2147  00EEBB  79                 	db	121
  2148  00EEBC  00                 	db	0
  2149  00EEBD  45                 	db	69
  2150  00EEBE  78                 	db	120
  2151  00EEBF  69                 	db	105
  2152  00EEC0  74                 	db	116
  2153  00EEC1  00                 	db	0
  2154  00EEC2  00                 	db	0
  2155  00EEC3  00                 	db	0
  2156  00EEC4  00                 	db	0
  2157  00EEC5  00                 	db	0
  2158  00EEC6  00                 	db	0
  2159  00EEC7  00                 	db	0
  2160  00EEC8  00                 	db	0
  2161  00EEC9  00                 	db	0
  2162  00EECA  00                 	db	0
  2163  00EECB  00                 	db	0
  2164  00EECC  00                 	db	0
  2165  00EECD  00                 	db	0
  2166  00EECE  53                 	db	83
  2167  00EECF  6C                 	db	108
  2168  00EED0  6F                 	db	111
  2169  00EED1  74                 	db	116
  2170  00EED2  20                 	db	32
  2171  00EED3  31                 	db	49
  2172  00EED4  00                 	db	0
  2173  00EED5  00                 	db	0
  2174  00EED6  00                 	db	0
  2175  00EED7  00                 	db	0
  2176  00EED8  00                 	db	0
  2177  00EED9  00                 	db	0
  2178  00EEDA  00                 	db	0
  2179  00EEDB  00                 	db	0
  2180  00EEDC  00                 	db	0
  2181  00EEDD  00                 	db	0
  2182  00EEDE  00                 	db	0
  2183  00EEDF  53                 	db	83
  2184  00EEE0  6C                 	db	108
  2185  00EEE1  6F                 	db	111
  2186  00EEE2  74                 	db	116
  2187  00EEE3  20                 	db	32
  2188  00EEE4  32                 	db	50
  2189  00EEE5  00                 	db	0
  2190  00EEE6  00                 	db	0
  2191  00EEE7  00                 	db	0
  2192  00EEE8  00                 	db	0
  2193  00EEE9  00                 	db	0
  2194  00EEEA  00                 	db	0
  2195  00EEEB  00                 	db	0
  2196  00EEEC  00                 	db	0
  2197  00EEED  00                 	db	0
  2198  00EEEE  00                 	db	0
  2199  00EEEF  00                 	db	0
  2200  00EEF0  53                 	db	83
  2201  00EEF1  6C                 	db	108
  2202  00EEF2  6F                 	db	111
  2203  00EEF3  74                 	db	116
  2204  00EEF4  20                 	db	32
  2205  00EEF5  33                 	db	51
  2206  00EEF6  00                 	db	0
  2207  00EEF7  00                 	db	0
  2208  00EEF8  00                 	db	0
  2209  00EEF9  00                 	db	0
  2210  00EEFA  00                 	db	0
  2211  00EEFB  00                 	db	0
  2212  00EEFC  00                 	db	0
  2213  00EEFD  00                 	db	0
  2214  00EEFE  00                 	db	0
  2215  00EEFF  00                 	db	0
  2216  00EF00  00                 	db	0
  2217  00EF01  53                 	db	83
  2218  00EF02  6C                 	db	108
  2219  00EF03  6F                 	db	111
  2220  00EF04  74                 	db	116
  2221  00EF05  20                 	db	32
  2222  00EF06  34                 	db	52
  2223  00EF07  00                 	db	0
  2224  00EF08  00                 	db	0
  2225  00EF09  00                 	db	0
  2226  00EF0A  00                 	db	0
  2227  00EF0B  00                 	db	0
  2228  00EF0C  00                 	db	0
  2229  00EF0D  00                 	db	0
  2230  00EF0E  00                 	db	0
  2231  00EF0F  00                 	db	0
  2232  00EF10  00                 	db	0
  2233  00EF11  00                 	db	0
  2234  00EF12  45                 	db	69
  2235  00EF13  78                 	db	120
  2236  00EF14  69                 	db	105
  2237  00EF15  74                 	db	116
  2238  00EF16  00                 	db	0
  2239  00EF17  00                 	db	0
  2240  00EF18  00                 	db	0
  2241  00EF19  00                 	db	0
  2242  00EF1A  00                 	db	0
  2243  00EF1B  00                 	db	0
  2244  00EF1C  00                 	db	0
  2245  00EF1D  00                 	db	0
  2246  00EF1E  00                 	db	0
  2247  00EF1F  00                 	db	0
  2248  00EF20  00                 	db	0
  2249  00EF21  00                 	db	0
  2250  00EF22  00                 	db	0
  2251  00EF23  43                 	db	67
  2252  00EF24  57                 	db	87
  2253  00EF25  20                 	db	32
  2254  00EF26  49                 	db	73
  2255  00EF27  53                 	db	83
  2256  00EF28  20                 	db	32
  2257  00EF29  49                 	db	73
  2258  00EF2A  4E                 	db	78
  2259  00EF2B  43                 	db	67
  2260  00EF2C  52                 	db	82
  2261  00EF2D  45                 	db	69
  2262  00EF2E  41                 	db	65
  2263  00EF2F  53                 	db	83
  2264  00EF30  45                 	db	69
  2265  00EF31  00                 	db	0
  2266  00EF32  00                 	db	0
  2267  00EF33  00                 	db	0
  2268  00EF34  43                 	db	67
  2269  00EF35  43                 	db	67
  2270  00EF36  57                 	db	87
  2271  00EF37  20                 	db	32
  2272  00EF38  49                 	db	73
  2273  00EF39  53                 	db	83
  2274  00EF3A  20                 	db	32
  2275  00EF3B  49                 	db	73
  2276  00EF3C  4E                 	db	78
  2277  00EF3D  43                 	db	67
  2278  00EF3E  52                 	db	82
  2279  00EF3F  45                 	db	69
  2280  00EF40  41                 	db	65
  2281  00EF41  53                 	db	83
  2282  00EF42  45                 	db	69
  2283  00EF43  00                 	db	0
  2284  00EF44  00                 	db	0
  2285  00EF45  41                 	db	65
  2286  00EF46  72                 	db	114
  2287  00EF47  70                 	db	112
  2288  00EF48  65                 	db	101
  2289  00EF49  67                 	db	103
  2290  00EF4A  67                 	db	103
  2291  00EF4B  69                 	db	105
  2292  00EF4C  6F                 	db	111
  2293  00EF4D  20                 	db	32
  2294  00EF4E  4F                 	db	79
  2295  00EF4F  46                 	db	70
  2296  00EF50  46                 	db	70
  2297  00EF51  2F                 	db	47
  2298  00EF52  4F                 	db	79
  2299  00EF53  4E                 	db	78
  2300  00EF54  00                 	db	0
  2301  00EF55  00                 	db	0
  2302  00EF56  54                 	db	84
  2303  00EF57  65                 	db	101
  2304  00EF58  6D                 	db	109
  2305  00EF59  70                 	db	112
  2306  00EF5A  6F                 	db	111
  2307  00EF5B  00                 	db	0
  2308  00EF5C  00                 	db	0
  2309  00EF5D  00                 	db	0
  2310  00EF5E  00                 	db	0
  2311  00EF5F  00                 	db	0
  2312  00EF60  00                 	db	0
  2313  00EF61  00                 	db	0
  2314  00EF62  00                 	db	0
  2315  00EF63  00                 	db	0
  2316  00EF64  00                 	db	0
  2317  00EF65  00                 	db	0
  2318  00EF66  00                 	db	0
  2319  00EF67  4F                 	db	79
  2320  00EF68  63                 	db	99
  2321  00EF69  74                 	db	116
  2322  00EF6A  61                 	db	97
  2323  00EF6B  76                 	db	118
  2324  00EF6C  65                 	db	101
  2325  00EF6D  20                 	db	32
  2326  00EF6E  52                 	db	82
  2327  00EF6F  61                 	db	97
  2328  00EF70  6E                 	db	110
  2329  00EF71  67                 	db	103
  2330  00EF72  65                 	db	101
  2331  00EF73  00                 	db	0
  2332  00EF74  00                 	db	0
  2333  00EF75  00                 	db	0
  2334  00EF76  00                 	db	0
  2335  00EF77  00                 	db	0
  2336  00EF78  41                 	db	65
  2337  00EF79  72                 	db	114
  2338  00EF7A  70                 	db	112
  2339  00EF7B  65                 	db	101
  2340  00EF7C  67                 	db	103
  2341  00EF7D  67                 	db	103
  2342  00EF7E  69                 	db	105
  2343  00EF7F  6F                 	db	111
  2344  00EF80  20                 	db	32
  2345  00EF81  54                 	db	84
  2346  00EF82  79                 	db	121
  2347  00EF83  70                 	db	112
  2348  00EF84  65                 	db	101
  2349  00EF85  00                 	db	0
  2350  00EF86  00                 	db	0
  2351  00EF87  00                 	db	0
  2352  00EF88  00                 	db	0
  2353  00EF89  4E                 	db	78
  2354  00EF8A  6F                 	db	111
  2355  00EF8B  74                 	db	116
  2356  00EF8C  65                 	db	101
  2357  00EF8D  20                 	db	32
  2358  00EF8E  4C                 	db	76
  2359  00EF8F  65                 	db	101
  2360  00EF90  6E                 	db	110
  2361  00EF91  67                 	db	103
  2362  00EF92  74                 	db	116
  2363  00EF93  68                 	db	104
  2364  00EF94  00                 	db	0
  2365  00EF95  00                 	db	0
  2366  00EF96  00                 	db	0
  2367  00EF97  00                 	db	0
  2368  00EF98  00                 	db	0
  2369  00EF99  00                 	db	0
  2370  00EF9A  4C                 	db	76
  2371  00EF9B  61                 	db	97
  2372  00EF9C  74                 	db	116
  2373  00EF9D  63                 	db	99
  2374  00EF9E  68                 	db	104
  2375  00EF9F  2F                 	db	47
  2376  00EFA0  41                 	db	65
  2377  00EFA1  75                 	db	117
  2378  00EFA2  74                 	db	116
  2379  00EFA3  6F                 	db	111
  2380  00EFA4  20                 	db	32
  2381  00EFA5  4C                 	db	76
  2382  00EFA6  61                 	db	97
  2383  00EFA7  74                 	db	116
  2384  00EFA8  63                 	db	99
  2385  00EFA9  68                 	db	104
  2386  00EFAA  00                 	db	0
  2387  00EFAB  55                 	db	85
  2388  00EFAC  6E                 	db	110
  2389  00EFAD  2D                 	db	45
  2390  00EFAE  6C                 	db	108
  2391  00EFAF  61                 	db	97
  2392  00EFB0  74                 	db	116
  2393  00EFB1  63                 	db	99
  2394  00EFB2  68                 	db	104
  2395  00EFB3  20                 	db	32
  2396  00EFB4  4D                 	db	77
  2397  00EFB5  6F                 	db	111
  2398  00EFB6  64                 	db	100
  2399  00EFB7  65                 	db	101
  2400  00EFB8  00                 	db	0
  2401  00EFB9  00                 	db	0
  2402  00EFBA  00                 	db	0
  2403  00EFBB  00                 	db	0
  2404  00EFBC  52                 	db	82
  2405  00EFBD  61                 	db	97
  2406  00EFBE  6E                 	db	110
  2407  00EFBF  64                 	db	100
  2408  00EFC0  6F                 	db	111
  2409  00EFC1  6D                 	db	109
  2410  00EFC2  69                 	db	105
  2411  00EFC3  7A                 	db	122
  2412  00EFC4  65                 	db	101
  2413  00EFC5  2F                 	db	47
  2414  00EFC6  53                 	db	83
  2415  00EFC7  6B                 	db	107
  2416  00EFC8  69                 	db	105
  2417  00EFC9  70                 	db	112
  2418  00EFCA  00                 	db	0
  2419  00EFCB  00                 	db	0
  2420  00EFCC  00                 	db	0
  2421  00EFCD  4C                 	db	76
  2422  00EFCE  61                 	db	97
  2423  00EFCF  73                 	db	115
  2424  00EFD0  74                 	db	116
  2425  00EFD1  20                 	db	32
  2426  00EFD2  4E                 	db	78
  2427  00EFD3  6F                 	db	111
  2428  00EFD4  74                 	db	116
  2429  00EFD5  65                 	db	101
  2430  00EFD6  20                 	db	32
  2431  00EFD7  4D                 	db	77
  2432  00EFD8  6F                 	db	111
  2433  00EFD9  64                 	db	100
  2434  00EFDA  65                 	db	101
  2435  00EFDB  00                 	db	0
  2436  00EFDC  00                 	db	0
  2437  00EFDD  00                 	db	0
  2438  00EFDE  41                 	db	65
  2439  00EFDF  52                 	db	82
  2440  00EFE0  50                 	db	80
  2441  00EFE1  45                 	db	69
  2442  00EFE2  47                 	db	71
  2443  00EFE3  47                 	db	71
  2444  00EFE4  49                 	db	73
  2445  00EFE5  41                 	db	65
  2446  00EFE6  54                 	db	84
  2447  00EFE7  4F                 	db	79
  2448  00EFE8  52                 	db	82
  2449  00EFE9  20                 	db	32
  2450  00EFEA  4F                 	db	79
  2451  00EFEB  46                 	db	70
  2452  00EFEC  46                 	db	70
  2453  00EFED  00                 	db	0
  2454  00EFEE  00                 	db	0
  2455  00EFEF  41                 	db	65
  2456  00EFF0  52                 	db	82
  2457  00EFF1  50                 	db	80
  2458  00EFF2  45                 	db	69
  2459  00EFF3  47                 	db	71
  2460  00EFF4  47                 	db	71
  2461  00EFF5  49                 	db	73
  2462  00EFF6  41                 	db	65
  2463  00EFF7  54                 	db	84
  2464  00EFF8  4F                 	db	79
  2465  00EFF9  52                 	db	82
  2466  00EFFA  20                 	db	32
  2467  00EFFB  4F                 	db	79
  2468  00EFFC  4E                 	db	78
  2469  00EFFD  00                 	db	0
  2470  00EFFE  00                 	db	0
  2471  00EFFF  00                 	db	0
  2472  00F000  55                 	db	85
  2473  00F001  50                 	db	80
  2474  00F002  00                 	db	0
  2475  00F003  00                 	db	0
  2476  00F004  00                 	db	0
  2477  00F005  00                 	db	0
  2478  00F006  00                 	db	0
  2479  00F007  00                 	db	0
  2480  00F008  00                 	db	0
  2481  00F009  00                 	db	0
  2482  00F00A  00                 	db	0
  2483  00F00B  00                 	db	0
  2484  00F00C  00                 	db	0
  2485  00F00D  00                 	db	0
  2486  00F00E  00                 	db	0
  2487  00F00F  00                 	db	0
  2488  00F010  00                 	db	0
  2489  00F011  44                 	db	68
  2490  00F012  4F                 	db	79
  2491  00F013  57                 	db	87
  2492  00F014  4E                 	db	78
  2493  00F015  00                 	db	0
  2494  00F016  00                 	db	0
  2495  00F017  00                 	db	0
  2496  00F018  00                 	db	0
  2497  00F019  00                 	db	0
  2498  00F01A  00                 	db	0
  2499  00F01B  00                 	db	0
  2500  00F01C  00                 	db	0
  2501  00F01D  00                 	db	0
  2502  00F01E  00                 	db	0
  2503  00F01F  00                 	db	0
  2504  00F020  00                 	db	0
  2505  00F021  00                 	db	0
  2506  00F022  55                 	db	85
  2507  00F023  50                 	db	80
  2508  00F024  2F                 	db	47
  2509  00F025  44                 	db	68
  2510  00F026  4F                 	db	79
  2511  00F027  57                 	db	87
  2512  00F028  4E                 	db	78
  2513  00F029  00                 	db	0
  2514  00F02A  00                 	db	0
  2515  00F02B  00                 	db	0
  2516  00F02C  00                 	db	0
  2517  00F02D  00                 	db	0
  2518  00F02E  00                 	db	0
  2519  00F02F  00                 	db	0
  2520  00F030  00                 	db	0
  2521  00F031  00                 	db	0
  2522  00F032  00                 	db	0
  2523  00F033  44                 	db	68
  2524  00F034  4F                 	db	79
  2525  00F035  57                 	db	87
  2526  00F036  4E                 	db	78
  2527  00F037  2F                 	db	47
  2528  00F038  55                 	db	85
  2529  00F039  50                 	db	80
  2530  00F03A  00                 	db	0
  2531  00F03B  00                 	db	0
  2532  00F03C  00                 	db	0
  2533  00F03D  00                 	db	0
  2534  00F03E  00                 	db	0
  2535  00F03F  00                 	db	0
  2536  00F040  00                 	db	0
  2537  00F041  00                 	db	0
  2538  00F042  00                 	db	0
  2539  00F043  00                 	db	0
  2540  00F044  53                 	db	83
  2541  00F045  48                 	db	72
  2542  00F046  55                 	db	85
  2543  00F047  46                 	db	70
  2544  00F048  46                 	db	70
  2545  00F049  4C                 	db	76
  2546  00F04A  45                 	db	69
  2547  00F04B  00                 	db	0
  2548  00F04C  00                 	db	0
  2549  00F04D  00                 	db	0
  2550  00F04E  00                 	db	0
  2551  00F04F  00                 	db	0
  2552  00F050  00                 	db	0
  2553  00F051  00                 	db	0
  2554  00F052  00                 	db	0
  2555  00F053  00                 	db	0
  2556  00F054  00                 	db	0
  2557  00F055  52                 	db	82
  2558  00F056  41                 	db	65
  2559  00F057  4E                 	db	78
  2560  00F058  44                 	db	68
  2561  00F059  4F                 	db	79
  2562  00F05A  4D                 	db	77
  2563  00F05B  00                 	db	0
  2564  00F05C  00                 	db	0
  2565  00F05D  00                 	db	0
  2566  00F05E  00                 	db	0
  2567  00F05F  00                 	db	0
  2568  00F060  00                 	db	0
  2569  00F061  00                 	db	0
  2570  00F062  00                 	db	0
  2571  00F063  00                 	db	0
  2572  00F064  00                 	db	0
  2573  00F065  00                 	db	0
  2574  00F066  41                 	db	65
  2575  00F067  53                 	db	83
  2576  00F068  20                 	db	32
  2577  00F069  50                 	db	80
  2578  00F06A  52                 	db	82
  2579  00F06B  45                 	db	69
  2580  00F06C  53                 	db	83
  2581  00F06D  53                 	db	83
  2582  00F06E  45                 	db	69
  2583  00F06F  44                 	db	68
  2584  00F070  00                 	db	0
  2585  00F071  00                 	db	0
  2586  00F072  00                 	db	0
  2587  00F073  00                 	db	0
  2588  00F074  00                 	db	0
  2589  00F075  00                 	db	0
  2590  00F076  00                 	db	0
  2591  00F077  31                 	db	49
  2592  00F078  2F                 	db	47
  2593  00F079  34                 	db	52
  2594  00F07A  00                 	db	0
  2595  00F07B  00                 	db	0
  2596  00F07C  00                 	db	0
  2597  00F07D  00                 	db	0
  2598  00F07E  00                 	db	0
  2599  00F07F  00                 	db	0
  2600  00F080  00                 	db	0
  2601  00F081  00                 	db	0
  2602  00F082  00                 	db	0
  2603  00F083  00                 	db	0
  2604  00F084  00                 	db	0
  2605  00F085  00                 	db	0
  2606  00F086  00                 	db	0
  2607  00F087  00                 	db	0
  2608  00F088  31                 	db	49
  2609  00F089  2F                 	db	47
  2610  00F08A  34                 	db	52
  2611  00F08B  20                 	db	32
  2612  00F08C  44                 	db	68
  2613  00F08D  4F                 	db	79
  2614  00F08E  54                 	db	84
  2615  00F08F  54                 	db	84
  2616  00F090  45                 	db	69
  2617  00F091  44                 	db	68
  2618  00F092  00                 	db	0
  2619  00F093  00                 	db	0
  2620  00F094  00                 	db	0
  2621  00F095  00                 	db	0
  2622  00F096  00                 	db	0
  2623  00F097  00                 	db	0
  2624  00F098  00                 	db	0
  2625  00F099  31                 	db	49
  2626  00F09A  2F                 	db	47
  2627  00F09B  34                 	db	52
  2628  00F09C  20                 	db	32
  2629  00F09D  54                 	db	84
  2630  00F09E  52                 	db	82
  2631  00F09F  49                 	db	73
  2632  00F0A0  50                 	db	80
  2633  00F0A1  4C                 	db	76
  2634  00F0A2  45                 	db	69
  2635  00F0A3  54                 	db	84
  2636  00F0A4  00                 	db	0
  2637  00F0A5  00                 	db	0
  2638  00F0A6  00                 	db	0
  2639  00F0A7  00                 	db	0
  2640  00F0A8  00                 	db	0
  2641  00F0A9  00                 	db	0
  2642  00F0AA  31                 	db	49
  2643  00F0AB  2F                 	db	47
  2644  00F0AC  38                 	db	56
  2645  00F0AD  00                 	db	0
  2646  00F0AE  00                 	db	0
  2647  00F0AF  00                 	db	0
  2648  00F0B0  00                 	db	0
  2649  00F0B1  00                 	db	0
  2650  00F0B2  00                 	db	0
  2651  00F0B3  00                 	db	0
  2652  00F0B4  00                 	db	0
  2653  00F0B5  00                 	db	0
  2654  00F0B6  00                 	db	0
  2655  00F0B7  00                 	db	0
  2656  00F0B8  00                 	db	0
  2657  00F0B9  00                 	db	0
  2658  00F0BA  00                 	db	0
  2659  00F0BB  31                 	db	49
  2660  00F0BC  2F                 	db	47
  2661  00F0BD  38                 	db	56
  2662  00F0BE  20                 	db	32
  2663  00F0BF  44                 	db	68
  2664  00F0C0  4F                 	db	79
  2665  00F0C1  54                 	db	84
  2666  00F0C2  54                 	db	84
  2667  00F0C3  45                 	db	69
  2668  00F0C4  44                 	db	68
  2669  00F0C5  00                 	db	0
  2670  00F0C6  00                 	db	0
  2671  00F0C7  00                 	db	0
  2672  00F0C8  00                 	db	0
  2673  00F0C9  00                 	db	0
  2674  00F0CA  00                 	db	0
  2675  00F0CB  00                 	db	0
  2676  00F0CC  31                 	db	49
  2677  00F0CD  2F                 	db	47
  2678  00F0CE  38                 	db	56
  2679  00F0CF  20                 	db	32
  2680  00F0D0  54                 	db	84
  2681  00F0D1  52                 	db	82
  2682  00F0D2  49                 	db	73
  2683  00F0D3  50                 	db	80
  2684  00F0D4  4C                 	db	76
  2685  00F0D5  45                 	db	69
  2686  00F0D6  54                 	db	84
  2687  00F0D7  00                 	db	0
  2688  00F0D8  00                 	db	0
  2689  00F0D9  00                 	db	0
  2690  00F0DA  00                 	db	0
  2691  00F0DB  00                 	db	0
  2692  00F0DC  00                 	db	0
  2693  00F0DD  31                 	db	49
  2694  00F0DE  2F                 	db	47
  2695  00F0DF  31                 	db	49
  2696  00F0E0  36                 	db	54
  2697  00F0E1  00                 	db	0
  2698  00F0E2  00                 	db	0
  2699  00F0E3  00                 	db	0
  2700  00F0E4  00                 	db	0
  2701  00F0E5  00                 	db	0
  2702  00F0E6  00                 	db	0
  2703  00F0E7  00                 	db	0
  2704  00F0E8  00                 	db	0
  2705  00F0E9  00                 	db	0
  2706  00F0EA  00                 	db	0
  2707  00F0EB  00                 	db	0
  2708  00F0EC  00                 	db	0
  2709  00F0ED  00                 	db	0
  2710  00F0EE  31                 	db	49
  2711  00F0EF  2F                 	db	47
  2712  00F0F0  31                 	db	49
  2713  00F0F1  36                 	db	54
  2714  00F0F2  20                 	db	32
  2715  00F0F3  44                 	db	68
  2716  00F0F4  4F                 	db	79
  2717  00F0F5  54                 	db	84
  2718  00F0F6  54                 	db	84
  2719  00F0F7  45                 	db	69
  2720  00F0F8  44                 	db	68
  2721  00F0F9  00                 	db	0
  2722  00F0FA  00                 	db	0
  2723  00F0FB  00                 	db	0
  2724  00F0FC  00                 	db	0
  2725  00F0FD  00                 	db	0
  2726  00F0FE  00                 	db	0
  2727  00F0FF  31                 	db	49
  2728  00F100  2F                 	db	47
  2729  00F101  31                 	db	49
  2730  00F102  36                 	db	54
  2731  00F103  20                 	db	32
  2732  00F104  54                 	db	84
  2733  00F105  52                 	db	82
  2734  00F106  49                 	db	73
  2735  00F107  50                 	db	80
  2736  00F108  4C                 	db	76
  2737  00F109  45                 	db	69
  2738  00F10A  54                 	db	84
  2739  00F10B  00                 	db	0
  2740  00F10C  00                 	db	0
  2741  00F10D  00                 	db	0
  2742  00F10E  00                 	db	0
  2743  00F10F  00                 	db	0
  2744  00F110  31                 	db	49
  2745  00F111  2F                 	db	47
  2746  00F112  33                 	db	51
  2747  00F113  32                 	db	50
  2748  00F114  00                 	db	0
  2749  00F115  00                 	db	0
  2750  00F116  00                 	db	0
  2751  00F117  00                 	db	0
  2752  00F118  00                 	db	0
  2753  00F119  00                 	db	0
  2754  00F11A  00                 	db	0
  2755  00F11B  00                 	db	0
  2756  00F11C  00                 	db	0
  2757  00F11D  00                 	db	0
  2758  00F11E  00                 	db	0
  2759  00F11F  00                 	db	0
  2760  00F120  00                 	db	0
  2761  00F121  31                 	db	49
  2762  00F122  2F                 	db	47
  2763  00F123  33                 	db	51
  2764  00F124  32                 	db	50
  2765  00F125  20                 	db	32
  2766  00F126  44                 	db	68
  2767  00F127  4F                 	db	79
  2768  00F128  54                 	db	84
  2769  00F129  54                 	db	84
  2770  00F12A  45                 	db	69
  2771  00F12B  44                 	db	68
  2772  00F12C  00                 	db	0
  2773  00F12D  00                 	db	0
  2774  00F12E  00                 	db	0
  2775  00F12F  00                 	db	0
  2776  00F130  00                 	db	0
  2777  00F131  00                 	db	0
  2778  00F132  31                 	db	49
  2779  00F133  2F                 	db	47
  2780  00F134  33                 	db	51
  2781  00F135  32                 	db	50
  2782  00F136  20                 	db	32
  2783  00F137  54                 	db	84
  2784  00F138  52                 	db	82
  2785  00F139  49                 	db	73
  2786  00F13A  50                 	db	80
  2787  00F13B  4C                 	db	76
  2788  00F13C  45                 	db	69
  2789  00F13D  54                 	db	84
  2790  00F13E  00                 	db	0
  2791  00F13F  00                 	db	0
  2792  00F140  00                 	db	0
  2793  00F141  00                 	db	0
  2794  00F142  00                 	db	0
  2795  00F143  53                 	db	83
  2796  00F144  45                 	db	69
  2797  00F145  54                 	db	84
  2798  00F146  2F                 	db	47
  2799  00F147  43                 	db	67
  2800  00F148  4C                 	db	76
  2801  00F149  45                 	db	69
  2802  00F14A  41                 	db	65
  2803  00F14B  52                 	db	82
  2804  00F14C  20                 	db	32
  2805  00F14D  4C                 	db	76
  2806  00F14E  41                 	db	65
  2807  00F14F  54                 	db	84
  2808  00F150  43                 	db	67
  2809  00F151  48                 	db	72
  2810  00F152  00                 	db	0
  2811  00F153  00                 	db	0
  2812  00F154  41                 	db	65
  2813  00F155  55                 	db	85
  2814  00F156  54                 	db	84
  2815  00F157  4F                 	db	79
  2816  00F158  20                 	db	32
  2817  00F159  4C                 	db	76
  2818  00F15A  41                 	db	65
  2819  00F15B  54                 	db	84
  2820  00F15C  43                 	db	67
  2821  00F15D  48                 	db	72
  2822  00F15E  00                 	db	0
  2823  00F15F  00                 	db	0
  2824  00F160  00                 	db	0
  2825  00F161  00                 	db	0
  2826  00F162  00                 	db	0
  2827  00F163  00                 	db	0
  2828  00F164  00                 	db	0
  2829  00F165  55                 	db	85
  2830  00F166  6E                 	db	110
  2831  00F167  2D                 	db	45
  2832  00F168  4C                 	db	76
  2833  00F169  61                 	db	97
  2834  00F16A  74                 	db	116
  2835  00F16B  63                 	db	99
  2836  00F16C  68                 	db	104
  2837  00F16D  20                 	db	32
  2838  00F16E  4D                 	db	77
  2839  00F16F  6F                 	db	111
  2840  00F170  64                 	db	100
  2841  00F171  65                 	db	101
  2842  00F172  00                 	db	0
  2843  00F173  00                 	db	0
  2844  00F174  00                 	db	0
  2845  00F175  00                 	db	0
  2846  00F176  55                 	db	85
  2847  00F177  4E                 	db	78
  2848  00F178  4C                 	db	76
  2849  00F179  41                 	db	65
  2850  00F17A  54                 	db	84
  2851  00F17B  43                 	db	67
  2852  00F17C  48                 	db	72
  2853  00F17D  20                 	db	32
  2854  00F17E  41                 	db	65
  2855  00F17F  4C                 	db	76
  2856  00F180  4C                 	db	76
  2857  00F181  00                 	db	0
  2858  00F182  00                 	db	0
  2859  00F183  00                 	db	0
  2860  00F184  00                 	db	0
  2861  00F185  00                 	db	0
  2862  00F186  00                 	db	0
  2863  00F187  4F                 	db	79
  2864  00F188  4E                 	db	78
  2865  00F189  45                 	db	69
  2866  00F18A  20                 	db	32
  2867  00F18B  41                 	db	65
  2868  00F18C  54                 	db	84
  2869  00F18D  20                 	db	32
  2870  00F18E  41                 	db	65
  2871  00F18F  20                 	db	32
  2872  00F190  54                 	db	84
  2873  00F191  49                 	db	73
  2874  00F192  4D                 	db	77
  2875  00F193  45                 	db	69
  2876  00F194  00                 	db	0
  2877  00F195  00                 	db	0
  2878  00F196  00                 	db	0
  2879  00F197  00                 	db	0
  2880  00F198  52                 	db	82
  2881  00F199  61                 	db	97
  2882  00F19A  6E                 	db	110
  2883  00F19B  64                 	db	100
  2884  00F19C  6F                 	db	111
  2885  00F19D  6D                 	db	109
  2886  00F19E  69                 	db	105
  2887  00F19F  7A                 	db	122
  2888  00F1A0  65                 	db	101
  2889  00F1A1  00                 	db	0
  2890  00F1A2  00                 	db	0
  2891  00F1A3  00                 	db	0
  2892  00F1A4  00                 	db	0
  2893  00F1A5  00                 	db	0
  2894  00F1A6  00                 	db	0
  2895  00F1A7  00                 	db	0
  2896  00F1A8  00                 	db	0
  2897  00F1A9  53                 	db	83
  2898  00F1AA  6B                 	db	107
  2899  00F1AB  69                 	db	105
  2900  00F1AC  70                 	db	112
  2901  00F1AD  20                 	db	32
  2902  00F1AE  46                 	db	70
  2903  00F1AF  69                 	db	105
  2904  00F1B0  72                 	db	114
  2905  00F1B1  73                 	db	115
  2906  00F1B2  74                 	db	116
  2907  00F1B3  2F                 	db	47
  2908  00F1B4  4C                 	db	76
  2909  00F1B5  61                 	db	97
  2910  00F1B6  73                 	db	115
  2911  00F1B7  74                 	db	116
  2912  00F1B8  00                 	db	0
  2913  00F1B9  00                 	db	0
  2914  00F1BA  52                 	db	82
  2915  00F1BB  41                 	db	65
  2916  00F1BC  4E                 	db	78
  2917  00F1BD  44                 	db	68
  2918  00F1BE  4F                 	db	79
  2919  00F1BF  4D                 	db	77
  2920  00F1C0  49                 	db	73
  2921  00F1C1  5A                 	db	90
  2922  00F1C2  45                 	db	69
  2923  00F1C3  20                 	db	32
  2924  00F1C4  41                 	db	65
  2925  00F1C5  55                 	db	85
  2926  00F1C6  54                 	db	84
  2927  00F1C7  4F                 	db	79
  2928  00F1C8  00                 	db	0
  2929  00F1C9  00                 	db	0
  2930  00F1CA  00                 	db	0
  2931  00F1CB  52                 	db	82
  2932  00F1CC  41                 	db	65
  2933  00F1CD  4E                 	db	78
  2934  00F1CE  44                 	db	68
  2935  00F1CF  4F                 	db	79
  2936  00F1D0  4D                 	db	77
  2937  00F1D1  49                 	db	73
  2938  00F1D2  5A                 	db	90
  2939  00F1D3  45                 	db	69
  2940  00F1D4  20                 	db	32
  2941  00F1D5  4F                 	db	79
  2942  00F1D6  4E                 	db	78
  2943  00F1D7  43                 	db	67
  2944  00F1D8  45                 	db	69
  2945  00F1D9  00                 	db	0
  2946  00F1DA  00                 	db	0
  2947  00F1DB  00                 	db	0
  2948  00F1DC  4B                 	db	75
  2949  00F1DD  65                 	db	101
  2950  00F1DE  79                 	db	121
  2951  00F1DF  20                 	db	32
  2952  00F1E0  70                 	db	112
  2953  00F1E1  72                 	db	114
  2954  00F1E2  65                 	db	101
  2955  00F1E3  73                 	db	115
  2956  00F1E4  73                 	db	115
  2957  00F1E5  00                 	db	0
  2958  00F1E6  00                 	db	0
  2959  00F1E7  00                 	db	0
  2960  00F1E8  00                 	db	0
  2961  00F1E9  00                 	db	0
  2962  00F1EA  00                 	db	0
  2963  00F1EB  00                 	db	0
  2964  00F1EC  00                 	db	0
  2965  00F1ED  4B                 	db	75
  2966  00F1EE  65                 	db	101
  2967  00F1EF  79                 	db	121
  2968  00F1F0  20                 	db	32
  2969  00F1F1  72                 	db	114
  2970  00F1F2  65                 	db	101
  2971  00F1F3  6C                 	db	108
  2972  00F1F4  65                 	db	101
  2973  00F1F5  61                 	db	97
  2974  00F1F6  73                 	db	115
  2975  00F1F7  65                 	db	101
  2976  00F1F8  00                 	db	0
  2977  00F1F9  00                 	db	0
  2978  00F1FA  00                 	db	0
  2979  00F1FB  00                 	db	0
  2980  00F1FC  00                 	db	0
  2981  00F1FD  00                 	db	0
  2982  00F1FE  54                 	db	84
  2983  00F1FF  72                 	db	114
  2984  00F200  61                 	db	97
  2985  00F201  6E                 	db	110
  2986  00F202  73                 	db	115
  2987  00F203  70                 	db	112
  2988  00F204  6F                 	db	111
  2989  00F205  73                 	db	115
  2990  00F206  65                 	db	101
  2991  00F207  00                 	db	0
  2992  00F208  00                 	db	0
  2993  00F209  00                 	db	0
  2994  00F20A  00                 	db	0
  2995  00F20B  00                 	db	0
  2996  00F20C  00                 	db	0
  2997  00F20D  00                 	db	0
  2998  00F20E  00                 	db	0
  2999  00F20F  52                 	db	82
  3000  00F210  65                 	db	101
  3001  00F211  73                 	db	115
  3002  00F212  65                 	db	101
  3003  00F213  74                 	db	116
  3004  00F214  00                 	db	0
  3005  00F215  00                 	db	0
  3006  00F216  00                 	db	0
  3007  00F217  00                 	db	0
  3008  00F218  00                 	db	0
  3009  00F219  00                 	db	0
  3010  00F21A  00                 	db	0
  3011  00F21B  00                 	db	0
  3012  00F21C  00                 	db	0
  3013  00F21D  00                 	db	0
  3014  00F21E  00                 	db	0
  3015  00F21F  00                 	db	0
  3016  00F220                     __end_ofascii@LCD_STRINGS:
  3017                           	opt stack 0
  3018  00F220                     _seg_ascii:
  3019                           	opt stack 0
  3020  00F220  3F                 	db	63
  3021  00F221  06                 	db	6
  3022  00F222  5B                 	db	91
  3023  00F223  4F                 	db	79
  3024  00F224  66                 	db	102
  3025  00F225  6D                 	db	109
  3026  00F226  7D                 	db	125
  3027  00F227  07                 	db	7
  3028  00F228  7F                 	db	127
  3029  00F229  6F                 	db	111
  3030  00F22A  00                 	db	0
  3031  00F22B  00                 	db	0
  3032  00F22C  00                 	db	0
  3033  00F22D  00                 	db	0
  3034  00F22E  00                 	db	0
  3035  00F22F  00                 	db	0
  3036  00F230  00                 	db	0
  3037  00F231  77                 	db	119
  3038  00F232  00                 	db	0
  3039  00F233  39                 	db	57
  3040  00F234  00                 	db	0
  3041  00F235  79                 	db	121
  3042  00F236  71                 	db	113
  3043  00F237  3D                 	db	61
  3044  00F238  76                 	db	118
  3045  00F239  30                 	db	48
  3046  00F23A  1E                 	db	30
  3047  00F23B  00                 	db	0
  3048  00F23C  38                 	db	56
  3049  00F23D  00                 	db	0
  3050  00F23E  00                 	db	0
  3051  00F23F  3F                 	db	63
  3052  00F240  73                 	db	115
  3053  00F241  00                 	db	0
  3054  00F242  00                 	db	0
  3055  00F243  6D                 	db	109
  3056  00F244  00                 	db	0
  3057  00F245  3E                 	db	62
  3058  00F246  00                 	db	0
  3059  00F247  00                 	db	0
  3060  00F248  00                 	db	0
  3061  00F249  00                 	db	0
  3062  00F24A  00                 	db	0
  3063  00F24B  00                 	db	0
  3064  00F24C  00                 	db	0
  3065  00F24D  00                 	db	0
  3066  00F24E  00                 	db	0
  3067  00F24F  00                 	db	0
  3068  00F250  00                 	db	0
  3069  00F251  5F                 	db	95
  3070  00F252  7C                 	db	124
  3071  00F253  58                 	db	88
  3072  00F254  5E                 	db	94
  3073  00F255  00                 	db	0
  3074  00F256  00                 	db	0
  3075  00F257  00                 	db	0
  3076  00F258  74                 	db	116
  3077  00F259  00                 	db	0
  3078  00F25A  00                 	db	0
  3079  00F25B  00                 	db	0
  3080  00F25C  00                 	db	0
  3081  00F25D  00                 	db	0
  3082  00F25E  54                 	db	84
  3083  00F25F  5C                 	db	92
  3084  00F260  00                 	db	0
  3085  00F261  67                 	db	103
  3086  00F262  50                 	db	80
  3087  00F263  00                 	db	0
  3088  00F264  78                 	db	120
  3089  00F265  1C                 	db	28
  3090  00F266  00                 	db	0
  3091  00F267  00                 	db	0
  3092  00F268  00                 	db	0
  3093  00F269  6E                 	db	110
  3094  00F26A  00                 	db	0
  3095  00F26B                     __end_of_seg_ascii:
  3096                           	opt stack 0
  3097  00F26B                     _diatonic_seventh_minor:
  3098                           	opt stack 0
  3099  00F26B  00                 	db	0
  3100  00F26C  03                 	db	3
  3101  00F26D  07                 	db	7
  3102  00F26E  0A                 	db	10
  3103  00F26F  02                 	db	2
  3104  00F270  03                 	db	3
  3105  00F271  06                 	db	6
  3106  00F272  0A                 	db	10
  3107  00F273  03                 	db	3
  3108  00F274  04                 	db	4
  3109  00F275  07                 	db	7
  3110  00F276  0B                 	db	11
  3111  00F277  05                 	db	5
  3112  00F278  03                 	db	3
  3113  00F279  07                 	db	7
  3114  00F27A  0A                 	db	10
  3115  00F27B  07                 	db	7
  3116  00F27C  03                 	db	3
  3117  00F27D  07                 	db	7
  3118  00F27E  0A                 	db	10
  3119  00F27F  08                 	db	8
  3120  00F280  04                 	db	4
  3121  00F281  07                 	db	7
  3122  00F282  0B                 	db	11
  3123  00F283  0A                 	db	10
  3124  00F284  04                 	db	4
  3125  00F285  07                 	db	7
  3126  00F286  0A                 	db	10
  3127  00F287  0C                 	db	12
  3128  00F288  03                 	db	3
  3129  00F289  07                 	db	7
  3130  00F28A  0A                 	db	10
  3131  00F28B  0E                 	db	14
  3132  00F28C  03                 	db	3
  3133  00F28D  06                 	db	6
  3134  00F28E  0A                 	db	10
  3135  00F28F  0F                 	db	15
  3136  00F290  04                 	db	4
  3137  00F291  07                 	db	7
  3138  00F292  0B                 	db	11
  3139  00F293  11                 	db	17
  3140  00F294  03                 	db	3
  3141  00F295  07                 	db	7
  3142  00F296  0A                 	db	10
  3143  00F297  13                 	db	19
  3144  00F298  03                 	db	3
  3145  00F299  07                 	db	7
  3146  00F29A  0A                 	db	10
  3147  00F29B  14                 	db	20
  3148  00F29C  04                 	db	4
  3149  00F29D  07                 	db	7
  3150  00F29E  0B                 	db	11
  3151  00F29F  16                 	db	22
  3152  00F2A0  04                 	db	4
  3153  00F2A1  07                 	db	7
  3154  00F2A2  0A                 	db	10
  3155  00F2A3  18                 	db	24
  3156  00F2A4  03                 	db	3
  3157  00F2A5  07                 	db	7
  3158  00F2A6  0A                 	db	10
  3159  00F2A7                     __end_of_diatonic_seventh_minor:
  3160                           	opt stack 0
  3161  00F2A7                     _diatonic_seventh_major:
  3162                           	opt stack 0
  3163  00F2A7  00                 	db	0
  3164  00F2A8  04                 	db	4
  3165  00F2A9  07                 	db	7
  3166  00F2AA  0B                 	db	11
  3167  00F2AB  00                 	db	0
  3168  00F2AC  03                 	db	3
  3169  00F2AD  07                 	db	7
  3170  00F2AE  0A                 	db	10
  3171  00F2AF  00                 	db	0
  3172  00F2B0  03                 	db	3
  3173  00F2B1  07                 	db	7
  3174  00F2B2  0A                 	db	10
  3175  00F2B3  00                 	db	0
  3176  00F2B4  04                 	db	4
  3177  00F2B5  07                 	db	7
  3178  00F2B6  0B                 	db	11
  3179  00F2B7  00                 	db	0
  3180  00F2B8  04                 	db	4
  3181  00F2B9  07                 	db	7
  3182  00F2BA  0A                 	db	10
  3183  00F2BB  00                 	db	0
  3184  00F2BC  03                 	db	3
  3185  00F2BD  07                 	db	7
  3186  00F2BE  0A                 	db	10
  3187  00F2BF  00                 	db	0
  3188  00F2C0  03                 	db	3
  3189  00F2C1  06                 	db	6
  3190  00F2C2  0A                 	db	10
  3191  00F2C3  00                 	db	0
  3192  00F2C4  04                 	db	4
  3193  00F2C5  07                 	db	7
  3194  00F2C6  0B                 	db	11
  3195  00F2C7  00                 	db	0
  3196  00F2C8  03                 	db	3
  3197  00F2C9  07                 	db	7
  3198  00F2CA  0A                 	db	10
  3199  00F2CB  00                 	db	0
  3200  00F2CC  03                 	db	3
  3201  00F2CD  07                 	db	7
  3202  00F2CE  0A                 	db	10
  3203  00F2CF  00                 	db	0
  3204  00F2D0  04                 	db	4
  3205  00F2D1  07                 	db	7
  3206  00F2D2  0B                 	db	11
  3207  00F2D3  00                 	db	0
  3208  00F2D4  04                 	db	4
  3209  00F2D5  07                 	db	7
  3210  00F2D6  0A                 	db	10
  3211  00F2D7  00                 	db	0
  3212  00F2D8  03                 	db	3
  3213  00F2D9  07                 	db	7
  3214  00F2DA  0A                 	db	10
  3215  00F2DB  00                 	db	0
  3216  00F2DC  03                 	db	3
  3217  00F2DD  06                 	db	6
  3218  00F2DE  0A                 	db	10
  3219  00F2DF  00                 	db	0
  3220  00F2E0  04                 	db	4
  3221  00F2E1  07                 	db	7
  3222  00F2E2  0B                 	db	11
  3223  00F2E3                     __end_of_diatonic_seventh_major:
  3224                           	opt stack 0
  3225  00F2E3                     _diatonic_minor:
  3226                           	opt stack 0
  3227  00F2E3  00                 	db	0
  3228  00F2E4  03                 	db	3
  3229  00F2E5  07                 	db	7
  3230  00F2E6  02                 	db	2
  3231  00F2E7  03                 	db	3
  3232  00F2E8  06                 	db	6
  3233  00F2E9  03                 	db	3
  3234  00F2EA  04                 	db	4
  3235  00F2EB  07                 	db	7
  3236  00F2EC  05                 	db	5
  3237  00F2ED  03                 	db	3
  3238  00F2EE  07                 	db	7
  3239  00F2EF  07                 	db	7
  3240  00F2F0  03                 	db	3
  3241  00F2F1  07                 	db	7
  3242  00F2F2  08                 	db	8
  3243  00F2F3  04                 	db	4
  3244  00F2F4  07                 	db	7
  3245  00F2F5  0A                 	db	10
  3246  00F2F6  04                 	db	4
  3247  00F2F7  07                 	db	7
  3248  00F2F8  0C                 	db	12
  3249  00F2F9  03                 	db	3
  3250  00F2FA  07                 	db	7
  3251  00F2FB  0E                 	db	14
  3252  00F2FC  03                 	db	3
  3253  00F2FD  06                 	db	6
  3254  00F2FE  0F                 	db	15
  3255  00F2FF  04                 	db	4
  3256  00F300  07                 	db	7
  3257  00F301  11                 	db	17
  3258  00F302  03                 	db	3
  3259  00F303  07                 	db	7
  3260  00F304  13                 	db	19
  3261  00F305  03                 	db	3
  3262  00F306  07                 	db	7
  3263  00F307  14                 	db	20
  3264  00F308  04                 	db	4
  3265  00F309  07                 	db	7
  3266  00F30A  16                 	db	22
  3267  00F30B  04                 	db	4
  3268  00F30C  07                 	db	7
  3269  00F30D  18                 	db	24
  3270  00F30E  03                 	db	3
  3271  00F30F  07                 	db	7
  3272  00F310                     __end_of_diatonic_minor:
  3273                           	opt stack 0
  3274  00F310                     _diatonic_major:
  3275                           	opt stack 0
  3276  00F310  00                 	db	0
  3277  00F311  04                 	db	4
  3278  00F312  07                 	db	7
  3279  00F313  00                 	db	0
  3280  00F314  03                 	db	3
  3281  00F315  07                 	db	7
  3282  00F316  00                 	db	0
  3283  00F317  03                 	db	3
  3284  00F318  07                 	db	7
  3285  00F319  00                 	db	0
  3286  00F31A  04                 	db	4
  3287  00F31B  07                 	db	7
  3288  00F31C  00                 	db	0
  3289  00F31D  04                 	db	4
  3290  00F31E  07                 	db	7
  3291  00F31F  00                 	db	0
  3292  00F320  03                 	db	3
  3293  00F321  07                 	db	7
  3294  00F322  00                 	db	0
  3295  00F323  03                 	db	3
  3296  00F324  06                 	db	6
  3297  00F325  00                 	db	0
  3298  00F326  04                 	db	4
  3299  00F327  07                 	db	7
  3300  00F328  00                 	db	0
  3301  00F329  03                 	db	3
  3302  00F32A  07                 	db	7
  3303  00F32B  00                 	db	0
  3304  00F32C  03                 	db	3
  3305  00F32D  07                 	db	7
  3306  00F32E  00                 	db	0
  3307  00F32F  04                 	db	4
  3308  00F330  07                 	db	7
  3309  00F331  00                 	db	0
  3310  00F332  04                 	db	4
  3311  00F333  07                 	db	7
  3312  00F334  00                 	db	0
  3313  00F335  03                 	db	3
  3314  00F336  07                 	db	7
  3315  00F337  00                 	db	0
  3316  00F338  03                 	db	3
  3317  00F339  06                 	db	6
  3318  00F33A  00                 	db	0
  3319  00F33B  04                 	db	4
  3320  00F33C  07                 	db	7
  3321  00F33D                     __end_of_diatonic_major:
  3322                           	opt stack 0
  3323  00F33D                     _ttable:
  3324                           	opt stack 0
  3325  00F33D  00                 	db	0
  3326  00F33E  02                 	db	2
  3327  00F33F  04                 	db	4
  3328  00F340  00                 	db	0
  3329  00F341  03                 	db	3
  3330  00F342  00                 	db	0
  3331  00F343  01                 	db	1
  3332  00F344  10                 	db	16
  3333  00F345  03                 	db	3
  3334  00F346  02                 	db	2
  3335  00F347  00                 	db	0
  3336  00F348  00                 	db	0
  3337  00F349  03                 	db	3
  3338  00F34A  02                 	db	2
  3339  00F34B  01                 	db	1
  3340  00F34C  00                 	db	0
  3341  00F34D  06                 	db	6
  3342  00F34E  00                 	db	0
  3343  00F34F  04                 	db	4
  3344  00F350  00                 	db	0
  3345  00F351  06                 	db	6
  3346  00F352  05                 	db	5
  3347  00F353  00                 	db	0
  3348  00F354  20                 	db	32
  3349  00F355  06                 	db	6
  3350  00F356  05                 	db	5
  3351  00F357  04                 	db	4
  3352  00F358  00                 	db	0
  3353  00F359                     __end_of_ttable:
  3354                           	opt stack 0
  3355  00F359                     _seg_bcd_hex:
  3356                           	opt stack 0
  3357  00F359  3F                 	db	63
  3358  00F35A  06                 	db	6
  3359  00F35B  5B                 	db	91
  3360  00F35C  4F                 	db	79
  3361  00F35D  66                 	db	102
  3362  00F35E  6D                 	db	109
  3363  00F35F  7D                 	db	125
  3364  00F360  07                 	db	7
  3365  00F361  7F                 	db	127
  3366  00F362  6F                 	db	111
  3367  00F363  77                 	db	119
  3368  00F364  7C                 	db	124
  3369  00F365  39                 	db	57
  3370  00F366  5E                 	db	94
  3371  00F367  79                 	db	121
  3372  00F368  71                 	db	113
  3373  00F369                     __end_of_seg_bcd_hex:
  3374                           	opt stack 0
  3375  00F369                     _minor_key:
  3376                           	opt stack 0
  3377  00F369  00                 	db	0
  3378  00F36A  02                 	db	2
  3379  00F36B  03                 	db	3
  3380  00F36C  05                 	db	5
  3381  00F36D  07                 	db	7
  3382  00F36E  08                 	db	8
  3383  00F36F  0A                 	db	10
  3384  00F370  0C                 	db	12
  3385  00F371  0E                 	db	14
  3386  00F372  0F                 	db	15
  3387  00F373  11                 	db	17
  3388  00F374  13                 	db	19
  3389  00F375  14                 	db	20
  3390  00F376  16                 	db	22
  3391  00F377  18                 	db	24
  3392  00F378                     __end_of_minor_key:
  3393                           	opt stack 0
  3394  00F378                     _major_key:
  3395                           	opt stack 0
  3396  00F378  00                 	db	0
  3397  00F379  02                 	db	2
  3398  00F37A  04                 	db	4
  3399  00F37B  05                 	db	5
  3400  00F37C  07                 	db	7
  3401  00F37D  09                 	db	9
  3402  00F37E  0B                 	db	11
  3403  00F37F  0C                 	db	12
  3404  00F380  0E                 	db	14
  3405  00F381  10                 	db	16
  3406  00F382  11                 	db	17
  3407  00F383  13                 	db	19
  3408  00F384  15                 	db	21
  3409  00F385  17                 	db	23
  3410  00F386  18                 	db	24
  3411  00F387                     __end_of_major_key:
  3412                           	opt stack 0
  3413  00F387                     _pentatonic_minor_key:
  3414                           	opt stack 0
  3415  00F387  00                 	db	0
  3416  00F388  03                 	db	3
  3417  00F389  05                 	db	5
  3418  00F38A  07                 	db	7
  3419  00F38B  0A                 	db	10
  3420  00F38C  0C                 	db	12
  3421  00F38D  0F                 	db	15
  3422  00F38E  11                 	db	17
  3423  00F38F  13                 	db	19
  3424  00F390  16                 	db	22
  3425  00F391  18                 	db	24
  3426  00F392                     __end_of_pentatonic_minor_key:
  3427                           	opt stack 0
  3428  00F392                     _pentatonic_major_key:
  3429                           	opt stack 0
  3430  00F392  00                 	db	0
  3431  00F393  02                 	db	2
  3432  00F394  04                 	db	4
  3433  00F395  07                 	db	7
  3434  00F396  09                 	db	9
  3435  00F397  0C                 	db	12
  3436  00F398  0E                 	db	14
  3437  00F399  10                 	db	16
  3438  00F39A  13                 	db	19
  3439  00F39B  15                 	db	21
  3440  00F39C  18                 	db	24
  3441  00F39D                     __end_of_pentatonic_major_key:
  3442                           	opt stack 0
  3443  00F39D                     _MAX_NUM_NOTES:
  3444                           	opt stack 0
  3445  00F39D  10                 	db	16
  3446  00F39E                     __end_of_MAX_NUM_NOTES:
  3447                           	opt stack 0
  3448  00F39E                     _LCD_STRINGS:
  3449                           	opt stack 0
  3450  00F39E  4B                 	db	75
  3451  00F39F  45                 	db	69
  3452  00F3A0  59                 	db	89
  3453  00F3A1  42                 	db	66
  3454  00F3A2  4F                 	db	79
  3455  00F3A3  41                 	db	65
  3456  00F3A4  52                 	db	82
  3457  00F3A5  44                 	db	68
  3458  00F3A6  20                 	db	32
  3459  00F3A7  4D                 	db	77
  3460  00F3A8  4F                 	db	79
  3461  00F3A9  44                 	db	68
  3462  00F3AA  45                 	db	69
  3463  00F3AB  3A                 	db	58
  3464  00F3AC  00                 	db	0
  3465  00F3AD  00                 	db	0
  3466  00F3AE  00                 	db	0
  3467  00F3AF  41                 	db	65
  3468  00F3B0  52                 	db	82
  3469  00F3B1  50                 	db	80
  3470  00F3B2  45                 	db	69
  3471  00F3B3  47                 	db	71
  3472  00F3B4  47                 	db	71
  3473  00F3B5  49                 	db	73
  3474  00F3B6  4F                 	db	79
  3475  00F3B7  20                 	db	32
  3476  00F3B8  4D                 	db	77
  3477  00F3B9  45                 	db	69
  3478  00F3BA  4E                 	db	78
  3479  00F3BB  55                 	db	85
  3480  00F3BC  3A                 	db	58
  3481  00F3BD  00                 	db	0
  3482  00F3BE  00                 	db	0
  3483  00F3BF  00                 	db	0
  3484  00F3C0  54                 	db	84
  3485  00F3C1  52                 	db	82
  3486  00F3C2  41                 	db	65
  3487  00F3C3  4E                 	db	78
  3488  00F3C4  53                 	db	83
  3489  00F3C5  50                 	db	80
  3490  00F3C6  4F                 	db	79
  3491  00F3C7  53                 	db	83
  3492  00F3C8  45                 	db	69
  3493  00F3C9  20                 	db	32
  3494  00F3CA  4D                 	db	77
  3495  00F3CB  4F                 	db	79
  3496  00F3CC  44                 	db	68
  3497  00F3CD  45                 	db	69
  3498  00F3CE  3A                 	db	58
  3499  00F3CF  00                 	db	0
  3500  00F3D0  00                 	db	0
  3501  00F3D1  44                 	db	68
  3502  00F3D2  52                 	db	82
  3503  00F3D3  55                 	db	85
  3504  00F3D4  4D                 	db	77
  3505  00F3D5  20                 	db	32
  3506  00F3D6  4D                 	db	77
  3507  00F3D7  4F                 	db	79
  3508  00F3D8  44                 	db	68
  3509  00F3D9  45                 	db	69
  3510  00F3DA  3A                 	db	58
  3511  00F3DB  00                 	db	0
  3512  00F3DC  00                 	db	0
  3513  00F3DD  00                 	db	0
  3514  00F3DE  00                 	db	0
  3515  00F3DF  00                 	db	0
  3516  00F3E0  00                 	db	0
  3517  00F3E1  00                 	db	0
  3518  00F3E2  50                 	db	80
  3519  00F3E3  4F                 	db	79
  3520  00F3E4  54                 	db	84
  3521  00F3E5  53                 	db	83
  3522  00F3E6  20                 	db	32
  3523  00F3E7  4D                 	db	77
  3524  00F3E8  4F                 	db	79
  3525  00F3E9  44                 	db	68
  3526  00F3EA  45                 	db	69
  3527  00F3EB  3A                 	db	58
  3528  00F3EC  00                 	db	0
  3529  00F3ED  00                 	db	0
  3530  00F3EE  00                 	db	0
  3531  00F3EF  00                 	db	0
  3532  00F3F0  00                 	db	0
  3533  00F3F1  00                 	db	0
  3534  00F3F2  00                 	db	0
  3535  00F3F3  4D                 	db	77
  3536  00F3F4  49                 	db	73
  3537  00F3F5  44                 	db	68
  3538  00F3F6  49                 	db	73
  3539  00F3F7  20                 	db	32
  3540  00F3F8  43                 	db	67
  3541  00F3F9  48                 	db	72
  3542  00F3FA  41                 	db	65
  3543  00F3FB  4E                 	db	78
  3544  00F3FC  4E                 	db	78
  3545  00F3FD  45                 	db	69
  3546  00F3FE  4C                 	db	76
  3547  00F3FF  53                 	db	83
  3548  00F400  3A                 	db	58
  3549  00F401  00                 	db	0
  3550  00F402  00                 	db	0
  3551  00F403  00                 	db	0
  3552  00F404  50                 	db	80
  3553  00F405  52                 	db	82
  3554  00F406  4F                 	db	79
  3555  00F407  47                 	db	71
  3556  00F408  52                 	db	82
  3557  00F409  41                 	db	65
  3558  00F40A  4D                 	db	77
  3559  00F40B  20                 	db	32
  3560  00F40C  43                 	db	67
  3561  00F40D  48                 	db	72
  3562  00F40E  41                 	db	65
  3563  00F40F  4E                 	db	78
  3564  00F410  47                 	db	71
  3565  00F411  45                 	db	69
  3566  00F412  3A                 	db	58
  3567  00F413  00                 	db	0
  3568  00F414  00                 	db	0
  3569  00F415  45                 	db	69
  3570  00F416  45                 	db	69
  3571  00F417  50                 	db	80
  3572  00F418  52                 	db	82
  3573  00F419  4F                 	db	79
  3574  00F41A  4D                 	db	77
  3575  00F41B  20                 	db	32
  3576  00F41C  4D                 	db	77
  3577  00F41D  45                 	db	69
  3578  00F41E  4E                 	db	78
  3579  00F41F  55                 	db	85
  3580  00F420  3A                 	db	58
  3581  00F421  00                 	db	0
  3582  00F422  00                 	db	0
  3583  00F423  00                 	db	0
  3584  00F424  00                 	db	0
  3585  00F425  00                 	db	0
  3586  00F426  43                 	db	67
  3587  00F427  48                 	db	72
  3588  00F428  52                 	db	82
  3589  00F429  4F                 	db	79
  3590  00F42A  4D                 	db	77
  3591  00F42B  41                 	db	65
  3592  00F42C  54                 	db	84
  3593  00F42D  49                 	db	73
  3594  00F42E  43                 	db	67
  3595  00F42F  00                 	db	0
  3596  00F430  00                 	db	0
  3597  00F431  00                 	db	0
  3598  00F432  00                 	db	0
  3599  00F433  00                 	db	0
  3600  00F434  00                 	db	0
  3601  00F435  00                 	db	0
  3602  00F436  00                 	db	0
  3603  00F437  4D                 	db	77
  3604  00F438  41                 	db	65
  3605  00F439  4A                 	db	74
  3606  00F43A  4F                 	db	79
  3607  00F43B  52                 	db	82
  3608  00F43C  00                 	db	0
  3609  00F43D  00                 	db	0
  3610  00F43E  00                 	db	0
  3611  00F43F  00                 	db	0
  3612  00F440  00                 	db	0
  3613  00F441  00                 	db	0
  3614  00F442  00                 	db	0
  3615  00F443  00                 	db	0
  3616  00F444  00                 	db	0
  3617  00F445  00                 	db	0
  3618  00F446  00                 	db	0
  3619  00F447  00                 	db	0
  3620  00F448  4D                 	db	77
  3621  00F449  49                 	db	73
  3622  00F44A  4E                 	db	78
  3623  00F44B  4F                 	db	79
  3624  00F44C  52                 	db	82
  3625  00F44D  00                 	db	0
  3626  00F44E  00                 	db	0
  3627  00F44F  00                 	db	0
  3628  00F450  00                 	db	0
  3629  00F451  00                 	db	0
  3630  00F452  00                 	db	0
  3631  00F453  00                 	db	0
  3632  00F454  00                 	db	0
  3633  00F455  00                 	db	0
  3634  00F456  00                 	db	0
  3635  00F457  00                 	db	0
  3636  00F458  00                 	db	0
  3637  00F459  4D                 	db	77
  3638  00F45A  4F                 	db	79
  3639  00F45B  44                 	db	68
  3640  00F45C  45                 	db	69
  3641  00F45D  53                 	db	83
  3642  00F45E  00                 	db	0
  3643  00F45F  00                 	db	0
  3644  00F460  00                 	db	0
  3645  00F461  00                 	db	0
  3646  00F462  00                 	db	0
  3647  00F463  00                 	db	0
  3648  00F464  00                 	db	0
  3649  00F465  00                 	db	0
  3650  00F466  00                 	db	0
  3651  00F467  00                 	db	0
  3652  00F468  00                 	db	0
  3653  00F469  00                 	db	0
  3654  00F46A  50                 	db	80
  3655  00F46B  45                 	db	69
  3656  00F46C  4E                 	db	78
  3657  00F46D  54                 	db	84
  3658  00F46E  41                 	db	65
  3659  00F46F  54                 	db	84
  3660  00F470  4F                 	db	79
  3661  00F471  4E                 	db	78
  3662  00F472  49                 	db	73
  3663  00F473  43                 	db	67
  3664  00F474  20                 	db	32
  3665  00F475  4D                 	db	77
  3666  00F476  41                 	db	65
  3667  00F477  4A                 	db	74
  3668  00F478  4F                 	db	79
  3669  00F479  52                 	db	82
  3670  00F47A  00                 	db	0
  3671  00F47B  50                 	db	80
  3672  00F47C  45                 	db	69
  3673  00F47D  4E                 	db	78
  3674  00F47E  54                 	db	84
  3675  00F47F  41                 	db	65
  3676  00F480  54                 	db	84
  3677  00F481  4F                 	db	79
  3678  00F482  4E                 	db	78
  3679  00F483  49                 	db	73
  3680  00F484  43                 	db	67
  3681  00F485  20                 	db	32
  3682  00F486  4D                 	db	77
  3683  00F487  49                 	db	73
  3684  00F488  4E                 	db	78
  3685  00F489  4F                 	db	79
  3686  00F48A  52                 	db	82
  3687  00F48B  00                 	db	0
  3688  00F48C  54                 	db	84
  3689  00F48D  52                 	db	82
  3690  00F48E  49                 	db	73
  3691  00F48F  41                 	db	65
  3692  00F490  44                 	db	68
  3693  00F491  00                 	db	0
  3694  00F492  00                 	db	0
  3695  00F493  00                 	db	0
  3696  00F494  00                 	db	0
  3697  00F495  00                 	db	0
  3698  00F496  00                 	db	0
  3699  00F497  00                 	db	0
  3700  00F498  00                 	db	0
  3701  00F499  00                 	db	0
  3702  00F49A  00                 	db	0
  3703  00F49B  00                 	db	0
  3704  00F49C  00                 	db	0
  3705  00F49D  44                 	db	68
  3706  00F49E  49                 	db	73
  3707  00F49F  41                 	db	65
  3708  00F4A0  54                 	db	84
  3709  00F4A1  4F                 	db	79
  3710  00F4A2  4E                 	db	78
  3711  00F4A3  49                 	db	73
  3712  00F4A4  43                 	db	67
  3713  00F4A5  20                 	db	32
  3714  00F4A6  54                 	db	84
  3715  00F4A7  20                 	db	32
  3716  00F4A8  4D                 	db	77
  3717  00F4A9  41                 	db	65
  3718  00F4AA  4A                 	db	74
  3719  00F4AB  4F                 	db	79
  3720  00F4AC  52                 	db	82
  3721  00F4AD  00                 	db	0
  3722  00F4AE  44                 	db	68
  3723  00F4AF  49                 	db	73
  3724  00F4B0  41                 	db	65
  3725  00F4B1  54                 	db	84
  3726  00F4B2  4F                 	db	79
  3727  00F4B3  4E                 	db	78
  3728  00F4B4  49                 	db	73
  3729  00F4B5  43                 	db	67
  3730  00F4B6  20                 	db	32
  3731  00F4B7  54                 	db	84
  3732  00F4B8  20                 	db	32
  3733  00F4B9  4D                 	db	77
  3734  00F4BA  49                 	db	73
  3735  00F4BB  4E                 	db	78
  3736  00F4BC  4F                 	db	79
  3737  00F4BD  52                 	db	82
  3738  00F4BE  00                 	db	0
  3739  00F4BF  53                 	db	83
  3740  00F4C0  45                 	db	69
  3741  00F4C1  56                 	db	86
  3742  00F4C2  45                 	db	69
  3743  00F4C3  4E                 	db	78
  3744  00F4C4  54                 	db	84
  3745  00F4C5  48                 	db	72
  3746  00F4C6  00                 	db	0
  3747  00F4C7  00                 	db	0
  3748  00F4C8  00                 	db	0
  3749  00F4C9  00                 	db	0
  3750  00F4CA  00                 	db	0
  3751  00F4CB  00                 	db	0
  3752  00F4CC  00                 	db	0
  3753  00F4CD  00                 	db	0
  3754  00F4CE  00                 	db	0
  3755  00F4CF  00                 	db	0
  3756  00F4D0  44                 	db	68
  3757  00F4D1  49                 	db	73
  3758  00F4D2  41                 	db	65
  3759  00F4D3  54                 	db	84
  3760  00F4D4  4F                 	db	79
  3761  00F4D5  4E                 	db	78
  3762  00F4D6  49                 	db	73
  3763  00F4D7  43                 	db	67
  3764  00F4D8  20                 	db	32
  3765  00F4D9  37                 	db	55
  3766  00F4DA  20                 	db	32
  3767  00F4DB  4D                 	db	77
  3768  00F4DC  41                 	db	65
  3769  00F4DD  4A                 	db	74
  3770  00F4DE  4F                 	db	79
  3771  00F4DF  52                 	db	82
  3772  00F4E0  00                 	db	0
  3773  00F4E1  44                 	db	68
  3774  00F4E2  49                 	db	73
  3775  00F4E3  41                 	db	65
  3776  00F4E4  54                 	db	84
  3777  00F4E5  4F                 	db	79
  3778  00F4E6  4E                 	db	78
  3779  00F4E7  49                 	db	73
  3780  00F4E8  43                 	db	67
  3781  00F4E9  20                 	db	32
  3782  00F4EA  37                 	db	55
  3783  00F4EB  20                 	db	32
  3784  00F4EC  4D                 	db	77
  3785  00F4ED  49                 	db	73
  3786  00F4EE  4E                 	db	78
  3787  00F4EF  4F                 	db	79
  3788  00F4F0  52                 	db	82
  3789  00F4F1  00                 	db	0
  3790  00F4F2  69                 	db	105
  3791  00F4F3  6F                 	db	111
  3792  00F4F4  6E                 	db	110
  3793  00F4F5  69                 	db	105
  3794  00F4F6  61                 	db	97
  3795  00F4F7  6E                 	db	110
  3796  00F4F8  00                 	db	0
  3797  00F4F9  00                 	db	0
  3798  00F4FA  00                 	db	0
  3799  00F4FB  00                 	db	0
  3800  00F4FC  00                 	db	0
  3801  00F4FD  00                 	db	0
  3802  00F4FE  00                 	db	0
  3803  00F4FF  00                 	db	0
  3804  00F500  00                 	db	0
  3805  00F501  00                 	db	0
  3806  00F502  00                 	db	0
  3807  00F503  64                 	db	100
  3808  00F504  6F                 	db	111
  3809  00F505  72                 	db	114
  3810  00F506  69                 	db	105
  3811  00F507  61                 	db	97
  3812  00F508  6E                 	db	110
  3813  00F509  00                 	db	0
  3814  00F50A  00                 	db	0
  3815  00F50B  00                 	db	0
  3816  00F50C  00                 	db	0
  3817  00F50D  00                 	db	0
  3818  00F50E  00                 	db	0
  3819  00F50F  00                 	db	0
  3820  00F510  00                 	db	0
  3821  00F511  00                 	db	0
  3822  00F512  00                 	db	0
  3823  00F513  00                 	db	0
  3824  00F514  70                 	db	112
  3825  00F515  68                 	db	104
  3826  00F516  72                 	db	114
  3827  00F517  79                 	db	121
  3828  00F518  67                 	db	103
  3829  00F519  69                 	db	105
  3830  00F51A  61                 	db	97
  3831  00F51B  6E                 	db	110
  3832  00F51C  00                 	db	0
  3833  00F51D  00                 	db	0
  3834  00F51E  00                 	db	0
  3835  00F51F  00                 	db	0
  3836  00F520  00                 	db	0
  3837  00F521  00                 	db	0
  3838  00F522  00                 	db	0
  3839  00F523  00                 	db	0
  3840  00F524  00                 	db	0
  3841  00F525  6C                 	db	108
  3842  00F526  79                 	db	121
  3843  00F527  64                 	db	100
  3844  00F528  69                 	db	105
  3845  00F529  61                 	db	97
  3846  00F52A  6E                 	db	110
  3847  00F52B  00                 	db	0
  3848  00F52C  00                 	db	0
  3849  00F52D  00                 	db	0
  3850  00F52E  00                 	db	0
  3851  00F52F  00                 	db	0
  3852  00F530  00                 	db	0
  3853  00F531  00                 	db	0
  3854  00F532  00                 	db	0
  3855  00F533  00                 	db	0
  3856  00F534  00                 	db	0
  3857  00F535  00                 	db	0
  3858  00F536  6D                 	db	109
  3859  00F537  69                 	db	105
  3860  00F538  78                 	db	120
  3861  00F539  6F                 	db	111
  3862  00F53A  6C                 	db	108
  3863  00F53B  79                 	db	121
  3864  00F53C  64                 	db	100
  3865  00F53D  69                 	db	105
  3866  00F53E  61                 	db	97
  3867  00F53F  6E                 	db	110
  3868  00F540  00                 	db	0
  3869  00F541  00                 	db	0
  3870  00F542  00                 	db	0
  3871  00F543  00                 	db	0
  3872  00F544  00                 	db	0
  3873  00F545  00                 	db	0
  3874  00F546  00                 	db	0
  3875  00F547  61                 	db	97
  3876  00F548  65                 	db	101
  3877  00F549  6F                 	db	111
  3878  00F54A  6C                 	db	108
  3879  00F54B  69                 	db	105
  3880  00F54C  61                 	db	97
  3881  00F54D  6E                 	db	110
  3882  00F54E  00                 	db	0
  3883  00F54F  00                 	db	0
  3884  00F550  00                 	db	0
  3885  00F551  00                 	db	0
  3886  00F552  00                 	db	0
  3887  00F553  00                 	db	0
  3888  00F554  00                 	db	0
  3889  00F555  00                 	db	0
  3890  00F556  00                 	db	0
  3891  00F557  00                 	db	0
  3892  00F558  6C                 	db	108
  3893  00F559  6F                 	db	111
  3894  00F55A  63                 	db	99
  3895  00F55B  72                 	db	114
  3896  00F55C  69                 	db	105
  3897  00F55D  61                 	db	97
  3898  00F55E  6E                 	db	110
  3899  00F55F  00                 	db	0
  3900  00F560  00                 	db	0
  3901  00F561  00                 	db	0
  3902  00F562  00                 	db	0
  3903  00F563  00                 	db	0
  3904  00F564  00                 	db	0
  3905  00F565  00                 	db	0
  3906  00F566  00                 	db	0
  3907  00F567  00                 	db	0
  3908  00F568  00                 	db	0
  3909  00F569  6D                 	db	109
  3910  00F56A  61                 	db	97
  3911  00F56B  6A                 	db	106
  3912  00F56C  6F                 	db	111
  3913  00F56D  72                 	db	114
  3914  00F56E  20                 	db	32
  3915  00F56F  74                 	db	116
  3916  00F570  72                 	db	114
  3917  00F571  69                 	db	105
  3918  00F572  61                 	db	97
  3919  00F573  64                 	db	100
  3920  00F574  00                 	db	0
  3921  00F575  00                 	db	0
  3922  00F576  00                 	db	0
  3923  00F577  00                 	db	0
  3924  00F578  00                 	db	0
  3925  00F579  00                 	db	0
  3926  00F57A  6D                 	db	109
  3927  00F57B  69                 	db	105
  3928  00F57C  6E                 	db	110
  3929  00F57D  6F                 	db	111
  3930  00F57E  72                 	db	114
  3931  00F57F  20                 	db	32
  3932  00F580  74                 	db	116
  3933  00F581  72                 	db	114
  3934  00F582  69                 	db	105
  3935  00F583  61                 	db	97
  3936  00F584  64                 	db	100
  3937  00F585  00                 	db	0
  3938  00F586  00                 	db	0
  3939  00F587  00                 	db	0
  3940  00F588  00                 	db	0
  3941  00F589  00                 	db	0
  3942  00F58A  00                 	db	0
  3943  00F58B  61                 	db	97
  3944  00F58C  75                 	db	117
  3945  00F58D  67                 	db	103
  3946  00F58E  6D                 	db	109
  3947  00F58F  65                 	db	101
  3948  00F590  6E                 	db	110
  3949  00F591  74                 	db	116
  3950  00F592  65                 	db	101
  3951  00F593  64                 	db	100
  3952  00F594  20                 	db	32
  3953  00F595  74                 	db	116
  3954  00F596  72                 	db	114
  3955  00F597  69                 	db	105
  3956  00F598  61                 	db	97
  3957  00F599  64                 	db	100
  3958  00F59A  00                 	db	0
  3959  00F59B  00                 	db	0
  3960  00F59C  64                 	db	100
  3961  00F59D  69                 	db	105
  3962  00F59E  6D                 	db	109
  3963  00F59F  69                 	db	105
  3964  00F5A0  6E                 	db	110
  3965  00F5A1  69                 	db	105
  3966  00F5A2  73                 	db	115
  3967  00F5A3  68                 	db	104
  3968  00F5A4  65                 	db	101
  3969  00F5A5  64                 	db	100
  3970  00F5A6  20                 	db	32
  3971  00F5A7  74                 	db	116
  3972  00F5A8  72                 	db	114
  3973  00F5A9  69                 	db	105
  3974  00F5AA  61                 	db	97
  3975  00F5AB  64                 	db	100
  3976  00F5AC  00                 	db	0
  3977  00F5AD  64                 	db	100
  3978  00F5AE  6F                 	db	111
  3979  00F5AF  6D                 	db	109
  3980  00F5B0  69                 	db	105
  3981  00F5B1  6E                 	db	110
  3982  00F5B2  61                 	db	97
  3983  00F5B3  6E                 	db	110
  3984  00F5B4  74                 	db	116
  3985  00F5B5  20                 	db	32
  3986  00F5B6  37                 	db	55
  3987  00F5B7  74                 	db	116
  3988  00F5B8  68                 	db	104
  3989  00F5B9  00                 	db	0
  3990  00F5BA  00                 	db	0
  3991  00F5BB  00                 	db	0
  3992  00F5BC  00                 	db	0
  3993  00F5BD  00                 	db	0
  3994  00F5BE  6D                 	db	109
  3995  00F5BF  61                 	db	97
  3996  00F5C0  6A                 	db	106
  3997  00F5C1  6F                 	db	111
  3998  00F5C2  72                 	db	114
  3999  00F5C3  20                 	db	32
  4000  00F5C4  37                 	db	55
  4001  00F5C5  74                 	db	116
  4002  00F5C6  68                 	db	104
  4003  00F5C7  00                 	db	0
  4004  00F5C8  00                 	db	0
  4005  00F5C9  00                 	db	0
  4006  00F5CA  00                 	db	0
  4007  00F5CB  00                 	db	0
  4008  00F5CC  00                 	db	0
  4009  00F5CD  00                 	db	0
  4010  00F5CE  00                 	db	0
  4011  00F5CF  6D                 	db	109
  4012  00F5D0  69                 	db	105
  4013  00F5D1  6E                 	db	110
  4014  00F5D2  6F                 	db	111
  4015  00F5D3  72                 	db	114
  4016  00F5D4  20                 	db	32
  4017  00F5D5  37                 	db	55
  4018  00F5D6  74                 	db	116
  4019  00F5D7  68                 	db	104
  4020  00F5D8  00                 	db	0
  4021  00F5D9  00                 	db	0
  4022  00F5DA  00                 	db	0
  4023  00F5DB  00                 	db	0
  4024  00F5DC  00                 	db	0
  4025  00F5DD  00                 	db	0
  4026  00F5DE  00                 	db	0
  4027  00F5DF  00                 	db	0
  4028  00F5E0  68                 	db	104
  4029  00F5E1  61                 	db	97
  4030  00F5E2  6C                 	db	108
  4031  00F5E3  66                 	db	102
  4032  00F5E4  20                 	db	32
  4033  00F5E5  64                 	db	100
  4034  00F5E6  69                 	db	105
  4035  00F5E7  6D                 	db	109
  4036  00F5E8  69                 	db	105
  4037  00F5E9  6E                 	db	110
  4038  00F5EA  69                 	db	105
  4039  00F5EB  73                 	db	115
  4040  00F5EC  68                 	db	104
  4041  00F5ED  65                 	db	101
  4042  00F5EE  64                 	db	100
  4043  00F5EF  00                 	db	0
  4044  00F5F0  00                 	db	0
  4045  00F5F1  64                 	db	100
  4046  00F5F2  69                 	db	105
  4047  00F5F3  6D                 	db	109
  4048  00F5F4  69                 	db	105
  4049  00F5F5  6E                 	db	110
  4050  00F5F6  69                 	db	105
  4051  00F5F7  73                 	db	115
  4052  00F5F8  68                 	db	104
  4053  00F5F9  65                 	db	101
  4054  00F5FA  64                 	db	100
  4055  00F5FB  20                 	db	32
  4056  00F5FC  37                 	db	55
  4057  00F5FD  74                 	db	116
  4058  00F5FE  68                 	db	104
  4059  00F5FF  00                 	db	0
  4060  00F600  00                 	db	0
  4061  00F601  00                 	db	0
  4062  00F602  48                 	db	72
  4063  00F603  41                 	db	65
  4064  00F604  4C                 	db	76
  4065  00F605  46                 	db	70
  4066  00F606  20                 	db	32
  4067  00F607  53                 	db	83
  4068  00F608  54                 	db	84
  4069  00F609  45                 	db	69
  4070  00F60A  50                 	db	80
  4071  00F60B  00                 	db	0
  4072  00F60C  00                 	db	0
  4073  00F60D  00                 	db	0
  4074  00F60E  00                 	db	0
  4075  00F60F  00                 	db	0
  4076  00F610  00                 	db	0
  4077  00F611  00                 	db	0
  4078  00F612  00                 	db	0
  4079  00F613  43                 	db	67
  4080  00F614  49                 	db	73
  4081  00F615  52                 	db	82
  4082  00F616  43                 	db	67
  4083  00F617  4C                 	db	76
  4084  00F618  45                 	db	69
  4085  00F619  20                 	db	32
  4086  00F61A  4F                 	db	79
  4087  00F61B  46                 	db	70
  4088  00F61C  20                 	db	32
  4089  00F61D  46                 	db	70
  4090  00F61E  49                 	db	73
  4091  00F61F  46                 	db	70
  4092  00F620  54                 	db	84
  4093  00F621  48                 	db	72
  4094  00F622  53                 	db	83
  4095  00F623  00                 	db	0
  4096  00F624  44                 	db	68
  4097  00F625  52                 	db	82
  4098  00F626  55                 	db	85
  4099  00F627  4D                 	db	77
  4100  00F628  20                 	db	32
  4101  00F629  49                 	db	73
  4102  00F62A  53                 	db	83
  4103  00F62B  20                 	db	32
  4104  00F62C  4E                 	db	78
  4105  00F62D  4F                 	db	79
  4106  00F62E  54                 	db	84
  4107  00F62F  45                 	db	69
  4108  00F630  20                 	db	32
  4109  00F631  4F                 	db	79
  4110  00F632  4E                 	db	78
  4111  00F633  00                 	db	0
  4112  00F634  00                 	db	0
  4113  00F635  44                 	db	68
  4114  00F636  52                 	db	82
  4115  00F637  55                 	db	85
  4116  00F638  4D                 	db	77
  4117  00F639  20                 	db	32
  4118  00F63A  49                 	db	73
  4119  00F63B  53                 	db	83
  4120  00F63C  20                 	db	32
  4121  00F63D  43                 	db	67
  4122  00F63E  43                 	db	67
  4123  00F63F  00                 	db	0
  4124  00F640  00                 	db	0
  4125  00F641  00                 	db	0
  4126  00F642  00                 	db	0
  4127  00F643  00                 	db	0
  4128  00F644  00                 	db	0
  4129  00F645  00                 	db	0
  4130  00F646  44                 	db	68
  4131  00F647  52                 	db	82
  4132  00F648  55                 	db	85
  4133  00F649  4D                 	db	77
  4134  00F64A  20                 	db	32
  4135  00F64B  43                 	db	67
  4136  00F64C  43                 	db	67
  4137  00F64D  20                 	db	32
  4138  00F64E  54                 	db	84
  4139  00F64F  59                 	db	89
  4140  00F650  50                 	db	80
  4141  00F651  45                 	db	69
  4142  00F652  00                 	db	0
  4143  00F653  00                 	db	0
  4144  00F654  00                 	db	0
  4145  00F655  00                 	db	0
  4146  00F656  00                 	db	0
  4147  00F657  44                 	db	68
  4148  00F658  52                 	db	82
  4149  00F659  55                 	db	85
  4150  00F65A  4D                 	db	77
  4151  00F65B  20                 	db	32
  4152  00F65C  53                 	db	83
  4153  00F65D  45                 	db	69
  4154  00F65E  54                 	db	84
  4155  00F65F  20                 	db	32
  4156  00F660  4E                 	db	78
  4157  00F661  4E                 	db	78
  4158  00F662  23                 	db	35
  4159  00F663  00                 	db	0
  4160  00F664  00                 	db	0
  4161  00F665  00                 	db	0
  4162  00F666  00                 	db	0
  4163  00F667  00                 	db	0
  4164  00F668  44                 	db	68
  4165  00F669  52                 	db	82
  4166  00F66A  55                 	db	85
  4167  00F66B  4D                 	db	77
  4168  00F66C  20                 	db	32
  4169  00F66D  53                 	db	83
  4170  00F66E  45                 	db	69
  4171  00F66F  54                 	db	84
  4172  00F670  20                 	db	32
  4173  00F671  43                 	db	67
  4174  00F672  43                 	db	67
  4175  00F673  23                 	db	35
  4176  00F674  00                 	db	0
  4177  00F675  00                 	db	0
  4178  00F676  00                 	db	0
  4179  00F677  00                 	db	0
  4180  00F678  00                 	db	0
  4181  00F679  44                 	db	68
  4182  00F67A  52                 	db	82
  4183  00F67B  55                 	db	85
  4184  00F67C  4D                 	db	77
  4185  00F67D  20                 	db	32
  4186  00F67E  43                 	db	67
  4187  00F67F  43                 	db	67
  4188  00F680  20                 	db	32
  4189  00F681  54                 	db	84
  4190  00F682  52                 	db	82
  4191  00F683  49                 	db	73
  4192  00F684  47                 	db	71
  4193  00F685  47                 	db	71
  4194  00F686  45                 	db	69
  4195  00F687  52                 	db	82
  4196  00F688  00                 	db	0
  4197  00F689  00                 	db	0
  4198  00F68A  44                 	db	68
  4199  00F68B  52                 	db	82
  4200  00F68C  55                 	db	85
  4201  00F68D  4D                 	db	77
  4202  00F68E  20                 	db	32
  4203  00F68F  43                 	db	67
  4204  00F690  43                 	db	67
  4205  00F691  20                 	db	32
  4206  00F692  54                 	db	84
  4207  00F693  4F                 	db	79
  4208  00F694  47                 	db	71
  4209  00F695  47                 	db	71
  4210  00F696  4C                 	db	76
  4211  00F697  45                 	db	69
  4212  00F698  00                 	db	0
  4213  00F699  00                 	db	0
  4214  00F69A  00                 	db	0
  4215  00F69B  44                 	db	68
  4216  00F69C  52                 	db	82
  4217  00F69D  55                 	db	85
  4218  00F69E  4D                 	db	77
  4219  00F69F  20                 	db	32
  4220  00F6A0  31                 	db	49
  4221  00F6A1  20                 	db	32
  4222  00F6A2  4E                 	db	78
  4223  00F6A3  4E                 	db	78
  4224  00F6A4  3A                 	db	58
  4225  00F6A5  20                 	db	32
  4226  00F6A6  00                 	db	0
  4227  00F6A7  00                 	db	0
  4228  00F6A8  00                 	db	0
  4229  00F6A9  00                 	db	0
  4230  00F6AA  00                 	db	0
  4231  00F6AB  00                 	db	0
  4232  00F6AC  44                 	db	68
  4233  00F6AD  52                 	db	82
  4234  00F6AE  55                 	db	85
  4235  00F6AF  4D                 	db	77
  4236  00F6B0  20                 	db	32
  4237  00F6B1  32                 	db	50
  4238  00F6B2  20                 	db	32
  4239  00F6B3  4E                 	db	78
  4240  00F6B4  4E                 	db	78
  4241  00F6B5  3A                 	db	58
  4242  00F6B6  20                 	db	32
  4243  00F6B7  00                 	db	0
  4244  00F6B8  00                 	db	0
  4245  00F6B9  00                 	db	0
  4246  00F6BA  00                 	db	0
  4247  00F6BB  00                 	db	0
  4248  00F6BC  00                 	db	0
  4249  00F6BD  44                 	db	68
  4250  00F6BE  52                 	db	82
  4251  00F6BF  55                 	db	85
  4252  00F6C0  4D                 	db	77
  4253  00F6C1  20                 	db	32
  4254  00F6C2  33                 	db	51
  4255  00F6C3  20                 	db	32
  4256  00F6C4  4E                 	db	78
  4257  00F6C5  4E                 	db	78
  4258  00F6C6  3A                 	db	58
  4259  00F6C7  20                 	db	32
  4260  00F6C8  00                 	db	0
  4261  00F6C9  00                 	db	0
  4262  00F6CA  00                 	db	0
  4263  00F6CB  00                 	db	0
  4264  00F6CC  00                 	db	0
  4265  00F6CD  00                 	db	0
  4266  00F6CE  44                 	db	68
  4267  00F6CF  52                 	db	82
  4268  00F6D0  55                 	db	85
  4269  00F6D1  4D                 	db	77
  4270  00F6D2  20                 	db	32
  4271  00F6D3  34                 	db	52
  4272  00F6D4  20                 	db	32
  4273  00F6D5  4E                 	db	78
  4274  00F6D6  4E                 	db	78
  4275  00F6D7  3A                 	db	58
  4276  00F6D8  20                 	db	32
  4277  00F6D9  00                 	db	0
  4278  00F6DA  00                 	db	0
  4279  00F6DB  00                 	db	0
  4280  00F6DC  00                 	db	0
  4281  00F6DD  00                 	db	0
  4282  00F6DE  00                 	db	0
  4283  00F6DF  44                 	db	68
  4284  00F6E0  52                 	db	82
  4285  00F6E1  55                 	db	85
  4286  00F6E2  4D                 	db	77
  4287  00F6E3  20                 	db	32
  4288  00F6E4  35                 	db	53
  4289  00F6E5  20                 	db	32
  4290  00F6E6  4E                 	db	78
  4291  00F6E7  4E                 	db	78
  4292  00F6E8  3A                 	db	58
  4293  00F6E9  20                 	db	32
  4294  00F6EA  00                 	db	0
  4295  00F6EB  00                 	db	0
  4296  00F6EC  00                 	db	0
  4297  00F6ED  00                 	db	0
  4298  00F6EE  00                 	db	0
  4299  00F6EF  00                 	db	0
  4300  00F6F0  44                 	db	68
  4301  00F6F1  52                 	db	82
  4302  00F6F2  55                 	db	85
  4303  00F6F3  4D                 	db	77
  4304  00F6F4  20                 	db	32
  4305  00F6F5  36                 	db	54
  4306  00F6F6  20                 	db	32
  4307  00F6F7  4E                 	db	78
  4308  00F6F8  4E                 	db	78
  4309  00F6F9  3A                 	db	58
  4310  00F6FA  20                 	db	32
  4311  00F6FB  00                 	db	0
  4312  00F6FC  00                 	db	0
  4313  00F6FD  00                 	db	0
  4314  00F6FE  00                 	db	0
  4315  00F6FF  00                 	db	0
  4316  00F700  00                 	db	0
  4317  00F701  44                 	db	68
  4318  00F702  52                 	db	82
  4319  00F703  55                 	db	85
  4320  00F704  4D                 	db	77
  4321  00F705  20                 	db	32
  4322  00F706  37                 	db	55
  4323  00F707  20                 	db	32
  4324  00F708  4E                 	db	78
  4325  00F709  4E                 	db	78
  4326  00F70A  3A                 	db	58
  4327  00F70B  20                 	db	32
  4328  00F70C  00                 	db	0
  4329  00F70D  00                 	db	0
  4330  00F70E  00                 	db	0
  4331  00F70F  00                 	db	0
  4332  00F710  00                 	db	0
  4333  00F711  00                 	db	0
  4334  00F712  44                 	db	68
  4335  00F713  52                 	db	82
  4336  00F714  55                 	db	85
  4337  00F715  4D                 	db	77
  4338  00F716  20                 	db	32
  4339  00F717  38                 	db	56
  4340  00F718  20                 	db	32
  4341  00F719  4E                 	db	78
  4342  00F71A  4E                 	db	78
  4343  00F71B  3A                 	db	58
  4344  00F71C  20                 	db	32
  4345  00F71D  00                 	db	0
  4346  00F71E  00                 	db	0
  4347  00F71F  00                 	db	0
  4348  00F720  00                 	db	0
  4349  00F721  00                 	db	0
  4350  00F722  00                 	db	0
  4351  00F723  44                 	db	68
  4352  00F724  52                 	db	82
  4353  00F725  55                 	db	85
  4354  00F726  4D                 	db	77
  4355  00F727  20                 	db	32
  4356  00F728  31                 	db	49
  4357  00F729  20                 	db	32
  4358  00F72A  43                 	db	67
  4359  00F72B  43                 	db	67
  4360  00F72C  3A                 	db	58
  4361  00F72D  20                 	db	32
  4362  00F72E  00                 	db	0
  4363  00F72F  00                 	db	0
  4364  00F730  00                 	db	0
  4365  00F731  00                 	db	0
  4366  00F732  00                 	db	0
  4367  00F733  00                 	db	0
  4368  00F734  44                 	db	68
  4369  00F735  52                 	db	82
  4370  00F736  55                 	db	85
  4371  00F737  4D                 	db	77
  4372  00F738  20                 	db	32
  4373  00F739  32                 	db	50
  4374  00F73A  20                 	db	32
  4375  00F73B  43                 	db	67
  4376  00F73C  43                 	db	67
  4377  00F73D  3A                 	db	58
  4378  00F73E  20                 	db	32
  4379  00F73F  00                 	db	0
  4380  00F740  00                 	db	0
  4381  00F741  00                 	db	0
  4382  00F742  00                 	db	0
  4383  00F743  00                 	db	0
  4384  00F744  00                 	db	0
  4385  00F745  44                 	db	68
  4386  00F746  52                 	db	82
  4387  00F747  55                 	db	85
  4388  00F748  4D                 	db	77
  4389  00F749  20                 	db	32
  4390  00F74A  33                 	db	51
  4391  00F74B  20                 	db	32
  4392  00F74C  43                 	db	67
  4393  00F74D  43                 	db	67
  4394  00F74E  3A                 	db	58
  4395  00F74F  20                 	db	32
  4396  00F750  00                 	db	0
  4397  00F751  00                 	db	0
  4398  00F752  00                 	db	0
  4399  00F753  00                 	db	0
  4400  00F754  00                 	db	0
  4401  00F755  00                 	db	0
  4402  00F756  44                 	db	68
  4403  00F757  52                 	db	82
  4404  00F758  55                 	db	85
  4405  00F759  4D                 	db	77
  4406  00F75A  20                 	db	32
  4407  00F75B  34                 	db	52
  4408  00F75C  20                 	db	32
  4409  00F75D  43                 	db	67
  4410  00F75E  43                 	db	67
  4411  00F75F  3A                 	db	58
  4412  00F760  20                 	db	32
  4413  00F761  00                 	db	0
  4414  00F762  00                 	db	0
  4415  00F763  00                 	db	0
  4416  00F764  00                 	db	0
  4417  00F765  00                 	db	0
  4418  00F766  00                 	db	0
  4419  00F767  44                 	db	68
  4420  00F768  52                 	db	82
  4421  00F769  55                 	db	85
  4422  00F76A  4D                 	db	77
  4423  00F76B  20                 	db	32
  4424  00F76C  35                 	db	53
  4425  00F76D  20                 	db	32
  4426  00F76E  43                 	db	67
  4427  00F76F  43                 	db	67
  4428  00F770  3A                 	db	58
  4429  00F771  20                 	db	32
  4430  00F772  00                 	db	0
  4431  00F773  00                 	db	0
  4432  00F774  00                 	db	0
  4433  00F775  00                 	db	0
  4434  00F776  00                 	db	0
  4435  00F777  00                 	db	0
  4436  00F778  44                 	db	68
  4437  00F779  52                 	db	82
  4438  00F77A  55                 	db	85
  4439  00F77B  4D                 	db	77
  4440  00F77C  20                 	db	32
  4441  00F77D  36                 	db	54
  4442  00F77E  20                 	db	32
  4443  00F77F  43                 	db	67
  4444  00F780  43                 	db	67
  4445  00F781  3A                 	db	58
  4446  00F782  20                 	db	32
  4447  00F783  00                 	db	0
  4448  00F784  00                 	db	0
  4449  00F785  00                 	db	0
  4450  00F786  00                 	db	0
  4451  00F787  00                 	db	0
  4452  00F788  00                 	db	0
  4453  00F789  44                 	db	68
  4454  00F78A  52                 	db	82
  4455  00F78B  55                 	db	85
  4456  00F78C  4D                 	db	77
  4457  00F78D  20                 	db	32
  4458  00F78E  37                 	db	55
  4459  00F78F  20                 	db	32
  4460  00F790  43                 	db	67
  4461  00F791  43                 	db	67
  4462  00F792  3A                 	db	58
  4463  00F793  20                 	db	32
  4464  00F794  00                 	db	0
  4465  00F795  00                 	db	0
  4466  00F796  00                 	db	0
  4467  00F797  00                 	db	0
  4468  00F798  00                 	db	0
  4469  00F799  00                 	db	0
  4470  00F79A  44                 	db	68
  4471  00F79B  52                 	db	82
  4472  00F79C  55                 	db	85
  4473  00F79D  4D                 	db	77
  4474  00F79E  20                 	db	32
  4475  00F79F  38                 	db	56
  4476  00F7A0  20                 	db	32
  4477  00F7A1  43                 	db	67
  4478  00F7A2  43                 	db	67
  4479  00F7A3  3A                 	db	58
  4480  00F7A4  20                 	db	32
  4481  00F7A5  00                 	db	0
  4482  00F7A6  00                 	db	0
  4483  00F7A7  00                 	db	0
  4484  00F7A8  00                 	db	0
  4485  00F7A9  00                 	db	0
  4486  00F7AA  00                 	db	0
  4487  00F7AB  50                 	db	80
  4488  00F7AC  4F                 	db	79
  4489  00F7AD  54                 	db	84
  4490  00F7AE  53                 	db	83
  4491  00F7AF  20                 	db	32
  4492  00F7B0  52                 	db	82
  4493  00F7B1  45                 	db	69
  4494  00F7B2  53                 	db	83
  4495  00F7B3  4F                 	db	79
  4496  00F7B4  4C                 	db	76
  4497  00F7B5  55                 	db	85
  4498  00F7B6  54                 	db	84
  4499  00F7B7  49                 	db	73
  4500  00F7B8  4F                 	db	79
  4501  00F7B9  4E                 	db	78
  4502  00F7BA  00                 	db	0
  4503  00F7BB  00                 	db	0
  4504  00F7BC  50                 	db	80
  4505  00F7BD  4F                 	db	79
  4506  00F7BE  54                 	db	84
  4507  00F7BF  53                 	db	83
  4508  00F7C0  20                 	db	32
  4509  00F7C1  41                 	db	65
  4510  00F7C2  4C                 	db	76
  4511  00F7C3  50                 	db	80
  4512  00F7C4  48                 	db	72
  4513  00F7C5  41                 	db	65
  4514  00F7C6  00                 	db	0
  4515  00F7C7  00                 	db	0
  4516  00F7C8  00                 	db	0
  4517  00F7C9  00                 	db	0
  4518  00F7CA  00                 	db	0
  4519  00F7CB  00                 	db	0
  4520  00F7CC  00                 	db	0
  4521  00F7CD  50                 	db	80
  4522  00F7CE  4F                 	db	79
  4523  00F7CF  54                 	db	84
  4524  00F7D0  53                 	db	83
  4525  00F7D1  20                 	db	32
  4526  00F7D2  53                 	db	83
  4527  00F7D3  45                 	db	69
  4528  00F7D4  54                 	db	84
  4529  00F7D5  20                 	db	32
  4530  00F7D6  43                 	db	67
  4531  00F7D7  43                 	db	67
  4532  00F7D8  23                 	db	35
  4533  00F7D9  00                 	db	0
  4534  00F7DA  00                 	db	0
  4535  00F7DB  00                 	db	0
  4536  00F7DC  00                 	db	0
  4537  00F7DD  00                 	db	0
  4538  00F7DE  53                 	db	83
  4539  00F7DF  4C                 	db	76
  4540  00F7E0  49                 	db	73
  4541  00F7E1  44                 	db	68
  4542  00F7E2  45                 	db	69
  4543  00F7E3  50                 	db	80
  4544  00F7E4  4F                 	db	79
  4545  00F7E5  54                 	db	84
  4546  00F7E6  20                 	db	32
  4547  00F7E7  53                 	db	83
  4548  00F7E8  45                 	db	69
  4549  00F7E9  54                 	db	84
  4550  00F7EA  20                 	db	32
  4551  00F7EB  43                 	db	67
  4552  00F7EC  43                 	db	67
  4553  00F7ED  23                 	db	35
  4554  00F7EE  00                 	db	0
  4555  00F7EF  4A                 	db	74
  4556  00F7F0  4F                 	db	79
  4557  00F7F1  59                 	db	89
  4558  00F7F2  53                 	db	83
  4559  00F7F3  54                 	db	84
  4560  00F7F4  49                 	db	73
  4561  00F7F5  43                 	db	67
  4562  00F7F6  4B                 	db	75
  4563  00F7F7  20                 	db	32
  4564  00F7F8  53                 	db	83
  4565  00F7F9  45                 	db	69
  4566  00F7FA  54                 	db	84
  4567  00F7FB  20                 	db	32
  4568  00F7FC  43                 	db	67
  4569  00F7FD  43                 	db	67
  4570  00F7FE  23                 	db	35
  4571  00F7FF  00                 	db	0
  4572  00F800  50                 	db	80
  4573  00F801  4F                 	db	79
  4574  00F802  54                 	db	84
  4575  00F803  53                 	db	83
  4576  00F804  20                 	db	32
  4577  00F805  4C                 	db	76
  4578  00F806  4F                 	db	79
  4579  00F807  20                 	db	32
  4580  00F808  52                 	db	82
  4581  00F809  45                 	db	69
  4582  00F80A  53                 	db	83
  4583  00F80B  00                 	db	0
  4584  00F80C  00                 	db	0
  4585  00F80D  00                 	db	0
  4586  00F80E  00                 	db	0
  4587  00F80F  00                 	db	0
  4588  00F810  00                 	db	0
  4589  00F811  50                 	db	80
  4590  00F812  4F                 	db	79
  4591  00F813  54                 	db	84
  4592  00F814  53                 	db	83
  4593  00F815  20                 	db	32
  4594  00F816  48                 	db	72
  4595  00F817  49                 	db	73
  4596  00F818  20                 	db	32
  4597  00F819  52                 	db	82
  4598  00F81A  45                 	db	69
  4599  00F81B  53                 	db	83
  4600  00F81C  00                 	db	0
  4601  00F81D  00                 	db	0
  4602  00F81E  00                 	db	0
  4603  00F81F  00                 	db	0
  4604  00F820  00                 	db	0
  4605  00F821  00                 	db	0
  4606  00F822  50                 	db	80
  4607  00F823  31                 	db	49
  4608  00F824  20                 	db	32
  4609  00F825  43                 	db	67
  4610  00F826  43                 	db	67
  4611  00F827  3A                 	db	58
  4612  00F828  00                 	db	0
  4613  00F829  00                 	db	0
  4614  00F82A  00                 	db	0
  4615  00F82B  00                 	db	0
  4616  00F82C  00                 	db	0
  4617  00F82D  00                 	db	0
  4618  00F82E  00                 	db	0
  4619  00F82F  00                 	db	0
  4620  00F830  00                 	db	0
  4621  00F831  00                 	db	0
  4622  00F832  00                 	db	0
  4623  00F833  50                 	db	80
  4624  00F834  32                 	db	50
  4625  00F835  20                 	db	32
  4626  00F836  43                 	db	67
  4627  00F837  43                 	db	67
  4628  00F838  3A                 	db	58
  4629  00F839  00                 	db	0
  4630  00F83A  00                 	db	0
  4631  00F83B  00                 	db	0
  4632  00F83C  00                 	db	0
  4633  00F83D  00                 	db	0
  4634  00F83E  00                 	db	0
  4635  00F83F  00                 	db	0
  4636  00F840  00                 	db	0
  4637  00F841  00                 	db	0
  4638  00F842  00                 	db	0
  4639  00F843  00                 	db	0
  4640  00F844  50                 	db	80
  4641  00F845  33                 	db	51
  4642  00F846  20                 	db	32
  4643  00F847  43                 	db	67
  4644  00F848  43                 	db	67
  4645  00F849  3A                 	db	58
  4646  00F84A  00                 	db	0
  4647  00F84B  00                 	db	0
  4648  00F84C  00                 	db	0
  4649  00F84D  00                 	db	0
  4650  00F84E  00                 	db	0
  4651  00F84F  00                 	db	0
  4652  00F850  00                 	db	0
  4653  00F851  00                 	db	0
  4654  00F852  00                 	db	0
  4655  00F853  00                 	db	0
  4656  00F854  00                 	db	0
  4657  00F855  50                 	db	80
  4658  00F856  34                 	db	52
  4659  00F857  20                 	db	32
  4660  00F858  43                 	db	67
  4661  00F859  43                 	db	67
  4662  00F85A  3A                 	db	58
  4663  00F85B  00                 	db	0
  4664  00F85C  00                 	db	0
  4665  00F85D  00                 	db	0
  4666  00F85E  00                 	db	0
  4667  00F85F  00                 	db	0
  4668  00F860  00                 	db	0
  4669  00F861  00                 	db	0
  4670  00F862  00                 	db	0
  4671  00F863  00                 	db	0
  4672  00F864  00                 	db	0
  4673  00F865  00                 	db	0
  4674  00F866  50                 	db	80
  4675  00F867  35                 	db	53
  4676  00F868  20                 	db	32
  4677  00F869  43                 	db	67
  4678  00F86A  43                 	db	67
  4679  00F86B  3A                 	db	58
  4680  00F86C  00                 	db	0
  4681  00F86D  00                 	db	0
  4682  00F86E  00                 	db	0
  4683  00F86F  00                 	db	0
  4684  00F870  00                 	db	0
  4685  00F871  00                 	db	0
  4686  00F872  00                 	db	0
  4687  00F873  00                 	db	0
  4688  00F874  00                 	db	0
  4689  00F875  00                 	db	0
  4690  00F876  00                 	db	0
  4691  00F877  50                 	db	80
  4692  00F878  36                 	db	54
  4693  00F879  20                 	db	32
  4694  00F87A  43                 	db	67
  4695  00F87B  43                 	db	67
  4696  00F87C  3A                 	db	58
  4697  00F87D  00                 	db	0
  4698  00F87E  00                 	db	0
  4699  00F87F  00                 	db	0
  4700  00F880  00                 	db	0
  4701  00F881  00                 	db	0
  4702  00F882  00                 	db	0
  4703  00F883  00                 	db	0
  4704  00F884  00                 	db	0
  4705  00F885  00                 	db	0
  4706  00F886  00                 	db	0
  4707  00F887  00                 	db	0
  4708  00F888  50                 	db	80
  4709  00F889  37                 	db	55
  4710  00F88A  20                 	db	32
  4711  00F88B  43                 	db	67
  4712  00F88C  43                 	db	67
  4713  00F88D  3A                 	db	58
  4714  00F88E  00                 	db	0
  4715  00F88F  00                 	db	0
  4716  00F890  00                 	db	0
  4717  00F891  00                 	db	0
  4718  00F892  00                 	db	0
  4719  00F893  00                 	db	0
  4720  00F894  00                 	db	0
  4721  00F895  00                 	db	0
  4722  00F896  00                 	db	0
  4723  00F897  00                 	db	0
  4724  00F898  00                 	db	0
  4725  00F899  53                 	db	83
  4726  00F89A  31                 	db	49
  4727  00F89B  20                 	db	32
  4728  00F89C  43                 	db	67
  4729  00F89D  43                 	db	67
  4730  00F89E  3A                 	db	58
  4731  00F89F  20                 	db	32
  4732  00F8A0  00                 	db	0
  4733  00F8A1  00                 	db	0
  4734  00F8A2  00                 	db	0
  4735  00F8A3  00                 	db	0
  4736  00F8A4  00                 	db	0
  4737  00F8A5  00                 	db	0
  4738  00F8A6  00                 	db	0
  4739  00F8A7  00                 	db	0
  4740  00F8A8  00                 	db	0
  4741  00F8A9  00                 	db	0
  4742  00F8AA  53                 	db	83
  4743  00F8AB  32                 	db	50
  4744  00F8AC  20                 	db	32
  4745  00F8AD  43                 	db	67
  4746  00F8AE  43                 	db	67
  4747  00F8AF  3A                 	db	58
  4748  00F8B0  20                 	db	32
  4749  00F8B1  00                 	db	0
  4750  00F8B2  00                 	db	0
  4751  00F8B3  00                 	db	0
  4752  00F8B4  00                 	db	0
  4753  00F8B5  00                 	db	0
  4754  00F8B6  00                 	db	0
  4755  00F8B7  00                 	db	0
  4756  00F8B8  00                 	db	0
  4757  00F8B9  00                 	db	0
  4758  00F8BA  00                 	db	0
  4759  00F8BB  53                 	db	83
  4760  00F8BC  33                 	db	51
  4761  00F8BD  20                 	db	32
  4762  00F8BE  43                 	db	67
  4763  00F8BF  43                 	db	67
  4764  00F8C0  3A                 	db	58
  4765  00F8C1  20                 	db	32
  4766  00F8C2  00                 	db	0
  4767  00F8C3  00                 	db	0
  4768  00F8C4  00                 	db	0
  4769  00F8C5  00                 	db	0
  4770  00F8C6  00                 	db	0
  4771  00F8C7  00                 	db	0
  4772  00F8C8  00                 	db	0
  4773  00F8C9  00                 	db	0
  4774  00F8CA  00                 	db	0
  4775  00F8CB  00                 	db	0
  4776  00F8CC  53                 	db	83
  4777  00F8CD  34                 	db	52
  4778  00F8CE  20                 	db	32
  4779  00F8CF  43                 	db	67
  4780  00F8D0  43                 	db	67
  4781  00F8D1  3A                 	db	58
  4782  00F8D2  20                 	db	32
  4783  00F8D3  00                 	db	0
  4784  00F8D4  00                 	db	0
  4785  00F8D5  00                 	db	0
  4786  00F8D6  00                 	db	0
  4787  00F8D7  00                 	db	0
  4788  00F8D8  00                 	db	0
  4789  00F8D9  00                 	db	0
  4790  00F8DA  00                 	db	0
  4791  00F8DB  00                 	db	0
  4792  00F8DC  00                 	db	0
  4793  00F8DD  53                 	db	83
  4794  00F8DE  35                 	db	53
  4795  00F8DF  20                 	db	32
  4796  00F8E0  43                 	db	67
  4797  00F8E1  43                 	db	67
  4798  00F8E2  3A                 	db	58
  4799  00F8E3  20                 	db	32
  4800  00F8E4  00                 	db	0
  4801  00F8E5  00                 	db	0
  4802  00F8E6  00                 	db	0
  4803  00F8E7  00                 	db	0
  4804  00F8E8  00                 	db	0
  4805  00F8E9  00                 	db	0
  4806  00F8EA  00                 	db	0
  4807  00F8EB  00                 	db	0
  4808  00F8EC  00                 	db	0
  4809  00F8ED  00                 	db	0
  4810  00F8EE  53                 	db	83
  4811  00F8EF  36                 	db	54
  4812  00F8F0  20                 	db	32
  4813  00F8F1  43                 	db	67
  4814  00F8F2  43                 	db	67
  4815  00F8F3  3A                 	db	58
  4816  00F8F4  20                 	db	32
  4817  00F8F5  00                 	db	0
  4818  00F8F6  00                 	db	0
  4819  00F8F7  00                 	db	0
  4820  00F8F8  00                 	db	0
  4821  00F8F9  00                 	db	0
  4822  00F8FA  00                 	db	0
  4823  00F8FB  00                 	db	0
  4824  00F8FC  00                 	db	0
  4825  00F8FD  00                 	db	0
  4826  00F8FE  00                 	db	0
  4827  00F8FF  53                 	db	83
  4828  00F900  37                 	db	55
  4829  00F901  20                 	db	32
  4830  00F902  43                 	db	67
  4831  00F903  43                 	db	67
  4832  00F904  3A                 	db	58
  4833  00F905  20                 	db	32
  4834  00F906  00                 	db	0
  4835  00F907  00                 	db	0
  4836  00F908  00                 	db	0
  4837  00F909  00                 	db	0
  4838  00F90A  00                 	db	0
  4839  00F90B  00                 	db	0
  4840  00F90C  00                 	db	0
  4841  00F90D  00                 	db	0
  4842  00F90E  00                 	db	0
  4843  00F90F  00                 	db	0
  4844  00F910  4A                 	db	74
  4845  00F911  58                 	db	88
  4846  00F912  20                 	db	32
  4847  00F913  43                 	db	67
  4848  00F914  43                 	db	67
  4849  00F915  3A                 	db	58
  4850  00F916  20                 	db	32
  4851  00F917  00                 	db	0
  4852  00F918  00                 	db	0
  4853  00F919  00                 	db	0
  4854  00F91A  00                 	db	0
  4855  00F91B  00                 	db	0
  4856  00F91C  00                 	db	0
  4857  00F91D  00                 	db	0
  4858  00F91E  00                 	db	0
  4859  00F91F  00                 	db	0
  4860  00F920  00                 	db	0
  4861  00F921  4A                 	db	74
  4862  00F922  59                 	db	89
  4863  00F923  20                 	db	32
  4864  00F924  43                 	db	67
  4865  00F925  43                 	db	67
  4866  00F926  3A                 	db	58
  4867  00F927  20                 	db	32
  4868  00F928  00                 	db	0
  4869  00F929  00                 	db	0
  4870  00F92A  00                 	db	0
  4871  00F92B  00                 	db	0
  4872  00F92C  00                 	db	0
  4873  00F92D  00                 	db	0
  4874  00F92E  00                 	db	0
  4875  00F92F  00                 	db	0
  4876  00F930  00                 	db	0
  4877  00F931  00                 	db	0
  4878  00F932  4D                 	db	77
  4879  00F933  61                 	db	97
  4880  00F934  69                 	db	105
  4881  00F935  6E                 	db	110
  4882  00F936  20                 	db	32
  4883  00F937  63                 	db	99
  4884  00F938  68                 	db	104
  4885  00F939  61                 	db	97
  4886  00F93A  6E                 	db	110
  4887  00F93B  6E                 	db	110
  4888  00F93C  65                 	db	101
  4889  00F93D  6C                 	db	108
  4890  00F93E  00                 	db	0
  4891  00F93F  00                 	db	0
  4892  00F940  00                 	db	0
  4893  00F941  00                 	db	0
  4894  00F942  00                 	db	0
  4895  00F943  44                 	db	68
  4896  00F944  72                 	db	114
  4897  00F945  75                 	db	117
  4898  00F946  6D                 	db	109
  4899  00F947  20                 	db	32
  4900  00F948  63                 	db	99
  4901  00F949  68                 	db	104
  4902  00F94A  61                 	db	97
  4903  00F94B  6E                 	db	110
  4904  00F94C  6E                 	db	110
  4905  00F94D  65                 	db	101
  4906  00F94E  6C                 	db	108
  4907  00F94F  00                 	db	0
  4908  00F950  00                 	db	0
  4909  00F951  00                 	db	0
  4910  00F952  00                 	db	0
  4911  00F953  00                 	db	0
  4912  00F954  53                 	db	83
  4913  00F955  61                 	db	97
  4914  00F956  76                 	db	118
  4915  00F957  65                 	db	101
  4916  00F958  20                 	db	32
  4917  00F959  73                 	db	115
  4918  00F95A  65                 	db	101
  4919  00F95B  74                 	db	116
  4920  00F95C  74                 	db	116
  4921  00F95D  69                 	db	105
  4922  00F95E  6E                 	db	110
  4923  00F95F  67                 	db	103
  4924  00F960  73                 	db	115
  4925  00F961  00                 	db	0
  4926  00F962  00                 	db	0
  4927  00F963  00                 	db	0
  4928  00F964  00                 	db	0
  4929  00F965  4C                 	db	76
  4930  00F966  6F                 	db	111
  4931  00F967  61                 	db	97
  4932  00F968  64                 	db	100
  4933  00F969  20                 	db	32
  4934  00F96A  73                 	db	115
  4935  00F96B  65                 	db	101
  4936  00F96C  74                 	db	116
  4937  00F96D  74                 	db	116
  4938  00F96E  69                 	db	105
  4939  00F96F  6E                 	db	110
  4940  00F970  67                 	db	103
  4941  00F971  73                 	db	115
  4942  00F972  00                 	db	0
  4943  00F973  00                 	db	0
  4944  00F974  00                 	db	0
  4945  00F975  00                 	db	0
  4946  00F976  52                 	db	82
  4947  00F977  65                 	db	101
  4948  00F978  73                 	db	115
  4949  00F979  74                 	db	116
  4950  00F97A  6F                 	db	111
  4951  00F97B  72                 	db	114
  4952  00F97C  65                 	db	101
  4953  00F97D  20                 	db	32
  4954  00F97E  64                 	db	100
  4955  00F97F  65                 	db	101
  4956  00F980  66                 	db	102
  4957  00F981  61                 	db	97
  4958  00F982  75                 	db	117
  4959  00F983  6C                 	db	108
  4960  00F984  74                 	db	116
  4961  00F985  73                 	db	115
  4962  00F986  00                 	db	0
  4963  00F987  45                 	db	69
  4964  00F988  6E                 	db	110
  4965  00F989  63                 	db	99
  4966  00F98A  6F                 	db	111
  4967  00F98B  64                 	db	100
  4968  00F98C  65                 	db	101
  4969  00F98D  72                 	db	114
  4970  00F98E  20                 	db	32
  4971  00F98F  50                 	db	80
  4972  00F990  6F                 	db	111
  4973  00F991  6C                 	db	108
  4974  00F992  61                 	db	97
  4975  00F993  72                 	db	114
  4976  00F994  69                 	db	105
  4977  00F995  74                 	db	116
  4978  00F996  79                 	db	121
  4979  00F997  00                 	db	0
  4980  00F998  45                 	db	69
  4981  00F999  78                 	db	120
  4982  00F99A  69                 	db	105
  4983  00F99B  74                 	db	116
  4984  00F99C  00                 	db	0
  4985  00F99D  00                 	db	0
  4986  00F99E  00                 	db	0
  4987  00F99F  00                 	db	0
  4988  00F9A0  00                 	db	0
  4989  00F9A1  00                 	db	0
  4990  00F9A2  00                 	db	0
  4991  00F9A3  00                 	db	0
  4992  00F9A4  00                 	db	0
  4993  00F9A5  00                 	db	0
  4994  00F9A6  00                 	db	0
  4995  00F9A7  00                 	db	0
  4996  00F9A8  00                 	db	0
  4997  00F9A9  53                 	db	83
  4998  00F9AA  6C                 	db	108
  4999  00F9AB  6F                 	db	111
  5000  00F9AC  74                 	db	116
  5001  00F9AD  20                 	db	32
  5002  00F9AE  31                 	db	49
  5003  00F9AF  00                 	db	0
  5004  00F9B0  00                 	db	0
  5005  00F9B1  00                 	db	0
  5006  00F9B2  00                 	db	0
  5007  00F9B3  00                 	db	0
  5008  00F9B4  00                 	db	0
  5009  00F9B5  00                 	db	0
  5010  00F9B6  00                 	db	0
  5011  00F9B7  00                 	db	0
  5012  00F9B8  00                 	db	0
  5013  00F9B9  00                 	db	0
  5014  00F9BA  53                 	db	83
  5015  00F9BB  6C                 	db	108
  5016  00F9BC  6F                 	db	111
  5017  00F9BD  74                 	db	116
  5018  00F9BE  20                 	db	32
  5019  00F9BF  32                 	db	50
  5020  00F9C0  00                 	db	0
  5021  00F9C1  00                 	db	0
  5022  00F9C2  00                 	db	0
  5023  00F9C3  00                 	db	0
  5024  00F9C4  00                 	db	0
  5025  00F9C5  00                 	db	0
  5026  00F9C6  00                 	db	0
  5027  00F9C7  00                 	db	0
  5028  00F9C8  00                 	db	0
  5029  00F9C9  00                 	db	0
  5030  00F9CA  00                 	db	0
  5031  00F9CB  53                 	db	83
  5032  00F9CC  6C                 	db	108
  5033  00F9CD  6F                 	db	111
  5034  00F9CE  74                 	db	116
  5035  00F9CF  20                 	db	32
  5036  00F9D0  33                 	db	51
  5037  00F9D1  00                 	db	0
  5038  00F9D2  00                 	db	0
  5039  00F9D3  00                 	db	0
  5040  00F9D4  00                 	db	0
  5041  00F9D5  00                 	db	0
  5042  00F9D6  00                 	db	0
  5043  00F9D7  00                 	db	0
  5044  00F9D8  00                 	db	0
  5045  00F9D9  00                 	db	0
  5046  00F9DA  00                 	db	0
  5047  00F9DB  00                 	db	0
  5048  00F9DC  53                 	db	83
  5049  00F9DD  6C                 	db	108
  5050  00F9DE  6F                 	db	111
  5051  00F9DF  74                 	db	116
  5052  00F9E0  20                 	db	32
  5053  00F9E1  34                 	db	52
  5054  00F9E2  00                 	db	0
  5055  00F9E3  00                 	db	0
  5056  00F9E4  00                 	db	0
  5057  00F9E5  00                 	db	0
  5058  00F9E6  00                 	db	0
  5059  00F9E7  00                 	db	0
  5060  00F9E8  00                 	db	0
  5061  00F9E9  00                 	db	0
  5062  00F9EA  00                 	db	0
  5063  00F9EB  00                 	db	0
  5064  00F9EC  00                 	db	0
  5065  00F9ED  45                 	db	69
  5066  00F9EE  78                 	db	120
  5067  00F9EF  69                 	db	105
  5068  00F9F0  74                 	db	116
  5069  00F9F1  00                 	db	0
  5070  00F9F2  00                 	db	0
  5071  00F9F3  00                 	db	0
  5072  00F9F4  00                 	db	0
  5073  00F9F5  00                 	db	0
  5074  00F9F6  00                 	db	0
  5075  00F9F7  00                 	db	0
  5076  00F9F8  00                 	db	0
  5077  00F9F9  00                 	db	0
  5078  00F9FA  00                 	db	0
  5079  00F9FB  00                 	db	0
  5080  00F9FC  00                 	db	0
  5081  00F9FD  00                 	db	0
  5082  00F9FE  43                 	db	67
  5083  00F9FF  57                 	db	87
  5084  00FA00  20                 	db	32
  5085  00FA01  49                 	db	73
  5086  00FA02  53                 	db	83
  5087  00FA03  20                 	db	32
  5088  00FA04  49                 	db	73
  5089  00FA05  4E                 	db	78
  5090  00FA06  43                 	db	67
  5091  00FA07  52                 	db	82
  5092  00FA08  45                 	db	69
  5093  00FA09  41                 	db	65
  5094  00FA0A  53                 	db	83
  5095  00FA0B  45                 	db	69
  5096  00FA0C  00                 	db	0
  5097  00FA0D  00                 	db	0
  5098  00FA0E  00                 	db	0
  5099  00FA0F  43                 	db	67
  5100  00FA10  43                 	db	67
  5101  00FA11  57                 	db	87
  5102  00FA12  20                 	db	32
  5103  00FA13  49                 	db	73
  5104  00FA14  53                 	db	83
  5105  00FA15  20                 	db	32
  5106  00FA16  49                 	db	73
  5107  00FA17  4E                 	db	78
  5108  00FA18  43                 	db	67
  5109  00FA19  52                 	db	82
  5110  00FA1A  45                 	db	69
  5111  00FA1B  41                 	db	65
  5112  00FA1C  53                 	db	83
  5113  00FA1D  45                 	db	69
  5114  00FA1E  00                 	db	0
  5115  00FA1F  00                 	db	0
  5116  00FA20  41                 	db	65
  5117  00FA21  72                 	db	114
  5118  00FA22  70                 	db	112
  5119  00FA23  65                 	db	101
  5120  00FA24  67                 	db	103
  5121  00FA25  67                 	db	103
  5122  00FA26  69                 	db	105
  5123  00FA27  6F                 	db	111
  5124  00FA28  20                 	db	32
  5125  00FA29  4F                 	db	79
  5126  00FA2A  46                 	db	70
  5127  00FA2B  46                 	db	70
  5128  00FA2C  2F                 	db	47
  5129  00FA2D  4F                 	db	79
  5130  00FA2E  4E                 	db	78
  5131  00FA2F  00                 	db	0
  5132  00FA30  00                 	db	0
  5133  00FA31  54                 	db	84
  5134  00FA32  65                 	db	101
  5135  00FA33  6D                 	db	109
  5136  00FA34  70                 	db	112
  5137  00FA35  6F                 	db	111
  5138  00FA36  00                 	db	0
  5139  00FA37  00                 	db	0
  5140  00FA38  00                 	db	0
  5141  00FA39  00                 	db	0
  5142  00FA3A  00                 	db	0
  5143  00FA3B  00                 	db	0
  5144  00FA3C  00                 	db	0
  5145  00FA3D  00                 	db	0
  5146  00FA3E  00                 	db	0
  5147  00FA3F  00                 	db	0
  5148  00FA40  00                 	db	0
  5149  00FA41  00                 	db	0
  5150  00FA42  4F                 	db	79
  5151  00FA43  63                 	db	99
  5152  00FA44  74                 	db	116
  5153  00FA45  61                 	db	97
  5154  00FA46  76                 	db	118
  5155  00FA47  65                 	db	101
  5156  00FA48  20                 	db	32
  5157  00FA49  52                 	db	82
  5158  00FA4A  61                 	db	97
  5159  00FA4B  6E                 	db	110
  5160  00FA4C  67                 	db	103
  5161  00FA4D  65                 	db	101
  5162  00FA4E  00                 	db	0
  5163  00FA4F  00                 	db	0
  5164  00FA50  00                 	db	0
  5165  00FA51  00                 	db	0
  5166  00FA52  00                 	db	0
  5167  00FA53  41                 	db	65
  5168  00FA54  72                 	db	114
  5169  00FA55  70                 	db	112
  5170  00FA56  65                 	db	101
  5171  00FA57  67                 	db	103
  5172  00FA58  67                 	db	103
  5173  00FA59  69                 	db	105
  5174  00FA5A  6F                 	db	111
  5175  00FA5B  20                 	db	32
  5176  00FA5C  54                 	db	84
  5177  00FA5D  79                 	db	121
  5178  00FA5E  70                 	db	112
  5179  00FA5F  65                 	db	101
  5180  00FA60  00                 	db	0
  5181  00FA61  00                 	db	0
  5182  00FA62  00                 	db	0
  5183  00FA63  00                 	db	0
  5184  00FA64  4E                 	db	78
  5185  00FA65  6F                 	db	111
  5186  00FA66  74                 	db	116
  5187  00FA67  65                 	db	101
  5188  00FA68  20                 	db	32
  5189  00FA69  4C                 	db	76
  5190  00FA6A  65                 	db	101
  5191  00FA6B  6E                 	db	110
  5192  00FA6C  67                 	db	103
  5193  00FA6D  74                 	db	116
  5194  00FA6E  68                 	db	104
  5195  00FA6F  00                 	db	0
  5196  00FA70  00                 	db	0
  5197  00FA71  00                 	db	0
  5198  00FA72  00                 	db	0
  5199  00FA73  00                 	db	0
  5200  00FA74  00                 	db	0
  5201  00FA75  4C                 	db	76
  5202  00FA76  61                 	db	97
  5203  00FA77  74                 	db	116
  5204  00FA78  63                 	db	99
  5205  00FA79  68                 	db	104
  5206  00FA7A  2F                 	db	47
  5207  00FA7B  41                 	db	65
  5208  00FA7C  75                 	db	117
  5209  00FA7D  74                 	db	116
  5210  00FA7E  6F                 	db	111
  5211  00FA7F  20                 	db	32
  5212  00FA80  4C                 	db	76
  5213  00FA81  61                 	db	97
  5214  00FA82  74                 	db	116
  5215  00FA83  63                 	db	99
  5216  00FA84  68                 	db	104
  5217  00FA85  00                 	db	0
  5218  00FA86  55                 	db	85
  5219  00FA87  6E                 	db	110
  5220  00FA88  2D                 	db	45
  5221  00FA89  6C                 	db	108
  5222  00FA8A  61                 	db	97
  5223  00FA8B  74                 	db	116
  5224  00FA8C  63                 	db	99
  5225  00FA8D  68                 	db	104
  5226  00FA8E  20                 	db	32
  5227  00FA8F  4D                 	db	77
  5228  00FA90  6F                 	db	111
  5229  00FA91  64                 	db	100
  5230  00FA92  65                 	db	101
  5231  00FA93  00                 	db	0
  5232  00FA94  00                 	db	0
  5233  00FA95  00                 	db	0
  5234  00FA96  00                 	db	0
  5235  00FA97  52                 	db	82
  5236  00FA98  61                 	db	97
  5237  00FA99  6E                 	db	110
  5238  00FA9A  64                 	db	100
  5239  00FA9B  6F                 	db	111
  5240  00FA9C  6D                 	db	109
  5241  00FA9D  69                 	db	105
  5242  00FA9E  7A                 	db	122
  5243  00FA9F  65                 	db	101
  5244  00FAA0  2F                 	db	47
  5245  00FAA1  53                 	db	83
  5246  00FAA2  6B                 	db	107
  5247  00FAA3  69                 	db	105
  5248  00FAA4  70                 	db	112
  5249  00FAA5  00                 	db	0
  5250  00FAA6  00                 	db	0
  5251  00FAA7  00                 	db	0
  5252  00FAA8  4C                 	db	76
  5253  00FAA9  61                 	db	97
  5254  00FAAA  73                 	db	115
  5255  00FAAB  74                 	db	116
  5256  00FAAC  20                 	db	32
  5257  00FAAD  4E                 	db	78
  5258  00FAAE  6F                 	db	111
  5259  00FAAF  74                 	db	116
  5260  00FAB0  65                 	db	101
  5261  00FAB1  20                 	db	32
  5262  00FAB2  4D                 	db	77
  5263  00FAB3  6F                 	db	111
  5264  00FAB4  64                 	db	100
  5265  00FAB5  65                 	db	101
  5266  00FAB6  00                 	db	0
  5267  00FAB7  00                 	db	0
  5268  00FAB8  00                 	db	0
  5269  00FAB9  41                 	db	65
  5270  00FABA  52                 	db	82
  5271  00FABB  50                 	db	80
  5272  00FABC  45                 	db	69
  5273  00FABD  47                 	db	71
  5274  00FABE  47                 	db	71
  5275  00FABF  49                 	db	73
  5276  00FAC0  41                 	db	65
  5277  00FAC1  54                 	db	84
  5278  00FAC2  4F                 	db	79
  5279  00FAC3  52                 	db	82
  5280  00FAC4  20                 	db	32
  5281  00FAC5  4F                 	db	79
  5282  00FAC6  46                 	db	70
  5283  00FAC7  46                 	db	70
  5284  00FAC8  00                 	db	0
  5285  00FAC9  00                 	db	0
  5286  00FACA  41                 	db	65
  5287  00FACB  52                 	db	82
  5288  00FACC  50                 	db	80
  5289  00FACD  45                 	db	69
  5290  00FACE  47                 	db	71
  5291  00FACF  47                 	db	71
  5292  00FAD0  49                 	db	73
  5293  00FAD1  41                 	db	65
  5294  00FAD2  54                 	db	84
  5295  00FAD3  4F                 	db	79
  5296  00FAD4  52                 	db	82
  5297  00FAD5  20                 	db	32
  5298  00FAD6  4F                 	db	79
  5299  00FAD7  4E                 	db	78
  5300  00FAD8  00                 	db	0
  5301  00FAD9  00                 	db	0
  5302  00FADA  00                 	db	0
  5303  00FADB  55                 	db	85
  5304  00FADC  50                 	db	80
  5305  00FADD  00                 	db	0
  5306  00FADE  00                 	db	0
  5307  00FADF  00                 	db	0
  5308  00FAE0  00                 	db	0
  5309  00FAE1  00                 	db	0
  5310  00FAE2  00                 	db	0
  5311  00FAE3  00                 	db	0
  5312  00FAE4  00                 	db	0
  5313  00FAE5  00                 	db	0
  5314  00FAE6  00                 	db	0
  5315  00FAE7  00                 	db	0
  5316  00FAE8  00                 	db	0
  5317  00FAE9  00                 	db	0
  5318  00FAEA  00                 	db	0
  5319  00FAEB  00                 	db	0
  5320  00FAEC  44                 	db	68
  5321  00FAED  4F                 	db	79
  5322  00FAEE  57                 	db	87
  5323  00FAEF  4E                 	db	78
  5324  00FAF0  00                 	db	0
  5325  00FAF1  00                 	db	0
  5326  00FAF2  00                 	db	0
  5327  00FAF3  00                 	db	0
  5328  00FAF4  00                 	db	0
  5329  00FAF5  00                 	db	0
  5330  00FAF6  00                 	db	0
  5331  00FAF7  00                 	db	0
  5332  00FAF8  00                 	db	0
  5333  00FAF9  00                 	db	0
  5334  00FAFA  00                 	db	0
  5335  00FAFB  00                 	db	0
  5336  00FAFC  00                 	db	0
  5337  00FAFD  55                 	db	85
  5338  00FAFE  50                 	db	80
  5339  00FAFF  2F                 	db	47
  5340  00FB00  44                 	db	68
  5341  00FB01  4F                 	db	79
  5342  00FB02  57                 	db	87
  5343  00FB03  4E                 	db	78
  5344  00FB04  00                 	db	0
  5345  00FB05  00                 	db	0
  5346  00FB06  00                 	db	0
  5347  00FB07  00                 	db	0
  5348  00FB08  00                 	db	0
  5349  00FB09  00                 	db	0
  5350  00FB0A  00                 	db	0
  5351  00FB0B  00                 	db	0
  5352  00FB0C  00                 	db	0
  5353  00FB0D  00                 	db	0
  5354  00FB0E  44                 	db	68
  5355  00FB0F  4F                 	db	79
  5356  00FB10  57                 	db	87
  5357  00FB11  4E                 	db	78
  5358  00FB12  2F                 	db	47
  5359  00FB13  55                 	db	85
  5360  00FB14  50                 	db	80
  5361  00FB15  00                 	db	0
  5362  00FB16  00                 	db	0
  5363  00FB17  00                 	db	0
  5364  00FB18  00                 	db	0
  5365  00FB19  00                 	db	0
  5366  00FB1A  00                 	db	0
  5367  00FB1B  00                 	db	0
  5368  00FB1C  00                 	db	0
  5369  00FB1D  00                 	db	0
  5370  00FB1E  00                 	db	0
  5371  00FB1F  53                 	db	83
  5372  00FB20  48                 	db	72
  5373  00FB21  55                 	db	85
  5374  00FB22  46                 	db	70
  5375  00FB23  46                 	db	70
  5376  00FB24  4C                 	db	76
  5377  00FB25  45                 	db	69
  5378  00FB26  00                 	db	0
  5379  00FB27  00                 	db	0
  5380  00FB28  00                 	db	0
  5381  00FB29  00                 	db	0
  5382  00FB2A  00                 	db	0
  5383  00FB2B  00                 	db	0
  5384  00FB2C  00                 	db	0
  5385  00FB2D  00                 	db	0
  5386  00FB2E  00                 	db	0
  5387  00FB2F  00                 	db	0
  5388  00FB30  52                 	db	82
  5389  00FB31  41                 	db	65
  5390  00FB32  4E                 	db	78
  5391  00FB33  44                 	db	68
  5392  00FB34  4F                 	db	79
  5393  00FB35  4D                 	db	77
  5394  00FB36  00                 	db	0
  5395  00FB37  00                 	db	0
  5396  00FB38  00                 	db	0
  5397  00FB39  00                 	db	0
  5398  00FB3A  00                 	db	0
  5399  00FB3B  00                 	db	0
  5400  00FB3C  00                 	db	0
  5401  00FB3D  00                 	db	0
  5402  00FB3E  00                 	db	0
  5403  00FB3F  00                 	db	0
  5404  00FB40  00                 	db	0
  5405  00FB41  41                 	db	65
  5406  00FB42  53                 	db	83
  5407  00FB43  20                 	db	32
  5408  00FB44  50                 	db	80
  5409  00FB45  52                 	db	82
  5410  00FB46  45                 	db	69
  5411  00FB47  53                 	db	83
  5412  00FB48  53                 	db	83
  5413  00FB49  45                 	db	69
  5414  00FB4A  44                 	db	68
  5415  00FB4B  00                 	db	0
  5416  00FB4C  00                 	db	0
  5417  00FB4D  00                 	db	0
  5418  00FB4E  00                 	db	0
  5419  00FB4F  00                 	db	0
  5420  00FB50  00                 	db	0
  5421  00FB51  00                 	db	0
  5422  00FB52  31                 	db	49
  5423  00FB53  2F                 	db	47
  5424  00FB54  34                 	db	52
  5425  00FB55  00                 	db	0
  5426  00FB56  00                 	db	0
  5427  00FB57  00                 	db	0
  5428  00FB58  00                 	db	0
  5429  00FB59  00                 	db	0
  5430  00FB5A  00                 	db	0
  5431  00FB5B  00                 	db	0
  5432  00FB5C  00                 	db	0
  5433  00FB5D  00                 	db	0
  5434  00FB5E  00                 	db	0
  5435  00FB5F  00                 	db	0
  5436  00FB60  00                 	db	0
  5437  00FB61  00                 	db	0
  5438  00FB62  00                 	db	0
  5439  00FB63  31                 	db	49
  5440  00FB64  2F                 	db	47
  5441  00FB65  34                 	db	52
  5442  00FB66  20                 	db	32
  5443  00FB67  44                 	db	68
  5444  00FB68  4F                 	db	79
  5445  00FB69  54                 	db	84
  5446  00FB6A  54                 	db	84
  5447  00FB6B  45                 	db	69
  5448  00FB6C  44                 	db	68
  5449  00FB6D  00                 	db	0
  5450  00FB6E  00                 	db	0
  5451  00FB6F  00                 	db	0
  5452  00FB70  00                 	db	0
  5453  00FB71  00                 	db	0
  5454  00FB72  00                 	db	0
  5455  00FB73  00                 	db	0
  5456  00FB74  31                 	db	49
  5457  00FB75  2F                 	db	47
  5458  00FB76  34                 	db	52
  5459  00FB77  20                 	db	32
  5460  00FB78  54                 	db	84
  5461  00FB79  52                 	db	82
  5462  00FB7A  49                 	db	73
  5463  00FB7B  50                 	db	80
  5464  00FB7C  4C                 	db	76
  5465  00FB7D  45                 	db	69
  5466  00FB7E  54                 	db	84
  5467  00FB7F  00                 	db	0
  5468  00FB80  00                 	db	0
  5469  00FB81  00                 	db	0
  5470  00FB82  00                 	db	0
  5471  00FB83  00                 	db	0
  5472  00FB84  00                 	db	0
  5473  00FB85  31                 	db	49
  5474  00FB86  2F                 	db	47
  5475  00FB87  38                 	db	56
  5476  00FB88  00                 	db	0
  5477  00FB89  00                 	db	0
  5478  00FB8A  00                 	db	0
  5479  00FB8B  00                 	db	0
  5480  00FB8C  00                 	db	0
  5481  00FB8D  00                 	db	0
  5482  00FB8E  00                 	db	0
  5483  00FB8F  00                 	db	0
  5484  00FB90  00                 	db	0
  5485  00FB91  00                 	db	0
  5486  00FB92  00                 	db	0
  5487  00FB93  00                 	db	0
  5488  00FB94  00                 	db	0
  5489  00FB95  00                 	db	0
  5490  00FB96  31                 	db	49
  5491  00FB97  2F                 	db	47
  5492  00FB98  38                 	db	56
  5493  00FB99  20                 	db	32
  5494  00FB9A  44                 	db	68
  5495  00FB9B  4F                 	db	79
  5496  00FB9C  54                 	db	84
  5497  00FB9D  54                 	db	84
  5498  00FB9E  45                 	db	69
  5499  00FB9F  44                 	db	68
  5500  00FBA0  00                 	db	0
  5501  00FBA1  00                 	db	0
  5502  00FBA2  00                 	db	0
  5503  00FBA3  00                 	db	0
  5504  00FBA4  00                 	db	0
  5505  00FBA5  00                 	db	0
  5506  00FBA6  00                 	db	0
  5507  00FBA7  31                 	db	49
  5508  00FBA8  2F                 	db	47
  5509  00FBA9  38                 	db	56
  5510  00FBAA  20                 	db	32
  5511  00FBAB  54                 	db	84
  5512  00FBAC  52                 	db	82
  5513  00FBAD  49                 	db	73
  5514  00FBAE  50                 	db	80
  5515  00FBAF  4C                 	db	76
  5516  00FBB0  45                 	db	69
  5517  00FBB1  54                 	db	84
  5518  00FBB2  00                 	db	0
  5519  00FBB3  00                 	db	0
  5520  00FBB4  00                 	db	0
  5521  00FBB5  00                 	db	0
  5522  00FBB6  00                 	db	0
  5523  00FBB7  00                 	db	0
  5524  00FBB8  31                 	db	49
  5525  00FBB9  2F                 	db	47
  5526  00FBBA  31                 	db	49
  5527  00FBBB  36                 	db	54
  5528  00FBBC  00                 	db	0
  5529  00FBBD  00                 	db	0
  5530  00FBBE  00                 	db	0
  5531  00FBBF  00                 	db	0
  5532  00FBC0  00                 	db	0
  5533  00FBC1  00                 	db	0
  5534  00FBC2  00                 	db	0
  5535  00FBC3  00                 	db	0
  5536  00FBC4  00                 	db	0
  5537  00FBC5  00                 	db	0
  5538  00FBC6  00                 	db	0
  5539  00FBC7  00                 	db	0
  5540  00FBC8  00                 	db	0
  5541  00FBC9  31                 	db	49
  5542  00FBCA  2F                 	db	47
  5543  00FBCB  31                 	db	49
  5544  00FBCC  36                 	db	54
  5545  00FBCD  20                 	db	32
  5546  00FBCE  44                 	db	68
  5547  00FBCF  4F                 	db	79
  5548  00FBD0  54                 	db	84
  5549  00FBD1  54                 	db	84
  5550  00FBD2  45                 	db	69
  5551  00FBD3  44                 	db	68
  5552  00FBD4  00                 	db	0
  5553  00FBD5  00                 	db	0
  5554  00FBD6  00                 	db	0
  5555  00FBD7  00                 	db	0
  5556  00FBD8  00                 	db	0
  5557  00FBD9  00                 	db	0
  5558  00FBDA  31                 	db	49
  5559  00FBDB  2F                 	db	47
  5560  00FBDC  31                 	db	49
  5561  00FBDD  36                 	db	54
  5562  00FBDE  20                 	db	32
  5563  00FBDF  54                 	db	84
  5564  00FBE0  52                 	db	82
  5565  00FBE1  49                 	db	73
  5566  00FBE2  50                 	db	80
  5567  00FBE3  4C                 	db	76
  5568  00FBE4  45                 	db	69
  5569  00FBE5  54                 	db	84
  5570  00FBE6  00                 	db	0
  5571  00FBE7  00                 	db	0
  5572  00FBE8  00                 	db	0
  5573  00FBE9  00                 	db	0
  5574  00FBEA  00                 	db	0
  5575  00FBEB  31                 	db	49
  5576  00FBEC  2F                 	db	47
  5577  00FBED  33                 	db	51
  5578  00FBEE  32                 	db	50
  5579  00FBEF  00                 	db	0
  5580  00FBF0  00                 	db	0
  5581  00FBF1  00                 	db	0
  5582  00FBF2  00                 	db	0
  5583  00FBF3  00                 	db	0
  5584  00FBF4  00                 	db	0
  5585  00FBF5  00                 	db	0
  5586  00FBF6  00                 	db	0
  5587  00FBF7  00                 	db	0
  5588  00FBF8  00                 	db	0
  5589  00FBF9  00                 	db	0
  5590  00FBFA  00                 	db	0
  5591  00FBFB  00                 	db	0
  5592  00FBFC  31                 	db	49
  5593  00FBFD  2F                 	db	47
  5594  00FBFE  33                 	db	51
  5595  00FBFF  32                 	db	50
  5596  00FC00  20                 	db	32
  5597  00FC01  44                 	db	68
  5598  00FC02  4F                 	db	79
  5599  00FC03  54                 	db	84
  5600  00FC04  54                 	db	84
  5601  00FC05  45                 	db	69
  5602  00FC06  44                 	db	68
  5603  00FC07  00                 	db	0
  5604  00FC08  00                 	db	0
  5605  00FC09  00                 	db	0
  5606  00FC0A  00                 	db	0
  5607  00FC0B  00                 	db	0
  5608  00FC0C  00                 	db	0
  5609  00FC0D  31                 	db	49
  5610  00FC0E  2F                 	db	47
  5611  00FC0F  33                 	db	51
  5612  00FC10  32                 	db	50
  5613  00FC11  20                 	db	32
  5614  00FC12  54                 	db	84
  5615  00FC13  52                 	db	82
  5616  00FC14  49                 	db	73
  5617  00FC15  50                 	db	80
  5618  00FC16  4C                 	db	76
  5619  00FC17  45                 	db	69
  5620  00FC18  54                 	db	84
  5621  00FC19  00                 	db	0
  5622  00FC1A  00                 	db	0
  5623  00FC1B  00                 	db	0
  5624  00FC1C  00                 	db	0
  5625  00FC1D  00                 	db	0
  5626  00FC1E  53                 	db	83
  5627  00FC1F  45                 	db	69
  5628  00FC20  54                 	db	84
  5629  00FC21  2F                 	db	47
  5630  00FC22  43                 	db	67
  5631  00FC23  4C                 	db	76
  5632  00FC24  45                 	db	69
  5633  00FC25  41                 	db	65
  5634  00FC26  52                 	db	82
  5635  00FC27  20                 	db	32
  5636  00FC28  4C                 	db	76
  5637  00FC29  41                 	db	65
  5638  00FC2A  54                 	db	84
  5639  00FC2B  43                 	db	67
  5640  00FC2C  48                 	db	72
  5641  00FC2D  00                 	db	0
  5642  00FC2E  00                 	db	0
  5643  00FC2F  41                 	db	65
  5644  00FC30  55                 	db	85
  5645  00FC31  54                 	db	84
  5646  00FC32  4F                 	db	79
  5647  00FC33  20                 	db	32
  5648  00FC34  4C                 	db	76
  5649  00FC35  41                 	db	65
  5650  00FC36  54                 	db	84
  5651  00FC37  43                 	db	67
  5652  00FC38  48                 	db	72
  5653  00FC39  00                 	db	0
  5654  00FC3A  00                 	db	0
  5655  00FC3B  00                 	db	0
  5656  00FC3C  00                 	db	0
  5657  00FC3D  00                 	db	0
  5658  00FC3E  00                 	db	0
  5659  00FC3F  00                 	db	0
  5660  00FC40  55                 	db	85
  5661  00FC41  6E                 	db	110
  5662  00FC42  2D                 	db	45
  5663  00FC43  4C                 	db	76
  5664  00FC44  61                 	db	97
  5665  00FC45  74                 	db	116
  5666  00FC46  63                 	db	99
  5667  00FC47  68                 	db	104
  5668  00FC48  20                 	db	32
  5669  00FC49  4D                 	db	77
  5670  00FC4A  6F                 	db	111
  5671  00FC4B  64                 	db	100
  5672  00FC4C  65                 	db	101
  5673  00FC4D  00                 	db	0
  5674  00FC4E  00                 	db	0
  5675  00FC4F  00                 	db	0
  5676  00FC50  00                 	db	0
  5677  00FC51  55                 	db	85
  5678  00FC52  4E                 	db	78
  5679  00FC53  4C                 	db	76
  5680  00FC54  41                 	db	65
  5681  00FC55  54                 	db	84
  5682  00FC56  43                 	db	67
  5683  00FC57  48                 	db	72
  5684  00FC58  20                 	db	32
  5685  00FC59  41                 	db	65
  5686  00FC5A  4C                 	db	76
  5687  00FC5B  4C                 	db	76
  5688  00FC5C  00                 	db	0
  5689  00FC5D  00                 	db	0
  5690  00FC5E  00                 	db	0
  5691  00FC5F  00                 	db	0
  5692  00FC60  00                 	db	0
  5693  00FC61  00                 	db	0
  5694  00FC62  4F                 	db	79
  5695  00FC63  4E                 	db	78
  5696  00FC64  45                 	db	69
  5697  00FC65  20                 	db	32
  5698  00FC66  41                 	db	65
  5699  00FC67  54                 	db	84
  5700  00FC68  20                 	db	32
  5701  00FC69  41                 	db	65
  5702  00FC6A  20                 	db	32
  5703  00FC6B  54                 	db	84
  5704  00FC6C  49                 	db	73
  5705  00FC6D  4D                 	db	77
  5706  00FC6E  45                 	db	69
  5707  00FC6F  00                 	db	0
  5708  00FC70  00                 	db	0
  5709  00FC71  00                 	db	0
  5710  00FC72  00                 	db	0
  5711  00FC73  52                 	db	82
  5712  00FC74  61                 	db	97
  5713  00FC75  6E                 	db	110
  5714  00FC76  64                 	db	100
  5715  00FC77  6F                 	db	111
  5716  00FC78  6D                 	db	109
  5717  00FC79  69                 	db	105
  5718  00FC7A  7A                 	db	122
  5719  00FC7B  65                 	db	101
  5720  00FC7C  00                 	db	0
  5721  00FC7D  00                 	db	0
  5722  00FC7E  00                 	db	0
  5723  00FC7F  00                 	db	0
  5724  00FC80  00                 	db	0
  5725  00FC81  00                 	db	0
  5726  00FC82  00                 	db	0
  5727  00FC83  00                 	db	0
  5728  00FC84  53                 	db	83
  5729  00FC85  6B                 	db	107
  5730  00FC86  69                 	db	105
  5731  00FC87  70                 	db	112
  5732  00FC88  20                 	db	32
  5733  00FC89  46                 	db	70
  5734  00FC8A  69                 	db	105
  5735  00FC8B  72                 	db	114
  5736  00FC8C  73                 	db	115
  5737  00FC8D  74                 	db	116
  5738  00FC8E  2F                 	db	47
  5739  00FC8F  4C                 	db	76
  5740  00FC90  61                 	db	97
  5741  00FC91  73                 	db	115
  5742  00FC92  74                 	db	116
  5743  00FC93  00                 	db	0
  5744  00FC94  00                 	db	0
  5745  00FC95  52                 	db	82
  5746  00FC96  41                 	db	65
  5747  00FC97  4E                 	db	78
  5748  00FC98  44                 	db	68
  5749  00FC99  4F                 	db	79
  5750  00FC9A  4D                 	db	77
  5751  00FC9B  49                 	db	73
  5752  00FC9C  5A                 	db	90
  5753  00FC9D  45                 	db	69
  5754  00FC9E  20                 	db	32
  5755  00FC9F  41                 	db	65
  5756  00FCA0  55                 	db	85
  5757  00FCA1  54                 	db	84
  5758  00FCA2  4F                 	db	79
  5759  00FCA3  00                 	db	0
  5760  00FCA4  00                 	db	0
  5761  00FCA5  00                 	db	0
  5762  00FCA6  52                 	db	82
  5763  00FCA7  41                 	db	65
  5764  00FCA8  4E                 	db	78
  5765  00FCA9  44                 	db	68
  5766  00FCAA  4F                 	db	79
  5767  00FCAB  4D                 	db	77
  5768  00FCAC  49                 	db	73
  5769  00FCAD  5A                 	db	90
  5770  00FCAE  45                 	db	69
  5771  00FCAF  20                 	db	32
  5772  00FCB0  4F                 	db	79
  5773  00FCB1  4E                 	db	78
  5774  00FCB2  43                 	db	67
  5775  00FCB3  45                 	db	69
  5776  00FCB4  00                 	db	0
  5777  00FCB5  00                 	db	0
  5778  00FCB6  00                 	db	0
  5779  00FCB7  4B                 	db	75
  5780  00FCB8  65                 	db	101
  5781  00FCB9  79                 	db	121
  5782  00FCBA  20                 	db	32
  5783  00FCBB  70                 	db	112
  5784  00FCBC  72                 	db	114
  5785  00FCBD  65                 	db	101
  5786  00FCBE  73                 	db	115
  5787  00FCBF  73                 	db	115
  5788  00FCC0  00                 	db	0
  5789  00FCC1  00                 	db	0
  5790  00FCC2  00                 	db	0
  5791  00FCC3  00                 	db	0
  5792  00FCC4  00                 	db	0
  5793  00FCC5  00                 	db	0
  5794  00FCC6  00                 	db	0
  5795  00FCC7  00                 	db	0
  5796  00FCC8  4B                 	db	75
  5797  00FCC9  65                 	db	101
  5798  00FCCA  79                 	db	121
  5799  00FCCB  20                 	db	32
  5800  00FCCC  72                 	db	114
  5801  00FCCD  65                 	db	101
  5802  00FCCE  6C                 	db	108
  5803  00FCCF  65                 	db	101
  5804  00FCD0  61                 	db	97
  5805  00FCD1  73                 	db	115
  5806  00FCD2  65                 	db	101
  5807  00FCD3  00                 	db	0
  5808  00FCD4  00                 	db	0
  5809  00FCD5  00                 	db	0
  5810  00FCD6  00                 	db	0
  5811  00FCD7  00                 	db	0
  5812  00FCD8  00                 	db	0
  5813  00FCD9  54                 	db	84
  5814  00FCDA  72                 	db	114
  5815  00FCDB  61                 	db	97
  5816  00FCDC  6E                 	db	110
  5817  00FCDD  73                 	db	115
  5818  00FCDE  70                 	db	112
  5819  00FCDF  6F                 	db	111
  5820  00FCE0  73                 	db	115
  5821  00FCE1  65                 	db	101
  5822  00FCE2  00                 	db	0
  5823  00FCE3  00                 	db	0
  5824  00FCE4  00                 	db	0
  5825  00FCE5  00                 	db	0
  5826  00FCE6  00                 	db	0
  5827  00FCE7  00                 	db	0
  5828  00FCE8  00                 	db	0
  5829  00FCE9  00                 	db	0
  5830  00FCEA  52                 	db	82
  5831  00FCEB  65                 	db	101
  5832  00FCEC  73                 	db	115
  5833  00FCED  65                 	db	101
  5834  00FCEE  74                 	db	116
  5835  00FCEF  00                 	db	0
  5836  00FCF0  00                 	db	0
  5837  00FCF1  00                 	db	0
  5838  00FCF2  00                 	db	0
  5839  00FCF3  00                 	db	0
  5840  00FCF4  00                 	db	0
  5841  00FCF5  00                 	db	0
  5842  00FCF6  00                 	db	0
  5843  00FCF7  00                 	db	0
  5844  00FCF8  00                 	db	0
  5845  00FCF9  00                 	db	0
  5846  00FCFA  00                 	db	0
  5847  00FCFB                     __end_of_LCD_STRINGS:
  5848                           	opt stack 0
  5849  00FCFB                     _locrian_key:
  5850                           	opt stack 0
  5851  00FCFB  0B                 	db	11
  5852  00FCFC  01                 	db	1
  5853  00FCFD  03                 	db	3
  5854  00FCFE  05                 	db	5
  5855  00FCFF  06                 	db	6
  5856  00FD00  08                 	db	8
  5857  00FD01  0A                 	db	10
  5858  00FD02  0C                 	db	12
  5859  00FD03  0D                 	db	13
  5860  00FD04  0F                 	db	15
  5861  00FD05  11                 	db	17
  5862  00FD06  12                 	db	18
  5863  00FD07  14                 	db	20
  5864  00FD08  16                 	db	22
  5865  00FD09  18                 	db	24
  5866  00FD0A                     __end_of_locrian_key:
  5867                           	opt stack 0
  5868  00FD0A                     _aeolian_key:
  5869                           	opt stack 0
  5870  00FD0A  09                 	db	9
  5871  00FD0B  02                 	db	2
  5872  00FD0C  03                 	db	3
  5873  00FD0D  05                 	db	5
  5874  00FD0E  07                 	db	7
  5875  00FD0F  08                 	db	8
  5876  00FD10  0A                 	db	10
  5877  00FD11  0C                 	db	12
  5878  00FD12  0E                 	db	14
  5879  00FD13  0F                 	db	15
  5880  00FD14  11                 	db	17
  5881  00FD15  13                 	db	19
  5882  00FD16  14                 	db	20
  5883  00FD17  16                 	db	22
  5884  00FD18  18                 	db	24
  5885  00FD19                     __end_of_aeolian_key:
  5886                           	opt stack 0
  5887  00FD19                     _mixolydian_key:
  5888                           	opt stack 0
  5889  00FD19  07                 	db	7
  5890  00FD1A  02                 	db	2
  5891  00FD1B  04                 	db	4
  5892  00FD1C  05                 	db	5
  5893  00FD1D  07                 	db	7
  5894  00FD1E  09                 	db	9
  5895  00FD1F  0A                 	db	10
  5896  00FD20  0C                 	db	12
  5897  00FD21  0E                 	db	14
  5898  00FD22  10                 	db	16
  5899  00FD23  11                 	db	17
  5900  00FD24  13                 	db	19
  5901  00FD25  15                 	db	21
  5902  00FD26  16                 	db	22
  5903  00FD27  18                 	db	24
  5904  00FD28                     __end_of_mixolydian_key:
  5905                           	opt stack 0
  5906  00FD28                     _lydian_key:
  5907                           	opt stack 0
  5908  00FD28  05                 	db	5
  5909  00FD29  02                 	db	2
  5910  00FD2A  04                 	db	4
  5911  00FD2B  06                 	db	6
  5912  00FD2C  07                 	db	7
  5913  00FD2D  09                 	db	9
  5914  00FD2E  0B                 	db	11
  5915  00FD2F  0C                 	db	12
  5916  00FD30  0E                 	db	14
  5917  00FD31  10                 	db	16
  5918  00FD32  12                 	db	18
  5919  00FD33  13                 	db	19
  5920  00FD34  15                 	db	21
  5921  00FD35  17                 	db	23
  5922  00FD36  18                 	db	24
  5923  00FD37                     __end_of_lydian_key:
  5924                           	opt stack 0
  5925  00FD37                     _phrygian_key:
  5926                           	opt stack 0
  5927  00FD37  04                 	db	4
  5928  00FD38  01                 	db	1
  5929  00FD39  03                 	db	3
  5930  00FD3A  05                 	db	5
  5931  00FD3B  07                 	db	7
  5932  00FD3C  08                 	db	8
  5933  00FD3D  0A                 	db	10
  5934  00FD3E  0C                 	db	12
  5935  00FD3F  0D                 	db	13
  5936  00FD40  0F                 	db	15
  5937  00FD41  11                 	db	17
  5938  00FD42  13                 	db	19
  5939  00FD43  14                 	db	20
  5940  00FD44  16                 	db	22
  5941  00FD45  18                 	db	24
  5942  00FD46                     __end_of_phrygian_key:
  5943                           	opt stack 0
  5944  00FD46                     _dorian_key:
  5945                           	opt stack 0
  5946  00FD46  02                 	db	2
  5947  00FD47  02                 	db	2
  5948  00FD48  03                 	db	3
  5949  00FD49  05                 	db	5
  5950  00FD4A  07                 	db	7
  5951  00FD4B  09                 	db	9
  5952  00FD4C  0A                 	db	10
  5953  00FD4D  0C                 	db	12
  5954  00FD4E  0E                 	db	14
  5955  00FD4F  0F                 	db	15
  5956  00FD50  11                 	db	17
  5957  00FD51  13                 	db	19
  5958  00FD52  15                 	db	21
  5959  00FD53  16                 	db	22
  5960  00FD54  18                 	db	24
  5961  00FD55                     __end_of_dorian_key:
  5962                           	opt stack 0
  5963  00FD55                     _ionian_key:
  5964                           	opt stack 0
  5965  00FD55  00                 	db	0
  5966  00FD56  02                 	db	2
  5967  00FD57  04                 	db	4
  5968  00FD58  05                 	db	5
  5969  00FD59  07                 	db	7
  5970  00FD5A  09                 	db	9
  5971  00FD5B  0B                 	db	11
  5972  00FD5C  0C                 	db	12
  5973  00FD5D  0E                 	db	14
  5974  00FD5E  10                 	db	16
  5975  00FD5F  11                 	db	17
  5976  00FD60  13                 	db	19
  5977  00FD61  15                 	db	21
  5978  00FD62  17                 	db	23
  5979  00FD63  18                 	db	24
  5980  00FD64                     __end_of_ionian_key:
  5981                           	opt stack 0
  5982  0000                     _TMR0	set	4054
  5983  0000                     _TMR1	set	4046
  5984  0000                     _EECON2	set	4007
  5985  0000                     _INTCONbits	set	4082
  5986  0000                     _EEDATA	set	4008
  5987  0000                     _EEADR	set	4009
  5988  0000                     _EEADRH	set	4010
  5989  0000                     _EECON1bits	set	4006
  5990  0000                     _SPBRG	set	4015
  5991  0000                     _T1CON	set	4045
  5992  0000                     _TMR2	set	4044
  5993  0000                     _T2CON	set	4042
  5994  0000                     _T0CON	set	4053
  5995  0000                     _PORTE	set	3972
  5996  0000                     _PORTB	set	3969
  5997  0000                     _TRISE	set	3990
  5998  0000                     _TRISD	set	3989
  5999  0000                     _TRISC	set	3988
  6000  0000                     _TRISB	set	3987
  6001  0000                     _TRISA	set	3986
  6002  0000                     _PORTD	set	3971
  6003  0000                     _TXREG	set	4013
  6004  0000                     _ADRESL	set	4035
  6005  0000                     _ADRESH	set	4036
  6006  0000                     _PORTA	set	3968
  6007  0000                     _ADCON2	set	4032
  6008  0000                     _ADCON1	set	4033
  6009  0000                     _ADCON0	set	4034
  6010  0000                     _CMCON	set	4020
  6011  0000                     _PORTC	set	3970
  6012  0000                     _TMR0IF	set	32658
  6013  0000                     _RB0	set	31752
  6014  0000                     _TMR1IF	set	31984
  6015  0000                     _TMR2IF	set	31985
  6016  0000                     _RC4	set	31764
  6017  0000                     _RC5	set	31765
  6018  0000                     _RB1	set	31753
  6019  0000                     _GIE	set	32663
  6020  0000                     _PEIE	set	32662
  6021  0000                     _BRGH	set	32098
  6022  0000                     _CREN	set	32092
  6023  0000                     _SPEN	set	32095
  6024  0000                     _SYNC	set	32100
  6025  0000                     _TXEN	set	32101
  6026  0000                     _TMR1IE	set	31976
  6027  0000                     _TMR1ON	set	32360
  6028  0000                     _TMR2IE	set	31977
  6029  0000                     _TMR0IE	set	32661
  6030  0000                     _PSA	set	32427
  6031  0000                     _T0CS	set	32429
  6032  0000                     _T08BIT	set	32430
  6033  0000                     _INT0IE	set	32660
  6034  0000                     _INT0IF	set	32657
  6035  0000                     _INTEDG0	set	32654
  6036  0000                     _RBIE	set	32659
  6037  0000                     _RBIF	set	32656
  6038  0000                     _IPEN	set	32391
  6039  0000                     _RC2	set	31762
  6040  0000                     _RC1	set	31761
  6041  0000                     _RC0	set	31760
  6042  0000                     _RC3	set	31763
  6043  0000                     _TMR0ON	set	32431
  6044  0000                     _RB4	set	31756
  6045  0000                     _RB5	set	31757
  6046  0000                     _RE2	set	31778
  6047  0000                     _RB2	set	31754
  6048  0000                     _RA5	set	31749
  6049  0000                     _TXIF	set	31988
  6050  0000                     _TRMT	set	32097
  6051  0000                     _GO_nDONE	set	32273
  6052  0000                     _ADON	set	32272
  6053  0000                     _TMR2ON	set	32338
  6054  0000                     _RE1	set	31777
  6055  0000                     _RE0	set	31776
  6056  0000                     _RD7	set	31775
  6057  0000                     _RD6	set	31774
  6058  0000                     _RD5	set	31773
  6059  0000                     _RD4	set	31772
  6060  00FD64                     STR_10:
  6061  00FD64  20                 	db	32
  6062  00FD65  20                 	db	32
  6063  00FD66  20                 	db	32
  6064  00FD67  20                 	db	32
  6065  00FD68  20                 	db	32
  6066  00FD69  20                 	db	32
  6067  00FD6A  20                 	db	32
  6068  00FD6B  20                 	db	32
  6069  00FD6C  20                 	db	32
  6070  00FD6D  20                 	db	32
  6071  00FD6E  20                 	db	32
  6072  00FD6F  20                 	db	32
  6073  00FD70  20                 	db	32
  6074  00FD71  20                 	db	32
  6075  00FD72  20                 	db	32
  6076  00FD73  20                 	db	32
  6077  00FD74  00                 	db	0
  6078  00FD75                     STR_22:
  6079  00FD75  53                 	db	83	;'S'
  6080  00FD76  65                 	db	101	;'e'
  6081  00FD77  74                 	db	116	;'t'
  6082  00FD78  74                 	db	116	;'t'
  6083  00FD79  69                 	db	105	;'i'
  6084  00FD7A  6E                 	db	110	;'n'
  6085  00FD7B  67                 	db	103	;'g'
  6086  00FD7C  73                 	db	115	;'s'
  6087  00FD7D  20                 	db	32
  6088  00FD7E  4C                 	db	76	;'L'
  6089  00FD7F  6F                 	db	111	;'o'
  6090  00FD80  61                 	db	97	;'a'
  6091  00FD81  64                 	db	100	;'d'
  6092  00FD82  65                 	db	101	;'e'
  6093  00FD83  64                 	db	100	;'d'
  6094  00FD84  21                 	db	33
  6095  00FD85  00                 	db	0
  6096  00FD86                     STR_37:
  6097  00FD86  52                 	db	82	;'R'
  6098  00FD87  65                 	db	101	;'e'
  6099  00FD88  73                 	db	115	;'s'
  6100  00FD89  74                 	db	116	;'t'
  6101  00FD8A  6F                 	db	111	;'o'
  6102  00FD8B  72                 	db	114	;'r'
  6103  00FD8C  65                 	db	101	;'e'
  6104  00FD8D  20                 	db	32
  6105  00FD8E  53                 	db	83	;'S'
  6106  00FD8F  65                 	db	101	;'e'
  6107  00FD90  74                 	db	116	;'t'
  6108  00FD91  74                 	db	116	;'t'
  6109  00FD92  69                 	db	105	;'i'
  6110  00FD93  6E                 	db	110	;'n'
  6111  00FD94  67                 	db	103	;'g'
  6112  00FD95  21                 	db	33
  6113  00FD96  00                 	db	0
  6114  00FD97                     STR_33:
  6115  00FD97  53                 	db	83	;'S'
  6116  00FD98  65                 	db	101	;'e'
  6117  00FD99  74                 	db	116	;'t'
  6118  00FD9A  20                 	db	32
  6119  00FD9B  4A                 	db	74	;'J'
  6120  00FD9C  6F                 	db	111	;'o'
  6121  00FD9D  79                 	db	121	;'y'
  6122  00FD9E  73                 	db	115	;'s'
  6123  00FD9F  74                 	db	116	;'t'
  6124  00FDA0  69                 	db	105	;'i'
  6125  00FDA1  63                 	db	99	;'c'
  6126  00FDA2  6B                 	db	107	;'k'
  6127  00FDA3  20                 	db	32
  6128  00FDA4  43                 	db	67	;'C'
  6129  00FDA5  43                 	db	67	;'C'
  6130  00FDA6  23                 	db	35
  6131  00FDA7  00                 	db	0
  6132  00FDA8                     STR_30:
  6133  00FDA8  50                 	db	80	;'P'
  6134  00FDA9  6F                 	db	111	;'o'
  6135  00FDAA  74                 	db	116	;'t'
  6136  00FDAB  73                 	db	115	;'s'
  6137  00FDAC  20                 	db	32
  6138  00FDAD  52                 	db	82	;'R'
  6139  00FDAE  65                 	db	101	;'e'
  6140  00FDAF  73                 	db	115	;'s'
  6141  00FDB0  6F                 	db	111	;'o'
  6142  00FDB1  6C                 	db	108	;'l'
  6143  00FDB2  75                 	db	117	;'u'
  6144  00FDB3  74                 	db	116	;'t'
  6145  00FDB4  69                 	db	105	;'i'
  6146  00FDB5  6F                 	db	111	;'o'
  6147  00FDB6  6E                 	db	110	;'n'
  6148  00FDB7  3A                 	db	58	;':'
  6149  00FDB8  00                 	db	0
  6150  00FDB9                     STR_47:
  6151  00FDB9  53                 	db	83	;'S'
  6152  00FDBA  65                 	db	101	;'e'
  6153  00FDBB  6C                 	db	108	;'l'
  6154  00FDBC  65                 	db	101	;'e'
  6155  00FDBD  63                 	db	99	;'c'
  6156  00FDBE  74                 	db	116	;'t'
  6157  00FDBF  20                 	db	32
  6158  00FDC0  41                 	db	65	;'A'
  6159  00FDC1  72                 	db	114	;'r'
  6160  00FDC2  70                 	db	112	;'p'
  6161  00FDC3  65                 	db	101	;'e'
  6162  00FDC4  67                 	db	103	;'g'
  6163  00FDC5  67                 	db	103	;'g'
  6164  00FDC6  69                 	db	105	;'i'
  6165  00FDC7  6F                 	db	111	;'o'
  6166  00FDC8  3A                 	db	58	;':'
  6167  00FDC9  00                 	db	0
  6168  00FDCA                     STR_28:
  6169  00FDCA  53                 	db	83	;'S'
  6170  00FDCB  65                 	db	101	;'e'
  6171  00FDCC  74                 	db	116	;'t'
  6172  00FDCD  20                 	db	32
  6173  00FDCE  4E                 	db	78	;'N'
  6174  00FDCF  6F                 	db	111	;'o'
  6175  00FDD0  74                 	db	116	;'t'
  6176  00FDD1  65                 	db	101	;'e'
  6177  00FDD2  20                 	db	32
  6178  00FDD3  4E                 	db	78	;'N'
  6179  00FDD4  75                 	db	117	;'u'
  6180  00FDD5  6D                 	db	109	;'m'
  6181  00FDD6  62                 	db	98	;'b'
  6182  00FDD7  65                 	db	101	;'e'
  6183  00FDD8  72                 	db	114	;'r'
  6184  00FDD9  3A                 	db	58	;':'
  6185  00FDDA  00                 	db	0
  6186  00FDDB                     STR_52:
  6187  00FDDB  41                 	db	65	;'A'
  6188  00FDDC  75                 	db	117	;'u'
  6189  00FDDD  74                 	db	116	;'t'
  6190  00FDDE  6F                 	db	111	;'o'
  6191  00FDDF  4C                 	db	76	;'L'
  6192  00FDE0  61                 	db	97	;'a'
  6193  00FDE1  74                 	db	116	;'t'
  6194  00FDE2  63                 	db	99	;'c'
  6195  00FDE3  68                 	db	104	;'h'
  6196  00FDE4  20                 	db	32
  6197  00FDE5  4F                 	db	79	;'O'
  6198  00FDE6  4E                 	db	78	;'N'
  6199  00FDE7  2F                 	db	47
  6200  00FDE8  4F                 	db	79	;'O'
  6201  00FDE9  46                 	db	70	;'F'
  6202  00FDEA  46                 	db	70	;'F'
  6203  00FDEB  00                 	db	0
  6204  00FDEC                     STR_39:
  6205  00FDEC  45                 	db	69	;'E'
  6206  00FDED  6E                 	db	110	;'n'
  6207  00FDEE  63                 	db	99	;'c'
  6208  00FDEF  6F                 	db	111	;'o'
  6209  00FDF0  64                 	db	100	;'d'
  6210  00FDF1  65                 	db	101	;'e'
  6211  00FDF2  72                 	db	114	;'r'
  6212  00FDF3  20                 	db	32
  6213  00FDF4  50                 	db	80	;'P'
  6214  00FDF5  6F                 	db	111	;'o'
  6215  00FDF6  6C                 	db	108	;'l'
  6216  00FDF7  61                 	db	97	;'a'
  6217  00FDF8  72                 	db	114	;'r'
  6218  00FDF9  69                 	db	105	;'i'
  6219  00FDFA  74                 	db	116	;'t'
  6220  00FDFB  79                 	db	121	;'y'
  6221  00FDFC  00                 	db	0
  6222  00FDFD                     STR_21:
  6223  00FDFD  53                 	db	83	;'S'
  6224  00FDFE  65                 	db	101	;'e'
  6225  00FDFF  74                 	db	116	;'t'
  6226  00FE00  74                 	db	116	;'t'
  6227  00FE01  69                 	db	105	;'i'
  6228  00FE02  6E                 	db	110	;'n'
  6229  00FE03  67                 	db	103	;'g'
  6230  00FE04  73                 	db	115	;'s'
  6231  00FE05  20                 	db	32
  6232  00FE06  53                 	db	83	;'S'
  6233  00FE07  61                 	db	97	;'a'
  6234  00FE08  76                 	db	118	;'v'
  6235  00FE09  65                 	db	101	;'e'
  6236  00FE0A  64                 	db	100	;'d'
  6237  00FE0B  21                 	db	33
  6238  00FE0C  00                 	db	0
  6239  00FE0D                     STR_75:
  6240  00FE0D  4C                 	db	76	;'L'
  6241  00FE0E  61                 	db	97	;'a'
  6242  00FE0F  73                 	db	115	;'s'
  6243  00FE10  74                 	db	116	;'t'
  6244  00FE11  20                 	db	32
  6245  00FE12  4E                 	db	78	;'N'
  6246  00FE13  6F                 	db	111	;'o'
  6247  00FE14  74                 	db	116	;'t'
  6248  00FE15  65                 	db	101	;'e'
  6249  00FE16  20                 	db	32
  6250  00FE17  4D                 	db	77	;'M'
  6251  00FE18  6F                 	db	111	;'o'
  6252  00FE19  64                 	db	100	;'d'
  6253  00FE1A  65                 	db	101	;'e'
  6254  00FE1B  3A                 	db	58	;':'
  6255  00FE1C  00                 	db	0
  6256  00FE1D                     STR_62:
  6257  00FE1D  52                 	db	82	;'R'
  6258  00FE1E  61                 	db	97	;'a'
  6259  00FE1F  6E                 	db	110	;'n'
  6260  00FE20  64                 	db	100	;'d'
  6261  00FE21  6F                 	db	111	;'o'
  6262  00FE22  6D                 	db	109	;'m'
  6263  00FE23  69                 	db	105	;'i'
  6264  00FE24  7A                 	db	122	;'z'
  6265  00FE25  65                 	db	101	;'e'
  6266  00FE26  20                 	db	32
  6267  00FE27  54                 	db	84	;'T'
  6268  00FE28  79                 	db	121	;'y'
  6269  00FE29  70                 	db	112	;'p'
  6270  00FE2A  65                 	db	101	;'e'
  6271  00FE2B  3A                 	db	58	;':'
  6272  00FE2C  00                 	db	0
  6273  00FE2D                     STR_26:
  6274  00FE2D  53                 	db	83	;'S'
  6275  00FE2E  65                 	db	101	;'e'
  6276  00FE2F  6C                 	db	108	;'l'
  6277  00FE30  65                 	db	101	;'e'
  6278  00FE31  63                 	db	99	;'c'
  6279  00FE32  74                 	db	116	;'t'
  6280  00FE33  20                 	db	32
  6281  00FE34  53                 	db	83	;'S'
  6282  00FE35  65                 	db	101	;'e'
  6283  00FE36  76                 	db	118	;'v'
  6284  00FE37  65                 	db	101	;'e'
  6285  00FE38  6E                 	db	110	;'n'
  6286  00FE39  74                 	db	116	;'t'
  6287  00FE3A  68                 	db	104	;'h'
  6288  00FE3B  3A                 	db	58	;':'
  6289  00FE3C  00                 	db	0
  6290  00FE3D                     STR_40:
  6291  00FE3D  41                 	db	65	;'A'
  6292  00FE3E  52                 	db	82	;'R'
  6293  00FE3F  50                 	db	80	;'P'
  6294  00FE40  45                 	db	69	;'E'
  6295  00FE41  47                 	db	71	;'G'
  6296  00FE42  47                 	db	71	;'G'
  6297  00FE43  49                 	db	73	;'I'
  6298  00FE44  41                 	db	65	;'A'
  6299  00FE45  54                 	db	84	;'T'
  6300  00FE46  4F                 	db	79	;'O'
  6301  00FE47  52                 	db	82	;'R'
  6302  00FE48  20                 	db	32
  6303  00FE49  4F                 	db	79	;'O'
  6304  00FE4A  46                 	db	70	;'F'
  6305  00FE4B  46                 	db	70	;'F'
  6306  00FE4C  00                 	db	0
  6307  00FE4D                     STR_32:
  6308  00FE4D  53                 	db	83	;'S'
  6309  00FE4E  6C                 	db	108	;'l'
  6310  00FE4F  69                 	db	105	;'i'
  6311  00FE50  64                 	db	100	;'d'
  6312  00FE51  65                 	db	101	;'e'
  6313  00FE52  70                 	db	112	;'p'
  6314  00FE53  6F                 	db	111	;'o'
  6315  00FE54  74                 	db	116	;'t'
  6316  00FE55  73                 	db	115	;'s'
  6317  00FE56  20                 	db	32
  6318  00FE57  43                 	db	67	;'C'
  6319  00FE58  43                 	db	67	;'C'
  6320  00FE59  23                 	db	35
  6321  00FE5A  3A                 	db	58	;':'
  6322  00FE5B  00                 	db	0
  6323  00FE5C                     STR_57:
  6324  00FE5C  55                 	db	85	;'U'
  6325  00FE5D  6E                 	db	110	;'n'
  6326  00FE5E  2D                 	db	45
  6327  00FE5F  6C                 	db	108	;'l'
  6328  00FE60  61                 	db	97	;'a'
  6329  00FE61  74                 	db	116	;'t'
  6330  00FE62  63                 	db	99	;'c'
  6331  00FE63  68                 	db	104	;'h'
  6332  00FE64  20                 	db	32
  6333  00FE65  4D                 	db	77	;'M'
  6334  00FE66  6F                 	db	111	;'o'
  6335  00FE67  64                 	db	100	;'d'
  6336  00FE68  65                 	db	101	;'e'
  6337  00FE69  3A                 	db	58	;':'
  6338  00FE6A  00                 	db	0
  6339  00FE6B                     STR_29:
  6340  00FE6B  53                 	db	83	;'S'
  6341  00FE6C  65                 	db	101	;'e'
  6342  00FE6D  74                 	db	116	;'t'
  6343  00FE6E  20                 	db	32
  6344  00FE6F  43                 	db	67	;'C'
  6345  00FE70  43                 	db	67	;'C'
  6346  00FE71  20                 	db	32
  6347  00FE72  4E                 	db	78	;'N'
  6348  00FE73  75                 	db	117	;'u'
  6349  00FE74  6D                 	db	109	;'m'
  6350  00FE75  62                 	db	98	;'b'
  6351  00FE76  65                 	db	101	;'e'
  6352  00FE77  72                 	db	114	;'r'
  6353  00FE78  3A                 	db	58	;':'
  6354  00FE79  00                 	db	0
  6355  00FE7A                     STR_64:
  6356  00FE7A  52                 	db	82	;'R'
  6357  00FE7B  41                 	db	65	;'A'
  6358  00FE7C  4E                 	db	78	;'N'
  6359  00FE7D  44                 	db	68	;'D'
  6360  00FE7E  4F                 	db	79	;'O'
  6361  00FE7F  4D                 	db	77	;'M'
  6362  00FE80  49                 	db	73	;'I'
  6363  00FE81  5A                 	db	90	;'Z'
  6364  00FE82  45                 	db	69	;'E'
  6365  00FE83  20                 	db	32
  6366  00FE84  4F                 	db	79	;'O'
  6367  00FE85  4E                 	db	78	;'N'
  6368  00FE86  43                 	db	67	;'C'
  6369  00FE87  45                 	db	69	;'E'
  6370  00FE88  00                 	db	0
  6371  00FE89                     STR_53:
  6372  00FE89  41                 	db	65	;'A'
  6373  00FE8A  75                 	db	117	;'u'
  6374  00FE8B  74                 	db	116	;'t'
  6375  00FE8C  6F                 	db	111	;'o'
  6376  00FE8D  20                 	db	32
  6377  00FE8E  4C                 	db	76	;'L'
  6378  00FE8F  61                 	db	97	;'a'
  6379  00FE90  74                 	db	116	;'t'
  6380  00FE91  63                 	db	99	;'c'
  6381  00FE92  68                 	db	104	;'h'
  6382  00FE93  20                 	db	32
  6383  00FE94  4F                 	db	79	;'O'
  6384  00FE95  46                 	db	70	;'F'
  6385  00FE96  46                 	db	70	;'F'
  6386  00FE97  00                 	db	0
  6387  00FE98                     STR_42:
  6388  00FE98  41                 	db	65	;'A'
  6389  00FE99  52                 	db	82	;'R'
  6390  00FE9A  50                 	db	80	;'P'
  6391  00FE9B  45                 	db	69	;'E'
  6392  00FE9C  47                 	db	71	;'G'
  6393  00FE9D  47                 	db	71	;'G'
  6394  00FE9E  49                 	db	73	;'I'
  6395  00FE9F  41                 	db	65	;'A'
  6396  00FEA0  54                 	db	84	;'T'
  6397  00FEA1  4F                 	db	79	;'O'
  6398  00FEA2  52                 	db	82	;'R'
  6399  00FEA3  20                 	db	32
  6400  00FEA4  4F                 	db	79	;'O'
  6401  00FEA5  4E                 	db	78	;'N'
  6402  00FEA6  00                 	db	0
  6403  00FEA7                     STR_63:
  6404  00FEA7  52                 	db	82	;'R'
  6405  00FEA8  41                 	db	65	;'A'
  6406  00FEA9  4E                 	db	78	;'N'
  6407  00FEAA  44                 	db	68	;'D'
  6408  00FEAB  4F                 	db	79	;'O'
  6409  00FEAC  4D                 	db	77	;'M'
  6410  00FEAD  49                 	db	73	;'I'
  6411  00FEAE  5A                 	db	90	;'Z'
  6412  00FEAF  45                 	db	69	;'E'
  6413  00FEB0  20                 	db	32
  6414  00FEB1  41                 	db	65	;'A'
  6415  00FEB2  55                 	db	85	;'U'
  6416  00FEB3  54                 	db	84	;'T'
  6417  00FEB4  4F                 	db	79	;'O'
  6418  00FEB5  00                 	db	0
  6419  00FEB6                     STR_45:
  6420  00FEB6  54                 	db	84	;'T'
  6421  00FEB7  65                 	db	101	;'e'
  6422  00FEB8  6D                 	db	109	;'m'
  6423  00FEB9  70                 	db	112	;'p'
  6424  00FEBA  6F                 	db	111	;'o'
  6425  00FEBB  20                 	db	32
  6426  00FEBC  28                 	db	40
  6427  00FEBD  42                 	db	66	;'B'
  6428  00FEBE  50                 	db	80	;'P'
  6429  00FEBF  4D                 	db	77	;'M'
  6430  00FEC0  29                 	db	41
  6431  00FEC1  3A                 	db	58	;':'
  6432  00FEC2  20                 	db	32
  6433  00FEC3  00                 	db	0
  6434  00FEC4                     STR_31:
  6435  00FEC4  53                 	db	83	;'S'
  6436  00FEC5  65                 	db	101	;'e'
  6437  00FEC6  74                 	db	116	;'t'
  6438  00FEC7  20                 	db	32
  6439  00FEC8  50                 	db	80	;'P'
  6440  00FEC9  6F                 	db	111	;'o'
  6441  00FECA  74                 	db	116	;'t'
  6442  00FECB  73                 	db	115	;'s'
  6443  00FECC  20                 	db	32
  6444  00FECD  43                 	db	67	;'C'
  6445  00FECE  43                 	db	67	;'C'
  6446  00FECF  23                 	db	35
  6447  00FED0  3A                 	db	58	;':'
  6448  00FED1  00                 	db	0
  6449  00FED2                     STR_25:
  6450  00FED2  53                 	db	83	;'S'
  6451  00FED3  65                 	db	101	;'e'
  6452  00FED4  6C                 	db	108	;'l'
  6453  00FED5  65                 	db	101	;'e'
  6454  00FED6  63                 	db	99	;'c'
  6455  00FED7  74                 	db	116	;'t'
  6456  00FED8  20                 	db	32
  6457  00FED9  54                 	db	84	;'T'
  6458  00FEDA  72                 	db	114	;'r'
  6459  00FEDB  69                 	db	105	;'i'
  6460  00FEDC  61                 	db	97	;'a'
  6461  00FEDD  64                 	db	100	;'d'
  6462  00FEDE  3A                 	db	58	;':'
  6463  00FEDF  00                 	db	0
  6464  00FEE0                     STR_27:
  6465  00FEE0  44                 	db	68	;'D'
  6466  00FEE1  72                 	db	114	;'r'
  6467  00FEE2  75                 	db	117	;'u'
  6468  00FEE3  6D                 	db	109	;'m'
  6469  00FEE4  20                 	db	32
  6470  00FEE5  43                 	db	67	;'C'
  6471  00FEE6  43                 	db	67	;'C'
  6472  00FEE7  20                 	db	32
  6473  00FEE8  4D                 	db	77	;'M'
  6474  00FEE9  6F                 	db	111	;'o'
  6475  00FEEA  64                 	db	100	;'d'
  6476  00FEEB  65                 	db	101	;'e'
  6477  00FEEC  3A                 	db	58	;':'
  6478  00FEED  00                 	db	0
  6479  00FEEE                     STR_46:
  6480  00FEEE  4F                 	db	79	;'O'
  6481  00FEEF  63                 	db	99	;'c'
  6482  00FEF0  74                 	db	116	;'t'
  6483  00FEF1  61                 	db	97	;'a'
  6484  00FEF2  76                 	db	118	;'v'
  6485  00FEF3  65                 	db	101	;'e'
  6486  00FEF4  20                 	db	32
  6487  00FEF5  52                 	db	82	;'R'
  6488  00FEF6  61                 	db	97	;'a'
  6489  00FEF7  6E                 	db	110	;'n'
  6490  00FEF8  67                 	db	103	;'g'
  6491  00FEF9  65                 	db	101	;'e'
  6492  00FEFA  3A                 	db	58	;':'
  6493  00FEFB  00                 	db	0
  6494  00FEFC                     STR_60:
  6495  00FEFC  4F                 	db	79	;'O'
  6496  00FEFD  4E                 	db	78	;'N'
  6497  00FEFE  45                 	db	69	;'E'
  6498  00FEFF  20                 	db	32
  6499  00FF00  41                 	db	65	;'A'
  6500  00FF01  54                 	db	84	;'T'
  6501  00FF02  20                 	db	32
  6502  00FF03  41                 	db	65	;'A'
  6503  00FF04  20                 	db	32
  6504  00FF05  54                 	db	84	;'T'
  6505  00FF06  49                 	db	73	;'I'
  6506  00FF07  4D                 	db	77	;'M'
  6507  00FF08  45                 	db	69	;'E'
  6508  00FF09  00                 	db	0
  6509  00FF0A                     STR_55:
  6510  00FF0A  41                 	db	65	;'A'
  6511  00FF0B  75                 	db	117	;'u'
  6512  00FF0C  74                 	db	116	;'t'
  6513  00FF0D  6F                 	db	111	;'o'
  6514  00FF0E  20                 	db	32
  6515  00FF0F  4C                 	db	76	;'L'
  6516  00FF10  61                 	db	97	;'a'
  6517  00FF11  74                 	db	116	;'t'
  6518  00FF12  63                 	db	99	;'c'
  6519  00FF13  68                 	db	104	;'h'
  6520  00FF14  20                 	db	32
  6521  00FF15  4F                 	db	79	;'O'
  6522  00FF16  4E                 	db	78	;'N'
  6523  00FF17  00                 	db	0
  6524  00FF18                     STR_23:
  6525  00FF18  45                 	db	69	;'E'
  6526  00FF19  78                 	db	120	;'x'
  6527  00FF1A  69                 	db	105	;'i'
  6528  00FF1B  74                 	db	116	;'t'
  6529  00FF1C  20                 	db	32
  6530  00FF1D  45                 	db	69	;'E'
  6531  00FF1E  45                 	db	69	;'E'
  6532  00FF1F  50                 	db	80	;'P'
  6533  00FF20  52                 	db	82	;'R'
  6534  00FF21  4F                 	db	79	;'O'
  6535  00FF22  4D                 	db	77	;'M'
  6536  00FF23  21                 	db	33
  6537  00FF24  00                 	db	0
  6538  00FF25                     STR_38:
  6539  00FF25  52                 	db	82	;'R'
  6540  00FF26  65                 	db	101	;'e'
  6541  00FF27  62                 	db	98	;'b'
  6542  00FF28  6F                 	db	111	;'o'
  6543  00FF29  6F                 	db	111	;'o'
  6544  00FF2A  74                 	db	116	;'t'
  6545  00FF2B  69                 	db	105	;'i'
  6546  00FF2C  6E                 	db	110	;'n'
  6547  00FF2D  67                 	db	103	;'g'
  6548  00FF2E  2E                 	db	46
  6549  00FF2F  2E                 	db	46
  6550  00FF30  2E                 	db	46
  6551  00FF31  00                 	db	0
  6552  00FF32                     STR_48:
  6553  00FF32  4E                 	db	78	;'N'
  6554  00FF33  6F                 	db	111	;'o'
  6555  00FF34  74                 	db	116	;'t'
  6556  00FF35  65                 	db	101	;'e'
  6557  00FF36  20                 	db	32
  6558  00FF37  4C                 	db	76	;'L'
  6559  00FF38  65                 	db	101	;'e'
  6560  00FF39  6E                 	db	110	;'n'
  6561  00FF3A  67                 	db	103	;'g'
  6562  00FF3B  74                 	db	116	;'t'
  6563  00FF3C  68                 	db	104	;'h'
  6564  00FF3D  3A                 	db	58	;':'
  6565  00FF3E  00                 	db	0
  6566  00FF3F                     STR_65:
  6567  00FF3F  53                 	db	83	;'S'
  6568  00FF40  6B                 	db	107	;'k'
  6569  00FF41  69                 	db	105	;'i'
  6570  00FF42  70                 	db	112	;'p'
  6571  00FF43  20                 	db	32
  6572  00FF44  46                 	db	70	;'F'
  6573  00FF45  2F                 	db	47
  6574  00FF46  4C                 	db	76	;'L'
  6575  00FF47  20                 	db	32
  6576  00FF48  4F                 	db	79	;'O'
  6577  00FF49  46                 	db	70	;'F'
  6578  00FF4A  46                 	db	70	;'F'
  6579  00FF4B  00                 	db	0
  6580  00FF4C                     STR_34:
  6581  00FF4C  50                 	db	80	;'P'
  6582  00FF4D  72                 	db	114	;'r'
  6583  00FF4E  6F                 	db	111	;'o'
  6584  00FF4F  67                 	db	103	;'g'
  6585  00FF50  72                 	db	114	;'r'
  6586  00FF51  61                 	db	97	;'a'
  6587  00FF52  6D                 	db	109	;'m'
  6588  00FF53  20                 	db	32
  6589  00FF54  23                 	db	35
  6590  00FF55  3A                 	db	58	;':'
  6591  00FF56  20                 	db	32
  6592  00FF57  00                 	db	0
  6593  00FF58                     STR_24:
  6594  00FF58  45                 	db	69	;'E'
  6595  00FF59  6E                 	db	110	;'n'
  6596  00FF5A  74                 	db	116	;'t'
  6597  00FF5B  65                 	db	101	;'e'
  6598  00FF5C  72                 	db	114	;'r'
  6599  00FF5D  20                 	db	32
  6600  00FF5E  4D                 	db	77	;'M'
  6601  00FF5F  6F                 	db	111	;'o'
  6602  00FF60  64                 	db	100	;'d'
  6603  00FF61  65                 	db	101	;'e'
  6604  00FF62  3A                 	db	58	;':'
  6605  00FF63  00                 	db	0
  6606  00FF64                     STR_58:
  6607  00FF64  55                 	db	85	;'U'
  6608  00FF65  4E                 	db	78	;'N'
  6609  00FF66  4C                 	db	76	;'L'
  6610  00FF67  41                 	db	65	;'A'
  6611  00FF68  54                 	db	84	;'T'
  6612  00FF69  43                 	db	67	;'C'
  6613  00FF6A  48                 	db	72	;'H'
  6614  00FF6B  20                 	db	32
  6615  00FF6C  41                 	db	65	;'A'
  6616  00FF6D  4C                 	db	76	;'L'
  6617  00FF6E  4C                 	db	76	;'L'
  6618  00FF6F  00                 	db	0
  6619  00FF70                     STR_66:
  6620  00FF70  53                 	db	83	;'S'
  6621  00FF71  6B                 	db	107	;'k'
  6622  00FF72  69                 	db	105	;'i'
  6623  00FF73  70                 	db	112	;'p'
  6624  00FF74  20                 	db	32
  6625  00FF75  46                 	db	70	;'F'
  6626  00FF76  2F                 	db	47
  6627  00FF77  4C                 	db	76	;'L'
  6628  00FF78  20                 	db	32
  6629  00FF79  4F                 	db	79	;'O'
  6630  00FF7A  4E                 	db	78	;'N'
  6631  00FF7B  00                 	db	0
  6632  00FF7C                     STR_68:
  6633  00FF7C  46                 	db	70	;'F'
  6634  00FF7D  49                 	db	73	;'I'
  6635  00FF7E  4E                 	db	78	;'N'
  6636  00FF7F  49                 	db	73	;'I'
  6637  00FF80  53                 	db	83	;'S'
  6638  00FF81  48                 	db	72	;'H'
  6639  00FF82  20                 	db	32
  6640  00FF83  4C                 	db	76	;'L'
  6641  00FF84  41                 	db	65	;'A'
  6642  00FF85  53                 	db	83	;'S'
  6643  00FF86  54                 	db	84	;'T'
  6644  00FF87  00                 	db	0
  6645  00FF88                     STR_14:
  6646  00FF88  20                 	db	32
  6647  00FF89  50                 	db	80	;'P'
  6648  00FF8A  49                 	db	73	;'I'
  6649  00FF8B  54                 	db	84	;'T'
  6650  00FF8C  43                 	db	67	;'C'
  6651  00FF8D  48                 	db	72	;'H'
  6652  00FF8E  42                 	db	66	;'B'
  6653  00FF8F  45                 	db	69	;'E'
  6654  00FF90  4E                 	db	78	;'N'
  6655  00FF91  44                 	db	68	;'D'
  6656  00FF92  00                 	db	0
  6657  00FF93                     STR_15:
  6658  00FF93  20                 	db	32
  6659  00FF94  4D                 	db	77	;'M'
  6660  00FF95  4F                 	db	79	;'O'
  6661  00FF96  44                 	db	68	;'D'
  6662  00FF97  2E                 	db	46
  6663  00FF98  57                 	db	87	;'W'
  6664  00FF99  48                 	db	72	;'H'
  6665  00FF9A  45                 	db	69	;'E'
  6666  00FF9B  45                 	db	69	;'E'
  6667  00FF9C  4C                 	db	76	;'L'
  6668  00FF9D  00                 	db	0
  6669  00FF9E                     STR_13:
  6670  00FF9E  20                 	db	32
  6671  00FF9F  20                 	db	32
  6672  00FFA0  56                 	db	86	;'V'
  6673  00FFA1  45                 	db	69	;'E'
  6674  00FFA2  4C                 	db	76	;'L'
  6675  00FFA3  4F                 	db	79	;'O'
  6676  00FFA4  43                 	db	67	;'C'
  6677  00FFA5  49                 	db	73	;'I'
  6678  00FFA6  54                 	db	84	;'T'
  6679  00FFA7  59                 	db	89	;'Y'
  6680  00FFA8  00                 	db	0
  6681  00FFA9                     STR_67:
  6682  00FFA9  49                 	db	73	;'I'
  6683  00FFAA  4D                 	db	77	;'M'
  6684  00FFAB  4D                 	db	77	;'M'
  6685  00FFAC  45                 	db	69	;'E'
  6686  00FFAD  44                 	db	68	;'D'
  6687  00FFAE  49                 	db	73	;'I'
  6688  00FFAF  41                 	db	65	;'A'
  6689  00FFB0  54                 	db	84	;'T'
  6690  00FFB1  45                 	db	69	;'E'
  6691  00FFB2  00                 	db	0
  6692  00FFB3                     STR_36:
  6693  00FFB3  4C                 	db	76	;'L'
  6694  00FFB4  6F                 	db	111	;'o'
  6695  00FFB5  61                 	db	97	;'a'
  6696  00FFB6  64                 	db	100	;'d'
  6697  00FFB7  20                 	db	32
  6698  00FFB8  23                 	db	35
  6699  00FFB9  3A                 	db	58	;':'
  6700  00FFBA  00                 	db	0
  6701  00FFBB                     STR_35:
  6702  00FFBB  53                 	db	83	;'S'
  6703  00FFBC  61                 	db	97	;'a'
  6704  00FFBD  76                 	db	118	;'v'
  6705  00FFBE  65                 	db	101	;'e'
  6706  00FFBF  20                 	db	32
  6707  00FFC0  23                 	db	35
  6708  00FFC1  3A                 	db	58	;':'
  6709  00FFC2  00                 	db	0
  6710  00FFC3                     STR_20:
  6711  00FFC3  53                 	db	83	;'S'
  6712  00FFC4  65                 	db	101	;'e'
  6713  00FFC5  74                 	db	116	;'t'
  6714  00FFC6  21                 	db	33
  6715  00FFC7  00                 	db	0
  6716  00FFC8                     STR_61:
  6717  00FFC8  20                 	db	32
  6718  00FFC9  4F                 	db	79	;'O'
  6719  00FFCA  6E                 	db	110	;'n'
  6720  00FFCB  45                 	db	69	;'E'
  6721  00FFCC  00                 	db	0
  6722  00FFCD                     STR_41:
  6723  00FFCD  41                 	db	65	;'A'
  6724  00FFCE  6F                 	db	111	;'o'
  6725  00FFCF  46                 	db	70	;'F'
  6726  00FFD0  46                 	db	70	;'F'
  6727  00FFD1  00                 	db	0
  6728  00FFD2                     STR_43:
  6729  00FFD2  20                 	db	32
  6730  00FFD3  41                 	db	65	;'A'
  6731  00FFD4  72                 	db	114	;'r'
  6732  00FFD5  50                 	db	80	;'P'
  6733  00FFD6  00                 	db	0
  6734  00FFD7                     STR_8:
  6735  00FFD7  74                 	db	116	;'t'
  6736  00FFD8  45                 	db	69	;'E'
  6737  00FFD9  53                 	db	83	;'S'
  6738  00FFDA  74                 	db	116	;'t'
  6739  00FFDB  00                 	db	0
  6740  00FFDC                     STR_5:
  6741  00FFDC  20                 	db	32
  6742  00FFDD  6F                 	db	111	;'o'
  6743  00FFDE  46                 	db	70	;'F'
  6744  00FFDF  46                 	db	70	;'F'
  6745  00FFE0  00                 	db	0
  6746  00FFE1                     STR_2:
  6747  00FFE1  20                 	db	32
  6748  00FFE2  64                 	db	100	;'d'
  6749  00FFE3  45                 	db	69	;'E'
  6750  00FFE4  4C                 	db	76	;'L'
  6751  00FFE5  00                 	db	0
  6752  00FFE6                     STR_1:
  6753  00FFE6  48                 	db	72	;'H'
  6754  00FFE7  6F                 	db	111	;'o'
  6755  00FFE8  4C                 	db	76	;'L'
  6756  00FFE9  64                 	db	100	;'d'
  6757  00FFEA  00                 	db	0
  6758  00FFEB                     STR_6:
  6759  00FFEB  72                 	db	114	;'r'
  6760  00FFEC  41                 	db	65	;'A'
  6761  00FFED  6E                 	db	110	;'n'
  6762  00FFEE  64                 	db	100	;'d'
  6763  00FFEF  00                 	db	0
  6764  00FFF0                     STR_4:
  6765  00FFF0  41                 	db	65	;'A'
  6766  00FFF1  75                 	db	117	;'u'
  6767  00FFF2  74                 	db	116	;'t'
  6768  00FFF3  6F                 	db	111	;'o'
  6769  00FFF4  00                 	db	0
  6770  00FFF5                     STR_7:
  6771  00FFF5  72                 	db	114	;'r'
  6772  00FFF6  53                 	db	83	;'S'
  6773  00FFF7  45                 	db	69	;'E'
  6774  00FFF8  74                 	db	116	;'t'
  6775  00FFF9  00                 	db	0
  6776  00FFFA                     STR_3:
  6777  00FFFA  4C                 	db	76	;'L'
  6778  00FFFB  61                 	db	97	;'a'
  6779  00FFFC  53                 	db	83	;'S'
  6780  00FFFD  74                 	db	116	;'t'
  6781  00FFFE  00                 	db	0
  6782  0000                     
  6783                           ; #config settings
  6784  00FFFF  00                 	db	0	; dummy byte at the end
  6785  0000                     
  6786                           	psect	cinit
  6787  006BD6                     __pcinit:
  6788                           	opt stack 0
  6789  006BD6                     start_initialization:
  6790                           	opt stack 0
  6791  006BD6                     __initialization:
  6792                           	opt stack 0
  6793                           
  6794                           ; Initialize objects allocated to BANK3 (105 bytes)
  6795                           ; load TBLPTR registers with __pidataBANK3
  6796  006BD6  0EBE               	movlw	low __pidataBANK3
  6797  006BD8  6EF6               	movwf	tblptrl,c
  6798  006BDA  0E8D               	movlw	high __pidataBANK3
  6799  006BDC  6EF7               	movwf	tblptrh,c
  6800  006BDE  0E00               	movlw	low (__pidataBANK3 shr (0+16))
  6801  006BE0  6EF8               	movwf	tblptru,c
  6802  006BE2  EE03  F000         	lfsr	0,__pdataBANK3
  6803  006BE6  EE20 F069          	lfsr	2,105
  6804  006BEA                     copy_data0:
  6805  006BEA  0009               	tblrd		*+
  6806  006BEC  CFF5 FFEE          	movff	tablat,postinc0
  6807  006BF0  50DD               	movf	postdec2,w,c
  6808  006BF2  50D9               	movf	fsr2l,w,c
  6809  006BF4  E1FA               	bnz	copy_data0
  6810                           
  6811                           ; Initialize objects allocated to BANK2 (93 bytes)
  6812                           ; load TBLPTR registers with __pidataBANK2
  6813  006BF6  0E7A               	movlw	low __pidataBANK2
  6814  006BF8  6EF6               	movwf	tblptrl,c
  6815  006BFA  0E90               	movlw	high __pidataBANK2
  6816  006BFC  6EF7               	movwf	tblptrh,c
  6817  006BFE  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  6818  006C00  6EF8               	movwf	tblptru,c
  6819  006C02  EE02  F088         	lfsr	0,__pdataBANK2
  6820  006C06  EE20 F05D          	lfsr	2,93
  6821  006C0A                     copy_data1:
  6822  006C0A  0009               	tblrd		*+
  6823  006C0C  CFF5 FFEE          	movff	tablat,postinc0
  6824  006C10  50DD               	movf	postdec2,w,c
  6825  006C12  50D9               	movf	fsr2l,w,c
  6826  006C14  E1FA               	bnz	copy_data1
  6827                           
  6828                           ; Initialize objects allocated to BANK1 (25 bytes)
  6829                           ; load TBLPTR registers with __pidataBANK1
  6830  006C16  0E3C               	movlw	low __pidataBANK1
  6831  006C18  6EF6               	movwf	tblptrl,c
  6832  006C1A  0E99               	movlw	high __pidataBANK1
  6833  006C1C  6EF7               	movwf	tblptrh,c
  6834  006C1E  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  6835  006C20  6EF8               	movwf	tblptru,c
  6836  006C22  EE01  F0E7         	lfsr	0,__pdataBANK1
  6837  006C26  EE20 F019          	lfsr	2,25
  6838  006C2A                     copy_data2:
  6839  006C2A  0009               	tblrd		*+
  6840  006C2C  CFF5 FFEE          	movff	tablat,postinc0
  6841  006C30  50DD               	movf	postdec2,w,c
  6842  006C32  50D9               	movf	fsr2l,w,c
  6843  006C34  E1FA               	bnz	copy_data2
  6844                           
  6845                           ; Initialize objects allocated to BANK0 (11 bytes)
  6846                           ; load TBLPTR registers with __pidataBANK0
  6847  006C36  0ED4               	movlw	low __pidataBANK0
  6848  006C38  6EF6               	movwf	tblptrl,c
  6849  006C3A  0E99               	movlw	high __pidataBANK0
  6850  006C3C  6EF7               	movwf	tblptrh,c
  6851  006C3E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  6852  006C40  6EF8               	movwf	tblptru,c
  6853  006C42  EE00  F0F5         	lfsr	0,__pdataBANK0
  6854  006C46  EE20 F00B          	lfsr	2,11
  6855  006C4A                     copy_data3:
  6856  006C4A  0009               	tblrd		*+
  6857  006C4C  CFF5 FFEE          	movff	tablat,postinc0
  6858  006C50  50DD               	movf	postdec2,w,c
  6859  006C52  50D9               	movf	fsr2l,w,c
  6860  006C54  E1FA               	bnz	copy_data3
  6861                           
  6862                           ; Initialize objects allocated to COMRAM (8 bytes)
  6863                           ; load TBLPTR registers with __pidataCOMRAM
  6864  006C56  0EDF               	movlw	low __pidataCOMRAM
  6865  006C58  6EF6               	movwf	tblptrl,c
  6866  006C5A  0E99               	movlw	high __pidataCOMRAM
  6867  006C5C  6EF7               	movwf	tblptrh,c
  6868  006C5E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  6869  006C60  6EF8               	movwf	tblptru,c
  6870  006C62  EE00  F04B         	lfsr	0,__pdataCOMRAM
  6871  006C66  EE20 F008          	lfsr	2,8
  6872  006C6A                     copy_data4:
  6873  006C6A  0009               	tblrd		*+
  6874  006C6C  CFF5 FFEE          	movff	tablat,postinc0
  6875  006C70  50DD               	movf	postdec2,w,c
  6876  006C72  50D9               	movf	fsr2l,w,c
  6877  006C74  E1FA               	bnz	copy_data4
  6878                           
  6879                           ; Clear objects allocated to BANK3 (32 bytes)
  6880  006C76  EE03  F069         	lfsr	0,__pbssBANK3
  6881  006C7A  0E20               	movlw	32
  6882  006C7C                     clear_0:
  6883  006C7C  6AEE               	clrf	postinc0,c
  6884  006C7E  06E8               	decf	wreg,f,c
  6885  006C80  E1FD               	bnz	clear_0
  6886                           
  6887                           ; Clear objects allocated to BANK2 (136 bytes)
  6888  006C82  EE02  F000         	lfsr	0,__pbssBANK2
  6889  006C86  0E88               	movlw	136
  6890  006C88                     clear_1:
  6891  006C88  6AEE               	clrf	postinc0,c
  6892  006C8A  06E8               	decf	wreg,f,c
  6893  006C8C  E1FD               	bnz	clear_1
  6894                           
  6895                           ; Clear objects allocated to BANK1 (151 bytes)
  6896  006C8E  EE01  F000         	lfsr	0,__pbssBANK1
  6897  006C92  0E97               	movlw	151
  6898  006C94                     clear_2:
  6899  006C94  6AEE               	clrf	postinc0,c
  6900  006C96  06E8               	decf	wreg,f,c
  6901  006C98  E1FD               	bnz	clear_2
  6902                           
  6903                           ; Clear objects allocated to BANK0 (41 bytes)
  6904  006C9A  EE00  F0CC         	lfsr	0,__pbssBANK0
  6905  006C9E  0E29               	movlw	41
  6906  006CA0                     clear_3:
  6907  006CA0  6AEE               	clrf	postinc0,c
  6908  006CA2  06E8               	decf	wreg,f,c
  6909  006CA4  E1FD               	bnz	clear_3
  6910                           
  6911                           ; Clear objects allocated to BITCOMRAM (6 bytes)
  6912  006CA6  6A06               	clrf	((__pbitbssCOMRAM/(0+8)+5))& (0+255),c
  6913  006CA8  6A05               	clrf	((__pbitbssCOMRAM/(0+8)+4))& (0+255),c
  6914  006CAA  6A04               	clrf	((__pbitbssCOMRAM/(0+8)+3))& (0+255),c
  6915  006CAC  6A03               	clrf	((__pbitbssCOMRAM/(0+8)+2))& (0+255),c
  6916  006CAE  6A02               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
  6917  006CB0  6A01               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  6918                           
  6919                           ; Clear objects allocated to COMRAM (21 bytes)
  6920  006CB2  EE00  F02A         	lfsr	0,__pbssCOMRAM
  6921  006CB6  0E15               	movlw	21
  6922  006CB8                     clear_4:
  6923  006CB8  6AEE               	clrf	postinc0,c
  6924  006CBA  06E8               	decf	wreg,f,c
  6925  006CBC  E1FD               	bnz	clear_4
  6926  006CBE                     end_of_initialization:
  6927                           	opt stack 0
  6928  006CBE                     __end_of__initialization:
  6929                           	opt stack 0
  6930  006CBE  0E00               	movlw	low (__Lmediumconst shr (0+16))
  6931  006CC0  6EF8               	movwf	tblptru,c
  6932  006CC2  0100               	movlb	0
  6933  006CC4  EF71  F035         	goto	_main	;jump to C main() function
  6934                           tblptru	equ	0xFF8
  6935                           tblptrh	equ	0xFF7
  6936                           tblptrl	equ	0xFF6
  6937                           tablat	equ	0xFF5
  6938                           postinc0	equ	0xFEE
  6939                           wreg	equ	0xFE8
  6940                           postdec2	equ	0xFDD
  6941                           fsr2l	equ	0xFD9
  6942                           
  6943                           	psect	bitbssCOMRAM
  6944  000008                     __pbitbssCOMRAM:
  6945                           	opt stack 0
  6946  000008                     int2string@isNegative:
  6947                           	opt stack 0
  6948  000008                     	ds	1
  6949  000009                     doTheUnLatch@once:
  6950                           	opt stack 0
  6951  000009                     	ds	1
  6952  00000A                     keyboardTranspose@keyPress:
  6953                           	opt stack 0
  6954  00000A                     	ds	1
  6955  00000B                     _CONTROL_MODE:
  6956                           	opt stack 0
  6957  00000B                     	ds	1
  6958  00000C                     _DRUM_MODE:
  6959                           	opt stack 0
  6960  00000C                     	ds	1
  6961  00000D                     _DISPLAY_STEP_NUMBER:
  6962                           	opt stack 0
  6963  00000D                     	ds	1
  6964  00000E                     _flag2:
  6965                           	opt stack 0
  6966  00000E                     	ds	1
  6967  00000F                     _flag1:
  6968                           	opt stack 0
  6969  00000F                     	ds	1
  6970  000010                     _note_off_was_sent:
  6971                           	opt stack 0
  6972  000010                     	ds	1
  6973  000011                     _octave_overflow:
  6974                           	opt stack 0
  6975  000011                     	ds	1
  6976  000012                     _overflow:
  6977                           	opt stack 0
  6978  000012                     	ds	1
  6979  000013                     _suppress_note_off:
  6980                           	opt stack 0
  6981  000013                     	ds	1
  6982  000014                     _suppress_note_on:
  6983                           	opt stack 0
  6984  000014                     	ds	1
  6985  000015                     _finishLastNote:
  6986                           	opt stack 0
  6987  000015                     	ds	1
  6988  000016                     _LAST_NOTE_MODE_RESET:
  6989                           	opt stack 0
  6990  000016                     	ds	1
  6991  000017                     _LAST_NOTE_MODE_TRANSPOSE:
  6992                           	opt stack 0
  6993  000017                     	ds	1
  6994  000018                     _LAST_NOTE_MODE_KEY_RELEASE:
  6995                           	opt stack 0
  6996  000018                     	ds	1
  6997  000019                     _LAST_NOTE_MODE_KEY_PRESS:
  6998                           	opt stack 0
  6999  000019                     	ds	1
  7000  00001A                     _lastNoteMode:
  7001                           	opt stack 0
  7002  00001A                     	ds	1
  7003  00001B                     _skipFirstLast:
  7004                           	opt stack 0
  7005  00001B                     	ds	1
  7006  00001C                     _AUTO_RANDOMIZE:
  7007                           	opt stack 0
  7008  00001C                     	ds	1
  7009  00001D                     _latch_was_pressed:
  7010                           	opt stack 0
  7011  00001D                     	ds	1
  7012  00001E                     _AUTO_LATCH:
  7013                           	opt stack 0
  7014  00001E                     	ds	1
  7015  00001F                     _UN_LATCH_MODE:
  7016                           	opt stack 0
  7017  00001F                     	ds	1
  7018  000020                     _LATCH:
  7019                           	opt stack 0
  7020  000020                     	ds	1
  7021  000021                     _RESET_ON_KEY_RELEASE:
  7022                           	opt stack 0
  7023  000021                     	ds	1
  7024  000022                     _RESET_ON_KEY_PRESS:
  7025                           	opt stack 0
  7026  000022                     	ds	1
  7027  000023                     _ARPEGGIO_ON:
  7028                           	opt stack 0
  7029  000023                     	ds	1
  7030  000024                     _SORT_DIRECTION:
  7031                           	opt stack 0
  7032  000024                     	ds	1
  7033  000025                     _TRANSPOSE_MODE:
  7034                           	opt stack 0
  7035  000025                     	ds	1
  7036  000026                     _print_row_2_once:
  7037                           	opt stack 0
  7038  000026                     	ds	1
  7039  000027                     _lcd_print_once:
  7040                           	opt stack 0
  7041  000027                     	ds	1
  7042  000028                     _which_functions_are_unblocked:
  7043                           	opt stack 0
  7044  000028                     	ds	1
  7045  000029                     _encoder_click:
  7046                           	opt stack 0
  7047  000029                     	ds	1
  7048  00002A                     _encoderPolarity:
  7049                           	opt stack 0
  7050  00002A                     	ds	1
  7051  00002B                     _encoderB:
  7052                           	opt stack 0
  7053  00002B                     	ds	1
  7054  00002C                     _encoderA:
  7055                           	opt stack 0
  7056  00002C                     	ds	1
  7057  00002D                     _POT_MODE:
  7058                           	opt stack 0
  7059  00002D                     	ds	1
  7060  00002E                     _FIRST_READING:
  7061                           	opt stack 0
  7062  00002E                     	ds	1
  7063  00002F                     _ON_OFF:
  7064                           	opt stack 0
  7065  00002F                     	ds	1
  7066  000030                     _light_decimal_points:
  7067                           	opt stack 0
  7068  000030                     	ds	1
  7069  000031                     _CONTROL_CHANGE_IS_BEING_SENT:
  7070                           	opt stack 0
  7071  000031                     	ds	1
  7072  000032                     _ARPEGGIO_IS_PLAYING:
  7073                           	opt stack 0
  7074  000032                     	ds	1
  7075                           tblptru	equ	0xFF8
  7076                           tblptrh	equ	0xFF7
  7077                           tblptrl	equ	0xFF6
  7078                           tablat	equ	0xFF5
  7079                           postinc0	equ	0xFEE
  7080                           wreg	equ	0xFE8
  7081                           postdec2	equ	0xFDD
  7082                           fsr2l	equ	0xFD9
  7083                           
  7084                           	psect	bssCOMRAM
  7085  00002A                     __pbssCOMRAM:
  7086                           	opt stack 0
  7087  00002A                     _arpeggioPtr:
  7088                           	opt stack 0
  7089  00002A                     	ds	2
  7090  00002C                     key_press_release_note_off@temp:
  7091                           	opt stack 0
  7092  00002C                     	ds	1
  7093  00002D                     _toggle_state:
  7094                           	opt stack 0
  7095  00002D                     	ds	1
  7096  00002E                     _TIMER_OVERFLOWS:
  7097                           	opt stack 0
  7098  00002E                     	ds	1
  7099  00002F                     _NUM_NOTES_PRESSED:
  7100                           	opt stack 0
  7101  00002F                     	ds	1
  7102  000030                     _parallel:
  7103                           	opt stack 0
  7104  000030                     	ds	1
  7105  000031                     _stored_octave:
  7106                           	opt stack 0
  7107  000031                     	ds	1
  7108  000032                     _which_octave:
  7109                           	opt stack 0
  7110  000032                     	ds	1
  7111  000033                     _which_note:
  7112                           	opt stack 0
  7113  000033                     	ds	1
  7114  000034                     _startingDirection:
  7115                           	opt stack 0
  7116  000034                     	ds	1
  7117  000035                     _ARPEGGIO_TYPE:
  7118                           	opt stack 0
  7119  000035                     	ds	1
  7120  000036                     _encoder_direction:
  7121                           	opt stack 0
  7122  000036                     	ds	1
  7123  000037                     _drum:
  7124                           	opt stack 0
  7125  000037                     	ds	1
  7126  000038                     _drum_button_state_last:
  7127                           	opt stack 0
  7128  000038                     	ds	1
  7129  000039                     _drum_button_state_now:
  7130                           	opt stack 0
  7131  000039                     	ds	1
  7132  00003A                     _DIGIT_MODE:
  7133                           	opt stack 0
  7134  00003A                     	ds	1
  7135  00003B                     _semitone:
  7136                           	opt stack 0
  7137  00003B                     	ds	1
  7138  00003C                     _noteNumber:
  7139                           	opt stack 0
  7140  00003C                     	ds	1
  7141  00003D                     _statusByte:
  7142                           	opt stack 0
  7143  00003D                     	ds	1
  7144  00003E                     _channel:
  7145                           	opt stack 0
  7146  00003E                     	ds	1
  7147                           tblptru	equ	0xFF8
  7148                           tblptrh	equ	0xFF7
  7149                           tblptrl	equ	0xFF6
  7150                           tablat	equ	0xFF5
  7151                           postinc0	equ	0xFEE
  7152                           wreg	equ	0xFE8
  7153                           postdec2	equ	0xFDD
  7154                           fsr2l	equ	0xFD9
  7155                           
  7156                           	psect	dataCOMRAM
  7157  00004B                     __pdataCOMRAM:
  7158                           	opt stack 0
  7159  00004B                     _number_to_display:
  7160                           	opt stack 0
  7161  00004B                     	ds	2
  7162  00004D                     _NOTE_LENGTH_PULSES:
  7163                           	opt stack 0
  7164  00004D                     	ds	1
  7165  00004E                     _OCTAVES:
  7166                           	opt stack 0
  7167  00004E                     	ds	1
  7168  00004F                     _which_screen:
  7169                           	opt stack 0
  7170  00004F                     	ds	1
  7171  000050                     _octave:
  7172                           	opt stack 0
  7173  000050                     	ds	1
  7174  000051                     _velocity:
  7175                           	opt stack 0
  7176  000051                     	ds	1
  7177  000052                     _drumchannel:
  7178                           	opt stack 0
  7179  000052                     	ds	1
  7180                           tblptru	equ	0xFF8
  7181                           tblptrh	equ	0xFF7
  7182                           tblptrl	equ	0xFF6
  7183                           tablat	equ	0xFF5
  7184                           postinc0	equ	0xFEE
  7185                           wreg	equ	0xFE8
  7186                           postdec2	equ	0xFDD
  7187                           fsr2l	equ	0xFD9
  7188                           
  7189                           	psect	bssBANK0
  7190  0000CC                     __pbssBANK0:
  7191                           	opt stack 0
  7192  0000CC                     displayDigits@digit:
  7193                           	opt stack 0
  7194  0000CC                     	ds	4
  7195  0000D0                     _keyboard:
  7196                           	opt stack 0
  7197  0000D0                     	ds	4
  7198  0000D4                     _button_state_last:
  7199                           	opt stack 0
  7200  0000D4                     	ds	4
  7201  0000D8                     _button_state_now:
  7202                           	opt stack 0
  7203  0000D8                     	ds	4
  7204  0000DC                     _arpeggiatorLastNoteModeMenu:
  7205                           	opt stack 0
  7206  0000DC                     	ds	3
  7207  0000DF                     _arpeggiatorMenu:
  7208                           	opt stack 0
  7209  0000DF                     	ds	3
  7210  0000E2                     _savesMenu:
  7211                           	opt stack 0
  7212  0000E2                     	ds	3
  7213  0000E5                     _keyboardMenu:
  7214                           	opt stack 0
  7215  0000E5                     	ds	3
  7216  0000E8                     displayString@letter_counter:
  7217                           	opt stack 0
  7218  0000E8                     	ds	1
  7219  0000E9                     displayDigits@digit_counter:
  7220                           	opt stack 0
  7221  0000E9                     	ds	1
  7222  0000EA                     keyboardTranspose@semitone_temp:
  7223                           	opt stack 0
  7224  0000EA                     	ds	1
  7225  0000EB                     _ARRAY_INDEX:
  7226                           	opt stack 0
  7227  0000EB                     	ds	1
  7228  0000EC                     _last_note:
  7229                           	opt stack 0
  7230  0000EC                     	ds	1
  7231  0000ED                     _state:
  7232                           	opt stack 0
  7233  0000ED                     	ds	1
  7234  0000EE                     _DISPLAY_MODE:
  7235                           	opt stack 0
  7236  0000EE                     	ds	1
  7237  0000EF                     _which_seventh:
  7238                           	opt stack 0
  7239  0000EF                     	ds	1
  7240  0000F0                     _which_triad:
  7241                           	opt stack 0
  7242  0000F0                     	ds	1
  7243  0000F1                     _which_mode:
  7244                           	opt stack 0
  7245  0000F1                     	ds	1
  7246  0000F2                     _KEYBOARD_MODE:
  7247                           	opt stack 0
  7248  0000F2                     	ds	1
  7249  0000F3                     _patch_number:
  7250                           	opt stack 0
  7251  0000F3                     	ds	1
  7252  0000F4                     _GLOBAL_CC_NUMBER:
  7253                           	opt stack 0
  7254  0000F4                     	ds	1
  7255                           tblptru	equ	0xFF8
  7256                           tblptrh	equ	0xFF7
  7257                           tblptrl	equ	0xFF6
  7258                           tablat	equ	0xFF5
  7259                           postinc0	equ	0xFEE
  7260                           wreg	equ	0xFE8
  7261                           postdec2	equ	0xFDD
  7262                           fsr2l	equ	0xFD9
  7263                           
  7264                           	psect	dataBANK0
  7265  0000F5                     __pdataBANK0:
  7266                           	opt stack 0
  7267  0000F5                     _DRUM_CC:
  7268                           	opt stack 0
  7269  0000F5                     	ds	8
  7270  0000FD                     _iterator_focus:
  7271                           	opt stack 0
  7272  0000FD                     	ds	1
  7273  0000FE                     _ema_integer:
  7274                           	opt stack 0
  7275  0000FE                     	ds	1
  7276  0000FF                     _BPM:
  7277                           	opt stack 0
  7278  0000FF                     	ds	1
  7279                           tblptru	equ	0xFF8
  7280                           tblptrh	equ	0xFF7
  7281                           tblptrl	equ	0xFF6
  7282                           tablat	equ	0xFF5
  7283                           postinc0	equ	0xFEE
  7284                           wreg	equ	0xFE8
  7285                           postdec2	equ	0xFDD
  7286                           fsr2l	equ	0xFD9
  7287                           
  7288                           	psect	bssBANK1
  7289  000100                     __pbssBANK1:
  7290                           	opt stack 0
  7291  000100                     displayString@letter:
  7292                           	opt stack 0
  7293  000100                     	ds	4
  7294  000104                     _ema_alpha:
  7295                           	opt stack 0
  7296  000104                     	ds	4
  7297  000108                     _arpeggiatorLastNoteModeResetMenu:
  7298                           	opt stack 0
  7299  000108                     	ds	3
  7300  00010B                     _arpeggiatorLastNoteModeTransposeMenu:
  7301                           	opt stack 0
  7302  00010B                     	ds	3
  7303  00010E                     _arpeggiatorLastNoteModeKeyReleaseMenu:
  7304                           	opt stack 0
  7305  00010E                     	ds	3
  7306  000111                     _arpeggiatorLastNoteModeKeyPressMenu:
  7307                           	opt stack 0
  7308  000111                     	ds	3
  7309  000114                     _arpeggiatorSkipFirstLastMenu:
  7310                           	opt stack 0
  7311  000114                     	ds	3
  7312  000117                     _arpeggiatorRandomizeTypeMenu:
  7313                           	opt stack 0
  7314  000117                     	ds	3
  7315  00011A                     _arpeggiatorRandomizeSkipMenu:
  7316                           	opt stack 0
  7317  00011A                     	ds	3
  7318  00011D                     _arpeggiatorUnLatchModeMenu:
  7319                           	opt stack 0
  7320  00011D                     	ds	3
  7321  000120                     _arpeggiatorAutoLatchOnOffMenu:
  7322                           	opt stack 0
  7323  000120                     	ds	3
  7324  000123                     _arpeggiatorLatchOnOffMenu:
  7325                           	opt stack 0
  7326  000123                     	ds	3
  7327  000126                     _arpeggiatorLatchMenu:
  7328                           	opt stack 0
  7329  000126                     	ds	3
  7330  000129                     _arpeggiatorNoteLengthMenu:
  7331                           	opt stack 0
  7332  000129                     	ds	3
  7333  00012C                     _arpeggiatorTypeMenu:
  7334                           	opt stack 0
  7335  00012C                     	ds	3
  7336  00012F                     _arpeggiatorOctavesMenu:
  7337                           	opt stack 0
  7338  00012F                     	ds	3
  7339  000132                     _arpeggiatorTempoMenu:
  7340                           	opt stack 0
  7341  000132                     	ds	3
  7342  000135                     _arpeggiatorOnOffMenu:
  7343                           	opt stack 0
  7344  000135                     	ds	3
  7345  000138                     _encoderPolarityMenu:
  7346                           	opt stack 0
  7347  000138                     	ds	3
  7348  00013B                     _eepromMenu:
  7349                           	opt stack 0
  7350  00013B                     	ds	3
  7351  00013E                     _drumChannelMenu:
  7352                           	opt stack 0
  7353  00013E                     	ds	3
  7354  000141                     _mainChannelMenu:
  7355                           	opt stack 0
  7356  000141                     	ds	3
  7357  000144                     _programChangeMenu:
  7358                           	opt stack 0
  7359  000144                     	ds	3
  7360  000147                     _midiChannelMenu:
  7361                           	opt stack 0
  7362  000147                     	ds	3
  7363  00014A                     _joystickCCMenu:
  7364                           	opt stack 0
  7365  00014A                     	ds	3
  7366  00014D                     _slidepotsCCMenu:
  7367                           	opt stack 0
  7368  00014D                     	ds	3
  7369  000150                     _potsCCMenu:
  7370                           	opt stack 0
  7371  000150                     	ds	3
  7372  000153                     _potsAlphaMenu:
  7373                           	opt stack 0
  7374  000153                     	ds	3
  7375  000156                     _potsResoMenu:
  7376                           	opt stack 0
  7377  000156                     	ds	3
  7378  000159                     _potsMenu:
  7379                           	opt stack 0
  7380  000159                     	ds	3
  7381  00015C                     _drumCCMenu:
  7382                           	opt stack 0
  7383  00015C                     	ds	3
  7384  00015F                     _drumNNMenu:
  7385                           	opt stack 0
  7386  00015F                     	ds	3
  7387  000162                     _drumCCTypeMenu:
  7388                           	opt stack 0
  7389  000162                     	ds	3
  7390  000165                     _drumMenu:
  7391                           	opt stack 0
  7392  000165                     	ds	3
  7393  000168                     _transposeMenu:
  7394                           	opt stack 0
  7395  000168                     	ds	3
  7396  00016B                     _seventhMenu:
  7397                           	opt stack 0
  7398  00016B                     	ds	3
  7399  00016E                     _triadMenu:
  7400                           	opt stack 0
  7401  00016E                     	ds	3
  7402  000171                     _modeMenu:
  7403                           	opt stack 0
  7404  000171                     	ds	3
  7405  000174                     _mainMenu:
  7406                           	opt stack 0
  7407  000174                     	ds	3
  7408  000177                     displayDigits@number_to_display_temp:
  7409                           	opt stack 0
  7410  000177                     	ds	2
  7411  000179                     displayDigits@number_to_display_last:
  7412                           	opt stack 0
  7413  000179                     	ds	2
  7414  00017B                     _TIMER_PRELOAD:
  7415                           	opt stack 0
  7416  00017B                     	ds	2
  7417  00017D                     _last_octave:
  7418                           	opt stack 0
  7419  00017D                     	ds	1
  7420  00017E                     _encoder_state_last:
  7421                           	opt stack 0
  7422  00017E                     	ds	1
  7423  00017F                     _encoder_state_now:
  7424                           	opt stack 0
  7425  00017F                     	ds	1
  7426  000180                     _GLOBAL_CC_VALUE:
  7427                           	opt stack 0
  7428  000180                     	ds	1
  7429  000181                     _GLOBAL_STATUS_BYTE:
  7430                           	opt stack 0
  7431  000181                     	ds	1
  7432  000182                     _ARPEGGIO:
  7433                           	opt stack 0
  7434  000182                     	ds	16
  7435  000192                     _string2display:
  7436                           	opt stack 0
  7437  000192                     	ds	5
  7438                           tblptru	equ	0xFF8
  7439                           tblptrh	equ	0xFF7
  7440                           tblptrl	equ	0xFF6
  7441                           tablat	equ	0xFF5
  7442                           postinc0	equ	0xFEE
  7443                           wreg	equ	0xFE8
  7444                           postdec2	equ	0xFDD
  7445                           fsr2l	equ	0xFD9
  7446                           
  7447                           	psect	dataBANK1
  7448  0001E7                     __pdataBANK1:
  7449                           	opt stack 0
  7450  0001E7                     _DRUM_NOTE:
  7451                           	opt stack 0
  7452  0001E7                     	ds	8
  7453  0001EF                     _randx:
  7454                           	opt stack 0
  7455  0001EF                     	ds	4
  7456  0001F3                     _HYST_VAL:
  7457                           	opt stack 0
  7458  0001F3                     	ds	2
  7459  0001F5                     _PRESCALER:
  7460                           	opt stack 0
  7461  0001F5                     	ds	1
  7462  0001F6                     _PPQN:
  7463                           	opt stack 0
  7464  0001F6                     	ds	1
  7465  0001F7                     _command:
  7466                           	opt stack 0
  7467  0001F7                     	ds	1
  7468  0001F8                     _string_to_display:
  7469                           	opt stack 0
  7470  0001F8                     	ds	5
  7471  0001FD                     _major_triad:
  7472                           	opt stack 0
  7473  0001FD                     	ds	3
  7474                           tblptru	equ	0xFF8
  7475                           tblptrh	equ	0xFF7
  7476                           tblptrl	equ	0xFF6
  7477                           tablat	equ	0xFF5
  7478                           postinc0	equ	0xFEE
  7479                           wreg	equ	0xFE8
  7480                           postdec2	equ	0xFDD
  7481                           fsr2l	equ	0xFD9
  7482                           
  7483                           	psect	bssBANK2
  7484  000200                     __pbssBANK2:
  7485                           	opt stack 0
  7486  000200                     _potentiometer_filtered_last:
  7487                           	opt stack 0
  7488  000200                     	ds	32
  7489  000220                     _potentiometer_filtered_now:
  7490                           	opt stack 0
  7491  000220                     	ds	32
  7492  000240                     _ema_sum:
  7493                           	opt stack 0
  7494  000240                     	ds	32
  7495  000260                     readPotentiometers@count:
  7496                           	opt stack 0
  7497  000260                     	ds	4
  7498  000264                     _count_ISR:
  7499                           	opt stack 0
  7500  000264                     	ds	4
  7501  000268                     _ARPEGGIO_RANDOM:
  7502                           	opt stack 0
  7503  000268                     	ds	16
  7504  000278                     _ARPEGGIO_SORTED:
  7505                           	opt stack 0
  7506  000278                     	ds	16
  7507                           tblptru	equ	0xFF8
  7508                           tblptrh	equ	0xFF7
  7509                           tblptrl	equ	0xFF6
  7510                           tablat	equ	0xFF5
  7511                           postinc0	equ	0xFEE
  7512                           wreg	equ	0xFE8
  7513                           postdec2	equ	0xFDD
  7514                           fsr2l	equ	0xFD9
  7515                           
  7516                           	psect	dataBANK2
  7517  000288                     __pdataBANK2:
  7518                           	opt stack 0
  7519  000288                     _inputPotsArray:
  7520                           	opt stack 0
  7521  000288                     	ds	48
  7522  0002B8                     _NOTE_LENGTH_PULSES_ARRAY:
  7523                           	opt stack 0
  7524  0002B8                     	ds	12
  7525  0002C4                     _number_of_interrupts:
  7526                           	opt stack 0
  7527  0002C4                     	ds	4
  7528  0002C8                     _diminished_7th:
  7529                           	opt stack 0
  7530  0002C8                     	ds	4
  7531  0002CC                     _half_diminished_7th:
  7532                           	opt stack 0
  7533  0002CC                     	ds	4
  7534  0002D0                     _minor_7th:
  7535                           	opt stack 0
  7536  0002D0                     	ds	4
  7537  0002D4                     _major_7th:
  7538                           	opt stack 0
  7539  0002D4                     	ds	4
  7540  0002D8                     _dominant_7th:
  7541                           	opt stack 0
  7542  0002D8                     	ds	4
  7543  0002DC                     _diminished_triad:
  7544                           	opt stack 0
  7545  0002DC                     	ds	3
  7546  0002DF                     _augmented_triad:
  7547                           	opt stack 0
  7548  0002DF                     	ds	3
  7549  0002E2                     _minor_triad:
  7550                           	opt stack 0
  7551  0002E2                     	ds	3
  7552                           tblptru	equ	0xFF8
  7553                           tblptrh	equ	0xFF7
  7554                           tblptrl	equ	0xFF6
  7555                           tablat	equ	0xFF5
  7556                           postinc0	equ	0xFEE
  7557                           wreg	equ	0xFE8
  7558                           postdec2	equ	0xFDD
  7559                           fsr2l	equ	0xFD9
  7560                           
  7561                           	psect	bssBANK3
  7562  000369                     __pbssBANK3:
  7563                           	opt stack 0
  7564  000369                     _potentiometer_raw:
  7565                           	opt stack 0
  7566  000369                     	ds	32
  7567                           tblptru	equ	0xFF8
  7568                           tblptrh	equ	0xFF7
  7569                           tblptrl	equ	0xFF6
  7570                           tablat	equ	0xFF5
  7571                           postinc0	equ	0xFEE
  7572                           wreg	equ	0xFE8
  7573                           postdec2	equ	0xFDD
  7574                           fsr2l	equ	0xFD9
  7575                           
  7576                           	psect	dataBANK3
  7577  000300                     __pdataBANK3:
  7578                           	opt stack 0
  7579  000300                     _menuArray:
  7580                           	opt stack 0
  7581  000300                     	ds	105
  7582                           tblptru	equ	0xFF8
  7583                           tblptrh	equ	0xFF7
  7584                           tblptrl	equ	0xFF6
  7585                           tablat	equ	0xFF5
  7586                           postinc0	equ	0xFEE
  7587                           wreg	equ	0xFE8
  7588                           postdec2	equ	0xFDD
  7589                           fsr2l	equ	0xFD9
  7590                           
  7591                           	psect	cstackBANK2
  7592  0002E5                     __pcstackBANK2:
  7593                           	opt stack 0
  7594  0002E5                     selectSlotOnBoot@slot:
  7595                           	opt stack 0
  7596                           
  7597                           ; 1 bytes @ 0x0
  7598  0002E5                     	ds	1
  7599  0002E6                     ??_main:
  7600                           
  7601                           ; 1 bytes @ 0x1
  7602  0002E6                     	ds	1
  7603                           tblptru	equ	0xFF8
  7604                           tblptrh	equ	0xFF7
  7605                           tblptrl	equ	0xFF6
  7606                           tablat	equ	0xFF5
  7607                           postinc0	equ	0xFEE
  7608                           wreg	equ	0xFE8
  7609                           postdec2	equ	0xFDD
  7610                           fsr2l	equ	0xFD9
  7611                           
  7612                           	psect	cstackBANK1
  7613  000197                     __pcstackBANK1:
  7614                           	opt stack 0
  7615  000197                     _readPotentiometers$5907:
  7616                           	opt stack 0
  7617  000197                     loadFromEEPROM@to_load:
  7618                           	opt stack 0
  7619                           
  7620                           ; 75 bytes @ 0x0
  7621  000197                     	ds	4
  7622  00019B                     readPotentiometers@i_3434:
  7623                           	opt stack 0
  7624                           
  7625                           ; 1 bytes @ 0x4
  7626  00019B                     	ds	1
  7627  00019C                     readPotentiometers@i:
  7628                           	opt stack 0
  7629                           
  7630                           ; 1 bytes @ 0x5
  7631  00019C                     	ds	1
  7632  00019D                     readPotentiometers@i_3435:
  7633                           	opt stack 0
  7634                           
  7635                           ; 1 bytes @ 0x6
  7636  00019D                     	ds	1
  7637  00019E                     ??_analogInputs:
  7638                           
  7639                           ; 1 bytes @ 0x7
  7640  00019E                     	ds	68
  7641  0001E2                     loadFromEEPROM@baseAddress:
  7642                           	opt stack 0
  7643                           
  7644                           ; 2 bytes @ 0x4B
  7645  0001E2                     	ds	2
  7646  0001E4                     loadFromEEPROM@slotNumber:
  7647                           	opt stack 0
  7648                           
  7649                           ; 1 bytes @ 0x4D
  7650  0001E4                     	ds	1
  7651  0001E5                     loadFromEEPROM@byte_count:
  7652                           	opt stack 0
  7653                           
  7654                           ; 2 bytes @ 0x4E
  7655  0001E5                     	ds	2
  7656                           tblptru	equ	0xFF8
  7657                           tblptrh	equ	0xFF7
  7658                           tblptrl	equ	0xFF6
  7659                           tablat	equ	0xFF5
  7660                           postinc0	equ	0xFEE
  7661                           wreg	equ	0xFE8
  7662                           postdec2	equ	0xFDD
  7663                           fsr2l	equ	0xFD9
  7664                           
  7665                           	psect	cstackBANK0
  7666  000060                     __pcstackBANK0:
  7667                           	opt stack 0
  7668  000060                     ??_rotateArrayLeft:
  7669  000060                     ??_processEncoderBuxton:
  7670  000060                     ??_buttonInputsSerial:
  7671  000060                     ?_ADC_Read:
  7672                           	opt stack 0
  7673  000060                     ?___wmul:
  7674                           	opt stack 0
  7675  000060                     ?___aldiv:
  7676                           	opt stack 0
  7677  000060                     ?___xxtofl:
  7678                           	opt stack 0
  7679  000060                     Lcd_SetBit@data_bit:
  7680                           	opt stack 0
  7681  000060                     noteOffDrum@pitch:
  7682                           	opt stack 0
  7683  000060                     noteOnDrum@pitch:
  7684                           	opt stack 0
  7685  000060                     controlChange@controllerNumber:
  7686                           	opt stack 0
  7687  000060                     pitchBend@lowByte:
  7688                           	opt stack 0
  7689  000060                     programChange@data1:
  7690                           	opt stack 0
  7691  000060                     setControllerResolution@i:
  7692                           	opt stack 0
  7693  000060                     wait_one_pulse@mode:
  7694                           	opt stack 0
  7695  000060                     copy_array@i:
  7696                           	opt stack 0
  7697  000060                     printThisNumber@n:
  7698                           	opt stack 0
  7699  000060                     int2string@number:
  7700                           	opt stack 0
  7701  000060                     Read_b_eep@badd:
  7702                           	opt stack 0
  7703  000060                     Write_b_eep@badd:
  7704                           	opt stack 0
  7705  000060                     ___wmul@multiplier:
  7706                           	opt stack 0
  7707  000060                     srand@x:
  7708                           	opt stack 0
  7709  000060                     strcpy@to:
  7710                           	opt stack 0
  7711  000060                     ___aldiv@dividend:
  7712                           	opt stack 0
  7713  000060                     ___xxtofl@val:
  7714                           	opt stack 0
  7715                           
  7716                           ; 4 bytes @ 0x0
  7717  000060                     	ds	1
  7718  000061                     ??_Lcd_Cmd:
  7719  000061                     ??_playTriad:
  7720  000061                     ??_playSeventh:
  7721  000061                     Lcd_Print_Char@Lower_Nibble:
  7722                           	opt stack 0
  7723  000061                     noteOffDrum@velocity:
  7724                           	opt stack 0
  7725  000061                     noteOnDrum@velocity:
  7726                           	opt stack 0
  7727  000061                     controlChange@value:
  7728                           	opt stack 0
  7729  000061                     pitchBend@highByte:
  7730                           	opt stack 0
  7731  000061                     programChange@data2:
  7732                           	opt stack 0
  7733  000061                     playDiatonicTriadMajor@index:
  7734                           	opt stack 0
  7735  000061                     playDiatonicSeventhMajor@index:
  7736                           	opt stack 0
  7737  000061                     playDiatonicTriadMinor@index:
  7738                           	opt stack 0
  7739  000061                     playDiatonicSeventhMinor@index:
  7740                           	opt stack 0
  7741  000061                     findArrayIndex@pitch_of_key_release:
  7742                           	opt stack 0
  7743                           
  7744                           ; 1 bytes @ 0x1
  7745  000061                     	ds	1
  7746  000062                     ??_playDiatonicTriadMajor:
  7747  000062                     ??_playDiatonicTriadMinor:
  7748  000062                     ??_playDiatonicSeventhMajor:
  7749  000062                     ??_playDiatonicSeventhMinor:
  7750  000062                     ??_ADC_Read:
  7751  000062                     ??_int2string:
  7752  000062                     Lcd_Cmd@a:
  7753                           	opt stack 0
  7754  000062                     Lcd_Print_Char@Upper_Nibble:
  7755                           	opt stack 0
  7756  000062                     noteOffDrum@channel:
  7757                           	opt stack 0
  7758  000062                     noteOnDrum@channel:
  7759                           	opt stack 0
  7760  000062                     controlChange@channel:
  7761                           	opt stack 0
  7762  000062                     pitchBend@channel:
  7763                           	opt stack 0
  7764  000062                     programChange@channel:
  7765                           	opt stack 0
  7766  000062                     findArrayIndex@i:
  7767                           	opt stack 0
  7768  000062                     Write_b_eep@bdat:
  7769                           	opt stack 0
  7770  000062                     ___wmul@multiplicand:
  7771                           	opt stack 0
  7772  000062                     strcpy@from:
  7773                           	opt stack 0
  7774                           
  7775                           ; 2 bytes @ 0x2
  7776  000062                     	ds	1
  7777  000063                     ??_processPotentiometers:
  7778  000063                     ??_Lcd_Start:
  7779  000063                     Lcd_Set_Cursor@b:
  7780                           	opt stack 0
  7781  000063                     Lcd_Print_Char@data:
  7782                           	opt stack 0
  7783  000063                     Write_b_eep@GIE_BIT_VAL:
  7784                           	opt stack 0
  7785                           
  7786                           ; 1 bytes @ 0x3
  7787  000063                     	ds	1
  7788  000064                     ??___xxtofl:
  7789  000064                     Lcd_Set_Cursor@a:
  7790                           	opt stack 0
  7791  000064                     ADC_Read@adc_channel:
  7792                           	opt stack 0
  7793  000064                     buttonInputsSerial@i:
  7794                           	opt stack 0
  7795  000064                     Lcd_Start@i:
  7796                           	opt stack 0
  7797  000064                     Lcd_Print_Char@i:
  7798                           	opt stack 0
  7799  000064                     int2string@number_to_display_temp:
  7800                           	opt stack 0
  7801  000064                     ___wmul@product:
  7802                           	opt stack 0
  7803  000064                     strcpy@cp:
  7804                           	opt stack 0
  7805  000064                     ___aldiv@divisor:
  7806                           	opt stack 0
  7807  000064                     saveToEEPROM@to_save:
  7808                           	opt stack 0
  7809                           
  7810                           ; 75 bytes @ 0x4
  7811  000064                     	ds	1
  7812  000065                     Lcd_Set_Cursor@z:
  7813                           	opt stack 0
  7814  000065                     buttonInputsSerial@i_4479:
  7815                           	opt stack 0
  7816  000065                     playTriad@triad_p:
  7817                           	opt stack 0
  7818  000065                     playSeventh@seventh_p:
  7819                           	opt stack 0
  7820                           
  7821                           ; 2 bytes @ 0x5
  7822  000065                     	ds	1
  7823  000066                     ??_displayTest:
  7824  000066                     ??_initializeMenuArray:
  7825  000066                     Lcd_Set_Cursor@y:
  7826                           	opt stack 0
  7827  000066                     playDiatonicTriadMajor@i:
  7828                           	opt stack 0
  7829  000066                     playDiatonicSeventhMajor@i:
  7830                           	opt stack 0
  7831  000066                     playDiatonicTriadMinor@pitch:
  7832                           	opt stack 0
  7833  000066                     playDiatonicSeventhMinor@pitch:
  7834                           	opt stack 0
  7835  000066                     processPotentiometers@lowByte:
  7836                           	opt stack 0
  7837  000066                     Lcd_Print_Char@i_59:
  7838                           	opt stack 0
  7839                           
  7840                           ; 2 bytes @ 0x6
  7841  000066                     	ds	1
  7842  000067                     Lcd_Set_Cursor@temp:
  7843                           	opt stack 0
  7844  000067                     playTriad@i:
  7845                           	opt stack 0
  7846  000067                     playSeventh@i:
  7847                           	opt stack 0
  7848  000067                     playDiatonicTriadMajor@i_1713:
  7849                           	opt stack 0
  7850  000067                     playDiatonicSeventhMajor@i_1718:
  7851                           	opt stack 0
  7852  000067                     playDiatonicTriadMinor@i:
  7853                           	opt stack 0
  7854  000067                     playDiatonicSeventhMinor@i:
  7855                           	opt stack 0
  7856  000067                     initializeMenuArray@NumberOfElements:
  7857                           	opt stack 0
  7858  000067                     processPotentiometers@highByte:
  7859                           	opt stack 0
  7860  000067                     rotateArrayLeft@array_index:
  7861                           	opt stack 0
  7862                           
  7863                           ; 1 bytes @ 0x7
  7864  000067                     	ds	1
  7865  000068                     playTriad@i_1691:
  7866                           	opt stack 0
  7867  000068                     playSeventh@i_1696:
  7868                           	opt stack 0
  7869  000068                     playDiatonicTriadMajor@pitch:
  7870                           	opt stack 0
  7871  000068                     playDiatonicSeventhMajor@pitch:
  7872                           	opt stack 0
  7873  000068                     playDiatonicTriadMinor@i_1723:
  7874                           	opt stack 0
  7875  000068                     playDiatonicSeventhMinor@i_1728:
  7876                           	opt stack 0
  7877  000068                     initializeMenuArray@i:
  7878                           	opt stack 0
  7879  000068                     processPotentiometers@i:
  7880                           	opt stack 0
  7881  000068                     rotateArrayLeft@i:
  7882                           	opt stack 0
  7883  000068                     ___aldiv@counter:
  7884                           	opt stack 0
  7885  000068                     ___xxtofl@sign:
  7886                           	opt stack 0
  7887  000068                     Lcd_Print_String@a:
  7888                           	opt stack 0
  7889                           
  7890                           ; 2 bytes @ 0x8
  7891  000068                     	ds	1
  7892  000069                     ??_add_notes_to_arpeggio:
  7893  000069                     playTriad@pitch:
  7894                           	opt stack 0
  7895  000069                     playSeventh@pitch:
  7896                           	opt stack 0
  7897  000069                     delete_notes_from_arpeggio@pitch:
  7898                           	opt stack 0
  7899  000069                     ___aldiv@sign:
  7900                           	opt stack 0
  7901  000069                     ___xxtofl@exp:
  7902                           	opt stack 0
  7903                           
  7904                           ; 1 bytes @ 0x9
  7905  000069                     	ds	1
  7906  00006A                     ??_Lcd_Print_String:
  7907  00006A                     delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT:
  7908                           	opt stack 0
  7909  00006A                     ___aldiv@quotient:
  7910                           	opt stack 0
  7911  00006A                     ___xxtofl@arg:
  7912                           	opt stack 0
  7913                           
  7914                           ; 4 bytes @ 0xA
  7915  00006A                     	ds	2
  7916  00006C                     Lcd_Print_String@i:
  7917                           	opt stack 0
  7918                           
  7919                           ; 2 bytes @ 0xC
  7920  00006C                     	ds	2
  7921  00006E                     ??_exitFunction:
  7922  00006E                     ??_exitSave:
  7923  00006E                     ??_exitLoad:
  7924  00006E                     ??_eepromExit:
  7925  00006E                     ??_Function_G_3:
  7926  00006E                     ?___flmul:
  7927                           	opt stack 0
  7928  00006E                     ?_map:
  7929                           	opt stack 0
  7930  00006E                     map@x:
  7931                           	opt stack 0
  7932  00006E                     ___flmul@b:
  7933                           	opt stack 0
  7934                           
  7935                           ; 4 bytes @ 0xE
  7936  00006E                     	ds	1
  7937  00006F                     setControllerNumbers@array_index:
  7938                           	opt stack 0
  7939                           
  7940                           ; 1 bytes @ 0xF
  7941  00006F                     	ds	1
  7942  000070                     add_notes_to_arpeggio@pitch:
  7943                           	opt stack 0
  7944                           
  7945                           ; 1 bytes @ 0x10
  7946  000070                     	ds	1
  7947  000071                     ??_playThisNote:
  7948  000071                     playThisNotePentatonic@index:
  7949                           	opt stack 0
  7950  000071                     playThisNote8@index:
  7951                           	opt stack 0
  7952                           
  7953                           ; 1 bytes @ 0x11
  7954  000071                     	ds	1
  7955  000072                     ??_playThisNotePentatonic:
  7956  000072                     ??_playThisNote8:
  7957  000072                     map@in_min:
  7958                           	opt stack 0
  7959  000072                     ___flmul@a:
  7960                           	opt stack 0
  7961                           
  7962                           ; 4 bytes @ 0x12
  7963  000072                     	ds	3
  7964  000075                     playThisNote@pitch:
  7965                           	opt stack 0
  7966                           
  7967                           ; 1 bytes @ 0x15
  7968  000075                     	ds	1
  7969  000076                     ??___flmul:
  7970  000076                     playThisNotePentatonic@temp_pitch:
  7971                           	opt stack 0
  7972  000076                     keyboard_all_note_efficient@pitch:
  7973                           	opt stack 0
  7974  000076                     playThisNote8@pitch:
  7975                           	opt stack 0
  7976  000076                     map@in_max:
  7977                           	opt stack 0
  7978                           
  7979                           ; 4 bytes @ 0x16
  7980  000076                     	ds	1
  7981  000077                     keyboard_sharps_only_efficient@pitch:
  7982                           	opt stack 0
  7983  000077                     playThisNote8@temp_pitch:
  7984                           	opt stack 0
  7985                           
  7986                           ; 1 bytes @ 0x17
  7987  000077                     	ds	1
  7988  000078                     keyboard_sharps_only_efficient@index:
  7989                           	opt stack 0
  7990  000078                     playThisNote8@mode_p:
  7991                           	opt stack 0
  7992                           
  7993                           ; 2 bytes @ 0x18
  7994  000078                     	ds	2
  7995  00007A                     ??_doTheUnLatch:
  7996  00007A                     keyboard_eight_note_efficient@pitch:
  7997                           	opt stack 0
  7998  00007A                     ___flmul@sign:
  7999                           	opt stack 0
  8000  00007A                     map@out_min:
  8001                           	opt stack 0
  8002                           
  8003                           ; 4 bytes @ 0x1A
  8004  00007A                     	ds	1
  8005  00007B                     keyboard_eight_note_efficient@index:
  8006                           	opt stack 0
  8007  00007B                     ___flmul@aexp:
  8008                           	opt stack 0
  8009                           
  8010                           ; 1 bytes @ 0x1B
  8011  00007B                     	ds	1
  8012  00007C                     ___flmul@grs:
  8013                           	opt stack 0
  8014                           
  8015                           ; 4 bytes @ 0x1C
  8016  00007C                     	ds	2
  8017  00007E                     ??_processOctave:
  8018  00007E                     map@out_max:
  8019                           	opt stack 0
  8020                           
  8021                           ; 4 bytes @ 0x1E
  8022  00007E                     	ds	2
  8023  000080                     ___flmul@bexp:
  8024                           	opt stack 0
  8025                           
  8026                           ; 1 bytes @ 0x20
  8027  000080                     	ds	1
  8028  000081                     ___flmul@prod:
  8029                           	opt stack 0
  8030                           
  8031                           ; 4 bytes @ 0x21
  8032  000081                     	ds	1
  8033  000082                     ??_map:
  8034                           
  8035                           ; 1 bytes @ 0x22
  8036  000082                     	ds	3
  8037  000085                     ___flmul@temp:
  8038                           	opt stack 0
  8039                           
  8040                           ; 2 bytes @ 0x25
  8041  000085                     	ds	2
  8042  000087                     ?___fldiv:
  8043                           	opt stack 0
  8044  000087                     ___fldiv@b:
  8045                           	opt stack 0
  8046                           
  8047                           ; 4 bytes @ 0x27
  8048  000087                     	ds	4
  8049  00008B                     ___fldiv@a:
  8050                           	opt stack 0
  8051                           
  8052                           ; 4 bytes @ 0x2B
  8053  00008B                     	ds	4
  8054  00008F                     ??___fldiv:
  8055                           
  8056                           ; 1 bytes @ 0x2F
  8057  00008F                     	ds	4
  8058  000093                     ___fldiv@sign:
  8059                           	opt stack 0
  8060                           
  8061                           ; 1 bytes @ 0x33
  8062  000093                     	ds	1
  8063  000094                     ___fldiv@rem:
  8064                           	opt stack 0
  8065                           
  8066                           ; 4 bytes @ 0x34
  8067  000094                     	ds	4
  8068  000098                     ___fldiv@new_exp:
  8069                           	opt stack 0
  8070                           
  8071                           ; 2 bytes @ 0x38
  8072  000098                     	ds	2
  8073  00009A                     ___fldiv@grs:
  8074                           	opt stack 0
  8075                           
  8076                           ; 4 bytes @ 0x3A
  8077  00009A                     	ds	4
  8078  00009E                     ___fldiv@bexp:
  8079                           	opt stack 0
  8080                           
  8081                           ; 1 bytes @ 0x3E
  8082  00009E                     	ds	1
  8083  00009F                     ___fldiv@aexp:
  8084                           	opt stack 0
  8085                           
  8086                           ; 1 bytes @ 0x3F
  8087  00009F                     	ds	1
  8088  0000A0                     ?___flneg:
  8089                           	opt stack 0
  8090  0000A0                     ___flneg@f1:
  8091                           	opt stack 0
  8092                           
  8093                           ; 4 bytes @ 0x40
  8094  0000A0                     	ds	4
  8095  0000A4                     ?___fladd:
  8096                           	opt stack 0
  8097  0000A4                     ___fladd@b:
  8098                           	opt stack 0
  8099                           
  8100                           ; 4 bytes @ 0x44
  8101  0000A4                     	ds	4
  8102  0000A8                     ___fladd@a:
  8103                           	opt stack 0
  8104                           
  8105                           ; 4 bytes @ 0x48
  8106  0000A8                     	ds	4
  8107  0000AC                     ??___fladd:
  8108                           
  8109                           ; 1 bytes @ 0x4C
  8110  0000AC                     	ds	3
  8111  0000AF                     saveToEEPROM@baseAddress:
  8112                           	opt stack 0
  8113                           
  8114                           ; 2 bytes @ 0x4F
  8115  0000AF                     	ds	2
  8116  0000B1                     saveToEEPROM@slotNumber:
  8117                           	opt stack 0
  8118                           
  8119                           ; 1 bytes @ 0x51
  8120  0000B1                     	ds	1
  8121  0000B2                     saveToEEPROM@byte_count:
  8122                           	opt stack 0
  8123                           
  8124                           ; 2 bytes @ 0x52
  8125  0000B2                     	ds	2
  8126  0000B4                     initializeSaveSlotsOnce@initializeSlotsOnce:
  8127                           	opt stack 0
  8128  0000B4                     ___fladd@signs:
  8129                           	opt stack 0
  8130                           
  8131                           ; 1 bytes @ 0x54
  8132  0000B4                     	ds	1
  8133  0000B5                     ___fladd@aexp:
  8134                           	opt stack 0
  8135                           
  8136                           ; 1 bytes @ 0x55
  8137  0000B5                     	ds	1
  8138  0000B6                     ___fladd@bexp:
  8139                           	opt stack 0
  8140                           
  8141                           ; 1 bytes @ 0x56
  8142  0000B6                     	ds	1
  8143  0000B7                     ___fladd@grs:
  8144                           	opt stack 0
  8145                           
  8146                           ; 1 bytes @ 0x57
  8147  0000B7                     	ds	1
  8148  0000B8                     ?___fltol:
  8149                           	opt stack 0
  8150  0000B8                     ___fltol@f1:
  8151                           	opt stack 0
  8152                           
  8153                           ; 4 bytes @ 0x58
  8154  0000B8                     	ds	4
  8155  0000BC                     ??___fltol:
  8156                           
  8157                           ; 1 bytes @ 0x5C
  8158  0000BC                     	ds	4
  8159  0000C0                     ___fltol@sign1:
  8160                           	opt stack 0
  8161                           
  8162                           ; 1 bytes @ 0x60
  8163  0000C0                     	ds	1
  8164  0000C1                     ___fltol@exp1:
  8165                           	opt stack 0
  8166                           
  8167                           ; 1 bytes @ 0x61
  8168  0000C1                     	ds	1
  8169  0000C2                     ??_readPotentiometers:
  8170  0000C2                     ?_calculate_pulse_length:
  8171                           	opt stack 0
  8172                           
  8173                           ; 2 bytes @ 0x62
  8174  0000C2                     	ds	2
  8175  0000C4                     calculate_pulse_length@s_tick:
  8176                           	opt stack 0
  8177                           
  8178                           ; 4 bytes @ 0x64
  8179  0000C4                     	ds	3
  8180  0000C7                     ??_Function_C_2:
  8181  0000C7                     ??_Function_C_3:
  8182  0000C7                     Function_D_3@array_index:
  8183                           	opt stack 0
  8184  0000C7                     Function_D_4@array_index:
  8185                           	opt stack 0
  8186  0000C7                     Function_D_5@array_index:
  8187                           	opt stack 0
  8188  0000C7                     Function_H_1@temp:
  8189                           	opt stack 0
  8190  0000C7                     Function_H_6_1@temp:
  8191                           	opt stack 0
  8192                           
  8193                           ; 1 bytes @ 0x67
  8194  0000C7                     	ds	1
  8195  0000C8                     Function_C_2@array_index:
  8196                           	opt stack 0
  8197  0000C8                     Function_C_3@array_index:
  8198                           	opt stack 0
  8199  0000C8                     Function_H_5@i:
  8200                           	opt stack 0
  8201  0000C8                     _calculate_pulse_length$5908:
  8202                           	opt stack 0
  8203                           
  8204                           ; 4 bytes @ 0x68
  8205  0000C8                     	ds	1
  8206  0000C9                     
  8207                           ; 1 bytes @ 0x69
  8208  0000C9                     	ds	3
  8209  0000CC                     tblptru	equ	0xFF8
  8210                           tblptrh	equ	0xFF7
  8211                           tblptrl	equ	0xFF6
  8212                           tablat	equ	0xFF5
  8213                           postinc0	equ	0xFEE
  8214                           wreg	equ	0xFE8
  8215                           postdec2	equ	0xFDD
  8216                           fsr2l	equ	0xFD9
  8217                           
  8218                           ; 1 bytes @ 0x6C
  8219                           
  8220                           	psect	cstackCOMRAM
  8221  000007                     __pcstackCOMRAM:
  8222                           	opt stack 0
  8223  000007                     ??_displayDigits:
  8224  000007                     ??_encoderInputsBuxton:
  8225  000007                     
  8226                           ; 1 bytes @ 0x0
  8227  000007                     	ds	1
  8228  000008                     displayString@i:
  8229                           	opt stack 0
  8230                           
  8231                           ; 1 bytes @ 0x1
  8232  000008                     	ds	1
  8233  000009                     sort_pitches@a:
  8234                           	opt stack 0
  8235                           
  8236                           ; 1 bytes @ 0x2
  8237  000009                     	ds	1
  8238  00000A                     encoderInputsBuxton@tempA:
  8239                           	opt stack 0
  8240  00000A                     displayDigits@lowByte:
  8241                           	opt stack 0
  8242  00000A                     sort_pitches@j:
  8243                           	opt stack 0
  8244                           
  8245                           ; 1 bytes @ 0x3
  8246  00000A                     	ds	1
  8247  00000B                     encoderInputsBuxton@tempB:
  8248                           	opt stack 0
  8249  00000B                     displayDigits@highByte:
  8250                           	opt stack 0
  8251  00000B                     sort_pitches@i:
  8252                           	opt stack 0
  8253                           
  8254                           ; 1 bytes @ 0x4
  8255  00000B                     	ds	1
  8256  00000C                     ??_playArpeggio:
  8257  00000C                     encoderInputsBuxton@pinstate:
  8258                           	opt stack 0
  8259                           
  8260                           ; 1 bytes @ 0x5
  8261  00000C                     	ds	6
  8262  000012                     ??_ISR:
  8263                           
  8264                           ; 1 bytes @ 0xB
  8265  000012                     	ds	24
  8266                           tblptru	equ	0xFF8
  8267                           tblptrh	equ	0xFF7
  8268                           tblptrl	equ	0xFF6
  8269                           tablat	equ	0xFF5
  8270                           postinc0	equ	0xFEE
  8271                           wreg	equ	0xFE8
  8272                           postdec2	equ	0xFDD
  8273                           fsr2l	equ	0xFD9
  8274                           
  8275 ;;
  8276 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  8277 ;;
  8278 ;; *************** function _main *****************
  8279 ;; Defined at:
  8280 ;;		line 522 in file "main.c"
  8281 ;; Parameters:    Size  Location     Type
  8282 ;;		None
  8283 ;; Auto vars:     Size  Location     Type
  8284 ;;		None
  8285 ;; Return value:  Size  Location     Type
  8286 ;;                  2  5022[None  ] int 
  8287 ;; Registers used:
  8288 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8289 ;; Tracked objects:
  8290 ;;		On entry : 0/0
  8291 ;;		On exit  : 0/0
  8292 ;;		Unchanged: 0/0
  8293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8296 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
  8297 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
  8298 ;;Total ram usage:        1 bytes
  8299 ;; Hardware stack levels required when called:   20
  8300 ;; This function calls:
  8301 ;;		_ADC_Initialize
  8302 ;;		_Lcd_Start
  8303 ;;		_Read_b_eep
  8304 ;;		_analogInputs
  8305 ;;		_calculate_alpha
  8306 ;;		_calculate_pulse_length
  8307 ;;		_digitalInputs
  8308 ;;		_displayTest
  8309 ;;		_initializeMenuArray
  8310 ;;		_initializeSaveSlotsOnce
  8311 ;;		_menu_lcd
  8312 ;;		_panic_button
  8313 ;;		_processEncoderBuxton
  8314 ;;		_selectSlotOnBoot
  8315 ;;		_setup
  8316 ;;		_srand
  8317 ;; This function is called by:
  8318 ;;		Startup code after reset
  8319 ;; This function uses a non-reentrant model
  8320 ;;
  8321                           
  8322                           	psect	text0
  8323  006AE2                     __ptext0:
  8324                           	opt stack 0
  8325  006AE2                     _main:
  8326                           	opt stack 11
  8327                           
  8328                           ;main.c: 525: setup();
  8329                           
  8330                           ;incstack = 0
  8331  006AE2  EC1F  F045         	call	_setup	;wreg free
  8332                           
  8333                           ;main.c: 526: ADC_Initialize();
  8334  006AE6  ECD8  F04C         	call	_ADC_Initialize	;wreg free
  8335                           
  8336                           ;main.c: 527: initializeMenuArray();
  8337  006AEA  ECF3  F026         	call	_initializeMenuArray	;wreg free
  8338                           
  8339                           ;main.c: 528: Lcd_Start();
  8340  006AEE  ECA8  F041         	call	_Lcd_Start	;wreg free
  8341                           
  8342                           ;main.c: 531: state = 0x0;
  8343  006AF2  0E00               	movlw	0
  8344  006AF4  0100               	movlb	0	; () banked
  8345  006AF6  6FED               	movwf	_state& (0+255),b
  8346                           
  8347                           ; BSR set to: 0
  8348                           ;main.c: 532: POT_MODE = 0;
  8349  006AF8  9A05               	bcf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
  8350                           
  8351                           ; BSR set to: 0
  8352                           ;main.c: 533: which_screen = MAIN_MENU;
  8353  006AFA  0E02               	movlw	2
  8354  006AFC  6E4F               	movwf	_which_screen,c
  8355                           
  8356                           ; BSR set to: 0
  8357                           ;main.c: 534: menu_lcd();
  8358  006AFE  EC4D  F037         	call	_menu_lcd	;wreg free
  8359                           
  8360                           ;main.c: 535: panic_button();
  8361  006B02  EC51  F04C         	call	_panic_button	;wreg free
  8362                           
  8363                           ;main.c: 537: srand(2048);
  8364  006B06  0E08               	movlw	8
  8365  006B08  0100               	movlb	0	; () banked
  8366  006B0A  6F61               	movwf	(srand@x+1)& (0+255),b
  8367  006B0C  0E00               	movlw	0
  8368  006B0E  6F60               	movwf	srand@x& (0+255),b
  8369  006B10  ECE2  F04C         	call	_srand	;wreg free
  8370                           
  8371                           ;main.c: 540: encoderPolarity = Read_b_eep(0x02);
  8372  006B14  0E00               	movlw	0
  8373  006B16  0100               	movlb	0	; () banked
  8374  006B18  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
  8375  006B1A  0E02               	movlw	2
  8376  006B1C  6F60               	movwf	Read_b_eep@badd& (0+255),b
  8377  006B1E  EC91  F04C         	call	_Read_b_eep	;wreg free
  8378  006B22  0102               	movlb	2	; () banked
  8379  006B24  6FE6               	movwf	??_main& (0+255),b
  8380  006B26  31E6               	rrcf	??_main& (0+255),w,b
  8381  006B28  A0D8               	btfss	status,0,c
  8382  006B2A  D002               	goto	u66980
  8383  006B2C  8405               	bsf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
  8384  006B2E  D001               	goto	u66995
  8385  006B30                     u66980:
  8386  006B30  9405               	bcf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
  8387  006B32                     u66995:
  8388                           
  8389                           ;main.c: 542: ema_integer = Read_b_eep(0x03);
  8390  006B32  0E00               	movlw	0
  8391  006B34  0100               	movlb	0	; () banked
  8392  006B36  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
  8393  006B38  0E03               	movlw	3
  8394  006B3A  6F60               	movwf	Read_b_eep@badd& (0+255),b
  8395  006B3C  EC91  F04C         	call	_Read_b_eep	;wreg free
  8396  006B40  0100               	movlb	0	; () banked
  8397  006B42  6FFE               	movwf	_ema_integer& (0+255),b
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;main.c: 544: calculate_alpha();
  8401  006B44  EC92  F049         	call	_calculate_alpha	;wreg free
  8402                           
  8403                           ;main.c: 551: ARPEGGIO_ON = 0;
  8404  006B48  9604               	bcf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
  8405                           
  8406                           ;main.c: 554: TIMER_PRELOAD = calculate_pulse_length();
  8407  006B4A  EC3F  F02F         	call	_calculate_pulse_length	;wreg free
  8408  006B4E  C0C2  F17B         	movff	?_calculate_pulse_length,_TIMER_PRELOAD
  8409  006B52  C0C3  F17C         	movff	?_calculate_pulse_length+1,_TIMER_PRELOAD+1
  8410                           
  8411                           ;main.c: 557: LATCH = 0;
  8412  006B56  9004               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
  8413                           
  8414                           ;main.c: 558: UN_LATCH_MODE = 0;
  8415  006B58  9E03               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
  8416                           
  8417                           ;main.c: 560: AUTO_LATCH = 0;
  8418  006B5A  9C03               	bcf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
  8419                           
  8420                           ;main.c: 563: AUTO_RANDOMIZE = 0;
  8421  006B5C  9803               	bcf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
  8422                           
  8423                           ;main.c: 567: RESET_ON_KEY_PRESS = 1;
  8424  006B5E  8404               	bsf	_RESET_ON_KEY_PRESS/(0+8),_RESET_ON_KEY_PRESS& (0+7),c
  8425                           
  8426                           ;main.c: 568: RESET_ON_KEY_RELEASE = 1;
  8427  006B60  8204               	bsf	_RESET_ON_KEY_RELEASE/(0+8),_RESET_ON_KEY_RELEASE& (0+7),c
  8428                           
  8429                           ;main.c: 571: LAST_NOTE_MODE_KEY_PRESS = 0;
  8430  006B62  9203               	bcf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
  8431                           
  8432                           ;main.c: 572: LAST_NOTE_MODE_KEY_RELEASE = 0;
  8433  006B64  9003               	bcf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
  8434                           
  8435                           ;main.c: 573: LAST_NOTE_MODE_TRANSPOSE = 1;
  8436  006B66  8E02               	bsf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
  8437                           
  8438                           ;main.c: 574: LAST_NOTE_MODE_RESET = 1;
  8439  006B68  8C02               	bsf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  8440                           
  8441                           ;main.c: 577: skipFirstLast = 0;
  8442  006B6A  9603               	bcf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
  8443                           
  8444                           ;main.c: 580: DISPLAY_STEP_NUMBER = 0;
  8445  006B6C  9A01               	bcf	_DISPLAY_STEP_NUMBER/(0+8),_DISPLAY_STEP_NUMBER& (0+7),c
  8446                           
  8447                           ;main.c: 583: TMR0IE = 1;
  8448  006B6E  8AF2               	bsf	intcon,5,c	;volatile
  8449                           
  8450                           ;main.c: 584: TMR0ON = 1;
  8451  006B70  8ED5               	bsf	4053,7,c	;volatile
  8452                           
  8453                           ;main.c: 586: TMR2IE = 1;
  8454  006B72  829D               	bsf	3997,1,c	;volatile
  8455                           
  8456                           ;main.c: 587: TMR2ON = 1;
  8457  006B74  84CA               	bsf	4042,2,c	;volatile
  8458                           
  8459                           ;main.c: 589: TMR1IE = 1;
  8460  006B76  809D               	bsf	3997,0,c	;volatile
  8461                           
  8462                           ;main.c: 590: TMR1ON = 1;
  8463  006B78  80CD               	bsf	4045,0,c	;volatile
  8464                           
  8465                           ;main.c: 593: initializeSaveSlotsOnce();
  8466  006B7A  ECB7  F049         	call	_initializeSaveSlotsOnce	;wreg free
  8467                           
  8468                           ;main.c: 594: selectSlotOnBoot();
  8469  006B7E  EC62  F04C         	call	_selectSlotOnBoot	;wreg free
  8470                           
  8471                           ;main.c: 597: if((ARPEGGIO_TYPE == UP) || (ARPEGGIO_TYPE == UP_DOWN) || (ARPEGGIO_TYPE =
      +                          = RANDOM) || (ARPEGGIO_TYPE == RANDOM_NON_REPEATING) || (ARPEGGIO_TYPE == AS_PRESSED)){
  8472  006B82  5035               	movf	_ARPEGGIO_TYPE,w,c
  8473  006B84  B4D8               	btfsc	status,2,c
  8474  006B86  D010               	goto	u67040
  8475  006B88  0E02               	movlw	2
  8476  006B8A  1835               	xorwf	_ARPEGGIO_TYPE,w,c
  8477  006B8C  B4D8               	btfsc	status,2,c
  8478  006B8E  D00C               	goto	u67040
  8479  006B90  0E05               	movlw	5
  8480  006B92  1835               	xorwf	_ARPEGGIO_TYPE,w,c
  8481  006B94  B4D8               	btfsc	status,2,c
  8482  006B96  D008               	goto	u67040
  8483  006B98  0E04               	movlw	4
  8484  006B9A  1835               	xorwf	_ARPEGGIO_TYPE,w,c
  8485  006B9C  B4D8               	btfsc	status,2,c
  8486  006B9E  D004               	goto	u67040
  8487  006BA0  0E06               	movlw	6
  8488  006BA2  1835               	xorwf	_ARPEGGIO_TYPE,w,c
  8489  006BA4  A4D8               	btfss	status,2,c
  8490  006BA6  D002               	goto	l5023
  8491  006BA8                     u67040:
  8492                           
  8493                           ;main.c: 598: startingDirection = UP;
  8494  006BA8  0E00               	movlw	0
  8495  006BAA  6E34               	movwf	_startingDirection,c
  8496  006BAC                     l5023:
  8497                           
  8498                           ;main.c: 599: }
  8499                           ;main.c: 601: if((ARPEGGIO_TYPE == DOWN) || (ARPEGGIO_TYPE == DOWN_UP)){
  8500  006BAC  0435               	decf	_ARPEGGIO_TYPE,w,c
  8501  006BAE  B4D8               	btfsc	status,2,c
  8502  006BB0  D004               	goto	u67060
  8503  006BB2  0E03               	movlw	3
  8504  006BB4  1835               	xorwf	_ARPEGGIO_TYPE,w,c
  8505  006BB6  A4D8               	btfss	status,2,c
  8506  006BB8  D002               	goto	l5026
  8507  006BBA                     u67060:
  8508                           
  8509                           ;main.c: 602: startingDirection = DOWN;
  8510  006BBA  0E01               	movlw	1
  8511  006BBC  6E34               	movwf	_startingDirection,c
  8512  006BBE                     l5026:
  8513                           
  8514                           ;main.c: 603: }
  8515                           ;main.c: 605: displayTest();
  8516  006BBE  ECF8  F042         	call	_displayTest	;wreg free
  8517                           
  8518                           ;main.c: 612: which_functions_are_unblocked = 1;
  8519  006BC2  8005               	bsf	_which_functions_are_unblocked/(0+8),_which_functions_are_unblocked& (0+7),c
  8520  006BC4                     
  8521                           ;main.c: 618: digitalInputs();
  8522  006BC4  EC1D  F049         	call	_digitalInputs	;wreg free
  8523                           
  8524                           ;main.c: 619: analogInputs();
  8525  006BC8  EC00  F04A         	call	_analogInputs	;wreg free
  8526                           
  8527                           ;main.c: 620: processEncoderBuxton();
  8528  006BCC  EC0A  F000         	call	_processEncoderBuxton	;wreg free
  8529                           
  8530                           ;main.c: 631: menu_lcd();
  8531  006BD0  EC4D  F037         	call	_menu_lcd	;wreg free
  8532  006BD4  D7F7               	goto	l5029
  8533  006BD6                     __end_of_main:
  8534                           	opt stack 0
  8535                           tblptru	equ	0xFF8
  8536                           tblptrh	equ	0xFF7
  8537                           tblptrl	equ	0xFF6
  8538                           tablat	equ	0xFF5
  8539                           intcon	equ	0xFF2
  8540                           postinc0	equ	0xFEE
  8541                           wreg	equ	0xFE8
  8542                           postdec2	equ	0xFDD
  8543                           fsr2l	equ	0xFD9
  8544                           status	equ	0xFD8
  8545                           
  8546 ;; *************** function _srand *****************
  8547 ;; Defined at:
  8548 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  8549 ;; Parameters:    Size  Location     Type
  8550 ;;  x               2    0[BANK0 ] unsigned int 
  8551 ;; Auto vars:     Size  Location     Type
  8552 ;;		None
  8553 ;; Return value:  Size  Location     Type
  8554 ;;                  1    wreg      void 
  8555 ;; Registers used:
  8556 ;;		status,2
  8557 ;; Tracked objects:
  8558 ;;		On entry : 0/0
  8559 ;;		On exit  : 0/0
  8560 ;;		Unchanged: 0/0
  8561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8562 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8565 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8566 ;;Total ram usage:        2 bytes
  8567 ;; Hardware stack levels used:    1
  8568 ;; Hardware stack levels required when called:    5
  8569 ;; This function calls:
  8570 ;;		Nothing
  8571 ;; This function is called by:
  8572 ;;		_main
  8573 ;; This function uses a non-reentrant model
  8574 ;;
  8575                           
  8576                           	psect	text1
  8577  0099C4                     __ptext1:
  8578                           	opt stack 0
  8579  0099C4                     _srand:
  8580                           	opt stack 25
  8581                           
  8582                           ;incstack = 0
  8583  0099C4  C060  F1EF         	movff	srand@x,_randx
  8584  0099C8  C061  F1F0         	movff	srand@x+1,_randx+1
  8585  0099CC  0101               	movlb	1	; () banked
  8586  0099CE  6BF1               	clrf	(_randx+2)& (0+255),b
  8587  0099D0  6BF2               	clrf	(_randx+3)& (0+255),b
  8588                           
  8589                           ; BSR set to: 1
  8590  0099D2  0012               	return		;funcret
  8591  0099D4                     __end_of_srand:
  8592                           	opt stack 0
  8593                           tblptru	equ	0xFF8
  8594                           tblptrh	equ	0xFF7
  8595                           tblptrl	equ	0xFF6
  8596                           tablat	equ	0xFF5
  8597                           intcon	equ	0xFF2
  8598                           postinc0	equ	0xFEE
  8599                           wreg	equ	0xFE8
  8600                           postdec2	equ	0xFDD
  8601                           fsr2l	equ	0xFD9
  8602                           status	equ	0xFD8
  8603                           
  8604 ;; *************** function _setup *****************
  8605 ;; Defined at:
  8606 ;;		line 209 in file "main.c"
  8607 ;; Parameters:    Size  Location     Type
  8608 ;;		None
  8609 ;; Auto vars:     Size  Location     Type
  8610 ;;		None
  8611 ;; Return value:  Size  Location     Type
  8612 ;;                  1    wreg      void 
  8613 ;; Registers used:
  8614 ;;		wreg, status,2, status,0
  8615 ;; Tracked objects:
  8616 ;;		On entry : 0/0
  8617 ;;		On exit  : 0/0
  8618 ;;		Unchanged: 0/0
  8619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8624 ;;Total ram usage:        0 bytes
  8625 ;; Hardware stack levels used:    1
  8626 ;; Hardware stack levels required when called:    5
  8627 ;; This function calls:
  8628 ;;		Nothing
  8629 ;; This function is called by:
  8630 ;;		_main
  8631 ;; This function uses a non-reentrant model
  8632 ;;
  8633                           
  8634                           	psect	text2
  8635  008A3E                     __ptext2:
  8636                           	opt stack 0
  8637  008A3E                     _setup:
  8638                           	opt stack 25
  8639                           
  8640                           ;main.c: 212: TRISA = 0b000001;
  8641                           
  8642                           ; BSR set to: 1
  8643                           ;incstack = 0
  8644  008A3E  0E01               	movlw	1
  8645  008A40  6E92               	movwf	3986,c	;volatile
  8646                           
  8647                           ;main.c: 216: TRISB = 0b00110001;
  8648  008A42  0E31               	movlw	49
  8649  008A44  6E93               	movwf	3987,c	;volatile
  8650                           
  8651                           ;main.c: 224: TRISC = 0b10010000;
  8652  008A46  0E90               	movlw	144
  8653  008A48  6E94               	movwf	3988,c	;volatile
  8654                           
  8655                           ;main.c: 230: TRISD = 0b00000000;
  8656  008A4A  0E00               	movlw	0
  8657  008A4C  6E95               	movwf	3989,c	;volatile
  8658                           
  8659                           ;main.c: 233: TRISE = 0b000;
  8660  008A4E  0E00               	movlw	0
  8661  008A50  6E96               	movwf	3990,c	;volatile
  8662                           
  8663                           ;main.c: 238: PORTA = 0x00;
  8664  008A52  0E00               	movlw	0
  8665  008A54  6E80               	movwf	3968,c	;volatile
  8666                           
  8667                           ;main.c: 239: PORTB = 0x00;
  8668  008A56  0E00               	movlw	0
  8669  008A58  6E81               	movwf	3969,c	;volatile
  8670                           
  8671                           ;main.c: 240: PORTC = 0x00;
  8672  008A5A  0E00               	movlw	0
  8673  008A5C  6E82               	movwf	3970,c	;volatile
  8674                           
  8675                           ;main.c: 241: PORTD = 0x00;
  8676  008A5E  0E00               	movlw	0
  8677  008A60  6E83               	movwf	3971,c	;volatile
  8678                           
  8679                           ;main.c: 242: PORTE = 0x00;
  8680  008A62  0E00               	movlw	0
  8681  008A64  6E84               	movwf	3972,c	;volatile
  8682                           
  8683                           ;main.c: 245: IPEN = 0;
  8684  008A66  9ED0               	bcf	4048,7,c	;volatile
  8685                           
  8686                           ;main.c: 248: RBIF = 0;
  8687  008A68  90F2               	bcf	intcon,0,c	;volatile
  8688                           
  8689                           ;main.c: 249: RBIE = 1;
  8690  008A6A  86F2               	bsf	intcon,3,c	;volatile
  8691                           
  8692                           ;main.c: 251: INTEDG0 = 0;
  8693  008A6C  9CF1               	bcf	intcon2,6,c	;volatile
  8694                           
  8695                           ;main.c: 252: INT0IF = 0;
  8696  008A6E  92F2               	bcf	intcon,1,c	;volatile
  8697                           
  8698                           ;main.c: 253: INT0IE = 1;
  8699  008A70  88F2               	bsf	intcon,4,c	;volatile
  8700                           
  8701                           ;main.c: 256: T08BIT = 0;
  8702  008A72  9CD5               	bcf	4053,6,c	;volatile
  8703                           
  8704                           ;main.c: 257: T0CS = 0;
  8705  008A74  9AD5               	bcf	4053,5,c	;volatile
  8706                           
  8707                           ;main.c: 258: T0CON &= 0b11111000;
  8708  008A76  0EF8               	movlw	248
  8709  008A78  16D5               	andwf	4053,f,c	;volatile
  8710                           
  8711                           ;main.c: 259: T0CON |= 0b00000001;
  8712  008A7A  80D5               	bsf	4053,0,c	;volatile
  8713                           
  8714                           ;main.c: 260: PSA = 0;
  8715  008A7C  96D5               	bcf	4053,3,c	;volatile
  8716                           
  8717                           ;main.c: 261: TMR0ON = 0;
  8718  008A7E  9ED5               	bcf	4053,7,c	;volatile
  8719                           
  8720                           ;main.c: 262: TMR0IE = 1;
  8721  008A80  8AF2               	bsf	intcon,5,c	;volatile
  8722                           
  8723                           ;main.c: 265: T2CON = 0b01000001;
  8724  008A82  0E41               	movlw	65
  8725  008A84  6ECA               	movwf	4042,c	;volatile
  8726                           
  8727                           ;main.c: 266: TMR2 = 0x83;
  8728  008A86  0E83               	movlw	131
  8729  008A88  6ECC               	movwf	4044,c	;volatile
  8730                           
  8731                           ;main.c: 267: TMR2ON = 0;
  8732  008A8A  94CA               	bcf	4042,2,c	;volatile
  8733                           
  8734                           ;main.c: 268: TMR2IE = 0;
  8735  008A8C  929D               	bcf	3997,1,c	;volatile
  8736                           
  8737                           ;main.c: 271: T1CON = 0b10000000;
  8738  008A8E  0E80               	movlw	128
  8739  008A90  6ECD               	movwf	4045,c	;volatile
  8740                           
  8741                           ;main.c: 272: TMR1 = 0xEC78;
  8742  008A92  0EEC               	movlw	236
  8743  008A94  6ECF               	movwf	4047,c	;volatile
  8744  008A96  0E78               	movlw	120
  8745  008A98  6ECE               	movwf	4046,c	;volatile
  8746                           
  8747                           ;main.c: 273: TMR1ON = 0;
  8748  008A9A  90CD               	bcf	4045,0,c	;volatile
  8749                           
  8750                           ;main.c: 274: TMR1IE = 1;
  8751  008A9C  809D               	bsf	3997,0,c	;volatile
  8752                           
  8753                           ;main.c: 278: TXEN = 1;
  8754  008A9E  8AAC               	bsf	4012,5,c	;volatile
  8755                           
  8756                           ;main.c: 279: SYNC = 0;
  8757  008AA0  98AC               	bcf	4012,4,c	;volatile
  8758                           
  8759                           ;main.c: 282: SPEN = 1;
  8760  008AA2  8EAB               	bsf	4011,7,c	;volatile
  8761                           
  8762                           ;main.c: 283: CREN = 1;
  8763  008AA4  88AB               	bsf	4011,4,c	;volatile
  8764                           
  8765                           ;main.c: 286: BRGH = 0;
  8766  008AA6  94AC               	bcf	4012,2,c	;volatile
  8767                           
  8768                           ;main.c: 287: SPBRG = 9;
  8769  008AA8  0E09               	movlw	9
  8770  008AAA  6EAF               	movwf	4015,c	;volatile
  8771                           
  8772                           ;main.c: 289: PEIE = 1;
  8773  008AAC  8CF2               	bsf	intcon,6,c	;volatile
  8774                           
  8775                           ;main.c: 290: GIE = 1;
  8776  008AAE  8EF2               	bsf	intcon,7,c	;volatile
  8777  008AB0  0012               	return		;funcret
  8778  008AB2                     __end_of_setup:
  8779                           	opt stack 0
  8780                           tblptru	equ	0xFF8
  8781                           tblptrh	equ	0xFF7
  8782                           tblptrl	equ	0xFF6
  8783                           tablat	equ	0xFF5
  8784                           intcon	equ	0xFF2
  8785                           intcon2	equ	0xFF1
  8786                           postinc0	equ	0xFEE
  8787                           wreg	equ	0xFE8
  8788                           postdec2	equ	0xFDD
  8789                           fsr2l	equ	0xFD9
  8790                           status	equ	0xFD8
  8791                           
  8792 ;; *************** function _selectSlotOnBoot *****************
  8793 ;; Defined at:
  8794 ;;		line 41 in file "eeprom.c"
  8795 ;; Parameters:    Size  Location     Type
  8796 ;;		None
  8797 ;; Auto vars:     Size  Location     Type
  8798 ;;  slot            1    0[BANK2 ] unsigned char 
  8799 ;; Return value:  Size  Location     Type
  8800 ;;                  1    wreg      void 
  8801 ;; Registers used:
  8802 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8803 ;; Tracked objects:
  8804 ;;		On entry : 0/0
  8805 ;;		On exit  : 0/0
  8806 ;;		Unchanged: 0/0
  8807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8809 ;;      Locals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
  8810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8811 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0
  8812 ;;Total ram usage:        1 bytes
  8813 ;; Hardware stack levels used:    1
  8814 ;; Hardware stack levels required when called:    8
  8815 ;; This function calls:
  8816 ;;		_Read_b_eep
  8817 ;;		_loadFromEEPROM
  8818 ;; This function is called by:
  8819 ;;		_main
  8820 ;; This function uses a non-reentrant model
  8821 ;;
  8822                           
  8823                           	psect	text3
  8824  0098C4                     __ptext3:
  8825                           	opt stack 0
  8826  0098C4                     _selectSlotOnBoot:
  8827                           	opt stack 22
  8828                           
  8829                           ;eeprom.c: 43: unsigned char slot = Read_b_eep(0);
  8830                           
  8831                           ;incstack = 0
  8832  0098C4  0E00               	movlw	0
  8833  0098C6  0100               	movlb	0	; () banked
  8834  0098C8  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
  8835  0098CA  0E00               	movlw	0
  8836  0098CC  6F60               	movwf	Read_b_eep@badd& (0+255),b
  8837  0098CE  EC91  F04C         	call	_Read_b_eep	;wreg free
  8838  0098D2  0102               	movlb	2	; () banked
  8839  0098D4  6FE5               	movwf	selectSlotOnBoot@slot& (0+255),b
  8840                           
  8841                           ; BSR set to: 2
  8842                           ;eeprom.c: 45: if (slot == DEFAULT){
  8843  0098D6  51E5               	movf	selectSlotOnBoot@slot& (0+255),w,b
  8844  0098D8  B4D8               	btfsc	status,2,c
  8845  0098DA  0012               	return	
  8846                           
  8847                           ; BSR set to: 2
  8848                           ;eeprom.c: 49: else {
  8849                           ;eeprom.c: 50: loadFromEEPROM(slot);
  8850                           
  8851                           ; BSR set to: 2
  8852                           
  8853                           ; BSR set to: 2
  8854                           ;eeprom.c: 47: }
  8855                           
  8856                           ; BSR set to: 2
  8857                           ;eeprom.c: 46: return;
  8858  0098DC  51E5               	movf	selectSlotOnBoot@slot& (0+255),w,b
  8859  0098DE  ECD7  F025         	call	_loadFromEEPROM
  8860  0098E2  0012               	return	
  8861  0098E4                     __end_of_selectSlotOnBoot:
  8862                           	opt stack 0
  8863                           tblptru	equ	0xFF8
  8864                           tblptrh	equ	0xFF7
  8865                           tblptrl	equ	0xFF6
  8866                           tablat	equ	0xFF5
  8867                           intcon	equ	0xFF2
  8868                           intcon2	equ	0xFF1
  8869                           postinc0	equ	0xFEE
  8870                           wreg	equ	0xFE8
  8871                           postdec2	equ	0xFDD
  8872                           fsr2l	equ	0xFD9
  8873                           status	equ	0xFD8
  8874                           
  8875 ;; *************** function _panic_button *****************
  8876 ;; Defined at:
  8877 ;;		line 507 in file "main.c"
  8878 ;; Parameters:    Size  Location     Type
  8879 ;;		None
  8880 ;; Auto vars:     Size  Location     Type
  8881 ;;		None
  8882 ;; Return value:  Size  Location     Type
  8883 ;;                  1    wreg      void 
  8884 ;; Registers used:
  8885 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
  8886 ;; Tracked objects:
  8887 ;;		On entry : 0/0
  8888 ;;		On exit  : 0/0
  8889 ;;		Unchanged: 0/0
  8890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8894 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8895 ;;Total ram usage:        0 bytes
  8896 ;; Hardware stack levels used:    1
  8897 ;; Hardware stack levels required when called:    9
  8898 ;; This function calls:
  8899 ;;		_controlChange
  8900 ;; This function is called by:
  8901 ;;		_main
  8902 ;; This function uses a non-reentrant model
  8903 ;;
  8904                           
  8905                           	psect	text4
  8906  0098A2                     __ptext4:
  8907                           	opt stack 0
  8908  0098A2                     _panic_button:
  8909                           	opt stack 21
  8910                           
  8911                           ;main.c: 508: controlChange (channel, all_notes_off, 0x00);
  8912                           
  8913                           ;incstack = 0
  8914  0098A2  0E7B               	movlw	123
  8915  0098A4  0100               	movlb	0	; () banked
  8916  0098A6  6F60               	movwf	controlChange@controllerNumber& (0+255),b
  8917  0098A8  0E00               	movlw	0
  8918  0098AA  6F61               	movwf	controlChange@value& (0+255),b
  8919  0098AC  503E               	movf	_channel,w,c
  8920  0098AE  ECC7  F048         	call	_controlChange
  8921                           
  8922                           ;main.c: 509: controlChange (drumchannel, all_notes_off, 0x00);
  8923  0098B2  0E7B               	movlw	123
  8924  0098B4  0100               	movlb	0	; () banked
  8925  0098B6  6F60               	movwf	controlChange@controllerNumber& (0+255),b
  8926  0098B8  0E00               	movlw	0
  8927  0098BA  6F61               	movwf	controlChange@value& (0+255),b
  8928  0098BC  5052               	movf	_drumchannel,w,c
  8929  0098BE  ECC7  F048         	call	_controlChange
  8930  0098C2  0012               	return		;funcret
  8931  0098C4                     __end_of_panic_button:
  8932                           	opt stack 0
  8933                           tblptru	equ	0xFF8
  8934                           tblptrh	equ	0xFF7
  8935                           tblptrl	equ	0xFF6
  8936                           tablat	equ	0xFF5
  8937                           intcon	equ	0xFF2
  8938                           intcon2	equ	0xFF1
  8939                           postinc0	equ	0xFEE
  8940                           wreg	equ	0xFE8
  8941                           postdec2	equ	0xFDD
  8942                           fsr2l	equ	0xFD9
  8943                           status	equ	0xFD8
  8944                           
  8945 ;; *************** function _menu_lcd *****************
  8946 ;; Defined at:
  8947 ;;		line 325 in file "menu.c"
  8948 ;; Parameters:    Size  Location     Type
  8949 ;;		None
  8950 ;; Auto vars:     Size  Location     Type
  8951 ;;		None
  8952 ;; Return value:  Size  Location     Type
  8953 ;;                  1    wreg      void 
  8954 ;; Registers used:
  8955 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8956 ;; Tracked objects:
  8957 ;;		On entry : 0/0
  8958 ;;		On exit  : 0/0
  8959 ;;		Unchanged: 0/0
  8960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8965 ;;Total ram usage:        0 bytes
  8966 ;; Hardware stack levels used:    1
  8967 ;; Hardware stack levels required when called:   19
  8968 ;; This function calls:
  8969 ;;		_Function_A
  8970 ;;		_Function_B
  8971 ;;		_Function_C
  8972 ;;		_Function_D
  8973 ;;		_Function_E
  8974 ;;		_Function_F
  8975 ;;		_Function_G
  8976 ;;		_Function_H
  8977 ;;		_Lcd_Clear
  8978 ;;		_Lcd_Print_String
  8979 ;;		_Lcd_Set_Cursor
  8980 ;;		___lbmod
  8981 ;;		___wmul
  8982 ;;		_exitFunction
  8983 ;; This function is called by:
  8984 ;;		_main
  8985 ;; This function uses a non-reentrant model
  8986 ;;
  8987                           
  8988                           	psect	text5
  8989  006E9A                     __ptext5:
  8990                           	opt stack 0
  8991  006E9A                     _menu_lcd:
  8992                           	opt stack 11
  8993                           
  8994                           ;menu.c: 327: which_screen = MAIN_MENU;
  8995                           
  8996                           ;incstack = 0
  8997  006E9A  0E02               	movlw	2
  8998  006E9C  6E4F               	movwf	_which_screen,c
  8999                           
  9000                           ;menu.c: 330: if (lcd_print_once == 0) {
  9001  006E9E  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9002  006EA0  D026               	goto	l3532
  9003                           
  9004                           ;menu.c: 332: Lcd_Clear();
  9005  006EA2  ECC3  F04C         	call	_Lcd_Clear	;wreg free
  9006                           
  9007                           ;menu.c: 333: Lcd_Set_Cursor(1,1);
  9008  006EA6  0E01               	movlw	1
  9009  006EA8  0100               	movlb	0	; () banked
  9010  006EAA  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9011  006EAC  0E01               	movlw	1
  9012  006EAE  ECDD  F047         	call	_Lcd_Set_Cursor
  9013                           
  9014                           ;menu.c: 339: Lcd_Print_String(LCD_STRINGS[(mainMenu.selector % mainMenu.number) + mainM
      +                          enu.address]);
  9015  006EB2  0101               	movlb	1	; () banked
  9016  006EB4  5174               	movf	_mainMenu& (0+255),w,b
  9017  006EB6  6EE6               	movwf	postinc1,c
  9018  006EB8  5176               	movf	(_mainMenu+2)& (0+255),w,b
  9019  006EBA  6EE6               	movwf	postinc1,c
  9020  006EBC  EC61  F041         	call	___lbmod	;wreg free
  9021  006EC0  503F               	movf	btemp,w,c
  9022  006EC2  0101               	movlb	1	; () banked
  9023  006EC4  2575               	addwf	(_mainMenu+1)& (0+255),w,b
  9024  006EC6  0100               	movlb	0	; () banked
  9025  006EC8  6F60               	movwf	___wmul@multiplier& (0+255),b
  9026  006ECA  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9027  006ECC  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9028  006ECE  0E00               	movlw	0
  9029  006ED0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9030  006ED2  0E11               	movlw	17
  9031  006ED4  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9032  006ED6  EC2A  F04C         	call	___wmul	;wreg free
  9033  006EDA  0E9E               	movlw	low _LCD_STRINGS
  9034  006EDC  0100               	movlb	0	; () banked
  9035  006EDE  2560               	addwf	?___wmul& (0+255),w,b
  9036  006EE0  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9037  006EE2  0EF3               	movlw	high _LCD_STRINGS
  9038  006EE4  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9039  006EE6  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9040  006EE8  EC74  F042         	call	_Lcd_Print_String	;wreg free
  9041                           
  9042                           ;menu.c: 341: lcd_print_once = 1;
  9043  006EEC  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9044  006EEE                     l3532:
  9045                           
  9046                           ;menu.c: 342: }
  9047                           ;menu.c: 344: if(encoder_click == 1) {
  9048  006EEE  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9049  006EF0  0012               	return	
  9050                           
  9051                           ;menu.c: 346: encoder_click = 0;
  9052  006EF2  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9053                           
  9054                           ;menu.c: 348: switch (mainMenu.selector) {
  9055  006EF4  D026               	goto	l3534
  9056  006EF6                     
  9057                           ;menu.c: 350: Function_A();
  9058  006EF6  ECD7  F039         	call	_Function_A	;wreg free
  9059                           
  9060                           ;menu.c: 351: exitFunction();
  9061  006EFA  ECCA  F04A         	call	_exitFunction	;wreg free
  9062                           
  9063                           ;menu.c: 352: break;
  9064  006EFE  0012               	return	
  9065  006F00                     
  9066                           ;menu.c: 354: Function_H();
  9067  006F00  EC6A  F03B         	call	_Function_H	;wreg free
  9068                           
  9069                           ;menu.c: 355: exitFunction();
  9070  006F04  ECCA  F04A         	call	_exitFunction	;wreg free
  9071                           
  9072                           ;menu.c: 356: break;
  9073  006F08  0012               	return	
  9074  006F0A                     
  9075                           ;menu.c: 358: Function_B();
  9076  006F0A  EC30  F044         	call	_Function_B	;wreg free
  9077                           
  9078                           ;menu.c: 359: exitFunction();
  9079  006F0E  ECCA  F04A         	call	_exitFunction	;wreg free
  9080                           
  9081                           ;menu.c: 360: break;
  9082  006F12  0012               	return	
  9083  006F14                     
  9084                           ;menu.c: 362: Function_C();
  9085  006F14  EC41  F040         	call	_Function_C	;wreg free
  9086                           
  9087                           ;menu.c: 363: exitFunction();
  9088  006F18  ECCA  F04A         	call	_exitFunction	;wreg free
  9089                           
  9090                           ;menu.c: 364: break;
  9091  006F1C  0012               	return	
  9092  006F1E                     
  9093                           ;menu.c: 366: Function_D();
  9094  006F1E  ECD2  F040         	call	_Function_D	;wreg free
  9095                           
  9096                           ;menu.c: 367: exitFunction();
  9097  006F22  ECCA  F04A         	call	_exitFunction	;wreg free
  9098                           
  9099                           ;menu.c: 368: break;
  9100  006F26  0012               	return	
  9101  006F28                     
  9102                           ;menu.c: 370: Function_E();
  9103  006F28  EC73  F046         	call	_Function_E	;wreg free
  9104                           
  9105                           ;menu.c: 371: exitFunction();
  9106  006F2C  ECCA  F04A         	call	_exitFunction	;wreg free
  9107                           
  9108                           ;menu.c: 372: break;
  9109  006F30  0012               	return	
  9110  006F32                     
  9111                           ;menu.c: 374: Function_F();
  9112  006F32  EC47  F047         	call	_Function_F	;wreg free
  9113                           
  9114                           ;menu.c: 375: exitFunction();
  9115  006F36  ECCA  F04A         	call	_exitFunction	;wreg free
  9116                           
  9117                           ;menu.c: 376: break;
  9118  006F3A  0012               	return	
  9119  006F3C                     
  9120                           ;menu.c: 378: Function_G();
  9121  006F3C  EC8A  F040         	call	_Function_G	;wreg free
  9122                           
  9123                           ;menu.c: 384: }
  9124                           
  9125                           ;menu.c: 383: break;
  9126                           
  9127                           ;menu.c: 382: default:
  9128                           
  9129                           ;menu.c: 380: break;
  9130  006F40  0012               	return	
  9131  006F42                     l3534:
  9132  006F42  0101               	movlb	1	; () banked
  9133  006F44  5176               	movf	(_mainMenu+2)& (0+255),w,b
  9134                           
  9135                           ; Switch size 1, requested type "space"
  9136                           ; Number of cases is 8, Range of values is 0 to 7
  9137                           ; switch strategies available:
  9138                           ; Name         Instructions Cycles
  9139                           ; simple_byte           25    13 (average)
  9140                           ;	Chosen strategy is simple_byte
  9141  006F46  0A00               	xorlw	0	; case 0
  9142  006F48  B4D8               	btfsc	status,2,c
  9143  006F4A  D7D5               	goto	l3535
  9144  006F4C  0A01               	xorlw	1	; case 1
  9145  006F4E  B4D8               	btfsc	status,2,c
  9146  006F50  D7D7               	goto	l3537
  9147  006F52  0A03               	xorlw	3	; case 2
  9148  006F54  B4D8               	btfsc	status,2,c
  9149  006F56  D7D9               	goto	l3538
  9150  006F58  0A01               	xorlw	1	; case 3
  9151  006F5A  B4D8               	btfsc	status,2,c
  9152  006F5C  D7DB               	goto	l3539
  9153  006F5E  0A07               	xorlw	7	; case 4
  9154  006F60  B4D8               	btfsc	status,2,c
  9155  006F62  D7DD               	goto	l3540
  9156  006F64  0A01               	xorlw	1	; case 5
  9157  006F66  B4D8               	btfsc	status,2,c
  9158  006F68  D7DF               	goto	l3541
  9159  006F6A  0A03               	xorlw	3	; case 6
  9160  006F6C  B4D8               	btfsc	status,2,c
  9161  006F6E  D7E1               	goto	l3542
  9162  006F70  0A01               	xorlw	1	; case 7
  9163  006F72  A4D8               	btfss	status,2,c
  9164                           
  9165                           ; BSR set to: 1
  9166  006F74  0012               	return	
  9167  006F76  D7E2               	goto	l3543
  9168  006F78                     __end_of_menu_lcd:
  9169                           	opt stack 0
  9170                           tblptru	equ	0xFF8
  9171                           tblptrh	equ	0xFF7
  9172                           tblptrl	equ	0xFF6
  9173                           tablat	equ	0xFF5
  9174                           intcon	equ	0xFF2
  9175                           intcon2	equ	0xFF1
  9176                           postinc0	equ	0xFEE
  9177                           wreg	equ	0xFE8
  9178                           postinc1	equ	0xFE6
  9179                           postdec2	equ	0xFDD
  9180                           fsr2l	equ	0xFD9
  9181                           status	equ	0xFD8
  9182                           
  9183 ;; *************** function _Lcd_Clear *****************
  9184 ;; Defined at:
  9185 ;;		line 53 in file "lcd.c"
  9186 ;; Parameters:    Size  Location     Type
  9187 ;;		None
  9188 ;; Auto vars:     Size  Location     Type
  9189 ;;		None
  9190 ;; Return value:  Size  Location     Type
  9191 ;;                  1    wreg      void 
  9192 ;; Registers used:
  9193 ;;		wreg, status,2, status,0, cstack
  9194 ;; Tracked objects:
  9195 ;;		On entry : 0/0
  9196 ;;		On exit  : 0/0
  9197 ;;		Unchanged: 0/0
  9198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9203 ;;Total ram usage:        0 bytes
  9204 ;; Hardware stack levels used:    1
  9205 ;; Hardware stack levels required when called:    7
  9206 ;; This function calls:
  9207 ;;		_Lcd_Cmd
  9208 ;; This function is called by:
  9209 ;;		_menu_lcd
  9210 ;; This function uses a non-reentrant model
  9211 ;;
  9212                           
  9213                           	psect	text6
  9214  009986                     __ptext6:
  9215                           	opt stack 0
  9216  009986                     _Lcd_Clear:
  9217                           	opt stack 22
  9218                           
  9219                           ;lcd.c: 56: TMR2ON = 0;
  9220                           
  9221                           ;incstack = 0
  9222  009986  94CA               	bcf	4042,2,c	;volatile
  9223                           
  9224                           ;lcd.c: 57: PORTC &= 0xF0;
  9225  009988  0EF0               	movlw	240
  9226  00998A  1682               	andwf	3970,f,c	;volatile
  9227                           
  9228                           ;lcd.c: 59: Lcd_Cmd(0);
  9229  00998C  0E00               	movlw	0
  9230  00998E  EC3E  F04C         	call	_Lcd_Cmd
  9231                           
  9232                           ;lcd.c: 60: Lcd_Cmd(1);
  9233  009992  0E01               	movlw	1
  9234  009994  EC3E  F04C         	call	_Lcd_Cmd
  9235                           
  9236                           ;lcd.c: 63: TMR2ON = 1;
  9237  009998  84CA               	bsf	4042,2,c	;volatile
  9238  00999A  0012               	return		;funcret
  9239  00999C                     __end_of_Lcd_Clear:
  9240                           	opt stack 0
  9241                           tblptru	equ	0xFF8
  9242                           tblptrh	equ	0xFF7
  9243                           tblptrl	equ	0xFF6
  9244                           tablat	equ	0xFF5
  9245                           intcon	equ	0xFF2
  9246                           intcon2	equ	0xFF1
  9247                           postinc0	equ	0xFEE
  9248                           wreg	equ	0xFE8
  9249                           postinc1	equ	0xFE6
  9250                           postdec2	equ	0xFDD
  9251                           fsr2l	equ	0xFD9
  9252                           status	equ	0xFD8
  9253                           
  9254 ;; *************** function _Function_H *****************
  9255 ;; Defined at:
  9256 ;;		line 1200 in file "menu.c"
  9257 ;; Parameters:    Size  Location     Type
  9258 ;;		None
  9259 ;; Auto vars:     Size  Location     Type
  9260 ;;		None
  9261 ;; Return value:  Size  Location     Type
  9262 ;;                  1    wreg      void 
  9263 ;; Registers used:
  9264 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9265 ;; Tracked objects:
  9266 ;;		On entry : 0/0
  9267 ;;		On exit  : 0/0
  9268 ;;		Unchanged: 0/0
  9269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9274 ;;Total ram usage:        0 bytes
  9275 ;; Hardware stack levels used:    1
  9276 ;; Hardware stack levels required when called:   18
  9277 ;; This function calls:
  9278 ;;		_Function_H_1
  9279 ;;		_Function_H_2
  9280 ;;		_Function_H_3
  9281 ;;		_Function_H_4
  9282 ;;		_Function_H_5
  9283 ;;		_Function_H_6
  9284 ;;		_Function_H_7
  9285 ;;		_Function_H_8
  9286 ;;		_Function_H_9
  9287 ;;		_Lcd_Print_String
  9288 ;;		___lbmod
  9289 ;;		___wmul
  9290 ;;		_clear_row2
  9291 ;;		_un_block_code
  9292 ;; This function is called by:
  9293 ;;		_menu_lcd
  9294 ;; This function uses a non-reentrant model
  9295 ;;
  9296                           
  9297                           	psect	text7
  9298  0076D4                     __ptext7:
  9299                           	opt stack 0
  9300  0076D4                     _Function_H:
  9301                           	opt stack 11
  9302                           
  9303                           ;menu.c: 1202: which_screen = ARPEGGIATOR_MENU;
  9304                           
  9305                           ;incstack = 0
  9306  0076D4  0E19               	movlw	25
  9307  0076D6  6E4F               	movwf	_which_screen,c
  9308                           
  9309                           ;menu.c: 1203: encoder_click = 0;
  9310  0076D8  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9311                           
  9312                           ;menu.c: 1204: lcd_print_once = 0;
  9313  0076DA  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9314                           
  9315                           ;menu.c: 1206: while(encoder_click == 0) {
  9316  0076DC  D023               	goto	l3773
  9317  0076DE                     
  9318                           ;menu.c: 1210: un_block_code();
  9319  0076DE  ECAB  F04C         	call	_un_block_code	;wreg free
  9320                           
  9321                           ;menu.c: 1212: if (lcd_print_once == 0) {
  9322  0076E2  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9323  0076E4  D01E               	goto	l3775
  9324                           
  9325                           ;menu.c: 1213: clear_row2();
  9326  0076E6  EC02  F04C         	call	_clear_row2	;wreg free
  9327                           
  9328                           ;menu.c: 1214: Lcd_Print_String(LCD_STRINGS[(arpeggiatorMenu.selector % arpeggiatorMenu.
      +                          number) + arpeggiatorMenu.address]);
  9329  0076EA  0100               	movlb	0	; () banked
  9330  0076EC  51DF               	movf	_arpeggiatorMenu& (0+255),w,b
  9331  0076EE  6EE6               	movwf	postinc1,c
  9332  0076F0  51E1               	movf	(_arpeggiatorMenu+2)& (0+255),w,b
  9333  0076F2  6EE6               	movwf	postinc1,c
  9334  0076F4  EC61  F041         	call	___lbmod	;wreg free
  9335  0076F8  503F               	movf	btemp,w,c
  9336  0076FA  0100               	movlb	0	; () banked
  9337  0076FC  25E0               	addwf	(_arpeggiatorMenu+1)& (0+255),w,b
  9338  0076FE  6F60               	movwf	___wmul@multiplier& (0+255),b
  9339  007700  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9340  007702  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9341  007704  0E00               	movlw	0
  9342  007706  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9343  007708  0E11               	movlw	17
  9344  00770A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9345  00770C  EC2A  F04C         	call	___wmul	;wreg free
  9346  007710  0E9E               	movlw	low _LCD_STRINGS
  9347  007712  0100               	movlb	0	; () banked
  9348  007714  2560               	addwf	?___wmul& (0+255),w,b
  9349  007716  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9350  007718  0EF3               	movlw	high _LCD_STRINGS
  9351  00771A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9352  00771C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9353  00771E  EC74  F042         	call	_Lcd_Print_String	;wreg free
  9354  007722                     l3775:
  9355                           
  9356                           ;menu.c: 1215: }
  9357                           ;menu.c: 1216: lcd_print_once = 1;
  9358  007722  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9359  007724                     l3773:
  9360  007724  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9361  007726  D7DB               	goto	l3774
  9362                           
  9363                           ;menu.c: 1217: }
  9364                           ;menu.c: 1219: if(arpeggiatorMenu.selector == 0) {Function_H_1();}
  9365  007728  0100               	movlb	0	; () banked
  9366  00772A  51E1               	movf	(_arpeggiatorMenu+2)& (0+255),w,b
  9367  00772C  B4D8               	btfsc	status,2,c
  9368                           
  9369                           ; BSR set to: 0
  9370  00772E  EC2B  F038         	call	_Function_H_1	;wreg free
  9371                           
  9372                           ;menu.c: 1220: if(arpeggiatorMenu.selector == 1) {Function_H_2();}
  9373  007732  0100               	movlb	0	; () banked
  9374  007734  05E1               	decf	(_arpeggiatorMenu+2)& (0+255),w,b
  9375  007736  B4D8               	btfsc	status,2,c
  9376                           
  9377                           ; BSR set to: 0
  9378  007738  EC14  F047         	call	_Function_H_2	;wreg free
  9379                           
  9380                           ;menu.c: 1221: if(arpeggiatorMenu.selector == 2) {Function_H_3();}
  9381  00773C  0E02               	movlw	2
  9382  00773E  0100               	movlb	0	; () banked
  9383  007740  19E1               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9384  007742  B4D8               	btfsc	status,2,c
  9385                           
  9386                           ; BSR set to: 0
  9387  007744  EC9A  F048         	call	_Function_H_3	;wreg free
  9388                           
  9389                           ;menu.c: 1222: if(arpeggiatorMenu.selector == 3) {Function_H_4();}
  9390  007748  0E03               	movlw	3
  9391  00774A  0100               	movlb	0	; () banked
  9392  00774C  19E1               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9393  00774E  B4D8               	btfsc	status,2,c
  9394                           
  9395                           ; BSR set to: 0
  9396  007750  ECCA  F03B         	call	_Function_H_4	;wreg free
  9397                           
  9398                           ;menu.c: 1223: if(arpeggiatorMenu.selector == 4) {Function_H_5();}
  9399  007754  0E04               	movlw	4
  9400  007756  0100               	movlb	0	; () banked
  9401  007758  19E1               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9402  00775A  B4D8               	btfsc	status,2,c
  9403                           
  9404                           ; BSR set to: 0
  9405  00775C  EC26  F03D         	call	_Function_H_5	;wreg free
  9406                           
  9407                           ;menu.c: 1224: if(arpeggiatorMenu.selector == 5) {Function_H_6();}
  9408  007760  0E05               	movlw	5
  9409  007762  0100               	movlb	0	; () banked
  9410  007764  19E1               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9411  007766  B4D8               	btfsc	status,2,c
  9412                           
  9413                           ; BSR set to: 0
  9414  007768  EC3C  F046         	call	_Function_H_6	;wreg free
  9415                           
  9416                           ;menu.c: 1225: if(arpeggiatorMenu.selector == 6) {Function_H_7();}
  9417  00776C  0E06               	movlw	6
  9418  00776E  0100               	movlb	0	; () banked
  9419  007770  19E1               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9420  007772  B4D8               	btfsc	status,2,c
  9421                           
  9422                           ; BSR set to: 0
  9423  007774  EC23  F03C         	call	_Function_H_7	;wreg free
  9424                           
  9425                           ;menu.c: 1226: if(arpeggiatorMenu.selector == 7) {Function_H_8();}
  9426  007778  0E07               	movlw	7
  9427  00777A  0100               	movlb	0	; () banked
  9428  00777C  19E1               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9429  00777E  B4D8               	btfsc	status,2,c
  9430                           
  9431                           ; BSR set to: 0
  9432  007780  EC05  F046         	call	_Function_H_8	;wreg free
  9433                           
  9434                           ;menu.c: 1227: if(arpeggiatorMenu.selector == 8) {Function_H_9();}
  9435  007784  0E08               	movlw	8
  9436  007786  0100               	movlb	0	; () banked
  9437  007788  19E1               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9438  00778A  A4D8               	btfss	status,2,c
  9439  00778C  0012               	return	
  9440                           
  9441                           ; BSR set to: 0
  9442  00778E  ECF6  F03F         	call	_Function_H_9	;wreg free
  9443  007792  0012               	return	
  9444  007794                     __end_of_Function_H:
  9445                           	opt stack 0
  9446                           tblptru	equ	0xFF8
  9447                           tblptrh	equ	0xFF7
  9448                           tblptrl	equ	0xFF6
  9449                           tablat	equ	0xFF5
  9450                           intcon	equ	0xFF2
  9451                           intcon2	equ	0xFF1
  9452                           postinc0	equ	0xFEE
  9453                           wreg	equ	0xFE8
  9454                           postinc1	equ	0xFE6
  9455                           postdec2	equ	0xFDD
  9456                           fsr2l	equ	0xFD9
  9457                           status	equ	0xFD8
  9458                           
  9459 ;; *************** function _Function_H_9 *****************
  9460 ;; Defined at:
  9461 ;;		line 1829 in file "menu.c"
  9462 ;; Parameters:    Size  Location     Type
  9463 ;;		None
  9464 ;; Auto vars:     Size  Location     Type
  9465 ;;		None
  9466 ;; Return value:  Size  Location     Type
  9467 ;;                  1    wreg      void 
  9468 ;; Registers used:
  9469 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9470 ;; Tracked objects:
  9471 ;;		On entry : 0/0
  9472 ;;		On exit  : 0/0
  9473 ;;		Unchanged: 0/0
  9474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9479 ;;Total ram usage:        0 bytes
  9480 ;; Hardware stack levels used:    1
  9481 ;; Hardware stack levels required when called:   17
  9482 ;; This function calls:
  9483 ;;		_Function_H_9_1
  9484 ;;		_Function_H_9_2
  9485 ;;		_Function_H_9_3
  9486 ;;		_Function_H_9_4
  9487 ;;		_Lcd_Print_String
  9488 ;;		___lbmod
  9489 ;;		___wmul
  9490 ;;		_clear_row1
  9491 ;;		_clear_row2
  9492 ;;		_un_block_code
  9493 ;; This function is called by:
  9494 ;;		_Function_H
  9495 ;; This function uses a non-reentrant model
  9496 ;;
  9497                           
  9498                           	psect	text8
  9499  007FEC                     __ptext8:
  9500                           	opt stack 0
  9501  007FEC                     _Function_H_9:
  9502                           	opt stack 11
  9503                           
  9504                           ;menu.c: 1831: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_MENU,
  9505                           ;menu.c: 1832: lcd_print_once = 0;
  9506                           
  9507                           ;incstack = 0
  9508  007FEC  0E26               	movlw	38
  9509  007FEE  6E4F               	movwf	_which_screen,c
  9510  007FF0  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9511                           
  9512                           ;menu.c: 1833: encoder_click = 0;
  9513  007FF2  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9514                           
  9515                           ;menu.c: 1835: while(encoder_click == 0) {
  9516  007FF4  D02C               	goto	l3937
  9517  007FF6                     
  9518                           ;menu.c: 1839: un_block_code();
  9519  007FF6  ECAB  F04C         	call	_un_block_code	;wreg free
  9520                           
  9521                           ;menu.c: 1841: if (lcd_print_once == 0) {
  9522  007FFA  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9523  007FFC  D027               	goto	l3939
  9524                           
  9525                           ;menu.c: 1842: clear_row1();
  9526  007FFE  EC16  F04C         	call	_clear_row1	;wreg free
  9527                           
  9528                           ;menu.c: 1843: Lcd_Print_String("Last Note Mode:");
  9529  008002  0E0D               	movlw	low STR_75
  9530  008004  0100               	movlb	0	; () banked
  9531  008006  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9532  008008  0EFE               	movlw	high STR_75
  9533  00800A  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9534  00800C  EC74  F042         	call	_Lcd_Print_String	;wreg free
  9535                           
  9536                           ;menu.c: 1844: clear_row2();
  9537  008010  EC02  F04C         	call	_clear_row2	;wreg free
  9538                           
  9539                           ;menu.c: 1845: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
  9540  008014  0100               	movlb	0	; () banked
  9541  008016  51DC               	movf	_arpeggiatorLastNoteModeMenu& (0+255),w,b
  9542  008018  6EE6               	movwf	postinc1,c
  9543  00801A  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9544  00801C  6EE6               	movwf	postinc1,c
  9545  00801E  EC61  F041         	call	___lbmod	;wreg free
  9546  008022  503F               	movf	btemp,w,c
  9547  008024  0100               	movlb	0	; () banked
  9548  008026  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
  9549  008028  6F60               	movwf	___wmul@multiplier& (0+255),b
  9550  00802A  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9551  00802C  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9552  00802E  0E00               	movlw	0
  9553  008030  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9554  008032  0E11               	movlw	17
  9555  008034  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9556  008036  EC2A  F04C         	call	___wmul	;wreg free
  9557  00803A  0E9E               	movlw	low _LCD_STRINGS
  9558  00803C  0100               	movlb	0	; () banked
  9559  00803E  2560               	addwf	?___wmul& (0+255),w,b
  9560  008040  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9561  008042  0EF3               	movlw	high _LCD_STRINGS
  9562  008044  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9563  008046  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9564  008048  EC74  F042         	call	_Lcd_Print_String	;wreg free
  9565  00804C                     l3939:
  9566                           
  9567                           ;menu.c: 1846: }
  9568                           ;menu.c: 1847: lcd_print_once = 1;
  9569  00804C  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9570  00804E                     l3937:
  9571  00804E  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9572  008050  D7D2               	goto	l3938
  9573                           
  9574                           ;menu.c: 1848: }
  9575                           ;menu.c: 1851: if(arpeggiatorLastNoteModeMenu.selector == 0) {Function_H_9_1();}
  9576  008052  0100               	movlb	0	; () banked
  9577  008054  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9578  008056  B4D8               	btfsc	status,2,c
  9579                           
  9580                           ; BSR set to: 0
  9581  008058  EC6B  F03E         	call	_Function_H_9_1	;wreg free
  9582                           
  9583                           ;menu.c: 1852: if(arpeggiatorLastNoteModeMenu.selector == 1) {Function_H_9_2();}
  9584  00805C  0100               	movlb	0	; () banked
  9585  00805E  05DE               	decf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9586  008060  B4D8               	btfsc	status,2,c
  9587                           
  9588                           ; BSR set to: 0
  9589  008062  EC1B  F03E         	call	_Function_H_9_2	;wreg free
  9590                           
  9591                           ;menu.c: 1853: if(arpeggiatorLastNoteModeMenu.selector == 2) {Function_H_9_3();}
  9592  008066  0E02               	movlw	2
  9593  008068  0100               	movlb	0	; () banked
  9594  00806A  19DE               	xorwf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9595  00806C  B4D8               	btfsc	status,2,c
  9596                           
  9597                           ; BSR set to: 0
  9598  00806E  ECCB  F03D         	call	_Function_H_9_3	;wreg free
  9599                           
  9600                           ;menu.c: 1854: if(arpeggiatorLastNoteModeMenu.selector == 3) {Function_H_9_4();}
  9601  008072  0E03               	movlw	3
  9602  008074  0100               	movlb	0	; () banked
  9603  008076  19DE               	xorwf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9604  008078  A4D8               	btfss	status,2,c
  9605  00807A  0012               	return	
  9606                           
  9607                           ; BSR set to: 0
  9608  00807C  EC7B  F03D         	call	_Function_H_9_4	;wreg free
  9609  008080  0012               	return	
  9610  008082                     __end_of_Function_H_9:
  9611                           	opt stack 0
  9612                           tblptru	equ	0xFF8
  9613                           tblptrh	equ	0xFF7
  9614                           tblptrl	equ	0xFF6
  9615                           tablat	equ	0xFF5
  9616                           intcon	equ	0xFF2
  9617                           intcon2	equ	0xFF1
  9618                           postinc0	equ	0xFEE
  9619                           wreg	equ	0xFE8
  9620                           postinc1	equ	0xFE6
  9621                           postdec2	equ	0xFDD
  9622                           fsr2l	equ	0xFD9
  9623                           status	equ	0xFD8
  9624                           
  9625 ;; *************** function _Function_H_9_4 *****************
  9626 ;; Defined at:
  9627 ;;		line 1800 in file "menu.c"
  9628 ;; Parameters:    Size  Location     Type
  9629 ;;		None
  9630 ;; Auto vars:     Size  Location     Type
  9631 ;;		None
  9632 ;; Return value:  Size  Location     Type
  9633 ;;                  1    wreg      void 
  9634 ;; Registers used:
  9635 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9636 ;; Tracked objects:
  9637 ;;		On entry : 0/0
  9638 ;;		On exit  : 0/0
  9639 ;;		Unchanged: 0/0
  9640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9645 ;;Total ram usage:        0 bytes
  9646 ;; Hardware stack levels used:    1
  9647 ;; Hardware stack levels required when called:   16
  9648 ;; This function calls:
  9649 ;;		_Lcd_Print_String
  9650 ;;		___lbmod
  9651 ;;		___wmul
  9652 ;;		_clear_row1
  9653 ;;		_clear_row2
  9654 ;;		_un_block_code
  9655 ;; This function is called by:
  9656 ;;		_Function_H_9
  9657 ;; This function uses a non-reentrant model
  9658 ;;
  9659                           
  9660                           	psect	text9
  9661  007AF6                     __ptext9:
  9662                           	opt stack 0
  9663  007AF6                     _Function_H_9_4:
  9664                           	opt stack 11
  9665                           
  9666                           ;menu.c: 1802: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_RESET_MENU;
  9667                           
  9668                           ;incstack = 0
  9669  007AF6  0E2A               	movlw	42
  9670  007AF8  6E4F               	movwf	_which_screen,c
  9671                           
  9672                           ;menu.c: 1803: lcd_print_once = 0;
  9673  007AFA  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9674                           
  9675                           ;menu.c: 1804: encoder_click = 0;
  9676  007AFC  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9677                           
  9678                           ;menu.c: 1806: arpeggiatorLastNoteModeResetMenu.selector = LAST_NOTE_MODE_RESET;
  9679  007AFE  0E00               	movlw	0
  9680  007B00  BC02               	btfsc	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  9681  007B02  0E01               	movlw	1
  9682  007B04  0101               	movlb	1	; () banked
  9683  007B06  6F0A               	movwf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),b
  9684                           
  9685                           ;menu.c: 1808: while(encoder_click == 0) {
  9686  007B08  D03D               	goto	l3928
  9687  007B0A                     
  9688                           ;menu.c: 1812: un_block_code();
  9689                           
  9690                           ; BSR set to: 1
  9691  007B0A  ECAB  F04C         	call	_un_block_code	;wreg free
  9692                           
  9693                           ;menu.c: 1814: if (lcd_print_once == 0) {
  9694  007B0E  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9695  007B10  D038               	goto	l3932
  9696                           
  9697                           ;menu.c: 1815: clear_row1();
  9698  007B12  EC16  F04C         	call	_clear_row1	;wreg free
  9699                           
  9700                           ;menu.c: 1816: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
  9701  007B16  0100               	movlb	0	; () banked
  9702  007B18  51DC               	movf	_arpeggiatorLastNoteModeMenu& (0+255),w,b
  9703  007B1A  6EE6               	movwf	postinc1,c
  9704  007B1C  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9705  007B1E  6EE6               	movwf	postinc1,c
  9706  007B20  EC61  F041         	call	___lbmod	;wreg free
  9707  007B24  503F               	movf	btemp,w,c
  9708  007B26  0100               	movlb	0	; () banked
  9709  007B28  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
  9710  007B2A  6F60               	movwf	___wmul@multiplier& (0+255),b
  9711  007B2C  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9712  007B2E  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9713  007B30  0E00               	movlw	0
  9714  007B32  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9715  007B34  0E11               	movlw	17
  9716  007B36  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9717  007B38  EC2A  F04C         	call	___wmul	;wreg free
  9718  007B3C  0E9E               	movlw	low _LCD_STRINGS
  9719  007B3E  0100               	movlb	0	; () banked
  9720  007B40  2560               	addwf	?___wmul& (0+255),w,b
  9721  007B42  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9722  007B44  0EF3               	movlw	high _LCD_STRINGS
  9723  007B46  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9724  007B48  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9725  007B4A  EC74  F042         	call	_Lcd_Print_String	;wreg free
  9726                           
  9727                           ;menu.c: 1817: if(arpeggiatorLastNoteModeResetMenu.selector == 0) {clear_row2();Lcd_Prin
      +                          t_String("IMMEDIATE");}
  9728  007B4E  0101               	movlb	1	; () banked
  9729  007B50  510A               	movf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),w,b
  9730  007B52  A4D8               	btfss	status,2,c
  9731  007B54  D009               	goto	l3931
  9732                           
  9733                           ; BSR set to: 1
  9734  007B56  EC02  F04C         	call	_clear_row2	;wreg free
  9735  007B5A  0EA9               	movlw	low STR_67
  9736  007B5C  0100               	movlb	0	; () banked
  9737  007B5E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9738  007B60  0EFF               	movlw	high STR_67
  9739  007B62  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9740  007B64  EC74  F042         	call	_Lcd_Print_String	;wreg free
  9741  007B68                     l3931:
  9742                           
  9743                           ;menu.c: 1818: if(arpeggiatorLastNoteModeResetMenu.selector == 1) {clear_row2();Lcd_Prin
      +                          t_String("FINISH LAST");}
  9744  007B68  0101               	movlb	1	; () banked
  9745  007B6A  050A               	decf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),w,b
  9746  007B6C  A4D8               	btfss	status,2,c
  9747  007B6E  D009               	goto	l3932
  9748                           
  9749                           ; BSR set to: 1
  9750  007B70  EC02  F04C         	call	_clear_row2	;wreg free
  9751  007B74  0E7C               	movlw	low STR_68
  9752  007B76  0100               	movlb	0	; () banked
  9753  007B78  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9754  007B7A  0EFF               	movlw	high STR_68
  9755  007B7C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9756  007B7E  EC74  F042         	call	_Lcd_Print_String	;wreg free
  9757  007B82                     l3932:
  9758                           
  9759                           ;menu.c: 1819: }
  9760                           ;menu.c: 1820: lcd_print_once = 1;
  9761  007B82  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9762  007B84                     l3928:
  9763  007B84  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9764  007B86  D7C1               	goto	l3929
  9765                           
  9766                           ;menu.c: 1821: }
  9767                           ;menu.c: 1823: LAST_NOTE_MODE_RESET = arpeggiatorLastNoteModeResetMenu.selector;
  9768  007B88  0101               	movlb	1	; () banked
  9769  007B8A  A10A               	btfss	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),0,b
  9770  007B8C  D002               	goto	u58040
  9771  007B8E  8C02               	bsf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  9772  007B90  0012               	return	
  9773  007B92                     u58040:
  9774  007B92  9C02               	bcf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  9775  007B94  0012               	return		;funcret
  9776  007B96                     __end_of_Function_H_9_4:
  9777                           	opt stack 0
  9778                           tblptru	equ	0xFF8
  9779                           tblptrh	equ	0xFF7
  9780                           tblptrl	equ	0xFF6
  9781                           tablat	equ	0xFF5
  9782                           intcon	equ	0xFF2
  9783                           intcon2	equ	0xFF1
  9784                           postinc0	equ	0xFEE
  9785                           wreg	equ	0xFE8
  9786                           postinc1	equ	0xFE6
  9787                           postdec2	equ	0xFDD
  9788                           fsr2l	equ	0xFD9
  9789                           status	equ	0xFD8
  9790                           
  9791 ;; *************** function _Function_H_9_3 *****************
  9792 ;; Defined at:
  9793 ;;		line 1772 in file "menu.c"
  9794 ;; Parameters:    Size  Location     Type
  9795 ;;		None
  9796 ;; Auto vars:     Size  Location     Type
  9797 ;;		None
  9798 ;; Return value:  Size  Location     Type
  9799 ;;                  1    wreg      void 
  9800 ;; Registers used:
  9801 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9802 ;; Tracked objects:
  9803 ;;		On entry : 0/0
  9804 ;;		On exit  : 0/0
  9805 ;;		Unchanged: 0/0
  9806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9811 ;;Total ram usage:        0 bytes
  9812 ;; Hardware stack levels used:    1
  9813 ;; Hardware stack levels required when called:   16
  9814 ;; This function calls:
  9815 ;;		_Lcd_Print_String
  9816 ;;		___lbmod
  9817 ;;		___wmul
  9818 ;;		_clear_row1
  9819 ;;		_clear_row2
  9820 ;;		_un_block_code
  9821 ;; This function is called by:
  9822 ;;		_Function_H_9
  9823 ;; This function uses a non-reentrant model
  9824 ;;
  9825                           
  9826                           	psect	text10
  9827  007B96                     __ptext10:
  9828                           	opt stack 0
  9829  007B96                     _Function_H_9_3:
  9830                           	opt stack 11
  9831                           
  9832                           ;menu.c: 1774: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU;
  9833                           
  9834                           ;incstack = 0
  9835  007B96  0E29               	movlw	41
  9836  007B98  6E4F               	movwf	_which_screen,c
  9837                           
  9838                           ;menu.c: 1775: lcd_print_once = 0;
  9839  007B9A  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9840                           
  9841                           ;menu.c: 1776: encoder_click = 0;
  9842  007B9C  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9843                           
  9844                           ;menu.c: 1778: arpeggiatorLastNoteModeTransposeMenu.selector = LAST_NOTE_MODE_TRANSPOSE;
  9845  007B9E  0E00               	movlw	0
  9846  007BA0  BE02               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
  9847  007BA2  0E01               	movlw	1
  9848  007BA4  0101               	movlb	1	; () banked
  9849  007BA6  6F0D               	movwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),b
  9850                           
  9851                           ;menu.c: 1780: while(encoder_click == 0) {
  9852  007BA8  D03D               	goto	l3919
  9853  007BAA                     
  9854                           ;menu.c: 1784: un_block_code();
  9855                           
  9856                           ; BSR set to: 1
  9857  007BAA  ECAB  F04C         	call	_un_block_code	;wreg free
  9858                           
  9859                           ;menu.c: 1786: if (lcd_print_once == 0) {
  9860  007BAE  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9861  007BB0  D038               	goto	l3923
  9862                           
  9863                           ;menu.c: 1787: clear_row1();
  9864  007BB2  EC16  F04C         	call	_clear_row1	;wreg free
  9865                           
  9866                           ;menu.c: 1788: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
  9867  007BB6  0100               	movlb	0	; () banked
  9868  007BB8  51DC               	movf	_arpeggiatorLastNoteModeMenu& (0+255),w,b
  9869  007BBA  6EE6               	movwf	postinc1,c
  9870  007BBC  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9871  007BBE  6EE6               	movwf	postinc1,c
  9872  007BC0  EC61  F041         	call	___lbmod	;wreg free
  9873  007BC4  503F               	movf	btemp,w,c
  9874  007BC6  0100               	movlb	0	; () banked
  9875  007BC8  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
  9876  007BCA  6F60               	movwf	___wmul@multiplier& (0+255),b
  9877  007BCC  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9878  007BCE  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9879  007BD0  0E00               	movlw	0
  9880  007BD2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9881  007BD4  0E11               	movlw	17
  9882  007BD6  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9883  007BD8  EC2A  F04C         	call	___wmul	;wreg free
  9884  007BDC  0E9E               	movlw	low _LCD_STRINGS
  9885  007BDE  0100               	movlb	0	; () banked
  9886  007BE0  2560               	addwf	?___wmul& (0+255),w,b
  9887  007BE2  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9888  007BE4  0EF3               	movlw	high _LCD_STRINGS
  9889  007BE6  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9890  007BE8  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9891  007BEA  EC74  F042         	call	_Lcd_Print_String	;wreg free
  9892                           
  9893                           ;menu.c: 1789: if(arpeggiatorLastNoteModeTransposeMenu.selector == 0) {clear_row2();Lcd_
      +                          Print_String("IMMEDIATE");}
  9894  007BEE  0101               	movlb	1	; () banked
  9895  007BF0  510D               	movf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),w,b
  9896  007BF2  A4D8               	btfss	status,2,c
  9897  007BF4  D009               	goto	l3922
  9898                           
  9899                           ; BSR set to: 1
  9900  007BF6  EC02  F04C         	call	_clear_row2	;wreg free
  9901  007BFA  0EA9               	movlw	low STR_67
  9902  007BFC  0100               	movlb	0	; () banked
  9903  007BFE  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9904  007C00  0EFF               	movlw	high STR_67
  9905  007C02  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9906  007C04  EC74  F042         	call	_Lcd_Print_String	;wreg free
  9907  007C08                     l3922:
  9908                           
  9909                           ;menu.c: 1790: if(arpeggiatorLastNoteModeTransposeMenu.selector == 1) {clear_row2();Lcd_
      +                          Print_String("FINISH LAST");}
  9910  007C08  0101               	movlb	1	; () banked
  9911  007C0A  050D               	decf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),w,b
  9912  007C0C  A4D8               	btfss	status,2,c
  9913  007C0E  D009               	goto	l3923
  9914                           
  9915                           ; BSR set to: 1
  9916  007C10  EC02  F04C         	call	_clear_row2	;wreg free
  9917  007C14  0E7C               	movlw	low STR_68
  9918  007C16  0100               	movlb	0	; () banked
  9919  007C18  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9920  007C1A  0EFF               	movlw	high STR_68
  9921  007C1C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9922  007C1E  EC74  F042         	call	_Lcd_Print_String	;wreg free
  9923  007C22                     l3923:
  9924                           
  9925                           ;menu.c: 1791: }
  9926                           ;menu.c: 1792: lcd_print_once = 1;
  9927  007C22  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9928  007C24                     l3919:
  9929  007C24  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9930  007C26  D7C1               	goto	l3920
  9931                           
  9932                           ;menu.c: 1793: }
  9933                           ;menu.c: 1795: LAST_NOTE_MODE_TRANSPOSE = arpeggiatorLastNoteModeTransposeMenu.selector;
  9934  007C28  0101               	movlb	1	; () banked
  9935  007C2A  A10D               	btfss	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),0,b
  9936  007C2C  D002               	goto	u57980
  9937  007C2E  8E02               	bsf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
  9938  007C30  0012               	return	
  9939  007C32                     u57980:
  9940  007C32  9E02               	bcf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
  9941  007C34  0012               	return		;funcret
  9942  007C36                     __end_of_Function_H_9_3:
  9943                           	opt stack 0
  9944                           tblptru	equ	0xFF8
  9945                           tblptrh	equ	0xFF7
  9946                           tblptrl	equ	0xFF6
  9947                           tablat	equ	0xFF5
  9948                           intcon	equ	0xFF2
  9949                           intcon2	equ	0xFF1
  9950                           postinc0	equ	0xFEE
  9951                           wreg	equ	0xFE8
  9952                           postinc1	equ	0xFE6
  9953                           postdec2	equ	0xFDD
  9954                           fsr2l	equ	0xFD9
  9955                           status	equ	0xFD8
  9956                           
  9957 ;; *************** function _Function_H_9_2 *****************
  9958 ;; Defined at:
  9959 ;;		line 1745 in file "menu.c"
  9960 ;; Parameters:    Size  Location     Type
  9961 ;;		None
  9962 ;; Auto vars:     Size  Location     Type
  9963 ;;		None
  9964 ;; Return value:  Size  Location     Type
  9965 ;;                  1    wreg      void 
  9966 ;; Registers used:
  9967 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9968 ;; Tracked objects:
  9969 ;;		On entry : 0/0
  9970 ;;		On exit  : 0/0
  9971 ;;		Unchanged: 0/0
  9972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9977 ;;Total ram usage:        0 bytes
  9978 ;; Hardware stack levels used:    1
  9979 ;; Hardware stack levels required when called:   16
  9980 ;; This function calls:
  9981 ;;		_Lcd_Print_String
  9982 ;;		___lbmod
  9983 ;;		___wmul
  9984 ;;		_clear_row1
  9985 ;;		_clear_row2
  9986 ;;		_un_block_code
  9987 ;; This function is called by:
  9988 ;;		_Function_H_9
  9989 ;; This function uses a non-reentrant model
  9990 ;;
  9991                           
  9992                           	psect	text11
  9993  007C36                     __ptext11:
  9994                           	opt stack 0
  9995  007C36                     _Function_H_9_2:
  9996                           	opt stack 11
  9997                           
  9998                           ;menu.c: 1747: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_KEY_RELEASE_MENU;
  9999                           
 10000                           ;incstack = 0
 10001  007C36  0E28               	movlw	40
 10002  007C38  6E4F               	movwf	_which_screen,c
 10003                           
 10004                           ;menu.c: 1748: lcd_print_once = 0;
 10005  007C3A  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10006                           
 10007                           ;menu.c: 1749: encoder_click = 0;
 10008  007C3C  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10009                           
 10010                           ;menu.c: 1751: arpeggiatorLastNoteModeKeyReleaseMenu.selector = LAST_NOTE_MODE_KEY_RELEA
      +                          SE;
 10011  007C3E  0E00               	movlw	0
 10012  007C40  B003               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 10013  007C42  0E01               	movlw	1
 10014  007C44  0101               	movlb	1	; () banked
 10015  007C46  6F10               	movwf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),b
 10016                           
 10017                           ;menu.c: 1753: while(encoder_click == 0) {
 10018  007C48  D03D               	goto	l3910
 10019  007C4A                     
 10020                           ;menu.c: 1757: un_block_code();
 10021                           
 10022                           ; BSR set to: 1
 10023  007C4A  ECAB  F04C         	call	_un_block_code	;wreg free
 10024                           
 10025                           ;menu.c: 1759: if (lcd_print_once == 0) {
 10026  007C4E  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10027  007C50  D038               	goto	l3914
 10028                           
 10029                           ;menu.c: 1760: clear_row1();
 10030  007C52  EC16  F04C         	call	_clear_row1	;wreg free
 10031                           
 10032                           ;menu.c: 1761: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
 10033  007C56  0100               	movlb	0	; () banked
 10034  007C58  51DC               	movf	_arpeggiatorLastNoteModeMenu& (0+255),w,b
 10035  007C5A  6EE6               	movwf	postinc1,c
 10036  007C5C  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 10037  007C5E  6EE6               	movwf	postinc1,c
 10038  007C60  EC61  F041         	call	___lbmod	;wreg free
 10039  007C64  503F               	movf	btemp,w,c
 10040  007C66  0100               	movlb	0	; () banked
 10041  007C68  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
 10042  007C6A  6F60               	movwf	___wmul@multiplier& (0+255),b
 10043  007C6C  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 10044  007C6E  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 10045  007C70  0E00               	movlw	0
 10046  007C72  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10047  007C74  0E11               	movlw	17
 10048  007C76  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10049  007C78  EC2A  F04C         	call	___wmul	;wreg free
 10050  007C7C  0E9E               	movlw	low _LCD_STRINGS
 10051  007C7E  0100               	movlb	0	; () banked
 10052  007C80  2560               	addwf	?___wmul& (0+255),w,b
 10053  007C82  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10054  007C84  0EF3               	movlw	high _LCD_STRINGS
 10055  007C86  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10056  007C88  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10057  007C8A  EC74  F042         	call	_Lcd_Print_String	;wreg free
 10058                           
 10059                           ;menu.c: 1762: if(arpeggiatorLastNoteModeKeyReleaseMenu.selector == 0) {clear_row2();Lcd
      +                          _Print_String("IMMEDIATE");}
 10060  007C8E  0101               	movlb	1	; () banked
 10061  007C90  5110               	movf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),w,b
 10062  007C92  A4D8               	btfss	status,2,c
 10063  007C94  D009               	goto	l3913
 10064                           
 10065                           ; BSR set to: 1
 10066  007C96  EC02  F04C         	call	_clear_row2	;wreg free
 10067  007C9A  0EA9               	movlw	low STR_67
 10068  007C9C  0100               	movlb	0	; () banked
 10069  007C9E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10070  007CA0  0EFF               	movlw	high STR_67
 10071  007CA2  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10072  007CA4  EC74  F042         	call	_Lcd_Print_String	;wreg free
 10073  007CA8                     l3913:
 10074                           
 10075                           ;menu.c: 1763: if(arpeggiatorLastNoteModeKeyReleaseMenu.selector == 1) {clear_row2();Lcd
      +                          _Print_String("FINISH LAST");}
 10076  007CA8  0101               	movlb	1	; () banked
 10077  007CAA  0510               	decf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),w,b
 10078  007CAC  A4D8               	btfss	status,2,c
 10079  007CAE  D009               	goto	l3914
 10080                           
 10081                           ; BSR set to: 1
 10082  007CB0  EC02  F04C         	call	_clear_row2	;wreg free
 10083  007CB4  0E7C               	movlw	low STR_68
 10084  007CB6  0100               	movlb	0	; () banked
 10085  007CB8  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10086  007CBA  0EFF               	movlw	high STR_68
 10087  007CBC  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10088  007CBE  EC74  F042         	call	_Lcd_Print_String	;wreg free
 10089  007CC2                     l3914:
 10090                           
 10091                           ;menu.c: 1764: }
 10092                           ;menu.c: 1765: lcd_print_once = 1;
 10093  007CC2  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10094  007CC4                     l3910:
 10095  007CC4  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10096  007CC6  D7C1               	goto	l3911
 10097                           
 10098                           ;menu.c: 1766: }
 10099                           ;menu.c: 1768: LAST_NOTE_MODE_KEY_RELEASE = arpeggiatorLastNoteModeKeyReleaseMenu.select
      +                          or;
 10100  007CC8  0101               	movlb	1	; () banked
 10101  007CCA  A110               	btfss	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),0,b
 10102  007CCC  D002               	goto	u57920
 10103  007CCE  8003               	bsf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 10104  007CD0  0012               	return	
 10105  007CD2                     u57920:
 10106  007CD2  9003               	bcf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 10107  007CD4  0012               	return		;funcret
 10108  007CD6                     __end_of_Function_H_9_2:
 10109                           	opt stack 0
 10110                           tblptru	equ	0xFF8
 10111                           tblptrh	equ	0xFF7
 10112                           tblptrl	equ	0xFF6
 10113                           tablat	equ	0xFF5
 10114                           intcon	equ	0xFF2
 10115                           intcon2	equ	0xFF1
 10116                           postinc0	equ	0xFEE
 10117                           wreg	equ	0xFE8
 10118                           postinc1	equ	0xFE6
 10119                           postdec2	equ	0xFDD
 10120                           fsr2l	equ	0xFD9
 10121                           status	equ	0xFD8
 10122                           
 10123 ;; *************** function _Function_H_9_1 *****************
 10124 ;; Defined at:
 10125 ;;		line 1718 in file "menu.c"
 10126 ;; Parameters:    Size  Location     Type
 10127 ;;		None
 10128 ;; Auto vars:     Size  Location     Type
 10129 ;;		None
 10130 ;; Return value:  Size  Location     Type
 10131 ;;                  1    wreg      void 
 10132 ;; Registers used:
 10133 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10134 ;; Tracked objects:
 10135 ;;		On entry : 0/0
 10136 ;;		On exit  : 0/0
 10137 ;;		Unchanged: 0/0
 10138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10142 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10143 ;;Total ram usage:        0 bytes
 10144 ;; Hardware stack levels used:    1
 10145 ;; Hardware stack levels required when called:   16
 10146 ;; This function calls:
 10147 ;;		_Lcd_Print_String
 10148 ;;		___lbmod
 10149 ;;		___wmul
 10150 ;;		_clear_row1
 10151 ;;		_clear_row2
 10152 ;;		_un_block_code
 10153 ;; This function is called by:
 10154 ;;		_Function_H_9
 10155 ;; This function uses a non-reentrant model
 10156 ;;
 10157                           
 10158                           	psect	text12
 10159  007CD6                     __ptext12:
 10160                           	opt stack 0
 10161  007CD6                     _Function_H_9_1:
 10162                           	opt stack 11
 10163                           
 10164                           ;menu.c: 1720: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_KEY_PRESS_MENU;
 10165                           
 10166                           ;incstack = 0
 10167  007CD6  0E27               	movlw	39
 10168  007CD8  6E4F               	movwf	_which_screen,c
 10169                           
 10170                           ;menu.c: 1721: lcd_print_once = 0;
 10171  007CDA  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10172                           
 10173                           ;menu.c: 1722: encoder_click = 0;
 10174  007CDC  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10175                           
 10176                           ;menu.c: 1724: arpeggiatorLastNoteModeKeyPressMenu.selector = LAST_NOTE_MODE_KEY_PRESS;
 10177  007CDE  0E00               	movlw	0
 10178  007CE0  B203               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 10179  007CE2  0E01               	movlw	1
 10180  007CE4  0101               	movlb	1	; () banked
 10181  007CE6  6F13               	movwf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),b
 10182                           
 10183                           ;menu.c: 1726: while(encoder_click == 0) {
 10184  007CE8  D03D               	goto	l3901
 10185  007CEA                     
 10186                           ;menu.c: 1730: un_block_code();
 10187                           
 10188                           ; BSR set to: 1
 10189  007CEA  ECAB  F04C         	call	_un_block_code	;wreg free
 10190                           
 10191                           ;menu.c: 1732: if (lcd_print_once == 0) {
 10192  007CEE  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10193  007CF0  D038               	goto	l3905
 10194                           
 10195                           ;menu.c: 1733: clear_row1();
 10196  007CF2  EC16  F04C         	call	_clear_row1	;wreg free
 10197                           
 10198                           ;menu.c: 1734: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
 10199  007CF6  0100               	movlb	0	; () banked
 10200  007CF8  51DC               	movf	_arpeggiatorLastNoteModeMenu& (0+255),w,b
 10201  007CFA  6EE6               	movwf	postinc1,c
 10202  007CFC  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 10203  007CFE  6EE6               	movwf	postinc1,c
 10204  007D00  EC61  F041         	call	___lbmod	;wreg free
 10205  007D04  503F               	movf	btemp,w,c
 10206  007D06  0100               	movlb	0	; () banked
 10207  007D08  25DD               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
 10208  007D0A  6F60               	movwf	___wmul@multiplier& (0+255),b
 10209  007D0C  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 10210  007D0E  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 10211  007D10  0E00               	movlw	0
 10212  007D12  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10213  007D14  0E11               	movlw	17
 10214  007D16  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10215  007D18  EC2A  F04C         	call	___wmul	;wreg free
 10216  007D1C  0E9E               	movlw	low _LCD_STRINGS
 10217  007D1E  0100               	movlb	0	; () banked
 10218  007D20  2560               	addwf	?___wmul& (0+255),w,b
 10219  007D22  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10220  007D24  0EF3               	movlw	high _LCD_STRINGS
 10221  007D26  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10222  007D28  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10223  007D2A  EC74  F042         	call	_Lcd_Print_String	;wreg free
 10224                           
 10225                           ;menu.c: 1735: if(arpeggiatorLastNoteModeKeyPressMenu.selector == 0) {clear_row2();Lcd_P
      +                          rint_String("IMMEDIATE");}
 10226  007D2E  0101               	movlb	1	; () banked
 10227  007D30  5113               	movf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),w,b
 10228  007D32  A4D8               	btfss	status,2,c
 10229  007D34  D009               	goto	l3904
 10230                           
 10231                           ; BSR set to: 1
 10232  007D36  EC02  F04C         	call	_clear_row2	;wreg free
 10233  007D3A  0EA9               	movlw	low STR_67
 10234  007D3C  0100               	movlb	0	; () banked
 10235  007D3E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10236  007D40  0EFF               	movlw	high STR_67
 10237  007D42  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10238  007D44  EC74  F042         	call	_Lcd_Print_String	;wreg free
 10239  007D48                     l3904:
 10240                           
 10241                           ;menu.c: 1736: if(arpeggiatorLastNoteModeKeyPressMenu.selector == 1) {clear_row2();Lcd_P
      +                          rint_String("FINISH LAST");}
 10242  007D48  0101               	movlb	1	; () banked
 10243  007D4A  0513               	decf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),w,b
 10244  007D4C  A4D8               	btfss	status,2,c
 10245  007D4E  D009               	goto	l3905
 10246                           
 10247                           ; BSR set to: 1
 10248  007D50  EC02  F04C         	call	_clear_row2	;wreg free
 10249  007D54  0E7C               	movlw	low STR_68
 10250  007D56  0100               	movlb	0	; () banked
 10251  007D58  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10252  007D5A  0EFF               	movlw	high STR_68
 10253  007D5C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10254  007D5E  EC74  F042         	call	_Lcd_Print_String	;wreg free
 10255  007D62                     l3905:
 10256                           
 10257                           ;menu.c: 1737: }
 10258                           ;menu.c: 1738: lcd_print_once = 1;
 10259  007D62  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10260  007D64                     l3901:
 10261  007D64  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10262  007D66  D7C1               	goto	l3902
 10263                           
 10264                           ;menu.c: 1739: }
 10265                           ;menu.c: 1741: LAST_NOTE_MODE_KEY_PRESS = arpeggiatorLastNoteModeKeyPressMenu.selector;
 10266  007D68  0101               	movlb	1	; () banked
 10267  007D6A  A113               	btfss	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),0,b
 10268  007D6C  D002               	goto	u57860
 10269  007D6E  8203               	bsf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 10270  007D70  0012               	return	
 10271  007D72                     u57860:
 10272  007D72  9203               	bcf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 10273  007D74  0012               	return		;funcret
 10274  007D76                     __end_of_Function_H_9_1:
 10275                           	opt stack 0
 10276                           tblptru	equ	0xFF8
 10277                           tblptrh	equ	0xFF7
 10278                           tblptrl	equ	0xFF6
 10279                           tablat	equ	0xFF5
 10280                           intcon	equ	0xFF2
 10281                           intcon2	equ	0xFF1
 10282                           postinc0	equ	0xFEE
 10283                           wreg	equ	0xFE8
 10284                           postinc1	equ	0xFE6
 10285                           postdec2	equ	0xFDD
 10286                           fsr2l	equ	0xFD9
 10287                           status	equ	0xFD8
 10288                           
 10289 ;; *************** function _Function_H_8 *****************
 10290 ;; Defined at:
 10291 ;;		line 1692 in file "menu.c"
 10292 ;; Parameters:    Size  Location     Type
 10293 ;;		None
 10294 ;; Auto vars:     Size  Location     Type
 10295 ;;		None
 10296 ;; Return value:  Size  Location     Type
 10297 ;;                  1    wreg      void 
 10298 ;; Registers used:
 10299 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10300 ;; Tracked objects:
 10301 ;;		On entry : 0/0
 10302 ;;		On exit  : 0/0
 10303 ;;		Unchanged: 0/0
 10304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10309 ;;Total ram usage:        0 bytes
 10310 ;; Hardware stack levels used:    1
 10311 ;; Hardware stack levels required when called:   17
 10312 ;; This function calls:
 10313 ;;		_Function_H_8_1
 10314 ;;		_Function_H_8_2
 10315 ;;		_Lcd_Print_String
 10316 ;;		___lbmod
 10317 ;;		___wmul
 10318 ;;		_clear_row2
 10319 ;;		_un_block_code
 10320 ;; This function is called by:
 10321 ;;		_Function_H
 10322 ;; This function uses a non-reentrant model
 10323 ;;
 10324                           
 10325                           	psect	text13
 10326  008C0A                     __ptext13:
 10327                           	opt stack 0
 10328  008C0A                     _Function_H_8:
 10329                           	opt stack 11
 10330                           
 10331                           ;menu.c: 1694: which_screen = ARPEGGIATOR_RANDOMIZE_SKIP_MENU;
 10332                           
 10333                           ;incstack = 0
 10334  008C0A  0E23               	movlw	35
 10335  008C0C  6E4F               	movwf	_which_screen,c
 10336                           
 10337                           ;menu.c: 1695: lcd_print_once = 0;
 10338  008C0E  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10339                           
 10340                           ;menu.c: 1696: encoder_click = 0;
 10341  008C10  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10342                           
 10343                           ;menu.c: 1698: while(encoder_click == 0) {
 10344  008C12  D024               	goto	l3892
 10345  008C14                     
 10346                           ;menu.c: 1702: un_block_code();
 10347  008C14  ECAB  F04C         	call	_un_block_code	;wreg free
 10348                           
 10349                           ;menu.c: 1704: if (lcd_print_once == 0) {
 10350  008C18  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10351  008C1A  D01F               	goto	l3894
 10352                           
 10353                           ;menu.c: 1705: clear_row2();
 10354  008C1C  EC02  F04C         	call	_clear_row2	;wreg free
 10355                           
 10356                           ;menu.c: 1706: Lcd_Print_String(LCD_STRINGS[(arpeggiatorRandomizeSkipMenu.selector % arp
      +                          eggiatorRandomizeSkipMenu.number) + arpeggiatorRandomizeSkipMenu.address]);
 10357  008C20  0101               	movlb	1	; () banked
 10358  008C22  511A               	movf	_arpeggiatorRandomizeSkipMenu& (0+255),w,b
 10359  008C24  6EE6               	movwf	postinc1,c
 10360  008C26  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 10361  008C28  6EE6               	movwf	postinc1,c
 10362  008C2A  EC61  F041         	call	___lbmod	;wreg free
 10363  008C2E  503F               	movf	btemp,w,c
 10364  008C30  0101               	movlb	1	; () banked
 10365  008C32  251B               	addwf	(_arpeggiatorRandomizeSkipMenu+1)& (0+255),w,b
 10366  008C34  0100               	movlb	0	; () banked
 10367  008C36  6F60               	movwf	___wmul@multiplier& (0+255),b
 10368  008C38  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 10369  008C3A  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 10370  008C3C  0E00               	movlw	0
 10371  008C3E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10372  008C40  0E11               	movlw	17
 10373  008C42  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10374  008C44  EC2A  F04C         	call	___wmul	;wreg free
 10375  008C48  0E9E               	movlw	low _LCD_STRINGS
 10376  008C4A  0100               	movlb	0	; () banked
 10377  008C4C  2560               	addwf	?___wmul& (0+255),w,b
 10378  008C4E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10379  008C50  0EF3               	movlw	high _LCD_STRINGS
 10380  008C52  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10381  008C54  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10382  008C56  EC74  F042         	call	_Lcd_Print_String	;wreg free
 10383  008C5A                     l3894:
 10384                           
 10385                           ;menu.c: 1707: }
 10386                           ;menu.c: 1708: lcd_print_once = 1;
 10387  008C5A  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10388  008C5C                     l3892:
 10389  008C5C  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10390  008C5E  D7DA               	goto	l3893
 10391                           
 10392                           ;menu.c: 1709: }
 10393                           ;menu.c: 1712: if(arpeggiatorRandomizeSkipMenu.selector == 0) {Function_H_8_1();}
 10394  008C60  0101               	movlb	1	; () banked
 10395  008C62  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 10396  008C64  B4D8               	btfsc	status,2,c
 10397                           
 10398                           ; BSR set to: 1
 10399  008C66  ECA9  F044         	call	_Function_H_8_1	;wreg free
 10400                           
 10401                           ;menu.c: 1713: if(arpeggiatorRandomizeSkipMenu.selector == 1) {Function_H_8_2();}
 10402  008C6A  0101               	movlb	1	; () banked
 10403  008C6C  051C               	decf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 10404  008C6E  A4D8               	btfss	status,2,c
 10405  008C70  0012               	return	
 10406                           
 10407                           ; BSR set to: 1
 10408  008C72  EC7A  F047         	call	_Function_H_8_2	;wreg free
 10409  008C76  0012               	return	
 10410  008C78                     __end_of_Function_H_8:
 10411                           	opt stack 0
 10412                           tblptru	equ	0xFF8
 10413                           tblptrh	equ	0xFF7
 10414                           tblptrl	equ	0xFF6
 10415                           tablat	equ	0xFF5
 10416                           intcon	equ	0xFF2
 10417                           intcon2	equ	0xFF1
 10418                           postinc0	equ	0xFEE
 10419                           wreg	equ	0xFE8
 10420                           postinc1	equ	0xFE6
 10421                           postdec2	equ	0xFDD
 10422                           fsr2l	equ	0xFD9
 10423                           status	equ	0xFD8
 10424                           
 10425 ;; *************** function _Function_H_8_2 *****************
 10426 ;; Defined at:
 10427 ;;		line 1666 in file "menu.c"
 10428 ;; Parameters:    Size  Location     Type
 10429 ;;		None
 10430 ;; Auto vars:     Size  Location     Type
 10431 ;;		None
 10432 ;; Return value:  Size  Location     Type
 10433 ;;                  1    wreg      void 
 10434 ;; Registers used:
 10435 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10436 ;; Tracked objects:
 10437 ;;		On entry : 0/0
 10438 ;;		On exit  : 0/0
 10439 ;;		Unchanged: 0/0
 10440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10445 ;;Total ram usage:        0 bytes
 10446 ;; Hardware stack levels used:    1
 10447 ;; Hardware stack levels required when called:   16
 10448 ;; This function calls:
 10449 ;;		_Lcd_Print_String
 10450 ;;		_clear_row2
 10451 ;;		_un_block_code
 10452 ;; This function is called by:
 10453 ;;		_Function_H_8
 10454 ;; This function uses a non-reentrant model
 10455 ;;
 10456                           
 10457                           	psect	text14
 10458  008EF4                     __ptext14:
 10459                           	opt stack 0
 10460  008EF4                     _Function_H_8_2:
 10461                           	opt stack 11
 10462                           
 10463                           ;menu.c: 1668: which_screen = ARPEGGIATOR_SKIP_FIRST_LAST_MENU;
 10464                           
 10465                           ;incstack = 0
 10466  008EF4  0E25               	movlw	37
 10467  008EF6  6E4F               	movwf	_which_screen,c
 10468                           
 10469                           ;menu.c: 1669: lcd_print_once = 0;
 10470  008EF8  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10471                           
 10472                           ;menu.c: 1670: encoder_click = 0;
 10473  008EFA  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10474                           
 10475                           ;menu.c: 1672: arpeggiatorSkipFirstLastMenu.selector = skipFirstLast;
 10476  008EFC  0E00               	movlw	0
 10477  008EFE  B603               	btfsc	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 10478  008F00  0E01               	movlw	1
 10479  008F02  0101               	movlb	1	; () banked
 10480  008F04  6F16               	movwf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),b
 10481                           
 10482                           ;menu.c: 1674: while(encoder_click == 0) {
 10483  008F06  D01F               	goto	l3883
 10484  008F08                     
 10485                           ;menu.c: 1678: un_block_code();
 10486                           
 10487                           ; BSR set to: 1
 10488  008F08  ECAB  F04C         	call	_un_block_code	;wreg free
 10489                           
 10490                           ;menu.c: 1680: if (lcd_print_once == 0) {
 10491  008F0C  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10492  008F0E  D01A               	goto	l3887
 10493                           
 10494                           ;menu.c: 1681: if(arpeggiatorSkipFirstLastMenu.selector == 0) {clear_row2();Lcd_Print_St
      +                          ring("Skip F/L OFF");}
 10495  008F10  0101               	movlb	1	; () banked
 10496  008F12  5116               	movf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),w,b
 10497  008F14  A4D8               	btfss	status,2,c
 10498  008F16  D009               	goto	l3886
 10499                           
 10500                           ; BSR set to: 1
 10501  008F18  EC02  F04C         	call	_clear_row2	;wreg free
 10502  008F1C  0E3F               	movlw	low STR_65
 10503  008F1E  0100               	movlb	0	; () banked
 10504  008F20  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10505  008F22  0EFF               	movlw	high STR_65
 10506  008F24  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10507  008F26  EC74  F042         	call	_Lcd_Print_String	;wreg free
 10508  008F2A                     l3886:
 10509                           
 10510                           ;menu.c: 1682: if(arpeggiatorSkipFirstLastMenu.selector == 1) {clear_row2();Lcd_Print_St
      +                          ring("Skip F/L ON");}
 10511  008F2A  0101               	movlb	1	; () banked
 10512  008F2C  0516               	decf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),w,b
 10513  008F2E  A4D8               	btfss	status,2,c
 10514  008F30  D009               	goto	l3887
 10515                           
 10516                           ; BSR set to: 1
 10517  008F32  EC02  F04C         	call	_clear_row2	;wreg free
 10518  008F36  0E70               	movlw	low STR_66
 10519  008F38  0100               	movlb	0	; () banked
 10520  008F3A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10521  008F3C  0EFF               	movlw	high STR_66
 10522  008F3E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10523  008F40  EC74  F042         	call	_Lcd_Print_String	;wreg free
 10524  008F44                     l3887:
 10525                           
 10526                           ;menu.c: 1683: }
 10527                           ;menu.c: 1684: lcd_print_once = 1;
 10528  008F44  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10529  008F46                     l3883:
 10530  008F46  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10531  008F48  D7DF               	goto	l3884
 10532                           
 10533                           ;menu.c: 1685: }
 10534                           ;menu.c: 1687: skipFirstLast = arpeggiatorSkipFirstLastMenu.selector;
 10535  008F4A  0101               	movlb	1	; () banked
 10536  008F4C  A116               	btfss	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),0,b
 10537  008F4E  D002               	goto	u57800
 10538  008F50  8603               	bsf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 10539  008F52  0012               	return	
 10540  008F54                     u57800:
 10541  008F54  9603               	bcf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 10542  008F56  0012               	return		;funcret
 10543  008F58                     __end_of_Function_H_8_2:
 10544                           	opt stack 0
 10545                           tblptru	equ	0xFF8
 10546                           tblptrh	equ	0xFF7
 10547                           tblptrl	equ	0xFF6
 10548                           tablat	equ	0xFF5
 10549                           intcon	equ	0xFF2
 10550                           intcon2	equ	0xFF1
 10551                           postinc0	equ	0xFEE
 10552                           wreg	equ	0xFE8
 10553                           postinc1	equ	0xFE6
 10554                           postdec2	equ	0xFDD
 10555                           fsr2l	equ	0xFD9
 10556                           status	equ	0xFD8
 10557                           
 10558 ;; *************** function _Function_H_8_1 *****************
 10559 ;; Defined at:
 10560 ;;		line 1636 in file "menu.c"
 10561 ;; Parameters:    Size  Location     Type
 10562 ;;		None
 10563 ;; Auto vars:     Size  Location     Type
 10564 ;;		None
 10565 ;; Return value:  Size  Location     Type
 10566 ;;                  1    wreg      void 
 10567 ;; Registers used:
 10568 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10569 ;; Tracked objects:
 10570 ;;		On entry : 0/0
 10571 ;;		On exit  : 0/0
 10572 ;;		Unchanged: 0/0
 10573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10578 ;;Total ram usage:        0 bytes
 10579 ;; Hardware stack levels used:    1
 10580 ;; Hardware stack levels required when called:   16
 10581 ;; This function calls:
 10582 ;;		_Lcd_Print_String
 10583 ;;		_clear_row1
 10584 ;;		_clear_row2
 10585 ;;		_un_block_code
 10586 ;; This function is called by:
 10587 ;;		_Function_H_8
 10588 ;; This function uses a non-reentrant model
 10589 ;;
 10590                           
 10591                           	psect	text15
 10592  008952                     __ptext15:
 10593                           	opt stack 0
 10594  008952                     _Function_H_8_1:
 10595                           	opt stack 11
 10596                           
 10597                           ;menu.c: 1638: which_screen = ARPEGGIATOR_RANDOMIZE_TYPE_MENU;
 10598                           
 10599                           ;incstack = 0
 10600  008952  0E24               	movlw	36
 10601  008954  6E4F               	movwf	_which_screen,c
 10602                           
 10603                           ;menu.c: 1639: lcd_print_once = 0;
 10604  008956  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10605                           
 10606                           ;menu.c: 1640: encoder_click = 0;
 10607  008958  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10608                           
 10609                           ;menu.c: 1642: arpeggiatorRandomizeTypeMenu.selector = AUTO_RANDOMIZE;
 10610  00895A  0E00               	movlw	0
 10611  00895C  B803               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 10612  00895E  0E01               	movlw	1
 10613  008960  0101               	movlb	1	; () banked
 10614  008962  6F19               	movwf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),b
 10615                           
 10616                           ;menu.c: 1644: while(encoder_click == 0) {
 10617  008964  D028               	goto	l3874
 10618  008966                     
 10619                           ;menu.c: 1648: un_block_code();
 10620                           
 10621                           ; BSR set to: 1
 10622  008966  ECAB  F04C         	call	_un_block_code	;wreg free
 10623                           
 10624                           ;menu.c: 1650: if (lcd_print_once == 0) {
 10625  00896A  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10626  00896C  D023               	goto	l3878
 10627                           
 10628                           ;menu.c: 1651: clear_row1();
 10629  00896E  EC16  F04C         	call	_clear_row1	;wreg free
 10630                           
 10631                           ;menu.c: 1652: Lcd_Print_String("Randomize Type:");
 10632  008972  0E1D               	movlw	low STR_62
 10633  008974  0100               	movlb	0	; () banked
 10634  008976  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10635  008978  0EFE               	movlw	high STR_62
 10636  00897A  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10637  00897C  EC74  F042         	call	_Lcd_Print_String	;wreg free
 10638                           
 10639                           ;menu.c: 1655: if(arpeggiatorRandomizeTypeMenu.selector == 0) {clear_row2();Lcd_Print_St
      +                          ring("RANDOMIZE AUTO");}
 10640  008980  0101               	movlb	1	; () banked
 10641  008982  5119               	movf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),w,b
 10642  008984  A4D8               	btfss	status,2,c
 10643  008986  D009               	goto	l3877
 10644                           
 10645                           ; BSR set to: 1
 10646  008988  EC02  F04C         	call	_clear_row2	;wreg free
 10647  00898C  0EA7               	movlw	low STR_63
 10648  00898E  0100               	movlb	0	; () banked
 10649  008990  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10650  008992  0EFE               	movlw	high STR_63
 10651  008994  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10652  008996  EC74  F042         	call	_Lcd_Print_String	;wreg free
 10653  00899A                     l3877:
 10654                           
 10655                           ;menu.c: 1656: if(arpeggiatorRandomizeTypeMenu.selector == 1) {clear_row2();Lcd_Print_St
      +                          ring("RANDOMIZE ONCE");}
 10656  00899A  0101               	movlb	1	; () banked
 10657  00899C  0519               	decf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),w,b
 10658  00899E  A4D8               	btfss	status,2,c
 10659  0089A0  D009               	goto	l3878
 10660                           
 10661                           ; BSR set to: 1
 10662  0089A2  EC02  F04C         	call	_clear_row2	;wreg free
 10663  0089A6  0E7A               	movlw	low STR_64
 10664  0089A8  0100               	movlb	0	; () banked
 10665  0089AA  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10666  0089AC  0EFE               	movlw	high STR_64
 10667  0089AE  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10668  0089B0  EC74  F042         	call	_Lcd_Print_String	;wreg free
 10669  0089B4                     l3878:
 10670                           
 10671                           ;menu.c: 1657: }
 10672                           ;menu.c: 1658: lcd_print_once = 1;
 10673  0089B4  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10674  0089B6                     l3874:
 10675  0089B6  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10676  0089B8  D7D6               	goto	l3875
 10677                           
 10678                           ;menu.c: 1659: }
 10679                           ;menu.c: 1661: AUTO_RANDOMIZE = arpeggiatorRandomizeTypeMenu.selector;
 10680  0089BA  0101               	movlb	1	; () banked
 10681  0089BC  A119               	btfss	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),0,b
 10682  0089BE  D002               	goto	u57740
 10683  0089C0  8803               	bsf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 10684  0089C2  0012               	return	
 10685  0089C4                     u57740:
 10686  0089C4  9803               	bcf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 10687  0089C6  0012               	return		;funcret
 10688  0089C8                     __end_of_Function_H_8_1:
 10689                           	opt stack 0
 10690                           tblptru	equ	0xFF8
 10691                           tblptrh	equ	0xFF7
 10692                           tblptrl	equ	0xFF6
 10693                           tablat	equ	0xFF5
 10694                           intcon	equ	0xFF2
 10695                           intcon2	equ	0xFF1
 10696                           postinc0	equ	0xFEE
 10697                           wreg	equ	0xFE8
 10698                           postinc1	equ	0xFE6
 10699                           postdec2	equ	0xFDD
 10700                           fsr2l	equ	0xFD9
 10701                           status	equ	0xFD8
 10702                           
 10703 ;; *************** function _Function_H_7 *****************
 10704 ;; Defined at:
 10705 ;;		line 1599 in file "menu.c"
 10706 ;; Parameters:    Size  Location     Type
 10707 ;;		None
 10708 ;; Auto vars:     Size  Location     Type
 10709 ;;		None
 10710 ;; Return value:  Size  Location     Type
 10711 ;;                  1    wreg      void 
 10712 ;; Registers used:
 10713 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10714 ;; Tracked objects:
 10715 ;;		On entry : 0/0
 10716 ;;		On exit  : 0/0
 10717 ;;		Unchanged: 0/0
 10718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10723 ;;Total ram usage:        0 bytes
 10724 ;; Hardware stack levels used:    1
 10725 ;; Hardware stack levels required when called:   16
 10726 ;; This function calls:
 10727 ;;		_Lcd_Print_String
 10728 ;;		_clear_row1
 10729 ;;		_clear_row2
 10730 ;;		_strcpy
 10731 ;;		_un_block_code
 10732 ;; This function is called by:
 10733 ;;		_Function_H
 10734 ;; This function uses a non-reentrant model
 10735 ;;
 10736                           
 10737                           	psect	text16
 10738  007846                     __ptext16:
 10739                           	opt stack 0
 10740  007846                     _Function_H_7:
 10741                           	opt stack 12
 10742                           
 10743                           ;menu.c: 1601: which_screen = ARPEGGIATOR_UN_LATCH_MODE_MENU;
 10744                           
 10745                           ;incstack = 0
 10746  007846  0E22               	movlw	34
 10747  007848  6E4F               	movwf	_which_screen,c
 10748                           
 10749                           ;menu.c: 1602: lcd_print_once = 0;
 10750  00784A  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10751                           
 10752                           ;menu.c: 1603: encoder_click = 0;
 10753  00784C  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10754                           
 10755                           ;menu.c: 1605: arpeggiatorUnLatchModeMenu.selector = UN_LATCH_MODE;
 10756  00784E  0E00               	movlw	0
 10757  007850  BE03               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 10758  007852  0E01               	movlw	1
 10759  007854  0101               	movlb	1	; () banked
 10760  007856  6F1F               	movwf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),b
 10761                           
 10762                           ;menu.c: 1607: while(encoder_click == 0) {
 10763  007858  D044               	goto	l3865
 10764  00785A                     
 10765                           ;menu.c: 1611: un_block_code();
 10766                           
 10767                           ; BSR set to: 1
 10768  00785A  ECAB  F04C         	call	_un_block_code	;wreg free
 10769                           
 10770                           ;menu.c: 1613: if (lcd_print_once == 0) {
 10771  00785E  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10772  007860  D03F               	goto	l3869
 10773                           
 10774                           ;menu.c: 1614: clear_row1();
 10775  007862  EC16  F04C         	call	_clear_row1	;wreg free
 10776                           
 10777                           ;menu.c: 1615: Lcd_Print_String("Un-latch Mode:");
 10778  007866  0E5C               	movlw	low STR_57
 10779  007868  0100               	movlb	0	; () banked
 10780  00786A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10781  00786C  0EFE               	movlw	high STR_57
 10782  00786E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10783  007870  EC74  F042         	call	_Lcd_Print_String	;wreg free
 10784                           
 10785                           ;menu.c: 1616: clear_row2();
 10786  007874  EC02  F04C         	call	_clear_row2	;wreg free
 10787                           
 10788                           ;menu.c: 1618: if(arpeggiatorUnLatchModeMenu.selector == 0) {
 10789  007878  0101               	movlb	1	; () banked
 10790  00787A  511F               	movf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),w,b
 10791  00787C  A4D8               	btfss	status,2,c
 10792  00787E  D016               	goto	l3868
 10793                           
 10794                           ; BSR set to: 1
 10795                           ;menu.c: 1619: clear_row2();Lcd_Print_String("UNLATCH ALL");
 10796  007880  EC02  F04C         	call	_clear_row2	;wreg free
 10797  007884  0E64               	movlw	low STR_58
 10798  007886  0100               	movlb	0	; () banked
 10799  007888  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10800  00788A  0EFF               	movlw	high STR_58
 10801  00788C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10802  00788E  EC74  F042         	call	_Lcd_Print_String	;wreg free
 10803                           
 10804                           ;menu.c: 1620: DISPLAY_MODE = 1;
 10805  007892  0E01               	movlw	1
 10806  007894  0100               	movlb	0	; () banked
 10807  007896  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 10808                           
 10809                           ; BSR set to: 0
 10810                           ;menu.c: 1621: strcpy(string_to_display, " ALL");
 10811  007898  0EF8               	movlw	low _string_to_display
 10812  00789A  6F60               	movwf	strcpy@to& (0+255),b
 10813  00789C  0E01               	movlw	high _string_to_display
 10814  00789E  6F61               	movwf	(strcpy@to+1)& (0+255),b
 10815  0078A0  0E6B               	movlw	low (STR_58+7)
 10816  0078A2  6F62               	movwf	strcpy@from& (0+255),b
 10817  0078A4  0EFF               	movlw	high (STR_58+7)
 10818  0078A6  6F63               	movwf	(strcpy@from+1)& (0+255),b
 10819  0078A8  EC8E  F04B         	call	_strcpy	;wreg free
 10820  0078AC                     l3868:
 10821                           
 10822                           ;menu.c: 1622: }
 10823                           ;menu.c: 1623: if(arpeggiatorUnLatchModeMenu.selector == 1) {
 10824  0078AC  0101               	movlb	1	; () banked
 10825  0078AE  051F               	decf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),w,b
 10826  0078B0  A4D8               	btfss	status,2,c
 10827  0078B2  D016               	goto	l3869
 10828                           
 10829                           ; BSR set to: 1
 10830                           ;menu.c: 1624: clear_row2();Lcd_Print_String("ONE AT A TIME");
 10831  0078B4  EC02  F04C         	call	_clear_row2	;wreg free
 10832  0078B8  0EFC               	movlw	low STR_60
 10833  0078BA  0100               	movlb	0	; () banked
 10834  0078BC  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10835  0078BE  0EFE               	movlw	high STR_60
 10836  0078C0  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10837  0078C2  EC74  F042         	call	_Lcd_Print_String	;wreg free
 10838                           
 10839                           ;menu.c: 1625: DISPLAY_MODE = 1;
 10840  0078C6  0E01               	movlw	1
 10841  0078C8  0100               	movlb	0	; () banked
 10842  0078CA  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 10843                           
 10844                           ; BSR set to: 0
 10845                           ;menu.c: 1626: strcpy(string_to_display, " OnE");
 10846  0078CC  0EF8               	movlw	low _string_to_display
 10847  0078CE  6F60               	movwf	strcpy@to& (0+255),b
 10848  0078D0  0E01               	movlw	high _string_to_display
 10849  0078D2  6F61               	movwf	(strcpy@to+1)& (0+255),b
 10850  0078D4  0EC8               	movlw	low STR_61
 10851  0078D6  6F62               	movwf	strcpy@from& (0+255),b
 10852  0078D8  0EFF               	movlw	high STR_61
 10853  0078DA  6F63               	movwf	(strcpy@from+1)& (0+255),b
 10854  0078DC  EC8E  F04B         	call	_strcpy	;wreg free
 10855  0078E0                     l3869:
 10856                           
 10857                           ;menu.c: 1627: }
 10858                           ;menu.c: 1628: }
 10859                           ;menu.c: 1629: lcd_print_once = 1;
 10860  0078E0  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10861  0078E2                     l3865:
 10862  0078E2  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10863  0078E4  D7BA               	goto	l3866
 10864                           
 10865                           ;menu.c: 1630: }
 10866                           ;menu.c: 1632: UN_LATCH_MODE = arpeggiatorUnLatchModeMenu.selector;
 10867  0078E6  0101               	movlb	1	; () banked
 10868  0078E8  A11F               	btfss	(_arpeggiatorUnLatchModeMenu+2)& (0+255),0,b
 10869  0078EA  D002               	goto	u59010
 10870  0078EC  8E03               	bsf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 10871  0078EE  0012               	return	
 10872  0078F0                     u59010:
 10873  0078F0  9E03               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 10874  0078F2  0012               	return		;funcret
 10875  0078F4                     __end_of_Function_H_7:
 10876                           	opt stack 0
 10877                           tblptru	equ	0xFF8
 10878                           tblptrh	equ	0xFF7
 10879                           tblptrl	equ	0xFF6
 10880                           tablat	equ	0xFF5
 10881                           intcon	equ	0xFF2
 10882                           intcon2	equ	0xFF1
 10883                           postinc0	equ	0xFEE
 10884                           wreg	equ	0xFE8
 10885                           postinc1	equ	0xFE6
 10886                           postdec2	equ	0xFDD
 10887                           fsr2l	equ	0xFD9
 10888                           status	equ	0xFD8
 10889                           
 10890 ;; *************** function _Function_H_6 *****************
 10891 ;; Defined at:
 10892 ;;		line 1574 in file "menu.c"
 10893 ;; Parameters:    Size  Location     Type
 10894 ;;		None
 10895 ;; Auto vars:     Size  Location     Type
 10896 ;;		None
 10897 ;; Return value:  Size  Location     Type
 10898 ;;                  1    wreg      void 
 10899 ;; Registers used:
 10900 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10901 ;; Tracked objects:
 10902 ;;		On entry : 0/0
 10903 ;;		On exit  : 0/0
 10904 ;;		Unchanged: 0/0
 10905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10909 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10910 ;;Total ram usage:        0 bytes
 10911 ;; Hardware stack levels used:    1
 10912 ;; Hardware stack levels required when called:   17
 10913 ;; This function calls:
 10914 ;;		_Function_H_6_1
 10915 ;;		_Function_H_6_2
 10916 ;;		_Lcd_Print_String
 10917 ;;		___lbmod
 10918 ;;		___wmul
 10919 ;;		_clear_row2
 10920 ;;		_un_block_code
 10921 ;; This function is called by:
 10922 ;;		_Function_H
 10923 ;; This function uses a non-reentrant model
 10924 ;;
 10925                           
 10926                           	psect	text17
 10927  008C78                     __ptext17:
 10928                           	opt stack 0
 10929  008C78                     _Function_H_6:
 10930                           	opt stack 11
 10931                           
 10932                           ;menu.c: 1576: which_screen = ARPEGGIATOR_LATCH_MENU;
 10933                           
 10934                           ;incstack = 0
 10935  008C78  0E1F               	movlw	31
 10936  008C7A  6E4F               	movwf	_which_screen,c
 10937                           
 10938                           ;menu.c: 1577: lcd_print_once = 0;
 10939  008C7C  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10940                           
 10941                           ;menu.c: 1578: encoder_click = 0;
 10942  008C7E  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10943                           
 10944                           ;menu.c: 1580: while(encoder_click == 0) {
 10945  008C80  D024               	goto	l3856
 10946  008C82                     
 10947                           ;menu.c: 1584: un_block_code();
 10948  008C82  ECAB  F04C         	call	_un_block_code	;wreg free
 10949                           
 10950                           ;menu.c: 1586: if (lcd_print_once == 0) {
 10951  008C86  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10952  008C88  D01F               	goto	l3858
 10953                           
 10954                           ;menu.c: 1587: clear_row2();
 10955  008C8A  EC02  F04C         	call	_clear_row2	;wreg free
 10956                           
 10957                           ;menu.c: 1588: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLatchMenu.selector % arpeggiator
      +                          LatchMenu.number) + arpeggiatorLatchMenu.address]);
 10958  008C8E  0101               	movlb	1	; () banked
 10959  008C90  5126               	movf	_arpeggiatorLatchMenu& (0+255),w,b
 10960  008C92  6EE6               	movwf	postinc1,c
 10961  008C94  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 10962  008C96  6EE6               	movwf	postinc1,c
 10963  008C98  EC61  F041         	call	___lbmod	;wreg free
 10964  008C9C  503F               	movf	btemp,w,c
 10965  008C9E  0101               	movlb	1	; () banked
 10966  008CA0  2527               	addwf	(_arpeggiatorLatchMenu+1)& (0+255),w,b
 10967  008CA2  0100               	movlb	0	; () banked
 10968  008CA4  6F60               	movwf	___wmul@multiplier& (0+255),b
 10969  008CA6  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 10970  008CA8  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 10971  008CAA  0E00               	movlw	0
 10972  008CAC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10973  008CAE  0E11               	movlw	17
 10974  008CB0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10975  008CB2  EC2A  F04C         	call	___wmul	;wreg free
 10976  008CB6  0E9E               	movlw	low _LCD_STRINGS
 10977  008CB8  0100               	movlb	0	; () banked
 10978  008CBA  2560               	addwf	?___wmul& (0+255),w,b
 10979  008CBC  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10980  008CBE  0EF3               	movlw	high _LCD_STRINGS
 10981  008CC0  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10982  008CC2  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10983  008CC4  EC74  F042         	call	_Lcd_Print_String	;wreg free
 10984  008CC8                     l3858:
 10985                           
 10986                           ;menu.c: 1589: }
 10987                           ;menu.c: 1590: lcd_print_once = 1;
 10988  008CC8  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10989  008CCA                     l3856:
 10990  008CCA  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10991  008CCC  D7DA               	goto	l3857
 10992                           
 10993                           ;menu.c: 1591: }
 10994                           ;menu.c: 1594: if(arpeggiatorLatchMenu.selector == 0) {Function_H_6_1();}
 10995  008CCE  0101               	movlb	1	; () banked
 10996  008CD0  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 10997  008CD2  B4D8               	btfsc	status,2,c
 10998                           
 10999                           ; BSR set to: 1
 11000  008CD4  EC5B  F03F         	call	_Function_H_6_1	;wreg free
 11001                           
 11002                           ;menu.c: 1595: if(arpeggiatorLatchMenu.selector == 1) {Function_H_6_2();}
 11003  008CD8  0101               	movlb	1	; () banked
 11004  008CDA  0528               	decf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 11005  008CDC  A4D8               	btfss	status,2,c
 11006  008CDE  0012               	return	
 11007                           
 11008                           ; BSR set to: 1
 11009  008CE0  ECD1  F03C         	call	_Function_H_6_2	;wreg free
 11010  008CE4  0012               	return	
 11011  008CE6                     __end_of_Function_H_6:
 11012                           	opt stack 0
 11013                           tblptru	equ	0xFF8
 11014                           tblptrh	equ	0xFF7
 11015                           tblptrl	equ	0xFF6
 11016                           tablat	equ	0xFF5
 11017                           intcon	equ	0xFF2
 11018                           intcon2	equ	0xFF1
 11019                           postinc0	equ	0xFEE
 11020                           wreg	equ	0xFE8
 11021                           postinc1	equ	0xFE6
 11022                           postdec2	equ	0xFDD
 11023                           fsr2l	equ	0xFD9
 11024                           status	equ	0xFD8
 11025                           
 11026 ;; *************** function _Function_H_6_2 *****************
 11027 ;; Defined at:
 11028 ;;		line 1539 in file "menu.c"
 11029 ;; Parameters:    Size  Location     Type
 11030 ;;		None
 11031 ;; Auto vars:     Size  Location     Type
 11032 ;;		None
 11033 ;; Return value:  Size  Location     Type
 11034 ;;                  1    wreg      void 
 11035 ;; Registers used:
 11036 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11037 ;; Tracked objects:
 11038 ;;		On entry : 0/0
 11039 ;;		On exit  : 0/0
 11040 ;;		Unchanged: 0/0
 11041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11046 ;;Total ram usage:        0 bytes
 11047 ;; Hardware stack levels used:    1
 11048 ;; Hardware stack levels required when called:   16
 11049 ;; This function calls:
 11050 ;;		_Lcd_Print_String
 11051 ;;		_clear_row1
 11052 ;;		_clear_row2
 11053 ;;		_strcpy
 11054 ;;		_un_block_code
 11055 ;; This function is called by:
 11056 ;;		_Function_H_6
 11057 ;; This function uses a non-reentrant model
 11058 ;;
 11059                           
 11060                           	psect	text18
 11061  0079A2                     __ptext18:
 11062                           	opt stack 0
 11063  0079A2                     _Function_H_6_2:
 11064                           	opt stack 11
 11065                           
 11066                           ;menu.c: 1541: which_screen = ARPEGGIATOR_AUTO_LATCH_ON_OFF_MENU;
 11067                           
 11068                           ;incstack = 0
 11069  0079A2  0E21               	movlw	33
 11070  0079A4  6E4F               	movwf	_which_screen,c
 11071                           
 11072                           ;menu.c: 1542: lcd_print_once = 0;
 11073  0079A6  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11074                           
 11075                           ;menu.c: 1543: encoder_click = 0;
 11076  0079A8  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11077                           
 11078                           ;menu.c: 1545: arpeggiatorAutoLatchOnOffMenu.selector = AUTO_LATCH;
 11079  0079AA  0E00               	movlw	0
 11080  0079AC  BC03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 11081  0079AE  0E01               	movlw	1
 11082  0079B0  0101               	movlb	1	; () banked
 11083  0079B2  6F22               	movwf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),b
 11084                           
 11085                           ;menu.c: 1547: while(encoder_click == 0) {
 11086  0079B4  D042               	goto	l3847
 11087  0079B6                     
 11088                           ;menu.c: 1551: un_block_code();
 11089                           
 11090                           ; BSR set to: 1
 11091  0079B6  ECAB  F04C         	call	_un_block_code	;wreg free
 11092                           
 11093                           ;menu.c: 1553: if (lcd_print_once == 0) {
 11094  0079BA  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11095  0079BC  D03D               	goto	l3851
 11096                           
 11097                           ;menu.c: 1554: clear_row1();Lcd_Print_String("AutoLatch ON/OFF");
 11098  0079BE  EC16  F04C         	call	_clear_row1	;wreg free
 11099  0079C2  0EDB               	movlw	low STR_52
 11100  0079C4  0100               	movlb	0	; () banked
 11101  0079C6  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11102  0079C8  0EFD               	movlw	high STR_52
 11103  0079CA  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11104  0079CC  EC74  F042         	call	_Lcd_Print_String	;wreg free
 11105                           
 11106                           ;menu.c: 1555: if(arpeggiatorAutoLatchOnOffMenu.selector == 0) {
 11107  0079D0  0101               	movlb	1	; () banked
 11108  0079D2  5122               	movf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),w,b
 11109  0079D4  A4D8               	btfss	status,2,c
 11110  0079D6  D016               	goto	l3850
 11111                           
 11112                           ; BSR set to: 1
 11113                           ;menu.c: 1556: clear_row2();Lcd_Print_String("Auto Latch OFF");
 11114  0079D8  EC02  F04C         	call	_clear_row2	;wreg free
 11115  0079DC  0E89               	movlw	low STR_53
 11116  0079DE  0100               	movlb	0	; () banked
 11117  0079E0  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11118  0079E2  0EFE               	movlw	high STR_53
 11119  0079E4  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11120  0079E6  EC74  F042         	call	_Lcd_Print_String	;wreg free
 11121                           
 11122                           ;menu.c: 1557: DISPLAY_MODE = 1;
 11123  0079EA  0E01               	movlw	1
 11124  0079EC  0100               	movlb	0	; () banked
 11125  0079EE  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 11126                           
 11127                           ; BSR set to: 0
 11128                           ;menu.c: 1558: strcpy(string_to_display, " oFF");
 11129  0079F0  0EF8               	movlw	low _string_to_display
 11130  0079F2  6F60               	movwf	strcpy@to& (0+255),b
 11131  0079F4  0E01               	movlw	high _string_to_display
 11132  0079F6  6F61               	movwf	(strcpy@to+1)& (0+255),b
 11133  0079F8  0EDC               	movlw	low STR_5
 11134  0079FA  6F62               	movwf	strcpy@from& (0+255),b
 11135  0079FC  0EFF               	movlw	high STR_5
 11136  0079FE  6F63               	movwf	(strcpy@from+1)& (0+255),b
 11137  007A00  EC8E  F04B         	call	_strcpy	;wreg free
 11138  007A04                     l3850:
 11139                           
 11140                           ;menu.c: 1559: }
 11141                           ;menu.c: 1560: if(arpeggiatorAutoLatchOnOffMenu.selector == 1) {
 11142  007A04  0101               	movlb	1	; () banked
 11143  007A06  0522               	decf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),w,b
 11144  007A08  A4D8               	btfss	status,2,c
 11145  007A0A  D016               	goto	l3851
 11146                           
 11147                           ; BSR set to: 1
 11148                           ;menu.c: 1561: clear_row2();Lcd_Print_String("Auto Latch ON");
 11149  007A0C  EC02  F04C         	call	_clear_row2	;wreg free
 11150  007A10  0E0A               	movlw	low STR_55
 11151  007A12  0100               	movlb	0	; () banked
 11152  007A14  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11153  007A16  0EFF               	movlw	high STR_55
 11154  007A18  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11155  007A1A  EC74  F042         	call	_Lcd_Print_String	;wreg free
 11156                           
 11157                           ;menu.c: 1562: DISPLAY_MODE = 1;
 11158  007A1E  0E01               	movlw	1
 11159  007A20  0100               	movlb	0	; () banked
 11160  007A22  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 11161                           
 11162                           ; BSR set to: 0
 11163                           ;menu.c: 1563: strcpy(string_to_display, "Auto");
 11164  007A24  0EF8               	movlw	low _string_to_display
 11165  007A26  6F60               	movwf	strcpy@to& (0+255),b
 11166  007A28  0E01               	movlw	high _string_to_display
 11167  007A2A  6F61               	movwf	(strcpy@to+1)& (0+255),b
 11168  007A2C  0EF0               	movlw	low STR_4
 11169  007A2E  6F62               	movwf	strcpy@from& (0+255),b
 11170  007A30  0EFF               	movlw	high STR_4
 11171  007A32  6F63               	movwf	(strcpy@from+1)& (0+255),b
 11172  007A34  EC8E  F04B         	call	_strcpy	;wreg free
 11173  007A38                     l3851:
 11174                           
 11175                           ;menu.c: 1564: }
 11176                           ;menu.c: 1565: }
 11177                           ;menu.c: 1566: lcd_print_once = 1;
 11178  007A38  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11179  007A3A                     l3847:
 11180  007A3A  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11181  007A3C  D7BC               	goto	l3848
 11182                           
 11183                           ;menu.c: 1567: }
 11184                           ;menu.c: 1569: AUTO_LATCH = arpeggiatorAutoLatchOnOffMenu.selector;
 11185  007A3E  0101               	movlb	1	; () banked
 11186  007A40  A122               	btfss	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),0,b
 11187  007A42  D002               	goto	u57680
 11188  007A44  8C03               	bsf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 11189  007A46  0012               	return	
 11190  007A48                     u57680:
 11191  007A48  9C03               	bcf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 11192  007A4A  0012               	return		;funcret
 11193  007A4C                     __end_of_Function_H_6_2:
 11194                           	opt stack 0
 11195                           tblptru	equ	0xFF8
 11196                           tblptrh	equ	0xFF7
 11197                           tblptrl	equ	0xFF6
 11198                           tablat	equ	0xFF5
 11199                           intcon	equ	0xFF2
 11200                           intcon2	equ	0xFF1
 11201                           postinc0	equ	0xFEE
 11202                           wreg	equ	0xFE8
 11203                           postinc1	equ	0xFE6
 11204                           postdec2	equ	0xFDD
 11205                           fsr2l	equ	0xFD9
 11206                           status	equ	0xFD8
 11207                           
 11208 ;; *************** function _Function_H_6_1 *****************
 11209 ;; Defined at:
 11210 ;;		line 1443 in file "menu.c"
 11211 ;; Parameters:    Size  Location     Type
 11212 ;;		None
 11213 ;; Auto vars:     Size  Location     Type
 11214 ;;  temp            1  103[BANK0 ] unsigned char 
 11215 ;; Return value:  Size  Location     Type
 11216 ;;                  1    wreg      void 
 11217 ;; Registers used:
 11218 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11219 ;; Tracked objects:
 11220 ;;		On entry : 0/0
 11221 ;;		On exit  : 0/0
 11222 ;;		Unchanged: 0/0
 11223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11225 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11227 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11228 ;;Total ram usage:        1 bytes
 11229 ;; Hardware stack levels used:    1
 11230 ;; Hardware stack levels required when called:   16
 11231 ;; This function calls:
 11232 ;;		_Lcd_Print_String
 11233 ;;		_clear_row1
 11234 ;;		_clear_row2
 11235 ;;		_doTheLatch
 11236 ;;		_doTheUnLatch
 11237 ;;		_un_block_code
 11238 ;; This function is called by:
 11239 ;;		_Function_H_6
 11240 ;; This function uses a non-reentrant model
 11241 ;;
 11242                           
 11243                           	psect	text19
 11244  007EB6                     __ptext19:
 11245                           	opt stack 0
 11246  007EB6                     _Function_H_6_1:
 11247                           	opt stack 11
 11248                           
 11249                           ;menu.c: 1445: which_screen = ARPEGGIATOR_LATCH_ON_OFF_MENU;
 11250                           
 11251                           ;incstack = 0
 11252  007EB6  0E20               	movlw	32
 11253  007EB8  6E4F               	movwf	_which_screen,c
 11254                           
 11255                           ;menu.c: 1446: lcd_print_once = 0;
 11256  007EBA  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11257                           
 11258                           ;menu.c: 1447: encoder_click = 0;
 11259  007EBC  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11260                           
 11261                           ;menu.c: 1449: arpeggiatorLatchOnOffMenu.selector = LATCH;
 11262  007EBE  0E00               	movlw	0
 11263  007EC0  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 11264  007EC2  0E01               	movlw	1
 11265  007EC4  0101               	movlb	1	; () banked
 11266  007EC6  6F25               	movwf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),b
 11267                           
 11268                           ;menu.c: 1451: while(encoder_click == 0) {
 11269  007EC8  D028               	goto	l3836
 11270  007ECA                     
 11271                           ;menu.c: 1455: un_block_code();
 11272                           
 11273                           ; BSR set to: 1
 11274  007ECA  ECAB  F04C         	call	_un_block_code	;wreg free
 11275                           
 11276                           ;menu.c: 1457: if (lcd_print_once == 0) {
 11277  007ECE  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11278  007ED0  D023               	goto	l3840
 11279                           
 11280                           ;menu.c: 1458: clear_row1();Lcd_Print_String("Latch ON/OFF");
 11281  007ED2  EC16  F04C         	call	_clear_row1	;wreg free
 11282  007ED6  0EDF               	movlw	low (STR_52+4)
 11283  007ED8  0100               	movlb	0	; () banked
 11284  007EDA  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11285  007EDC  0EFD               	movlw	high (STR_52+4)
 11286  007EDE  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11287  007EE0  EC74  F042         	call	_Lcd_Print_String	;wreg free
 11288                           
 11289                           ;menu.c: 1459: if(arpeggiatorLatchOnOffMenu.selector == 0) {
 11290  007EE4  0101               	movlb	1	; () banked
 11291  007EE6  5125               	movf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),w,b
 11292  007EE8  A4D8               	btfss	status,2,c
 11293  007EEA  D009               	goto	l3839
 11294                           
 11295                           ; BSR set to: 1
 11296                           ;menu.c: 1460: clear_row2();
 11297  007EEC  EC02  F04C         	call	_clear_row2	;wreg free
 11298                           
 11299                           ;menu.c: 1461: Lcd_Print_String("Latch OFF");
 11300  007EF0  0E8E               	movlw	low (STR_53+5)
 11301  007EF2  0100               	movlb	0	; () banked
 11302  007EF4  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11303  007EF6  0EFE               	movlw	high (STR_53+5)
 11304  007EF8  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11305  007EFA  EC74  F042         	call	_Lcd_Print_String	;wreg free
 11306  007EFE                     l3839:
 11307                           
 11308                           ;menu.c: 1462: }
 11309                           ;menu.c: 1463: if(arpeggiatorLatchOnOffMenu.selector == 1) {
 11310  007EFE  0101               	movlb	1	; () banked
 11311  007F00  0525               	decf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),w,b
 11312  007F02  A4D8               	btfss	status,2,c
 11313  007F04  D009               	goto	l3840
 11314                           
 11315                           ; BSR set to: 1
 11316                           ;menu.c: 1464: clear_row2();
 11317  007F06  EC02  F04C         	call	_clear_row2	;wreg free
 11318                           
 11319                           ;menu.c: 1465: Lcd_Print_String("Latch ON");
 11320  007F0A  0E0F               	movlw	low (STR_55+5)
 11321  007F0C  0100               	movlb	0	; () banked
 11322  007F0E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11323  007F10  0EFF               	movlw	high (STR_55+5)
 11324  007F12  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11325  007F14  EC74  F042         	call	_Lcd_Print_String	;wreg free
 11326  007F18                     l3840:
 11327                           
 11328                           ;menu.c: 1466: }
 11329                           ;menu.c: 1467: }
 11330                           ;menu.c: 1468: lcd_print_once = 1;
 11331  007F18  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11332  007F1A                     l3836:
 11333  007F1A  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11334  007F1C  D7D6               	goto	l3837
 11335                           
 11336                           ;menu.c: 1469: }
 11337                           ;menu.c: 1471: LATCH = arpeggiatorLatchOnOffMenu.selector;
 11338  007F1E  0101               	movlb	1	; () banked
 11339  007F20  A125               	btfss	(_arpeggiatorLatchOnOffMenu+2)& (0+255),0,b
 11340  007F22  D002               	goto	u57580
 11341  007F24  8004               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 11342  007F26  D001               	goto	u57595
 11343  007F28                     u57580:
 11344  007F28  9004               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
 11345  007F2A                     u57595:
 11346                           
 11347                           ;menu.c: 1473: if(LATCH == 1){
 11348  007F2A  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 11349                           
 11350                           ;menu.c: 1480: doTheLatch();
 11351  007F2C  EC72  F04C         	call	_doTheLatch	;wreg free
 11352                           
 11353                           ;menu.c: 1481: }
 11354                           ;menu.c: 1483: if(LATCH == 0){
 11355  007F30  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 11356  007F32  0012               	return	
 11357                           
 11358                           ;menu.c: 1486: unsigned char temp = UN_LATCH_MODE;
 11359  007F34  0E00               	movlw	0
 11360  007F36  BE03               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 11361  007F38  0E01               	movlw	1
 11362  007F3A  0100               	movlb	0	; () banked
 11363  007F3C  6FC7               	movwf	Function_H_6_1@temp& (0+255),b
 11364                           
 11365                           ; BSR set to: 0
 11366                           ;menu.c: 1488: UN_LATCH_MODE = 0;
 11367  007F3E  9E03               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 11368                           
 11369                           ; BSR set to: 0
 11370                           ;menu.c: 1489: doTheUnLatch();
 11371  007F40  ECEE  F028         	call	_doTheUnLatch	;wreg free
 11372                           
 11373                           ;menu.c: 1492: UN_LATCH_MODE = temp;
 11374  007F44  0100               	movlb	0	; () banked
 11375  007F46  A1C7               	btfss	Function_H_6_1@temp& (0+255),0,b
 11376  007F48  D002               	goto	u57620
 11377  007F4A  8E03               	bsf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 11378  007F4C  0012               	return	
 11379  007F4E                     u57620:
 11380  007F4E  9E03               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 11381  007F50  0012               	return	
 11382  007F52                     __end_of_Function_H_6_1:
 11383                           	opt stack 0
 11384                           tblptru	equ	0xFF8
 11385                           tblptrh	equ	0xFF7
 11386                           tblptrl	equ	0xFF6
 11387                           tablat	equ	0xFF5
 11388                           intcon	equ	0xFF2
 11389                           intcon2	equ	0xFF1
 11390                           postinc0	equ	0xFEE
 11391                           wreg	equ	0xFE8
 11392                           postinc1	equ	0xFE6
 11393                           postdec2	equ	0xFDD
 11394                           fsr2l	equ	0xFD9
 11395                           status	equ	0xFD8
 11396                           
 11397 ;; *************** function _Function_H_5 *****************
 11398 ;; Defined at:
 11399 ;;		line 1406 in file "menu.c"
 11400 ;; Parameters:    Size  Location     Type
 11401 ;;		None
 11402 ;; Auto vars:     Size  Location     Type
 11403 ;;  i               1  104[BANK0 ] unsigned char 
 11404 ;; Return value:  Size  Location     Type
 11405 ;;                  1    wreg      void 
 11406 ;; Registers used:
 11407 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11408 ;; Tracked objects:
 11409 ;;		On entry : 0/0
 11410 ;;		On exit  : 0/0
 11411 ;;		Unchanged: 0/0
 11412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11414 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11415 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11416 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11417 ;;Total ram usage:        2 bytes
 11418 ;; Hardware stack levels used:    1
 11419 ;; Hardware stack levels required when called:   16
 11420 ;; This function calls:
 11421 ;;		_Lcd_Print_String
 11422 ;;		___lbmod
 11423 ;;		___wmul
 11424 ;;		_clear_row1
 11425 ;;		_clear_row2
 11426 ;;		_un_block_code
 11427 ;; This function is called by:
 11428 ;;		_Function_H
 11429 ;; This function uses a non-reentrant model
 11430 ;;
 11431                           
 11432                           	psect	text20
 11433  007A4C                     __ptext20:
 11434                           	opt stack 0
 11435  007A4C                     _Function_H_5:
 11436                           	opt stack 12
 11437                           
 11438                           ;menu.c: 1408: which_screen = ARPEGGIATOR_NOTE_LENGTH_MENU,
 11439                           ;menu.c: 1409: lcd_print_once = 0;
 11440                           
 11441                           ;incstack = 0
 11442  007A4C  0E1E               	movlw	30
 11443  007A4E  6E4F               	movwf	_which_screen,c
 11444  007A50  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11445                           
 11446                           ;menu.c: 1410: encoder_click = 0;
 11447  007A52  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11448                           
 11449                           ;menu.c: 1413: for(unsigned char i = 0; i < 12; i++) {
 11450  007A54  0E00               	movlw	0
 11451  007A56  0100               	movlb	0	; () banked
 11452  007A58  6FC8               	movwf	Function_H_5@i& (0+255),b
 11453  007A5A                     l32459:
 11454                           
 11455                           ; BSR set to: 0
 11456  007A5A  0E0B               	movlw	11
 11457  007A5C  65C8               	cpfsgt	Function_H_5@i& (0+255),b
 11458  007A5E  D001               	goto	l3826
 11459  007A60  D03C               	goto	l3829
 11460  007A62                     l3826:
 11461                           
 11462                           ; BSR set to: 0
 11463                           ;menu.c: 1414: if(NOTE_LENGTH_PULSES_ARRAY[i] == NOTE_LENGTH_PULSES) {
 11464                           
 11465                           ; BSR set to: 0
 11466  007A62  51C8               	movf	Function_H_5@i& (0+255),w,b
 11467  007A64  0D01               	mullw	1
 11468  007A66  0EB8               	movlw	low _NOTE_LENGTH_PULSES_ARRAY
 11469  007A68  24F3               	addwf	prodl,w,c
 11470  007A6A  6ED9               	movwf	fsr2l,c
 11471  007A6C  0E02               	movlw	high _NOTE_LENGTH_PULSES_ARRAY
 11472  007A6E  20F4               	addwfc	prodh,w,c
 11473  007A70  6EDA               	movwf	fsr2h,c
 11474  007A72  504D               	movf	_NOTE_LENGTH_PULSES,w,c
 11475  007A74  18DE               	xorwf	postinc2,w,c
 11476  007A76  B4D8               	btfsc	status,2,c
 11477                           
 11478                           ; BSR set to: 0
 11479                           ;menu.c: 1416: arpeggiatorNoteLengthMenu.selector = i;
 11480  007A78  C0C8  F12B         	movff	Function_H_5@i,_arpeggiatorNoteLengthMenu+2
 11481                           
 11482                           ; BSR set to: 0
 11483                           
 11484                           ; BSR set to: 0
 11485  007A7C  2BC8               	incf	Function_H_5@i& (0+255),f,b
 11486  007A7E  D7ED               	goto	l32459
 11487  007A80                     
 11488                           ;menu.c: 1426: un_block_code();
 11489                           
 11490                           ; BSR set to: 0
 11491  007A80  ECAB  F04C         	call	_un_block_code	;wreg free
 11492                           
 11493                           ;menu.c: 1428: if (lcd_print_once == 0) {
 11494  007A84  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11495  007A86  D028               	goto	l3831
 11496                           
 11497                           ;menu.c: 1429: clear_row1();
 11498  007A88  EC16  F04C         	call	_clear_row1	;wreg free
 11499                           
 11500                           ;menu.c: 1430: Lcd_Print_String("Note Length:");
 11501  007A8C  0E32               	movlw	low STR_48
 11502  007A8E  0100               	movlb	0	; () banked
 11503  007A90  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11504  007A92  0EFF               	movlw	high STR_48
 11505  007A94  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11506  007A96  EC74  F042         	call	_Lcd_Print_String	;wreg free
 11507                           
 11508                           ;menu.c: 1431: clear_row2();
 11509  007A9A  EC02  F04C         	call	_clear_row2	;wreg free
 11510                           
 11511                           ;menu.c: 1432: Lcd_Print_String(LCD_STRINGS[(arpeggiatorNoteLengthMenu.selector % arpegg
      +                          iatorNoteLengthMenu.number) + arpeggiatorNoteLengthMenu.address]);
 11512  007A9E  0101               	movlb	1	; () banked
 11513  007AA0  5129               	movf	_arpeggiatorNoteLengthMenu& (0+255),w,b
 11514  007AA2  6EE6               	movwf	postinc1,c
 11515  007AA4  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 11516  007AA6  6EE6               	movwf	postinc1,c
 11517  007AA8  EC61  F041         	call	___lbmod	;wreg free
 11518  007AAC  503F               	movf	btemp,w,c
 11519  007AAE  0101               	movlb	1	; () banked
 11520  007AB0  252A               	addwf	(_arpeggiatorNoteLengthMenu+1)& (0+255),w,b
 11521  007AB2  0100               	movlb	0	; () banked
 11522  007AB4  6F60               	movwf	___wmul@multiplier& (0+255),b
 11523  007AB6  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 11524  007AB8  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 11525  007ABA  0E00               	movlw	0
 11526  007ABC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11527  007ABE  0E11               	movlw	17
 11528  007AC0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 11529  007AC2  EC2A  F04C         	call	___wmul	;wreg free
 11530  007AC6  0E9E               	movlw	low _LCD_STRINGS
 11531  007AC8  0100               	movlb	0	; () banked
 11532  007ACA  2560               	addwf	?___wmul& (0+255),w,b
 11533  007ACC  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11534  007ACE  0EF3               	movlw	high _LCD_STRINGS
 11535  007AD0  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 11536  007AD2  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11537  007AD4  EC74  F042         	call	_Lcd_Print_String	;wreg free
 11538  007AD8                     l3831:
 11539                           
 11540                           ;menu.c: 1433: }
 11541                           ;menu.c: 1434: lcd_print_once = 1;
 11542  007AD8  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11543  007ADA                     l3829:
 11544  007ADA  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11545  007ADC  D7D1               	goto	l3830
 11546                           
 11547                           ;menu.c: 1435: }
 11548                           ;menu.c: 1438: NOTE_LENGTH_PULSES = NOTE_LENGTH_PULSES_ARRAY[arpeggiatorNoteLengthMenu.s
      +                          elector];
 11549  007ADE  0101               	movlb	1	; () banked
 11550  007AE0  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 11551  007AE2  0D01               	mullw	1
 11552  007AE4  0EB8               	movlw	low _NOTE_LENGTH_PULSES_ARRAY
 11553  007AE6  24F3               	addwf	prodl,w,c
 11554  007AE8  6ED9               	movwf	fsr2l,c
 11555  007AEA  0E02               	movlw	high _NOTE_LENGTH_PULSES_ARRAY
 11556  007AEC  20F4               	addwfc	prodh,w,c
 11557  007AEE  6EDA               	movwf	fsr2h,c
 11558  007AF0  50DF               	movf	indf2,w,c
 11559  007AF2  6E4D               	movwf	_NOTE_LENGTH_PULSES,c
 11560                           
 11561                           ; BSR set to: 1
 11562  007AF4  0012               	return		;funcret
 11563  007AF6                     __end_of_Function_H_5:
 11564                           	opt stack 0
 11565                           tblptru	equ	0xFF8
 11566                           tblptrh	equ	0xFF7
 11567                           tblptrl	equ	0xFF6
 11568                           tablat	equ	0xFF5
 11569                           prodh	equ	0xFF4
 11570                           prodl	equ	0xFF3
 11571                           intcon	equ	0xFF2
 11572                           intcon2	equ	0xFF1
 11573                           postinc0	equ	0xFEE
 11574                           wreg	equ	0xFE8
 11575                           postinc1	equ	0xFE6
 11576                           indf2	equ	0xFDF
 11577                           postinc2	equ	0xFDE
 11578                           postdec2	equ	0xFDD
 11579                           fsr2h	equ	0xFDA
 11580                           fsr2l	equ	0xFD9
 11581                           status	equ	0xFD8
 11582                           
 11583 ;; *************** function _Function_H_4 *****************
 11584 ;; Defined at:
 11585 ;;		line 1367 in file "menu.c"
 11586 ;; Parameters:    Size  Location     Type
 11587 ;;		None
 11588 ;; Auto vars:     Size  Location     Type
 11589 ;;		None
 11590 ;; Return value:  Size  Location     Type
 11591 ;;                  1    wreg      void 
 11592 ;; Registers used:
 11593 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11594 ;; Tracked objects:
 11595 ;;		On entry : 0/0
 11596 ;;		On exit  : 0/0
 11597 ;;		Unchanged: 0/0
 11598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11600 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11601 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11602 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11603 ;;Total ram usage:        0 bytes
 11604 ;; Hardware stack levels used:    1
 11605 ;; Hardware stack levels required when called:   16
 11606 ;; This function calls:
 11607 ;;		_Lcd_Print_String
 11608 ;;		___lbmod
 11609 ;;		___wmul
 11610 ;;		_clear_row1
 11611 ;;		_clear_row2
 11612 ;;		_setupArpeggio
 11613 ;;		_un_block_code
 11614 ;; This function is called by:
 11615 ;;		_Function_H
 11616 ;; This function uses a non-reentrant model
 11617 ;;
 11618                           
 11619                           	psect	text21
 11620  007794                     __ptext21:
 11621                           	opt stack 0
 11622  007794                     _Function_H_4:
 11623                           	opt stack 12
 11624                           
 11625                           ;menu.c: 1369: which_screen = ARPEGGIATOR_ARPEGGIO_TYPE_MENU,
 11626                           ;menu.c: 1370: lcd_print_once = 0;
 11627                           
 11628                           ; BSR set to: 1
 11629                           ;incstack = 0
 11630  007794  0E1D               	movlw	29
 11631  007796  6E4F               	movwf	_which_screen,c
 11632  007798  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11633                           
 11634                           ;menu.c: 1371: encoder_click = 0;
 11635  00779A  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11636                           
 11637                           ;menu.c: 1373: arpeggiatorTypeMenu.selector = ARPEGGIO_TYPE;
 11638  00779C  C035  F12E         	movff	_ARPEGGIO_TYPE,_arpeggiatorTypeMenu+2
 11639                           
 11640                           ;menu.c: 1375: while(encoder_click == 0) {
 11641  0077A0  D02D               	goto	l3813
 11642  0077A2                     
 11643                           ;menu.c: 1379: un_block_code();
 11644  0077A2  ECAB  F04C         	call	_un_block_code	;wreg free
 11645                           
 11646                           ;menu.c: 1381: if (lcd_print_once == 0) {
 11647  0077A6  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11648  0077A8  D028               	goto	l3815
 11649                           
 11650                           ;menu.c: 1382: clear_row1();
 11651  0077AA  EC16  F04C         	call	_clear_row1	;wreg free
 11652                           
 11653                           ;menu.c: 1383: Lcd_Print_String("Select Arpeggio:");
 11654  0077AE  0EB9               	movlw	low STR_47
 11655  0077B0  0100               	movlb	0	; () banked
 11656  0077B2  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11657  0077B4  0EFD               	movlw	high STR_47
 11658  0077B6  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11659  0077B8  EC74  F042         	call	_Lcd_Print_String	;wreg free
 11660                           
 11661                           ;menu.c: 1384: clear_row2();
 11662  0077BC  EC02  F04C         	call	_clear_row2	;wreg free
 11663                           
 11664                           ;menu.c: 1385: Lcd_Print_String(LCD_STRINGS[(arpeggiatorTypeMenu.selector % arpeggiatorT
      +                          ypeMenu.number) + arpeggiatorTypeMenu.address]);
 11665  0077C0  0101               	movlb	1	; () banked
 11666  0077C2  512C               	movf	_arpeggiatorTypeMenu& (0+255),w,b
 11667  0077C4  6EE6               	movwf	postinc1,c
 11668  0077C6  512E               	movf	(_arpeggiatorTypeMenu+2)& (0+255),w,b
 11669  0077C8  6EE6               	movwf	postinc1,c
 11670  0077CA  EC61  F041         	call	___lbmod	;wreg free
 11671  0077CE  503F               	movf	btemp,w,c
 11672  0077D0  0101               	movlb	1	; () banked
 11673  0077D2  252D               	addwf	(_arpeggiatorTypeMenu+1)& (0+255),w,b
 11674  0077D4  0100               	movlb	0	; () banked
 11675  0077D6  6F60               	movwf	___wmul@multiplier& (0+255),b
 11676  0077D8  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 11677  0077DA  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 11678  0077DC  0E00               	movlw	0
 11679  0077DE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11680  0077E0  0E11               	movlw	17
 11681  0077E2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 11682  0077E4  EC2A  F04C         	call	___wmul	;wreg free
 11683  0077E8  0E9E               	movlw	low _LCD_STRINGS
 11684  0077EA  0100               	movlb	0	; () banked
 11685  0077EC  2560               	addwf	?___wmul& (0+255),w,b
 11686  0077EE  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11687  0077F0  0EF3               	movlw	high _LCD_STRINGS
 11688  0077F2  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 11689  0077F4  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11690  0077F6  EC74  F042         	call	_Lcd_Print_String	;wreg free
 11691  0077FA                     l3815:
 11692                           
 11693                           ;menu.c: 1386: }
 11694                           ;menu.c: 1387: lcd_print_once = 1;
 11695  0077FA  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11696  0077FC                     l3813:
 11697  0077FC  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11698  0077FE  D7D1               	goto	l3814
 11699                           
 11700                           ;menu.c: 1388: }
 11701                           ;menu.c: 1390: ARPEGGIO_TYPE = arpeggiatorTypeMenu.selector;
 11702  007800  C12E  F035         	movff	_arpeggiatorTypeMenu+2,_ARPEGGIO_TYPE
 11703                           
 11704                           ;menu.c: 1393: if((ARPEGGIO_TYPE == AS_PRESSED) || (ARPEGGIO_TYPE == UP) || (ARPEGGIO_TY
      +                          PE == UP_DOWN) || (ARPEGGIO_TYPE == RANDOM) || (ARPEGGIO_TYPE == RANDOM_NON_REPEATING)) 
      +                          {
 11705  007804  0E06               	movlw	6
 11706  007806  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 11707  007808  B4D8               	btfsc	status,2,c
 11708  00780A  D00F               	goto	u58850
 11709  00780C  5035               	movf	_ARPEGGIO_TYPE,w,c
 11710  00780E  B4D8               	btfsc	status,2,c
 11711  007810  D00C               	goto	u58850
 11712  007812  0E02               	movlw	2
 11713  007814  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 11714  007816  B4D8               	btfsc	status,2,c
 11715  007818  D008               	goto	u58850
 11716  00781A  0E05               	movlw	5
 11717  00781C  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 11718  00781E  B4D8               	btfsc	status,2,c
 11719  007820  D004               	goto	u58850
 11720  007822  0E04               	movlw	4
 11721  007824  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 11722  007826  A4D8               	btfss	status,2,c
 11723  007828  D002               	goto	l3817
 11724  00782A                     u58850:
 11725                           
 11726                           ;menu.c: 1394: startingDirection = UP;
 11727  00782A  0E00               	movlw	0
 11728  00782C  6E34               	movwf	_startingDirection,c
 11729  00782E                     l3817:
 11730                           
 11731                           ;menu.c: 1395: }
 11732                           ;menu.c: 1397: if((ARPEGGIO_TYPE == DOWN) || (ARPEGGIO_TYPE == DOWN_UP)) {
 11733  00782E  0435               	decf	_ARPEGGIO_TYPE,w,c
 11734  007830  B4D8               	btfsc	status,2,c
 11735  007832  D004               	goto	u58870
 11736  007834  0E03               	movlw	3
 11737  007836  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 11738  007838  A4D8               	btfss	status,2,c
 11739  00783A  D002               	goto	l3820
 11740  00783C                     u58870:
 11741                           
 11742                           ;menu.c: 1398: startingDirection = DOWN;
 11743  00783C  0E01               	movlw	1
 11744  00783E  6E34               	movwf	_startingDirection,c
 11745  007840                     l3820:
 11746                           
 11747                           ;menu.c: 1399: }
 11748                           ;menu.c: 1401: setupArpeggio();
 11749  007840  EC59  F045         	call	_setupArpeggio	;wreg free
 11750  007844  0012               	return		;funcret
 11751  007846                     __end_of_Function_H_4:
 11752                           	opt stack 0
 11753                           tblptru	equ	0xFF8
 11754                           tblptrh	equ	0xFF7
 11755                           tblptrl	equ	0xFF6
 11756                           tablat	equ	0xFF5
 11757                           prodh	equ	0xFF4
 11758                           prodl	equ	0xFF3
 11759                           intcon	equ	0xFF2
 11760                           intcon2	equ	0xFF1
 11761                           postinc0	equ	0xFEE
 11762                           wreg	equ	0xFE8
 11763                           postinc1	equ	0xFE6
 11764                           indf2	equ	0xFDF
 11765                           postinc2	equ	0xFDE
 11766                           postdec2	equ	0xFDD
 11767                           fsr2h	equ	0xFDA
 11768                           fsr2l	equ	0xFD9
 11769                           status	equ	0xFD8
 11770                           
 11771 ;; *************** function _Function_H_3 *****************
 11772 ;; Defined at:
 11773 ;;		line 1336 in file "menu.c"
 11774 ;; Parameters:    Size  Location     Type
 11775 ;;		None
 11776 ;; Auto vars:     Size  Location     Type
 11777 ;;		None
 11778 ;; Return value:  Size  Location     Type
 11779 ;;                  1    wreg      void 
 11780 ;; Registers used:
 11781 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11782 ;; Tracked objects:
 11783 ;;		On entry : 0/0
 11784 ;;		On exit  : 0/0
 11785 ;;		Unchanged: 0/0
 11786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11791 ;;Total ram usage:        0 bytes
 11792 ;; Hardware stack levels used:    1
 11793 ;; Hardware stack levels required when called:   16
 11794 ;; This function calls:
 11795 ;;		_Lcd_Print_String
 11796 ;;		_Lcd_Set_Cursor
 11797 ;;		_clear_row2
 11798 ;;		_int2string
 11799 ;;		_un_block_code
 11800 ;; This function is called by:
 11801 ;;		_Function_H
 11802 ;; This function uses a non-reentrant model
 11803 ;;
 11804                           
 11805                           	psect	text22
 11806  009134                     __ptext22:
 11807                           	opt stack 0
 11808  009134                     _Function_H_3:
 11809                           	opt stack 12
 11810                           
 11811                           ;menu.c: 1338: which_screen = ARPEGGIATOR_OCTAVES_MENU;
 11812                           
 11813                           ;incstack = 0
 11814  009134  0E1C               	movlw	28
 11815  009136  6E4F               	movwf	_which_screen,c
 11816                           
 11817                           ;menu.c: 1339: lcd_print_once = 0;
 11818  009138  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11819                           
 11820                           ;menu.c: 1340: encoder_click = 0;
 11821  00913A  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11822                           
 11823                           ;menu.c: 1342: arpeggiatorOctavesMenu.selector = OCTAVES;
 11824  00913C  C04E  F131         	movff	_OCTAVES,_arpeggiatorOctavesMenu+2
 11825                           
 11826                           ;menu.c: 1344: while(encoder_click == 0) {
 11827  009140  D021               	goto	l3806
 11828  009142                     
 11829                           ;menu.c: 1348: un_block_code();
 11830  009142  ECAB  F04C         	call	_un_block_code	;wreg free
 11831                           
 11832                           ;menu.c: 1350: if (lcd_print_once == 0) {
 11833  009146  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11834  009148  D009               	goto	l3808
 11835                           
 11836                           ;menu.c: 1351: clear_row2();
 11837  00914A  EC02  F04C         	call	_clear_row2	;wreg free
 11838                           
 11839                           ;menu.c: 1352: Lcd_Print_String("Octave Range:");
 11840  00914E  0EEE               	movlw	low STR_46
 11841  009150  0100               	movlb	0	; () banked
 11842  009152  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11843  009154  0EFE               	movlw	high STR_46
 11844  009156  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11845  009158  EC74  F042         	call	_Lcd_Print_String	;wreg free
 11846  00915C                     l3808:
 11847                           
 11848                           ;menu.c: 1353: }
 11849                           ;menu.c: 1354: lcd_print_once = 1;
 11850  00915C  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11851                           
 11852                           ;menu.c: 1357: int2string(arpeggiatorOctavesMenu.selector);
 11853  00915E  C131  F060         	movff	_arpeggiatorOctavesMenu+2,int2string@number
 11854  009162  0100               	movlb	0	; () banked
 11855  009164  6B61               	clrf	(int2string@number+1)& (0+255),b
 11856  009166  EC08  F03B         	call	_int2string	;wreg free
 11857                           
 11858                           ;menu.c: 1358: Lcd_Set_Cursor(2,13);
 11859  00916A  0E0D               	movlw	13
 11860  00916C  0100               	movlb	0	; () banked
 11861  00916E  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 11862  009170  0E02               	movlw	2
 11863  009172  ECDD  F047         	call	_Lcd_Set_Cursor
 11864                           
 11865                           ;menu.c: 1359: Lcd_Print_String(string2display);
 11866  009176  0E92               	movlw	low _string2display
 11867  009178  0100               	movlb	0	; () banked
 11868  00917A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11869  00917C  0E01               	movlw	high _string2display
 11870  00917E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11871  009180  EC74  F042         	call	_Lcd_Print_String	;wreg free
 11872  009184                     l3806:
 11873  009184  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11874  009186  D7DD               	goto	l3807
 11875                           
 11876                           ;menu.c: 1360: }
 11877                           ;menu.c: 1362: OCTAVES = arpeggiatorOctavesMenu.selector;
 11878  009188  C131  F04E         	movff	_arpeggiatorOctavesMenu+2,_OCTAVES
 11879  00918C  0012               	return		;funcret
 11880  00918E                     __end_of_Function_H_3:
 11881                           	opt stack 0
 11882                           tblptru	equ	0xFF8
 11883                           tblptrh	equ	0xFF7
 11884                           tblptrl	equ	0xFF6
 11885                           tablat	equ	0xFF5
 11886                           prodh	equ	0xFF4
 11887                           prodl	equ	0xFF3
 11888                           intcon	equ	0xFF2
 11889                           intcon2	equ	0xFF1
 11890                           postinc0	equ	0xFEE
 11891                           wreg	equ	0xFE8
 11892                           postinc1	equ	0xFE6
 11893                           indf2	equ	0xFDF
 11894                           postinc2	equ	0xFDE
 11895                           postdec2	equ	0xFDD
 11896                           fsr2h	equ	0xFDA
 11897                           fsr2l	equ	0xFD9
 11898                           status	equ	0xFD8
 11899                           
 11900 ;; *************** function _Function_H_2 *****************
 11901 ;; Defined at:
 11902 ;;		line 1305 in file "menu.c"
 11903 ;; Parameters:    Size  Location     Type
 11904 ;;		None
 11905 ;; Auto vars:     Size  Location     Type
 11906 ;;		None
 11907 ;; Return value:  Size  Location     Type
 11908 ;;                  1    wreg      void 
 11909 ;; Registers used:
 11910 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11911 ;; Tracked objects:
 11912 ;;		On entry : 0/0
 11913 ;;		On exit  : 0/0
 11914 ;;		Unchanged: 0/0
 11915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11920 ;;Total ram usage:        0 bytes
 11921 ;; Hardware stack levels used:    1
 11922 ;; Hardware stack levels required when called:   16
 11923 ;; This function calls:
 11924 ;;		_Lcd_Print_String
 11925 ;;		_Lcd_Set_Cursor
 11926 ;;		_calculate_pulse_length
 11927 ;;		_clear_row2
 11928 ;;		_int2string
 11929 ;;		_un_block_code
 11930 ;; This function is called by:
 11931 ;;		_Function_H
 11932 ;; This function uses a non-reentrant model
 11933 ;;
 11934                           
 11935                           	psect	text23
 11936  008E28                     __ptext23:
 11937                           	opt stack 0
 11938  008E28                     _Function_H_2:
 11939                           	opt stack 12
 11940                           
 11941                           ;menu.c: 1307: which_screen = ARPEGGIATOR_TEMPO_MENU;
 11942                           
 11943                           ;incstack = 0
 11944  008E28  0E1B               	movlw	27
 11945  008E2A  6E4F               	movwf	_which_screen,c
 11946                           
 11947                           ;menu.c: 1308: lcd_print_once = 0;
 11948  008E2C  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11949                           
 11950                           ;menu.c: 1309: encoder_click = 0;
 11951  008E2E  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11952                           
 11953                           ;menu.c: 1311: arpeggiatorTempoMenu.selector = BPM;
 11954  008E30  C0FF  F134         	movff	_BPM,_arpeggiatorTempoMenu+2
 11955                           
 11956                           ;menu.c: 1313: while(encoder_click == 0) {
 11957  008E34  D021               	goto	l3799
 11958  008E36                     
 11959                           ;menu.c: 1317: un_block_code();
 11960  008E36  ECAB  F04C         	call	_un_block_code	;wreg free
 11961                           
 11962                           ;menu.c: 1319: if (lcd_print_once == 0) {
 11963  008E3A  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11964  008E3C  D009               	goto	l3801
 11965                           
 11966                           ;menu.c: 1320: clear_row2();
 11967  008E3E  EC02  F04C         	call	_clear_row2	;wreg free
 11968                           
 11969                           ;menu.c: 1321: Lcd_Print_String("Tempo (BPM): ");
 11970  008E42  0EB6               	movlw	low STR_45
 11971  008E44  0100               	movlb	0	; () banked
 11972  008E46  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11973  008E48  0EFE               	movlw	high STR_45
 11974  008E4A  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11975  008E4C  EC74  F042         	call	_Lcd_Print_String	;wreg free
 11976  008E50                     l3801:
 11977                           
 11978                           ;menu.c: 1322: }
 11979                           ;menu.c: 1323: lcd_print_once = 1;
 11980  008E50  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11981                           
 11982                           ;menu.c: 1326: int2string(arpeggiatorTempoMenu.selector);
 11983  008E52  C134  F060         	movff	_arpeggiatorTempoMenu+2,int2string@number
 11984  008E56  0100               	movlb	0	; () banked
 11985  008E58  6B61               	clrf	(int2string@number+1)& (0+255),b
 11986  008E5A  EC08  F03B         	call	_int2string	;wreg free
 11987                           
 11988                           ;menu.c: 1327: Lcd_Set_Cursor(2,13);
 11989  008E5E  0E0D               	movlw	13
 11990  008E60  0100               	movlb	0	; () banked
 11991  008E62  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 11992  008E64  0E02               	movlw	2
 11993  008E66  ECDD  F047         	call	_Lcd_Set_Cursor
 11994                           
 11995                           ;menu.c: 1328: Lcd_Print_String(string2display);
 11996  008E6A  0E92               	movlw	low _string2display
 11997  008E6C  0100               	movlb	0	; () banked
 11998  008E6E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11999  008E70  0E01               	movlw	high _string2display
 12000  008E72  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12001  008E74  EC74  F042         	call	_Lcd_Print_String	;wreg free
 12002  008E78                     l3799:
 12003  008E78  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12004  008E7A  D7DD               	goto	l3800
 12005                           
 12006                           ;menu.c: 1329: }
 12007                           ;menu.c: 1331: BPM = arpeggiatorTempoMenu.selector;
 12008  008E7C  C134  F0FF         	movff	_arpeggiatorTempoMenu+2,_BPM
 12009                           
 12010                           ;menu.c: 1332: TIMER_PRELOAD = calculate_pulse_length();
 12011  008E80  EC3F  F02F         	call	_calculate_pulse_length	;wreg free
 12012  008E84  C0C2  F17B         	movff	?_calculate_pulse_length,_TIMER_PRELOAD
 12013  008E88  C0C3  F17C         	movff	?_calculate_pulse_length+1,_TIMER_PRELOAD+1
 12014  008E8C  0012               	return		;funcret
 12015  008E8E                     __end_of_Function_H_2:
 12016                           	opt stack 0
 12017                           tblptru	equ	0xFF8
 12018                           tblptrh	equ	0xFF7
 12019                           tblptrl	equ	0xFF6
 12020                           tablat	equ	0xFF5
 12021                           prodh	equ	0xFF4
 12022                           prodl	equ	0xFF3
 12023                           intcon	equ	0xFF2
 12024                           intcon2	equ	0xFF1
 12025                           postinc0	equ	0xFEE
 12026                           wreg	equ	0xFE8
 12027                           postinc1	equ	0xFE6
 12028                           indf2	equ	0xFDF
 12029                           postinc2	equ	0xFDE
 12030                           postdec2	equ	0xFDD
 12031                           fsr2h	equ	0xFDA
 12032                           fsr2l	equ	0xFD9
 12033                           status	equ	0xFD8
 12034                           
 12035 ;; *************** function _Function_H_1 *****************
 12036 ;; Defined at:
 12037 ;;		line 1248 in file "menu.c"
 12038 ;; Parameters:    Size  Location     Type
 12039 ;;		None
 12040 ;; Auto vars:     Size  Location     Type
 12041 ;;  temp            1  103[BANK0 ] unsigned char 
 12042 ;; Return value:  Size  Location     Type
 12043 ;;                  1    wreg      void 
 12044 ;; Registers used:
 12045 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12046 ;; Tracked objects:
 12047 ;;		On entry : 0/0
 12048 ;;		On exit  : 0/0
 12049 ;;		Unchanged: 0/0
 12050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12052 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12054 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12055 ;;Total ram usage:        1 bytes
 12056 ;; Hardware stack levels used:    1
 12057 ;; Hardware stack levels required when called:   16
 12058 ;; This function calls:
 12059 ;;		_Lcd_Print_String
 12060 ;;		_clear_row2
 12061 ;;		_doTheUnLatch
 12062 ;;		_strcpy
 12063 ;;		_un_block_code
 12064 ;; This function is called by:
 12065 ;;		_Function_H
 12066 ;; This function uses a non-reentrant model
 12067 ;;
 12068                           
 12069                           	psect	text24
 12070  007056                     __ptext24:
 12071                           	opt stack 0
 12072  007056                     _Function_H_1:
 12073                           	opt stack 12
 12074                           
 12075                           ;menu.c: 1250: which_screen = ARPEGGIATOR_ON_OFF_MENU;
 12076                           
 12077                           ;incstack = 0
 12078  007056  0E1A               	movlw	26
 12079  007058  6E4F               	movwf	_which_screen,c
 12080                           
 12081                           ;menu.c: 1251: lcd_print_once = 0;
 12082  00705A  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12083                           
 12084                           ;menu.c: 1252: encoder_click = 0;
 12085  00705C  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12086                           
 12087                           ;menu.c: 1254: arpeggiatorOnOffMenu.selector = ARPEGGIO_ON;
 12088  00705E  0E00               	movlw	0
 12089  007060  B604               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 12090  007062  0E01               	movlw	1
 12091  007064  0101               	movlb	1	; () banked
 12092  007066  6F37               	movwf	(_arpeggiatorOnOffMenu+2)& (0+255),b
 12093                           
 12094                           ;menu.c: 1256: while(encoder_click == 0) {
 12095  007068  D039               	goto	l3789
 12096  00706A                     
 12097                           ;menu.c: 1260: un_block_code();
 12098                           
 12099                           ; BSR set to: 1
 12100  00706A  ECAB  F04C         	call	_un_block_code	;wreg free
 12101                           
 12102                           ;menu.c: 1262: if (lcd_print_once == 0) {
 12103  00706E  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12104  007070  D034               	goto	l3793
 12105                           
 12106                           ;menu.c: 1267: if(arpeggiatorOnOffMenu.selector == 0) {
 12107  007072  0101               	movlb	1	; () banked
 12108  007074  5137               	movf	(_arpeggiatorOnOffMenu+2)& (0+255),w,b
 12109  007076  A4D8               	btfss	status,2,c
 12110  007078  D016               	goto	l3792
 12111                           
 12112                           ; BSR set to: 1
 12113                           ;menu.c: 1268: clear_row2();
 12114  00707A  EC02  F04C         	call	_clear_row2	;wreg free
 12115                           
 12116                           ;menu.c: 1269: Lcd_Print_String("ARPEGGIATOR OFF");
 12117  00707E  0E3D               	movlw	low STR_40
 12118  007080  0100               	movlb	0	; () banked
 12119  007082  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12120  007084  0EFE               	movlw	high STR_40
 12121  007086  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12122  007088  EC74  F042         	call	_Lcd_Print_String	;wreg free
 12123                           
 12124                           ;menu.c: 1270: DISPLAY_MODE = 1;
 12125  00708C  0E01               	movlw	1
 12126  00708E  0100               	movlb	0	; () banked
 12127  007090  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 12128                           
 12129                           ; BSR set to: 0
 12130                           ;menu.c: 1271: strcpy(string_to_display, "AoFF");
 12131  007092  0EF8               	movlw	low _string_to_display
 12132  007094  6F60               	movwf	strcpy@to& (0+255),b
 12133  007096  0E01               	movlw	high _string_to_display
 12134  007098  6F61               	movwf	(strcpy@to+1)& (0+255),b
 12135  00709A  0ECD               	movlw	low STR_41
 12136  00709C  6F62               	movwf	strcpy@from& (0+255),b
 12137  00709E  0EFF               	movlw	high STR_41
 12138  0070A0  6F63               	movwf	(strcpy@from+1)& (0+255),b
 12139  0070A2  EC8E  F04B         	call	_strcpy	;wreg free
 12140  0070A6                     l3792:
 12141                           
 12142                           ;menu.c: 1273: }
 12143                           ;menu.c: 1274: if(arpeggiatorOnOffMenu.selector == 1) {
 12144  0070A6  0101               	movlb	1	; () banked
 12145  0070A8  0537               	decf	(_arpeggiatorOnOffMenu+2)& (0+255),w,b
 12146  0070AA  A4D8               	btfss	status,2,c
 12147  0070AC  D016               	goto	l3793
 12148                           
 12149                           ; BSR set to: 1
 12150                           ;menu.c: 1275: clear_row2();
 12151  0070AE  EC02  F04C         	call	_clear_row2	;wreg free
 12152                           
 12153                           ;menu.c: 1276: Lcd_Print_String("ARPEGGIATOR ON");
 12154  0070B2  0E98               	movlw	low STR_42
 12155  0070B4  0100               	movlb	0	; () banked
 12156  0070B6  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12157  0070B8  0EFE               	movlw	high STR_42
 12158  0070BA  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12159  0070BC  EC74  F042         	call	_Lcd_Print_String	;wreg free
 12160                           
 12161                           ;menu.c: 1277: DISPLAY_MODE = 1;
 12162  0070C0  0E01               	movlw	1
 12163  0070C2  0100               	movlb	0	; () banked
 12164  0070C4  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 12165                           
 12166                           ; BSR set to: 0
 12167                           ;menu.c: 1278: strcpy(string_to_display, " ArP");
 12168  0070C6  0EF8               	movlw	low _string_to_display
 12169  0070C8  6F60               	movwf	strcpy@to& (0+255),b
 12170  0070CA  0E01               	movlw	high _string_to_display
 12171  0070CC  6F61               	movwf	(strcpy@to+1)& (0+255),b
 12172  0070CE  0ED2               	movlw	low STR_43
 12173  0070D0  6F62               	movwf	strcpy@from& (0+255),b
 12174  0070D2  0EFF               	movlw	high STR_43
 12175  0070D4  6F63               	movwf	(strcpy@from+1)& (0+255),b
 12176  0070D6  EC8E  F04B         	call	_strcpy	;wreg free
 12177  0070DA                     l3793:
 12178                           
 12179                           ;menu.c: 1279: }
 12180                           ;menu.c: 1280: }
 12181                           ;menu.c: 1281: lcd_print_once = 1;
 12182  0070DA  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12183  0070DC                     l3789:
 12184  0070DC  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12185  0070DE  D7C5               	goto	l3790
 12186                           
 12187                           ;menu.c: 1282: }
 12188                           ;menu.c: 1285: if(arpeggiatorOnOffMenu.selector == 0){
 12189  0070E0  0101               	movlb	1	; () banked
 12190  0070E2  5137               	movf	(_arpeggiatorOnOffMenu+2)& (0+255),w,b
 12191  0070E4  A4D8               	btfss	status,2,c
 12192  0070E6  D01B               	goto	l3795
 12193                           
 12194                           ; BSR set to: 1
 12195                           ;menu.c: 1288: unsigned char temp = UN_LATCH_MODE;
 12196  0070E8  0E00               	movlw	0
 12197  0070EA  BE03               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 12198  0070EC  0E01               	movlw	1
 12199  0070EE  0100               	movlb	0	; () banked
 12200  0070F0  6FC7               	movwf	Function_H_1@temp& (0+255),b
 12201                           
 12202                           ; BSR set to: 0
 12203                           ;menu.c: 1290: UN_LATCH_MODE = 0;
 12204  0070F2  9E03               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 12205                           
 12206                           ; BSR set to: 0
 12207                           ;menu.c: 1291: doTheUnLatch();
 12208  0070F4  ECEE  F028         	call	_doTheUnLatch	;wreg free
 12209                           
 12210                           ;menu.c: 1294: UN_LATCH_MODE = temp;
 12211  0070F8  0100               	movlb	0	; () banked
 12212  0070FA  A1C7               	btfss	Function_H_1@temp& (0+255),0,b
 12213  0070FC  D002               	goto	u58710
 12214  0070FE  8E03               	bsf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 12215  007100  D001               	goto	u58725
 12216  007102                     u58710:
 12217  007102  9E03               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 12218  007104                     u58725:
 12219                           
 12220                           ;menu.c: 1297: DISPLAY_MODE = 1;
 12221  007104  0E01               	movlw	1
 12222  007106  0100               	movlb	0	; () banked
 12223  007108  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 12224                           
 12225                           ; BSR set to: 0
 12226                           ;menu.c: 1298: strcpy(string_to_display, "AoFF");
 12227  00710A  0EF8               	movlw	low _string_to_display
 12228  00710C  6F60               	movwf	strcpy@to& (0+255),b
 12229  00710E  0E01               	movlw	high _string_to_display
 12230  007110  6F61               	movwf	(strcpy@to+1)& (0+255),b
 12231  007112  0ECD               	movlw	low STR_41
 12232  007114  6F62               	movwf	strcpy@from& (0+255),b
 12233  007116  0EFF               	movlw	high STR_41
 12234  007118  6F63               	movwf	(strcpy@from+1)& (0+255),b
 12235  00711A  EC8E  F04B         	call	_strcpy	;wreg free
 12236  00711E                     l3795:
 12237                           
 12238                           ;menu.c: 1299: }
 12239                           ;menu.c: 1301: ARPEGGIO_ON = arpeggiatorOnOffMenu.selector;
 12240  00711E  0101               	movlb	1	; () banked
 12241  007120  A137               	btfss	(_arpeggiatorOnOffMenu+2)& (0+255),0,b
 12242  007122  D002               	goto	u58730
 12243  007124  8604               	bsf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 12244  007126  0012               	return	
 12245  007128                     u58730:
 12246  007128  9604               	bcf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 12247  00712A  0012               	return		;funcret
 12248  00712C                     __end_of_Function_H_1:
 12249                           	opt stack 0
 12250                           tblptru	equ	0xFF8
 12251                           tblptrh	equ	0xFF7
 12252                           tblptrl	equ	0xFF6
 12253                           tablat	equ	0xFF5
 12254                           prodh	equ	0xFF4
 12255                           prodl	equ	0xFF3
 12256                           intcon	equ	0xFF2
 12257                           intcon2	equ	0xFF1
 12258                           postinc0	equ	0xFEE
 12259                           wreg	equ	0xFE8
 12260                           postinc1	equ	0xFE6
 12261                           indf2	equ	0xFDF
 12262                           postinc2	equ	0xFDE
 12263                           postdec2	equ	0xFDD
 12264                           fsr2h	equ	0xFDA
 12265                           fsr2l	equ	0xFD9
 12266                           status	equ	0xFD8
 12267                           
 12268 ;; *************** function _Function_G *****************
 12269 ;; Defined at:
 12270 ;;		line 1172 in file "menu.c"
 12271 ;; Parameters:    Size  Location     Type
 12272 ;;		None
 12273 ;; Auto vars:     Size  Location     Type
 12274 ;;		None
 12275 ;; Return value:  Size  Location     Type
 12276 ;;                  1    wreg      void 
 12277 ;; Registers used:
 12278 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12279 ;; Tracked objects:
 12280 ;;		On entry : 0/0
 12281 ;;		On exit  : 0/0
 12282 ;;		Unchanged: 0/0
 12283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12288 ;;Total ram usage:        0 bytes
 12289 ;; Hardware stack levels used:    1
 12290 ;; Hardware stack levels required when called:   17
 12291 ;; This function calls:
 12292 ;;		_Function_G_1
 12293 ;;		_Function_G_2
 12294 ;;		_Function_G_3
 12295 ;;		_Function_G_4
 12296 ;;		_Lcd_Print_String
 12297 ;;		___lbmod
 12298 ;;		___wmul
 12299 ;;		_clear_row2
 12300 ;;		_eepromExit
 12301 ;;		_un_block_code
 12302 ;; This function is called by:
 12303 ;;		_menu_lcd
 12304 ;; This function uses a non-reentrant model
 12305 ;;
 12306                           
 12307                           	psect	text25
 12308  008114                     __ptext25:
 12309                           	opt stack 0
 12310  008114                     _Function_G:
 12311                           	opt stack 12
 12312                           
 12313                           ;menu.c: 1174: which_screen = EEPROM_MENU;
 12314                           
 12315                           ;incstack = 0
 12316  008114  0E16               	movlw	22
 12317  008116  6E4F               	movwf	_which_screen,c
 12318                           
 12319                           ;menu.c: 1175: lcd_print_once = 0;
 12320  008118  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12321                           
 12322                           ;menu.c: 1177: while(encoder_click == 0) {
 12323  00811A  D024               	goto	l3761
 12324  00811C                     
 12325                           ;menu.c: 1181: un_block_code();
 12326  00811C  ECAB  F04C         	call	_un_block_code	;wreg free
 12327                           
 12328                           ;menu.c: 1183: if (lcd_print_once == 0) {
 12329  008120  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12330  008122  D01F               	goto	l3763
 12331                           
 12332                           ;menu.c: 1184: clear_row2();
 12333  008124  EC02  F04C         	call	_clear_row2	;wreg free
 12334                           
 12335                           ;menu.c: 1185: Lcd_Print_String(LCD_STRINGS[(eepromMenu.selector % eepromMenu.number) + 
      +                          eepromMenu.address]);
 12336  008128  0101               	movlb	1	; () banked
 12337  00812A  513B               	movf	_eepromMenu& (0+255),w,b
 12338  00812C  6EE6               	movwf	postinc1,c
 12339  00812E  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 12340  008130  6EE6               	movwf	postinc1,c
 12341  008132  EC61  F041         	call	___lbmod	;wreg free
 12342  008136  503F               	movf	btemp,w,c
 12343  008138  0101               	movlb	1	; () banked
 12344  00813A  253C               	addwf	(_eepromMenu+1)& (0+255),w,b
 12345  00813C  0100               	movlb	0	; () banked
 12346  00813E  6F60               	movwf	___wmul@multiplier& (0+255),b
 12347  008140  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 12348  008142  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 12349  008144  0E00               	movlw	0
 12350  008146  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12351  008148  0E11               	movlw	17
 12352  00814A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 12353  00814C  EC2A  F04C         	call	___wmul	;wreg free
 12354  008150  0E9E               	movlw	low _LCD_STRINGS
 12355  008152  0100               	movlb	0	; () banked
 12356  008154  2560               	addwf	?___wmul& (0+255),w,b
 12357  008156  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12358  008158  0EF3               	movlw	high _LCD_STRINGS
 12359  00815A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 12360  00815C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12361  00815E  EC74  F042         	call	_Lcd_Print_String	;wreg free
 12362  008162                     l3763:
 12363                           
 12364                           ;menu.c: 1186: }
 12365                           ;menu.c: 1187: lcd_print_once = 1;
 12366  008162  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12367  008164                     l3761:
 12368  008164  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12369  008166  D7DA               	goto	l3762
 12370                           
 12371                           ;menu.c: 1188: }
 12372                           ;menu.c: 1190: if(eepromMenu.selector == 0) {Function_G_1();}
 12373  008168  0101               	movlb	1	; () banked
 12374  00816A  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 12375  00816C  B4D8               	btfsc	status,2,c
 12376                           
 12377                           ; BSR set to: 1
 12378  00816E  EC0B  F03F         	call	_Function_G_1	;wreg free
 12379                           
 12380                           ;menu.c: 1191: if(eepromMenu.selector == 1) {Function_G_2();}
 12381  008172  0101               	movlb	1	; () banked
 12382  008174  053D               	decf	(_eepromMenu+2)& (0+255),w,b
 12383  008176  B4D8               	btfsc	status,2,c
 12384                           
 12385                           ; BSR set to: 1
 12386  008178  ECBB  F03E         	call	_Function_G_2	;wreg free
 12387                           
 12388                           ;menu.c: 1192: if(eepromMenu.selector == 2) {Function_G_3();}
 12389  00817C  0E02               	movlw	2
 12390  00817E  0101               	movlb	1	; () banked
 12391  008180  193D               	xorwf	(_eepromMenu+2)& (0+255),w,b
 12392  008182  B4D8               	btfsc	status,2,c
 12393                           
 12394                           ; BSR set to: 1
 12395  008184  EC6C  F048         	call	_Function_G_3	;wreg free
 12396                           
 12397                           ;menu.c: 1193: if(eepromMenu.selector == 3) {Function_G_4();}
 12398  008188  0E03               	movlw	3
 12399  00818A  0101               	movlb	1	; () banked
 12400  00818C  193D               	xorwf	(_eepromMenu+2)& (0+255),w,b
 12401  00818E  B4D8               	btfsc	status,2,c
 12402                           
 12403                           ; BSR set to: 1
 12404  008190  ECA9  F03F         	call	_Function_G_4	;wreg free
 12405                           
 12406                           ;menu.c: 1194: if(eepromMenu.selector == 4) {eepromExit();}
 12407  008194  0E04               	movlw	4
 12408  008196  0101               	movlb	1	; () banked
 12409  008198  193D               	xorwf	(_eepromMenu+2)& (0+255),w,b
 12410  00819A  A4D8               	btfss	status,2,c
 12411  00819C  0012               	return	
 12412                           
 12413                           ; BSR set to: 1
 12414  00819E  EC21  F04B         	call	_eepromExit	;wreg free
 12415  0081A2  0012               	return	
 12416  0081A4                     __end_of_Function_G:
 12417                           	opt stack 0
 12418                           tblptru	equ	0xFF8
 12419                           tblptrh	equ	0xFF7
 12420                           tblptrl	equ	0xFF6
 12421                           tablat	equ	0xFF5
 12422                           prodh	equ	0xFF4
 12423                           prodl	equ	0xFF3
 12424                           intcon	equ	0xFF2
 12425                           intcon2	equ	0xFF1
 12426                           postinc0	equ	0xFEE
 12427                           wreg	equ	0xFE8
 12428                           postinc1	equ	0xFE6
 12429                           indf2	equ	0xFDF
 12430                           postinc2	equ	0xFDE
 12431                           postdec2	equ	0xFDD
 12432                           fsr2h	equ	0xFDA
 12433                           fsr2l	equ	0xFD9
 12434                           status	equ	0xFD8
 12435                           
 12436 ;; *************** function _Function_G_4 *****************
 12437 ;; Defined at:
 12438 ;;		line 1139 in file "menu.c"
 12439 ;; Parameters:    Size  Location     Type
 12440 ;;		None
 12441 ;; Auto vars:     Size  Location     Type
 12442 ;;		None
 12443 ;; Return value:  Size  Location     Type
 12444 ;;                  1    wreg      void 
 12445 ;; Registers used:
 12446 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12447 ;; Tracked objects:
 12448 ;;		On entry : 0/0
 12449 ;;		On exit  : 0/0
 12450 ;;		Unchanged: 0/0
 12451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12456 ;;Total ram usage:        0 bytes
 12457 ;; Hardware stack levels used:    1
 12458 ;; Hardware stack levels required when called:   16
 12459 ;; This function calls:
 12460 ;;		_Busy_eep
 12461 ;;		_Lcd_Print_String
 12462 ;;		_Write_b_eep
 12463 ;;		___lbmod
 12464 ;;		___wmul
 12465 ;;		_clear_row1
 12466 ;;		_clear_row2
 12467 ;;		_exitFunction
 12468 ;;		_un_block_code
 12469 ;; This function is called by:
 12470 ;;		_Function_G
 12471 ;; This function uses a non-reentrant model
 12472 ;;
 12473                           
 12474                           	psect	text26
 12475  007F52                     __ptext26:
 12476                           	opt stack 0
 12477  007F52                     _Function_G_4:
 12478                           	opt stack 12
 12479                           
 12480                           ;menu.c: 1143: which_screen = ENCODER_POLARITY_MENU;
 12481                           
 12482                           ;incstack = 0
 12483  007F52  0E18               	movlw	24
 12484  007F54  6E4F               	movwf	_which_screen,c
 12485                           
 12486                           ;menu.c: 1144: lcd_print_once = 0;
 12487  007F56  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12488                           
 12489                           ;menu.c: 1145: encoder_click = 0;
 12490  007F58  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12491                           
 12492                           ;menu.c: 1147: encoderPolarityMenu.selector = encoderPolarity;
 12493  007F5A  0E00               	movlw	0
 12494  007F5C  B405               	btfsc	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 12495  007F5E  0E01               	movlw	1
 12496  007F60  0101               	movlb	1	; () banked
 12497  007F62  6F3A               	movwf	(_encoderPolarityMenu+2)& (0+255),b
 12498                           
 12499                           ;menu.c: 1149: while(encoder_click == 0) {
 12500  007F64  D02D               	goto	l3754
 12501  007F66                     
 12502                           ;menu.c: 1153: un_block_code();
 12503                           
 12504                           ; BSR set to: 1
 12505  007F66  ECAB  F04C         	call	_un_block_code	;wreg free
 12506                           
 12507                           ;menu.c: 1155: if (lcd_print_once == 0) {
 12508  007F6A  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12509  007F6C  D028               	goto	l3756
 12510                           
 12511                           ;menu.c: 1156: clear_row1();
 12512  007F6E  EC16  F04C         	call	_clear_row1	;wreg free
 12513                           
 12514                           ;menu.c: 1157: Lcd_Print_String("Encoder Polarity");
 12515  007F72  0EEC               	movlw	low STR_39
 12516  007F74  0100               	movlb	0	; () banked
 12517  007F76  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12518  007F78  0EFD               	movlw	high STR_39
 12519  007F7A  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12520  007F7C  EC74  F042         	call	_Lcd_Print_String	;wreg free
 12521                           
 12522                           ;menu.c: 1158: clear_row2();
 12523  007F80  EC02  F04C         	call	_clear_row2	;wreg free
 12524                           
 12525                           ;menu.c: 1159: Lcd_Print_String(LCD_STRINGS[(encoderPolarityMenu.selector % encoderPolar
      +                          ityMenu.number) + encoderPolarityMenu.address]);
 12526  007F84  0101               	movlb	1	; () banked
 12527  007F86  5138               	movf	_encoderPolarityMenu& (0+255),w,b
 12528  007F88  6EE6               	movwf	postinc1,c
 12529  007F8A  513A               	movf	(_encoderPolarityMenu+2)& (0+255),w,b
 12530  007F8C  6EE6               	movwf	postinc1,c
 12531  007F8E  EC61  F041         	call	___lbmod	;wreg free
 12532  007F92  503F               	movf	btemp,w,c
 12533  007F94  0101               	movlb	1	; () banked
 12534  007F96  2539               	addwf	(_encoderPolarityMenu+1)& (0+255),w,b
 12535  007F98  0100               	movlb	0	; () banked
 12536  007F9A  6F60               	movwf	___wmul@multiplier& (0+255),b
 12537  007F9C  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 12538  007F9E  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 12539  007FA0  0E00               	movlw	0
 12540  007FA2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12541  007FA4  0E11               	movlw	17
 12542  007FA6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 12543  007FA8  EC2A  F04C         	call	___wmul	;wreg free
 12544  007FAC  0E9E               	movlw	low _LCD_STRINGS
 12545  007FAE  0100               	movlb	0	; () banked
 12546  007FB0  2560               	addwf	?___wmul& (0+255),w,b
 12547  007FB2  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12548  007FB4  0EF3               	movlw	high _LCD_STRINGS
 12549  007FB6  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 12550  007FB8  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12551  007FBA  EC74  F042         	call	_Lcd_Print_String	;wreg free
 12552  007FBE                     l3756:
 12553                           
 12554                           ;menu.c: 1160: }
 12555                           ;menu.c: 1161: lcd_print_once = 1;
 12556  007FBE  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12557  007FC0                     l3754:
 12558  007FC0  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12559  007FC2  D7D1               	goto	l3755
 12560                           
 12561                           ;menu.c: 1162: }
 12562                           ;menu.c: 1165: encoderPolarity = encoderPolarityMenu.selector;
 12563  007FC4  0101               	movlb	1	; () banked
 12564  007FC6  A13A               	btfss	(_encoderPolarityMenu+2)& (0+255),0,b
 12565  007FC8  D002               	goto	u58640
 12566  007FCA  8405               	bsf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 12567  007FCC  D001               	goto	u58655
 12568  007FCE                     u58640:
 12569  007FCE  9405               	bcf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 12570  007FD0                     u58655:
 12571                           
 12572                           ;menu.c: 1166: (Busy_eep(), Write_b_eep(0x02,encoderPolarityMenu.selector));
 12573  007FD0  ECFA  F04C         	call	_Busy_eep	;wreg free
 12574  007FD4  0E00               	movlw	0
 12575  007FD6  0100               	movlb	0	; () banked
 12576  007FD8  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 12577  007FDA  0E02               	movlw	2
 12578  007FDC  6F60               	movwf	Write_b_eep@badd& (0+255),b
 12579  007FDE  C13A  F062         	movff	_encoderPolarityMenu+2,Write_b_eep@bdat
 12580  007FE2  EC6C  F04A         	call	_Write_b_eep	;wreg free
 12581                           
 12582                           ;menu.c: 1167: exitFunction();
 12583  007FE6  ECCA  F04A         	call	_exitFunction	;wreg free
 12584  007FEA  0012               	return		;funcret
 12585  007FEC                     __end_of_Function_G_4:
 12586                           	opt stack 0
 12587                           tblptru	equ	0xFF8
 12588                           tblptrh	equ	0xFF7
 12589                           tblptrl	equ	0xFF6
 12590                           tablat	equ	0xFF5
 12591                           prodh	equ	0xFF4
 12592                           prodl	equ	0xFF3
 12593                           intcon	equ	0xFF2
 12594                           intcon2	equ	0xFF1
 12595                           postinc0	equ	0xFEE
 12596                           wreg	equ	0xFE8
 12597                           postinc1	equ	0xFE6
 12598                           indf2	equ	0xFDF
 12599                           postinc2	equ	0xFDE
 12600                           postdec2	equ	0xFDD
 12601                           fsr2h	equ	0xFDA
 12602                           fsr2l	equ	0xFD9
 12603                           status	equ	0xFD8
 12604                           
 12605 ;; *************** function _exitFunction *****************
 12606 ;; Defined at:
 12607 ;;		line 242 in file "menu.c"
 12608 ;; Parameters:    Size  Location     Type
 12609 ;;		None
 12610 ;; Auto vars:     Size  Location     Type
 12611 ;;		None
 12612 ;; Return value:  Size  Location     Type
 12613 ;;                  1    wreg      void 
 12614 ;; Registers used:
 12615 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12616 ;; Tracked objects:
 12617 ;;		On entry : 0/0
 12618 ;;		On exit  : 0/0
 12619 ;;		Unchanged: 0/0
 12620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12623 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12624 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12625 ;;Total ram usage:        2 bytes
 12626 ;; Hardware stack levels used:    1
 12627 ;; Hardware stack levels required when called:    9
 12628 ;; This function calls:
 12629 ;;		_Lcd_Print_String
 12630 ;;		_clear_row1
 12631 ;; This function is called by:
 12632 ;;		_menu_lcd
 12633 ;;		_Function_G_4
 12634 ;; This function uses a non-reentrant model
 12635 ;;
 12636                           
 12637                           	psect	text27
 12638  009594                     __ptext27:
 12639                           	opt stack 0
 12640  009594                     _exitFunction:
 12641                           	opt stack 20
 12642                           
 12643                           ;menu.c: 245: while(encoder_click == 0);
 12644                           
 12645                           ;incstack = 0
 12646  009594  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12647  009596  D7FE               	goto	_exitFunction
 12648                           
 12649                           ;menu.c: 251: clear_row1();
 12650  009598  EC16  F04C         	call	_clear_row1	;wreg free
 12651                           
 12652                           ;menu.c: 252: Lcd_Print_String("Set!");
 12653  00959C  0EC3               	movlw	low STR_20
 12654  00959E  0100               	movlb	0	; () banked
 12655  0095A0  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12656  0095A2  0EFF               	movlw	high STR_20
 12657  0095A4  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12658  0095A6  EC74  F042         	call	_Lcd_Print_String	;wreg free
 12659                           
 12660                           ;menu.c: 255: _delay((unsigned long)((500)*(20000000/4000.0)));
 12661  0095AA  0E0D               	movlw	13
 12662  0095AC  0100               	movlb	0	; () banked
 12663  0095AE  6F6F               	movwf	(??_exitFunction+1)& (0+255),b
 12664  0095B0  0EAF               	movlw	175
 12665  0095B2  6F6E               	movwf	??_exitFunction& (0+255),b
 12666  0095B4  0EB6               	movlw	182
 12667  0095B6                     u67077:
 12668  0095B6  2EE8               	decfsz	wreg,f,c
 12669  0095B8  D7FE               	bra	u67077
 12670  0095BA  2F6E               	decfsz	??_exitFunction& (0+255),f,b
 12671  0095BC  D7FC               	bra	u67077
 12672  0095BE  2F6F               	decfsz	(??_exitFunction+1)& (0+255),f,b
 12673  0095C0  D7FA               	bra	u67077
 12674  0095C2  F000               	nop	
 12675                           
 12676                           ;menu.c: 256: which_screen = MAIN_MENU;
 12677  0095C4  0E02               	movlw	2
 12678  0095C6  6E4F               	movwf	_which_screen,c
 12679                           
 12680                           ;menu.c: 257: lcd_print_once = 0;
 12681  0095C8  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12682                           
 12683                           ;menu.c: 258: encoder_click = 0;
 12684  0095CA  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12685  0095CC  0012               	return		;funcret
 12686  0095CE                     __end_of_exitFunction:
 12687                           	opt stack 0
 12688                           tblptru	equ	0xFF8
 12689                           tblptrh	equ	0xFF7
 12690                           tblptrl	equ	0xFF6
 12691                           tablat	equ	0xFF5
 12692                           prodh	equ	0xFF4
 12693                           prodl	equ	0xFF3
 12694                           intcon	equ	0xFF2
 12695                           intcon2	equ	0xFF1
 12696                           postinc0	equ	0xFEE
 12697                           wreg	equ	0xFE8
 12698                           postinc1	equ	0xFE6
 12699                           indf2	equ	0xFDF
 12700                           postinc2	equ	0xFDE
 12701                           postdec2	equ	0xFDD
 12702                           fsr2h	equ	0xFDA
 12703                           fsr2l	equ	0xFD9
 12704                           status	equ	0xFD8
 12705                           
 12706 ;; *************** function _Function_G_3 *****************
 12707 ;; Defined at:
 12708 ;;		line 1123 in file "menu.c"
 12709 ;; Parameters:    Size  Location     Type
 12710 ;;		None
 12711 ;; Auto vars:     Size  Location     Type
 12712 ;;		None
 12713 ;; Return value:  Size  Location     Type
 12714 ;;                  1    wreg      void 
 12715 ;; Registers used:
 12716 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12717 ;; Tracked objects:
 12718 ;;		On entry : 0/0
 12719 ;;		On exit  : 0/0
 12720 ;;		Unchanged: 0/0
 12721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12724 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12725 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12726 ;;Total ram usage:        2 bytes
 12727 ;; Hardware stack levels used:    1
 12728 ;; Hardware stack levels required when called:    9
 12729 ;; This function calls:
 12730 ;;		_Busy_eep
 12731 ;;		_Lcd_Print_String
 12732 ;;		_Write_b_eep
 12733 ;;		_clear_row1
 12734 ;;		_clear_row2
 12735 ;; This function is called by:
 12736 ;;		_Function_G
 12737 ;; This function uses a non-reentrant model
 12738 ;;
 12739                           
 12740                           	psect	text28
 12741  0090D8                     __ptext28:
 12742                           	opt stack 0
 12743  0090D8                     _Function_G_3:
 12744                           	opt stack 19
 12745                           
 12746                           ;menu.c: 1126: while(encoder_click == 0);
 12747                           
 12748                           ;incstack = 0
 12749  0090D8  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12750  0090DA  D7FE               	goto	_Function_G_3
 12751                           
 12752                           ;menu.c: 1128: (Busy_eep(), Write_b_eep(0,0x00));
 12753  0090DC  ECFA  F04C         	call	_Busy_eep	;wreg free
 12754  0090E0  0E00               	movlw	0
 12755  0090E2  0100               	movlb	0	; () banked
 12756  0090E4  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 12757  0090E6  0E00               	movlw	0
 12758  0090E8  6F60               	movwf	Write_b_eep@badd& (0+255),b
 12759  0090EA  0E00               	movlw	0
 12760  0090EC  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 12761  0090EE  EC6C  F04A         	call	_Write_b_eep	;wreg free
 12762                           
 12763                           ;menu.c: 1130: clear_row1();
 12764  0090F2  EC16  F04C         	call	_clear_row1	;wreg free
 12765                           
 12766                           ;menu.c: 1131: Lcd_Print_String("Restore Setting!");
 12767  0090F6  0E86               	movlw	low STR_37
 12768  0090F8  0100               	movlb	0	; () banked
 12769  0090FA  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12770  0090FC  0EFD               	movlw	high STR_37
 12771  0090FE  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12772  009100  EC74  F042         	call	_Lcd_Print_String	;wreg free
 12773                           
 12774                           ;menu.c: 1132: clear_row2();
 12775  009104  EC02  F04C         	call	_clear_row2	;wreg free
 12776                           
 12777                           ;menu.c: 1133: Lcd_Print_String("Rebooting...");
 12778  009108  0E25               	movlw	low STR_38
 12779  00910A  0100               	movlb	0	; () banked
 12780  00910C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12781  00910E  0EFF               	movlw	high STR_38
 12782  009110  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12783  009112  EC74  F042         	call	_Lcd_Print_String	;wreg free
 12784                           
 12785                           ;menu.c: 1134: _delay((unsigned long)((2500)*(20000000/4000.0)));
 12786  009116  0E40               	movlw	64
 12787  009118  0100               	movlb	0	; () banked
 12788  00911A  6F6F               	movwf	(??_Function_G_3+1)& (0+255),b
 12789  00911C  0E6A               	movlw	106
 12790  00911E  6F6E               	movwf	??_Function_G_3& (0+255),b
 12791  009120  0E97               	movlw	151
 12792  009122                     u67087:
 12793  009122  2EE8               	decfsz	wreg,f,c
 12794  009124  D7FE               	bra	u67087
 12795  009126  2F6E               	decfsz	??_Function_G_3& (0+255),f,b
 12796  009128  D7FC               	bra	u67087
 12797  00912A  2F6F               	decfsz	(??_Function_G_3+1)& (0+255),f,b
 12798  00912C  D7FA               	bra	u67087
 12799  00912E  D000               	nop2	
 12800  009130  00FF               	reset		;# 
 12801  009132  0012               	return		;funcret
 12802  009134                     __end_of_Function_G_3:
 12803                           	opt stack 0
 12804                           tblptru	equ	0xFF8
 12805                           tblptrh	equ	0xFF7
 12806                           tblptrl	equ	0xFF6
 12807                           tablat	equ	0xFF5
 12808                           prodh	equ	0xFF4
 12809                           prodl	equ	0xFF3
 12810                           intcon	equ	0xFF2
 12811                           intcon2	equ	0xFF1
 12812                           postinc0	equ	0xFEE
 12813                           wreg	equ	0xFE8
 12814                           postinc1	equ	0xFE6
 12815                           indf2	equ	0xFDF
 12816                           postinc2	equ	0xFDE
 12817                           postdec2	equ	0xFDD
 12818                           fsr2h	equ	0xFDA
 12819                           fsr2l	equ	0xFD9
 12820                           status	equ	0xFD8
 12821                           
 12822 ;; *************** function _Function_G_2 *****************
 12823 ;; Defined at:
 12824 ;;		line 1090 in file "menu.c"
 12825 ;; Parameters:    Size  Location     Type
 12826 ;;		None
 12827 ;; Auto vars:     Size  Location     Type
 12828 ;;		None
 12829 ;; Return value:  Size  Location     Type
 12830 ;;                  1    wreg      void 
 12831 ;; Registers used:
 12832 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12833 ;; Tracked objects:
 12834 ;;		On entry : 0/0
 12835 ;;		On exit  : 0/0
 12836 ;;		Unchanged: 0/0
 12837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12841 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12842 ;;Total ram usage:        0 bytes
 12843 ;; Hardware stack levels used:    1
 12844 ;; Hardware stack levels required when called:   16
 12845 ;; This function calls:
 12846 ;;		_Busy_eep
 12847 ;;		_Lcd_Print_String
 12848 ;;		_Write_b_eep
 12849 ;;		___lbmod
 12850 ;;		___wmul
 12851 ;;		_clear_row1
 12852 ;;		_clear_row2
 12853 ;;		_eepromExit
 12854 ;;		_exitLoad
 12855 ;;		_loadFromEEPROM
 12856 ;;		_un_block_code
 12857 ;; This function is called by:
 12858 ;;		_Function_G
 12859 ;; This function uses a non-reentrant model
 12860 ;;
 12861                           
 12862                           	psect	text29
 12863  007D76                     __ptext29:
 12864                           	opt stack 0
 12865  007D76                     _Function_G_2:
 12866                           	opt stack 12
 12867                           
 12868                           ;menu.c: 1092: which_screen = SAVES_MENU;
 12869                           
 12870                           ;incstack = 0
 12871  007D76  0E17               	movlw	23
 12872  007D78  6E4F               	movwf	_which_screen,c
 12873                           
 12874                           ;menu.c: 1093: encoder_click = 0;
 12875  007D7A  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12876                           
 12877                           ;menu.c: 1094: lcd_print_once = 0;
 12878  007D7C  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12879                           
 12880                           ;menu.c: 1096: while(encoder_click == 0) {
 12881  007D7E  D02C               	goto	l3739
 12882  007D80                     
 12883                           ;menu.c: 1100: un_block_code();
 12884  007D80  ECAB  F04C         	call	_un_block_code	;wreg free
 12885                           
 12886                           ;menu.c: 1102: if (lcd_print_once == 0) {
 12887  007D84  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12888  007D86  D027               	goto	l3741
 12889                           
 12890                           ;menu.c: 1103: clear_row1();
 12891  007D88  EC16  F04C         	call	_clear_row1	;wreg free
 12892                           
 12893                           ;menu.c: 1104: Lcd_Print_String("Load #:");
 12894  007D8C  0EB3               	movlw	low STR_36
 12895  007D8E  0100               	movlb	0	; () banked
 12896  007D90  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12897  007D92  0EFF               	movlw	high STR_36
 12898  007D94  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12899  007D96  EC74  F042         	call	_Lcd_Print_String	;wreg free
 12900                           
 12901                           ;menu.c: 1105: clear_row2();
 12902  007D9A  EC02  F04C         	call	_clear_row2	;wreg free
 12903                           
 12904                           ;menu.c: 1106: Lcd_Print_String(LCD_STRINGS[(savesMenu.selector % savesMenu.number) + sa
      +                          vesMenu.address]);
 12905  007D9E  0100               	movlb	0	; () banked
 12906  007DA0  51E2               	movf	_savesMenu& (0+255),w,b
 12907  007DA2  6EE6               	movwf	postinc1,c
 12908  007DA4  51E4               	movf	(_savesMenu+2)& (0+255),w,b
 12909  007DA6  6EE6               	movwf	postinc1,c
 12910  007DA8  EC61  F041         	call	___lbmod	;wreg free
 12911  007DAC  503F               	movf	btemp,w,c
 12912  007DAE  0100               	movlb	0	; () banked
 12913  007DB0  25E3               	addwf	(_savesMenu+1)& (0+255),w,b
 12914  007DB2  6F60               	movwf	___wmul@multiplier& (0+255),b
 12915  007DB4  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 12916  007DB6  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 12917  007DB8  0E00               	movlw	0
 12918  007DBA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12919  007DBC  0E11               	movlw	17
 12920  007DBE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 12921  007DC0  EC2A  F04C         	call	___wmul	;wreg free
 12922  007DC4  0E9E               	movlw	low _LCD_STRINGS
 12923  007DC6  0100               	movlb	0	; () banked
 12924  007DC8  2560               	addwf	?___wmul& (0+255),w,b
 12925  007DCA  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12926  007DCC  0EF3               	movlw	high _LCD_STRINGS
 12927  007DCE  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 12928  007DD0  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12929  007DD2  EC74  F042         	call	_Lcd_Print_String	;wreg free
 12930  007DD6                     l3741:
 12931                           
 12932                           ;menu.c: 1107: }
 12933                           ;menu.c: 1108: lcd_print_once = 1;
 12934  007DD6  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12935  007DD8                     l3739:
 12936  007DD8  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12937  007DDA  D7D2               	goto	l3740
 12938                           
 12939                           ;menu.c: 1109: }
 12940                           ;menu.c: 1111: if(savesMenu.selector == 4){eepromExit();}
 12941  007DDC  0E04               	movlw	4
 12942  007DDE  0100               	movlb	0	; () banked
 12943  007DE0  19E4               	xorwf	(_savesMenu+2)& (0+255),w,b
 12944  007DE2  A4D8               	btfss	status,2,c
 12945  007DE4  D003               	goto	l3743
 12946                           
 12947                           ; BSR set to: 0
 12948  007DE6  EC21  F04B         	call	_eepromExit	;wreg free
 12949  007DEA  D011               	goto	l3744
 12950  007DEC                     l3743:
 12951                           
 12952                           ;menu.c: 1112: else {
 12953                           ;menu.c: 1114: (Busy_eep(), Write_b_eep(0,(savesMenu.selector + 1)));
 12954  007DEC  ECFA  F04C         	call	_Busy_eep	;wreg free
 12955  007DF0  0E00               	movlw	0
 12956  007DF2  0100               	movlb	0	; () banked
 12957  007DF4  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 12958  007DF6  0E00               	movlw	0
 12959  007DF8  6F60               	movwf	Write_b_eep@badd& (0+255),b
 12960  007DFA  29E4               	incf	(_savesMenu+2)& (0+255),w,b
 12961  007DFC  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 12962  007DFE  EC6C  F04A         	call	_Write_b_eep	;wreg free
 12963                           
 12964                           ;menu.c: 1115: loadFromEEPROM(savesMenu.selector + 1);
 12965  007E02  0100               	movlb	0	; () banked
 12966  007E04  29E4               	incf	(_savesMenu+2)& (0+255),w,b
 12967  007E06  ECD7  F025         	call	_loadFromEEPROM
 12968                           
 12969                           ;menu.c: 1116: exitLoad();
 12970  007E0A  ECE7  F04A         	call	_exitLoad	;wreg free
 12971  007E0E                     l3744:
 12972                           
 12973                           ;menu.c: 1117: }
 12974                           ;menu.c: 1119: savesMenu.selector = 0;
 12975  007E0E  0E00               	movlw	0
 12976  007E10  0100               	movlb	0	; () banked
 12977  007E12  6FE4               	movwf	(_savesMenu+2)& (0+255),b
 12978                           
 12979                           ; BSR set to: 0
 12980  007E14  0012               	return		;funcret
 12981  007E16                     __end_of_Function_G_2:
 12982                           	opt stack 0
 12983                           tblptru	equ	0xFF8
 12984                           tblptrh	equ	0xFF7
 12985                           tblptrl	equ	0xFF6
 12986                           tablat	equ	0xFF5
 12987                           prodh	equ	0xFF4
 12988                           prodl	equ	0xFF3
 12989                           intcon	equ	0xFF2
 12990                           intcon2	equ	0xFF1
 12991                           postinc0	equ	0xFEE
 12992                           wreg	equ	0xFE8
 12993                           postinc1	equ	0xFE6
 12994                           indf2	equ	0xFDF
 12995                           postinc2	equ	0xFDE
 12996                           postdec2	equ	0xFDD
 12997                           fsr2h	equ	0xFDA
 12998                           fsr2l	equ	0xFD9
 12999                           status	equ	0xFD8
 13000                           
 13001 ;; *************** function _loadFromEEPROM *****************
 13002 ;; Defined at:
 13003 ;;		line 54 in file "eeprom.c"
 13004 ;; Parameters:    Size  Location     Type
 13005 ;;  slotNumber      1    wreg     unsigned char 
 13006 ;; Auto vars:     Size  Location     Type
 13007 ;;  slotNumber      1   77[BANK1 ] unsigned char 
 13008 ;;  byte_count      2   78[BANK1 ] unsigned int 
 13009 ;;  to_load        75    0[BANK1 ] unsigned char [75]
 13010 ;;  baseAddress     2   75[BANK1 ] unsigned int 
 13011 ;; Return value:  Size  Location     Type
 13012 ;;                  1    wreg      void 
 13013 ;; Registers used:
 13014 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13015 ;; Tracked objects:
 13016 ;;		On entry : 0/0
 13017 ;;		On exit  : 0/0
 13018 ;;		Unchanged: 0/0
 13019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13021 ;;      Locals:         0       0      80       0       0       0       0       0       0       0       0       0       
      +0       0
 13022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13023 ;;      Totals:         0       0      80       0       0       0       0       0       0       0       0       0       
      +0       0
 13024 ;;Total ram usage:       80 bytes
 13025 ;; Hardware stack levels used:    1
 13026 ;; Hardware stack levels required when called:    7
 13027 ;; This function calls:
 13028 ;;		_Read_b_eep
 13029 ;;		_calculate_pulse_length
 13030 ;; This function is called by:
 13031 ;;		_Function_G_2
 13032 ;;		_selectSlotOnBoot
 13033 ;; This function uses a non-reentrant model
 13034 ;;
 13035                           
 13036                           	psect	text30
 13037  004BAE                     __ptext30:
 13038                           	opt stack 0
 13039  004BAE                     _loadFromEEPROM:
 13040                           	opt stack 22
 13041                           
 13042                           ; BSR set to: 0
 13043                           ;incstack = 0
 13044                           ;loadFromEEPROM@slotNumber stored from wreg
 13045  004BAE  0101               	movlb	1	; () banked
 13046  004BB0  6FE4               	movwf	loadFromEEPROM@slotNumber& (0+255),b
 13047                           
 13048                           ;eeprom.c: 56: unsigned int baseAddress = 0;
 13049  004BB2  0E00               	movlw	0
 13050  004BB4  0101               	movlb	1	; () banked
 13051  004BB6  6FE3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13052  004BB8  0E00               	movlw	0
 13053  004BBA  6FE2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13054                           
 13055                           ; BSR set to: 1
 13056                           ;eeprom.c: 59: if (slotNumber == SLOT1) {baseAddress = 128;}
 13057  004BBC  05E4               	decf	loadFromEEPROM@slotNumber& (0+255),w,b
 13058  004BBE  A4D8               	btfss	status,2,c
 13059  004BC0  D004               	goto	l4451
 13060                           
 13061                           ; BSR set to: 1
 13062  004BC2  0E00               	movlw	0
 13063  004BC4  6FE3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13064  004BC6  0E80               	movlw	128
 13065  004BC8  6FE2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13066  004BCA                     l4451:
 13067                           
 13068                           ; BSR set to: 1
 13069                           ;eeprom.c: 60: if (slotNumber == SLOT2) {baseAddress = 256;}
 13070                           
 13071                           ; BSR set to: 1
 13072  004BCA  0E02               	movlw	2
 13073  004BCC  19E4               	xorwf	loadFromEEPROM@slotNumber& (0+255),w,b
 13074  004BCE  A4D8               	btfss	status,2,c
 13075  004BD0  D004               	goto	l4452
 13076                           
 13077                           ; BSR set to: 1
 13078  004BD2  0E01               	movlw	1
 13079  004BD4  6FE3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13080  004BD6  0E00               	movlw	0
 13081  004BD8  6FE2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13082  004BDA                     l4452:
 13083                           
 13084                           ; BSR set to: 1
 13085                           ;eeprom.c: 61: if (slotNumber == SLOT3) {baseAddress = 384;}
 13086                           
 13087                           ; BSR set to: 1
 13088  004BDA  0E03               	movlw	3
 13089  004BDC  19E4               	xorwf	loadFromEEPROM@slotNumber& (0+255),w,b
 13090  004BDE  A4D8               	btfss	status,2,c
 13091  004BE0  D004               	goto	l4453
 13092                           
 13093                           ; BSR set to: 1
 13094  004BE2  0E01               	movlw	1
 13095  004BE4  6FE3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13096  004BE6  0E80               	movlw	128
 13097  004BE8  6FE2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13098  004BEA                     l4453:
 13099                           
 13100                           ; BSR set to: 1
 13101                           ;eeprom.c: 62: if (slotNumber == SLOT4) {baseAddress = 512;}
 13102                           
 13103                           ; BSR set to: 1
 13104  004BEA  0E04               	movlw	4
 13105  004BEC  19E4               	xorwf	loadFromEEPROM@slotNumber& (0+255),w,b
 13106  004BEE  A4D8               	btfss	status,2,c
 13107  004BF0  D004               	goto	l4454
 13108                           
 13109                           ; BSR set to: 1
 13110  004BF2  0E02               	movlw	2
 13111  004BF4  6FE3               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13112  004BF6  0E00               	movlw	0
 13113  004BF8  6FE2               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13114  004BFA                     l4454:
 13115                           
 13116                           ; BSR set to: 1
 13117                           ;eeprom.c: 65: unsigned char to_load[75];
 13118                           ;eeprom.c: 68: for (unsigned int byte_count = 0; byte_count < 75; byte_count++){
 13119  004BFA  0E00               	movlw	0
 13120  004BFC  6FE6               	movwf	(loadFromEEPROM@byte_count+1)& (0+255),b
 13121  004BFE  0E00               	movlw	0
 13122  004C00  6FE5               	movwf	loadFromEEPROM@byte_count& (0+255),b
 13123                           
 13124                           ; BSR set to: 1
 13125  004C02  51E6               	movf	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13126  004C04  E11C               	bnz	l4456
 13127  004C06  D017               	goto	L1
 13128  004C08                     
 13129                           ; BSR set to: 1
 13130                           ;eeprom.c: 69: to_load[byte_count] = Read_b_eep(byte_count + baseAddress);
 13131                           
 13132                           ; BSR set to: 1
 13133  004C08  0E97               	movlw	low loadFromEEPROM@to_load
 13134  004C0A  25E5               	addwf	loadFromEEPROM@byte_count& (0+255),w,b
 13135  004C0C  6ED9               	movwf	fsr2l,c
 13136  004C0E  0E01               	movlw	high loadFromEEPROM@to_load
 13137  004C10  21E6               	addwfc	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13138  004C12  6EDA               	movwf	fsr2h,c
 13139  004C14  51E2               	movf	loadFromEEPROM@baseAddress& (0+255),w,b
 13140  004C16  25E5               	addwf	loadFromEEPROM@byte_count& (0+255),w,b
 13141  004C18  0100               	movlb	0	; () banked
 13142  004C1A  6F60               	movwf	Read_b_eep@badd& (0+255),b
 13143  004C1C  0101               	movlb	1	; () banked
 13144  004C1E  51E3               	movf	(loadFromEEPROM@baseAddress+1)& (0+255),w,b
 13145  004C20  21E6               	addwfc	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13146  004C22  0100               	movlb	0	; () banked
 13147  004C24  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
 13148  004C26  EC91  F04C         	call	_Read_b_eep	;wreg free
 13149  004C2A  6EDF               	movwf	indf2,c
 13150  004C2C  0101               	movlb	1	; () banked
 13151  004C2E  4BE5               	infsnz	loadFromEEPROM@byte_count& (0+255),f,b
 13152  004C30  2BE6               	incf	(loadFromEEPROM@byte_count+1)& (0+255),f,b
 13153                           
 13154                           ; BSR set to: 1
 13155  004C32  51E6               	movf	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13156  004C34  E104               	bnz	u57250
 13157  004C36                     L1:
 13158  004C36  0E4B               	movlw	75
 13159  004C38  5DE5               	subwf	loadFromEEPROM@byte_count& (0+255),w,b
 13160  004C3A  A0D8               	btfss	status,0,c
 13161  004C3C  D7E5               	goto	l4455
 13162  004C3E                     u57250:
 13163  004C3E                     l4456:
 13164                           
 13165                           ; BSR set to: 1
 13166                           ;eeprom.c: 70: }
 13167                           ;eeprom.c: 75: KEYBOARD_MODE = to_load[0];
 13168  004C3E  C197  F0F2         	movff	loadFromEEPROM@to_load,_KEYBOARD_MODE
 13169                           
 13170                           ;eeprom.c: 76: which_mode = to_load[1];
 13171  004C42  C198  F0F1         	movff	loadFromEEPROM@to_load+1,_which_mode
 13172                           
 13173                           ;eeprom.c: 77: which_triad = to_load[2];
 13174  004C46  C199  F0F0         	movff	loadFromEEPROM@to_load+2,_which_triad
 13175                           
 13176                           ;eeprom.c: 78: which_seventh = to_load[3];
 13177  004C4A  C19A  F0EF         	movff	loadFromEEPROM@to_load+3,_which_seventh
 13178                           
 13179                           ;eeprom.c: 81: TRANSPOSE_MODE = to_load[4];
 13180  004C4E  A19B               	btfss	(loadFromEEPROM@to_load+4)& (0+255),0,b
 13181  004C50  D002               	goto	u57260
 13182  004C52  8A04               	bsf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 13183  004C54  D001               	goto	u57275
 13184  004C56                     u57260:
 13185  004C56  9A04               	bcf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 13186  004C58                     u57275:
 13187                           
 13188                           ;eeprom.c: 84: DRUM_MODE = to_load[5];
 13189  004C58  0101               	movlb	1	; () banked
 13190  004C5A  A19C               	btfss	(loadFromEEPROM@to_load+5)& (0+255),0,b
 13191  004C5C  D002               	goto	u57280
 13192  004C5E  8801               	bsf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 13193  004C60  D001               	goto	u57295
 13194  004C62                     u57280:
 13195  004C62  9801               	bcf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 13196  004C64                     u57295:
 13197                           
 13198                           ;eeprom.c: 85: CONTROL_MODE = to_load[6];
 13199  004C64  0101               	movlb	1	; () banked
 13200  004C66  A19D               	btfss	(loadFromEEPROM@to_load+6)& (0+255),0,b
 13201  004C68  D002               	goto	u57300
 13202  004C6A  8601               	bsf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 13203  004C6C  D001               	goto	u57315
 13204  004C6E                     u57300:
 13205  004C6E  9601               	bcf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 13206  004C70                     u57315:
 13207                           
 13208                           ;eeprom.c: 88: DRUM_NOTE[0] = to_load[7];
 13209  004C70  C19E  F1E7         	movff	loadFromEEPROM@to_load+7,_DRUM_NOTE
 13210                           
 13211                           ;eeprom.c: 89: DRUM_NOTE[1] = to_load[8];
 13212  004C74  C19F  F1E8         	movff	loadFromEEPROM@to_load+8,_DRUM_NOTE+1
 13213                           
 13214                           ;eeprom.c: 90: DRUM_NOTE[2] = to_load[9];
 13215  004C78  C1A0  F1E9         	movff	loadFromEEPROM@to_load+9,_DRUM_NOTE+2
 13216                           
 13217                           ;eeprom.c: 91: DRUM_NOTE[3] = to_load[10];
 13218  004C7C  C1A1  F1EA         	movff	loadFromEEPROM@to_load+10,_DRUM_NOTE+3
 13219                           
 13220                           ;eeprom.c: 92: DRUM_NOTE[4] = to_load[11];
 13221  004C80  C1A2  F1EB         	movff	loadFromEEPROM@to_load+11,_DRUM_NOTE+4
 13222                           
 13223                           ;eeprom.c: 93: DRUM_NOTE[5] = to_load[12];
 13224  004C84  C1A3  F1EC         	movff	loadFromEEPROM@to_load+12,_DRUM_NOTE+5
 13225                           
 13226                           ;eeprom.c: 94: DRUM_NOTE[6] = to_load[13];
 13227  004C88  C1A4  F1ED         	movff	loadFromEEPROM@to_load+13,_DRUM_NOTE+6
 13228                           
 13229                           ;eeprom.c: 95: DRUM_NOTE[7] = to_load[14];
 13230  004C8C  C1A5  F1EE         	movff	loadFromEEPROM@to_load+14,_DRUM_NOTE+7
 13231                           
 13232                           ;eeprom.c: 98: DRUM_CC[0] = to_load[15];
 13233  004C90  C1A6  F0F5         	movff	loadFromEEPROM@to_load+15,_DRUM_CC
 13234                           
 13235                           ;eeprom.c: 99: DRUM_CC[1] = to_load[16];
 13236  004C94  C1A7  F0F6         	movff	loadFromEEPROM@to_load+16,_DRUM_CC+1
 13237                           
 13238                           ;eeprom.c: 100: DRUM_CC[2] = to_load[17];
 13239  004C98  C1A8  F0F7         	movff	loadFromEEPROM@to_load+17,_DRUM_CC+2
 13240                           
 13241                           ;eeprom.c: 101: DRUM_CC[3] = to_load[18];
 13242  004C9C  C1A9  F0F8         	movff	loadFromEEPROM@to_load+18,_DRUM_CC+3
 13243                           
 13244                           ;eeprom.c: 102: DRUM_CC[4] = to_load[19];
 13245  004CA0  C1AA  F0F9         	movff	loadFromEEPROM@to_load+19,_DRUM_CC+4
 13246                           
 13247                           ;eeprom.c: 103: DRUM_CC[5] = to_load[20];
 13248  004CA4  C1AB  F0FA         	movff	loadFromEEPROM@to_load+20,_DRUM_CC+5
 13249                           
 13250                           ;eeprom.c: 104: DRUM_CC[6] = to_load[21];
 13251  004CA8  C1AC  F0FB         	movff	loadFromEEPROM@to_load+21,_DRUM_CC+6
 13252                           
 13253                           ;eeprom.c: 105: DRUM_CC[7] = to_load[22];
 13254  004CAC  C1AD  F0FC         	movff	loadFromEEPROM@to_load+22,_DRUM_CC+7
 13255                           
 13256                           ;eeprom.c: 108: POT_MODE = to_load[23];
 13257  004CB0  0101               	movlb	1	; () banked
 13258  004CB2  A1AE               	btfss	(loadFromEEPROM@to_load+23)& (0+255),0,b
 13259  004CB4  D002               	goto	u57320
 13260  004CB6  8A05               	bsf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 13261  004CB8  D001               	goto	u57335
 13262  004CBA                     u57320:
 13263  004CBA  9A05               	bcf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 13264  004CBC                     u57335:
 13265                           
 13266                           ;eeprom.c: 111: inputPotsArray[0].controller_number = to_load[24];
 13267  004CBC  C1AF  F289         	movff	loadFromEEPROM@to_load+24,_inputPotsArray+1
 13268                           
 13269                           ;eeprom.c: 112: inputPotsArray[0].controller_number_two_byte = to_load[25];
 13270  004CC0  C1B0  F28A         	movff	loadFromEEPROM@to_load+25,_inputPotsArray+2
 13271                           
 13272                           ;eeprom.c: 114: inputPotsArray[1].controller_number = to_load[26];
 13273  004CC4  C1B1  F28C         	movff	loadFromEEPROM@to_load+26,_inputPotsArray+4
 13274                           
 13275                           ;eeprom.c: 115: inputPotsArray[1].controller_number_two_byte = to_load[27];
 13276  004CC8  C1B2  F28D         	movff	loadFromEEPROM@to_load+27,_inputPotsArray+5
 13277                           
 13278                           ;eeprom.c: 117: inputPotsArray[2].controller_number = to_load[28];
 13279  004CCC  C1B3  F28F         	movff	loadFromEEPROM@to_load+28,_inputPotsArray+7
 13280                           
 13281                           ;eeprom.c: 118: inputPotsArray[2].controller_number_two_byte = to_load[29];
 13282  004CD0  C1B4  F290         	movff	loadFromEEPROM@to_load+29,_inputPotsArray+8
 13283                           
 13284                           ;eeprom.c: 120: inputPotsArray[3].controller_number = to_load[30];
 13285  004CD4  C1B5  F292         	movff	loadFromEEPROM@to_load+30,_inputPotsArray+10
 13286                           
 13287                           ;eeprom.c: 121: inputPotsArray[3].controller_number_two_byte = to_load[31];
 13288  004CD8  C1B6  F293         	movff	loadFromEEPROM@to_load+31,_inputPotsArray+11
 13289                           
 13290                           ;eeprom.c: 123: inputPotsArray[4].controller_number = to_load[32];
 13291  004CDC  C1B7  F295         	movff	loadFromEEPROM@to_load+32,_inputPotsArray+13
 13292                           
 13293                           ;eeprom.c: 124: inputPotsArray[4].controller_number_two_byte = to_load[33];
 13294  004CE0  C1B8  F296         	movff	loadFromEEPROM@to_load+33,_inputPotsArray+14
 13295                           
 13296                           ;eeprom.c: 126: inputPotsArray[5].controller_number = to_load[34];
 13297  004CE4  C1B9  F298         	movff	loadFromEEPROM@to_load+34,_inputPotsArray+16
 13298                           
 13299                           ;eeprom.c: 127: inputPotsArray[5].controller_number_two_byte = to_load[35];
 13300  004CE8  C1BA  F299         	movff	loadFromEEPROM@to_load+35,_inputPotsArray+17
 13301                           
 13302                           ;eeprom.c: 129: inputPotsArray[6].controller_number = to_load[36];
 13303  004CEC  C1BB  F29B         	movff	loadFromEEPROM@to_load+36,_inputPotsArray+19
 13304                           
 13305                           ;eeprom.c: 130: inputPotsArray[6].controller_number_two_byte = to_load[37];
 13306  004CF0  C1BC  F29C         	movff	loadFromEEPROM@to_load+37,_inputPotsArray+20
 13307                           
 13308                           ;eeprom.c: 134: inputPotsArray[7].controller_number = to_load[38];
 13309  004CF4  C1BD  F29E         	movff	loadFromEEPROM@to_load+38,_inputPotsArray+22
 13310                           
 13311                           ;eeprom.c: 135: inputPotsArray[7].controller_number_two_byte = to_load[39];
 13312  004CF8  C1BE  F29F         	movff	loadFromEEPROM@to_load+39,_inputPotsArray+23
 13313                           
 13314                           ;eeprom.c: 137: inputPotsArray[8].controller_number = to_load[40];
 13315  004CFC  C1BF  F2A1         	movff	loadFromEEPROM@to_load+40,_inputPotsArray+25
 13316                           
 13317                           ;eeprom.c: 138: inputPotsArray[8].controller_number_two_byte = to_load[41];
 13318  004D00  C1C0  F2A2         	movff	loadFromEEPROM@to_load+41,_inputPotsArray+26
 13319                           
 13320                           ;eeprom.c: 140: inputPotsArray[9].controller_number = to_load[42];
 13321  004D04  C1C1  F2A4         	movff	loadFromEEPROM@to_load+42,_inputPotsArray+28
 13322                           
 13323                           ;eeprom.c: 141: inputPotsArray[9].controller_number_two_byte = to_load[43];
 13324  004D08  C1C2  F2A5         	movff	loadFromEEPROM@to_load+43,_inputPotsArray+29
 13325                           
 13326                           ;eeprom.c: 143: inputPotsArray[10].controller_number = to_load[44];
 13327  004D0C  C1C3  F2A7         	movff	loadFromEEPROM@to_load+44,_inputPotsArray+31
 13328                           
 13329                           ;eeprom.c: 144: inputPotsArray[10].controller_number_two_byte = to_load[45];
 13330  004D10  C1C4  F2A8         	movff	loadFromEEPROM@to_load+45,_inputPotsArray+32
 13331                           
 13332                           ;eeprom.c: 146: inputPotsArray[11].controller_number = to_load[46];
 13333  004D14  C1C5  F2AA         	movff	loadFromEEPROM@to_load+46,_inputPotsArray+34
 13334                           
 13335                           ;eeprom.c: 147: inputPotsArray[11].controller_number_two_byte = to_load[47];
 13336  004D18  C1C6  F2AB         	movff	loadFromEEPROM@to_load+47,_inputPotsArray+35
 13337                           
 13338                           ;eeprom.c: 149: inputPotsArray[12].controller_number = to_load[48];
 13339  004D1C  C1C7  F2AD         	movff	loadFromEEPROM@to_load+48,_inputPotsArray+37
 13340                           
 13341                           ;eeprom.c: 150: inputPotsArray[12].controller_number_two_byte = to_load[49];
 13342  004D20  C1C8  F2AE         	movff	loadFromEEPROM@to_load+49,_inputPotsArray+38
 13343                           
 13344                           ;eeprom.c: 152: inputPotsArray[13].controller_number = to_load[50];
 13345  004D24  C1C9  F2B0         	movff	loadFromEEPROM@to_load+50,_inputPotsArray+40
 13346                           
 13347                           ;eeprom.c: 153: inputPotsArray[13].controller_number_two_byte = to_load[51];
 13348  004D28  C1CA  F2B1         	movff	loadFromEEPROM@to_load+51,_inputPotsArray+41
 13349                           
 13350                           ;eeprom.c: 155: inputPotsArray[14].controller_number = to_load[52];
 13351  004D2C  C1CB  F2B3         	movff	loadFromEEPROM@to_load+52,_inputPotsArray+43
 13352                           
 13353                           ;eeprom.c: 156: inputPotsArray[14].controller_number_two_byte = to_load[53];
 13354  004D30  C1CC  F2B4         	movff	loadFromEEPROM@to_load+53,_inputPotsArray+44
 13355                           
 13356                           ;eeprom.c: 158: inputPotsArray[15].controller_number = to_load[54];
 13357  004D34  C1CD  F2B6         	movff	loadFromEEPROM@to_load+54,_inputPotsArray+46
 13358                           
 13359                           ;eeprom.c: 159: inputPotsArray[15].controller_number_two_byte = to_load[55];
 13360  004D38  C1CE  F2B7         	movff	loadFromEEPROM@to_load+55,_inputPotsArray+47
 13361                           
 13362                           ;eeprom.c: 163: channel = to_load[56];
 13363  004D3C  C1CF  F03E         	movff	loadFromEEPROM@to_load+56,_channel
 13364                           
 13365                           ;eeprom.c: 164: drumchannel = to_load[57];
 13366  004D40  C1D0  F052         	movff	loadFromEEPROM@to_load+57,_drumchannel
 13367                           
 13368                           ;eeprom.c: 167: octave = to_load[58];
 13369  004D44  C1D1  F050         	movff	loadFromEEPROM@to_load+58,_octave
 13370                           
 13371                           ;eeprom.c: 168: semitone = to_load[59];
 13372  004D48  C1D2  F03B         	movff	loadFromEEPROM@to_load+59,_semitone
 13373                           
 13374                           ;eeprom.c: 171: patch_number = to_load[60];
 13375  004D4C  C1D3  F0F3         	movff	loadFromEEPROM@to_load+60,_patch_number
 13376                           
 13377                           ;eeprom.c: 174: ARPEGGIO_ON = to_load[61];
 13378  004D50  0101               	movlb	1	; () banked
 13379  004D52  A1D4               	btfss	(loadFromEEPROM@to_load+61)& (0+255),0,b
 13380  004D54  D002               	goto	u57340
 13381  004D56  8604               	bsf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 13382  004D58  D001               	goto	u57355
 13383  004D5A                     u57340:
 13384  004D5A  9604               	bcf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 13385  004D5C                     u57355:
 13386                           
 13387                           ;eeprom.c: 175: BPM = to_load[62];
 13388  004D5C  C1D5  F0FF         	movff	loadFromEEPROM@to_load+62,_BPM
 13389                           
 13390                           ;eeprom.c: 177: TIMER_PRELOAD = calculate_pulse_length();
 13391  004D60  EC3F  F02F         	call	_calculate_pulse_length	;wreg free
 13392  004D64  C0C2  F17B         	movff	?_calculate_pulse_length,_TIMER_PRELOAD
 13393  004D68  C0C3  F17C         	movff	?_calculate_pulse_length+1,_TIMER_PRELOAD+1
 13394                           
 13395                           ;eeprom.c: 179: OCTAVES = to_load[63];
 13396  004D6C  C1D6  F04E         	movff	loadFromEEPROM@to_load+63,_OCTAVES
 13397                           
 13398                           ;eeprom.c: 180: ARPEGGIO_TYPE = to_load[64];
 13399  004D70  C1D7  F035         	movff	loadFromEEPROM@to_load+64,_ARPEGGIO_TYPE
 13400                           
 13401                           ;eeprom.c: 181: NOTE_LENGTH_PULSES = to_load[65];
 13402  004D74  C1D8  F04D         	movff	loadFromEEPROM@to_load+65,_NOTE_LENGTH_PULSES
 13403                           
 13404                           ;eeprom.c: 182: LATCH = to_load[66];
 13405  004D78  0101               	movlb	1	; () banked
 13406  004D7A  A1D9               	btfss	(loadFromEEPROM@to_load+66)& (0+255),0,b
 13407  004D7C  D002               	goto	u57360
 13408  004D7E  8004               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 13409  004D80  D001               	goto	u57375
 13410  004D82                     u57360:
 13411  004D82  9004               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
 13412  004D84                     u57375:
 13413                           
 13414                           ;eeprom.c: 183: AUTO_LATCH = to_load[67];
 13415  004D84  0101               	movlb	1	; () banked
 13416  004D86  A1DA               	btfss	(loadFromEEPROM@to_load+67)& (0+255),0,b
 13417  004D88  D002               	goto	u57380
 13418  004D8A  8C03               	bsf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 13419  004D8C  D001               	goto	u57395
 13420  004D8E                     u57380:
 13421  004D8E  9C03               	bcf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 13422  004D90                     u57395:
 13423                           
 13424                           ;eeprom.c: 184: UN_LATCH_MODE = to_load[68];
 13425  004D90  0101               	movlb	1	; () banked
 13426  004D92  A1DB               	btfss	(loadFromEEPROM@to_load+68)& (0+255),0,b
 13427  004D94  D002               	goto	u57400
 13428  004D96  8E03               	bsf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 13429  004D98  D001               	goto	u57415
 13430  004D9A                     u57400:
 13431  004D9A  9E03               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 13432  004D9C                     u57415:
 13433                           
 13434                           ;eeprom.c: 185: AUTO_RANDOMIZE = to_load[69];
 13435  004D9C  0101               	movlb	1	; () banked
 13436  004D9E  A1DC               	btfss	(loadFromEEPROM@to_load+69)& (0+255),0,b
 13437  004DA0  D002               	goto	u57420
 13438  004DA2  8803               	bsf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 13439  004DA4  D001               	goto	u57435
 13440  004DA6                     u57420:
 13441  004DA6  9803               	bcf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 13442  004DA8                     u57435:
 13443                           
 13444                           ;eeprom.c: 186: skipFirstLast = to_load[70];
 13445  004DA8  0101               	movlb	1	; () banked
 13446  004DAA  A1DD               	btfss	(loadFromEEPROM@to_load+70)& (0+255),0,b
 13447  004DAC  D002               	goto	u57440
 13448  004DAE  8603               	bsf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 13449  004DB0  D001               	goto	u57455
 13450  004DB2                     u57440:
 13451  004DB2  9603               	bcf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 13452  004DB4                     u57455:
 13453                           
 13454                           ;eeprom.c: 187: LAST_NOTE_MODE_KEY_PRESS = to_load[71];
 13455  004DB4  0101               	movlb	1	; () banked
 13456  004DB6  A1DE               	btfss	(loadFromEEPROM@to_load+71)& (0+255),0,b
 13457  004DB8  D002               	goto	u57460
 13458  004DBA  8203               	bsf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 13459  004DBC  D001               	goto	u57475
 13460  004DBE                     u57460:
 13461  004DBE  9203               	bcf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 13462  004DC0                     u57475:
 13463                           
 13464                           ;eeprom.c: 188: LAST_NOTE_MODE_KEY_RELEASE = to_load[72];
 13465  004DC0  0101               	movlb	1	; () banked
 13466  004DC2  A1DF               	btfss	(loadFromEEPROM@to_load+72)& (0+255),0,b
 13467  004DC4  D002               	goto	u57480
 13468  004DC6  8003               	bsf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 13469  004DC8  D001               	goto	u57495
 13470  004DCA                     u57480:
 13471  004DCA  9003               	bcf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 13472  004DCC                     u57495:
 13473                           
 13474                           ;eeprom.c: 189: LAST_NOTE_MODE_TRANSPOSE = to_load[73];
 13475  004DCC  0101               	movlb	1	; () banked
 13476  004DCE  A1E0               	btfss	(loadFromEEPROM@to_load+73)& (0+255),0,b
 13477  004DD0  D002               	goto	u57500
 13478  004DD2  8E02               	bsf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 13479  004DD4  D001               	goto	u57515
 13480  004DD6                     u57500:
 13481  004DD6  9E02               	bcf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 13482  004DD8                     u57515:
 13483                           
 13484                           ;eeprom.c: 190: LAST_NOTE_MODE_RESET = to_load[74];
 13485  004DD8  0101               	movlb	1	; () banked
 13486  004DDA  A1E1               	btfss	(loadFromEEPROM@to_load+74)& (0+255),0,b
 13487  004DDC  D002               	goto	u57520
 13488  004DDE  8C02               	bsf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 13489  004DE0  0012               	return	
 13490  004DE2                     u57520:
 13491  004DE2  9C02               	bcf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 13492  004DE4  0012               	return		;funcret
 13493  004DE6                     __end_of_loadFromEEPROM:
 13494                           	opt stack 0
 13495                           tblptru	equ	0xFF8
 13496                           tblptrh	equ	0xFF7
 13497                           tblptrl	equ	0xFF6
 13498                           tablat	equ	0xFF5
 13499                           prodh	equ	0xFF4
 13500                           prodl	equ	0xFF3
 13501                           intcon	equ	0xFF2
 13502                           intcon2	equ	0xFF1
 13503                           postinc0	equ	0xFEE
 13504                           wreg	equ	0xFE8
 13505                           postinc1	equ	0xFE6
 13506                           indf2	equ	0xFDF
 13507                           postinc2	equ	0xFDE
 13508                           postdec2	equ	0xFDD
 13509                           fsr2h	equ	0xFDA
 13510                           fsr2l	equ	0xFD9
 13511                           status	equ	0xFD8
 13512                           
 13513 ;; *************** function _calculate_pulse_length *****************
 13514 ;; Defined at:
 13515 ;;		line 150 in file "arpeggio.c"
 13516 ;; Parameters:    Size  Location     Type
 13517 ;;		None
 13518 ;; Auto vars:     Size  Location     Type
 13519 ;;  s_tick          4  100[BANK0 ] void 
 13520 ;; Return value:  Size  Location     Type
 13521 ;;                  2   98[BANK0 ] unsigned short 
 13522 ;; Registers used:
 13523 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13524 ;; Tracked objects:
 13525 ;;		On entry : 0/0
 13526 ;;		On exit  : 0/0
 13527 ;;		Unchanged: 0/0
 13528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13529 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13530 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13532 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13533 ;;Total ram usage:       10 bytes
 13534 ;; Hardware stack levels used:    1
 13535 ;; Hardware stack levels required when called:    6
 13536 ;; This function calls:
 13537 ;;		___fladd
 13538 ;;		___fldiv
 13539 ;;		___flmul
 13540 ;;		___flneg
 13541 ;;		___fltol
 13542 ;;		___xxtofl
 13543 ;; This function is called by:
 13544 ;;		_Function_H_2
 13545 ;;		_loadFromEEPROM
 13546 ;;		_main
 13547 ;; This function uses a non-reentrant model
 13548 ;;
 13549                           
 13550                           	psect	text31
 13551  005E7E                     __ptext31:
 13552                           	opt stack 0
 13553  005E7E                     _calculate_pulse_length:
 13554                           	opt stack 22
 13555                           
 13556                           ;arpeggio.c: 157: double s_tick = 1.0 / ((BPM * PPQN) / 60.0);
 13557                           
 13558                           ;incstack = 0
 13559  005E7E  0E00               	movlw	0
 13560  005E80  0100               	movlb	0	; () banked
 13561  005E82  6F8B               	movwf	___fldiv@a& (0+255),b
 13562  005E84  0E00               	movlw	0
 13563  005E86  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 13564  005E88  0E70               	movlw	112
 13565  005E8A  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 13566  005E8C  0E42               	movlw	66
 13567  005E8E  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 13568  005E90  51FF               	movf	_BPM& (0+255),w,b
 13569  005E92  0101               	movlb	1	; () banked
 13570  005E94  03F6               	mulwf	_PPQN& (0+255),b
 13571  005E96  CFF3 F060          	movff	prodl,___xxtofl@val
 13572  005E9A  CFF4 F061          	movff	prodh,___xxtofl@val+1
 13573  005E9E  0100               	movlb	0	; () banked
 13574  005EA0  0E00               	movlw	0
 13575  005EA2  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 13576  005EA4  0EFF               	movlw	-1
 13577  005EA6  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 13578  005EA8  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 13579  005EAA  0E01               	movlw	1
 13580  005EAC  ECF2  F02F         	call	___xxtofl
 13581  005EB0  C060  F087         	movff	?___xxtofl,___fldiv@b
 13582  005EB4  C061  F088         	movff	?___xxtofl+1,___fldiv@b+1
 13583  005EB8  C062  F089         	movff	?___xxtofl+2,___fldiv@b+2
 13584  005EBC  C063  F08A         	movff	?___xxtofl+3,___fldiv@b+3
 13585  005EC0  EC1D  F01E         	call	___fldiv	;wreg free
 13586  005EC4  C087  F0C8         	movff	?___fldiv,_calculate_pulse_length$5908
 13587  005EC8  C088  F0C9         	movff	?___fldiv+1,_calculate_pulse_length$5908+1
 13588  005ECC  C089  F0CA         	movff	?___fldiv+2,_calculate_pulse_length$5908+2
 13589  005ED0  C08A  F0CB         	movff	?___fldiv+3,_calculate_pulse_length$5908+3
 13590                           
 13591                           ;arpeggio.c: 157: double s_tick = 1.0 / ((BPM * PPQN) / 60.0);
 13592  005ED4  0E00               	movlw	0
 13593  005ED6  0100               	movlb	0	; () banked
 13594  005ED8  6F87               	movwf	___fldiv@b& (0+255),b
 13595  005EDA  0E00               	movlw	0
 13596  005EDC  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 13597  005EDE  0E80               	movlw	128
 13598  005EE0  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 13599  005EE2  0E3F               	movlw	63
 13600  005EE4  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 13601  005EE6  C0C8  F08B         	movff	_calculate_pulse_length$5908,___fldiv@a
 13602  005EEA  C0C9  F08C         	movff	_calculate_pulse_length$5908+1,___fldiv@a+1
 13603  005EEE  C0CA  F08D         	movff	_calculate_pulse_length$5908+2,___fldiv@a+2
 13604  005EF2  C0CB  F08E         	movff	_calculate_pulse_length$5908+3,___fldiv@a+3
 13605  005EF6  EC1D  F01E         	call	___fldiv	;wreg free
 13606  005EFA  C087  F0C4         	movff	?___fldiv,calculate_pulse_length@s_tick
 13607  005EFE  C088  F0C5         	movff	?___fldiv+1,calculate_pulse_length@s_tick+1
 13608  005F02  C089  F0C6         	movff	?___fldiv+2,calculate_pulse_length@s_tick+2
 13609  005F06  C08A  F0C7         	movff	?___fldiv+3,calculate_pulse_length@s_tick+3
 13610                           
 13611                           ;arpeggio.c: 158: return (unsigned short) ((65535.0 - (s_tick * 20000000.0) / ( 4.0 * PR
      +                          ESCALER)) + 0.5);
 13612  005F0A  0E80               	movlw	128
 13613  005F0C  0100               	movlb	0	; () banked
 13614  005F0E  6FA8               	movwf	___fladd@a& (0+255),b
 13615  005F10  0EFF               	movlw	255
 13616  005F12  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 13617  005F14  0E7F               	movlw	127
 13618  005F16  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 13619  005F18  0E47               	movlw	71
 13620  005F1A  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 13621  005F1C  0E00               	movlw	0
 13622  005F1E  6F72               	movwf	___flmul@a& (0+255),b
 13623  005F20  0E00               	movlw	0
 13624  005F22  6F73               	movwf	(___flmul@a+1)& (0+255),b
 13625  005F24  0E80               	movlw	128
 13626  005F26  6F74               	movwf	(___flmul@a+2)& (0+255),b
 13627  005F28  0E40               	movlw	64
 13628  005F2A  6F75               	movwf	(___flmul@a+3)& (0+255),b
 13629  005F2C  0101               	movlb	1	; () banked
 13630  005F2E  51F5               	movf	_PRESCALER& (0+255),w,b
 13631  005F30  0100               	movlb	0	; () banked
 13632  005F32  6F60               	movwf	___xxtofl@val& (0+255),b
 13633  005F34  6B61               	clrf	(___xxtofl@val+1)& (0+255),b
 13634  005F36  6B62               	clrf	(___xxtofl@val+2)& (0+255),b
 13635  005F38  6B63               	clrf	(___xxtofl@val+3)& (0+255),b
 13636  005F3A  0E00               	movlw	0
 13637  005F3C  ECF2  F02F         	call	___xxtofl
 13638  005F40  C060  F06E         	movff	?___xxtofl,___flmul@b
 13639  005F44  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 13640  005F48  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 13641  005F4C  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 13642  005F50  ECF2  F017         	call	___flmul	;wreg free
 13643  005F54  C06E  F08B         	movff	?___flmul,___fldiv@a
 13644  005F58  C06F  F08C         	movff	?___flmul+1,___fldiv@a+1
 13645  005F5C  C070  F08D         	movff	?___flmul+2,___fldiv@a+2
 13646  005F60  C071  F08E         	movff	?___flmul+3,___fldiv@a+3
 13647  005F64  0E80               	movlw	128
 13648  005F66  0100               	movlb	0	; () banked
 13649  005F68  6F72               	movwf	___flmul@a& (0+255),b
 13650  005F6A  0E96               	movlw	150
 13651  005F6C  6F73               	movwf	(___flmul@a+1)& (0+255),b
 13652  005F6E  0E98               	movlw	152
 13653  005F70  6F74               	movwf	(___flmul@a+2)& (0+255),b
 13654  005F72  0E4B               	movlw	75
 13655  005F74  6F75               	movwf	(___flmul@a+3)& (0+255),b
 13656  005F76  C0C4  F06E         	movff	calculate_pulse_length@s_tick,___flmul@b
 13657  005F7A  C0C5  F06F         	movff	calculate_pulse_length@s_tick+1,___flmul@b+1
 13658  005F7E  C0C6  F070         	movff	calculate_pulse_length@s_tick+2,___flmul@b+2
 13659  005F82  C0C7  F071         	movff	calculate_pulse_length@s_tick+3,___flmul@b+3
 13660  005F86  ECF2  F017         	call	___flmul	;wreg free
 13661  005F8A  C06E  F087         	movff	?___flmul,___fldiv@b
 13662  005F8E  C06F  F088         	movff	?___flmul+1,___fldiv@b+1
 13663  005F92  C070  F089         	movff	?___flmul+2,___fldiv@b+2
 13664  005F96  C071  F08A         	movff	?___flmul+3,___fldiv@b+3
 13665  005F9A  EC1D  F01E         	call	___fldiv	;wreg free
 13666  005F9E  C087  F0A0         	movff	?___fldiv,___flneg@f1
 13667  005FA2  C088  F0A1         	movff	?___fldiv+1,___flneg@f1+1
 13668  005FA6  C089  F0A2         	movff	?___fldiv+2,___flneg@f1+2
 13669  005FAA  C08A  F0A3         	movff	?___fldiv+3,___flneg@f1+3
 13670  005FAE  ECA7  F04B         	call	___flneg	;wreg free
 13671  005FB2  C0A0  F0A4         	movff	?___flneg,___fladd@b
 13672  005FB6  C0A1  F0A5         	movff	?___flneg+1,___fladd@b+1
 13673  005FBA  C0A2  F0A6         	movff	?___flneg+2,___fladd@b+2
 13674  005FBE  C0A3  F0A7         	movff	?___flneg+3,___fladd@b+3
 13675  005FC2  EC9B  F019         	call	___fladd	;wreg free
 13676  005FC6  C0A4  F0B8         	movff	?___fladd,___fltol@f1
 13677  005FCA  C0A5  F0B9         	movff	?___fladd+1,___fltol@f1+1
 13678  005FCE  C0A6  F0BA         	movff	?___fladd+2,___fltol@f1+2
 13679  005FD2  C0A7  F0BB         	movff	?___fladd+3,___fltol@f1+3
 13680  005FD6  ECBC  F037         	call	___fltol	;wreg free
 13681  005FDA  C0B8  F0C2         	movff	?___fltol,?_calculate_pulse_length
 13682  005FDE  C0B9  F0C3         	movff	?___fltol+1,?_calculate_pulse_length+1
 13683  005FE2  0012               	return	
 13684  005FE4                     __end_of_calculate_pulse_length:
 13685                           	opt stack 0
 13686                           tblptru	equ	0xFF8
 13687                           tblptrh	equ	0xFF7
 13688                           tblptrl	equ	0xFF6
 13689                           tablat	equ	0xFF5
 13690                           prodh	equ	0xFF4
 13691                           prodl	equ	0xFF3
 13692                           intcon	equ	0xFF2
 13693                           intcon2	equ	0xFF1
 13694                           postinc0	equ	0xFEE
 13695                           wreg	equ	0xFE8
 13696                           postinc1	equ	0xFE6
 13697                           indf2	equ	0xFDF
 13698                           postinc2	equ	0xFDE
 13699                           postdec2	equ	0xFDD
 13700                           fsr2h	equ	0xFDA
 13701                           fsr2l	equ	0xFD9
 13702                           status	equ	0xFD8
 13703                           
 13704 ;; *************** function _exitLoad *****************
 13705 ;; Defined at:
 13706 ;;		line 285 in file "menu.c"
 13707 ;; Parameters:    Size  Location     Type
 13708 ;;		None
 13709 ;; Auto vars:     Size  Location     Type
 13710 ;;		None
 13711 ;; Return value:  Size  Location     Type
 13712 ;;                  1    wreg      void 
 13713 ;; Registers used:
 13714 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13715 ;; Tracked objects:
 13716 ;;		On entry : 0/0
 13717 ;;		On exit  : 0/0
 13718 ;;		Unchanged: 0/0
 13719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13722 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13723 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13724 ;;Total ram usage:        2 bytes
 13725 ;; Hardware stack levels used:    1
 13726 ;; Hardware stack levels required when called:    9
 13727 ;; This function calls:
 13728 ;;		_Lcd_Print_String
 13729 ;;		_clear_row1
 13730 ;; This function is called by:
 13731 ;;		_Function_G_2
 13732 ;; This function uses a non-reentrant model
 13733 ;;
 13734                           
 13735                           	psect	text32
 13736  0095CE                     __ptext32:
 13737                           	opt stack 0
 13738  0095CE                     _exitLoad:
 13739                           	opt stack 18
 13740                           
 13741                           ;menu.c: 287: while(encoder_click == 0);
 13742                           
 13743                           ;incstack = 0
 13744  0095CE  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 13745  0095D0  D7FE               	goto	_exitLoad
 13746                           
 13747                           ;menu.c: 293: clear_row1();
 13748  0095D2  EC16  F04C         	call	_clear_row1	;wreg free
 13749                           
 13750                           ;menu.c: 294: Lcd_Print_String("Settings Loaded!");
 13751  0095D6  0E75               	movlw	low STR_22
 13752  0095D8  0100               	movlb	0	; () banked
 13753  0095DA  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 13754  0095DC  0EFD               	movlw	high STR_22
 13755  0095DE  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 13756  0095E0  EC74  F042         	call	_Lcd_Print_String	;wreg free
 13757                           
 13758                           ;menu.c: 295: _delay((unsigned long)((500)*(20000000/4000.0)));
 13759  0095E4  0E0D               	movlw	13
 13760  0095E6  0100               	movlb	0	; () banked
 13761  0095E8  6F6F               	movwf	(??_exitLoad+1)& (0+255),b
 13762  0095EA  0EAF               	movlw	175
 13763  0095EC  6F6E               	movwf	??_exitLoad& (0+255),b
 13764  0095EE  0EB6               	movlw	182
 13765  0095F0                     u67097:
 13766  0095F0  2EE8               	decfsz	wreg,f,c
 13767  0095F2  D7FE               	bra	u67097
 13768  0095F4  2F6E               	decfsz	??_exitLoad& (0+255),f,b
 13769  0095F6  D7FC               	bra	u67097
 13770  0095F8  2F6F               	decfsz	(??_exitLoad+1)& (0+255),f,b
 13771  0095FA  D7FA               	bra	u67097
 13772  0095FC  F000               	nop	
 13773                           
 13774                           ;menu.c: 296: which_screen = MAIN_MENU;
 13775  0095FE  0E02               	movlw	2
 13776  009600  6E4F               	movwf	_which_screen,c
 13777                           
 13778                           ;menu.c: 297: lcd_print_once = 0;
 13779  009602  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13780                           
 13781                           ;menu.c: 298: encoder_click = 0;
 13782  009604  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 13783  009606  0012               	return		;funcret
 13784  009608                     __end_of_exitLoad:
 13785                           	opt stack 0
 13786                           tblptru	equ	0xFF8
 13787                           tblptrh	equ	0xFF7
 13788                           tblptrl	equ	0xFF6
 13789                           tablat	equ	0xFF5
 13790                           prodh	equ	0xFF4
 13791                           prodl	equ	0xFF3
 13792                           intcon	equ	0xFF2
 13793                           intcon2	equ	0xFF1
 13794                           postinc0	equ	0xFEE
 13795                           wreg	equ	0xFE8
 13796                           postinc1	equ	0xFE6
 13797                           indf2	equ	0xFDF
 13798                           postinc2	equ	0xFDE
 13799                           postdec2	equ	0xFDD
 13800                           fsr2h	equ	0xFDA
 13801                           fsr2l	equ	0xFD9
 13802                           status	equ	0xFD8
 13803                           
 13804 ;; *************** function _Function_G_1 *****************
 13805 ;; Defined at:
 13806 ;;		line 1057 in file "menu.c"
 13807 ;; Parameters:    Size  Location     Type
 13808 ;;		None
 13809 ;; Auto vars:     Size  Location     Type
 13810 ;;		None
 13811 ;; Return value:  Size  Location     Type
 13812 ;;                  1    wreg      void 
 13813 ;; Registers used:
 13814 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13815 ;; Tracked objects:
 13816 ;;		On entry : 0/0
 13817 ;;		On exit  : 0/0
 13818 ;;		Unchanged: 0/0
 13819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13824 ;;Total ram usage:        0 bytes
 13825 ;; Hardware stack levels used:    1
 13826 ;; Hardware stack levels required when called:   16
 13827 ;; This function calls:
 13828 ;;		_Busy_eep
 13829 ;;		_Lcd_Print_String
 13830 ;;		_Write_b_eep
 13831 ;;		___lbmod
 13832 ;;		___wmul
 13833 ;;		_clear_row1
 13834 ;;		_clear_row2
 13835 ;;		_eepromExit
 13836 ;;		_exitSave
 13837 ;;		_saveToEEPROM
 13838 ;;		_un_block_code
 13839 ;; This function is called by:
 13840 ;;		_Function_G
 13841 ;; This function uses a non-reentrant model
 13842 ;;
 13843                           
 13844                           	psect	text33
 13845  007E16                     __ptext33:
 13846                           	opt stack 0
 13847  007E16                     _Function_G_1:
 13848                           	opt stack 12
 13849                           
 13850                           ;menu.c: 1059: which_screen = SAVES_MENU;
 13851                           
 13852                           ;incstack = 0
 13853  007E16  0E17               	movlw	23
 13854  007E18  6E4F               	movwf	_which_screen,c
 13855                           
 13856                           ;menu.c: 1060: encoder_click = 0;
 13857  007E1A  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 13858                           
 13859                           ;menu.c: 1061: lcd_print_once = 0;
 13860  007E1C  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13861                           
 13862                           ;menu.c: 1063: while(encoder_click == 0) {
 13863  007E1E  D02C               	goto	l3730
 13864  007E20                     
 13865                           ;menu.c: 1067: un_block_code();
 13866  007E20  ECAB  F04C         	call	_un_block_code	;wreg free
 13867                           
 13868                           ;menu.c: 1069: if (lcd_print_once == 0) {
 13869  007E24  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13870  007E26  D027               	goto	l3732
 13871                           
 13872                           ;menu.c: 1070: clear_row1();
 13873  007E28  EC16  F04C         	call	_clear_row1	;wreg free
 13874                           
 13875                           ;menu.c: 1071: Lcd_Print_String("Save #:");
 13876  007E2C  0EBB               	movlw	low STR_35
 13877  007E2E  0100               	movlb	0	; () banked
 13878  007E30  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 13879  007E32  0EFF               	movlw	high STR_35
 13880  007E34  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 13881  007E36  EC74  F042         	call	_Lcd_Print_String	;wreg free
 13882                           
 13883                           ;menu.c: 1072: clear_row2();
 13884  007E3A  EC02  F04C         	call	_clear_row2	;wreg free
 13885                           
 13886                           ;menu.c: 1073: Lcd_Print_String(LCD_STRINGS[(savesMenu.selector % savesMenu.number) + sa
      +                          vesMenu.address]);
 13887  007E3E  0100               	movlb	0	; () banked
 13888  007E40  51E2               	movf	_savesMenu& (0+255),w,b
 13889  007E42  6EE6               	movwf	postinc1,c
 13890  007E44  51E4               	movf	(_savesMenu+2)& (0+255),w,b
 13891  007E46  6EE6               	movwf	postinc1,c
 13892  007E48  EC61  F041         	call	___lbmod	;wreg free
 13893  007E4C  503F               	movf	btemp,w,c
 13894  007E4E  0100               	movlb	0	; () banked
 13895  007E50  25E3               	addwf	(_savesMenu+1)& (0+255),w,b
 13896  007E52  6F60               	movwf	___wmul@multiplier& (0+255),b
 13897  007E54  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 13898  007E56  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 13899  007E58  0E00               	movlw	0
 13900  007E5A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13901  007E5C  0E11               	movlw	17
 13902  007E5E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 13903  007E60  EC2A  F04C         	call	___wmul	;wreg free
 13904  007E64  0E9E               	movlw	low _LCD_STRINGS
 13905  007E66  0100               	movlb	0	; () banked
 13906  007E68  2560               	addwf	?___wmul& (0+255),w,b
 13907  007E6A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 13908  007E6C  0EF3               	movlw	high _LCD_STRINGS
 13909  007E6E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 13910  007E70  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 13911  007E72  EC74  F042         	call	_Lcd_Print_String	;wreg free
 13912  007E76                     l3732:
 13913                           
 13914                           ;menu.c: 1074: }
 13915                           ;menu.c: 1075: lcd_print_once = 1;
 13916  007E76  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13917  007E78                     l3730:
 13918  007E78  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 13919  007E7A  D7D2               	goto	l3731
 13920                           
 13921                           ;menu.c: 1076: }
 13922                           ;menu.c: 1078: if(savesMenu.selector == 4){eepromExit();}
 13923  007E7C  0E04               	movlw	4
 13924  007E7E  0100               	movlb	0	; () banked
 13925  007E80  19E4               	xorwf	(_savesMenu+2)& (0+255),w,b
 13926  007E82  A4D8               	btfss	status,2,c
 13927  007E84  D003               	goto	l3734
 13928                           
 13929                           ; BSR set to: 0
 13930  007E86  EC21  F04B         	call	_eepromExit	;wreg free
 13931  007E8A  D011               	goto	l3735
 13932  007E8C                     l3734:
 13933                           
 13934                           ;menu.c: 1079: else {
 13935                           ;menu.c: 1081: (Busy_eep(), Write_b_eep(0,(savesMenu.selector + 1)));
 13936  007E8C  ECFA  F04C         	call	_Busy_eep	;wreg free
 13937  007E90  0E00               	movlw	0
 13938  007E92  0100               	movlb	0	; () banked
 13939  007E94  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 13940  007E96  0E00               	movlw	0
 13941  007E98  6F60               	movwf	Write_b_eep@badd& (0+255),b
 13942  007E9A  29E4               	incf	(_savesMenu+2)& (0+255),w,b
 13943  007E9C  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 13944  007E9E  EC6C  F04A         	call	_Write_b_eep	;wreg free
 13945                           
 13946                           ;menu.c: 1082: saveToEEPROM(savesMenu.selector + 1);
 13947  007EA2  0100               	movlb	0	; () banked
 13948  007EA4  29E4               	incf	(_savesMenu+2)& (0+255),w,b
 13949  007EA6  ECF4  F027         	call	_saveToEEPROM
 13950                           
 13951                           ;menu.c: 1083: exitSave();
 13952  007EAA  EC04  F04B         	call	_exitSave	;wreg free
 13953  007EAE                     l3735:
 13954                           
 13955                           ;menu.c: 1084: }
 13956                           ;menu.c: 1086: savesMenu.selector = 0;
 13957  007EAE  0E00               	movlw	0
 13958  007EB0  0100               	movlb	0	; () banked
 13959  007EB2  6FE4               	movwf	(_savesMenu+2)& (0+255),b
 13960                           
 13961                           ; BSR set to: 0
 13962  007EB4  0012               	return		;funcret
 13963  007EB6                     __end_of_Function_G_1:
 13964                           	opt stack 0
 13965                           tblptru	equ	0xFF8
 13966                           tblptrh	equ	0xFF7
 13967                           tblptrl	equ	0xFF6
 13968                           tablat	equ	0xFF5
 13969                           prodh	equ	0xFF4
 13970                           prodl	equ	0xFF3
 13971                           intcon	equ	0xFF2
 13972                           intcon2	equ	0xFF1
 13973                           postinc0	equ	0xFEE
 13974                           wreg	equ	0xFE8
 13975                           postinc1	equ	0xFE6
 13976                           indf2	equ	0xFDF
 13977                           postinc2	equ	0xFDE
 13978                           postdec2	equ	0xFDD
 13979                           fsr2h	equ	0xFDA
 13980                           fsr2l	equ	0xFD9
 13981                           status	equ	0xFD8
 13982                           
 13983 ;; *************** function _exitSave *****************
 13984 ;; Defined at:
 13985 ;;		line 265 in file "menu.c"
 13986 ;; Parameters:    Size  Location     Type
 13987 ;;		None
 13988 ;; Auto vars:     Size  Location     Type
 13989 ;;		None
 13990 ;; Return value:  Size  Location     Type
 13991 ;;                  1    wreg      void 
 13992 ;; Registers used:
 13993 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13994 ;; Tracked objects:
 13995 ;;		On entry : 0/0
 13996 ;;		On exit  : 0/0
 13997 ;;		Unchanged: 0/0
 13998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14001 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14002 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14003 ;;Total ram usage:        2 bytes
 14004 ;; Hardware stack levels used:    1
 14005 ;; Hardware stack levels required when called:    9
 14006 ;; This function calls:
 14007 ;;		_Lcd_Print_String
 14008 ;;		_clear_row1
 14009 ;; This function is called by:
 14010 ;;		_Function_G_1
 14011 ;; This function uses a non-reentrant model
 14012 ;;
 14013                           
 14014                           	psect	text34
 14015  009608                     __ptext34:
 14016                           	opt stack 0
 14017  009608                     _exitSave:
 14018                           	opt stack 18
 14019                           
 14020                           ;menu.c: 267: while(encoder_click == 0);
 14021                           
 14022                           ; BSR set to: 0
 14023                           ;incstack = 0
 14024  009608  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14025  00960A  D7FE               	goto	_exitSave
 14026                           
 14027                           ;menu.c: 273: clear_row1();
 14028  00960C  EC16  F04C         	call	_clear_row1	;wreg free
 14029                           
 14030                           ;menu.c: 274: Lcd_Print_String("Settings Saved!");
 14031  009610  0EFD               	movlw	low STR_21
 14032  009612  0100               	movlb	0	; () banked
 14033  009614  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14034  009616  0EFD               	movlw	high STR_21
 14035  009618  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14036  00961A  EC74  F042         	call	_Lcd_Print_String	;wreg free
 14037                           
 14038                           ;menu.c: 275: _delay((unsigned long)((500)*(20000000/4000.0)));
 14039  00961E  0E0D               	movlw	13
 14040  009620  0100               	movlb	0	; () banked
 14041  009622  6F6F               	movwf	(??_exitSave+1)& (0+255),b
 14042  009624  0EAF               	movlw	175
 14043  009626  6F6E               	movwf	??_exitSave& (0+255),b
 14044  009628  0EB6               	movlw	182
 14045  00962A                     u67107:
 14046  00962A  2EE8               	decfsz	wreg,f,c
 14047  00962C  D7FE               	bra	u67107
 14048  00962E  2F6E               	decfsz	??_exitSave& (0+255),f,b
 14049  009630  D7FC               	bra	u67107
 14050  009632  2F6F               	decfsz	(??_exitSave+1)& (0+255),f,b
 14051  009634  D7FA               	bra	u67107
 14052  009636  F000               	nop	
 14053                           
 14054                           ;menu.c: 276: which_screen = MAIN_MENU;
 14055  009638  0E02               	movlw	2
 14056  00963A  6E4F               	movwf	_which_screen,c
 14057                           
 14058                           ;menu.c: 277: lcd_print_once = 0;
 14059  00963C  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14060                           
 14061                           ;menu.c: 278: encoder_click = 0;
 14062  00963E  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14063  009640  0012               	return		;funcret
 14064  009642                     __end_of_exitSave:
 14065                           	opt stack 0
 14066                           tblptru	equ	0xFF8
 14067                           tblptrh	equ	0xFF7
 14068                           tblptrl	equ	0xFF6
 14069                           tablat	equ	0xFF5
 14070                           prodh	equ	0xFF4
 14071                           prodl	equ	0xFF3
 14072                           intcon	equ	0xFF2
 14073                           intcon2	equ	0xFF1
 14074                           postinc0	equ	0xFEE
 14075                           wreg	equ	0xFE8
 14076                           postinc1	equ	0xFE6
 14077                           indf2	equ	0xFDF
 14078                           postinc2	equ	0xFDE
 14079                           postdec2	equ	0xFDD
 14080                           fsr2h	equ	0xFDA
 14081                           fsr2l	equ	0xFD9
 14082                           status	equ	0xFD8
 14083                           
 14084 ;; *************** function _eepromExit *****************
 14085 ;; Defined at:
 14086 ;;		line 305 in file "menu.c"
 14087 ;; Parameters:    Size  Location     Type
 14088 ;;		None
 14089 ;; Auto vars:     Size  Location     Type
 14090 ;;		None
 14091 ;; Return value:  Size  Location     Type
 14092 ;;                  1    wreg      void 
 14093 ;; Registers used:
 14094 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14095 ;; Tracked objects:
 14096 ;;		On entry : 0/0
 14097 ;;		On exit  : 0/0
 14098 ;;		Unchanged: 0/0
 14099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14102 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14103 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14104 ;;Total ram usage:        2 bytes
 14105 ;; Hardware stack levels used:    1
 14106 ;; Hardware stack levels required when called:    9
 14107 ;; This function calls:
 14108 ;;		_Lcd_Print_String
 14109 ;;		_clear_row1
 14110 ;; This function is called by:
 14111 ;;		_Function_G_1
 14112 ;;		_Function_G_2
 14113 ;;		_Function_G
 14114 ;; This function uses a non-reentrant model
 14115 ;;
 14116                           
 14117                           	psect	text35
 14118  009642                     __ptext35:
 14119                           	opt stack 0
 14120  009642                     _eepromExit:
 14121                           	opt stack 19
 14122                           
 14123                           ;menu.c: 307: while(encoder_click == 0);
 14124                           
 14125                           ;incstack = 0
 14126  009642  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14127  009644  D7FE               	goto	_eepromExit
 14128                           
 14129                           ;menu.c: 313: clear_row1();
 14130  009646  EC16  F04C         	call	_clear_row1	;wreg free
 14131                           
 14132                           ;menu.c: 314: Lcd_Print_String("Exit EEPROM!");
 14133  00964A  0E18               	movlw	low STR_23
 14134  00964C  0100               	movlb	0	; () banked
 14135  00964E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14136  009650  0EFF               	movlw	high STR_23
 14137  009652  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14138  009654  EC74  F042         	call	_Lcd_Print_String	;wreg free
 14139                           
 14140                           ;menu.c: 315: _delay((unsigned long)((500)*(20000000/4000.0)));
 14141  009658  0E0D               	movlw	13
 14142  00965A  0100               	movlb	0	; () banked
 14143  00965C  6F6F               	movwf	(??_eepromExit+1)& (0+255),b
 14144  00965E  0EAF               	movlw	175
 14145  009660  6F6E               	movwf	??_eepromExit& (0+255),b
 14146  009662  0EB6               	movlw	182
 14147  009664                     u67117:
 14148  009664  2EE8               	decfsz	wreg,f,c
 14149  009666  D7FE               	bra	u67117
 14150  009668  2F6E               	decfsz	??_eepromExit& (0+255),f,b
 14151  00966A  D7FC               	bra	u67117
 14152  00966C  2F6F               	decfsz	(??_eepromExit+1)& (0+255),f,b
 14153  00966E  D7FA               	bra	u67117
 14154  009670  F000               	nop	
 14155                           
 14156                           ;menu.c: 316: which_screen = MAIN_MENU;
 14157  009672  0E02               	movlw	2
 14158  009674  6E4F               	movwf	_which_screen,c
 14159                           
 14160                           ;menu.c: 317: lcd_print_once = 0;
 14161  009676  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14162                           
 14163                           ;menu.c: 318: encoder_click = 0;
 14164  009678  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14165  00967A  0012               	return		;funcret
 14166  00967C                     __end_of_eepromExit:
 14167                           	opt stack 0
 14168                           tblptru	equ	0xFF8
 14169                           tblptrh	equ	0xFF7
 14170                           tblptrl	equ	0xFF6
 14171                           tablat	equ	0xFF5
 14172                           prodh	equ	0xFF4
 14173                           prodl	equ	0xFF3
 14174                           intcon	equ	0xFF2
 14175                           intcon2	equ	0xFF1
 14176                           postinc0	equ	0xFEE
 14177                           wreg	equ	0xFE8
 14178                           postinc1	equ	0xFE6
 14179                           indf2	equ	0xFDF
 14180                           postinc2	equ	0xFDE
 14181                           postdec2	equ	0xFDD
 14182                           fsr2h	equ	0xFDA
 14183                           fsr2l	equ	0xFD9
 14184                           status	equ	0xFD8
 14185                           
 14186 ;; *************** function _Function_F *****************
 14187 ;; Defined at:
 14188 ;;		line 1026 in file "menu.c"
 14189 ;; Parameters:    Size  Location     Type
 14190 ;;		None
 14191 ;; Auto vars:     Size  Location     Type
 14192 ;;		None
 14193 ;; Return value:  Size  Location     Type
 14194 ;;                  1    wreg      void 
 14195 ;; Registers used:
 14196 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14197 ;; Tracked objects:
 14198 ;;		On entry : 0/0
 14199 ;;		On exit  : 0/0
 14200 ;;		Unchanged: 0/0
 14201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14205 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14206 ;;Total ram usage:        0 bytes
 14207 ;; Hardware stack levels used:    1
 14208 ;; Hardware stack levels required when called:   16
 14209 ;; This function calls:
 14210 ;;		_Lcd_Print_String
 14211 ;;		_Lcd_Set_Cursor
 14212 ;;		_clear_row2
 14213 ;;		_int2string
 14214 ;;		_programChange
 14215 ;;		_un_block_code
 14216 ;; This function is called by:
 14217 ;;		_menu_lcd
 14218 ;; This function uses a non-reentrant model
 14219 ;;
 14220                           
 14221                           	psect	text36
 14222  008E8E                     __ptext36:
 14223                           	opt stack 0
 14224  008E8E                     _Function_F:
 14225                           	opt stack 13
 14226                           
 14227                           ;menu.c: 1028: which_screen = PROGRAM_CHANGE_MENU;
 14228                           
 14229                           ;incstack = 0
 14230  008E8E  0E08               	movlw	8
 14231  008E90  6E4F               	movwf	_which_screen,c
 14232                           
 14233                           ;menu.c: 1029: lcd_print_once = 0;
 14234  008E92  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14235                           
 14236                           ;menu.c: 1031: programChangeMenu.selector = patch_number;
 14237  008E94  C0F3  F146         	movff	_patch_number,_programChangeMenu+2
 14238                           
 14239                           ;menu.c: 1033: while(encoder_click == 0) {
 14240  008E98  D021               	goto	l3723
 14241  008E9A                     
 14242                           ;menu.c: 1037: un_block_code();
 14243  008E9A  ECAB  F04C         	call	_un_block_code	;wreg free
 14244                           
 14245                           ;menu.c: 1039: if (lcd_print_once == 0) {
 14246  008E9E  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14247  008EA0  D009               	goto	l3725
 14248                           
 14249                           ;menu.c: 1040: clear_row2();
 14250  008EA2  EC02  F04C         	call	_clear_row2	;wreg free
 14251                           
 14252                           ;menu.c: 1041: Lcd_Print_String("Program #: ");
 14253  008EA6  0E4C               	movlw	low STR_34
 14254  008EA8  0100               	movlb	0	; () banked
 14255  008EAA  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14256  008EAC  0EFF               	movlw	high STR_34
 14257  008EAE  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14258  008EB0  EC74  F042         	call	_Lcd_Print_String	;wreg free
 14259  008EB4                     l3725:
 14260                           
 14261                           ;menu.c: 1042: }
 14262                           ;menu.c: 1043: lcd_print_once = 1;
 14263  008EB4  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14264                           
 14265                           ;menu.c: 1046: int2string(programChangeMenu.selector);
 14266  008EB6  C146  F060         	movff	_programChangeMenu+2,int2string@number
 14267  008EBA  0100               	movlb	0	; () banked
 14268  008EBC  6B61               	clrf	(int2string@number+1)& (0+255),b
 14269  008EBE  EC08  F03B         	call	_int2string	;wreg free
 14270                           
 14271                           ;menu.c: 1047: Lcd_Set_Cursor(2,13);
 14272  008EC2  0E0D               	movlw	13
 14273  008EC4  0100               	movlb	0	; () banked
 14274  008EC6  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 14275  008EC8  0E02               	movlw	2
 14276  008ECA  ECDD  F047         	call	_Lcd_Set_Cursor
 14277                           
 14278                           ;menu.c: 1048: Lcd_Print_String(string2display);
 14279  008ECE  0E92               	movlw	low _string2display
 14280  008ED0  0100               	movlb	0	; () banked
 14281  008ED2  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14282  008ED4  0E01               	movlw	high _string2display
 14283  008ED6  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14284  008ED8  EC74  F042         	call	_Lcd_Print_String	;wreg free
 14285  008EDC                     l3723:
 14286  008EDC  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14287  008EDE  D7DD               	goto	l3724
 14288                           
 14289                           ;menu.c: 1049: }
 14290                           ;menu.c: 1051: patch_number = programChangeMenu.selector;
 14291  008EE0  C146  F0F3         	movff	_programChangeMenu+2,_patch_number
 14292                           
 14293                           ;menu.c: 1053: programChange(channel, programChangeMenu.selector, programChangeMenu.sele
      +                          ctor);
 14294  008EE4  C146  F060         	movff	_programChangeMenu+2,programChange@data1
 14295  008EE8  C146  F061         	movff	_programChangeMenu+2,programChange@data2
 14296  008EEC  503E               	movf	_channel,w,c
 14297  008EEE  ECDC  F049         	call	_programChange
 14298  008EF2  0012               	return		;funcret
 14299  008EF4                     __end_of_Function_F:
 14300                           	opt stack 0
 14301                           tblptru	equ	0xFF8
 14302                           tblptrh	equ	0xFF7
 14303                           tblptrl	equ	0xFF6
 14304                           tablat	equ	0xFF5
 14305                           prodh	equ	0xFF4
 14306                           prodl	equ	0xFF3
 14307                           intcon	equ	0xFF2
 14308                           intcon2	equ	0xFF1
 14309                           postinc0	equ	0xFEE
 14310                           wreg	equ	0xFE8
 14311                           postinc1	equ	0xFE6
 14312                           indf2	equ	0xFDF
 14313                           postinc2	equ	0xFDE
 14314                           postdec2	equ	0xFDD
 14315                           fsr2h	equ	0xFDA
 14316                           fsr2l	equ	0xFD9
 14317                           status	equ	0xFD8
 14318                           
 14319 ;; *************** function _programChange *****************
 14320 ;; Defined at:
 14321 ;;		line 225 in file "midi.c"
 14322 ;; Parameters:    Size  Location     Type
 14323 ;;  channel         1    wreg     unsigned char 
 14324 ;;  data1           1    0[BANK0 ] unsigned char 
 14325 ;;  data2           1    1[BANK0 ] unsigned char 
 14326 ;; Auto vars:     Size  Location     Type
 14327 ;;  channel         1    2[BANK0 ] unsigned char 
 14328 ;; Return value:  Size  Location     Type
 14329 ;;                  1    wreg      void 
 14330 ;; Registers used:
 14331 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
 14332 ;; Tracked objects:
 14333 ;;		On entry : 0/0
 14334 ;;		On exit  : 0/0
 14335 ;;		Unchanged: 0/0
 14336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14337 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14338 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14340 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14341 ;;Total ram usage:        3 bytes
 14342 ;; Hardware stack levels used:    1
 14343 ;; Hardware stack levels required when called:    8
 14344 ;; This function calls:
 14345 ;;		___lbmod
 14346 ;;		_key_press_release_note_off
 14347 ;;		_sendOut
 14348 ;;		_sendUSB
 14349 ;; This function is called by:
 14350 ;;		_Function_F
 14351 ;; This function uses a non-reentrant model
 14352 ;;
 14353                           
 14354                           	psect	text37
 14355  0093B8                     __ptext37:
 14356                           	opt stack 0
 14357  0093B8                     _programChange:
 14358                           	opt stack 20
 14359                           
 14360                           ;incstack = 0
 14361                           ;programChange@channel stored from wreg
 14362  0093B8  0100               	movlb	0	; () banked
 14363  0093BA  6F62               	movwf	programChange@channel& (0+255),b
 14364                           
 14365                           ;midi.c: 229: if((note_off_was_sent == 0) && ((TIMER_OVERFLOWS % NOTE_LENGTH_PULSES) == 
      +                          0)){
 14366  0093BC  B002               	btfsc	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 14367  0093BE  D00A               	goto	l504
 14368  0093C0  504D               	movf	_NOTE_LENGTH_PULSES,w,c
 14369  0093C2  6EE6               	movwf	postinc1,c
 14370  0093C4  502E               	movf	_TIMER_OVERFLOWS,w,c
 14371  0093C6  6EE6               	movwf	postinc1,c
 14372  0093C8  EC61  F041         	call	___lbmod	;wreg free
 14373  0093CC  503F               	movf	btemp,w,c
 14374  0093CE  B4D8               	btfsc	status,2,c
 14375                           
 14376                           ;midi.c: 231: key_press_release_note_off();
 14377  0093D0  EC8B  F02E         	call	_key_press_release_note_off	;wreg free
 14378  0093D4                     l504:
 14379                           
 14380                           ;midi.c: 232: }
 14381                           ;midi.c: 234: statusByte = channel | program_change;
 14382  0093D4  0100               	movlb	0	; () banked
 14383  0093D6  5162               	movf	programChange@channel& (0+255),w,b
 14384  0093D8  09C0               	iorlw	192
 14385  0093DA  6E3D               	movwf	_statusByte,c
 14386                           
 14387                           ; BSR set to: 0
 14388                           ;midi.c: 237: sendUSB(statusByte, data1, data2);
 14389  0093DC  5161               	movf	programChange@data2& (0+255),w,b
 14390  0093DE  6EE6               	movwf	postinc1,c
 14391  0093E0  5160               	movf	programChange@data1& (0+255),w,b
 14392  0093E2  6EE6               	movwf	postinc1,c
 14393  0093E4  503D               	movf	_statusByte,w,c
 14394  0093E6  6EE6               	movwf	postinc1,c
 14395  0093E8  ECDB  F036         	call	_sendUSB	;wreg free
 14396                           
 14397                           ;midi.c: 240: sendOut(statusByte, data1, data2);
 14398  0093EC  0100               	movlb	0	; () banked
 14399  0093EE  5161               	movf	programChange@data2& (0+255),w,b
 14400  0093F0  6EE6               	movwf	postinc1,c
 14401  0093F2  5160               	movf	programChange@data1& (0+255),w,b
 14402  0093F4  6EE6               	movwf	postinc1,c
 14403  0093F6  503D               	movf	_statusByte,w,c
 14404  0093F8  6EE6               	movwf	postinc1,c
 14405  0093FA  EC64  F036         	call	_sendOut	;wreg free
 14406  0093FE  0012               	return		;funcret
 14407  009400                     __end_of_programChange:
 14408                           	opt stack 0
 14409                           tblptru	equ	0xFF8
 14410                           tblptrh	equ	0xFF7
 14411                           tblptrl	equ	0xFF6
 14412                           tablat	equ	0xFF5
 14413                           prodh	equ	0xFF4
 14414                           prodl	equ	0xFF3
 14415                           intcon	equ	0xFF2
 14416                           intcon2	equ	0xFF1
 14417                           postinc0	equ	0xFEE
 14418                           wreg	equ	0xFE8
 14419                           postinc1	equ	0xFE6
 14420                           indf2	equ	0xFDF
 14421                           postinc2	equ	0xFDE
 14422                           postdec2	equ	0xFDD
 14423                           fsr2h	equ	0xFDA
 14424                           fsr2l	equ	0xFD9
 14425                           status	equ	0xFD8
 14426                           
 14427 ;; *************** function _Function_E *****************
 14428 ;; Defined at:
 14429 ;;		line 1003 in file "menu.c"
 14430 ;; Parameters:    Size  Location     Type
 14431 ;;		None
 14432 ;; Auto vars:     Size  Location     Type
 14433 ;;		None
 14434 ;; Return value:  Size  Location     Type
 14435 ;;                  1    wreg      void 
 14436 ;; Registers used:
 14437 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14438 ;; Tracked objects:
 14439 ;;		On entry : 0/0
 14440 ;;		On exit  : 0/0
 14441 ;;		Unchanged: 0/0
 14442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14447 ;;Total ram usage:        0 bytes
 14448 ;; Hardware stack levels used:    1
 14449 ;; Hardware stack levels required when called:   17
 14450 ;; This function calls:
 14451 ;;		_Function_E_1
 14452 ;;		_Function_E_2
 14453 ;;		_Lcd_Print_String
 14454 ;;		___lbmod
 14455 ;;		___wmul
 14456 ;;		_clear_row2
 14457 ;;		_un_block_code
 14458 ;; This function is called by:
 14459 ;;		_menu_lcd
 14460 ;; This function uses a non-reentrant model
 14461 ;;
 14462                           
 14463                           	psect	text38
 14464  008CE6                     __ptext38:
 14465                           	opt stack 0
 14466  008CE6                     _Function_E:
 14467                           	opt stack 12
 14468                           
 14469                           ;menu.c: 1005: which_screen = MIDI_CHANNEL_MENU;
 14470                           
 14471                           ;incstack = 0
 14472  008CE6  0E07               	movlw	7
 14473  008CE8  6E4F               	movwf	_which_screen,c
 14474                           
 14475                           ;menu.c: 1006: lcd_print_once = 0;
 14476  008CEA  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14477                           
 14478                           ;menu.c: 1008: while(encoder_click == 0) {
 14479  008CEC  D024               	goto	l3714
 14480  008CEE                     
 14481                           ;menu.c: 1012: un_block_code();
 14482  008CEE  ECAB  F04C         	call	_un_block_code	;wreg free
 14483                           
 14484                           ;menu.c: 1014: if (lcd_print_once == 0) {
 14485  008CF2  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14486  008CF4  D01F               	goto	l3716
 14487                           
 14488                           ;menu.c: 1015: clear_row2();
 14489  008CF6  EC02  F04C         	call	_clear_row2	;wreg free
 14490                           
 14491                           ;menu.c: 1016: Lcd_Print_String(LCD_STRINGS[(midiChannelMenu.selector % midiChannelMenu.
      +                          number) + midiChannelMenu.address]);
 14492  008CFA  0101               	movlb	1	; () banked
 14493  008CFC  5147               	movf	_midiChannelMenu& (0+255),w,b
 14494  008CFE  6EE6               	movwf	postinc1,c
 14495  008D00  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 14496  008D02  6EE6               	movwf	postinc1,c
 14497  008D04  EC61  F041         	call	___lbmod	;wreg free
 14498  008D08  503F               	movf	btemp,w,c
 14499  008D0A  0101               	movlb	1	; () banked
 14500  008D0C  2548               	addwf	(_midiChannelMenu+1)& (0+255),w,b
 14501  008D0E  0100               	movlb	0	; () banked
 14502  008D10  6F60               	movwf	___wmul@multiplier& (0+255),b
 14503  008D12  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 14504  008D14  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 14505  008D16  0E00               	movlw	0
 14506  008D18  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14507  008D1A  0E11               	movlw	17
 14508  008D1C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14509  008D1E  EC2A  F04C         	call	___wmul	;wreg free
 14510  008D22  0E9E               	movlw	low _LCD_STRINGS
 14511  008D24  0100               	movlb	0	; () banked
 14512  008D26  2560               	addwf	?___wmul& (0+255),w,b
 14513  008D28  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14514  008D2A  0EF3               	movlw	high _LCD_STRINGS
 14515  008D2C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 14516  008D2E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14517  008D30  EC74  F042         	call	_Lcd_Print_String	;wreg free
 14518  008D34                     l3716:
 14519                           
 14520                           ;menu.c: 1017: }
 14521                           ;menu.c: 1018: lcd_print_once = 1;
 14522  008D34  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14523  008D36                     l3714:
 14524  008D36  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14525  008D38  D7DA               	goto	l3715
 14526                           
 14527                           ;menu.c: 1019: }
 14528                           ;menu.c: 1021: if(midiChannelMenu.selector == 0) {Function_E_1();}
 14529  008D3A  0101               	movlb	1	; () banked
 14530  008D3C  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 14531  008D3E  B4D8               	btfsc	status,2,c
 14532                           
 14533                           ; BSR set to: 1
 14534  008D40  EC6C  F049         	call	_Function_E_1	;wreg free
 14535                           
 14536                           ;menu.c: 1022: if(midiChannelMenu.selector == 1) {Function_E_2();}
 14537  008D44  0101               	movlb	1	; () banked
 14538  008D46  0549               	decf	(_midiChannelMenu+2)& (0+255),w,b
 14539  008D48  A4D8               	btfss	status,2,c
 14540  008D4A  0012               	return	
 14541                           
 14542                           ; BSR set to: 1
 14543  008D4C  EC46  F049         	call	_Function_E_2	;wreg free
 14544  008D50  0012               	return	
 14545  008D52                     __end_of_Function_E:
 14546                           	opt stack 0
 14547                           tblptru	equ	0xFF8
 14548                           tblptrh	equ	0xFF7
 14549                           tblptrl	equ	0xFF6
 14550                           tablat	equ	0xFF5
 14551                           prodh	equ	0xFF4
 14552                           prodl	equ	0xFF3
 14553                           intcon	equ	0xFF2
 14554                           intcon2	equ	0xFF1
 14555                           postinc0	equ	0xFEE
 14556                           wreg	equ	0xFE8
 14557                           postinc1	equ	0xFE6
 14558                           indf2	equ	0xFDF
 14559                           postinc2	equ	0xFDE
 14560                           postdec2	equ	0xFDD
 14561                           fsr2h	equ	0xFDA
 14562                           fsr2l	equ	0xFD9
 14563                           status	equ	0xFD8
 14564                           
 14565 ;; *************** function _Function_E_2 *****************
 14566 ;; Defined at:
 14567 ;;		line 980 in file "menu.c"
 14568 ;; Parameters:    Size  Location     Type
 14569 ;;		None
 14570 ;; Auto vars:     Size  Location     Type
 14571 ;;		None
 14572 ;; Return value:  Size  Location     Type
 14573 ;;                  1    wreg      void 
 14574 ;; Registers used:
 14575 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14576 ;; Tracked objects:
 14577 ;;		On entry : 0/0
 14578 ;;		On exit  : 0/0
 14579 ;;		Unchanged: 0/0
 14580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14585 ;;Total ram usage:        0 bytes
 14586 ;; Hardware stack levels used:    1
 14587 ;; Hardware stack levels required when called:   16
 14588 ;; This function calls:
 14589 ;;		_Lcd_Print_String
 14590 ;;		_Lcd_Set_Cursor
 14591 ;;		_int2string
 14592 ;;		_un_block_code
 14593 ;; This function is called by:
 14594 ;;		_Function_E
 14595 ;; This function uses a non-reentrant model
 14596 ;;
 14597                           
 14598                           	psect	text39
 14599  00928C                     __ptext39:
 14600                           	opt stack 0
 14601  00928C                     _Function_E_2:
 14602                           	opt stack 12
 14603                           
 14604                           ;menu.c: 982: which_screen = DRUM_CH_MENU;
 14605                           
 14606                           ;incstack = 0
 14607  00928C  0E15               	movlw	21
 14608  00928E  6E4F               	movwf	_which_screen,c
 14609                           
 14610                           ;menu.c: 983: lcd_print_once = 0;
 14611  009290  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14612                           
 14613                           ;menu.c: 984: encoder_click = 0;
 14614  009292  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14615                           
 14616                           ;menu.c: 985: drumChannelMenu.selector = drumchannel;
 14617  009294  C052  F140         	movff	_drumchannel,_drumChannelMenu+2
 14618                           
 14619                           ;menu.c: 987: while(encoder_click == 0) {
 14620  009298  D01A               	goto	l3708
 14621  00929A                     
 14622                           ;menu.c: 991: un_block_code();
 14623  00929A  ECAB  F04C         	call	_un_block_code	;wreg free
 14624                           
 14625                           ;menu.c: 993: lcd_print_once = 1;
 14626  00929E  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14627                           
 14628                           ;menu.c: 994: int2string((drumChannelMenu.selector) + 1);
 14629  0092A0  0E01               	movlw	1
 14630  0092A2  0101               	movlb	1	; () banked
 14631  0092A4  2540               	addwf	(_drumChannelMenu+2)& (0+255),w,b
 14632  0092A6  0100               	movlb	0	; () banked
 14633  0092A8  6F60               	movwf	int2string@number& (0+255),b
 14634  0092AA  6B61               	clrf	(int2string@number+1)& (0+255),b
 14635  0092AC  0E00               	movlw	0
 14636  0092AE  2361               	addwfc	(int2string@number+1)& (0+255),f,b
 14637  0092B0  EC08  F03B         	call	_int2string	;wreg free
 14638                           
 14639                           ;menu.c: 995: Lcd_Set_Cursor(2,13);
 14640  0092B4  0E0D               	movlw	13
 14641  0092B6  0100               	movlb	0	; () banked
 14642  0092B8  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 14643  0092BA  0E02               	movlw	2
 14644  0092BC  ECDD  F047         	call	_Lcd_Set_Cursor
 14645                           
 14646                           ;menu.c: 996: Lcd_Print_String(string2display);
 14647  0092C0  0E92               	movlw	low _string2display
 14648  0092C2  0100               	movlb	0	; () banked
 14649  0092C4  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14650  0092C6  0E01               	movlw	high _string2display
 14651  0092C8  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14652  0092CA  EC74  F042         	call	_Lcd_Print_String	;wreg free
 14653  0092CE                     l3708:
 14654  0092CE  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14655  0092D0  D7E4               	goto	l3709
 14656                           
 14657                           ;menu.c: 997: }
 14658                           ;menu.c: 999: drumchannel = drumChannelMenu.selector;
 14659  0092D2  C140  F052         	movff	_drumChannelMenu+2,_drumchannel
 14660  0092D6  0012               	return		;funcret
 14661  0092D8                     __end_of_Function_E_2:
 14662                           	opt stack 0
 14663                           tblptru	equ	0xFF8
 14664                           tblptrh	equ	0xFF7
 14665                           tblptrl	equ	0xFF6
 14666                           tablat	equ	0xFF5
 14667                           prodh	equ	0xFF4
 14668                           prodl	equ	0xFF3
 14669                           intcon	equ	0xFF2
 14670                           intcon2	equ	0xFF1
 14671                           postinc0	equ	0xFEE
 14672                           wreg	equ	0xFE8
 14673                           postinc1	equ	0xFE6
 14674                           indf2	equ	0xFDF
 14675                           postinc2	equ	0xFDE
 14676                           postdec2	equ	0xFDD
 14677                           fsr2h	equ	0xFDA
 14678                           fsr2l	equ	0xFD9
 14679                           status	equ	0xFD8
 14680                           
 14681 ;; *************** function _Function_E_1 *****************
 14682 ;; Defined at:
 14683 ;;		line 955 in file "menu.c"
 14684 ;; Parameters:    Size  Location     Type
 14685 ;;		None
 14686 ;; Auto vars:     Size  Location     Type
 14687 ;;		None
 14688 ;; Return value:  Size  Location     Type
 14689 ;;                  1    wreg      void 
 14690 ;; Registers used:
 14691 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14692 ;; Tracked objects:
 14693 ;;		On entry : 0/0
 14694 ;;		On exit  : 0/0
 14695 ;;		Unchanged: 0/0
 14696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14701 ;;Total ram usage:        0 bytes
 14702 ;; Hardware stack levels used:    1
 14703 ;; Hardware stack levels required when called:   16
 14704 ;; This function calls:
 14705 ;;		_Lcd_Print_String
 14706 ;;		_Lcd_Set_Cursor
 14707 ;;		_int2string
 14708 ;;		_un_block_code
 14709 ;; This function is called by:
 14710 ;;		_Function_E
 14711 ;; This function uses a non-reentrant model
 14712 ;;
 14713                           
 14714                           	psect	text40
 14715  0092D8                     __ptext40:
 14716                           	opt stack 0
 14717  0092D8                     _Function_E_1:
 14718                           	opt stack 12
 14719                           
 14720                           ;menu.c: 957: which_screen = MAIN_CH_MENU;
 14721                           
 14722                           ;incstack = 0
 14723  0092D8  0E14               	movlw	20
 14724  0092DA  6E4F               	movwf	_which_screen,c
 14725                           
 14726                           ;menu.c: 958: lcd_print_once = 0;
 14727  0092DC  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14728                           
 14729                           ;menu.c: 959: encoder_click = 0;
 14730  0092DE  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14731                           
 14732                           ;menu.c: 960: mainChannelMenu.selector = channel;
 14733  0092E0  C03E  F143         	movff	_channel,_mainChannelMenu+2
 14734                           
 14735                           ;menu.c: 962: while(encoder_click == 0) {
 14736  0092E4  D01A               	goto	l3702
 14737  0092E6                     
 14738                           ;menu.c: 966: un_block_code();
 14739  0092E6  ECAB  F04C         	call	_un_block_code	;wreg free
 14740                           
 14741                           ;menu.c: 968: lcd_print_once = 1;
 14742  0092EA  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14743                           
 14744                           ;menu.c: 970: int2string((mainChannelMenu.selector) + 1);
 14745  0092EC  0E01               	movlw	1
 14746  0092EE  0101               	movlb	1	; () banked
 14747  0092F0  2543               	addwf	(_mainChannelMenu+2)& (0+255),w,b
 14748  0092F2  0100               	movlb	0	; () banked
 14749  0092F4  6F60               	movwf	int2string@number& (0+255),b
 14750  0092F6  6B61               	clrf	(int2string@number+1)& (0+255),b
 14751  0092F8  0E00               	movlw	0
 14752  0092FA  2361               	addwfc	(int2string@number+1)& (0+255),f,b
 14753  0092FC  EC08  F03B         	call	_int2string	;wreg free
 14754                           
 14755                           ;menu.c: 972: Lcd_Set_Cursor(2,13);
 14756  009300  0E0D               	movlw	13
 14757  009302  0100               	movlb	0	; () banked
 14758  009304  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 14759  009306  0E02               	movlw	2
 14760  009308  ECDD  F047         	call	_Lcd_Set_Cursor
 14761                           
 14762                           ;menu.c: 973: Lcd_Print_String(string2display);
 14763  00930C  0E92               	movlw	low _string2display
 14764  00930E  0100               	movlb	0	; () banked
 14765  009310  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14766  009312  0E01               	movlw	high _string2display
 14767  009314  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14768  009316  EC74  F042         	call	_Lcd_Print_String	;wreg free
 14769  00931A                     l3702:
 14770  00931A  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14771  00931C  D7E4               	goto	l3703
 14772                           
 14773                           ;menu.c: 974: }
 14774                           ;menu.c: 976: channel = mainChannelMenu.selector;
 14775  00931E  C143  F03E         	movff	_mainChannelMenu+2,_channel
 14776  009322  0012               	return		;funcret
 14777  009324                     __end_of_Function_E_1:
 14778                           	opt stack 0
 14779                           tblptru	equ	0xFF8
 14780                           tblptrh	equ	0xFF7
 14781                           tblptrl	equ	0xFF6
 14782                           tablat	equ	0xFF5
 14783                           prodh	equ	0xFF4
 14784                           prodl	equ	0xFF3
 14785                           intcon	equ	0xFF2
 14786                           intcon2	equ	0xFF1
 14787                           postinc0	equ	0xFEE
 14788                           wreg	equ	0xFE8
 14789                           postinc1	equ	0xFE6
 14790                           indf2	equ	0xFDF
 14791                           postinc2	equ	0xFDE
 14792                           postdec2	equ	0xFDD
 14793                           fsr2h	equ	0xFDA
 14794                           fsr2l	equ	0xFD9
 14795                           status	equ	0xFD8
 14796                           
 14797 ;; *************** function _Function_D *****************
 14798 ;; Defined at:
 14799 ;;		line 928 in file "menu.c"
 14800 ;; Parameters:    Size  Location     Type
 14801 ;;		None
 14802 ;; Auto vars:     Size  Location     Type
 14803 ;;		None
 14804 ;; Return value:  Size  Location     Type
 14805 ;;                  1    wreg      void 
 14806 ;; Registers used:
 14807 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14808 ;; Tracked objects:
 14809 ;;		On entry : 0/0
 14810 ;;		On exit  : 0/0
 14811 ;;		Unchanged: 0/0
 14812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14817 ;;Total ram usage:        0 bytes
 14818 ;; Hardware stack levels used:    1
 14819 ;; Hardware stack levels required when called:   17
 14820 ;; This function calls:
 14821 ;;		_Function_D_1
 14822 ;;		_Function_D_2
 14823 ;;		_Function_D_3
 14824 ;;		_Function_D_4
 14825 ;;		_Function_D_5
 14826 ;;		_Lcd_Print_String
 14827 ;;		___lbmod
 14828 ;;		___wmul
 14829 ;;		_clear_row2
 14830 ;;		_un_block_code
 14831 ;; This function is called by:
 14832 ;;		_menu_lcd
 14833 ;; This function uses a non-reentrant model
 14834 ;;
 14835                           
 14836                           	psect	text41
 14837  0081A4                     __ptext41:
 14838                           	opt stack 0
 14839  0081A4                     _Function_D:
 14840                           	opt stack 12
 14841                           
 14842                           ;menu.c: 930: which_screen = POTENTIOMETER_MENU;
 14843                           
 14844                           ;incstack = 0
 14845  0081A4  0E06               	movlw	6
 14846  0081A6  6E4F               	movwf	_which_screen,c
 14847                           
 14848                           ;menu.c: 931: lcd_print_once = 0;
 14849  0081A8  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14850                           
 14851                           ;menu.c: 933: while(encoder_click == 0) {
 14852  0081AA  D024               	goto	l3690
 14853  0081AC                     
 14854                           ;menu.c: 937: un_block_code();
 14855  0081AC  ECAB  F04C         	call	_un_block_code	;wreg free
 14856                           
 14857                           ;menu.c: 939: if (lcd_print_once == 0) {
 14858  0081B0  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14859  0081B2  D01F               	goto	l3692
 14860                           
 14861                           ;menu.c: 940: clear_row2();
 14862  0081B4  EC02  F04C         	call	_clear_row2	;wreg free
 14863                           
 14864                           ;menu.c: 941: Lcd_Print_String(LCD_STRINGS[(potsMenu.selector % potsMenu.number) + potsM
      +                          enu.address]);
 14865  0081B8  0101               	movlb	1	; () banked
 14866  0081BA  5159               	movf	_potsMenu& (0+255),w,b
 14867  0081BC  6EE6               	movwf	postinc1,c
 14868  0081BE  515B               	movf	(_potsMenu+2)& (0+255),w,b
 14869  0081C0  6EE6               	movwf	postinc1,c
 14870  0081C2  EC61  F041         	call	___lbmod	;wreg free
 14871  0081C6  503F               	movf	btemp,w,c
 14872  0081C8  0101               	movlb	1	; () banked
 14873  0081CA  255A               	addwf	(_potsMenu+1)& (0+255),w,b
 14874  0081CC  0100               	movlb	0	; () banked
 14875  0081CE  6F60               	movwf	___wmul@multiplier& (0+255),b
 14876  0081D0  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 14877  0081D2  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 14878  0081D4  0E00               	movlw	0
 14879  0081D6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14880  0081D8  0E11               	movlw	17
 14881  0081DA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14882  0081DC  EC2A  F04C         	call	___wmul	;wreg free
 14883  0081E0  0E9E               	movlw	low _LCD_STRINGS
 14884  0081E2  0100               	movlb	0	; () banked
 14885  0081E4  2560               	addwf	?___wmul& (0+255),w,b
 14886  0081E6  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14887  0081E8  0EF3               	movlw	high _LCD_STRINGS
 14888  0081EA  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 14889  0081EC  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14890  0081EE  EC74  F042         	call	_Lcd_Print_String	;wreg free
 14891  0081F2                     l3692:
 14892                           
 14893                           ;menu.c: 942: }
 14894                           ;menu.c: 943: lcd_print_once = 1;
 14895  0081F2  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14896  0081F4                     l3690:
 14897  0081F4  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14898  0081F6  D7DA               	goto	l3691
 14899                           
 14900                           ;menu.c: 944: }
 14901                           ;menu.c: 946: if(potsMenu.selector == 0) {Function_D_1();}
 14902  0081F8  0101               	movlb	1	; () banked
 14903  0081FA  515B               	movf	(_potsMenu+2)& (0+255),w,b
 14904  0081FC  B4D8               	btfsc	status,2,c
 14905                           
 14906                           ; BSR set to: 1
 14907  0081FE  EC32  F042         	call	_Function_D_1	;wreg free
 14908                           
 14909                           ;menu.c: 947: if(potsMenu.selector == 1) {Function_D_2();}
 14910  008202  0101               	movlb	1	; () banked
 14911  008204  055B               	decf	(_potsMenu+2)& (0+255),w,b
 14912  008206  B4D8               	btfsc	status,2,c
 14913                           
 14914                           ; BSR set to: 1
 14915  008208  EC0E  F048         	call	_Function_D_2	;wreg free
 14916                           
 14917                           ;menu.c: 948: if(potsMenu.selector == 2) {Function_D_3();}
 14918  00820C  0E02               	movlw	2
 14919  00820E  0101               	movlb	1	; () banked
 14920  008210  195B               	xorwf	(_potsMenu+2)& (0+255),w,b
 14921  008212  B4D8               	btfsc	status,2,c
 14922                           
 14923                           ; BSR set to: 1
 14924  008214  ECE4  F044         	call	_Function_D_3	;wreg free
 14925                           
 14926                           ;menu.c: 949: if(potsMenu.selector == 3) {Function_D_4();}
 14927  008218  0E03               	movlw	3
 14928  00821A  0101               	movlb	1	; () banked
 14929  00821C  195B               	xorwf	(_potsMenu+2)& (0+255),w,b
 14930  00821E  B4D8               	btfsc	status,2,c
 14931                           
 14932                           ; BSR set to: 1
 14933  008220  ECF3  F043         	call	_Function_D_4	;wreg free
 14934                           
 14935                           ;menu.c: 950: if(potsMenu.selector == 4) {Function_D_5();}
 14936  008224  0E04               	movlw	4
 14937  008226  0101               	movlb	1	; () banked
 14938  008228  195B               	xorwf	(_potsMenu+2)& (0+255),w,b
 14939  00822A  A4D8               	btfss	status,2,c
 14940  00822C  0012               	return	
 14941                           
 14942                           ; BSR set to: 1
 14943  00822E  ECB6  F043         	call	_Function_D_5	;wreg free
 14944  008232  0012               	return	
 14945  008234                     __end_of_Function_D:
 14946                           	opt stack 0
 14947                           tblptru	equ	0xFF8
 14948                           tblptrh	equ	0xFF7
 14949                           tblptrl	equ	0xFF6
 14950                           tablat	equ	0xFF5
 14951                           prodh	equ	0xFF4
 14952                           prodl	equ	0xFF3
 14953                           intcon	equ	0xFF2
 14954                           intcon2	equ	0xFF1
 14955                           postinc0	equ	0xFEE
 14956                           wreg	equ	0xFE8
 14957                           postinc1	equ	0xFE6
 14958                           indf2	equ	0xFDF
 14959                           postinc2	equ	0xFDE
 14960                           postdec2	equ	0xFDD
 14961                           fsr2h	equ	0xFDA
 14962                           fsr2l	equ	0xFD9
 14963                           status	equ	0xFD8
 14964                           
 14965 ;; *************** function _Function_D_5 *****************
 14966 ;; Defined at:
 14967 ;;		line 898 in file "menu.c"
 14968 ;; Parameters:    Size  Location     Type
 14969 ;;		None
 14970 ;; Auto vars:     Size  Location     Type
 14971 ;;  array_index     1  103[BANK0 ] unsigned char 
 14972 ;; Return value:  Size  Location     Type
 14973 ;;                  1    wreg      void 
 14974 ;; Registers used:
 14975 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14976 ;; Tracked objects:
 14977 ;;		On entry : 0/0
 14978 ;;		On exit  : 0/0
 14979 ;;		Unchanged: 0/0
 14980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14982 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14984 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14985 ;;Total ram usage:        1 bytes
 14986 ;; Hardware stack levels used:    1
 14987 ;; Hardware stack levels required when called:   16
 14988 ;; This function calls:
 14989 ;;		_Lcd_Print_String
 14990 ;;		___lbmod
 14991 ;;		___wmul
 14992 ;;		_clear_row1
 14993 ;;		_clear_row2
 14994 ;;		_setControllerNumbers
 14995 ;;		_un_block_code
 14996 ;; This function is called by:
 14997 ;;		_Function_D
 14998 ;; This function uses a non-reentrant model
 14999 ;;
 15000                           
 15001                           	psect	text42
 15002  00876C                     __ptext42:
 15003                           	opt stack 0
 15004  00876C                     _Function_D_5:
 15005                           	opt stack 12
 15006                           
 15007                           ;menu.c: 900: which_screen = JOYSTICK_CC_MENU;
 15008                           
 15009                           ;incstack = 0
 15010  00876C  0E13               	movlw	19
 15011  00876E  6E4F               	movwf	_which_screen,c
 15012                           
 15013                           ;menu.c: 902: lcd_print_once = 0;
 15014  008770  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15015                           
 15016                           ;menu.c: 903: encoder_click = 0;
 15017  008772  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15018                           
 15019                           ;menu.c: 905: while(encoder_click == 0) {
 15020  008774  D02D               	goto	l3683
 15021  008776                     
 15022                           ;menu.c: 909: un_block_code();
 15023  008776  ECAB  F04C         	call	_un_block_code	;wreg free
 15024                           
 15025                           ;menu.c: 911: if (lcd_print_once == 0) {
 15026  00877A  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15027  00877C  D028               	goto	l3685
 15028                           
 15029                           ;menu.c: 912: clear_row1();
 15030  00877E  EC16  F04C         	call	_clear_row1	;wreg free
 15031                           
 15032                           ;menu.c: 913: Lcd_Print_String("Set Joystick CC#");
 15033  008782  0E97               	movlw	low STR_33
 15034  008784  0100               	movlb	0	; () banked
 15035  008786  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15036  008788  0EFD               	movlw	high STR_33
 15037  00878A  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15038  00878C  EC74  F042         	call	_Lcd_Print_String	;wreg free
 15039                           
 15040                           ;menu.c: 914: clear_row2();
 15041  008790  EC02  F04C         	call	_clear_row2	;wreg free
 15042                           
 15043                           ;menu.c: 915: Lcd_Print_String(LCD_STRINGS[(joystickCCMenu.selector % joystickCCMenu.num
      +                          ber) + joystickCCMenu.address]);
 15044  008794  0101               	movlb	1	; () banked
 15045  008796  514A               	movf	_joystickCCMenu& (0+255),w,b
 15046  008798  6EE6               	movwf	postinc1,c
 15047  00879A  514C               	movf	(_joystickCCMenu+2)& (0+255),w,b
 15048  00879C  6EE6               	movwf	postinc1,c
 15049  00879E  EC61  F041         	call	___lbmod	;wreg free
 15050  0087A2  503F               	movf	btemp,w,c
 15051  0087A4  0101               	movlb	1	; () banked
 15052  0087A6  254B               	addwf	(_joystickCCMenu+1)& (0+255),w,b
 15053  0087A8  0100               	movlb	0	; () banked
 15054  0087AA  6F60               	movwf	___wmul@multiplier& (0+255),b
 15055  0087AC  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 15056  0087AE  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 15057  0087B0  0E00               	movlw	0
 15058  0087B2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15059  0087B4  0E11               	movlw	17
 15060  0087B6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15061  0087B8  EC2A  F04C         	call	___wmul	;wreg free
 15062  0087BC  0E9E               	movlw	low _LCD_STRINGS
 15063  0087BE  0100               	movlb	0	; () banked
 15064  0087C0  2560               	addwf	?___wmul& (0+255),w,b
 15065  0087C2  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15066  0087C4  0EF3               	movlw	high _LCD_STRINGS
 15067  0087C6  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 15068  0087C8  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15069  0087CA  EC74  F042         	call	_Lcd_Print_String	;wreg free
 15070  0087CE                     l3685:
 15071                           
 15072                           ;menu.c: 916: }
 15073                           ;menu.c: 917: lcd_print_once = 1;
 15074  0087CE  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15075  0087D0                     l3683:
 15076  0087D0  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 15077  0087D2  D7D1               	goto	l3684
 15078                           
 15079                           ;menu.c: 918: }
 15080                           ;menu.c: 922: unsigned char array_index = (joystickCCMenu.selector) + 14;
 15081  0087D4  0101               	movlb	1	; () banked
 15082  0087D6  514C               	movf	(_joystickCCMenu+2)& (0+255),w,b
 15083  0087D8  0F0E               	addlw	14
 15084  0087DA  0100               	movlb	0	; () banked
 15085  0087DC  6FC7               	movwf	Function_D_5@array_index& (0+255),b
 15086                           
 15087                           ; BSR set to: 0
 15088                           ;menu.c: 923: setControllerNumbers(array_index);
 15089  0087DE  51C7               	movf	Function_D_5@array_index& (0+255),w,b
 15090  0087E0  EC5C  F011         	call	_setControllerNumbers
 15091  0087E4  0012               	return		;funcret
 15092  0087E6                     __end_of_Function_D_5:
 15093                           	opt stack 0
 15094                           tblptru	equ	0xFF8
 15095                           tblptrh	equ	0xFF7
 15096                           tblptrl	equ	0xFF6
 15097                           tablat	equ	0xFF5
 15098                           prodh	equ	0xFF4
 15099                           prodl	equ	0xFF3
 15100                           intcon	equ	0xFF2
 15101                           intcon2	equ	0xFF1
 15102                           postinc0	equ	0xFEE
 15103                           wreg	equ	0xFE8
 15104                           postinc1	equ	0xFE6
 15105                           indf2	equ	0xFDF
 15106                           postinc2	equ	0xFDE
 15107                           postdec2	equ	0xFDD
 15108                           fsr2h	equ	0xFDA
 15109                           fsr2l	equ	0xFD9
 15110                           status	equ	0xFD8
 15111                           
 15112 ;; *************** function _Function_D_4 *****************
 15113 ;; Defined at:
 15114 ;;		line 867 in file "menu.c"
 15115 ;; Parameters:    Size  Location     Type
 15116 ;;		None
 15117 ;; Auto vars:     Size  Location     Type
 15118 ;;  array_index     1  103[BANK0 ] unsigned char 
 15119 ;; Return value:  Size  Location     Type
 15120 ;;                  1    wreg      void 
 15121 ;; Registers used:
 15122 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15123 ;; Tracked objects:
 15124 ;;		On entry : 0/0
 15125 ;;		On exit  : 0/0
 15126 ;;		Unchanged: 0/0
 15127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15129 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15131 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15132 ;;Total ram usage:        1 bytes
 15133 ;; Hardware stack levels used:    1
 15134 ;; Hardware stack levels required when called:   16
 15135 ;; This function calls:
 15136 ;;		_Lcd_Print_String
 15137 ;;		___lbmod
 15138 ;;		___wmul
 15139 ;;		_clear_row1
 15140 ;;		_clear_row2
 15141 ;;		_setControllerNumbers
 15142 ;;		_un_block_code
 15143 ;; This function is called by:
 15144 ;;		_Function_D
 15145 ;; This function uses a non-reentrant model
 15146 ;;
 15147                           
 15148                           	psect	text43
 15149  0087E6                     __ptext43:
 15150                           	opt stack 0
 15151  0087E6                     _Function_D_4:
 15152                           	opt stack 12
 15153                           
 15154                           ;menu.c: 869: which_screen = SLIDEPOTS_CC_MENU;
 15155                           
 15156                           ;incstack = 0
 15157  0087E6  0E12               	movlw	18
 15158  0087E8  6E4F               	movwf	_which_screen,c
 15159                           
 15160                           ;menu.c: 871: lcd_print_once = 0;
 15161  0087EA  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15162                           
 15163                           ;menu.c: 872: encoder_click = 0;
 15164  0087EC  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15165                           
 15166                           ;menu.c: 874: while(encoder_click == 0) {
 15167  0087EE  D02D               	goto	l3676
 15168  0087F0                     
 15169                           ;menu.c: 878: un_block_code();
 15170  0087F0  ECAB  F04C         	call	_un_block_code	;wreg free
 15171                           
 15172                           ;menu.c: 880: if (lcd_print_once == 0) {
 15173  0087F4  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15174  0087F6  D028               	goto	l3678
 15175                           
 15176                           ;menu.c: 881: clear_row1();
 15177  0087F8  EC16  F04C         	call	_clear_row1	;wreg free
 15178                           
 15179                           ;menu.c: 882: Lcd_Print_String("Slidepots CC#:");
 15180  0087FC  0E4D               	movlw	low STR_32
 15181  0087FE  0100               	movlb	0	; () banked
 15182  008800  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15183  008802  0EFE               	movlw	high STR_32
 15184  008804  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15185  008806  EC74  F042         	call	_Lcd_Print_String	;wreg free
 15186                           
 15187                           ;menu.c: 883: clear_row2();
 15188  00880A  EC02  F04C         	call	_clear_row2	;wreg free
 15189                           
 15190                           ;menu.c: 884: Lcd_Print_String(LCD_STRINGS[(slidepotsCCMenu.selector % slidepotsCCMenu.n
      +                          umber) + slidepotsCCMenu.address]);
 15191  00880E  0101               	movlb	1	; () banked
 15192  008810  514D               	movf	_slidepotsCCMenu& (0+255),w,b
 15193  008812  6EE6               	movwf	postinc1,c
 15194  008814  514F               	movf	(_slidepotsCCMenu+2)& (0+255),w,b
 15195  008816  6EE6               	movwf	postinc1,c
 15196  008818  EC61  F041         	call	___lbmod	;wreg free
 15197  00881C  503F               	movf	btemp,w,c
 15198  00881E  0101               	movlb	1	; () banked
 15199  008820  254E               	addwf	(_slidepotsCCMenu+1)& (0+255),w,b
 15200  008822  0100               	movlb	0	; () banked
 15201  008824  6F60               	movwf	___wmul@multiplier& (0+255),b
 15202  008826  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 15203  008828  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 15204  00882A  0E00               	movlw	0
 15205  00882C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15206  00882E  0E11               	movlw	17
 15207  008830  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15208  008832  EC2A  F04C         	call	___wmul	;wreg free
 15209  008836  0E9E               	movlw	low _LCD_STRINGS
 15210  008838  0100               	movlb	0	; () banked
 15211  00883A  2560               	addwf	?___wmul& (0+255),w,b
 15212  00883C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15213  00883E  0EF3               	movlw	high _LCD_STRINGS
 15214  008840  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 15215  008842  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15216  008844  EC74  F042         	call	_Lcd_Print_String	;wreg free
 15217  008848                     l3678:
 15218                           
 15219                           ;menu.c: 885: }
 15220                           ;menu.c: 886: lcd_print_once = 1;
 15221  008848  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15222  00884A                     l3676:
 15223  00884A  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 15224  00884C  D7D1               	goto	l3677
 15225                           
 15226                           ;menu.c: 887: }
 15227                           ;menu.c: 892: unsigned char array_index = (slidepotsCCMenu.selector) + 7;
 15228  00884E  0101               	movlb	1	; () banked
 15229  008850  514F               	movf	(_slidepotsCCMenu+2)& (0+255),w,b
 15230  008852  0F07               	addlw	7
 15231  008854  0100               	movlb	0	; () banked
 15232  008856  6FC7               	movwf	Function_D_4@array_index& (0+255),b
 15233                           
 15234                           ; BSR set to: 0
 15235                           ;menu.c: 893: setControllerNumbers(array_index);
 15236  008858  51C7               	movf	Function_D_4@array_index& (0+255),w,b
 15237  00885A  EC5C  F011         	call	_setControllerNumbers
 15238  00885E  0012               	return		;funcret
 15239  008860                     __end_of_Function_D_4:
 15240                           	opt stack 0
 15241                           tblptru	equ	0xFF8
 15242                           tblptrh	equ	0xFF7
 15243                           tblptrl	equ	0xFF6
 15244                           tablat	equ	0xFF5
 15245                           prodh	equ	0xFF4
 15246                           prodl	equ	0xFF3
 15247                           intcon	equ	0xFF2
 15248                           intcon2	equ	0xFF1
 15249                           postinc0	equ	0xFEE
 15250                           wreg	equ	0xFE8
 15251                           postinc1	equ	0xFE6
 15252                           indf2	equ	0xFDF
 15253                           postinc2	equ	0xFDE
 15254                           postdec2	equ	0xFDD
 15255                           fsr2h	equ	0xFDA
 15256                           fsr2l	equ	0xFD9
 15257                           status	equ	0xFD8
 15258                           
 15259 ;; *************** function _Function_D_3 *****************
 15260 ;; Defined at:
 15261 ;;		line 839 in file "menu.c"
 15262 ;; Parameters:    Size  Location     Type
 15263 ;;		None
 15264 ;; Auto vars:     Size  Location     Type
 15265 ;;  array_index     1  103[BANK0 ] unsigned char 
 15266 ;; Return value:  Size  Location     Type
 15267 ;;                  1    wreg      void 
 15268 ;; Registers used:
 15269 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15270 ;; Tracked objects:
 15271 ;;		On entry : 0/0
 15272 ;;		On exit  : 0/0
 15273 ;;		Unchanged: 0/0
 15274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15276 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15278 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15279 ;;Total ram usage:        1 bytes
 15280 ;; Hardware stack levels used:    1
 15281 ;; Hardware stack levels required when called:   16
 15282 ;; This function calls:
 15283 ;;		_Lcd_Print_String
 15284 ;;		___lbmod
 15285 ;;		___wmul
 15286 ;;		_clear_row1
 15287 ;;		_clear_row2
 15288 ;;		_setControllerNumbers
 15289 ;;		_un_block_code
 15290 ;; This function is called by:
 15291 ;;		_Function_D
 15292 ;; This function uses a non-reentrant model
 15293 ;;
 15294                           
 15295                           	psect	text44
 15296  0089C8                     __ptext44:
 15297                           	opt stack 0
 15298  0089C8                     _Function_D_3:
 15299                           	opt stack 12
 15300                           
 15301                           ;menu.c: 841: which_screen = POTS_CC_MENU;
 15302                           
 15303                           ;incstack = 0
 15304  0089C8  0E11               	movlw	17
 15305  0089CA  6E4F               	movwf	_which_screen,c
 15306                           
 15307                           ;menu.c: 843: lcd_print_once = 0;
 15308  0089CC  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15309                           
 15310                           ;menu.c: 844: encoder_click = 0;
 15311  0089CE  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15312                           
 15313                           ;menu.c: 846: while(encoder_click == 0) {
 15314  0089D0  D02D               	goto	l3669
 15315  0089D2                     
 15316                           ;menu.c: 850: un_block_code();
 15317  0089D2  ECAB  F04C         	call	_un_block_code	;wreg free
 15318                           
 15319                           ;menu.c: 852: if (lcd_print_once == 0) {
 15320  0089D6  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15321  0089D8  D028               	goto	l3671
 15322                           
 15323                           ;menu.c: 853: clear_row1();
 15324  0089DA  EC16  F04C         	call	_clear_row1	;wreg free
 15325                           
 15326                           ;menu.c: 854: Lcd_Print_String("Set Pots CC#:");
 15327  0089DE  0EC4               	movlw	low STR_31
 15328  0089E0  0100               	movlb	0	; () banked
 15329  0089E2  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15330  0089E4  0EFE               	movlw	high STR_31
 15331  0089E6  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15332  0089E8  EC74  F042         	call	_Lcd_Print_String	;wreg free
 15333                           
 15334                           ;menu.c: 855: clear_row2();
 15335  0089EC  EC02  F04C         	call	_clear_row2	;wreg free
 15336                           
 15337                           ;menu.c: 856: Lcd_Print_String(LCD_STRINGS[(potsCCMenu.selector % potsCCMenu.number) + p
      +                          otsCCMenu.address]);
 15338  0089F0  0101               	movlb	1	; () banked
 15339  0089F2  5150               	movf	_potsCCMenu& (0+255),w,b
 15340  0089F4  6EE6               	movwf	postinc1,c
 15341  0089F6  5152               	movf	(_potsCCMenu+2)& (0+255),w,b
 15342  0089F8  6EE6               	movwf	postinc1,c
 15343  0089FA  EC61  F041         	call	___lbmod	;wreg free
 15344  0089FE  503F               	movf	btemp,w,c
 15345  008A00  0101               	movlb	1	; () banked
 15346  008A02  2551               	addwf	(_potsCCMenu+1)& (0+255),w,b
 15347  008A04  0100               	movlb	0	; () banked
 15348  008A06  6F60               	movwf	___wmul@multiplier& (0+255),b
 15349  008A08  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 15350  008A0A  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 15351  008A0C  0E00               	movlw	0
 15352  008A0E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15353  008A10  0E11               	movlw	17
 15354  008A12  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15355  008A14  EC2A  F04C         	call	___wmul	;wreg free
 15356  008A18  0E9E               	movlw	low _LCD_STRINGS
 15357  008A1A  0100               	movlb	0	; () banked
 15358  008A1C  2560               	addwf	?___wmul& (0+255),w,b
 15359  008A1E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15360  008A20  0EF3               	movlw	high _LCD_STRINGS
 15361  008A22  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 15362  008A24  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15363  008A26  EC74  F042         	call	_Lcd_Print_String	;wreg free
 15364  008A2A                     l3671:
 15365                           
 15366                           ;menu.c: 857: }
 15367                           ;menu.c: 858: lcd_print_once = 1;
 15368  008A2A  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15369  008A2C                     l3669:
 15370  008A2C  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 15371  008A2E  D7D1               	goto	l3670
 15372                           
 15373                           ;menu.c: 859: }
 15374                           ;menu.c: 861: unsigned char array_index = potsCCMenu.selector;
 15375  008A30  C152  F0C7         	movff	_potsCCMenu+2,Function_D_3@array_index
 15376                           
 15377                           ;menu.c: 862: setControllerNumbers(array_index);
 15378  008A34  0100               	movlb	0	; () banked
 15379  008A36  51C7               	movf	Function_D_3@array_index& (0+255),w,b
 15380  008A38  EC5C  F011         	call	_setControllerNumbers
 15381  008A3C  0012               	return		;funcret
 15382  008A3E                     __end_of_Function_D_3:
 15383                           	opt stack 0
 15384                           tblptru	equ	0xFF8
 15385                           tblptrh	equ	0xFF7
 15386                           tblptrl	equ	0xFF6
 15387                           tablat	equ	0xFF5
 15388                           prodh	equ	0xFF4
 15389                           prodl	equ	0xFF3
 15390                           intcon	equ	0xFF2
 15391                           intcon2	equ	0xFF1
 15392                           postinc0	equ	0xFEE
 15393                           wreg	equ	0xFE8
 15394                           postinc1	equ	0xFE6
 15395                           indf2	equ	0xFDF
 15396                           postinc2	equ	0xFDE
 15397                           postdec2	equ	0xFDD
 15398                           fsr2h	equ	0xFDA
 15399                           fsr2l	equ	0xFD9
 15400                           status	equ	0xFD8
 15401                           
 15402 ;; *************** function _setControllerNumbers *****************
 15403 ;; Defined at:
 15404 ;;		line 125 in file "menu.c"
 15405 ;; Parameters:    Size  Location     Type
 15406 ;;  array_index     1    wreg     unsigned char 
 15407 ;; Auto vars:     Size  Location     Type
 15408 ;;  array_index     1   15[BANK0 ] unsigned char 
 15409 ;; Return value:  Size  Location     Type
 15410 ;;                  1    wreg      void 
 15411 ;; Registers used:
 15412 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh, cstack
 15413 ;; Tracked objects:
 15414 ;;		On entry : 0/0
 15415 ;;		On exit  : 0/0
 15416 ;;		Unchanged: 0/0
 15417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15419 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15420 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15421 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15422 ;;Total ram usage:        2 bytes
 15423 ;; Hardware stack levels used:    1
 15424 ;; Hardware stack levels required when called:    8
 15425 ;; This function calls:
 15426 ;;		_Lcd_Print_String
 15427 ;;		_Lcd_Set_Cursor
 15428 ;;		_int2string
 15429 ;; This function is called by:
 15430 ;;		_Function_D_3
 15431 ;;		_Function_D_4
 15432 ;;		_Function_D_5
 15433 ;;		_initializeControllerNumbers
 15434 ;; This function uses a non-reentrant model
 15435 ;;
 15436                           
 15437                           	psect	text45
 15438  0022B8                     __ptext45:
 15439                           	opt stack 0
 15440  0022B8                     _setControllerNumbers:
 15441                           	opt stack 19
 15442                           
 15443                           ;incstack = 0
 15444                           ;setControllerNumbers@array_index stored from wreg
 15445  0022B8  0100               	movlb	0	; () banked
 15446  0022BA  6F6F               	movwf	setControllerNumbers@array_index& (0+255),b
 15447                           
 15448                           ;menu.c: 127: which_screen = BLANK;
 15449  0022BC  0E00               	movlw	0
 15450  0022BE  6E4F               	movwf	_which_screen,c
 15451                           
 15452                           ;menu.c: 128: lcd_print_once = 0;
 15453  0022C0  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15454                           
 15455                           ;menu.c: 129: encoder_click = 0;
 15456  0022C2  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15457                           
 15458                           ;menu.c: 131: while(encoder_click == 0) {
 15459  0022C4  D271               	goto	l3503
 15460  0022C6                     l3476:
 15461                           
 15462                           ;menu.c: 136: if(lcd_print_once == 0) {
 15463  0022C6  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15464  0022C8  D1CF               	goto	l3497
 15465                           
 15466                           ;menu.c: 138: if (encoder_direction == 0x10) {
 15467  0022CA  0E10               	movlw	16
 15468  0022CC  1836               	xorwf	_encoder_direction,w,c
 15469  0022CE  A4D8               	btfss	status,2,c
 15470  0022D0  D075               	goto	l3478
 15471                           
 15472                           ;menu.c: 140: if(inputPotsArray[array_index].controller_resolution == 0){
 15473  0022D2  0100               	movlb	0	; () banked
 15474  0022D4  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15475  0022D6  0D03               	mullw	3
 15476  0022D8  0E88               	movlw	low _inputPotsArray
 15477  0022DA  24F3               	addwf	prodl,w,c
 15478  0022DC  6ED9               	movwf	fsr2l,c
 15479  0022DE  0E02               	movlw	high _inputPotsArray
 15480  0022E0  20F4               	addwfc	prodh,w,c
 15481  0022E2  6EDA               	movwf	fsr2h,c
 15482  0022E4  0102               	movlb	2	; () banked
 15483  0022E6  B0DF               	btfsc	indf2,0,c
 15484  0022E8  D03C               	goto	l3481
 15485                           
 15486                           ; BSR set to: 2
 15487                           ;menu.c: 141: if(inputPotsArray[array_index].controller_number < 119) {
 15488  0022EA  0100               	movlb	0	; () banked
 15489  0022EC  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15490  0022EE  0D03               	mullw	3
 15491  0022F0  0E01               	movlw	1
 15492  0022F2  26F3               	addwf	prodl,f,c
 15493  0022F4  0E00               	movlw	0
 15494  0022F6  22F4               	addwfc	prodh,f,c
 15495  0022F8  0E88               	movlw	low _inputPotsArray
 15496  0022FA  24F3               	addwf	prodl,w,c
 15497  0022FC  6ED9               	movwf	fsr2l,c
 15498  0022FE  0E02               	movlw	high _inputPotsArray
 15499  002300  20F4               	addwfc	prodh,w,c
 15500  002302  6EDA               	movwf	fsr2h,c
 15501  002304  50DF               	movf	indf2,w,c
 15502  002306  0A80               	xorlw	128
 15503  002308  0F09               	addlw	-247
 15504  00230A  B0D8               	btfsc	status,0,c
 15505  00230C  D02A               	goto	l3481
 15506                           
 15507                           ; BSR set to: 0
 15508                           ;menu.c: 142: inputPotsArray[array_index].controller_number++;
 15509  00230E  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15510  002310  0D03               	mullw	3
 15511  002312  0E01               	movlw	1
 15512  002314  26F3               	addwf	prodl,f,c
 15513  002316  0E00               	movlw	0
 15514  002318  22F4               	addwfc	prodh,f,c
 15515  00231A  0E88               	movlw	low _inputPotsArray
 15516  00231C  24F3               	addwf	prodl,w,c
 15517  00231E  6ED9               	movwf	fsr2l,c
 15518  002320  0E02               	movlw	high _inputPotsArray
 15519  002322  20F4               	addwfc	prodh,w,c
 15520  002324  6EDA               	movwf	fsr2h,c
 15521  002326  2ADF               	incf	indf2,f,c
 15522                           
 15523                           ;menu.c: 143: if(inputPotsArray[array_index].controller_number == 0){inputPotsArray[arra
      +                          y_index].controller_number = 64;}
 15524  002328  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15525  00232A  0D03               	mullw	3
 15526  00232C  0E01               	movlw	1
 15527  00232E  26F3               	addwf	prodl,f,c
 15528  002330  0E00               	movlw	0
 15529  002332  22F4               	addwfc	prodh,f,c
 15530  002334  0E88               	movlw	low _inputPotsArray
 15531  002336  24F3               	addwf	prodl,w,c
 15532  002338  6ED9               	movwf	fsr2l,c
 15533  00233A  0E02               	movlw	high _inputPotsArray
 15534  00233C  20F4               	addwfc	prodh,w,c
 15535  00233E  6EDA               	movwf	fsr2h,c
 15536  002340  50DF               	movf	indf2,w,c
 15537  002342  A4D8               	btfss	status,2,c
 15538  002344  D00E               	goto	l3481
 15539                           
 15540                           ; BSR set to: 0
 15541  002346  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15542  002348  0D03               	mullw	3
 15543  00234A  0E01               	movlw	1
 15544  00234C  26F3               	addwf	prodl,f,c
 15545  00234E  0E00               	movlw	0
 15546  002350  22F4               	addwfc	prodh,f,c
 15547  002352  0E88               	movlw	low _inputPotsArray
 15548  002354  24F3               	addwf	prodl,w,c
 15549  002356  6ED9               	movwf	fsr2l,c
 15550  002358  0E02               	movlw	high _inputPotsArray
 15551  00235A  20F4               	addwfc	prodh,w,c
 15552  00235C  6EDA               	movwf	fsr2h,c
 15553  00235E  0E40               	movlw	64
 15554  002360  6EDF               	movwf	indf2,c
 15555  002362                     l3481:
 15556                           
 15557                           ;menu.c: 144: }
 15558                           ;menu.c: 145: }
 15559                           ;menu.c: 147: if(inputPotsArray[array_index].controller_resolution == 1){
 15560                           
 15561                           ; BSR set to: 0
 15562                           
 15563                           ; BSR set to: 0
 15564  002362  0100               	movlb	0	; () banked
 15565  002364  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15566  002366  0D03               	mullw	3
 15567  002368  0E88               	movlw	low _inputPotsArray
 15568  00236A  24F3               	addwf	prodl,w,c
 15569  00236C  6ED9               	movwf	fsr2l,c
 15570  00236E  0E02               	movlw	high _inputPotsArray
 15571  002370  20F4               	addwfc	prodh,w,c
 15572  002372  6EDA               	movwf	fsr2h,c
 15573  002374  0102               	movlb	2	; () banked
 15574  002376  A0DF               	btfss	indf2,0,c
 15575  002378  D01F               	goto	l3483
 15576                           
 15577                           ; BSR set to: 2
 15578                           ;menu.c: 148: if(inputPotsArray[array_index].controller_number_two_byte < 31) {
 15579  00237A  0100               	movlb	0	; () banked
 15580  00237C  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15581  00237E  0D03               	mullw	3
 15582  002380  0E02               	movlw	2
 15583  002382  26F3               	addwf	prodl,f,c
 15584  002384  0E00               	movlw	0
 15585  002386  22F4               	addwfc	prodh,f,c
 15586  002388  0E88               	movlw	low _inputPotsArray
 15587  00238A  24F3               	addwf	prodl,w,c
 15588  00238C  6ED9               	movwf	fsr2l,c
 15589  00238E  0E02               	movlw	high _inputPotsArray
 15590  002390  20F4               	addwfc	prodh,w,c
 15591  002392  6EDA               	movwf	fsr2h,c
 15592  002394  50DF               	movf	indf2,w,c
 15593  002396  0A80               	xorlw	128
 15594  002398  0F61               	addlw	-159
 15595  00239A  B0D8               	btfsc	status,0,c
 15596  00239C  D00D               	goto	l3483
 15597                           
 15598                           ; BSR set to: 0
 15599                           ;menu.c: 149: inputPotsArray[array_index].controller_number_two_byte++;
 15600  00239E  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15601  0023A0  0D03               	mullw	3
 15602  0023A2  0E02               	movlw	2
 15603  0023A4  26F3               	addwf	prodl,f,c
 15604  0023A6  0E00               	movlw	0
 15605  0023A8  22F4               	addwfc	prodh,f,c
 15606  0023AA  0E88               	movlw	low _inputPotsArray
 15607  0023AC  24F3               	addwf	prodl,w,c
 15608  0023AE  6ED9               	movwf	fsr2l,c
 15609  0023B0  0E02               	movlw	high _inputPotsArray
 15610  0023B2  20F4               	addwfc	prodh,w,c
 15611  0023B4  6EDA               	movwf	fsr2h,c
 15612  0023B6  2ADF               	incf	indf2,f,c
 15613  0023B8                     l3483:
 15614                           
 15615                           ;menu.c: 150: }
 15616                           ;menu.c: 151: }
 15617                           ;menu.c: 153: encoder_direction = 0x00;
 15618                           
 15619                           ; BSR set to: 0
 15620                           
 15621                           ; BSR set to: 0
 15622  0023B8  0E00               	movlw	0
 15623  0023BA  6E36               	movwf	_encoder_direction,c
 15624  0023BC                     l3478:
 15625                           
 15626                           ;menu.c: 154: }
 15627                           ;menu.c: 158: if (encoder_direction == 0x20) {
 15628  0023BC  0E20               	movlw	32
 15629  0023BE  1836               	xorwf	_encoder_direction,w,c
 15630  0023C0  A4D8               	btfss	status,2,c
 15631  0023C2  D0B2               	goto	l3484
 15632                           
 15633                           ;menu.c: 160: if(inputPotsArray[array_index].controller_resolution == 0){
 15634  0023C4  0100               	movlb	0	; () banked
 15635  0023C6  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15636  0023C8  0D03               	mullw	3
 15637  0023CA  0E88               	movlw	low _inputPotsArray
 15638  0023CC  24F3               	addwf	prodl,w,c
 15639  0023CE  6ED9               	movwf	fsr2l,c
 15640  0023D0  0E02               	movlw	high _inputPotsArray
 15641  0023D2  20F4               	addwfc	prodh,w,c
 15642  0023D4  6EDA               	movwf	fsr2h,c
 15643  0023D6  0102               	movlb	2	; () banked
 15644  0023D8  B0DF               	btfsc	indf2,0,c
 15645  0023DA  D079               	goto	l3489
 15646                           
 15647                           ; BSR set to: 2
 15648                           ;menu.c: 162: if(inputPotsArray[array_index].controller_number > -3) {
 15649  0023DC  0100               	movlb	0	; () banked
 15650  0023DE  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15651  0023E0  0D03               	mullw	3
 15652  0023E2  0E01               	movlw	1
 15653  0023E4  26F3               	addwf	prodl,f,c
 15654  0023E6  0E00               	movlw	0
 15655  0023E8  22F4               	addwfc	prodh,f,c
 15656  0023EA  0E88               	movlw	low _inputPotsArray
 15657  0023EC  24F3               	addwf	prodl,w,c
 15658  0023EE  6ED9               	movwf	fsr2l,c
 15659  0023F0  0E02               	movlw	high _inputPotsArray
 15660  0023F2  20F4               	addwfc	prodh,w,c
 15661  0023F4  6EDA               	movwf	fsr2h,c
 15662  0023F6  50DF               	movf	indf2,w,c
 15663  0023F8  0A80               	xorlw	128
 15664  0023FA  0F82               	addlw	130
 15665  0023FC  A0D8               	btfss	status,0,c
 15666  0023FE  D00D               	goto	l3486
 15667                           
 15668                           ; BSR set to: 0
 15669                           ;menu.c: 163: inputPotsArray[array_index].controller_number--;
 15670  002400  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15671  002402  0D03               	mullw	3
 15672  002404  0E01               	movlw	1
 15673  002406  26F3               	addwf	prodl,f,c
 15674  002408  0E00               	movlw	0
 15675  00240A  22F4               	addwfc	prodh,f,c
 15676  00240C  0E88               	movlw	low _inputPotsArray
 15677  00240E  24F3               	addwf	prodl,w,c
 15678  002410  6ED9               	movwf	fsr2l,c
 15679  002412  0E02               	movlw	high _inputPotsArray
 15680  002414  20F4               	addwfc	prodh,w,c
 15681  002416  6EDA               	movwf	fsr2h,c
 15682  002418  06DF               	decf	indf2,f,c
 15683  00241A                     l3486:
 15684                           
 15685                           ; BSR set to: 0
 15686                           ;menu.c: 164: }
 15687                           ;menu.c: 165: if(inputPotsArray[array_index].controller_number == 61) {inputPotsArray[ar
      +                          ray_index].controller_number = -3;}
 15688  00241A  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15689  00241C  0D03               	mullw	3
 15690  00241E  0E01               	movlw	1
 15691  002420  26F3               	addwf	prodl,f,c
 15692  002422  0E00               	movlw	0
 15693  002424  22F4               	addwfc	prodh,f,c
 15694  002426  0E88               	movlw	low _inputPotsArray
 15695  002428  24F3               	addwf	prodl,w,c
 15696  00242A  6ED9               	movwf	fsr2l,c
 15697  00242C  0E02               	movlw	high _inputPotsArray
 15698  00242E  20F4               	addwfc	prodh,w,c
 15699  002430  6EDA               	movwf	fsr2h,c
 15700  002432  0E3D               	movlw	61
 15701  002434  18DE               	xorwf	postinc2,w,c
 15702  002436  A4D8               	btfss	status,2,c
 15703  002438  D00E               	goto	l3487
 15704                           
 15705                           ; BSR set to: 0
 15706  00243A  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15707  00243C  0D03               	mullw	3
 15708  00243E  0E01               	movlw	1
 15709  002440  26F3               	addwf	prodl,f,c
 15710  002442  0E00               	movlw	0
 15711  002444  22F4               	addwfc	prodh,f,c
 15712  002446  0E88               	movlw	low _inputPotsArray
 15713  002448  24F3               	addwf	prodl,w,c
 15714  00244A  6ED9               	movwf	fsr2l,c
 15715  00244C  0E02               	movlw	high _inputPotsArray
 15716  00244E  20F4               	addwfc	prodh,w,c
 15717  002450  6EDA               	movwf	fsr2h,c
 15718  002452  0EFD               	movlw	253
 15719  002454  6EDF               	movwf	indf2,c
 15720  002456                     l3487:
 15721                           
 15722                           ; BSR set to: 0
 15723                           ;menu.c: 166: if(inputPotsArray[array_index].controller_number == 62) {inputPotsArray[ar
      +                          ray_index].controller_number = -2;}
 15724  002456  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15725  002458  0D03               	mullw	3
 15726  00245A  0E01               	movlw	1
 15727  00245C  26F3               	addwf	prodl,f,c
 15728  00245E  0E00               	movlw	0
 15729  002460  22F4               	addwfc	prodh,f,c
 15730  002462  0E88               	movlw	low _inputPotsArray
 15731  002464  24F3               	addwf	prodl,w,c
 15732  002466  6ED9               	movwf	fsr2l,c
 15733  002468  0E02               	movlw	high _inputPotsArray
 15734  00246A  20F4               	addwfc	prodh,w,c
 15735  00246C  6EDA               	movwf	fsr2h,c
 15736  00246E  0E3E               	movlw	62
 15737  002470  18DE               	xorwf	postinc2,w,c
 15738  002472  A4D8               	btfss	status,2,c
 15739  002474  D00E               	goto	l3488
 15740                           
 15741                           ; BSR set to: 0
 15742  002476  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15743  002478  0D03               	mullw	3
 15744  00247A  0E01               	movlw	1
 15745  00247C  26F3               	addwf	prodl,f,c
 15746  00247E  0E00               	movlw	0
 15747  002480  22F4               	addwfc	prodh,f,c
 15748  002482  0E88               	movlw	low _inputPotsArray
 15749  002484  24F3               	addwf	prodl,w,c
 15750  002486  6ED9               	movwf	fsr2l,c
 15751  002488  0E02               	movlw	high _inputPotsArray
 15752  00248A  20F4               	addwfc	prodh,w,c
 15753  00248C  6EDA               	movwf	fsr2h,c
 15754  00248E  0EFE               	movlw	254
 15755  002490  6EDF               	movwf	indf2,c
 15756  002492                     l3488:
 15757                           
 15758                           ; BSR set to: 0
 15759                           ;menu.c: 167: if(inputPotsArray[array_index].controller_number == 63) {inputPotsArray[ar
      +                          ray_index].controller_number = -1;}
 15760  002492  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15761  002494  0D03               	mullw	3
 15762  002496  0E01               	movlw	1
 15763  002498  26F3               	addwf	prodl,f,c
 15764  00249A  0E00               	movlw	0
 15765  00249C  22F4               	addwfc	prodh,f,c
 15766  00249E  0E88               	movlw	low _inputPotsArray
 15767  0024A0  24F3               	addwf	prodl,w,c
 15768  0024A2  6ED9               	movwf	fsr2l,c
 15769  0024A4  0E02               	movlw	high _inputPotsArray
 15770  0024A6  20F4               	addwfc	prodh,w,c
 15771  0024A8  6EDA               	movwf	fsr2h,c
 15772  0024AA  0E3F               	movlw	63
 15773  0024AC  18DE               	xorwf	postinc2,w,c
 15774  0024AE  A4D8               	btfss	status,2,c
 15775  0024B0  D00E               	goto	l3489
 15776                           
 15777                           ; BSR set to: 0
 15778  0024B2  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15779  0024B4  0D03               	mullw	3
 15780  0024B6  0E01               	movlw	1
 15781  0024B8  26F3               	addwf	prodl,f,c
 15782  0024BA  0E00               	movlw	0
 15783  0024BC  22F4               	addwfc	prodh,f,c
 15784  0024BE  0E88               	movlw	low _inputPotsArray
 15785  0024C0  24F3               	addwf	prodl,w,c
 15786  0024C2  6ED9               	movwf	fsr2l,c
 15787  0024C4  0E02               	movlw	high _inputPotsArray
 15788  0024C6  20F4               	addwfc	prodh,w,c
 15789  0024C8  6EDA               	movwf	fsr2h,c
 15790  0024CA  0EFF               	movlw	255
 15791  0024CC  6EDF               	movwf	indf2,c
 15792  0024CE                     l3489:
 15793                           
 15794                           ;menu.c: 169: }
 15795                           ;menu.c: 171: if(inputPotsArray[array_index].controller_resolution == 1){
 15796                           
 15797                           ; BSR set to: 0
 15798  0024CE  0100               	movlb	0	; () banked
 15799  0024D0  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15800  0024D2  0D03               	mullw	3
 15801  0024D4  0E88               	movlw	low _inputPotsArray
 15802  0024D6  24F3               	addwf	prodl,w,c
 15803  0024D8  6ED9               	movwf	fsr2l,c
 15804  0024DA  0E02               	movlw	high _inputPotsArray
 15805  0024DC  20F4               	addwfc	prodh,w,c
 15806  0024DE  6EDA               	movwf	fsr2h,c
 15807  0024E0  0102               	movlb	2	; () banked
 15808  0024E2  A0DF               	btfss	indf2,0,c
 15809  0024E4  D01F               	goto	l3491
 15810                           
 15811                           ; BSR set to: 2
 15812                           ;menu.c: 173: if(inputPotsArray[array_index].controller_number_two_byte > -3) {
 15813  0024E6  0100               	movlb	0	; () banked
 15814  0024E8  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15815  0024EA  0D03               	mullw	3
 15816  0024EC  0E02               	movlw	2
 15817  0024EE  26F3               	addwf	prodl,f,c
 15818  0024F0  0E00               	movlw	0
 15819  0024F2  22F4               	addwfc	prodh,f,c
 15820  0024F4  0E88               	movlw	low _inputPotsArray
 15821  0024F6  24F3               	addwf	prodl,w,c
 15822  0024F8  6ED9               	movwf	fsr2l,c
 15823  0024FA  0E02               	movlw	high _inputPotsArray
 15824  0024FC  20F4               	addwfc	prodh,w,c
 15825  0024FE  6EDA               	movwf	fsr2h,c
 15826  002500  50DF               	movf	indf2,w,c
 15827  002502  0A80               	xorlw	128
 15828  002504  0F82               	addlw	130
 15829  002506  A0D8               	btfss	status,0,c
 15830  002508  D00D               	goto	l3491
 15831                           
 15832                           ; BSR set to: 0
 15833                           ;menu.c: 174: inputPotsArray[array_index].controller_number_two_byte--;
 15834  00250A  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15835  00250C  0D03               	mullw	3
 15836  00250E  0E02               	movlw	2
 15837  002510  26F3               	addwf	prodl,f,c
 15838  002512  0E00               	movlw	0
 15839  002514  22F4               	addwfc	prodh,f,c
 15840  002516  0E88               	movlw	low _inputPotsArray
 15841  002518  24F3               	addwf	prodl,w,c
 15842  00251A  6ED9               	movwf	fsr2l,c
 15843  00251C  0E02               	movlw	high _inputPotsArray
 15844  00251E  20F4               	addwfc	prodh,w,c
 15845  002520  6EDA               	movwf	fsr2h,c
 15846  002522  06DF               	decf	indf2,f,c
 15847  002524                     l3491:
 15848                           
 15849                           ;menu.c: 175: }
 15850                           ;menu.c: 177: }
 15851                           ;menu.c: 179: encoder_direction = 0x00;
 15852                           
 15853                           ; BSR set to: 0
 15854                           
 15855                           ; BSR set to: 0
 15856  002524  0E00               	movlw	0
 15857  002526  6E36               	movwf	_encoder_direction,c
 15858  002528                     l3484:
 15859                           
 15860                           ;menu.c: 180: }
 15861                           ;menu.c: 182: if(inputPotsArray[array_index].controller_resolution == 0){
 15862  002528  0100               	movlb	0	; () banked
 15863  00252A  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15864  00252C  0D03               	mullw	3
 15865  00252E  0E88               	movlw	low _inputPotsArray
 15866  002530  24F3               	addwf	prodl,w,c
 15867  002532  6ED9               	movwf	fsr2l,c
 15868  002534  0E02               	movlw	high _inputPotsArray
 15869  002536  20F4               	addwfc	prodh,w,c
 15870  002538  6EDA               	movwf	fsr2h,c
 15871  00253A  0102               	movlb	2	; () banked
 15872  00253C  B0DF               	btfsc	indf2,0,c
 15873  00253E  D094               	goto	l3497
 15874                           
 15875                           ; BSR set to: 2
 15876                           ;menu.c: 184: if(inputPotsArray[array_index].controller_number >= 0) {
 15877  002540  0100               	movlb	0	; () banked
 15878  002542  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15879  002544  0D03               	mullw	3
 15880  002546  0E01               	movlw	1
 15881  002548  26F3               	addwf	prodl,f,c
 15882  00254A  0E00               	movlw	0
 15883  00254C  22F4               	addwfc	prodh,f,c
 15884  00254E  0E88               	movlw	low _inputPotsArray
 15885  002550  24F3               	addwf	prodl,w,c
 15886  002552  6ED9               	movwf	fsr2l,c
 15887  002554  0E02               	movlw	high _inputPotsArray
 15888  002556  20F4               	addwfc	prodh,w,c
 15889  002558  6EDA               	movwf	fsr2h,c
 15890  00255A  0E00               	movlw	0
 15891  00255C  BEDB               	btfsc	plusw2,7,c
 15892  00255E  D02E               	goto	l3493
 15893                           
 15894                           ; BSR set to: 0
 15895                           ;menu.c: 186: int2string(inputPotsArray[array_index].controller_number);
 15896  002560  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15897  002562  0D03               	mullw	3
 15898  002564  0E01               	movlw	1
 15899  002566  26F3               	addwf	prodl,f,c
 15900  002568  0E00               	movlw	0
 15901  00256A  22F4               	addwfc	prodh,f,c
 15902  00256C  0E88               	movlw	low _inputPotsArray
 15903  00256E  24F3               	addwf	prodl,w,c
 15904  002570  6ED9               	movwf	fsr2l,c
 15905  002572  0E02               	movlw	high _inputPotsArray
 15906  002574  20F4               	addwfc	prodh,w,c
 15907  002576  6EDA               	movwf	fsr2h,c
 15908  002578  50DF               	movf	indf2,w,c
 15909  00257A  6F60               	movwf	int2string@number& (0+255),b
 15910  00257C  6B61               	clrf	(int2string@number+1)& (0+255),b
 15911  00257E  BF60               	btfsc	int2string@number& (0+255),7,b
 15912  002580  0761               	decf	(int2string@number+1)& (0+255),f,b
 15913  002582  EC08  F03B         	call	_int2string	;wreg free
 15914                           
 15915                           ;menu.c: 188: Lcd_Set_Cursor(2,7);
 15916  002586  0E07               	movlw	7
 15917  002588  0100               	movlb	0	; () banked
 15918  00258A  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 15919  00258C  0E02               	movlw	2
 15920  00258E  ECDD  F047         	call	_Lcd_Set_Cursor
 15921                           
 15922                           ;menu.c: 189: Lcd_Print_String("         ");
 15923  002592  0E6B               	movlw	low (STR_10+7)
 15924  002594  0100               	movlb	0	; () banked
 15925  002596  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15926  002598  0EFD               	movlw	high (STR_10+7)
 15927  00259A  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15928  00259C  EC74  F042         	call	_Lcd_Print_String	;wreg free
 15929                           
 15930                           ;menu.c: 190: Lcd_Set_Cursor(2,13);
 15931  0025A0  0E0D               	movlw	13
 15932  0025A2  0100               	movlb	0	; () banked
 15933  0025A4  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 15934  0025A6  0E02               	movlw	2
 15935  0025A8  ECDD  F047         	call	_Lcd_Set_Cursor
 15936                           
 15937                           ;menu.c: 191: Lcd_Print_String(string2display);
 15938  0025AC  0E92               	movlw	low _string2display
 15939  0025AE  0100               	movlb	0	; () banked
 15940  0025B0  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15941  0025B2  0E01               	movlw	high _string2display
 15942  0025B4  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15943  0025B6  EC74  F042         	call	_Lcd_Print_String	;wreg free
 15944                           
 15945                           ;menu.c: 192: }
 15946  0025BA  D056               	goto	l3497
 15947  0025BC                     l3493:
 15948                           
 15949                           ;menu.c: 193: else {
 15950                           ;menu.c: 194: if(inputPotsArray[array_index].controller_number == -1) {
 15951  0025BC  0100               	movlb	0	; () banked
 15952  0025BE  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15953  0025C0  0D03               	mullw	3
 15954  0025C2  0E01               	movlw	1
 15955  0025C4  26F3               	addwf	prodl,f,c
 15956  0025C6  0E00               	movlw	0
 15957  0025C8  22F4               	addwfc	prodh,f,c
 15958  0025CA  0E88               	movlw	low _inputPotsArray
 15959  0025CC  24F3               	addwf	prodl,w,c
 15960  0025CE  6ED9               	movwf	fsr2l,c
 15961  0025D0  0E02               	movlw	high _inputPotsArray
 15962  0025D2  20F4               	addwfc	prodh,w,c
 15963  0025D4  6EDA               	movwf	fsr2h,c
 15964  0025D6  28DE               	incf	postinc2,w,c
 15965  0025D8  A4D8               	btfss	status,2,c
 15966  0025DA  D00C               	goto	l3495
 15967                           
 15968                           ; BSR set to: 0
 15969                           ;menu.c: 195: Lcd_Set_Cursor(2,7);
 15970  0025DC  0E07               	movlw	7
 15971  0025DE  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 15972  0025E0  0E02               	movlw	2
 15973  0025E2  ECDD  F047         	call	_Lcd_Set_Cursor
 15974                           
 15975                           ;menu.c: 196: Lcd_Print_String("  VELOCITY");
 15976  0025E6  0E9E               	movlw	low STR_13
 15977  0025E8  0100               	movlb	0	; () banked
 15978  0025EA  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15979  0025EC  0EFF               	movlw	high STR_13
 15980  0025EE  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15981  0025F0  EC74  F042         	call	_Lcd_Print_String	;wreg free
 15982  0025F4                     l3495:
 15983                           
 15984                           ;menu.c: 197: }
 15985                           ;menu.c: 199: if(inputPotsArray[array_index].controller_number == -2) {
 15986  0025F4  0100               	movlb	0	; () banked
 15987  0025F6  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 15988  0025F8  0D03               	mullw	3
 15989  0025FA  0E01               	movlw	1
 15990  0025FC  26F3               	addwf	prodl,f,c
 15991  0025FE  0E00               	movlw	0
 15992  002600  22F4               	addwfc	prodh,f,c
 15993  002602  0E88               	movlw	low _inputPotsArray
 15994  002604  24F3               	addwf	prodl,w,c
 15995  002606  6ED9               	movwf	fsr2l,c
 15996  002608  0E02               	movlw	high _inputPotsArray
 15997  00260A  20F4               	addwfc	prodh,w,c
 15998  00260C  6EDA               	movwf	fsr2h,c
 15999  00260E  0EFE               	movlw	254
 16000  002610  18DE               	xorwf	postinc2,w,c
 16001  002612  A4D8               	btfss	status,2,c
 16002  002614  D00C               	goto	l3496
 16003                           
 16004                           ; BSR set to: 0
 16005                           ;menu.c: 200: Lcd_Set_Cursor(2,7);
 16006  002616  0E07               	movlw	7
 16007  002618  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16008  00261A  0E02               	movlw	2
 16009  00261C  ECDD  F047         	call	_Lcd_Set_Cursor
 16010                           
 16011                           ;menu.c: 201: Lcd_Print_String(" PITCHBEND");
 16012  002620  0E88               	movlw	low STR_14
 16013  002622  0100               	movlb	0	; () banked
 16014  002624  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16015  002626  0EFF               	movlw	high STR_14
 16016  002628  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16017  00262A  EC74  F042         	call	_Lcd_Print_String	;wreg free
 16018  00262E                     l3496:
 16019                           
 16020                           ;menu.c: 202: }
 16021                           ;menu.c: 203: if(inputPotsArray[array_index].controller_number == -3) {
 16022  00262E  0100               	movlb	0	; () banked
 16023  002630  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 16024  002632  0D03               	mullw	3
 16025  002634  0E01               	movlw	1
 16026  002636  26F3               	addwf	prodl,f,c
 16027  002638  0E00               	movlw	0
 16028  00263A  22F4               	addwfc	prodh,f,c
 16029  00263C  0E88               	movlw	low _inputPotsArray
 16030  00263E  24F3               	addwf	prodl,w,c
 16031  002640  6ED9               	movwf	fsr2l,c
 16032  002642  0E02               	movlw	high _inputPotsArray
 16033  002644  20F4               	addwfc	prodh,w,c
 16034  002646  6EDA               	movwf	fsr2h,c
 16035  002648  0EFD               	movlw	253
 16036  00264A  18DE               	xorwf	postinc2,w,c
 16037  00264C  A4D8               	btfss	status,2,c
 16038  00264E  D00C               	goto	l3497
 16039                           
 16040                           ; BSR set to: 0
 16041                           ;menu.c: 204: Lcd_Set_Cursor(2,7);
 16042  002650  0E07               	movlw	7
 16043  002652  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16044  002654  0E02               	movlw	2
 16045  002656  ECDD  F047         	call	_Lcd_Set_Cursor
 16046                           
 16047                           ;menu.c: 205: Lcd_Print_String(" MOD.WHEEL");
 16048  00265A  0E93               	movlw	low STR_15
 16049  00265C  0100               	movlb	0	; () banked
 16050  00265E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16051  002660  0EFF               	movlw	high STR_15
 16052  002662  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16053  002664  EC74  F042         	call	_Lcd_Print_String	;wreg free
 16054  002668                     l3497:
 16055                           
 16056                           ;menu.c: 206: }
 16057                           ;menu.c: 207: }
 16058                           ;menu.c: 208: }
 16059                           ;menu.c: 209: }
 16060                           ;menu.c: 211: if(inputPotsArray[array_index].controller_resolution == 1){
 16061  002668  0100               	movlb	0	; () banked
 16062  00266A  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 16063  00266C  0D03               	mullw	3
 16064  00266E  0E88               	movlw	low _inputPotsArray
 16065  002670  24F3               	addwf	prodl,w,c
 16066  002672  6ED9               	movwf	fsr2l,c
 16067  002674  0E02               	movlw	high _inputPotsArray
 16068  002676  20F4               	addwfc	prodh,w,c
 16069  002678  6EDA               	movwf	fsr2h,c
 16070  00267A  0102               	movlb	2	; () banked
 16071  00267C  A0DF               	btfss	indf2,0,c
 16072  00267E  D094               	goto	l3503
 16073                           
 16074                           ; BSR set to: 2
 16075                           ;menu.c: 213: if(inputPotsArray[array_index].controller_number_two_byte >= 0) {
 16076  002680  0100               	movlb	0	; () banked
 16077  002682  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 16078  002684  0D03               	mullw	3
 16079  002686  0E02               	movlw	2
 16080  002688  26F3               	addwf	prodl,f,c
 16081  00268A  0E00               	movlw	0
 16082  00268C  22F4               	addwfc	prodh,f,c
 16083  00268E  0E88               	movlw	low _inputPotsArray
 16084  002690  24F3               	addwf	prodl,w,c
 16085  002692  6ED9               	movwf	fsr2l,c
 16086  002694  0E02               	movlw	high _inputPotsArray
 16087  002696  20F4               	addwfc	prodh,w,c
 16088  002698  6EDA               	movwf	fsr2h,c
 16089  00269A  0E00               	movlw	0
 16090  00269C  BEDB               	btfsc	plusw2,7,c
 16091  00269E  D02E               	goto	l3499
 16092                           
 16093                           ; BSR set to: 0
 16094                           ;menu.c: 215: int2string(inputPotsArray[array_index].controller_number_two_byte);
 16095  0026A0  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 16096  0026A2  0D03               	mullw	3
 16097  0026A4  0E02               	movlw	2
 16098  0026A6  26F3               	addwf	prodl,f,c
 16099  0026A8  0E00               	movlw	0
 16100  0026AA  22F4               	addwfc	prodh,f,c
 16101  0026AC  0E88               	movlw	low _inputPotsArray
 16102  0026AE  24F3               	addwf	prodl,w,c
 16103  0026B0  6ED9               	movwf	fsr2l,c
 16104  0026B2  0E02               	movlw	high _inputPotsArray
 16105  0026B4  20F4               	addwfc	prodh,w,c
 16106  0026B6  6EDA               	movwf	fsr2h,c
 16107  0026B8  50DF               	movf	indf2,w,c
 16108  0026BA  6F60               	movwf	int2string@number& (0+255),b
 16109  0026BC  6B61               	clrf	(int2string@number+1)& (0+255),b
 16110  0026BE  BF60               	btfsc	int2string@number& (0+255),7,b
 16111  0026C0  0761               	decf	(int2string@number+1)& (0+255),f,b
 16112  0026C2  EC08  F03B         	call	_int2string	;wreg free
 16113                           
 16114                           ;menu.c: 217: Lcd_Set_Cursor(2,7);
 16115  0026C6  0E07               	movlw	7
 16116  0026C8  0100               	movlb	0	; () banked
 16117  0026CA  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16118  0026CC  0E02               	movlw	2
 16119  0026CE  ECDD  F047         	call	_Lcd_Set_Cursor
 16120                           
 16121                           ;menu.c: 218: Lcd_Print_String("         ");
 16122  0026D2  0E6B               	movlw	low (STR_10+7)
 16123  0026D4  0100               	movlb	0	; () banked
 16124  0026D6  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16125  0026D8  0EFD               	movlw	high (STR_10+7)
 16126  0026DA  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16127  0026DC  EC74  F042         	call	_Lcd_Print_String	;wreg free
 16128                           
 16129                           ;menu.c: 219: Lcd_Set_Cursor(2,13);
 16130  0026E0  0E0D               	movlw	13
 16131  0026E2  0100               	movlb	0	; () banked
 16132  0026E4  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16133  0026E6  0E02               	movlw	2
 16134  0026E8  ECDD  F047         	call	_Lcd_Set_Cursor
 16135                           
 16136                           ;menu.c: 220: Lcd_Print_String(string2display);
 16137  0026EC  0E92               	movlw	low _string2display
 16138  0026EE  0100               	movlb	0	; () banked
 16139  0026F0  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16140  0026F2  0E01               	movlw	high _string2display
 16141  0026F4  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16142  0026F6  EC74  F042         	call	_Lcd_Print_String	;wreg free
 16143                           
 16144                           ;menu.c: 221: }
 16145  0026FA  D056               	goto	l3503
 16146  0026FC                     l3499:
 16147                           
 16148                           ;menu.c: 222: else {
 16149                           ;menu.c: 223: if(inputPotsArray[array_index].controller_number_two_byte == -1) {
 16150  0026FC  0100               	movlb	0	; () banked
 16151  0026FE  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 16152  002700  0D03               	mullw	3
 16153  002702  0E02               	movlw	2
 16154  002704  26F3               	addwf	prodl,f,c
 16155  002706  0E00               	movlw	0
 16156  002708  22F4               	addwfc	prodh,f,c
 16157  00270A  0E88               	movlw	low _inputPotsArray
 16158  00270C  24F3               	addwf	prodl,w,c
 16159  00270E  6ED9               	movwf	fsr2l,c
 16160  002710  0E02               	movlw	high _inputPotsArray
 16161  002712  20F4               	addwfc	prodh,w,c
 16162  002714  6EDA               	movwf	fsr2h,c
 16163  002716  28DE               	incf	postinc2,w,c
 16164  002718  A4D8               	btfss	status,2,c
 16165  00271A  D00C               	goto	l3501
 16166                           
 16167                           ; BSR set to: 0
 16168                           ;menu.c: 224: Lcd_Set_Cursor(2,7);
 16169  00271C  0E07               	movlw	7
 16170  00271E  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16171  002720  0E02               	movlw	2
 16172  002722  ECDD  F047         	call	_Lcd_Set_Cursor
 16173                           
 16174                           ;menu.c: 225: Lcd_Print_String("  VELOCITY");
 16175  002726  0E9E               	movlw	low STR_13
 16176  002728  0100               	movlb	0	; () banked
 16177  00272A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16178  00272C  0EFF               	movlw	high STR_13
 16179  00272E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16180  002730  EC74  F042         	call	_Lcd_Print_String	;wreg free
 16181  002734                     l3501:
 16182                           
 16183                           ;menu.c: 226: }
 16184                           ;menu.c: 228: if(inputPotsArray[array_index].controller_number_two_byte == -2) {
 16185  002734  0100               	movlb	0	; () banked
 16186  002736  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 16187  002738  0D03               	mullw	3
 16188  00273A  0E02               	movlw	2
 16189  00273C  26F3               	addwf	prodl,f,c
 16190  00273E  0E00               	movlw	0
 16191  002740  22F4               	addwfc	prodh,f,c
 16192  002742  0E88               	movlw	low _inputPotsArray
 16193  002744  24F3               	addwf	prodl,w,c
 16194  002746  6ED9               	movwf	fsr2l,c
 16195  002748  0E02               	movlw	high _inputPotsArray
 16196  00274A  20F4               	addwfc	prodh,w,c
 16197  00274C  6EDA               	movwf	fsr2h,c
 16198  00274E  0EFE               	movlw	254
 16199  002750  18DE               	xorwf	postinc2,w,c
 16200  002752  A4D8               	btfss	status,2,c
 16201  002754  D00C               	goto	l3502
 16202                           
 16203                           ; BSR set to: 0
 16204                           ;menu.c: 229: Lcd_Set_Cursor(2,7);
 16205  002756  0E07               	movlw	7
 16206  002758  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16207  00275A  0E02               	movlw	2
 16208  00275C  ECDD  F047         	call	_Lcd_Set_Cursor
 16209                           
 16210                           ;menu.c: 230: Lcd_Print_String(" PITCHBEND");
 16211  002760  0E88               	movlw	low STR_14
 16212  002762  0100               	movlb	0	; () banked
 16213  002764  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16214  002766  0EFF               	movlw	high STR_14
 16215  002768  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16216  00276A  EC74  F042         	call	_Lcd_Print_String	;wreg free
 16217  00276E                     l3502:
 16218                           
 16219                           ;menu.c: 231: }
 16220                           ;menu.c: 232: if(inputPotsArray[array_index].controller_number_two_byte == -3) {
 16221  00276E  0100               	movlb	0	; () banked
 16222  002770  516F               	movf	setControllerNumbers@array_index& (0+255),w,b
 16223  002772  0D03               	mullw	3
 16224  002774  0E02               	movlw	2
 16225  002776  26F3               	addwf	prodl,f,c
 16226  002778  0E00               	movlw	0
 16227  00277A  22F4               	addwfc	prodh,f,c
 16228  00277C  0E88               	movlw	low _inputPotsArray
 16229  00277E  24F3               	addwf	prodl,w,c
 16230  002780  6ED9               	movwf	fsr2l,c
 16231  002782  0E02               	movlw	high _inputPotsArray
 16232  002784  20F4               	addwfc	prodh,w,c
 16233  002786  6EDA               	movwf	fsr2h,c
 16234  002788  0EFD               	movlw	253
 16235  00278A  18DE               	xorwf	postinc2,w,c
 16236  00278C  A4D8               	btfss	status,2,c
 16237  00278E  D00C               	goto	l3503
 16238                           
 16239                           ; BSR set to: 0
 16240                           ;menu.c: 233: Lcd_Set_Cursor(2,7);
 16241  002790  0E07               	movlw	7
 16242  002792  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16243  002794  0E02               	movlw	2
 16244  002796  ECDD  F047         	call	_Lcd_Set_Cursor
 16245                           
 16246                           ;menu.c: 234: Lcd_Print_String(" MOD.WHEEL");
 16247  00279A  0E93               	movlw	low STR_15
 16248  00279C  0100               	movlb	0	; () banked
 16249  00279E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16250  0027A0  0EFF               	movlw	high STR_15
 16251  0027A2  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16252  0027A4  EC74  F042         	call	_Lcd_Print_String	;wreg free
 16253  0027A8                     l3503:
 16254  0027A8  B205               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 16255  0027AA  0012               	return	
 16256  0027AC  D58C               	goto	l3476
 16257  0027AE                     __end_of_setControllerNumbers:
 16258                           	opt stack 0
 16259                           tblptru	equ	0xFF8
 16260                           tblptrh	equ	0xFF7
 16261                           tblptrl	equ	0xFF6
 16262                           tablat	equ	0xFF5
 16263                           prodh	equ	0xFF4
 16264                           prodl	equ	0xFF3
 16265                           intcon	equ	0xFF2
 16266                           intcon2	equ	0xFF1
 16267                           postinc0	equ	0xFEE
 16268                           wreg	equ	0xFE8
 16269                           postinc1	equ	0xFE6
 16270                           indf2	equ	0xFDF
 16271                           postinc2	equ	0xFDE
 16272                           postdec2	equ	0xFDD
 16273                           plusw2	equ	0xFDB
 16274                           fsr2h	equ	0xFDA
 16275                           fsr2l	equ	0xFD9
 16276                           status	equ	0xFD8
 16277                           
 16278 ;; *************** function _Function_D_2 *****************
 16279 ;; Defined at:
 16280 ;;		line 811 in file "menu.c"
 16281 ;; Parameters:    Size  Location     Type
 16282 ;;		None
 16283 ;; Auto vars:     Size  Location     Type
 16284 ;;		None
 16285 ;; Return value:  Size  Location     Type
 16286 ;;                  1    wreg      void 
 16287 ;; Registers used:
 16288 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16289 ;; Tracked objects:
 16290 ;;		On entry : 0/0
 16291 ;;		On exit  : 0/0
 16292 ;;		Unchanged: 0/0
 16293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16297 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16298 ;;Total ram usage:        0 bytes
 16299 ;; Hardware stack levels used:    1
 16300 ;; Hardware stack levels required when called:   16
 16301 ;; This function calls:
 16302 ;;		_Busy_eep
 16303 ;;		_Lcd_Print_String
 16304 ;;		_Lcd_Set_Cursor
 16305 ;;		_Write_b_eep
 16306 ;;		_calculate_alpha
 16307 ;;		_int2string
 16308 ;;		_un_block_code
 16309 ;; This function is called by:
 16310 ;;		_Function_D
 16311 ;; This function uses a non-reentrant model
 16312 ;;
 16313                           
 16314                           	psect	text46
 16315  00901C                     __ptext46:
 16316                           	opt stack 0
 16317  00901C                     _Function_D_2:
 16318                           	opt stack 12
 16319                           
 16320                           ;menu.c: 813: which_screen = POTS_ALPHA_MENU;
 16321                           
 16322                           ;incstack = 0
 16323  00901C  0E10               	movlw	16
 16324  00901E  6E4F               	movwf	_which_screen,c
 16325                           
 16326                           ;menu.c: 814: lcd_print_once = 0;
 16327  009020  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 16328                           
 16329                           ;menu.c: 815: encoder_click = 0;
 16330  009022  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 16331                           
 16332                           ;menu.c: 817: potsAlphaMenu.selector = ema_integer;
 16333  009024  C0FE  F155         	movff	_ema_integer,_potsAlphaMenu+2
 16334                           
 16335                           ;menu.c: 819: while(encoder_click == 0) {
 16336  009028  D016               	goto	l3663
 16337  00902A                     
 16338                           ;menu.c: 823: un_block_code();
 16339  00902A  ECAB  F04C         	call	_un_block_code	;wreg free
 16340                           
 16341                           ;menu.c: 825: lcd_print_once = 1;
 16342  00902E  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 16343                           
 16344                           ;menu.c: 827: int2string(potsAlphaMenu.selector);
 16345  009030  C155  F060         	movff	_potsAlphaMenu+2,int2string@number
 16346  009034  0100               	movlb	0	; () banked
 16347  009036  6B61               	clrf	(int2string@number+1)& (0+255),b
 16348  009038  EC08  F03B         	call	_int2string	;wreg free
 16349                           
 16350                           ;menu.c: 828: Lcd_Set_Cursor(2,13);
 16351  00903C  0E0D               	movlw	13
 16352  00903E  0100               	movlb	0	; () banked
 16353  009040  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16354  009042  0E02               	movlw	2
 16355  009044  ECDD  F047         	call	_Lcd_Set_Cursor
 16356                           
 16357                           ;menu.c: 829: Lcd_Print_String(string2display);
 16358  009048  0E92               	movlw	low _string2display
 16359  00904A  0100               	movlb	0	; () banked
 16360  00904C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16361  00904E  0E01               	movlw	high _string2display
 16362  009050  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16363  009052  EC74  F042         	call	_Lcd_Print_String	;wreg free
 16364  009056                     l3663:
 16365  009056  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 16366  009058  D7E8               	goto	l3664
 16367                           
 16368                           ;menu.c: 830: }
 16369                           ;menu.c: 832: ema_integer = potsAlphaMenu.selector;
 16370  00905A  C155  F0FE         	movff	_potsAlphaMenu+2,_ema_integer
 16371                           
 16372                           ;menu.c: 833: (Busy_eep(), Write_b_eep(0x03,ema_integer));
 16373  00905E  ECFA  F04C         	call	_Busy_eep	;wreg free
 16374  009062  0E00               	movlw	0
 16375  009064  0100               	movlb	0	; () banked
 16376  009066  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 16377  009068  0E03               	movlw	3
 16378  00906A  6F60               	movwf	Write_b_eep@badd& (0+255),b
 16379  00906C  C0FE  F062         	movff	_ema_integer,Write_b_eep@bdat
 16380  009070  EC6C  F04A         	call	_Write_b_eep	;wreg free
 16381                           
 16382                           ;menu.c: 834: calculate_alpha();
 16383  009074  EC92  F049         	call	_calculate_alpha	;wreg free
 16384  009078  0012               	return		;funcret
 16385  00907A                     __end_of_Function_D_2:
 16386                           	opt stack 0
 16387                           tblptru	equ	0xFF8
 16388                           tblptrh	equ	0xFF7
 16389                           tblptrl	equ	0xFF6
 16390                           tablat	equ	0xFF5
 16391                           prodh	equ	0xFF4
 16392                           prodl	equ	0xFF3
 16393                           intcon	equ	0xFF2
 16394                           intcon2	equ	0xFF1
 16395                           postinc0	equ	0xFEE
 16396                           wreg	equ	0xFE8
 16397                           postinc1	equ	0xFE6
 16398                           indf2	equ	0xFDF
 16399                           postinc2	equ	0xFDE
 16400                           postdec2	equ	0xFDD
 16401                           plusw2	equ	0xFDB
 16402                           fsr2h	equ	0xFDA
 16403                           fsr2l	equ	0xFD9
 16404                           status	equ	0xFD8
 16405                           
 16406 ;; *************** function _calculate_alpha *****************
 16407 ;; Defined at:
 16408 ;;		line 24 in file "potentiometers.c"
 16409 ;; Parameters:    Size  Location     Type
 16410 ;;		None
 16411 ;; Auto vars:     Size  Location     Type
 16412 ;;		None
 16413 ;; Return value:  Size  Location     Type
 16414 ;;                  1    wreg      void 
 16415 ;; Registers used:
 16416 ;;		wreg, status,2, status,0, cstack
 16417 ;; Tracked objects:
 16418 ;;		On entry : 0/0
 16419 ;;		On exit  : 0/0
 16420 ;;		Unchanged: 0/0
 16421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16426 ;;Total ram usage:        0 bytes
 16427 ;; Hardware stack levels used:    1
 16428 ;; Hardware stack levels required when called:    6
 16429 ;; This function calls:
 16430 ;;		___fldiv
 16431 ;;		___xxtofl
 16432 ;; This function is called by:
 16433 ;;		_Function_D_2
 16434 ;;		_main
 16435 ;; This function uses a non-reentrant model
 16436 ;;
 16437                           
 16438                           	psect	text47
 16439  009324                     __ptext47:
 16440                           	opt stack 0
 16441  009324                     _calculate_alpha:
 16442                           	opt stack 21
 16443                           
 16444                           ;potentiometers.c: 25: (float)ema_alpha = (ema_integer / 100.0);
 16445                           
 16446                           ;incstack = 0
 16447  009324  0100               	movlb	0	; () banked
 16448  009326  51FE               	movf	_ema_integer& (0+255),w,b
 16449  009328  6F60               	movwf	___xxtofl@val& (0+255),b
 16450  00932A  6B61               	clrf	(___xxtofl@val+1)& (0+255),b
 16451  00932C  6B62               	clrf	(___xxtofl@val+2)& (0+255),b
 16452  00932E  6B63               	clrf	(___xxtofl@val+3)& (0+255),b
 16453  009330  0E00               	movlw	0
 16454  009332  ECF2  F02F         	call	___xxtofl
 16455  009336  C060  F087         	movff	?___xxtofl,___fldiv@b
 16456  00933A  C061  F088         	movff	?___xxtofl+1,___fldiv@b+1
 16457  00933E  C062  F089         	movff	?___xxtofl+2,___fldiv@b+2
 16458  009342  C063  F08A         	movff	?___xxtofl+3,___fldiv@b+3
 16459  009346  0E00               	movlw	0
 16460  009348  0100               	movlb	0	; () banked
 16461  00934A  6F8B               	movwf	___fldiv@a& (0+255),b
 16462  00934C  0E00               	movlw	0
 16463  00934E  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 16464  009350  0EC8               	movlw	200
 16465  009352  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 16466  009354  0E42               	movlw	66
 16467  009356  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 16468  009358  EC1D  F01E         	call	___fldiv	;wreg free
 16469  00935C  C087  F104         	movff	?___fldiv,_ema_alpha
 16470  009360  C088  F105         	movff	?___fldiv+1,_ema_alpha+1
 16471  009364  C089  F106         	movff	?___fldiv+2,_ema_alpha+2
 16472  009368  C08A  F107         	movff	?___fldiv+3,_ema_alpha+3
 16473  00936C  0012               	return		;funcret
 16474  00936E                     __end_of_calculate_alpha:
 16475                           	opt stack 0
 16476                           tblptru	equ	0xFF8
 16477                           tblptrh	equ	0xFF7
 16478                           tblptrl	equ	0xFF6
 16479                           tablat	equ	0xFF5
 16480                           prodh	equ	0xFF4
 16481                           prodl	equ	0xFF3
 16482                           intcon	equ	0xFF2
 16483                           intcon2	equ	0xFF1
 16484                           postinc0	equ	0xFEE
 16485                           wreg	equ	0xFE8
 16486                           postinc1	equ	0xFE6
 16487                           indf2	equ	0xFDF
 16488                           postinc2	equ	0xFDE
 16489                           postdec2	equ	0xFDD
 16490                           plusw2	equ	0xFDB
 16491                           fsr2h	equ	0xFDA
 16492                           fsr2l	equ	0xFD9
 16493                           status	equ	0xFD8
 16494                           
 16495 ;; *************** function ___fldiv *****************
 16496 ;; Defined at:
 16497 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcdiv.c"
 16498 ;; Parameters:    Size  Location     Type
 16499 ;;  b               4   39[BANK0 ] void 
 16500 ;;  a               4   43[BANK0 ] void 
 16501 ;; Auto vars:     Size  Location     Type
 16502 ;;  grs             4   58[BANK0 ] unsigned long 
 16503 ;;  rem             4   52[BANK0 ] unsigned long 
 16504 ;;  new_exp         2   56[BANK0 ] int 
 16505 ;;  aexp            1   63[BANK0 ] unsigned char 
 16506 ;;  bexp            1   62[BANK0 ] unsigned char 
 16507 ;;  sign            1   51[BANK0 ] unsigned char 
 16508 ;; Return value:  Size  Location     Type
 16509 ;;                  4   39[BANK0 ] unsigned char 
 16510 ;; Registers used:
 16511 ;;		wreg, status,2, status,0
 16512 ;; Tracked objects:
 16513 ;;		On entry : 0/0
 16514 ;;		On exit  : 0/0
 16515 ;;		Unchanged: 0/0
 16516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16517 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16518 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16519 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16520 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16521 ;;Total ram usage:       25 bytes
 16522 ;; Hardware stack levels used:    1
 16523 ;; Hardware stack levels required when called:    5
 16524 ;; This function calls:
 16525 ;;		Nothing
 16526 ;; This function is called by:
 16527 ;;		_calculate_alpha
 16528 ;;		_calculate_pulse_length
 16529 ;; This function uses a non-reentrant model
 16530 ;;
 16531                           
 16532                           	psect	text48
 16533  003C3A                     __ptext48:
 16534                           	opt stack 0
 16535  003C3A                     ___fldiv:
 16536                           	opt stack 22
 16537                           
 16538                           ;incstack = 0
 16539  003C3A  0100               	movlb	0	; () banked
 16540  003C3C  518A               	movf	(___fldiv@b+3)& (0+255),w,b
 16541  003C3E  0B80               	andlw	128
 16542  003C40  6F93               	movwf	___fldiv@sign& (0+255),b
 16543  003C42  518A               	movf	(___fldiv@b+3)& (0+255),w,b
 16544  003C44  258A               	addwf	(___fldiv@b+3)& (0+255),w,b
 16545  003C46  6F9E               	movwf	___fldiv@bexp& (0+255),b
 16546                           
 16547                           ; BSR set to: 0
 16548  003C48  BF89               	btfsc	(___fldiv@b+2)& (0+255),7,b
 16549                           
 16550                           ; BSR set to: 0
 16551  003C4A  819E               	bsf	___fldiv@bexp& (0+255),0,b
 16552                           
 16553                           ; BSR set to: 0
 16554                           
 16555                           ; BSR set to: 0
 16556  003C4C  519E               	movf	___fldiv@bexp& (0+255),w,b
 16557  003C4E  B4D8               	btfsc	status,2,c
 16558  003C50  D00D               	goto	l6135
 16559                           
 16560                           ; BSR set to: 0
 16561  003C52  299E               	incf	___fldiv@bexp& (0+255),w,b
 16562  003C54  A4D8               	btfss	status,2,c
 16563  003C56  D008               	goto	l6136
 16564                           
 16565                           ; BSR set to: 0
 16566  003C58  0E00               	movlw	0
 16567  003C5A  6F87               	movwf	___fldiv@b& (0+255),b
 16568  003C5C  0E00               	movlw	0
 16569  003C5E  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16570  003C60  0E00               	movlw	0
 16571  003C62  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16572  003C64  0E00               	movlw	0
 16573  003C66  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16574  003C68                     l6136:
 16575                           
 16576                           ; BSR set to: 0
 16577                           
 16578                           ; BSR set to: 0
 16579  003C68  8F89               	bsf	(___fldiv@b+2)& (0+255),7,b
 16580  003C6A  D006               	goto	L2
 16581  003C6C                     l6135:
 16582                           
 16583                           ; BSR set to: 0
 16584                           
 16585                           ; BSR set to: 0
 16586  003C6C  0E00               	movlw	0
 16587  003C6E  6F87               	movwf	___fldiv@b& (0+255),b
 16588  003C70  0E00               	movlw	0
 16589  003C72  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16590  003C74  0E00               	movlw	0
 16591  003C76  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16592  003C78                     L2:
 16593  003C78  0E00               	movlw	0
 16594  003C7A  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16595                           
 16596                           ; BSR set to: 0
 16597                           
 16598                           ; BSR set to: 0
 16599  003C7C  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 16600  003C7E  0B80               	andlw	128
 16601  003C80  1B93               	xorwf	___fldiv@sign& (0+255),f,b
 16602                           
 16603                           ; BSR set to: 0
 16604  003C82  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 16605  003C84  258E               	addwf	(___fldiv@a+3)& (0+255),w,b
 16606  003C86  6F9F               	movwf	___fldiv@aexp& (0+255),b
 16607                           
 16608                           ; BSR set to: 0
 16609  003C88  BF8D               	btfsc	(___fldiv@a+2)& (0+255),7,b
 16610                           
 16611                           ; BSR set to: 0
 16612  003C8A  819F               	bsf	___fldiv@aexp& (0+255),0,b
 16613                           
 16614                           ; BSR set to: 0
 16615                           
 16616                           ; BSR set to: 0
 16617  003C8C  519F               	movf	___fldiv@aexp& (0+255),w,b
 16618  003C8E  B4D8               	btfsc	status,2,c
 16619  003C90  D00D               	goto	l6139
 16620                           
 16621                           ; BSR set to: 0
 16622  003C92  299F               	incf	___fldiv@aexp& (0+255),w,b
 16623  003C94  A4D8               	btfss	status,2,c
 16624  003C96  D008               	goto	l6140
 16625                           
 16626                           ; BSR set to: 0
 16627  003C98  0E00               	movlw	0
 16628  003C9A  6F8B               	movwf	___fldiv@a& (0+255),b
 16629  003C9C  0E00               	movlw	0
 16630  003C9E  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 16631  003CA0  0E00               	movlw	0
 16632  003CA2  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 16633  003CA4  0E00               	movlw	0
 16634  003CA6  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 16635  003CA8                     l6140:
 16636                           
 16637                           ; BSR set to: 0
 16638                           
 16639                           ; BSR set to: 0
 16640  003CA8  8F8D               	bsf	(___fldiv@a+2)& (0+255),7,b
 16641  003CAA  D006               	goto	L3
 16642  003CAC                     l6139:
 16643                           
 16644                           ; BSR set to: 0
 16645                           
 16646                           ; BSR set to: 0
 16647  003CAC  0E00               	movlw	0
 16648  003CAE  6F8B               	movwf	___fldiv@a& (0+255),b
 16649  003CB0  0E00               	movlw	0
 16650  003CB2  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 16651  003CB4  0E00               	movlw	0
 16652  003CB6  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 16653  003CB8                     L3:
 16654  003CB8  0E00               	movlw	0
 16655  003CBA  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 16656                           
 16657                           ; BSR set to: 0
 16658                           
 16659                           ; BSR set to: 0
 16660  003CBC  518B               	movf	___fldiv@a& (0+255),w,b
 16661  003CBE  118C               	iorwf	(___fldiv@a+1)& (0+255),w,b
 16662  003CC0  118D               	iorwf	(___fldiv@a+2)& (0+255),w,b
 16663  003CC2  118E               	iorwf	(___fldiv@a+3)& (0+255),w,b
 16664  003CC4  A4D8               	btfss	status,2,c
 16665  003CC6  D015               	goto	l6142
 16666                           
 16667                           ; BSR set to: 0
 16668  003CC8  0E00               	movlw	0
 16669  003CCA  6F87               	movwf	___fldiv@b& (0+255),b
 16670  003CCC  0E00               	movlw	0
 16671  003CCE  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16672  003CD0  0E00               	movlw	0
 16673  003CD2  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16674  003CD4  0E00               	movlw	0
 16675  003CD6  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16676                           
 16677                           ; BSR set to: 0
 16678  003CD8  0E80               	movlw	128
 16679  003CDA  1389               	iorwf	(___fldiv@b+2)& (0+255),f,b
 16680  003CDC  0E7F               	movlw	127
 16681  003CDE  138A               	iorwf	(___fldiv@b+3)& (0+255),f,b
 16682                           
 16683                           ; BSR set to: 0
 16684  003CE0  C087  F087         	movff	___fldiv@b,?___fldiv
 16685  003CE4  C088  F088         	movff	___fldiv@b+1,?___fldiv+1
 16686  003CE8  C089  F089         	movff	___fldiv@b+2,?___fldiv+2
 16687  003CEC  C08A  F08A         	movff	___fldiv@b+3,?___fldiv+3
 16688                           
 16689                           ; BSR set to: 0
 16690  003CF0  0012               	return	
 16691  003CF2                     l6142:
 16692                           
 16693                           ; BSR set to: 0
 16694                           
 16695                           ; BSR set to: 0
 16696  003CF2  519E               	movf	___fldiv@bexp& (0+255),w,b
 16697  003CF4  A4D8               	btfss	status,2,c
 16698  003CF6  D011               	goto	l6144
 16699                           
 16700                           ; BSR set to: 0
 16701  003CF8  0E00               	movlw	0
 16702  003CFA  6F87               	movwf	___fldiv@b& (0+255),b
 16703  003CFC  0E00               	movlw	0
 16704  003CFE  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16705  003D00  0E00               	movlw	0
 16706  003D02  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16707  003D04  0E00               	movlw	0
 16708  003D06  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16709                           
 16710                           ; BSR set to: 0
 16711  003D08  C087  F087         	movff	___fldiv@b,?___fldiv
 16712  003D0C  C088  F088         	movff	___fldiv@b+1,?___fldiv+1
 16713  003D10  C089  F089         	movff	___fldiv@b+2,?___fldiv+2
 16714  003D14  C08A  F08A         	movff	___fldiv@b+3,?___fldiv+3
 16715                           
 16716                           ; BSR set to: 0
 16717  003D18  0012               	return	
 16718  003D1A                     l6144:
 16719                           
 16720                           ; BSR set to: 0
 16721                           
 16722                           ; BSR set to: 0
 16723  003D1A  519F               	movf	___fldiv@aexp& (0+255),w,b
 16724  003D1C  6F8F               	movwf	??___fldiv& (0+255),b
 16725  003D1E  6B90               	clrf	(??___fldiv+1)& (0+255),b
 16726  003D20  1F8F               	comf	??___fldiv& (0+255),f,b
 16727  003D22  1F90               	comf	(??___fldiv+1)& (0+255),f,b
 16728  003D24  4B8F               	infsnz	??___fldiv& (0+255),f,b
 16729  003D26  2B90               	incf	(??___fldiv+1)& (0+255),f,b
 16730  003D28  519E               	movf	___fldiv@bexp& (0+255),w,b
 16731  003D2A  6F91               	movwf	(??___fldiv+2)& (0+255),b
 16732  003D2C  6B92               	clrf	(??___fldiv+3)& (0+255),b
 16733  003D2E  518F               	movf	??___fldiv& (0+255),w,b
 16734  003D30  2791               	addwf	(??___fldiv+2)& (0+255),f,b
 16735  003D32  5190               	movf	(??___fldiv+1)& (0+255),w,b
 16736  003D34  2392               	addwfc	(??___fldiv+3)& (0+255),f,b
 16737  003D36  0E7F               	movlw	127
 16738  003D38  2591               	addwf	(??___fldiv+2)& (0+255),w,b
 16739  003D3A  6F98               	movwf	___fldiv@new_exp& (0+255),b
 16740  003D3C  0E00               	movlw	0
 16741  003D3E  2192               	addwfc	(??___fldiv+3)& (0+255),w,b
 16742  003D40  6F99               	movwf	(___fldiv@new_exp+1)& (0+255),b
 16743                           
 16744                           ; BSR set to: 0
 16745  003D42  C087  F094         	movff	___fldiv@b,___fldiv@rem
 16746  003D46  C088  F095         	movff	___fldiv@b+1,___fldiv@rem+1
 16747  003D4A  C089  F096         	movff	___fldiv@b+2,___fldiv@rem+2
 16748  003D4E  C08A  F097         	movff	___fldiv@b+3,___fldiv@rem+3
 16749                           
 16750                           ; BSR set to: 0
 16751  003D52  0E00               	movlw	0
 16752  003D54  6F87               	movwf	___fldiv@b& (0+255),b
 16753  003D56  0E00               	movlw	0
 16754  003D58  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16755  003D5A  0E00               	movlw	0
 16756  003D5C  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16757  003D5E  0E00               	movlw	0
 16758  003D60  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16759                           
 16760                           ; BSR set to: 0
 16761  003D62  0E00               	movlw	0
 16762  003D64  6F9A               	movwf	___fldiv@grs& (0+255),b
 16763  003D66  0E00               	movlw	0
 16764  003D68  6F9B               	movwf	(___fldiv@grs+1)& (0+255),b
 16765  003D6A  0E00               	movlw	0
 16766  003D6C  6F9C               	movwf	(___fldiv@grs+2)& (0+255),b
 16767  003D6E  0E00               	movlw	0
 16768  003D70  6F9D               	movwf	(___fldiv@grs+3)& (0+255),b
 16769                           
 16770                           ; BSR set to: 0
 16771  003D72  0E00               	movlw	0
 16772  003D74  6F9F               	movwf	___fldiv@aexp& (0+255),b
 16773  003D76  D028               	goto	l6145
 16774  003D78                     
 16775                           ; BSR set to: 0
 16776                           
 16777                           ; BSR set to: 0
 16778  003D78  519F               	movf	___fldiv@aexp& (0+255),w,b
 16779  003D7A  B4D8               	btfsc	status,2,c
 16780  003D7C  D011               	goto	l6147
 16781                           
 16782                           ; BSR set to: 0
 16783  003D7E  90D8               	bcf	status,0,c
 16784  003D80  3794               	rlcf	___fldiv@rem& (0+255),f,b
 16785  003D82  3795               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 16786  003D84  3796               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 16787  003D86  3797               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 16788  003D88  90D8               	bcf	status,0,c
 16789  003D8A  3787               	rlcf	___fldiv@b& (0+255),f,b
 16790  003D8C  3788               	rlcf	(___fldiv@b+1)& (0+255),f,b
 16791  003D8E  3789               	rlcf	(___fldiv@b+2)& (0+255),f,b
 16792  003D90  378A               	rlcf	(___fldiv@b+3)& (0+255),f,b
 16793                           
 16794                           ; BSR set to: 0
 16795  003D92  BF9D               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 16796                           
 16797                           ; BSR set to: 0
 16798  003D94  8187               	bsf	___fldiv@b& (0+255),0,b
 16799                           
 16800                           ; BSR set to: 0
 16801  003D96  90D8               	bcf	status,0,c
 16802  003D98  379A               	rlcf	___fldiv@grs& (0+255),f,b
 16803  003D9A  379B               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 16804  003D9C  379C               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 16805  003D9E  379D               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 16806  003DA0                     l6147:
 16807                           
 16808                           ; BSR set to: 0
 16809                           
 16810                           ; BSR set to: 0
 16811  003DA0  518B               	movf	___fldiv@a& (0+255),w,b
 16812  003DA2  5D94               	subwf	___fldiv@rem& (0+255),w,b
 16813  003DA4  518C               	movf	(___fldiv@a+1)& (0+255),w,b
 16814  003DA6  5995               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 16815  003DA8  518D               	movf	(___fldiv@a+2)& (0+255),w,b
 16816  003DAA  5996               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 16817  003DAC  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 16818  003DAE  5997               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 16819  003DB0  A0D8               	btfss	status,0,c
 16820  003DB2  D009               	goto	l6149
 16821                           
 16822                           ; BSR set to: 0
 16823  003DB4  8D9D               	bsf	(___fldiv@grs+3)& (0+255),6,b
 16824                           
 16825                           ; BSR set to: 0
 16826  003DB6  518B               	movf	___fldiv@a& (0+255),w,b
 16827  003DB8  5F94               	subwf	___fldiv@rem& (0+255),f,b
 16828  003DBA  518C               	movf	(___fldiv@a+1)& (0+255),w,b
 16829  003DBC  5B95               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 16830  003DBE  518D               	movf	(___fldiv@a+2)& (0+255),w,b
 16831  003DC0  5B96               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 16832  003DC2  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 16833  003DC4  5B97               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 16834  003DC6                     l6149:
 16835                           
 16836                           ; BSR set to: 0
 16837                           
 16838                           ; BSR set to: 0
 16839  003DC6  2B9F               	incf	___fldiv@aexp& (0+255),f,b
 16840  003DC8                     l6145:
 16841                           
 16842                           ; BSR set to: 0
 16843  003DC8  0E19               	movlw	25
 16844  003DCA  659F               	cpfsgt	___fldiv@aexp& (0+255),b
 16845  003DCC  D7D5               	goto	l6146
 16846                           
 16847                           ; BSR set to: 0
 16848                           
 16849                           ; BSR set to: 0
 16850  003DCE  5194               	movf	___fldiv@rem& (0+255),w,b
 16851  003DD0  1195               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 16852  003DD2  1196               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 16853  003DD4  1197               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 16854  003DD6  B4D8               	btfsc	status,2,c
 16855  003DD8  D011               	goto	l6152
 16856                           
 16857                           ; BSR set to: 0
 16858  003DDA  819A               	bsf	___fldiv@grs& (0+255),0,b
 16859                           
 16860                           ; BSR set to: 0
 16861  003DDC  D00F               	goto	l6152
 16862  003DDE                     
 16863                           ; BSR set to: 0
 16864                           
 16865                           ; BSR set to: 0
 16866  003DDE  90D8               	bcf	status,0,c
 16867  003DE0  3787               	rlcf	___fldiv@b& (0+255),f,b
 16868  003DE2  3788               	rlcf	(___fldiv@b+1)& (0+255),f,b
 16869  003DE4  3789               	rlcf	(___fldiv@b+2)& (0+255),f,b
 16870  003DE6  378A               	rlcf	(___fldiv@b+3)& (0+255),f,b
 16871                           
 16872                           ; BSR set to: 0
 16873  003DE8  BF9D               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 16874                           
 16875                           ; BSR set to: 0
 16876  003DEA  8187               	bsf	___fldiv@b& (0+255),0,b
 16877                           
 16878                           ; BSR set to: 0
 16879  003DEC  90D8               	bcf	status,0,c
 16880  003DEE  379A               	rlcf	___fldiv@grs& (0+255),f,b
 16881  003DF0  379B               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 16882  003DF2  379C               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 16883  003DF4  379D               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 16884  003DF6  0798               	decf	___fldiv@new_exp& (0+255),f,b
 16885  003DF8  A0D8               	btfss	status,0,c
 16886  003DFA  0799               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 16887  003DFC                     l6152:
 16888                           
 16889                           ; BSR set to: 0
 16890                           
 16891                           ; BSR set to: 0
 16892  003DFC  AF89               	btfss	(___fldiv@b+2)& (0+255),7,b
 16893  003DFE  D7EF               	goto	l6153
 16894                           
 16895                           ; BSR set to: 0
 16896                           
 16897                           ; BSR set to: 0
 16898  003E00  0E00               	movlw	0
 16899  003E02  6F9F               	movwf	___fldiv@aexp& (0+255),b
 16900                           
 16901                           ; BSR set to: 0
 16902  003E04  AF9D               	btfss	(___fldiv@grs+3)& (0+255),7,b
 16903  003E06  D016               	goto	l6159
 16904                           
 16905                           ; BSR set to: 0
 16906  003E08  0EFF               	movlw	255
 16907  003E0A  159A               	andwf	___fldiv@grs& (0+255),w,b
 16908  003E0C  6F8F               	movwf	??___fldiv& (0+255),b
 16909  003E0E  0EFF               	movlw	255
 16910  003E10  159B               	andwf	(___fldiv@grs+1)& (0+255),w,b
 16911  003E12  6F90               	movwf	(??___fldiv+1)& (0+255),b
 16912  003E14  0EFF               	movlw	255
 16913  003E16  159C               	andwf	(___fldiv@grs+2)& (0+255),w,b
 16914  003E18  6F91               	movwf	(??___fldiv+2)& (0+255),b
 16915  003E1A  0E7F               	movlw	127
 16916  003E1C  159D               	andwf	(___fldiv@grs+3)& (0+255),w,b
 16917  003E1E  6F92               	movwf	(??___fldiv+3)& (0+255),b
 16918  003E20  518F               	movf	??___fldiv& (0+255),w,b
 16919  003E22  1190               	iorwf	(??___fldiv+1)& (0+255),w,b
 16920  003E24  1191               	iorwf	(??___fldiv+2)& (0+255),w,b
 16921  003E26  1192               	iorwf	(??___fldiv+3)& (0+255),w,b
 16922  003E28  A4D8               	btfss	status,2,c
 16923  003E2A  D002               	goto	u56590
 16924                           
 16925                           ; BSR set to: 0
 16926                           
 16927                           ; BSR set to: 0
 16928  003E2C  A187               	btfss	___fldiv@b& (0+255),0,b
 16929  003E2E  D002               	goto	l6159
 16930  003E30                     u56590:
 16931                           
 16932                           ; BSR set to: 0
 16933  003E30  0E01               	movlw	1
 16934  003E32  6F9F               	movwf	___fldiv@aexp& (0+255),b
 16935  003E34                     l6159:
 16936                           
 16937                           ; BSR set to: 0
 16938                           
 16939                           ; BSR set to: 0
 16940                           
 16941                           ; BSR set to: 0
 16942  003E34  519F               	movf	___fldiv@aexp& (0+255),w,b
 16943  003E36  B4D8               	btfsc	status,2,c
 16944  003E38  D01F               	goto	l6161
 16945                           
 16946                           ; BSR set to: 0
 16947  003E3A  0E01               	movlw	1
 16948  003E3C  2787               	addwf	___fldiv@b& (0+255),f,b
 16949  003E3E  0E00               	movlw	0
 16950  003E40  2388               	addwfc	(___fldiv@b+1)& (0+255),f,b
 16951  003E42  2389               	addwfc	(___fldiv@b+2)& (0+255),f,b
 16952  003E44  238A               	addwfc	(___fldiv@b+3)& (0+255),f,b
 16953                           
 16954                           ; BSR set to: 0
 16955  003E46  A18A               	btfss	(___fldiv@b+3)& (0+255),0,b
 16956  003E48  D017               	goto	l6161
 16957                           
 16958                           ; BSR set to: 0
 16959  003E4A  C087  F08F         	movff	___fldiv@b,??___fldiv
 16960  003E4E  C088  F090         	movff	___fldiv@b+1,??___fldiv+1
 16961  003E52  C089  F091         	movff	___fldiv@b+2,??___fldiv+2
 16962  003E56  C08A  F092         	movff	___fldiv@b+3,??___fldiv+3
 16963  003E5A  3592               	rlcf	(??___fldiv+3)& (0+255),w,b
 16964  003E5C  3392               	rrcf	(??___fldiv+3)& (0+255),f,b
 16965  003E5E  3391               	rrcf	(??___fldiv+2)& (0+255),f,b
 16966  003E60  3390               	rrcf	(??___fldiv+1)& (0+255),f,b
 16967  003E62  338F               	rrcf	??___fldiv& (0+255),f,b
 16968  003E64  C08F  F087         	movff	??___fldiv,___fldiv@b
 16969  003E68  C090  F088         	movff	??___fldiv+1,___fldiv@b+1
 16970  003E6C  C091  F089         	movff	??___fldiv+2,___fldiv@b+2
 16971  003E70  C092  F08A         	movff	??___fldiv+3,___fldiv@b+3
 16972                           
 16973                           ; BSR set to: 0
 16974  003E74  4B98               	infsnz	___fldiv@new_exp& (0+255),f,b
 16975  003E76  2B99               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 16976  003E78                     l6161:
 16977                           
 16978                           ; BSR set to: 0
 16979                           
 16980                           ; BSR set to: 0
 16981                           
 16982                           ; BSR set to: 0
 16983  003E78  BF99               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 16984  003E7A  D010               	goto	l6162
 16985  003E7C  5199               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 16986  003E7E  E103               	bnz	u56620
 16987  003E80  2998               	incf	___fldiv@new_exp& (0+255),w,b
 16988  003E82  A0D8               	btfss	status,0,c
 16989  003E84  D00B               	goto	l6162
 16990  003E86                     u56620:
 16991                           
 16992                           ; BSR set to: 0
 16993  003E86  0E00               	movlw	0
 16994  003E88  6F99               	movwf	(___fldiv@new_exp+1)& (0+255),b
 16995  003E8A  6998               	setf	___fldiv@new_exp& (0+255),b
 16996  003E8C  0E00               	movlw	0
 16997  003E8E  6F87               	movwf	___fldiv@b& (0+255),b
 16998  003E90  0E00               	movlw	0
 16999  003E92  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 17000  003E94  0E00               	movlw	0
 17001  003E96  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 17002  003E98  0E00               	movlw	0
 17003  003E9A  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 17004  003E9C                     l6162:
 17005                           
 17006                           ; BSR set to: 0
 17007                           
 17008                           ; BSR set to: 0
 17009  003E9C  BF99               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 17010  003E9E  D005               	goto	u56630
 17011  003EA0  5199               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 17012  003EA2  E111               	bnz	l31027
 17013  003EA4  0598               	decf	___fldiv@new_exp& (0+255),w,b
 17014  003EA6  B0D8               	btfsc	status,0,c
 17015  003EA8  D00E               	goto	l6163
 17016  003EAA                     u56630:
 17017                           
 17018                           ; BSR set to: 0
 17019  003EAA  0E00               	movlw	0
 17020  003EAC  6F99               	movwf	(___fldiv@new_exp+1)& (0+255),b
 17021  003EAE  0E00               	movlw	0
 17022  003EB0  6F98               	movwf	___fldiv@new_exp& (0+255),b
 17023  003EB2  0E00               	movlw	0
 17024  003EB4  6F87               	movwf	___fldiv@b& (0+255),b
 17025  003EB6  0E00               	movlw	0
 17026  003EB8  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 17027  003EBA  0E00               	movlw	0
 17028  003EBC  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 17029  003EBE  0E00               	movlw	0
 17030  003EC0  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 17031  003EC2  0E00               	movlw	0
 17032  003EC4  6F93               	movwf	___fldiv@sign& (0+255),b
 17033  003EC6                     l6163:
 17034  003EC6                     l31027:
 17035                           
 17036                           ; BSR set to: 0
 17037  003EC6  C098  F09E         	movff	___fldiv@new_exp,___fldiv@bexp
 17038                           
 17039                           ; BSR set to: 0
 17040  003ECA  A19E               	btfss	___fldiv@bexp& (0+255),0,b
 17041  003ECC  D002               	goto	l6164
 17042                           
 17043                           ; BSR set to: 0
 17044  003ECE  8F89               	bsf	(___fldiv@b+2)& (0+255),7,b
 17045  003ED0  D001               	goto	l6165
 17046  003ED2                     l6164:
 17047                           
 17048                           ; BSR set to: 0
 17049                           
 17050                           ; BSR set to: 0
 17051  003ED2  9F89               	bcf	(___fldiv@b+2)& (0+255),7,b
 17052  003ED4                     l6165:
 17053                           
 17054                           ; BSR set to: 0
 17055                           
 17056                           ; BSR set to: 0
 17057  003ED4  90D8               	bcf	status,0,c
 17058  003ED6  319E               	rrcf	___fldiv@bexp& (0+255),w,b
 17059  003ED8  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 17060                           
 17061                           ; BSR set to: 0
 17062  003EDA  5193               	movf	___fldiv@sign& (0+255),w,b
 17063  003EDC  138A               	iorwf	(___fldiv@b+3)& (0+255),f,b
 17064                           
 17065                           ; BSR set to: 0
 17066  003EDE  C087  F087         	movff	___fldiv@b,?___fldiv
 17067  003EE2  C088  F088         	movff	___fldiv@b+1,?___fldiv+1
 17068  003EE6  C089  F089         	movff	___fldiv@b+2,?___fldiv+2
 17069  003EEA  C08A  F08A         	movff	___fldiv@b+3,?___fldiv+3
 17070  003EEE  0012               	return	
 17071  003EF0                     __end_of___fldiv:
 17072                           	opt stack 0
 17073                           tblptru	equ	0xFF8
 17074                           tblptrh	equ	0xFF7
 17075                           tblptrl	equ	0xFF6
 17076                           tablat	equ	0xFF5
 17077                           prodh	equ	0xFF4
 17078                           prodl	equ	0xFF3
 17079                           intcon	equ	0xFF2
 17080                           intcon2	equ	0xFF1
 17081                           postinc0	equ	0xFEE
 17082                           wreg	equ	0xFE8
 17083                           postinc1	equ	0xFE6
 17084                           indf2	equ	0xFDF
 17085                           postinc2	equ	0xFDE
 17086                           postdec2	equ	0xFDD
 17087                           plusw2	equ	0xFDB
 17088                           fsr2h	equ	0xFDA
 17089                           fsr2l	equ	0xFD9
 17090                           status	equ	0xFD8
 17091                           
 17092 ;; *************** function _Function_D_1 *****************
 17093 ;; Defined at:
 17094 ;;		line 778 in file "menu.c"
 17095 ;; Parameters:    Size  Location     Type
 17096 ;;		None
 17097 ;; Auto vars:     Size  Location     Type
 17098 ;;		None
 17099 ;; Return value:  Size  Location     Type
 17100 ;;                  1    wreg      void 
 17101 ;; Registers used:
 17102 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17103 ;; Tracked objects:
 17104 ;;		On entry : 0/0
 17105 ;;		On exit  : 0/0
 17106 ;;		Unchanged: 0/0
 17107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17112 ;;Total ram usage:        0 bytes
 17113 ;; Hardware stack levels used:    1
 17114 ;; Hardware stack levels required when called:   16
 17115 ;; This function calls:
 17116 ;;		_Lcd_Print_String
 17117 ;;		___lbmod
 17118 ;;		___wmul
 17119 ;;		_clear_row1
 17120 ;;		_clear_row2
 17121 ;;		_setControllerResolution
 17122 ;;		_un_block_code
 17123 ;; This function is called by:
 17124 ;;		_Function_D
 17125 ;; This function uses a non-reentrant model
 17126 ;;
 17127                           
 17128                           	psect	text49
 17129  008464                     __ptext49:
 17130                           	opt stack 0
 17131  008464                     _Function_D_1:
 17132                           	opt stack 12
 17133                           
 17134                           ;menu.c: 780: which_screen = POTS_RES_MENU;
 17135                           
 17136                           ; BSR set to: 0
 17137                           ;incstack = 0
 17138  008464  0E0F               	movlw	15
 17139  008466  6E4F               	movwf	_which_screen,c
 17140                           
 17141                           ;menu.c: 781: lcd_print_once = 0;
 17142  008468  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17143                           
 17144                           ;menu.c: 782: encoder_click = 0;
 17145  00846A  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 17146                           
 17147                           ;menu.c: 784: potsResoMenu.selector = POT_MODE;
 17148  00846C  0E00               	movlw	0
 17149  00846E  BA05               	btfsc	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17150  008470  0E01               	movlw	1
 17151  008472  0101               	movlb	1	; () banked
 17152  008474  6F58               	movwf	(_potsResoMenu+2)& (0+255),b
 17153                           
 17154                           ;menu.c: 786: while(encoder_click == 0) {
 17155  008476  D02D               	goto	l3656
 17156  008478                     
 17157                           ;menu.c: 790: un_block_code();
 17158                           
 17159                           ; BSR set to: 1
 17160  008478  ECAB  F04C         	call	_un_block_code	;wreg free
 17161                           
 17162                           ;menu.c: 792: if (lcd_print_once == 0) {
 17163  00847C  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17164  00847E  D028               	goto	l3658
 17165                           
 17166                           ;menu.c: 793: clear_row1();
 17167  008480  EC16  F04C         	call	_clear_row1	;wreg free
 17168                           
 17169                           ;menu.c: 794: Lcd_Print_String("Pots Resolution:");
 17170  008484  0EA8               	movlw	low STR_30
 17171  008486  0100               	movlb	0	; () banked
 17172  008488  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17173  00848A  0EFD               	movlw	high STR_30
 17174  00848C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17175  00848E  EC74  F042         	call	_Lcd_Print_String	;wreg free
 17176                           
 17177                           ;menu.c: 795: clear_row2();
 17178  008492  EC02  F04C         	call	_clear_row2	;wreg free
 17179                           
 17180                           ;menu.c: 796: Lcd_Print_String(LCD_STRINGS[(potsResoMenu.selector % potsResoMenu.number)
      +                           + potsResoMenu.address]);
 17181  008496  0101               	movlb	1	; () banked
 17182  008498  5156               	movf	_potsResoMenu& (0+255),w,b
 17183  00849A  6EE6               	movwf	postinc1,c
 17184  00849C  5158               	movf	(_potsResoMenu+2)& (0+255),w,b
 17185  00849E  6EE6               	movwf	postinc1,c
 17186  0084A0  EC61  F041         	call	___lbmod	;wreg free
 17187  0084A4  503F               	movf	btemp,w,c
 17188  0084A6  0101               	movlb	1	; () banked
 17189  0084A8  2557               	addwf	(_potsResoMenu+1)& (0+255),w,b
 17190  0084AA  0100               	movlb	0	; () banked
 17191  0084AC  6F60               	movwf	___wmul@multiplier& (0+255),b
 17192  0084AE  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 17193  0084B0  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 17194  0084B2  0E00               	movlw	0
 17195  0084B4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17196  0084B6  0E11               	movlw	17
 17197  0084B8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 17198  0084BA  EC2A  F04C         	call	___wmul	;wreg free
 17199  0084BE  0E9E               	movlw	low _LCD_STRINGS
 17200  0084C0  0100               	movlb	0	; () banked
 17201  0084C2  2560               	addwf	?___wmul& (0+255),w,b
 17202  0084C4  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17203  0084C6  0EF3               	movlw	high _LCD_STRINGS
 17204  0084C8  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 17205  0084CA  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17206  0084CC  EC74  F042         	call	_Lcd_Print_String	;wreg free
 17207  0084D0                     l3658:
 17208                           
 17209                           ;menu.c: 797: }
 17210                           ;menu.c: 798: lcd_print_once = 1;
 17211  0084D0  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17212  0084D2                     l3656:
 17213  0084D2  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 17214  0084D4  D7D1               	goto	l3657
 17215                           
 17216                           ;menu.c: 799: }
 17217                           ;menu.c: 805: POT_MODE = potsResoMenu.selector;
 17218  0084D6  0101               	movlb	1	; () banked
 17219  0084D8  A158               	btfss	(_potsResoMenu+2)& (0+255),0,b
 17220  0084DA  D002               	goto	u58440
 17221  0084DC  8A05               	bsf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17222  0084DE  D001               	goto	u58455
 17223  0084E0                     u58440:
 17224  0084E0  9A05               	bcf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17225  0084E2                     u58455:
 17226                           
 17227                           ;menu.c: 806: setControllerResolution();
 17228  0084E2  ECD7  F04B         	call	_setControllerResolution	;wreg free
 17229  0084E6  0012               	return		;funcret
 17230  0084E8                     __end_of_Function_D_1:
 17231                           	opt stack 0
 17232                           tblptru	equ	0xFF8
 17233                           tblptrh	equ	0xFF7
 17234                           tblptrl	equ	0xFF6
 17235                           tablat	equ	0xFF5
 17236                           prodh	equ	0xFF4
 17237                           prodl	equ	0xFF3
 17238                           intcon	equ	0xFF2
 17239                           intcon2	equ	0xFF1
 17240                           postinc0	equ	0xFEE
 17241                           wreg	equ	0xFE8
 17242                           postinc1	equ	0xFE6
 17243                           indf2	equ	0xFDF
 17244                           postinc2	equ	0xFDE
 17245                           postdec2	equ	0xFDD
 17246                           plusw2	equ	0xFDB
 17247                           fsr2h	equ	0xFDA
 17248                           fsr2l	equ	0xFD9
 17249                           status	equ	0xFD8
 17250                           
 17251 ;; *************** function _setControllerResolution *****************
 17252 ;; Defined at:
 17253 ;;		line 115 in file "menu.c"
 17254 ;; Parameters:    Size  Location     Type
 17255 ;;		None
 17256 ;; Auto vars:     Size  Location     Type
 17257 ;;  i               1    0[BANK0 ] unsigned char 
 17258 ;; Return value:  Size  Location     Type
 17259 ;;                  1    wreg      void 
 17260 ;; Registers used:
 17261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17262 ;; Tracked objects:
 17263 ;;		On entry : 0/0
 17264 ;;		On exit  : 0/0
 17265 ;;		Unchanged: 0/0
 17266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17270 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17271 ;;Total ram usage:        1 bytes
 17272 ;; Hardware stack levels used:    1
 17273 ;; Hardware stack levels required when called:    5
 17274 ;; This function calls:
 17275 ;;		Nothing
 17276 ;; This function is called by:
 17277 ;;		_Function_D_1
 17278 ;; This function uses a non-reentrant model
 17279 ;;
 17280                           
 17281                           	psect	text50
 17282  0097AE                     __ptext50:
 17283                           	opt stack 0
 17284  0097AE                     _setControllerResolution:
 17285                           	opt stack 22
 17286                           
 17287                           ;menu.c: 117: for(unsigned char i=0;i<16;i++){
 17288                           
 17289                           ;incstack = 0
 17290  0097AE  0E00               	movlw	0
 17291  0097B0  0100               	movlb	0	; () banked
 17292  0097B2  6F60               	movwf	setControllerResolution@i& (0+255),b
 17293  0097B4                     l31217:
 17294                           
 17295                           ; BSR set to: 0
 17296  0097B4  0E0F               	movlw	15
 17297  0097B6  6560               	cpfsgt	setControllerResolution@i& (0+255),b
 17298  0097B8  D001               	goto	l3470
 17299  0097BA  0012               	return	
 17300  0097BC                     l3470:
 17301                           
 17302                           ; BSR set to: 0
 17303                           ;menu.c: 119: inputPotsArray[i].controller_resolution = POT_MODE;
 17304                           
 17305                           ; BSR set to: 0
 17306  0097BC  5160               	movf	setControllerResolution@i& (0+255),w,b
 17307  0097BE  0D03               	mullw	3
 17308  0097C0  0E88               	movlw	low _inputPotsArray
 17309  0097C2  24F3               	addwf	prodl,w,c
 17310  0097C4  6ED9               	movwf	fsr2l,c
 17311  0097C6  0E02               	movlw	high _inputPotsArray
 17312  0097C8  20F4               	addwfc	prodh,w,c
 17313  0097CA  6EDA               	movwf	fsr2h,c
 17314  0097CC  0102               	movlb	2	; () banked
 17315  0097CE  90DF               	bcf	indf2,0,c
 17316  0097D0  BA05               	btfsc	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17317  0097D2  80DF               	bsf	indf2,0,c
 17318  0097D4  0100               	movlb	0	; () banked
 17319  0097D6  2B60               	incf	setControllerResolution@i& (0+255),f,b
 17320  0097D8  D7ED               	goto	l31217
 17321  0097DA                     __end_of_setControllerResolution:
 17322                           	opt stack 0
 17323                           tblptru	equ	0xFF8
 17324                           tblptrh	equ	0xFF7
 17325                           tblptrl	equ	0xFF6
 17326                           tablat	equ	0xFF5
 17327                           prodh	equ	0xFF4
 17328                           prodl	equ	0xFF3
 17329                           intcon	equ	0xFF2
 17330                           intcon2	equ	0xFF1
 17331                           postinc0	equ	0xFEE
 17332                           wreg	equ	0xFE8
 17333                           postinc1	equ	0xFE6
 17334                           indf2	equ	0xFDF
 17335                           postinc2	equ	0xFDE
 17336                           postdec2	equ	0xFDD
 17337                           plusw2	equ	0xFDB
 17338                           fsr2h	equ	0xFDA
 17339                           fsr2l	equ	0xFD9
 17340                           status	equ	0xFD8
 17341                           
 17342 ;; *************** function _Function_C *****************
 17343 ;; Defined at:
 17344 ;;		line 749 in file "menu.c"
 17345 ;; Parameters:    Size  Location     Type
 17346 ;;		None
 17347 ;; Auto vars:     Size  Location     Type
 17348 ;;		None
 17349 ;; Return value:  Size  Location     Type
 17350 ;;                  1    wreg      void 
 17351 ;; Registers used:
 17352 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17353 ;; Tracked objects:
 17354 ;;		On entry : 0/0
 17355 ;;		On exit  : 0/0
 17356 ;;		Unchanged: 0/0
 17357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17362 ;;Total ram usage:        0 bytes
 17363 ;; Hardware stack levels used:    1
 17364 ;; Hardware stack levels required when called:   17
 17365 ;; This function calls:
 17366 ;;		_Function_C_1
 17367 ;;		_Function_C_2
 17368 ;;		_Function_C_3
 17369 ;;		_Lcd_Print_String
 17370 ;;		___lbmod
 17371 ;;		___wmul
 17372 ;;		_clear_row2
 17373 ;;		_un_block_code
 17374 ;; This function is called by:
 17375 ;;		_menu_lcd
 17376 ;; This function uses a non-reentrant model
 17377 ;;
 17378                           
 17379                           	psect	text51
 17380  008082                     __ptext51:
 17381                           	opt stack 0
 17382  008082                     _Function_C:
 17383                           	opt stack 12
 17384                           
 17385                           ;menu.c: 751: which_screen = DRUM_MENU;
 17386                           
 17387                           ; BSR set to: 0
 17388                           ;incstack = 0
 17389  008082  0E05               	movlw	5
 17390  008084  6E4F               	movwf	_which_screen,c
 17391                           
 17392                           ;menu.c: 752: lcd_print_once = 0;
 17393  008086  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17394                           
 17395                           ;menu.c: 754: drumMenu.selector = DRUM_MODE;
 17396  008088  0E00               	movlw	0
 17397  00808A  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 17398  00808C  0E01               	movlw	1
 17399  00808E  0101               	movlb	1	; () banked
 17400  008090  6F67               	movwf	(_drumMenu+2)& (0+255),b
 17401                           
 17402                           ;menu.c: 756: while(encoder_click == 0) {
 17403  008092  D024               	goto	l3644
 17404  008094                     
 17405                           ;menu.c: 760: un_block_code();
 17406                           
 17407                           ; BSR set to: 1
 17408  008094  ECAB  F04C         	call	_un_block_code	;wreg free
 17409                           
 17410                           ;menu.c: 762: if (lcd_print_once == 0) {
 17411  008098  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17412  00809A  D01F               	goto	l3646
 17413                           
 17414                           ;menu.c: 763: clear_row2();
 17415  00809C  EC02  F04C         	call	_clear_row2	;wreg free
 17416                           
 17417                           ;menu.c: 764: Lcd_Print_String(LCD_STRINGS[(drumMenu.selector % drumMenu.number) + drumM
      +                          enu.address]);
 17418  0080A0  0101               	movlb	1	; () banked
 17419  0080A2  5165               	movf	_drumMenu& (0+255),w,b
 17420  0080A4  6EE6               	movwf	postinc1,c
 17421  0080A6  5167               	movf	(_drumMenu+2)& (0+255),w,b
 17422  0080A8  6EE6               	movwf	postinc1,c
 17423  0080AA  EC61  F041         	call	___lbmod	;wreg free
 17424  0080AE  503F               	movf	btemp,w,c
 17425  0080B0  0101               	movlb	1	; () banked
 17426  0080B2  2566               	addwf	(_drumMenu+1)& (0+255),w,b
 17427  0080B4  0100               	movlb	0	; () banked
 17428  0080B6  6F60               	movwf	___wmul@multiplier& (0+255),b
 17429  0080B8  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 17430  0080BA  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 17431  0080BC  0E00               	movlw	0
 17432  0080BE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17433  0080C0  0E11               	movlw	17
 17434  0080C2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 17435  0080C4  EC2A  F04C         	call	___wmul	;wreg free
 17436  0080C8  0E9E               	movlw	low _LCD_STRINGS
 17437  0080CA  0100               	movlb	0	; () banked
 17438  0080CC  2560               	addwf	?___wmul& (0+255),w,b
 17439  0080CE  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17440  0080D0  0EF3               	movlw	high _LCD_STRINGS
 17441  0080D2  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 17442  0080D4  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17443  0080D6  EC74  F042         	call	_Lcd_Print_String	;wreg free
 17444  0080DA                     l3646:
 17445                           
 17446                           ;menu.c: 766: }
 17447                           ;menu.c: 767: lcd_print_once = 1;
 17448  0080DA  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17449  0080DC                     l3644:
 17450  0080DC  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 17451  0080DE  D7DA               	goto	l3645
 17452                           
 17453                           ;menu.c: 768: }
 17454                           ;menu.c: 770: if(drumMenu.selector == 0){DRUM_MODE = 0;}
 17455  0080E0  0101               	movlb	1	; () banked
 17456  0080E2  5167               	movf	(_drumMenu+2)& (0+255),w,b
 17457  0080E4  B4D8               	btfsc	status,2,c
 17458                           
 17459                           ; BSR set to: 1
 17460  0080E6  9801               	bcf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 17461                           
 17462                           ; BSR set to: 1
 17463                           ;menu.c: 771: if(drumMenu.selector == 1){DRUM_MODE = 1;}
 17464                           
 17465                           ; BSR set to: 1
 17466  0080E8  0567               	decf	(_drumMenu+2)& (0+255),w,b
 17467  0080EA  B4D8               	btfsc	status,2,c
 17468                           
 17469                           ; BSR set to: 1
 17470  0080EC  8801               	bsf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 17471                           
 17472                           ; BSR set to: 1
 17473                           ;menu.c: 772: if(drumMenu.selector == 2) {Function_C_1();}
 17474                           
 17475                           ; BSR set to: 1
 17476  0080EE  0E02               	movlw	2
 17477  0080F0  1967               	xorwf	(_drumMenu+2)& (0+255),w,b
 17478  0080F2  B4D8               	btfsc	status,2,c
 17479                           
 17480                           ; BSR set to: 1
 17481  0080F4  EC1A  F041         	call	_Function_C_1	;wreg free
 17482                           
 17483                           ;menu.c: 773: if(drumMenu.selector == 3) {Function_C_2();}
 17484  0080F8  0E03               	movlw	3
 17485  0080FA  0101               	movlb	1	; () banked
 17486  0080FC  1967               	xorwf	(_drumMenu+2)& (0+255),w,b
 17487  0080FE  B4D8               	btfsc	status,2,c
 17488                           
 17489                           ; BSR set to: 1
 17490  008100  ECC8  F031         	call	_Function_C_2	;wreg free
 17491                           
 17492                           ;menu.c: 774: if(drumMenu.selector == 4) {Function_C_3();}
 17493  008104  0E04               	movlw	4
 17494  008106  0101               	movlb	1	; () banked
 17495  008108  1967               	xorwf	(_drumMenu+2)& (0+255),w,b
 17496  00810A  A4D8               	btfss	status,2,c
 17497  00810C  0012               	return	
 17498                           
 17499                           ; BSR set to: 1
 17500  00810E  EC35  F031         	call	_Function_C_3	;wreg free
 17501  008112  0012               	return	
 17502  008114                     __end_of_Function_C:
 17503                           	opt stack 0
 17504                           tblptru	equ	0xFF8
 17505                           tblptrh	equ	0xFF7
 17506                           tblptrl	equ	0xFF6
 17507                           tablat	equ	0xFF5
 17508                           prodh	equ	0xFF4
 17509                           prodl	equ	0xFF3
 17510                           intcon	equ	0xFF2
 17511                           intcon2	equ	0xFF1
 17512                           postinc0	equ	0xFEE
 17513                           wreg	equ	0xFE8
 17514                           postinc1	equ	0xFE6
 17515                           indf2	equ	0xFDF
 17516                           postinc2	equ	0xFDE
 17517                           postdec2	equ	0xFDD
 17518                           plusw2	equ	0xFDB
 17519                           fsr2h	equ	0xFDA
 17520                           fsr2l	equ	0xFD9
 17521                           status	equ	0xFD8
 17522                           
 17523 ;; *************** function _Function_C_3 *****************
 17524 ;; Defined at:
 17525 ;;		line 698 in file "menu.c"
 17526 ;; Parameters:    Size  Location     Type
 17527 ;;		None
 17528 ;; Auto vars:     Size  Location     Type
 17529 ;;  array_index     1  104[BANK0 ] unsigned char 
 17530 ;; Return value:  Size  Location     Type
 17531 ;;                  1    wreg      void 
 17532 ;; Registers used:
 17533 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17534 ;; Tracked objects:
 17535 ;;		On entry : 0/0
 17536 ;;		On exit  : 0/0
 17537 ;;		Unchanged: 0/0
 17538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17540 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17541 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17542 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17543 ;;Total ram usage:        2 bytes
 17544 ;; Hardware stack levels used:    1
 17545 ;; Hardware stack levels required when called:   16
 17546 ;; This function calls:
 17547 ;;		_Lcd_Print_String
 17548 ;;		_Lcd_Set_Cursor
 17549 ;;		___lbmod
 17550 ;;		___wmul
 17551 ;;		_clear_row1
 17552 ;;		_clear_row2
 17553 ;;		_int2string
 17554 ;;		_un_block_code
 17555 ;; This function is called by:
 17556 ;;		_Function_C
 17557 ;; This function uses a non-reentrant model
 17558 ;;
 17559                           
 17560                           	psect	text52
 17561  00626A                     __ptext52:
 17562                           	opt stack 0
 17563  00626A                     _Function_C_3:
 17564                           	opt stack 12
 17565                           
 17566                           ;menu.c: 700: which_screen = DRUMS_CC_MENU;
 17567                           
 17568                           ;incstack = 0
 17569  00626A  0E0E               	movlw	14
 17570  00626C  6E4F               	movwf	_which_screen,c
 17571                           
 17572                           ;menu.c: 701: lcd_print_once = 0;
 17573  00626E  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17574                           
 17575                           ;menu.c: 702: encoder_click = 0;
 17576  006270  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 17577                           
 17578                           ;menu.c: 704: while(encoder_click == 0) {
 17579  006272  D02D               	goto	l3629
 17580  006274                     
 17581                           ;menu.c: 708: un_block_code();
 17582  006274  ECAB  F04C         	call	_un_block_code	;wreg free
 17583                           
 17584                           ;menu.c: 710: if (lcd_print_once == 0) {
 17585  006278  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17586  00627A  D028               	goto	l3631
 17587                           
 17588                           ;menu.c: 711: clear_row1();
 17589  00627C  EC16  F04C         	call	_clear_row1	;wreg free
 17590                           
 17591                           ;menu.c: 712: Lcd_Print_String("Set CC Number:");
 17592  006280  0E6B               	movlw	low STR_29
 17593  006282  0100               	movlb	0	; () banked
 17594  006284  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17595  006286  0EFE               	movlw	high STR_29
 17596  006288  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17597  00628A  EC74  F042         	call	_Lcd_Print_String	;wreg free
 17598                           
 17599                           ;menu.c: 713: clear_row2();
 17600  00628E  EC02  F04C         	call	_clear_row2	;wreg free
 17601                           
 17602                           ;menu.c: 714: Lcd_Print_String(LCD_STRINGS[(drumCCMenu.selector % drumCCMenu.number) + d
      +                          rumCCMenu.address]);
 17603  006292  0101               	movlb	1	; () banked
 17604  006294  515C               	movf	_drumCCMenu& (0+255),w,b
 17605  006296  6EE6               	movwf	postinc1,c
 17606  006298  515E               	movf	(_drumCCMenu+2)& (0+255),w,b
 17607  00629A  6EE6               	movwf	postinc1,c
 17608  00629C  EC61  F041         	call	___lbmod	;wreg free
 17609  0062A0  503F               	movf	btemp,w,c
 17610  0062A2  0101               	movlb	1	; () banked
 17611  0062A4  255D               	addwf	(_drumCCMenu+1)& (0+255),w,b
 17612  0062A6  0100               	movlb	0	; () banked
 17613  0062A8  6F60               	movwf	___wmul@multiplier& (0+255),b
 17614  0062AA  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 17615  0062AC  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 17616  0062AE  0E00               	movlw	0
 17617  0062B0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17618  0062B2  0E11               	movlw	17
 17619  0062B4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 17620  0062B6  EC2A  F04C         	call	___wmul	;wreg free
 17621  0062BA  0E9E               	movlw	low _LCD_STRINGS
 17622  0062BC  0100               	movlb	0	; () banked
 17623  0062BE  2560               	addwf	?___wmul& (0+255),w,b
 17624  0062C0  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17625  0062C2  0EF3               	movlw	high _LCD_STRINGS
 17626  0062C4  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 17627  0062C6  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17628  0062C8  EC74  F042         	call	_Lcd_Print_String	;wreg free
 17629  0062CC                     l3631:
 17630                           
 17631                           ;menu.c: 715: }
 17632                           ;menu.c: 716: lcd_print_once = 1;
 17633  0062CC  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17634  0062CE                     l3629:
 17635  0062CE  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 17636  0062D0  D7D1               	goto	l3630
 17637                           
 17638                           ;menu.c: 717: }
 17639                           ;menu.c: 719: which_screen = BLANK;
 17640  0062D2  0E00               	movlw	0
 17641  0062D4  6E4F               	movwf	_which_screen,c
 17642                           
 17643                           ;menu.c: 720: lcd_print_once = 0;
 17644  0062D6  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17645                           
 17646                           ;menu.c: 721: encoder_click = 0;
 17647  0062D8  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 17648                           
 17649                           ;menu.c: 722: unsigned char array_index = drumCCMenu.selector;
 17650  0062DA  C15E  F0C8         	movff	_drumCCMenu+2,Function_C_3@array_index
 17651                           
 17652                           ;menu.c: 724: while(encoder_click == 0) {
 17653  0062DE  D055               	goto	l3635
 17654  0062E0                     l3634:
 17655                           
 17656                           ;menu.c: 726: if(lcd_print_once == 0) {
 17657  0062E0  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17658  0062E2  D053               	goto	l3635
 17659                           
 17660                           ;menu.c: 727: if (encoder_direction == 0x10) {
 17661  0062E4  0E10               	movlw	16
 17662  0062E6  1836               	xorwf	_encoder_direction,w,c
 17663  0062E8  A4D8               	btfss	status,2,c
 17664  0062EA  D017               	goto	l3636
 17665                           
 17666                           ;menu.c: 728: if(DRUM_CC[array_index] < 127) {
 17667  0062EC  0100               	movlb	0	; () banked
 17668  0062EE  51C8               	movf	Function_C_3@array_index& (0+255),w,b
 17669  0062F0  0D01               	mullw	1
 17670  0062F2  0EF5               	movlw	low _DRUM_CC
 17671  0062F4  24F3               	addwf	prodl,w,c
 17672  0062F6  6ED9               	movwf	fsr2l,c
 17673  0062F8  0E00               	movlw	high _DRUM_CC
 17674  0062FA  20F4               	addwfc	prodh,w,c
 17675  0062FC  6EDA               	movwf	fsr2h,c
 17676  0062FE  0E7F               	movlw	127
 17677  006300  60DF               	cpfslt	indf2,c
 17678  006302  D009               	goto	l3637
 17679                           
 17680                           ; BSR set to: 0
 17681                           ;menu.c: 729: DRUM_CC[array_index]++;
 17682  006304  51C8               	movf	Function_C_3@array_index& (0+255),w,b
 17683  006306  0D01               	mullw	1
 17684  006308  0EF5               	movlw	low _DRUM_CC
 17685  00630A  24F3               	addwf	prodl,w,c
 17686  00630C  6ED9               	movwf	fsr2l,c
 17687  00630E  0E00               	movlw	high _DRUM_CC
 17688  006310  20F4               	addwfc	prodh,w,c
 17689  006312  6EDA               	movwf	fsr2h,c
 17690  006314  2ADF               	incf	indf2,f,c
 17691  006316                     l3637:
 17692                           
 17693                           ; BSR set to: 0
 17694                           ;menu.c: 730: }
 17695                           ;menu.c: 731: encoder_direction = 0x00;
 17696                           
 17697                           ; BSR set to: 0
 17698  006316  0E00               	movlw	0
 17699  006318  6E36               	movwf	_encoder_direction,c
 17700  00631A                     l3636:
 17701                           
 17702                           ;menu.c: 732: }
 17703                           ;menu.c: 734: if (encoder_direction == 0x20) {
 17704                           
 17705                           ; BSR set to: 0
 17706  00631A  0E20               	movlw	32
 17707  00631C  1836               	xorwf	_encoder_direction,w,c
 17708  00631E  A4D8               	btfss	status,2,c
 17709  006320  D017               	goto	l3638
 17710                           
 17711                           ;menu.c: 735: if(DRUM_CC[array_index] > 0) {
 17712  006322  0100               	movlb	0	; () banked
 17713  006324  51C8               	movf	Function_C_3@array_index& (0+255),w,b
 17714  006326  0D01               	mullw	1
 17715  006328  0EF5               	movlw	low _DRUM_CC
 17716  00632A  24F3               	addwf	prodl,w,c
 17717  00632C  6ED9               	movwf	fsr2l,c
 17718  00632E  0E00               	movlw	high _DRUM_CC
 17719  006330  20F4               	addwfc	prodh,w,c
 17720  006332  6EDA               	movwf	fsr2h,c
 17721  006334  50DF               	movf	indf2,w,c
 17722  006336  B4D8               	btfsc	status,2,c
 17723  006338  D009               	goto	l3639
 17724                           
 17725                           ; BSR set to: 0
 17726                           ;menu.c: 736: DRUM_CC[array_index]--;
 17727  00633A  51C8               	movf	Function_C_3@array_index& (0+255),w,b
 17728  00633C  0D01               	mullw	1
 17729  00633E  0EF5               	movlw	low _DRUM_CC
 17730  006340  24F3               	addwf	prodl,w,c
 17731  006342  6ED9               	movwf	fsr2l,c
 17732  006344  0E00               	movlw	high _DRUM_CC
 17733  006346  20F4               	addwfc	prodh,w,c
 17734  006348  6EDA               	movwf	fsr2h,c
 17735  00634A  06DF               	decf	indf2,f,c
 17736  00634C                     l3639:
 17737                           
 17738                           ; BSR set to: 0
 17739                           ;menu.c: 737: }
 17740                           ;menu.c: 738: encoder_direction = 0x00;
 17741                           
 17742                           ; BSR set to: 0
 17743  00634C  0E00               	movlw	0
 17744  00634E  6E36               	movwf	_encoder_direction,c
 17745  006350                     l3638:
 17746                           
 17747                           ;menu.c: 739: }
 17748                           ;menu.c: 741: int2string(DRUM_CC[array_index]);
 17749                           
 17750                           ; BSR set to: 0
 17751  006350  0100               	movlb	0	; () banked
 17752  006352  51C8               	movf	Function_C_3@array_index& (0+255),w,b
 17753  006354  0D01               	mullw	1
 17754  006356  0EF5               	movlw	low _DRUM_CC
 17755  006358  24F3               	addwf	prodl,w,c
 17756  00635A  6ED9               	movwf	fsr2l,c
 17757  00635C  0E00               	movlw	high _DRUM_CC
 17758  00635E  20F4               	addwfc	prodh,w,c
 17759  006360  6EDA               	movwf	fsr2h,c
 17760  006362  50DF               	movf	indf2,w,c
 17761  006364  6FC7               	movwf	??_Function_C_3& (0+255),b
 17762  006366  51C7               	movf	??_Function_C_3& (0+255),w,b
 17763  006368  6F60               	movwf	int2string@number& (0+255),b
 17764  00636A  6B61               	clrf	(int2string@number+1)& (0+255),b
 17765  00636C  EC08  F03B         	call	_int2string	;wreg free
 17766                           
 17767                           ;menu.c: 742: Lcd_Set_Cursor(2,13);
 17768  006370  0E0D               	movlw	13
 17769  006372  0100               	movlb	0	; () banked
 17770  006374  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 17771  006376  0E02               	movlw	2
 17772  006378  ECDD  F047         	call	_Lcd_Set_Cursor
 17773                           
 17774                           ;menu.c: 743: Lcd_Print_String(string2display);
 17775  00637C  0E92               	movlw	low _string2display
 17776  00637E  0100               	movlb	0	; () banked
 17777  006380  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17778  006382  0E01               	movlw	high _string2display
 17779  006384  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17780  006386  EC74  F042         	call	_Lcd_Print_String	;wreg free
 17781  00638A                     l3635:
 17782  00638A  B205               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 17783  00638C  0012               	return	
 17784  00638E  D7A8               	goto	l3634
 17785  006390                     __end_of_Function_C_3:
 17786                           	opt stack 0
 17787                           tblptru	equ	0xFF8
 17788                           tblptrh	equ	0xFF7
 17789                           tblptrl	equ	0xFF6
 17790                           tablat	equ	0xFF5
 17791                           prodh	equ	0xFF4
 17792                           prodl	equ	0xFF3
 17793                           intcon	equ	0xFF2
 17794                           intcon2	equ	0xFF1
 17795                           postinc0	equ	0xFEE
 17796                           wreg	equ	0xFE8
 17797                           postinc1	equ	0xFE6
 17798                           indf2	equ	0xFDF
 17799                           postinc2	equ	0xFDE
 17800                           postdec2	equ	0xFDD
 17801                           plusw2	equ	0xFDB
 17802                           fsr2h	equ	0xFDA
 17803                           fsr2l	equ	0xFD9
 17804                           status	equ	0xFD8
 17805                           
 17806 ;; *************** function _Function_C_2 *****************
 17807 ;; Defined at:
 17808 ;;		line 646 in file "menu.c"
 17809 ;; Parameters:    Size  Location     Type
 17810 ;;		None
 17811 ;; Auto vars:     Size  Location     Type
 17812 ;;  array_index     1  104[BANK0 ] unsigned char 
 17813 ;; Return value:  Size  Location     Type
 17814 ;;                  1    wreg      void 
 17815 ;; Registers used:
 17816 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17817 ;; Tracked objects:
 17818 ;;		On entry : 0/0
 17819 ;;		On exit  : 0/0
 17820 ;;		Unchanged: 0/0
 17821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17823 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17824 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17825 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17826 ;;Total ram usage:        2 bytes
 17827 ;; Hardware stack levels used:    1
 17828 ;; Hardware stack levels required when called:   16
 17829 ;; This function calls:
 17830 ;;		_Lcd_Print_String
 17831 ;;		_Lcd_Set_Cursor
 17832 ;;		___lbmod
 17833 ;;		___wmul
 17834 ;;		_clear_row1
 17835 ;;		_clear_row2
 17836 ;;		_int2string
 17837 ;;		_un_block_code
 17838 ;; This function is called by:
 17839 ;;		_Function_C
 17840 ;; This function uses a non-reentrant model
 17841 ;;
 17842                           
 17843                           	psect	text53
 17844  006390                     __ptext53:
 17845                           	opt stack 0
 17846  006390                     _Function_C_2:
 17847                           	opt stack 12
 17848                           
 17849                           ;menu.c: 648: which_screen = DRUMS_NN_MENU;
 17850                           
 17851                           ;incstack = 0
 17852  006390  0E0D               	movlw	13
 17853  006392  6E4F               	movwf	_which_screen,c
 17854                           
 17855                           ;menu.c: 649: lcd_print_once = 0;
 17856  006394  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17857                           
 17858                           ;menu.c: 650: encoder_click = 0;
 17859  006396  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 17860                           
 17861                           ;menu.c: 652: while(encoder_click == 0) {
 17862  006398  D02D               	goto	l3614
 17863  00639A                     
 17864                           ;menu.c: 656: un_block_code();
 17865  00639A  ECAB  F04C         	call	_un_block_code	;wreg free
 17866                           
 17867                           ;menu.c: 658: if (lcd_print_once == 0) {
 17868  00639E  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17869  0063A0  D028               	goto	l3616
 17870                           
 17871                           ;menu.c: 659: clear_row1();
 17872  0063A2  EC16  F04C         	call	_clear_row1	;wreg free
 17873                           
 17874                           ;menu.c: 660: Lcd_Print_String("Set Note Number:");
 17875  0063A6  0ECA               	movlw	low STR_28
 17876  0063A8  0100               	movlb	0	; () banked
 17877  0063AA  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17878  0063AC  0EFD               	movlw	high STR_28
 17879  0063AE  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17880  0063B0  EC74  F042         	call	_Lcd_Print_String	;wreg free
 17881                           
 17882                           ;menu.c: 661: clear_row2();
 17883  0063B4  EC02  F04C         	call	_clear_row2	;wreg free
 17884                           
 17885                           ;menu.c: 662: Lcd_Print_String(LCD_STRINGS[(drumNNMenu.selector % drumNNMenu.number) + d
      +                          rumNNMenu.address]);
 17886  0063B8  0101               	movlb	1	; () banked
 17887  0063BA  515F               	movf	_drumNNMenu& (0+255),w,b
 17888  0063BC  6EE6               	movwf	postinc1,c
 17889  0063BE  5161               	movf	(_drumNNMenu+2)& (0+255),w,b
 17890  0063C0  6EE6               	movwf	postinc1,c
 17891  0063C2  EC61  F041         	call	___lbmod	;wreg free
 17892  0063C6  503F               	movf	btemp,w,c
 17893  0063C8  0101               	movlb	1	; () banked
 17894  0063CA  2560               	addwf	(_drumNNMenu+1)& (0+255),w,b
 17895  0063CC  0100               	movlb	0	; () banked
 17896  0063CE  6F60               	movwf	___wmul@multiplier& (0+255),b
 17897  0063D0  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 17898  0063D2  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 17899  0063D4  0E00               	movlw	0
 17900  0063D6  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17901  0063D8  0E11               	movlw	17
 17902  0063DA  6F62               	movwf	___wmul@multiplicand& (0+255),b
 17903  0063DC  EC2A  F04C         	call	___wmul	;wreg free
 17904  0063E0  0E9E               	movlw	low _LCD_STRINGS
 17905  0063E2  0100               	movlb	0	; () banked
 17906  0063E4  2560               	addwf	?___wmul& (0+255),w,b
 17907  0063E6  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17908  0063E8  0EF3               	movlw	high _LCD_STRINGS
 17909  0063EA  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 17910  0063EC  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17911  0063EE  EC74  F042         	call	_Lcd_Print_String	;wreg free
 17912  0063F2                     l3616:
 17913                           
 17914                           ;menu.c: 663: }
 17915                           ;menu.c: 664: lcd_print_once = 1;
 17916  0063F2  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17917  0063F4                     l3614:
 17918  0063F4  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 17919  0063F6  D7D1               	goto	l3615
 17920                           
 17921                           ;menu.c: 665: }
 17922                           ;menu.c: 667: which_screen = BLANK;
 17923  0063F8  0E00               	movlw	0
 17924  0063FA  6E4F               	movwf	_which_screen,c
 17925                           
 17926                           ;menu.c: 668: lcd_print_once = 0;
 17927  0063FC  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17928                           
 17929                           ;menu.c: 669: encoder_click = 0;
 17930  0063FE  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 17931                           
 17932                           ;menu.c: 670: unsigned char array_index = drumNNMenu.selector;
 17933  006400  C161  F0C8         	movff	_drumNNMenu+2,Function_C_2@array_index
 17934                           
 17935                           ;menu.c: 672: while(encoder_click == 0) {
 17936  006404  D055               	goto	l3620
 17937  006406                     l3619:
 17938                           
 17939                           ;menu.c: 674: if(lcd_print_once == 0) {
 17940  006406  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17941  006408  D053               	goto	l3620
 17942                           
 17943                           ;menu.c: 675: if (encoder_direction == 0x10) {
 17944  00640A  0E10               	movlw	16
 17945  00640C  1836               	xorwf	_encoder_direction,w,c
 17946  00640E  A4D8               	btfss	status,2,c
 17947  006410  D017               	goto	l3621
 17948                           
 17949                           ;menu.c: 676: if(DRUM_NOTE[array_index] < 81) {
 17950  006412  0100               	movlb	0	; () banked
 17951  006414  51C8               	movf	Function_C_2@array_index& (0+255),w,b
 17952  006416  0D01               	mullw	1
 17953  006418  0EE7               	movlw	low _DRUM_NOTE
 17954  00641A  24F3               	addwf	prodl,w,c
 17955  00641C  6ED9               	movwf	fsr2l,c
 17956  00641E  0E01               	movlw	high _DRUM_NOTE
 17957  006420  20F4               	addwfc	prodh,w,c
 17958  006422  6EDA               	movwf	fsr2h,c
 17959  006424  0E51               	movlw	81
 17960  006426  60DF               	cpfslt	indf2,c
 17961  006428  D009               	goto	l3622
 17962                           
 17963                           ; BSR set to: 0
 17964                           ;menu.c: 677: DRUM_NOTE[array_index]++;
 17965  00642A  51C8               	movf	Function_C_2@array_index& (0+255),w,b
 17966  00642C  0D01               	mullw	1
 17967  00642E  0EE7               	movlw	low _DRUM_NOTE
 17968  006430  24F3               	addwf	prodl,w,c
 17969  006432  6ED9               	movwf	fsr2l,c
 17970  006434  0E01               	movlw	high _DRUM_NOTE
 17971  006436  20F4               	addwfc	prodh,w,c
 17972  006438  6EDA               	movwf	fsr2h,c
 17973  00643A  2ADF               	incf	indf2,f,c
 17974  00643C                     l3622:
 17975                           
 17976                           ; BSR set to: 0
 17977                           ;menu.c: 678: }
 17978                           ;menu.c: 679: encoder_direction = 0x00;
 17979                           
 17980                           ; BSR set to: 0
 17981  00643C  0E00               	movlw	0
 17982  00643E  6E36               	movwf	_encoder_direction,c
 17983  006440                     l3621:
 17984                           
 17985                           ;menu.c: 680: }
 17986                           ;menu.c: 682: if (encoder_direction == 0x20) {
 17987                           
 17988                           ; BSR set to: 0
 17989  006440  0E20               	movlw	32
 17990  006442  1836               	xorwf	_encoder_direction,w,c
 17991  006444  A4D8               	btfss	status,2,c
 17992  006446  D017               	goto	l3623
 17993                           
 17994                           ;menu.c: 683: if(DRUM_NOTE[array_index] > 35) {
 17995  006448  0100               	movlb	0	; () banked
 17996  00644A  51C8               	movf	Function_C_2@array_index& (0+255),w,b
 17997  00644C  0D01               	mullw	1
 17998  00644E  0EE7               	movlw	low _DRUM_NOTE
 17999  006450  24F3               	addwf	prodl,w,c
 18000  006452  6ED9               	movwf	fsr2l,c
 18001  006454  0E01               	movlw	high _DRUM_NOTE
 18002  006456  20F4               	addwfc	prodh,w,c
 18003  006458  6EDA               	movwf	fsr2h,c
 18004  00645A  0E23               	movlw	35
 18005  00645C  64DF               	cpfsgt	indf2,c
 18006  00645E  D009               	goto	l3624
 18007                           
 18008                           ; BSR set to: 0
 18009                           ;menu.c: 684: DRUM_NOTE[array_index]--;
 18010  006460  51C8               	movf	Function_C_2@array_index& (0+255),w,b
 18011  006462  0D01               	mullw	1
 18012  006464  0EE7               	movlw	low _DRUM_NOTE
 18013  006466  24F3               	addwf	prodl,w,c
 18014  006468  6ED9               	movwf	fsr2l,c
 18015  00646A  0E01               	movlw	high _DRUM_NOTE
 18016  00646C  20F4               	addwfc	prodh,w,c
 18017  00646E  6EDA               	movwf	fsr2h,c
 18018  006470  06DF               	decf	indf2,f,c
 18019  006472                     l3624:
 18020                           
 18021                           ; BSR set to: 0
 18022                           ;menu.c: 685: }
 18023                           ;menu.c: 686: encoder_direction = 0x00;
 18024                           
 18025                           ; BSR set to: 0
 18026  006472  0E00               	movlw	0
 18027  006474  6E36               	movwf	_encoder_direction,c
 18028  006476                     l3623:
 18029                           
 18030                           ;menu.c: 687: }
 18031                           ;menu.c: 689: int2string(DRUM_NOTE[array_index]);
 18032                           
 18033                           ; BSR set to: 0
 18034  006476  0100               	movlb	0	; () banked
 18035  006478  51C8               	movf	Function_C_2@array_index& (0+255),w,b
 18036  00647A  0D01               	mullw	1
 18037  00647C  0EE7               	movlw	low _DRUM_NOTE
 18038  00647E  24F3               	addwf	prodl,w,c
 18039  006480  6ED9               	movwf	fsr2l,c
 18040  006482  0E01               	movlw	high _DRUM_NOTE
 18041  006484  20F4               	addwfc	prodh,w,c
 18042  006486  6EDA               	movwf	fsr2h,c
 18043  006488  50DF               	movf	indf2,w,c
 18044  00648A  6FC7               	movwf	??_Function_C_2& (0+255),b
 18045  00648C  51C7               	movf	??_Function_C_2& (0+255),w,b
 18046  00648E  6F60               	movwf	int2string@number& (0+255),b
 18047  006490  6B61               	clrf	(int2string@number+1)& (0+255),b
 18048  006492  EC08  F03B         	call	_int2string	;wreg free
 18049                           
 18050                           ;menu.c: 690: Lcd_Set_Cursor(2,13);
 18051  006496  0E0D               	movlw	13
 18052  006498  0100               	movlb	0	; () banked
 18053  00649A  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 18054  00649C  0E02               	movlw	2
 18055  00649E  ECDD  F047         	call	_Lcd_Set_Cursor
 18056                           
 18057                           ;menu.c: 691: Lcd_Print_String(string2display);
 18058  0064A2  0E92               	movlw	low _string2display
 18059  0064A4  0100               	movlb	0	; () banked
 18060  0064A6  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 18061  0064A8  0E01               	movlw	high _string2display
 18062  0064AA  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18063  0064AC  EC74  F042         	call	_Lcd_Print_String	;wreg free
 18064  0064B0                     l3620:
 18065  0064B0  B205               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 18066  0064B2  0012               	return	
 18067  0064B4  D7A8               	goto	l3619
 18068  0064B6                     __end_of_Function_C_2:
 18069                           	opt stack 0
 18070                           tblptru	equ	0xFF8
 18071                           tblptrh	equ	0xFF7
 18072                           tblptrl	equ	0xFF6
 18073                           tablat	equ	0xFF5
 18074                           prodh	equ	0xFF4
 18075                           prodl	equ	0xFF3
 18076                           intcon	equ	0xFF2
 18077                           intcon2	equ	0xFF1
 18078                           postinc0	equ	0xFEE
 18079                           wreg	equ	0xFE8
 18080                           postinc1	equ	0xFE6
 18081                           indf2	equ	0xFDF
 18082                           postinc2	equ	0xFDE
 18083                           postdec2	equ	0xFDD
 18084                           plusw2	equ	0xFDB
 18085                           fsr2h	equ	0xFDA
 18086                           fsr2l	equ	0xFD9
 18087                           status	equ	0xFD8
 18088                           
 18089 ;; *************** function _int2string *****************
 18090 ;; Defined at:
 18091 ;;		line 86 in file "menu.c"
 18092 ;; Parameters:    Size  Location     Type
 18093 ;;  number          2    0[BANK0 ] int 
 18094 ;; Auto vars:     Size  Location     Type
 18095 ;;  number_to_di    2    4[BANK0 ] int 
 18096 ;; Return value:  Size  Location     Type
 18097 ;;                  1    wreg      void 
 18098 ;; Registers used:
 18099 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl
 18100 ;; Tracked objects:
 18101 ;;		On entry : 0/0
 18102 ;;		On exit  : 0/0
 18103 ;;		Unchanged: 0/0
 18104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18105 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18106 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18107 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18108 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18109 ;;Total ram usage:        6 bytes
 18110 ;; Hardware stack levels used:    1
 18111 ;; Hardware stack levels required when called:    6
 18112 ;; This function calls:
 18113 ;;		___awdiv
 18114 ;;		___awmod
 18115 ;; This function is called by:
 18116 ;;		_setControllerNumbers
 18117 ;;		_Function_C_2
 18118 ;;		_Function_C_3
 18119 ;;		_Function_D_2
 18120 ;;		_Function_E_1
 18121 ;;		_Function_E_2
 18122 ;;		_Function_F
 18123 ;;		_Function_H_2
 18124 ;;		_Function_H_3
 18125 ;; This function uses a non-reentrant model
 18126 ;;
 18127                           
 18128                           	psect	text54
 18129  007610                     __ptext54:
 18130                           	opt stack 0
 18131  007610                     _int2string:
 18132                           	opt stack 21
 18133                           
 18134                           ;menu.c: 88: static __bit isNegative = 0;
 18135                           ;menu.c: 89: signed int number_to_display_temp = 0;
 18136                           
 18137                           ;incstack = 0
 18138  007610  0E00               	movlw	0
 18139  007612  0100               	movlb	0	; () banked
 18140  007614  6F65               	movwf	(int2string@number_to_display_temp+1)& (0+255),b
 18141  007616  0E00               	movlw	0
 18142  007618  6F64               	movwf	int2string@number_to_display_temp& (0+255),b
 18143                           
 18144                           ; BSR set to: 0
 18145                           ;menu.c: 91: if(number < 0) {
 18146  00761A  AF61               	btfss	(int2string@number+1)& (0+255),7,b
 18147  00761C  D00E               	goto	l3463
 18148                           
 18149                           ; BSR set to: 0
 18150                           ;menu.c: 92: isNegative = 1;
 18151  00761E  8001               	bsf	int2string@isNegative/(0+8),int2string@isNegative& (0+7),c
 18152                           
 18153                           ;menu.c: 93: number_to_display_temp = (0 - number);
 18154  007620  C060  F062         	movff	int2string@number,??_int2string
 18155  007624  C061  F063         	movff	int2string@number+1,??_int2string+1
 18156  007628  1F62               	comf	??_int2string& (0+255),f,b
 18157  00762A  1F63               	comf	(??_int2string+1)& (0+255),f,b
 18158  00762C  4B62               	infsnz	??_int2string& (0+255),f,b
 18159  00762E  2B63               	incf	(??_int2string+1)& (0+255),f,b
 18160  007630  C062  F064         	movff	??_int2string,int2string@number_to_display_temp
 18161  007634  C063  F065         	movff	??_int2string+1,int2string@number_to_display_temp+1
 18162                           
 18163                           ;menu.c: 94: }
 18164  007638  D005               	goto	l3464
 18165  00763A                     l3463:
 18166                           
 18167                           ; BSR set to: 0
 18168                           ;menu.c: 95: else {
 18169                           ;menu.c: 96: isNegative = 0;
 18170  00763A  9001               	bcf	int2string@isNegative/(0+8),int2string@isNegative& (0+7),c
 18171                           
 18172                           ;menu.c: 97: number_to_display_temp = number;
 18173  00763C  C060  F064         	movff	int2string@number,int2string@number_to_display_temp
 18174  007640  C061  F065         	movff	int2string@number+1,int2string@number_to_display_temp+1
 18175  007644                     l3464:
 18176                           
 18177                           ; BSR set to: 0
 18178                           ;menu.c: 98: }
 18179                           ;menu.c: 101: if(isNegative) {
 18180  007644  A001               	btfss	int2string@isNegative/(0+8),int2string@isNegative& (0+7),c
 18181  007646  D002               	goto	l3465
 18182                           
 18183                           ; BSR set to: 0
 18184                           ;menu.c: 102: string2display[0] = '-';
 18185  007648  0E2D               	movlw	45
 18186  00764A  D001               	goto	L4
 18187  00764C                     l3465:
 18188                           
 18189                           ;menu.c: 104: else{string2display[0] = ' ';}
 18190                           
 18191                           ; BSR set to: 1
 18192  00764C  0E20               	movlw	32
 18193  00764E                     L4:
 18194  00764E  0101               	movlb	1	; () banked
 18195  007650  6F92               	movwf	_string2display& (0+255),b
 18196                           
 18197                           ; BSR set to: 1
 18198                           ;menu.c: 107: string2display[1] = 48 + ((number_to_display_temp / 100) % 10);
 18199                           
 18200                           ; BSR set to: 1
 18201  007652  0E0A               	movlw	10
 18202  007654  6EE6               	movwf	postinc1,c
 18203  007656  0E00               	movlw	0
 18204  007658  6EE6               	movwf	postinc1,c
 18205  00765A  0E64               	movlw	100
 18206  00765C  6EE6               	movwf	postinc1,c
 18207  00765E  0E00               	movlw	0
 18208  007660  6EE6               	movwf	postinc1,c
 18209  007662  C064  FFE6         	movff	int2string@number_to_display_temp,postinc1
 18210  007666  C065  FFE6         	movff	int2string@number_to_display_temp+1,postinc1
 18211  00766A  EC9C  F030         	call	___awdiv	;wreg free
 18212  00766E  C03F  FFE6         	movff	btemp,postinc1
 18213  007672  C040  FFE6         	movff	btemp+1,postinc1
 18214  007676  EC72  F034         	call	___awmod	;wreg free
 18215  00767A  503F               	movf	btemp,w,c
 18216  00767C  0F30               	addlw	48
 18217  00767E  0101               	movlb	1	; () banked
 18218  007680  6F93               	movwf	(_string2display+1)& (0+255),b
 18219                           
 18220                           ; BSR set to: 1
 18221                           ;menu.c: 108: string2display[2] = 48 + ((number_to_display_temp / 10) % 10);
 18222  007682  0E0A               	movlw	10
 18223  007684  6EE6               	movwf	postinc1,c
 18224  007686  0E00               	movlw	0
 18225  007688  6EE6               	movwf	postinc1,c
 18226  00768A  0E0A               	movlw	10
 18227  00768C  6EE6               	movwf	postinc1,c
 18228  00768E  0E00               	movlw	0
 18229  007690  6EE6               	movwf	postinc1,c
 18230  007692  C064  FFE6         	movff	int2string@number_to_display_temp,postinc1
 18231  007696  C065  FFE6         	movff	int2string@number_to_display_temp+1,postinc1
 18232  00769A  EC9C  F030         	call	___awdiv	;wreg free
 18233  00769E  C03F  FFE6         	movff	btemp,postinc1
 18234  0076A2  C040  FFE6         	movff	btemp+1,postinc1
 18235  0076A6  EC72  F034         	call	___awmod	;wreg free
 18236  0076AA  503F               	movf	btemp,w,c
 18237  0076AC  0F30               	addlw	48
 18238  0076AE  0101               	movlb	1	; () banked
 18239  0076B0  6F94               	movwf	(_string2display+2)& (0+255),b
 18240                           
 18241                           ; BSR set to: 1
 18242                           ;menu.c: 109: string2display[3] = 48 + (number_to_display_temp % 10);
 18243  0076B2  0E0A               	movlw	10
 18244  0076B4  6EE6               	movwf	postinc1,c
 18245  0076B6  0E00               	movlw	0
 18246  0076B8  6EE6               	movwf	postinc1,c
 18247  0076BA  C064  FFE6         	movff	int2string@number_to_display_temp,postinc1
 18248  0076BE  C065  FFE6         	movff	int2string@number_to_display_temp+1,postinc1
 18249  0076C2  EC72  F034         	call	___awmod	;wreg free
 18250  0076C6  503F               	movf	btemp,w,c
 18251  0076C8  0F30               	addlw	48
 18252  0076CA  0101               	movlb	1	; () banked
 18253  0076CC  6F95               	movwf	(_string2display+3)& (0+255),b
 18254                           
 18255                           ; BSR set to: 1
 18256                           ;menu.c: 110: string2display[4] = '\0';
 18257  0076CE  0E00               	movlw	0
 18258  0076D0  6F96               	movwf	(_string2display+4)& (0+255),b
 18259                           
 18260                           ; BSR set to: 1
 18261  0076D2  0012               	return		;funcret
 18262  0076D4                     __end_of_int2string:
 18263                           	opt stack 0
 18264                           tblptru	equ	0xFF8
 18265                           tblptrh	equ	0xFF7
 18266                           tblptrl	equ	0xFF6
 18267                           tablat	equ	0xFF5
 18268                           prodh	equ	0xFF4
 18269                           prodl	equ	0xFF3
 18270                           intcon	equ	0xFF2
 18271                           intcon2	equ	0xFF1
 18272                           postinc0	equ	0xFEE
 18273                           wreg	equ	0xFE8
 18274                           postinc1	equ	0xFE6
 18275                           indf2	equ	0xFDF
 18276                           postinc2	equ	0xFDE
 18277                           postdec2	equ	0xFDD
 18278                           plusw2	equ	0xFDB
 18279                           fsr2h	equ	0xFDA
 18280                           fsr2l	equ	0xFD9
 18281                           status	equ	0xFD8
 18282                           
 18283 ;; *************** function ___awdiv *****************
 18284 ;; Defined at:
 18285 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 18286 ;; Parameters:    Size  Location     Type
 18287 ;;  dividend        2  [STACK] int 
 18288 ;;  divisor         2  [STACK] int 
 18289 ;; Auto vars:     Size  Location     Type
 18290 ;;  quotient        2  [STACK] int 
 18291 ;;  sign            1  [STACK] unsigned char 
 18292 ;;  counter         1  [STACK] unsigned char 
 18293 ;; Return value:  Size  Location     Type
 18294 ;;                  2  [STACK] int 
 18295 ;; Registers used:
 18296 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl
 18297 ;; Tracked objects:
 18298 ;;		On entry : 3E/1
 18299 ;;		On exit  : 0/0
 18300 ;;		Unchanged: 0/0
 18301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18305 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18306 ;;Total ram usage:        0 bytes
 18307 ;; Hardware stack levels used:    1
 18308 ;; Hardware stack levels required when called:    5
 18309 ;; This function calls:
 18310 ;;		Nothing
 18311 ;; This function is called by:
 18312 ;;		_displayDigits
 18313 ;;		_int2string
 18314 ;; This function uses a reentrant model
 18315 ;;
 18316                           
 18317                           	psect	text55
 18318  006138                     __ptext55:
 18319                           	opt stack 0
 18320  006138                     ___awdiv:
 18321                           	opt stack 0
 18322                           
 18323                           ; BSR set to: 1
 18324                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
 18325  006138  52E6               	movf	postinc1,f,c
 18326  00613A  52E6               	movf	postinc1,f,c
 18327  00613C  52E6               	movf	postinc1,f,c
 18328  00613E  52E6               	movf	postinc1,f,c
 18329                           
 18330                           ;stkvar	___awdiv@sign @ sp[(-4)+2]
 18331                           
 18332                           ;incstack = 0
 18333  006140  0EFE               	movlw	-2
 18334  006142  6AE3               	clrf	plusw1,c
 18335                           
 18336                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18337  006144  0EF9               	movlw	-7
 18338  006146  AEE3               	btfss	plusw1,7,c
 18339  006148  D009               	goto	l32619
 18340                           
 18341                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18342                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18343  00614A  0EF8               	movlw	-8
 18344  00614C  6CE3               	negf	plusw1,c
 18345  00614E  0EF9               	movlw	-7
 18346  006150  1EE3               	comf	plusw1,f,c
 18347  006152  B0D8               	btfsc	status,0,c
 18348  006154  2AE3               	incf	plusw1,f,c
 18349                           
 18350                           ;stkvar	___awdiv@sign @ sp[(-4)+2]
 18351  006156  0EFE               	movlw	-2
 18352  006158  6AE3               	clrf	plusw1,c
 18353  00615A  2AE3               	incf	plusw1,f,c
 18354  00615C                     l32619:
 18355                           
 18356                           ;stkvar	___awdiv@dividend @ sp[(-4)+-2]
 18357  00615C  0EFB               	movlw	-5
 18358  00615E  AEE3               	btfss	plusw1,7,c
 18359  006160  D008               	goto	l32625
 18360                           
 18361                           ;stkvar	___awdiv@dividend @ sp[(-4)+-2]
 18362                           ;stkvar	___awdiv@dividend @ sp[(-4)+-2]
 18363  006162  0EFA               	movlw	-6
 18364  006164  6CE3               	negf	plusw1,c
 18365  006166  0EFB               	movlw	-5
 18366  006168  1EE3               	comf	plusw1,f,c
 18367  00616A  B0D8               	btfsc	status,0,c
 18368  00616C  2AE3               	incf	plusw1,f,c
 18369                           
 18370                           ;stkvar	___awdiv@sign @ sp[(-4)+2]
 18371  00616E  0EFE               	movlw	-2
 18372  006170  70E3               	btg	plusw1,0,c
 18373  006172                     l32625:
 18374                           
 18375                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
 18376  006172  0EFC               	movlw	-4
 18377  006174  6AE3               	clrf	plusw1,c
 18378  006176  0EFD               	movlw	-3
 18379  006178  6AE3               	clrf	plusw1,c
 18380                           
 18381                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18382  00617A  0EF8               	movlw	-8
 18383  00617C  CFE3 F03F          	movff	plusw1,btemp
 18384  006180  0EF9               	movlw	-7
 18385  006182  50E3               	movf	plusw1,w,c
 18386  006184  103F               	iorwf	btemp,w,c
 18387  006186  B4D8               	btfsc	status,2,c
 18388  006188  D05B               	goto	u59190
 18389                           
 18390                           ;stkvar	___awdiv@counter @ sp[(-4)+3]
 18391  00618A  0EFF               	movlw	-1
 18392  00618C  6AE3               	clrf	plusw1,c
 18393  00618E  D010               	goto	L5
 18394  006190                     l32631:
 18395                           
 18396                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18397  006190  0EF8               	movlw	-8
 18398  006192  50E3               	movf	plusw1,w,c
 18399  006194  90D8               	bcf	status,0,c
 18400  006196  34E8               	rlcf	wreg,w,c
 18401  006198  6E3F               	movwf	btemp,c
 18402  00619A  0EF8               	movlw	-8
 18403  00619C  C03F  FFE3         	movff	btemp,plusw1
 18404  0061A0  0EF9               	movlw	-7
 18405  0061A2  50E3               	movf	plusw1,w,c
 18406  0061A4  34E8               	rlcf	wreg,w,c
 18407  0061A6  6E3F               	movwf	btemp,c
 18408  0061A8  0EF9               	movlw	-7
 18409  0061AA  C03F  FFE3         	movff	btemp,plusw1
 18410                           
 18411                           ;stkvar	___awdiv@counter @ sp[(-4)+3]
 18412  0061AE  0EFF               	movlw	-1
 18413  0061B0                     L5:
 18414  0061B0  2AE3               	incf	plusw1,f,c
 18415                           
 18416                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18417  0061B2  0EF9               	movlw	-7
 18418  0061B4  AEE3               	btfss	plusw1,7,c
 18419  0061B6  D7EC               	goto	l32631
 18420  0061B8                     u59170:
 18421                           
 18422                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
 18423  0061B8  0EFC               	movlw	-4
 18424  0061BA  50E3               	movf	plusw1,w,c
 18425  0061BC  90D8               	bcf	status,0,c
 18426  0061BE  34E8               	rlcf	wreg,w,c
 18427  0061C0  6E3F               	movwf	btemp,c
 18428  0061C2  0EFC               	movlw	-4
 18429  0061C4  C03F  FFE3         	movff	btemp,plusw1
 18430  0061C8  0EFD               	movlw	-3
 18431  0061CA  50E3               	movf	plusw1,w,c
 18432  0061CC  34E8               	rlcf	wreg,w,c
 18433  0061CE  6E3F               	movwf	btemp,c
 18434  0061D0  0EFD               	movlw	-3
 18435  0061D2  C03F  FFE3         	movff	btemp,plusw1
 18436                           
 18437                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18438  0061D6  0EF8               	movlw	-8
 18439  0061D8  CFE3 F040          	movff	plusw1,btemp+1
 18440  0061DC  0EF9               	movlw	-7
 18441  0061DE  CFE3 F041          	movff	plusw1,btemp+2
 18442                           
 18443                           ;stkvar	___awdiv@dividend @ sp[(-4)+-2]
 18444  0061E2  0EFA               	movlw	-6
 18445  0061E4  CFE3 F049          	movff	plusw1,btemp+10
 18446  0061E8  0EFB               	movlw	-5
 18447  0061EA  CFE3 F04A          	movff	plusw1,btemp+11
 18448  0061EE  5040               	movf	btemp+1,w,c
 18449  0061F0  5C49               	subwf	btemp+10,w,c
 18450  0061F2  5041               	movf	btemp+2,w,c
 18451  0061F4  584A               	subwfb	btemp+11,w,c
 18452  0061F6  A0D8               	btfss	status,0,c
 18453  0061F8  D014               	goto	l32645
 18454                           
 18455                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18456                           ;stkvar	___awdiv@dividend @ sp[(-4)+-2]
 18457  0061FA  0EFA               	movlw	-6
 18458  0061FC  50E3               	movf	plusw1,w,c
 18459  0061FE  6E3F               	movwf	btemp,c
 18460  006200  0EF8               	movlw	-8
 18461  006202  50E3               	movf	plusw1,w,c
 18462  006204  5E3F               	subwf	btemp,f,c
 18463  006206  0EFA               	movlw	-6
 18464  006208  C03F  FFE3         	movff	btemp,plusw1
 18465  00620C  0EFB               	movlw	-5
 18466  00620E  50E3               	movf	plusw1,w,c
 18467  006210  6E3F               	movwf	btemp,c
 18468  006212  0EF9               	movlw	-7
 18469  006214  50E3               	movf	plusw1,w,c
 18470  006216  5A3F               	subwfb	btemp,f,c
 18471  006218  0EFB               	movlw	-5
 18472  00621A  C03F  FFE3         	movff	btemp,plusw1
 18473                           
 18474                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
 18475  00621E  0EFC               	movlw	-4
 18476  006220  80E3               	bsf	plusw1,0,c
 18477  006222                     l32645:
 18478                           
 18479                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18480  006222  90D8               	bcf	status,0,c
 18481  006224  0EF9               	movlw	-7
 18482  006226  32E3               	rrcf	plusw1,f,c
 18483  006228  0EF8               	movlw	-8
 18484  00622A  32E3               	rrcf	plusw1,f,c
 18485                           
 18486                           ;stkvar	___awdiv@counter @ sp[(-4)+3]
 18487  00622C  0EFF               	movlw	-1
 18488  00622E  50E3               	movf	plusw1,w,c
 18489  006230  6E3F               	movwf	btemp,c
 18490  006232  0E01               	movlw	1
 18491  006234  5E3F               	subwf	btemp,f,c
 18492  006236  0EFF               	movlw	-1
 18493  006238  C03F  FFE3         	movff	btemp,plusw1
 18494  00623C  A4D8               	btfss	status,2,c
 18495  00623E  D7BC               	goto	u59170
 18496  006240                     u59190:
 18497                           
 18498                           ;stkvar	___awdiv@sign @ sp[(-4)+2]
 18499  006240  0EFE               	movlw	-2
 18500  006242  50E3               	movf	plusw1,w,c
 18501  006244  B4D8               	btfsc	status,2,c
 18502  006246  D006               	goto	l32653
 18503                           
 18504                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
 18505                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
 18506  006248  0EFC               	movlw	-4
 18507  00624A  6CE3               	negf	plusw1,c
 18508  00624C  0EFD               	movlw	-3
 18509  00624E  1EE3               	comf	plusw1,f,c
 18510  006250  B0D8               	btfsc	status,0,c
 18511  006252  2AE3               	incf	plusw1,f,c
 18512  006254                     l32653:
 18513                           
 18514                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
 18515  006254  0EFC               	movlw	-4
 18516  006256  CFE3 F03F          	movff	plusw1,btemp
 18517  00625A  0EFD               	movlw	-3
 18518  00625C  CFE3 F040          	movff	plusw1,btemp+1
 18519                           
 18520                           ; ___awdiv: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
 18521  006260  0EF8               	movlw	248
 18522  006262  26E1               	addwf	fsr1l,f,c
 18523  006264  0EFF               	movlw	255
 18524  006266  22E2               	addwfc	fsr1h,f,c
 18525  006268  0012               	return		;funcret
 18526  00626A                     __end_of___awdiv:
 18527                           	opt stack 0
 18528                           tblptru	equ	0xFF8
 18529                           tblptrh	equ	0xFF7
 18530                           tblptrl	equ	0xFF6
 18531                           tablat	equ	0xFF5
 18532                           prodh	equ	0xFF4
 18533                           prodl	equ	0xFF3
 18534                           intcon	equ	0xFF2
 18535                           intcon2	equ	0xFF1
 18536                           postinc0	equ	0xFEE
 18537                           wreg	equ	0xFE8
 18538                           postinc1	equ	0xFE6
 18539                           plusw1	equ	0xFE3
 18540                           fsr1h	equ	0xFE2
 18541                           fsr1l	equ	0xFE1
 18542                           indf2	equ	0xFDF
 18543                           postinc2	equ	0xFDE
 18544                           postdec2	equ	0xFDD
 18545                           plusw2	equ	0xFDB
 18546                           fsr2h	equ	0xFDA
 18547                           fsr2l	equ	0xFD9
 18548                           status	equ	0xFD8
 18549                           
 18550 ;; *************** function _Function_C_1 *****************
 18551 ;; Defined at:
 18552 ;;		line 619 in file "menu.c"
 18553 ;; Parameters:    Size  Location     Type
 18554 ;;		None
 18555 ;; Auto vars:     Size  Location     Type
 18556 ;;		None
 18557 ;; Return value:  Size  Location     Type
 18558 ;;                  1    wreg      void 
 18559 ;; Registers used:
 18560 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18561 ;; Tracked objects:
 18562 ;;		On entry : 0/0
 18563 ;;		On exit  : 0/0
 18564 ;;		Unchanged: 0/0
 18565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18569 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18570 ;;Total ram usage:        0 bytes
 18571 ;; Hardware stack levels used:    1
 18572 ;; Hardware stack levels required when called:   16
 18573 ;; This function calls:
 18574 ;;		_Lcd_Print_String
 18575 ;;		___lbmod
 18576 ;;		___wmul
 18577 ;;		_clear_row1
 18578 ;;		_clear_row2
 18579 ;;		_un_block_code
 18580 ;; This function is called by:
 18581 ;;		_Function_C
 18582 ;; This function uses a non-reentrant model
 18583 ;;
 18584                           
 18585                           	psect	text56
 18586  008234                     __ptext56:
 18587                           	opt stack 0
 18588  008234                     _Function_C_1:
 18589                           	opt stack 12
 18590                           
 18591                           ;menu.c: 621: which_screen = DRUMS_CC_TYPE_MENU;
 18592                           
 18593                           ;incstack = 0
 18594  008234  0E0C               	movlw	12
 18595  008236  6E4F               	movwf	_which_screen,c
 18596                           
 18597                           ;menu.c: 622: lcd_print_once = 0;
 18598  008238  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18599                           
 18600                           ;menu.c: 623: encoder_click = 0;
 18601  00823A  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 18602                           
 18603                           ;menu.c: 625: drumCCTypeMenu.selector = CONTROL_MODE;
 18604  00823C  0E00               	movlw	0
 18605  00823E  B601               	btfsc	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 18606  008240  0E01               	movlw	1
 18607  008242  0101               	movlb	1	; () banked
 18608  008244  6F64               	movwf	(_drumCCTypeMenu+2)& (0+255),b
 18609                           
 18610                           ;menu.c: 627: while(encoder_click == 0) {
 18611  008246  D02D               	goto	l3607
 18612  008248                     
 18613                           ;menu.c: 631: un_block_code();
 18614                           
 18615                           ; BSR set to: 1
 18616  008248  ECAB  F04C         	call	_un_block_code	;wreg free
 18617                           
 18618                           ;menu.c: 633: if (lcd_print_once == 0) {
 18619  00824C  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18620  00824E  D028               	goto	l3609
 18621                           
 18622                           ;menu.c: 634: clear_row1();
 18623  008250  EC16  F04C         	call	_clear_row1	;wreg free
 18624                           
 18625                           ;menu.c: 635: Lcd_Print_String("Drum CC Mode:");
 18626  008254  0EE0               	movlw	low STR_27
 18627  008256  0100               	movlb	0	; () banked
 18628  008258  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 18629  00825A  0EFE               	movlw	high STR_27
 18630  00825C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18631  00825E  EC74  F042         	call	_Lcd_Print_String	;wreg free
 18632                           
 18633                           ;menu.c: 636: clear_row2();
 18634  008262  EC02  F04C         	call	_clear_row2	;wreg free
 18635                           
 18636                           ;menu.c: 637: Lcd_Print_String(LCD_STRINGS[(drumCCTypeMenu.selector % drumCCTypeMenu.num
      +                          ber) + drumCCTypeMenu.address]);
 18637  008266  0101               	movlb	1	; () banked
 18638  008268  5162               	movf	_drumCCTypeMenu& (0+255),w,b
 18639  00826A  6EE6               	movwf	postinc1,c
 18640  00826C  5164               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 18641  00826E  6EE6               	movwf	postinc1,c
 18642  008270  EC61  F041         	call	___lbmod	;wreg free
 18643  008274  503F               	movf	btemp,w,c
 18644  008276  0101               	movlb	1	; () banked
 18645  008278  2563               	addwf	(_drumCCTypeMenu+1)& (0+255),w,b
 18646  00827A  0100               	movlb	0	; () banked
 18647  00827C  6F60               	movwf	___wmul@multiplier& (0+255),b
 18648  00827E  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 18649  008280  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 18650  008282  0E00               	movlw	0
 18651  008284  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18652  008286  0E11               	movlw	17
 18653  008288  6F62               	movwf	___wmul@multiplicand& (0+255),b
 18654  00828A  EC2A  F04C         	call	___wmul	;wreg free
 18655  00828E  0E9E               	movlw	low _LCD_STRINGS
 18656  008290  0100               	movlb	0	; () banked
 18657  008292  2560               	addwf	?___wmul& (0+255),w,b
 18658  008294  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 18659  008296  0EF3               	movlw	high _LCD_STRINGS
 18660  008298  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 18661  00829A  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18662  00829C  EC74  F042         	call	_Lcd_Print_String	;wreg free
 18663  0082A0                     l3609:
 18664                           
 18665                           ;menu.c: 638: }
 18666                           ;menu.c: 639: lcd_print_once = 1;
 18667  0082A0  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18668  0082A2                     l3607:
 18669  0082A2  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 18670  0082A4  D7D1               	goto	l3608
 18671                           
 18672                           ;menu.c: 640: }
 18673                           ;menu.c: 642: CONTROL_MODE = drumCCTypeMenu.selector % drumCCTypeMenu.number;
 18674  0082A6  0101               	movlb	1	; () banked
 18675  0082A8  5162               	movf	_drumCCTypeMenu& (0+255),w,b
 18676  0082AA  6EE6               	movwf	postinc1,c
 18677  0082AC  5164               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 18678  0082AE  6EE6               	movwf	postinc1,c
 18679  0082B0  EC61  F041         	call	___lbmod	;wreg free
 18680  0082B4  303F               	rrcf	btemp,w,c
 18681  0082B6  A0D8               	btfss	status,0,c
 18682  0082B8  D002               	goto	u58240
 18683  0082BA  8601               	bsf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 18684  0082BC  0012               	return	
 18685  0082BE                     u58240:
 18686  0082BE  9601               	bcf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 18687  0082C0  0012               	return		;funcret
 18688  0082C2                     __end_of_Function_C_1:
 18689                           	opt stack 0
 18690                           tblptru	equ	0xFF8
 18691                           tblptrh	equ	0xFF7
 18692                           tblptrl	equ	0xFF6
 18693                           tablat	equ	0xFF5
 18694                           prodh	equ	0xFF4
 18695                           prodl	equ	0xFF3
 18696                           intcon	equ	0xFF2
 18697                           intcon2	equ	0xFF1
 18698                           postinc0	equ	0xFEE
 18699                           wreg	equ	0xFE8
 18700                           postinc1	equ	0xFE6
 18701                           plusw1	equ	0xFE3
 18702                           fsr1h	equ	0xFE2
 18703                           fsr1l	equ	0xFE1
 18704                           indf2	equ	0xFDF
 18705                           postinc2	equ	0xFDE
 18706                           postdec2	equ	0xFDD
 18707                           plusw2	equ	0xFDB
 18708                           fsr2h	equ	0xFDA
 18709                           fsr2l	equ	0xFD9
 18710                           status	equ	0xFD8
 18711                           
 18712 ;; *************** function _Function_B *****************
 18713 ;; Defined at:
 18714 ;;		line 596 in file "menu.c"
 18715 ;; Parameters:    Size  Location     Type
 18716 ;;		None
 18717 ;; Auto vars:     Size  Location     Type
 18718 ;;		None
 18719 ;; Return value:  Size  Location     Type
 18720 ;;                  1    wreg      void 
 18721 ;; Registers used:
 18722 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18723 ;; Tracked objects:
 18724 ;;		On entry : 0/0
 18725 ;;		On exit  : 0/0
 18726 ;;		Unchanged: 0/0
 18727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18731 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18732 ;;Total ram usage:        0 bytes
 18733 ;; Hardware stack levels used:    1
 18734 ;; Hardware stack levels required when called:   16
 18735 ;; This function calls:
 18736 ;;		_Lcd_Print_String
 18737 ;;		___lbmod
 18738 ;;		___wmul
 18739 ;;		_clear_row2
 18740 ;;		_un_block_code
 18741 ;; This function is called by:
 18742 ;;		_menu_lcd
 18743 ;; This function uses a non-reentrant model
 18744 ;;
 18745                           
 18746                           	psect	text57
 18747  008860                     __ptext57:
 18748                           	opt stack 0
 18749  008860                     _Function_B:
 18750                           	opt stack 13
 18751                           
 18752                           ;menu.c: 598: which_screen = TRANSPOSE_MENU;
 18753                           
 18754                           ;incstack = 0
 18755  008860  0E04               	movlw	4
 18756  008862  6E4F               	movwf	_which_screen,c
 18757                           
 18758                           ;menu.c: 599: lcd_print_once = 0;
 18759  008864  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18760                           
 18761                           ;menu.c: 601: transposeMenu.selector = TRANSPOSE_MODE;
 18762  008866  0E00               	movlw	0
 18763  008868  BA04               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 18764  00886A  0E01               	movlw	1
 18765  00886C  0101               	movlb	1	; () banked
 18766  00886E  6F6A               	movwf	(_transposeMenu+2)& (0+255),b
 18767                           
 18768                           ;menu.c: 603: while(encoder_click == 0) {
 18769  008870  D031               	goto	l3600
 18770  008872                     
 18771                           ;menu.c: 607: un_block_code();
 18772                           
 18773                           ; BSR set to: 1
 18774  008872  ECAB  F04C         	call	_un_block_code	;wreg free
 18775                           
 18776                           ;menu.c: 609: if (lcd_print_once == 0) {
 18777  008876  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18778  008878  D02C               	goto	u59935
 18779                           
 18780                           ;menu.c: 610: clear_row2();
 18781  00887A  EC02  F04C         	call	_clear_row2	;wreg free
 18782                           
 18783                           ;menu.c: 611: Lcd_Print_String(LCD_STRINGS[(transposeMenu.selector % transposeMenu.numbe
      +                          r) + transposeMenu.address]);
 18784  00887E  0101               	movlb	1	; () banked
 18785  008880  5168               	movf	_transposeMenu& (0+255),w,b
 18786  008882  6EE6               	movwf	postinc1,c
 18787  008884  516A               	movf	(_transposeMenu+2)& (0+255),w,b
 18788  008886  6EE6               	movwf	postinc1,c
 18789  008888  EC61  F041         	call	___lbmod	;wreg free
 18790  00888C  503F               	movf	btemp,w,c
 18791  00888E  0101               	movlb	1	; () banked
 18792  008890  2569               	addwf	(_transposeMenu+1)& (0+255),w,b
 18793  008892  0100               	movlb	0	; () banked
 18794  008894  6F60               	movwf	___wmul@multiplier& (0+255),b
 18795  008896  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 18796  008898  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 18797  00889A  0E00               	movlw	0
 18798  00889C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18799  00889E  0E11               	movlw	17
 18800  0088A0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 18801  0088A2  EC2A  F04C         	call	___wmul	;wreg free
 18802  0088A6  0E9E               	movlw	low _LCD_STRINGS
 18803  0088A8  0100               	movlb	0	; () banked
 18804  0088AA  2560               	addwf	?___wmul& (0+255),w,b
 18805  0088AC  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 18806  0088AE  0EF3               	movlw	high _LCD_STRINGS
 18807  0088B0  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 18808  0088B2  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18809  0088B4  EC74  F042         	call	_Lcd_Print_String	;wreg free
 18810                           
 18811                           ;menu.c: 612: TRANSPOSE_MODE = transposeMenu.selector % transposeMenu.number;
 18812  0088B8  0101               	movlb	1	; () banked
 18813  0088BA  5168               	movf	_transposeMenu& (0+255),w,b
 18814  0088BC  6EE6               	movwf	postinc1,c
 18815  0088BE  516A               	movf	(_transposeMenu+2)& (0+255),w,b
 18816  0088C0  6EE6               	movwf	postinc1,c
 18817  0088C2  EC61  F041         	call	___lbmod	;wreg free
 18818  0088C6  303F               	rrcf	btemp,w,c
 18819  0088C8  A0D8               	btfss	status,0,c
 18820  0088CA  D002               	goto	u59920
 18821  0088CC  8A04               	bsf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 18822  0088CE  D001               	goto	u59935
 18823  0088D0                     u59920:
 18824  0088D0  9A04               	bcf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 18825  0088D2                     u59935:
 18826                           
 18827                           ;menu.c: 613: }
 18828                           ;menu.c: 614: lcd_print_once = 1;
 18829  0088D2  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18830  0088D4                     l3600:
 18831  0088D4  B205               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 18832  0088D6  0012               	return	
 18833  0088D8  D7CC               	goto	l3601
 18834  0088DA                     __end_of_Function_B:
 18835                           	opt stack 0
 18836                           tblptru	equ	0xFF8
 18837                           tblptrh	equ	0xFF7
 18838                           tblptrl	equ	0xFF6
 18839                           tablat	equ	0xFF5
 18840                           prodh	equ	0xFF4
 18841                           prodl	equ	0xFF3
 18842                           intcon	equ	0xFF2
 18843                           intcon2	equ	0xFF1
 18844                           postinc0	equ	0xFEE
 18845                           wreg	equ	0xFE8
 18846                           postinc1	equ	0xFE6
 18847                           plusw1	equ	0xFE3
 18848                           fsr1h	equ	0xFE2
 18849                           fsr1l	equ	0xFE1
 18850                           indf2	equ	0xFDF
 18851                           postinc2	equ	0xFDE
 18852                           postdec2	equ	0xFDD
 18853                           plusw2	equ	0xFDB
 18854                           fsr2h	equ	0xFDA
 18855                           fsr2l	equ	0xFD9
 18856                           status	equ	0xFD8
 18857                           
 18858 ;; *************** function _Function_A *****************
 18859 ;; Defined at:
 18860 ;;		line 539 in file "menu.c"
 18861 ;; Parameters:    Size  Location     Type
 18862 ;;		None
 18863 ;; Auto vars:     Size  Location     Type
 18864 ;;		None
 18865 ;; Return value:  Size  Location     Type
 18866 ;;                  1    wreg      void 
 18867 ;; Registers used:
 18868 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18869 ;; Tracked objects:
 18870 ;;		On entry : 0/0
 18871 ;;		On exit  : 0/0
 18872 ;;		Unchanged: 0/0
 18873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18876 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18877 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18878 ;;Total ram usage:        0 bytes
 18879 ;; Hardware stack levels used:    1
 18880 ;; Hardware stack levels required when called:   17
 18881 ;; This function calls:
 18882 ;;		_Function_A_1
 18883 ;;		_Function_A_2
 18884 ;;		_Function_A_3
 18885 ;;		_Lcd_Print_String
 18886 ;;		___lbmod
 18887 ;;		___wmul
 18888 ;;		_clear_row2
 18889 ;;		_un_block_code
 18890 ;; This function is called by:
 18891 ;;		_menu_lcd
 18892 ;; This function uses a non-reentrant model
 18893 ;;
 18894                           
 18895                           	psect	text58
 18896  0073AE                     __ptext58:
 18897                           	opt stack 0
 18898  0073AE                     _Function_A:
 18899                           	opt stack 12
 18900                           
 18901                           ;menu.c: 542: which_screen = KEYBOARD_MENU;
 18902                           
 18903                           ;incstack = 0
 18904  0073AE  0E03               	movlw	3
 18905  0073B0  6E4F               	movwf	_which_screen,c
 18906                           
 18907                           ;menu.c: 543: lcd_print_once = 0;
 18908  0073B2  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18909                           
 18910                           ;menu.c: 545: keyboardMenu.selector = KEYBOARD_MODE;
 18911  0073B4  C0F2  F0E7         	movff	_KEYBOARD_MODE,_keyboardMenu+2
 18912                           
 18913                           ;menu.c: 547: while(encoder_click == 0) {
 18914  0073B8  D04B               	goto	l3586
 18915  0073BA                     
 18916                           ;menu.c: 549: un_block_code();
 18917  0073BA  ECAB  F04C         	call	_un_block_code	;wreg free
 18918                           
 18919                           ;menu.c: 551: if (lcd_print_once == 0) {
 18920  0073BE  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18921  0073C0  D042               	goto	l3591
 18922                           
 18923                           ;menu.c: 552: clear_row2();
 18924  0073C2  EC02  F04C         	call	_clear_row2	;wreg free
 18925                           
 18926                           ;menu.c: 553: Lcd_Print_String(LCD_STRINGS[(keyboardMenu.selector % keyboardMenu.number)
      +                           + keyboardMenu.address]);
 18927  0073C6  0100               	movlb	0	; () banked
 18928  0073C8  51E5               	movf	_keyboardMenu& (0+255),w,b
 18929  0073CA  6EE6               	movwf	postinc1,c
 18930  0073CC  51E7               	movf	(_keyboardMenu+2)& (0+255),w,b
 18931  0073CE  6EE6               	movwf	postinc1,c
 18932  0073D0  EC61  F041         	call	___lbmod	;wreg free
 18933  0073D4  503F               	movf	btemp,w,c
 18934  0073D6  0100               	movlb	0	; () banked
 18935  0073D8  25E6               	addwf	(_keyboardMenu+1)& (0+255),w,b
 18936  0073DA  6F60               	movwf	___wmul@multiplier& (0+255),b
 18937  0073DC  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 18938  0073DE  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 18939  0073E0  0E00               	movlw	0
 18940  0073E2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18941  0073E4  0E11               	movlw	17
 18942  0073E6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 18943  0073E8  EC2A  F04C         	call	___wmul	;wreg free
 18944  0073EC  0E9E               	movlw	low _LCD_STRINGS
 18945  0073EE  0100               	movlb	0	; () banked
 18946  0073F0  2560               	addwf	?___wmul& (0+255),w,b
 18947  0073F2  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 18948  0073F4  0EF3               	movlw	high _LCD_STRINGS
 18949  0073F6  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 18950  0073F8  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18951  0073FA  EC74  F042         	call	_Lcd_Print_String	;wreg free
 18952                           
 18953                           ;menu.c: 555: }
 18954                           ;menu.c: 558: while(ON_OFF == 1){
 18955  0073FE  D023               	goto	l3591
 18956  007400                     
 18957                           ;menu.c: 560: un_block_code();
 18958  007400  ECAB  F04C         	call	_un_block_code	;wreg free
 18959                           
 18960                           ;menu.c: 563: if(print_row_2_once == 0){
 18961  007404  BC04               	btfsc	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 18962  007406  D01F               	goto	l3591
 18963                           
 18964                           ;menu.c: 564: clear_row2();
 18965  007408  EC02  F04C         	call	_clear_row2	;wreg free
 18966                           
 18967                           ;menu.c: 565: Lcd_Print_String(LCD_STRINGS[(keyboardMenu.selector % keyboardMenu.number)
      +                           + keyboardMenu.address]);
 18968  00740C  0100               	movlb	0	; () banked
 18969  00740E  51E5               	movf	_keyboardMenu& (0+255),w,b
 18970  007410  6EE6               	movwf	postinc1,c
 18971  007412  51E7               	movf	(_keyboardMenu+2)& (0+255),w,b
 18972  007414  6EE6               	movwf	postinc1,c
 18973  007416  EC61  F041         	call	___lbmod	;wreg free
 18974  00741A  503F               	movf	btemp,w,c
 18975  00741C  0100               	movlb	0	; () banked
 18976  00741E  25E6               	addwf	(_keyboardMenu+1)& (0+255),w,b
 18977  007420  6F60               	movwf	___wmul@multiplier& (0+255),b
 18978  007422  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 18979  007424  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 18980  007426  0E00               	movlw	0
 18981  007428  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18982  00742A  0E11               	movlw	17
 18983  00742C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 18984  00742E  EC2A  F04C         	call	___wmul	;wreg free
 18985  007432  0E9E               	movlw	low _LCD_STRINGS
 18986  007434  0100               	movlb	0	; () banked
 18987  007436  2560               	addwf	?___wmul& (0+255),w,b
 18988  007438  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 18989  00743A  0EF3               	movlw	high _LCD_STRINGS
 18990  00743C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 18991  00743E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18992  007440  EC74  F042         	call	_Lcd_Print_String	;wreg free
 18993                           
 18994                           ;menu.c: 566: print_row_2_once = 1;
 18995  007444  8C04               	bsf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 18996  007446                     l3591:
 18997  007446  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 18998  007448  D7DB               	goto	l3590
 18999                           
 19000                           ;menu.c: 567: }
 19001                           ;menu.c: 568: }
 19002                           ;menu.c: 571: KEYBOARD_MODE = keyboardMenu.selector;
 19003  00744A  C0E7  F0F2         	movff	_keyboardMenu+2,_KEYBOARD_MODE
 19004                           
 19005                           ;menu.c: 573: lcd_print_once = 1;
 19006  00744E  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19007  007450                     l3586:
 19008  007450  A205               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 19009  007452  D7B3               	goto	l3587
 19010                           
 19011                           ;menu.c: 574: }
 19012                           ;menu.c: 579: if(keyboardMenu.selector == MODES) {
 19013  007454  0E03               	movlw	3
 19014  007456  0100               	movlb	0	; () banked
 19015  007458  19E7               	xorwf	(_keyboardMenu+2)& (0+255),w,b
 19016  00745A  B4D8               	btfsc	status,2,c
 19017                           
 19018                           ; BSR set to: 0
 19019                           ;menu.c: 580: Function_A_1();
 19020  00745C  EC6C  F039         	call	_Function_A_1	;wreg free
 19021                           
 19022                           ;menu.c: 581: }
 19023                           ;menu.c: 584: if(keyboardMenu.selector == TRIAD) {
 19024  007460  0E06               	movlw	6
 19025  007462  0100               	movlb	0	; () banked
 19026  007464  19E7               	xorwf	(_keyboardMenu+2)& (0+255),w,b
 19027  007466  B4D8               	btfsc	status,2,c
 19028                           
 19029                           ; BSR set to: 0
 19030                           ;menu.c: 585: Function_A_2();
 19031  007468  EC01  F039         	call	_Function_A_2	;wreg free
 19032                           
 19033                           ;menu.c: 587: }
 19034                           ;menu.c: 589: if(keyboardMenu.selector == SEVENTH){
 19035  00746C  0E09               	movlw	9
 19036  00746E  0100               	movlb	0	; () banked
 19037  007470  19E7               	xorwf	(_keyboardMenu+2)& (0+255),w,b
 19038  007472  A4D8               	btfss	status,2,c
 19039  007474  0012               	return	
 19040                           
 19041                           ; BSR set to: 0
 19042                           ;menu.c: 590: Function_A_3();
 19043  007476  EC96  F038         	call	_Function_A_3	;wreg free
 19044  00747A  0012               	return	
 19045  00747C                     __end_of_Function_A:
 19046                           	opt stack 0
 19047                           tblptru	equ	0xFF8
 19048                           tblptrh	equ	0xFF7
 19049                           tblptrl	equ	0xFF6
 19050                           tablat	equ	0xFF5
 19051                           prodh	equ	0xFF4
 19052                           prodl	equ	0xFF3
 19053                           intcon	equ	0xFF2
 19054                           intcon2	equ	0xFF1
 19055                           postinc0	equ	0xFEE
 19056                           wreg	equ	0xFE8
 19057                           postinc1	equ	0xFE6
 19058                           plusw1	equ	0xFE3
 19059                           fsr1h	equ	0xFE2
 19060                           fsr1l	equ	0xFE1
 19061                           indf2	equ	0xFDF
 19062                           postinc2	equ	0xFDE
 19063                           postdec2	equ	0xFDD
 19064                           plusw2	equ	0xFDB
 19065                           fsr2h	equ	0xFDA
 19066                           fsr2l	equ	0xFD9
 19067                           status	equ	0xFD8
 19068                           
 19069 ;; *************** function _Function_A_3 *****************
 19070 ;; Defined at:
 19071 ;;		line 501 in file "menu.c"
 19072 ;; Parameters:    Size  Location     Type
 19073 ;;		None
 19074 ;; Auto vars:     Size  Location     Type
 19075 ;;		None
 19076 ;; Return value:  Size  Location     Type
 19077 ;;                  1    wreg      void 
 19078 ;; Registers used:
 19079 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19080 ;; Tracked objects:
 19081 ;;		On entry : 0/0
 19082 ;;		On exit  : 0/0
 19083 ;;		Unchanged: 0/0
 19084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19089 ;;Total ram usage:        0 bytes
 19090 ;; Hardware stack levels used:    1
 19091 ;; Hardware stack levels required when called:   16
 19092 ;; This function calls:
 19093 ;;		_Lcd_Print_String
 19094 ;;		___lbmod
 19095 ;;		___wmul
 19096 ;;		_clear_row1
 19097 ;;		_clear_row2
 19098 ;;		_un_block_code
 19099 ;; This function is called by:
 19100 ;;		_Function_A
 19101 ;; This function uses a non-reentrant model
 19102 ;;
 19103                           
 19104                           	psect	text59
 19105  00712C                     __ptext59:
 19106                           	opt stack 0
 19107  00712C                     _Function_A_3:
 19108                           	opt stack 12
 19109                           
 19110                           ;menu.c: 502: KEYBOARD_MODE = SEVENTH;
 19111                           
 19112                           ;incstack = 0
 19113  00712C  0E09               	movlw	9
 19114  00712E  0100               	movlb	0	; () banked
 19115  007130  6FF2               	movwf	_KEYBOARD_MODE& (0+255),b
 19116                           
 19117                           ;menu.c: 503: which_screen = SEVENTHS_MENU;
 19118  007132  0E0B               	movlw	11
 19119  007134  6E4F               	movwf	_which_screen,c
 19120                           
 19121                           ; BSR set to: 0
 19122                           ;menu.c: 504: lcd_print_once = 0;
 19123  007136  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19124                           
 19125                           ; BSR set to: 0
 19126                           ;menu.c: 505: encoder_click = 0;
 19127  007138  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 19128                           
 19129                           ; BSR set to: 0
 19130                           ;menu.c: 507: seventhMenu.selector = which_seventh;
 19131  00713A  C0EF  F16D         	movff	_which_seventh,_seventhMenu+2
 19132                           
 19133                           ;menu.c: 509: while(encoder_click == 0) {
 19134  00713E  D05E               	goto	l3575
 19135  007140                     
 19136                           ; BSR set to: 0
 19137                           ;menu.c: 511: un_block_code();
 19138                           
 19139                           ; BSR set to: 0
 19140  007140  ECAB  F04C         	call	_un_block_code	;wreg free
 19141                           
 19142                           ;menu.c: 513: if (lcd_print_once == 0) {
 19143  007144  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19144  007146  D04D               	goto	l3580
 19145                           
 19146                           ;menu.c: 514: clear_row1();
 19147  007148  EC16  F04C         	call	_clear_row1	;wreg free
 19148                           
 19149                           ;menu.c: 515: Lcd_Print_String("Select Seventh:");
 19150  00714C  0E2D               	movlw	low STR_26
 19151  00714E  0100               	movlb	0	; () banked
 19152  007150  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19153  007152  0EFE               	movlw	high STR_26
 19154  007154  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19155  007156  EC74  F042         	call	_Lcd_Print_String	;wreg free
 19156                           
 19157                           ;menu.c: 516: clear_row2();
 19158  00715A  EC02  F04C         	call	_clear_row2	;wreg free
 19159                           
 19160                           ;menu.c: 517: Lcd_Print_String(LCD_STRINGS[(seventhMenu.selector % seventhMenu.number) +
      +                           seventhMenu.address]);
 19161  00715E  0101               	movlb	1	; () banked
 19162  007160  516B               	movf	_seventhMenu& (0+255),w,b
 19163  007162  6EE6               	movwf	postinc1,c
 19164  007164  516D               	movf	(_seventhMenu+2)& (0+255),w,b
 19165  007166  6EE6               	movwf	postinc1,c
 19166  007168  EC61  F041         	call	___lbmod	;wreg free
 19167  00716C  503F               	movf	btemp,w,c
 19168  00716E  0101               	movlb	1	; () banked
 19169  007170  256C               	addwf	(_seventhMenu+1)& (0+255),w,b
 19170  007172  0100               	movlb	0	; () banked
 19171  007174  6F60               	movwf	___wmul@multiplier& (0+255),b
 19172  007176  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 19173  007178  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19174  00717A  0E00               	movlw	0
 19175  00717C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19176  00717E  0E11               	movlw	17
 19177  007180  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19178  007182  EC2A  F04C         	call	___wmul	;wreg free
 19179  007186  0E9E               	movlw	low _LCD_STRINGS
 19180  007188  0100               	movlb	0	; () banked
 19181  00718A  2560               	addwf	?___wmul& (0+255),w,b
 19182  00718C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19183  00718E  0EF3               	movlw	high _LCD_STRINGS
 19184  007190  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19185  007192  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19186  007194  EC74  F042         	call	_Lcd_Print_String	;wreg free
 19187                           
 19188                           ;menu.c: 518: }
 19189                           ;menu.c: 521: while(ON_OFF == 1){
 19190  007198  D024               	goto	l3580
 19191  00719A                     
 19192                           ;menu.c: 523: un_block_code();
 19193  00719A  ECAB  F04C         	call	_un_block_code	;wreg free
 19194                           
 19195                           ;menu.c: 526: if(print_row_2_once == 0){
 19196  00719E  BC04               	btfsc	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19197  0071A0  D020               	goto	l3580
 19198                           
 19199                           ;menu.c: 527: clear_row2();
 19200  0071A2  EC02  F04C         	call	_clear_row2	;wreg free
 19201                           
 19202                           ;menu.c: 528: Lcd_Print_String(LCD_STRINGS[(seventhMenu.selector % seventhMenu.number) +
      +                           seventhMenu.address]);
 19203  0071A6  0101               	movlb	1	; () banked
 19204  0071A8  516B               	movf	_seventhMenu& (0+255),w,b
 19205  0071AA  6EE6               	movwf	postinc1,c
 19206  0071AC  516D               	movf	(_seventhMenu+2)& (0+255),w,b
 19207  0071AE  6EE6               	movwf	postinc1,c
 19208  0071B0  EC61  F041         	call	___lbmod	;wreg free
 19209  0071B4  503F               	movf	btemp,w,c
 19210  0071B6  0101               	movlb	1	; () banked
 19211  0071B8  256C               	addwf	(_seventhMenu+1)& (0+255),w,b
 19212  0071BA  0100               	movlb	0	; () banked
 19213  0071BC  6F60               	movwf	___wmul@multiplier& (0+255),b
 19214  0071BE  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 19215  0071C0  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19216  0071C2  0E00               	movlw	0
 19217  0071C4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19218  0071C6  0E11               	movlw	17
 19219  0071C8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19220  0071CA  EC2A  F04C         	call	___wmul	;wreg free
 19221  0071CE  0E9E               	movlw	low _LCD_STRINGS
 19222  0071D0  0100               	movlb	0	; () banked
 19223  0071D2  2560               	addwf	?___wmul& (0+255),w,b
 19224  0071D4  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19225  0071D6  0EF3               	movlw	high _LCD_STRINGS
 19226  0071D8  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19227  0071DA  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19228  0071DC  EC74  F042         	call	_Lcd_Print_String	;wreg free
 19229                           
 19230                           ;menu.c: 529: print_row_2_once = 1;
 19231  0071E0  8C04               	bsf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19232  0071E2                     l3580:
 19233  0071E2  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 19234  0071E4  D7DA               	goto	l3579
 19235                           
 19236                           ;menu.c: 530: }
 19237                           ;menu.c: 531: }
 19238                           ;menu.c: 533: which_seventh = seventhMenu.selector % seventhMenu.number;
 19239  0071E6  0101               	movlb	1	; () banked
 19240  0071E8  516B               	movf	_seventhMenu& (0+255),w,b
 19241  0071EA  6EE6               	movwf	postinc1,c
 19242  0071EC  516D               	movf	(_seventhMenu+2)& (0+255),w,b
 19243  0071EE  6EE6               	movwf	postinc1,c
 19244  0071F0  EC61  F041         	call	___lbmod	;wreg free
 19245  0071F4  503F               	movf	btemp,w,c
 19246  0071F6  0100               	movlb	0	; () banked
 19247  0071F8  6FEF               	movwf	_which_seventh& (0+255),b
 19248                           
 19249                           ; BSR set to: 0
 19250                           ;menu.c: 534: lcd_print_once = 1;
 19251  0071FA  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19252  0071FC                     l3575:
 19253                           
 19254                           ; BSR set to: 0
 19255                           
 19256                           ; BSR set to: 0
 19257  0071FC  B205               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 19258  0071FE  0012               	return	
 19259  007200  D79F               	goto	l3576
 19260  007202                     __end_of_Function_A_3:
 19261                           	opt stack 0
 19262                           tblptru	equ	0xFF8
 19263                           tblptrh	equ	0xFF7
 19264                           tblptrl	equ	0xFF6
 19265                           tablat	equ	0xFF5
 19266                           prodh	equ	0xFF4
 19267                           prodl	equ	0xFF3
 19268                           intcon	equ	0xFF2
 19269                           intcon2	equ	0xFF1
 19270                           postinc0	equ	0xFEE
 19271                           wreg	equ	0xFE8
 19272                           postinc1	equ	0xFE6
 19273                           plusw1	equ	0xFE3
 19274                           fsr1h	equ	0xFE2
 19275                           fsr1l	equ	0xFE1
 19276                           indf2	equ	0xFDF
 19277                           postinc2	equ	0xFDE
 19278                           postdec2	equ	0xFDD
 19279                           plusw2	equ	0xFDB
 19280                           fsr2h	equ	0xFDA
 19281                           fsr2l	equ	0xFD9
 19282                           status	equ	0xFD8
 19283                           
 19284 ;; *************** function _Function_A_2 *****************
 19285 ;; Defined at:
 19286 ;;		line 462 in file "menu.c"
 19287 ;; Parameters:    Size  Location     Type
 19288 ;;		None
 19289 ;; Auto vars:     Size  Location     Type
 19290 ;;		None
 19291 ;; Return value:  Size  Location     Type
 19292 ;;                  1    wreg      void 
 19293 ;; Registers used:
 19294 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19295 ;; Tracked objects:
 19296 ;;		On entry : 0/0
 19297 ;;		On exit  : 0/0
 19298 ;;		Unchanged: 0/0
 19299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19304 ;;Total ram usage:        0 bytes
 19305 ;; Hardware stack levels used:    1
 19306 ;; Hardware stack levels required when called:   16
 19307 ;; This function calls:
 19308 ;;		_Lcd_Print_String
 19309 ;;		___lbmod
 19310 ;;		___wmul
 19311 ;;		_clear_row1
 19312 ;;		_clear_row2
 19313 ;;		_un_block_code
 19314 ;; This function is called by:
 19315 ;;		_Function_A
 19316 ;; This function uses a non-reentrant model
 19317 ;;
 19318                           
 19319                           	psect	text60
 19320  007202                     __ptext60:
 19321                           	opt stack 0
 19322  007202                     _Function_A_2:
 19323                           	opt stack 12
 19324                           
 19325                           ;menu.c: 464: KEYBOARD_MODE = TRIAD;
 19326                           
 19327                           ; BSR set to: 0
 19328                           ;incstack = 0
 19329  007202  0E06               	movlw	6
 19330  007204  0100               	movlb	0	; () banked
 19331  007206  6FF2               	movwf	_KEYBOARD_MODE& (0+255),b
 19332                           
 19333                           ;menu.c: 465: which_screen = TRIADS_MENU;
 19334  007208  0E0A               	movlw	10
 19335  00720A  6E4F               	movwf	_which_screen,c
 19336                           
 19337                           ; BSR set to: 0
 19338                           ;menu.c: 466: lcd_print_once = 0;
 19339  00720C  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19340                           
 19341                           ; BSR set to: 0
 19342                           ;menu.c: 467: encoder_click = 0;
 19343  00720E  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 19344                           
 19345                           ; BSR set to: 0
 19346                           ;menu.c: 469: triadMenu.selector = which_triad;
 19347  007210  C0F0  F170         	movff	_which_triad,_triadMenu+2
 19348                           
 19349                           ;menu.c: 471: while(encoder_click == 0) {
 19350  007214  D05E               	goto	l3564
 19351  007216                     
 19352                           ; BSR set to: 0
 19353                           ;menu.c: 474: un_block_code();
 19354                           
 19355                           ; BSR set to: 0
 19356  007216  ECAB  F04C         	call	_un_block_code	;wreg free
 19357                           
 19358                           ;menu.c: 476: if (lcd_print_once == 0) {
 19359  00721A  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19360  00721C  D04D               	goto	l3569
 19361                           
 19362                           ;menu.c: 477: clear_row1();
 19363  00721E  EC16  F04C         	call	_clear_row1	;wreg free
 19364                           
 19365                           ;menu.c: 478: Lcd_Print_String("Select Triad:");
 19366  007222  0ED2               	movlw	low STR_25
 19367  007224  0100               	movlb	0	; () banked
 19368  007226  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19369  007228  0EFE               	movlw	high STR_25
 19370  00722A  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19371  00722C  EC74  F042         	call	_Lcd_Print_String	;wreg free
 19372                           
 19373                           ;menu.c: 479: clear_row2();
 19374  007230  EC02  F04C         	call	_clear_row2	;wreg free
 19375                           
 19376                           ;menu.c: 480: Lcd_Print_String(LCD_STRINGS[(triadMenu.selector % triadMenu.number) + tri
      +                          adMenu.address]);
 19377  007234  0101               	movlb	1	; () banked
 19378  007236  516E               	movf	_triadMenu& (0+255),w,b
 19379  007238  6EE6               	movwf	postinc1,c
 19380  00723A  5170               	movf	(_triadMenu+2)& (0+255),w,b
 19381  00723C  6EE6               	movwf	postinc1,c
 19382  00723E  EC61  F041         	call	___lbmod	;wreg free
 19383  007242  503F               	movf	btemp,w,c
 19384  007244  0101               	movlb	1	; () banked
 19385  007246  256F               	addwf	(_triadMenu+1)& (0+255),w,b
 19386  007248  0100               	movlb	0	; () banked
 19387  00724A  6F60               	movwf	___wmul@multiplier& (0+255),b
 19388  00724C  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 19389  00724E  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19390  007250  0E00               	movlw	0
 19391  007252  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19392  007254  0E11               	movlw	17
 19393  007256  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19394  007258  EC2A  F04C         	call	___wmul	;wreg free
 19395  00725C  0E9E               	movlw	low _LCD_STRINGS
 19396  00725E  0100               	movlb	0	; () banked
 19397  007260  2560               	addwf	?___wmul& (0+255),w,b
 19398  007262  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19399  007264  0EF3               	movlw	high _LCD_STRINGS
 19400  007266  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19401  007268  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19402  00726A  EC74  F042         	call	_Lcd_Print_String	;wreg free
 19403                           
 19404                           ;menu.c: 481: }
 19405                           ;menu.c: 484: while(ON_OFF == 1){
 19406  00726E  D024               	goto	l3569
 19407  007270                     
 19408                           ;menu.c: 485: un_block_code();
 19409  007270  ECAB  F04C         	call	_un_block_code	;wreg free
 19410                           
 19411                           ;menu.c: 488: if(print_row_2_once == 0){
 19412  007274  BC04               	btfsc	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19413  007276  D020               	goto	l3569
 19414                           
 19415                           ;menu.c: 489: clear_row2();
 19416  007278  EC02  F04C         	call	_clear_row2	;wreg free
 19417                           
 19418                           ;menu.c: 490: Lcd_Print_String(LCD_STRINGS[(triadMenu.selector % triadMenu.number) + tri
      +                          adMenu.address]);
 19419  00727C  0101               	movlb	1	; () banked
 19420  00727E  516E               	movf	_triadMenu& (0+255),w,b
 19421  007280  6EE6               	movwf	postinc1,c
 19422  007282  5170               	movf	(_triadMenu+2)& (0+255),w,b
 19423  007284  6EE6               	movwf	postinc1,c
 19424  007286  EC61  F041         	call	___lbmod	;wreg free
 19425  00728A  503F               	movf	btemp,w,c
 19426  00728C  0101               	movlb	1	; () banked
 19427  00728E  256F               	addwf	(_triadMenu+1)& (0+255),w,b
 19428  007290  0100               	movlb	0	; () banked
 19429  007292  6F60               	movwf	___wmul@multiplier& (0+255),b
 19430  007294  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 19431  007296  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19432  007298  0E00               	movlw	0
 19433  00729A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19434  00729C  0E11               	movlw	17
 19435  00729E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19436  0072A0  EC2A  F04C         	call	___wmul	;wreg free
 19437  0072A4  0E9E               	movlw	low _LCD_STRINGS
 19438  0072A6  0100               	movlb	0	; () banked
 19439  0072A8  2560               	addwf	?___wmul& (0+255),w,b
 19440  0072AA  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19441  0072AC  0EF3               	movlw	high _LCD_STRINGS
 19442  0072AE  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19443  0072B0  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19444  0072B2  EC74  F042         	call	_Lcd_Print_String	;wreg free
 19445                           
 19446                           ;menu.c: 491: print_row_2_once = 1;
 19447  0072B6  8C04               	bsf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19448  0072B8                     l3569:
 19449  0072B8  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 19450  0072BA  D7DA               	goto	l3568
 19451                           
 19452                           ;menu.c: 492: }
 19453                           ;menu.c: 493: }
 19454                           ;menu.c: 495: which_triad = triadMenu.selector % triadMenu.number;
 19455  0072BC  0101               	movlb	1	; () banked
 19456  0072BE  516E               	movf	_triadMenu& (0+255),w,b
 19457  0072C0  6EE6               	movwf	postinc1,c
 19458  0072C2  5170               	movf	(_triadMenu+2)& (0+255),w,b
 19459  0072C4  6EE6               	movwf	postinc1,c
 19460  0072C6  EC61  F041         	call	___lbmod	;wreg free
 19461  0072CA  503F               	movf	btemp,w,c
 19462  0072CC  0100               	movlb	0	; () banked
 19463  0072CE  6FF0               	movwf	_which_triad& (0+255),b
 19464                           
 19465                           ; BSR set to: 0
 19466                           ;menu.c: 496: lcd_print_once = 1;
 19467  0072D0  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19468  0072D2                     l3564:
 19469                           
 19470                           ; BSR set to: 0
 19471                           
 19472                           ; BSR set to: 0
 19473  0072D2  B205               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 19474  0072D4  0012               	return	
 19475  0072D6  D79F               	goto	l3565
 19476  0072D8                     __end_of_Function_A_2:
 19477                           	opt stack 0
 19478                           tblptru	equ	0xFF8
 19479                           tblptrh	equ	0xFF7
 19480                           tblptrl	equ	0xFF6
 19481                           tablat	equ	0xFF5
 19482                           prodh	equ	0xFF4
 19483                           prodl	equ	0xFF3
 19484                           intcon	equ	0xFF2
 19485                           intcon2	equ	0xFF1
 19486                           postinc0	equ	0xFEE
 19487                           wreg	equ	0xFE8
 19488                           postinc1	equ	0xFE6
 19489                           plusw1	equ	0xFE3
 19490                           fsr1h	equ	0xFE2
 19491                           fsr1l	equ	0xFE1
 19492                           indf2	equ	0xFDF
 19493                           postinc2	equ	0xFDE
 19494                           postdec2	equ	0xFDD
 19495                           plusw2	equ	0xFDB
 19496                           fsr2h	equ	0xFDA
 19497                           fsr2l	equ	0xFD9
 19498                           status	equ	0xFD8
 19499                           
 19500 ;; *************** function _Function_A_1 *****************
 19501 ;; Defined at:
 19502 ;;		line 422 in file "menu.c"
 19503 ;; Parameters:    Size  Location     Type
 19504 ;;		None
 19505 ;; Auto vars:     Size  Location     Type
 19506 ;;		None
 19507 ;; Return value:  Size  Location     Type
 19508 ;;                  1    wreg      void 
 19509 ;; Registers used:
 19510 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19511 ;; Tracked objects:
 19512 ;;		On entry : 0/0
 19513 ;;		On exit  : 0/0
 19514 ;;		Unchanged: 0/0
 19515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19520 ;;Total ram usage:        0 bytes
 19521 ;; Hardware stack levels used:    1
 19522 ;; Hardware stack levels required when called:   16
 19523 ;; This function calls:
 19524 ;;		_Lcd_Print_String
 19525 ;;		___lbmod
 19526 ;;		___wmul
 19527 ;;		_clear_row1
 19528 ;;		_clear_row2
 19529 ;;		_un_block_code
 19530 ;; This function is called by:
 19531 ;;		_Function_A
 19532 ;; This function uses a non-reentrant model
 19533 ;;
 19534                           
 19535                           	psect	text61
 19536  0072D8                     __ptext61:
 19537                           	opt stack 0
 19538  0072D8                     _Function_A_1:
 19539                           	opt stack 12
 19540                           
 19541                           ;menu.c: 424: KEYBOARD_MODE = MODES;
 19542                           
 19543                           ; BSR set to: 0
 19544                           ;incstack = 0
 19545  0072D8  0E03               	movlw	3
 19546  0072DA  0100               	movlb	0	; () banked
 19547  0072DC  6FF2               	movwf	_KEYBOARD_MODE& (0+255),b
 19548                           
 19549                           ;menu.c: 425: which_screen = MODES_MENU;
 19550  0072DE  0E09               	movlw	9
 19551  0072E0  6E4F               	movwf	_which_screen,c
 19552                           
 19553                           ; BSR set to: 0
 19554                           ;menu.c: 426: lcd_print_once = 0;
 19555  0072E2  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19556                           
 19557                           ; BSR set to: 0
 19558                           ;menu.c: 427: encoder_click = 0;
 19559  0072E4  9205               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 19560                           
 19561                           ; BSR set to: 0
 19562                           ;menu.c: 429: modeMenu.selector = which_mode;
 19563  0072E6  C0F1  F173         	movff	_which_mode,_modeMenu+2
 19564                           
 19565                           ;menu.c: 431: while(encoder_click == 0) {
 19566  0072EA  D05E               	goto	l3553
 19567  0072EC                     
 19568                           ; BSR set to: 0
 19569                           ;menu.c: 434: un_block_code();
 19570                           
 19571                           ; BSR set to: 0
 19572  0072EC  ECAB  F04C         	call	_un_block_code	;wreg free
 19573                           
 19574                           ;menu.c: 436: if (lcd_print_once == 0) {
 19575  0072F0  BE04               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19576  0072F2  D04D               	goto	l3558
 19577                           
 19578                           ;menu.c: 437: clear_row1();
 19579  0072F4  EC16  F04C         	call	_clear_row1	;wreg free
 19580                           
 19581                           ;menu.c: 438: Lcd_Print_String("Enter Mode:");
 19582  0072F8  0E58               	movlw	low STR_24
 19583  0072FA  0100               	movlb	0	; () banked
 19584  0072FC  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19585  0072FE  0EFF               	movlw	high STR_24
 19586  007300  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19587  007302  EC74  F042         	call	_Lcd_Print_String	;wreg free
 19588                           
 19589                           ;menu.c: 439: clear_row2();
 19590  007306  EC02  F04C         	call	_clear_row2	;wreg free
 19591                           
 19592                           ;menu.c: 440: Lcd_Print_String(LCD_STRINGS[(modeMenu.selector % modeMenu.number) + modeM
      +                          enu.address]);
 19593  00730A  0101               	movlb	1	; () banked
 19594  00730C  5171               	movf	_modeMenu& (0+255),w,b
 19595  00730E  6EE6               	movwf	postinc1,c
 19596  007310  5173               	movf	(_modeMenu+2)& (0+255),w,b
 19597  007312  6EE6               	movwf	postinc1,c
 19598  007314  EC61  F041         	call	___lbmod	;wreg free
 19599  007318  503F               	movf	btemp,w,c
 19600  00731A  0101               	movlb	1	; () banked
 19601  00731C  2572               	addwf	(_modeMenu+1)& (0+255),w,b
 19602  00731E  0100               	movlb	0	; () banked
 19603  007320  6F60               	movwf	___wmul@multiplier& (0+255),b
 19604  007322  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 19605  007324  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19606  007326  0E00               	movlw	0
 19607  007328  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19608  00732A  0E11               	movlw	17
 19609  00732C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19610  00732E  EC2A  F04C         	call	___wmul	;wreg free
 19611  007332  0E9E               	movlw	low _LCD_STRINGS
 19612  007334  0100               	movlb	0	; () banked
 19613  007336  2560               	addwf	?___wmul& (0+255),w,b
 19614  007338  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19615  00733A  0EF3               	movlw	high _LCD_STRINGS
 19616  00733C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19617  00733E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19618  007340  EC74  F042         	call	_Lcd_Print_String	;wreg free
 19619                           
 19620                           ;menu.c: 441: }
 19621                           ;menu.c: 444: while(ON_OFF == 1){
 19622  007344  D024               	goto	l3558
 19623  007346                     
 19624                           ;menu.c: 446: un_block_code();
 19625  007346  ECAB  F04C         	call	_un_block_code	;wreg free
 19626                           
 19627                           ;menu.c: 449: if(print_row_2_once == 0){
 19628  00734A  BC04               	btfsc	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19629  00734C  D020               	goto	l3558
 19630                           
 19631                           ;menu.c: 450: clear_row2();
 19632  00734E  EC02  F04C         	call	_clear_row2	;wreg free
 19633                           
 19634                           ;menu.c: 451: Lcd_Print_String(LCD_STRINGS[(modeMenu.selector % modeMenu.number) + modeM
      +                          enu.address]);
 19635  007352  0101               	movlb	1	; () banked
 19636  007354  5171               	movf	_modeMenu& (0+255),w,b
 19637  007356  6EE6               	movwf	postinc1,c
 19638  007358  5173               	movf	(_modeMenu+2)& (0+255),w,b
 19639  00735A  6EE6               	movwf	postinc1,c
 19640  00735C  EC61  F041         	call	___lbmod	;wreg free
 19641  007360  503F               	movf	btemp,w,c
 19642  007362  0101               	movlb	1	; () banked
 19643  007364  2572               	addwf	(_modeMenu+1)& (0+255),w,b
 19644  007366  0100               	movlb	0	; () banked
 19645  007368  6F60               	movwf	___wmul@multiplier& (0+255),b
 19646  00736A  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 19647  00736C  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19648  00736E  0E00               	movlw	0
 19649  007370  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19650  007372  0E11               	movlw	17
 19651  007374  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19652  007376  EC2A  F04C         	call	___wmul	;wreg free
 19653  00737A  0E9E               	movlw	low _LCD_STRINGS
 19654  00737C  0100               	movlb	0	; () banked
 19655  00737E  2560               	addwf	?___wmul& (0+255),w,b
 19656  007380  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19657  007382  0EF3               	movlw	high _LCD_STRINGS
 19658  007384  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19659  007386  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19660  007388  EC74  F042         	call	_Lcd_Print_String	;wreg free
 19661                           
 19662                           ;menu.c: 452: print_row_2_once = 1;
 19663  00738C  8C04               	bsf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19664  00738E                     l3558:
 19665  00738E  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 19666  007390  D7DA               	goto	l3557
 19667                           
 19668                           ;menu.c: 453: }
 19669                           ;menu.c: 454: }
 19670                           ;menu.c: 456: which_mode = modeMenu.selector % modeMenu.number;
 19671  007392  0101               	movlb	1	; () banked
 19672  007394  5171               	movf	_modeMenu& (0+255),w,b
 19673  007396  6EE6               	movwf	postinc1,c
 19674  007398  5173               	movf	(_modeMenu+2)& (0+255),w,b
 19675  00739A  6EE6               	movwf	postinc1,c
 19676  00739C  EC61  F041         	call	___lbmod	;wreg free
 19677  0073A0  503F               	movf	btemp,w,c
 19678  0073A2  0100               	movlb	0	; () banked
 19679  0073A4  6FF1               	movwf	_which_mode& (0+255),b
 19680                           
 19681                           ; BSR set to: 0
 19682                           ;menu.c: 457: lcd_print_once = 1;
 19683  0073A6  8E04               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19684  0073A8                     l3553:
 19685                           
 19686                           ; BSR set to: 0
 19687                           
 19688                           ; BSR set to: 0
 19689  0073A8  B205               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 19690  0073AA  0012               	return	
 19691  0073AC  D79F               	goto	l3554
 19692  0073AE                     __end_of_Function_A_1:
 19693                           	opt stack 0
 19694                           tblptru	equ	0xFF8
 19695                           tblptrh	equ	0xFF7
 19696                           tblptrl	equ	0xFF6
 19697                           tablat	equ	0xFF5
 19698                           prodh	equ	0xFF4
 19699                           prodl	equ	0xFF3
 19700                           intcon	equ	0xFF2
 19701                           intcon2	equ	0xFF1
 19702                           postinc0	equ	0xFEE
 19703                           wreg	equ	0xFE8
 19704                           postinc1	equ	0xFE6
 19705                           plusw1	equ	0xFE3
 19706                           fsr1h	equ	0xFE2
 19707                           fsr1l	equ	0xFE1
 19708                           indf2	equ	0xFDF
 19709                           postinc2	equ	0xFDE
 19710                           postdec2	equ	0xFDD
 19711                           plusw2	equ	0xFDB
 19712                           fsr2h	equ	0xFDA
 19713                           fsr2l	equ	0xFD9
 19714                           status	equ	0xFD8
 19715                           
 19716 ;; *************** function _un_block_code *****************
 19717 ;; Defined at:
 19718 ;;		line 389 in file "menu.c"
 19719 ;; Parameters:    Size  Location     Type
 19720 ;;		None
 19721 ;; Auto vars:     Size  Location     Type
 19722 ;;		None
 19723 ;; Return value:  Size  Location     Type
 19724 ;;                  1    wreg      void 
 19725 ;; Registers used:
 19726 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19727 ;; Tracked objects:
 19728 ;;		On entry : 0/0
 19729 ;;		On exit  : 0/0
 19730 ;;		Unchanged: 0/0
 19731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19736 ;;Total ram usage:        0 bytes
 19737 ;; Hardware stack levels used:    1
 19738 ;; Hardware stack levels required when called:   15
 19739 ;; This function calls:
 19740 ;;		_analogInputs
 19741 ;;		_digitalInputs
 19742 ;;		_processEncoderBuxton
 19743 ;; This function is called by:
 19744 ;;		_Function_A_1
 19745 ;;		_Function_A_2
 19746 ;;		_Function_A_3
 19747 ;;		_Function_A
 19748 ;;		_Function_B
 19749 ;;		_Function_C_1
 19750 ;;		_Function_C_2
 19751 ;;		_Function_C_3
 19752 ;;		_Function_C
 19753 ;;		_Function_D_1
 19754 ;;		_Function_D_2
 19755 ;;		_Function_D_3
 19756 ;;		_Function_D_4
 19757 ;;		_Function_D_5
 19758 ;;		_Function_D
 19759 ;;		_Function_E_1
 19760 ;;		_Function_E_2
 19761 ;;		_Function_E
 19762 ;;		_Function_F
 19763 ;;		_Function_G_1
 19764 ;;		_Function_G_2
 19765 ;;		_Function_G_4
 19766 ;;		_Function_G
 19767 ;;		_Function_H
 19768 ;;		_Function_H_1
 19769 ;;		_Function_H_2
 19770 ;;		_Function_H_3
 19771 ;;		_Function_H_4
 19772 ;;		_Function_H_5
 19773 ;;		_Function_H_6_1
 19774 ;;		_Function_H_6_2
 19775 ;;		_Function_H_6
 19776 ;;		_Function_H_7
 19777 ;;		_Function_H_8_1
 19778 ;;		_Function_H_8_2
 19779 ;;		_Function_H_8
 19780 ;;		_Function_H_9_1
 19781 ;;		_Function_H_9_2
 19782 ;;		_Function_H_9_3
 19783 ;;		_Function_H_9_4
 19784 ;;		_Function_H_9
 19785 ;; This function uses a non-reentrant model
 19786 ;;
 19787                           
 19788                           	psect	text62
 19789  009956                     __ptext62:
 19790                           	opt stack 0
 19791  009956                     _un_block_code:
 19792                           	opt stack 13
 19793                           
 19794                           ;menu.c: 397: if(which_functions_are_unblocked == 0){
 19795                           
 19796                           ; BSR set to: 0
 19797                           ;incstack = 0
 19798  009956  A005               	btfss	_which_functions_are_unblocked/(0+8),_which_functions_are_unblocked& (0+7),c
 19799                           
 19800                           ;menu.c: 398: processEncoderBuxton();
 19801  009958  EC0A  F000         	call	_processEncoderBuxton	;wreg free
 19802                           
 19803                           ;menu.c: 399: }
 19804                           ;menu.c: 402: if(which_functions_are_unblocked == 1){
 19805  00995C  A005               	btfss	_which_functions_are_unblocked/(0+8),_which_functions_are_unblocked& (0+7),c
 19806  00995E  0012               	return	
 19807                           
 19808                           ;menu.c: 403: digitalInputs();
 19809  009960  EC1D  F049         	call	_digitalInputs	;wreg free
 19810                           
 19811                           ;menu.c: 404: analogInputs();
 19812  009964  EC00  F04A         	call	_analogInputs	;wreg free
 19813                           
 19814                           ;menu.c: 405: processEncoderBuxton();
 19815  009968  EC0A  F000         	call	_processEncoderBuxton	;wreg free
 19816  00996C  0012               	return	
 19817  00996E                     __end_of_un_block_code:
 19818                           	opt stack 0
 19819                           tblptru	equ	0xFF8
 19820                           tblptrh	equ	0xFF7
 19821                           tblptrl	equ	0xFF6
 19822                           tablat	equ	0xFF5
 19823                           prodh	equ	0xFF4
 19824                           prodl	equ	0xFF3
 19825                           intcon	equ	0xFF2
 19826                           intcon2	equ	0xFF1
 19827                           postinc0	equ	0xFEE
 19828                           wreg	equ	0xFE8
 19829                           postinc1	equ	0xFE6
 19830                           plusw1	equ	0xFE3
 19831                           fsr1h	equ	0xFE2
 19832                           fsr1l	equ	0xFE1
 19833                           indf2	equ	0xFDF
 19834                           postinc2	equ	0xFDE
 19835                           postdec2	equ	0xFDD
 19836                           plusw2	equ	0xFDB
 19837                           fsr2h	equ	0xFDA
 19838                           fsr2l	equ	0xFD9
 19839                           status	equ	0xFD8
 19840                           
 19841 ;; *************** function _processEncoderBuxton *****************
 19842 ;; Defined at:
 19843 ;;		line 51 in file "encoder.c"
 19844 ;; Parameters:    Size  Location     Type
 19845 ;;		None
 19846 ;; Auto vars:     Size  Location     Type
 19847 ;;		None
 19848 ;; Return value:  Size  Location     Type
 19849 ;;                  1    wreg      void 
 19850 ;; Registers used:
 19851 ;;		wreg, status,2, status,0
 19852 ;; Tracked objects:
 19853 ;;		On entry : 0/0
 19854 ;;		On exit  : 0/0
 19855 ;;		Unchanged: 0/0
 19856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19859 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19860 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19861 ;;Total ram usage:        7 bytes
 19862 ;; Hardware stack levels used:    1
 19863 ;; Hardware stack levels required when called:    5
 19864 ;; This function calls:
 19865 ;;		Nothing
 19866 ;; This function is called by:
 19867 ;;		_un_block_code
 19868 ;;		_main
 19869 ;; This function uses a non-reentrant model
 19870 ;;
 19871                           
 19872                           	psect	text63
 19873  000014                     __ptext63:
 19874                           	opt stack 0
 19875  000014                     _processEncoderBuxton:
 19876                           	opt stack 25
 19877                           
 19878                           ;encoder.c: 53: if (encoder_direction == 0x00) {return;}
 19879                           
 19880                           ;incstack = 0
 19881  000014  5036               	movf	_encoder_direction,w,c
 19882  000016  B4D8               	btfsc	status,2,c
 19883  000018  0012               	return	
 19884                           
 19885                           ;encoder.c: 56: if (encoder_direction == 0x10) {
 19886  00001A  0E10               	movlw	16
 19887  00001C  1836               	xorwf	_encoder_direction,w,c
 19888  00001E  A4D8               	btfss	status,2,c
 19889  000020  D3B9               	goto	l937
 19890                           
 19891                           ;encoder.c: 58: lcd_print_once = 0;
 19892  000022  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19893                           
 19894                           ;encoder.c: 59: print_row_2_once = 0;
 19895  000024  9C04               	bcf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19896                           
 19897                           ;encoder.c: 62: if (which_screen == MAIN_MENU) {
 19898  000026  0E02               	movlw	2
 19899  000028  184F               	xorwf	_which_screen,w,c
 19900  00002A  A4D8               	btfss	status,2,c
 19901  00002C  D01F               	goto	l867
 19902                           
 19903                           ;encoder.c: 63: if(mainMenu.selector < mainMenu.number - 1){
 19904  00002E  0EFF               	movlw	255
 19905  000030  0100               	movlb	0	; () banked
 19906  000032  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 19907  000034  0EFF               	movlw	255
 19908  000036  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 19909  000038  0101               	movlb	1	; () banked
 19910  00003A  5174               	movf	_mainMenu& (0+255),w,b
 19911  00003C  0100               	movlb	0	; () banked
 19912  00003E  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 19913  000040  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 19914  000042  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 19915  000044  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 19916  000046  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 19917  000048  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 19918  00004A  0101               	movlb	1	; () banked
 19919  00004C  5176               	movf	(_mainMenu+2)& (0+255),w,b
 19920  00004E  0100               	movlb	0	; () banked
 19921  000050  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 19922  000052  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 19923  000054  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 19924  000056  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 19925  000058  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 19926  00005A  0A80               	xorlw	128
 19927  00005C  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 19928  00005E  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 19929  000060  0A80               	xorlw	128
 19930  000062  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 19931  000064  B0D8               	btfsc	status,0,c
 19932  000066  D002               	goto	l867
 19933                           
 19934                           ; BSR set to: 0
 19935                           ;encoder.c: 64: mainMenu.selector++;
 19936  000068  0101               	movlb	1	; () banked
 19937  00006A  2B76               	incf	(_mainMenu+2)& (0+255),f,b
 19938  00006C                     l867:
 19939                           
 19940                           ;encoder.c: 65: }
 19941                           ;encoder.c: 66: }
 19942                           ;encoder.c: 67: if (which_screen == KEYBOARD_MENU) {
 19943                           
 19944                           ; BSR set to: 1
 19945                           
 19946                           ; BSR set to: 1
 19947  00006C  0E03               	movlw	3
 19948  00006E  184F               	xorwf	_which_screen,w,c
 19949  000070  A4D8               	btfss	status,2,c
 19950  000072  D019               	goto	l869
 19951                           
 19952                           ;encoder.c: 68: if(keyboardMenu.selector < (keyboardMenu.number - 1)){
 19953  000074  0EFF               	movlw	255
 19954  000076  0100               	movlb	0	; () banked
 19955  000078  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 19956  00007A  0EFF               	movlw	255
 19957  00007C  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 19958  00007E  51E5               	movf	_keyboardMenu& (0+255),w,b
 19959  000080  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 19960  000082  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 19961  000084  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 19962  000086  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 19963  000088  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 19964  00008A  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 19965  00008C  51E7               	movf	(_keyboardMenu+2)& (0+255),w,b
 19966  00008E  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 19967  000090  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 19968  000092  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 19969  000094  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 19970  000096  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 19971  000098  0A80               	xorlw	128
 19972  00009A  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 19973  00009C  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 19974  00009E  0A80               	xorlw	128
 19975  0000A0  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 19976  0000A2  A0D8               	btfss	status,0,c
 19977                           
 19978                           ; BSR set to: 0
 19979                           ;encoder.c: 69: keyboardMenu.selector++;
 19980  0000A4  2BE7               	incf	(_keyboardMenu+2)& (0+255),f,b
 19981  0000A6                     l869:
 19982                           
 19983                           ;encoder.c: 70: }
 19984                           ;encoder.c: 71: }
 19985                           ;encoder.c: 72: if (which_screen == TRANSPOSE_MENU) {
 19986                           
 19987                           ; BSR set to: 0
 19988                           
 19989                           ; BSR set to: 0
 19990  0000A6  0E04               	movlw	4
 19991  0000A8  184F               	xorwf	_which_screen,w,c
 19992  0000AA  A4D8               	btfss	status,2,c
 19993  0000AC  D01F               	goto	l871
 19994                           
 19995                           ;encoder.c: 73: if(transposeMenu.selector < (transposeMenu.number - 1)){
 19996  0000AE  0EFF               	movlw	255
 19997  0000B0  0100               	movlb	0	; () banked
 19998  0000B2  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 19999  0000B4  0EFF               	movlw	255
 20000  0000B6  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20001  0000B8  0101               	movlb	1	; () banked
 20002  0000BA  5168               	movf	_transposeMenu& (0+255),w,b
 20003  0000BC  0100               	movlb	0	; () banked
 20004  0000BE  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20005  0000C0  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20006  0000C2  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20007  0000C4  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20008  0000C6  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20009  0000C8  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20010  0000CA  0101               	movlb	1	; () banked
 20011  0000CC  516A               	movf	(_transposeMenu+2)& (0+255),w,b
 20012  0000CE  0100               	movlb	0	; () banked
 20013  0000D0  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20014  0000D2  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20015  0000D4  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20016  0000D6  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20017  0000D8  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20018  0000DA  0A80               	xorlw	128
 20019  0000DC  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20020  0000DE  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20021  0000E0  0A80               	xorlw	128
 20022  0000E2  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20023  0000E4  B0D8               	btfsc	status,0,c
 20024  0000E6  D002               	goto	l871
 20025                           
 20026                           ; BSR set to: 0
 20027                           ;encoder.c: 74: transposeMenu.selector++;
 20028  0000E8  0101               	movlb	1	; () banked
 20029  0000EA  2B6A               	incf	(_transposeMenu+2)& (0+255),f,b
 20030  0000EC                     l871:
 20031                           
 20032                           ;encoder.c: 75: }
 20033                           ;encoder.c: 76: }
 20034                           ;encoder.c: 77: if (which_screen == DRUM_MENU) {
 20035                           
 20036                           ; BSR set to: 1
 20037                           
 20038                           ; BSR set to: 1
 20039  0000EC  0E05               	movlw	5
 20040  0000EE  184F               	xorwf	_which_screen,w,c
 20041  0000F0  A4D8               	btfss	status,2,c
 20042  0000F2  D01F               	goto	l873
 20043                           
 20044                           ;encoder.c: 78: if(drumMenu.selector < (drumMenu.number - 1)){
 20045  0000F4  0EFF               	movlw	255
 20046  0000F6  0100               	movlb	0	; () banked
 20047  0000F8  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20048  0000FA  0EFF               	movlw	255
 20049  0000FC  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20050  0000FE  0101               	movlb	1	; () banked
 20051  000100  5165               	movf	_drumMenu& (0+255),w,b
 20052  000102  0100               	movlb	0	; () banked
 20053  000104  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20054  000106  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20055  000108  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20056  00010A  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20057  00010C  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20058  00010E  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20059  000110  0101               	movlb	1	; () banked
 20060  000112  5167               	movf	(_drumMenu+2)& (0+255),w,b
 20061  000114  0100               	movlb	0	; () banked
 20062  000116  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20063  000118  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20064  00011A  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20065  00011C  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20066  00011E  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20067  000120  0A80               	xorlw	128
 20068  000122  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20069  000124  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20070  000126  0A80               	xorlw	128
 20071  000128  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20072  00012A  B0D8               	btfsc	status,0,c
 20073  00012C  D002               	goto	l873
 20074                           
 20075                           ; BSR set to: 0
 20076                           ;encoder.c: 79: drumMenu.selector++;
 20077  00012E  0101               	movlb	1	; () banked
 20078  000130  2B67               	incf	(_drumMenu+2)& (0+255),f,b
 20079  000132                     l873:
 20080                           
 20081                           ;encoder.c: 80: }
 20082                           ;encoder.c: 81: }
 20083                           ;encoder.c: 82: if (which_screen == POTENTIOMETER_MENU) {
 20084                           
 20085                           ; BSR set to: 1
 20086                           
 20087                           ; BSR set to: 1
 20088  000132  0E06               	movlw	6
 20089  000134  184F               	xorwf	_which_screen,w,c
 20090  000136  A4D8               	btfss	status,2,c
 20091  000138  D01F               	goto	l875
 20092                           
 20093                           ;encoder.c: 83: if(potsMenu.selector < (potsMenu.number - 1)){
 20094  00013A  0EFF               	movlw	255
 20095  00013C  0100               	movlb	0	; () banked
 20096  00013E  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20097  000140  0EFF               	movlw	255
 20098  000142  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20099  000144  0101               	movlb	1	; () banked
 20100  000146  5159               	movf	_potsMenu& (0+255),w,b
 20101  000148  0100               	movlb	0	; () banked
 20102  00014A  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20103  00014C  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20104  00014E  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20105  000150  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20106  000152  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20107  000154  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20108  000156  0101               	movlb	1	; () banked
 20109  000158  515B               	movf	(_potsMenu+2)& (0+255),w,b
 20110  00015A  0100               	movlb	0	; () banked
 20111  00015C  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20112  00015E  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20113  000160  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20114  000162  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20115  000164  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20116  000166  0A80               	xorlw	128
 20117  000168  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20118  00016A  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20119  00016C  0A80               	xorlw	128
 20120  00016E  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20121  000170  B0D8               	btfsc	status,0,c
 20122  000172  D002               	goto	l875
 20123                           
 20124                           ; BSR set to: 0
 20125                           ;encoder.c: 84: potsMenu.selector++;
 20126  000174  0101               	movlb	1	; () banked
 20127  000176  2B5B               	incf	(_potsMenu+2)& (0+255),f,b
 20128  000178                     l875:
 20129                           
 20130                           ;encoder.c: 85: }
 20131                           ;encoder.c: 86: }
 20132                           ;encoder.c: 87: if (which_screen == MIDI_CHANNEL_MENU) {
 20133                           
 20134                           ; BSR set to: 1
 20135                           
 20136                           ; BSR set to: 1
 20137  000178  0E07               	movlw	7
 20138  00017A  184F               	xorwf	_which_screen,w,c
 20139  00017C  A4D8               	btfss	status,2,c
 20140  00017E  D01F               	goto	l877
 20141                           
 20142                           ;encoder.c: 88: if(midiChannelMenu.selector < (midiChannelMenu.number - 1)){
 20143  000180  0EFF               	movlw	255
 20144  000182  0100               	movlb	0	; () banked
 20145  000184  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20146  000186  0EFF               	movlw	255
 20147  000188  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20148  00018A  0101               	movlb	1	; () banked
 20149  00018C  5147               	movf	_midiChannelMenu& (0+255),w,b
 20150  00018E  0100               	movlb	0	; () banked
 20151  000190  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20152  000192  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20153  000194  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20154  000196  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20155  000198  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20156  00019A  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20157  00019C  0101               	movlb	1	; () banked
 20158  00019E  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 20159  0001A0  0100               	movlb	0	; () banked
 20160  0001A2  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20161  0001A4  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20162  0001A6  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20163  0001A8  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20164  0001AA  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20165  0001AC  0A80               	xorlw	128
 20166  0001AE  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20167  0001B0  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20168  0001B2  0A80               	xorlw	128
 20169  0001B4  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20170  0001B6  B0D8               	btfsc	status,0,c
 20171  0001B8  D002               	goto	l877
 20172                           
 20173                           ; BSR set to: 0
 20174                           ;encoder.c: 89: midiChannelMenu.selector++;
 20175  0001BA  0101               	movlb	1	; () banked
 20176  0001BC  2B49               	incf	(_midiChannelMenu+2)& (0+255),f,b
 20177  0001BE                     l877:
 20178                           
 20179                           ;encoder.c: 90: }
 20180                           ;encoder.c: 91: }
 20181                           ;encoder.c: 93: if (which_screen == MODES_MENU) {
 20182                           
 20183                           ; BSR set to: 1
 20184                           
 20185                           ; BSR set to: 1
 20186  0001BE  0E09               	movlw	9
 20187  0001C0  184F               	xorwf	_which_screen,w,c
 20188  0001C2  A4D8               	btfss	status,2,c
 20189  0001C4  D01F               	goto	l879
 20190                           
 20191                           ;encoder.c: 94: if(modeMenu.selector < (modeMenu.number - 1)){
 20192  0001C6  0EFF               	movlw	255
 20193  0001C8  0100               	movlb	0	; () banked
 20194  0001CA  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20195  0001CC  0EFF               	movlw	255
 20196  0001CE  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20197  0001D0  0101               	movlb	1	; () banked
 20198  0001D2  5171               	movf	_modeMenu& (0+255),w,b
 20199  0001D4  0100               	movlb	0	; () banked
 20200  0001D6  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20201  0001D8  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20202  0001DA  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20203  0001DC  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20204  0001DE  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20205  0001E0  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20206  0001E2  0101               	movlb	1	; () banked
 20207  0001E4  5173               	movf	(_modeMenu+2)& (0+255),w,b
 20208  0001E6  0100               	movlb	0	; () banked
 20209  0001E8  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20210  0001EA  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20211  0001EC  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20212  0001EE  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20213  0001F0  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20214  0001F2  0A80               	xorlw	128
 20215  0001F4  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20216  0001F6  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20217  0001F8  0A80               	xorlw	128
 20218  0001FA  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20219  0001FC  B0D8               	btfsc	status,0,c
 20220  0001FE  D002               	goto	l879
 20221                           
 20222                           ; BSR set to: 0
 20223                           ;encoder.c: 95: modeMenu.selector++;
 20224  000200  0101               	movlb	1	; () banked
 20225  000202  2B73               	incf	(_modeMenu+2)& (0+255),f,b
 20226  000204                     l879:
 20227                           
 20228                           ;encoder.c: 96: }
 20229                           ;encoder.c: 97: }
 20230                           ;encoder.c: 98: if (which_screen == TRIADS_MENU) {
 20231                           
 20232                           ; BSR set to: 1
 20233                           
 20234                           ; BSR set to: 1
 20235  000204  0E0A               	movlw	10
 20236  000206  184F               	xorwf	_which_screen,w,c
 20237  000208  A4D8               	btfss	status,2,c
 20238  00020A  D01F               	goto	l881
 20239                           
 20240                           ;encoder.c: 99: if(triadMenu.selector < (triadMenu.number - 1)){
 20241  00020C  0EFF               	movlw	255
 20242  00020E  0100               	movlb	0	; () banked
 20243  000210  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20244  000212  0EFF               	movlw	255
 20245  000214  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20246  000216  0101               	movlb	1	; () banked
 20247  000218  516E               	movf	_triadMenu& (0+255),w,b
 20248  00021A  0100               	movlb	0	; () banked
 20249  00021C  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20250  00021E  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20251  000220  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20252  000222  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20253  000224  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20254  000226  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20255  000228  0101               	movlb	1	; () banked
 20256  00022A  5170               	movf	(_triadMenu+2)& (0+255),w,b
 20257  00022C  0100               	movlb	0	; () banked
 20258  00022E  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20259  000230  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20260  000232  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20261  000234  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20262  000236  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20263  000238  0A80               	xorlw	128
 20264  00023A  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20265  00023C  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20266  00023E  0A80               	xorlw	128
 20267  000240  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20268  000242  B0D8               	btfsc	status,0,c
 20269  000244  D002               	goto	l881
 20270                           
 20271                           ; BSR set to: 0
 20272                           ;encoder.c: 100: triadMenu.selector++;
 20273  000246  0101               	movlb	1	; () banked
 20274  000248  2B70               	incf	(_triadMenu+2)& (0+255),f,b
 20275  00024A                     l881:
 20276                           
 20277                           ;encoder.c: 101: }
 20278                           ;encoder.c: 102: }
 20279                           ;encoder.c: 103: if (which_screen == SEVENTHS_MENU) {
 20280                           
 20281                           ; BSR set to: 1
 20282                           
 20283                           ; BSR set to: 1
 20284  00024A  0E0B               	movlw	11
 20285  00024C  184F               	xorwf	_which_screen,w,c
 20286  00024E  A4D8               	btfss	status,2,c
 20287  000250  D01F               	goto	l883
 20288                           
 20289                           ;encoder.c: 104: if(seventhMenu.selector < (seventhMenu.number - 1)){
 20290  000252  0EFF               	movlw	255
 20291  000254  0100               	movlb	0	; () banked
 20292  000256  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20293  000258  0EFF               	movlw	255
 20294  00025A  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20295  00025C  0101               	movlb	1	; () banked
 20296  00025E  516B               	movf	_seventhMenu& (0+255),w,b
 20297  000260  0100               	movlb	0	; () banked
 20298  000262  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20299  000264  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20300  000266  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20301  000268  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20302  00026A  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20303  00026C  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20304  00026E  0101               	movlb	1	; () banked
 20305  000270  516D               	movf	(_seventhMenu+2)& (0+255),w,b
 20306  000272  0100               	movlb	0	; () banked
 20307  000274  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20308  000276  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20309  000278  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20310  00027A  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20311  00027C  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20312  00027E  0A80               	xorlw	128
 20313  000280  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20314  000282  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20315  000284  0A80               	xorlw	128
 20316  000286  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20317  000288  B0D8               	btfsc	status,0,c
 20318  00028A  D002               	goto	l883
 20319                           
 20320                           ; BSR set to: 0
 20321                           ;encoder.c: 105: seventhMenu.selector++;
 20322  00028C  0101               	movlb	1	; () banked
 20323  00028E  2B6D               	incf	(_seventhMenu+2)& (0+255),f,b
 20324  000290                     l883:
 20325                           
 20326                           ;encoder.c: 106: }
 20327                           ;encoder.c: 107: }
 20328                           ;encoder.c: 108: if (which_screen == DRUMS_CC_TYPE_MENU) {
 20329                           
 20330                           ; BSR set to: 1
 20331                           
 20332                           ; BSR set to: 1
 20333  000290  0E0C               	movlw	12
 20334  000292  184F               	xorwf	_which_screen,w,c
 20335  000294  A4D8               	btfss	status,2,c
 20336  000296  D01F               	goto	l885
 20337                           
 20338                           ;encoder.c: 109: if(drumCCTypeMenu.selector < (drumCCTypeMenu.number - 1)){
 20339  000298  0EFF               	movlw	255
 20340  00029A  0100               	movlb	0	; () banked
 20341  00029C  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20342  00029E  0EFF               	movlw	255
 20343  0002A0  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20344  0002A2  0101               	movlb	1	; () banked
 20345  0002A4  5162               	movf	_drumCCTypeMenu& (0+255),w,b
 20346  0002A6  0100               	movlb	0	; () banked
 20347  0002A8  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20348  0002AA  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20349  0002AC  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20350  0002AE  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20351  0002B0  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20352  0002B2  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20353  0002B4  0101               	movlb	1	; () banked
 20354  0002B6  5164               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 20355  0002B8  0100               	movlb	0	; () banked
 20356  0002BA  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20357  0002BC  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20358  0002BE  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20359  0002C0  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20360  0002C2  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20361  0002C4  0A80               	xorlw	128
 20362  0002C6  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20363  0002C8  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20364  0002CA  0A80               	xorlw	128
 20365  0002CC  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20366  0002CE  B0D8               	btfsc	status,0,c
 20367  0002D0  D002               	goto	l885
 20368                           
 20369                           ; BSR set to: 0
 20370                           ;encoder.c: 110: drumCCTypeMenu.selector++;
 20371  0002D2  0101               	movlb	1	; () banked
 20372  0002D4  2B64               	incf	(_drumCCTypeMenu+2)& (0+255),f,b
 20373  0002D6                     l885:
 20374                           
 20375                           ;encoder.c: 111: }
 20376                           ;encoder.c: 112: }
 20377                           ;encoder.c: 114: if (which_screen == DRUMS_NN_MENU) {
 20378                           
 20379                           ; BSR set to: 1
 20380                           
 20381                           ; BSR set to: 1
 20382  0002D6  0E0D               	movlw	13
 20383  0002D8  184F               	xorwf	_which_screen,w,c
 20384  0002DA  A4D8               	btfss	status,2,c
 20385  0002DC  D01F               	goto	l887
 20386                           
 20387                           ;encoder.c: 115: if(drumNNMenu.selector < (drumNNMenu.number - 1)){
 20388  0002DE  0EFF               	movlw	255
 20389  0002E0  0100               	movlb	0	; () banked
 20390  0002E2  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20391  0002E4  0EFF               	movlw	255
 20392  0002E6  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20393  0002E8  0101               	movlb	1	; () banked
 20394  0002EA  515F               	movf	_drumNNMenu& (0+255),w,b
 20395  0002EC  0100               	movlb	0	; () banked
 20396  0002EE  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20397  0002F0  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20398  0002F2  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20399  0002F4  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20400  0002F6  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20401  0002F8  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20402  0002FA  0101               	movlb	1	; () banked
 20403  0002FC  5161               	movf	(_drumNNMenu+2)& (0+255),w,b
 20404  0002FE  0100               	movlb	0	; () banked
 20405  000300  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20406  000302  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20407  000304  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20408  000306  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20409  000308  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20410  00030A  0A80               	xorlw	128
 20411  00030C  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20412  00030E  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20413  000310  0A80               	xorlw	128
 20414  000312  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20415  000314  B0D8               	btfsc	status,0,c
 20416  000316  D002               	goto	l887
 20417                           
 20418                           ; BSR set to: 0
 20419                           ;encoder.c: 116: drumNNMenu.selector++;
 20420  000318  0101               	movlb	1	; () banked
 20421  00031A  2B61               	incf	(_drumNNMenu+2)& (0+255),f,b
 20422  00031C                     l887:
 20423                           
 20424                           ;encoder.c: 117: }
 20425                           ;encoder.c: 118: }
 20426                           ;encoder.c: 120: if (which_screen == DRUMS_CC_MENU) {
 20427                           
 20428                           ; BSR set to: 1
 20429                           
 20430                           ; BSR set to: 1
 20431  00031C  0E0E               	movlw	14
 20432  00031E  184F               	xorwf	_which_screen,w,c
 20433  000320  A4D8               	btfss	status,2,c
 20434  000322  D01F               	goto	l889
 20435                           
 20436                           ;encoder.c: 121: if(drumCCMenu.selector < (drumCCMenu.number - 1)){
 20437  000324  0EFF               	movlw	255
 20438  000326  0100               	movlb	0	; () banked
 20439  000328  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20440  00032A  0EFF               	movlw	255
 20441  00032C  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20442  00032E  0101               	movlb	1	; () banked
 20443  000330  515C               	movf	_drumCCMenu& (0+255),w,b
 20444  000332  0100               	movlb	0	; () banked
 20445  000334  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20446  000336  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20447  000338  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20448  00033A  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20449  00033C  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20450  00033E  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20451  000340  0101               	movlb	1	; () banked
 20452  000342  515E               	movf	(_drumCCMenu+2)& (0+255),w,b
 20453  000344  0100               	movlb	0	; () banked
 20454  000346  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20455  000348  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20456  00034A  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20457  00034C  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20458  00034E  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20459  000350  0A80               	xorlw	128
 20460  000352  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20461  000354  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20462  000356  0A80               	xorlw	128
 20463  000358  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20464  00035A  B0D8               	btfsc	status,0,c
 20465  00035C  D002               	goto	l889
 20466                           
 20467                           ; BSR set to: 0
 20468                           ;encoder.c: 122: drumCCMenu.selector++;
 20469  00035E  0101               	movlb	1	; () banked
 20470  000360  2B5E               	incf	(_drumCCMenu+2)& (0+255),f,b
 20471  000362                     l889:
 20472                           
 20473                           ;encoder.c: 123: }
 20474                           ;encoder.c: 124: }
 20475                           ;encoder.c: 126: if (which_screen == POTS_RES_MENU) {
 20476                           
 20477                           ; BSR set to: 1
 20478                           
 20479                           ; BSR set to: 1
 20480  000362  0E0F               	movlw	15
 20481  000364  184F               	xorwf	_which_screen,w,c
 20482  000366  A4D8               	btfss	status,2,c
 20483  000368  D01F               	goto	l891
 20484                           
 20485                           ;encoder.c: 127: if(potsResoMenu.selector < (potsResoMenu.number - 1)){
 20486  00036A  0EFF               	movlw	255
 20487  00036C  0100               	movlb	0	; () banked
 20488  00036E  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20489  000370  0EFF               	movlw	255
 20490  000372  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20491  000374  0101               	movlb	1	; () banked
 20492  000376  5156               	movf	_potsResoMenu& (0+255),w,b
 20493  000378  0100               	movlb	0	; () banked
 20494  00037A  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20495  00037C  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20496  00037E  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20497  000380  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20498  000382  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20499  000384  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20500  000386  0101               	movlb	1	; () banked
 20501  000388  5158               	movf	(_potsResoMenu+2)& (0+255),w,b
 20502  00038A  0100               	movlb	0	; () banked
 20503  00038C  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20504  00038E  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20505  000390  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20506  000392  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20507  000394  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20508  000396  0A80               	xorlw	128
 20509  000398  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20510  00039A  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20511  00039C  0A80               	xorlw	128
 20512  00039E  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20513  0003A0  B0D8               	btfsc	status,0,c
 20514  0003A2  D002               	goto	l891
 20515                           
 20516                           ; BSR set to: 0
 20517                           ;encoder.c: 128: potsResoMenu.selector++;
 20518  0003A4  0101               	movlb	1	; () banked
 20519  0003A6  2B58               	incf	(_potsResoMenu+2)& (0+255),f,b
 20520  0003A8                     l891:
 20521                           
 20522                           ;encoder.c: 129: }
 20523                           ;encoder.c: 130: }
 20524                           ;encoder.c: 132: if (which_screen == ENCODER_POLARITY_MENU) {
 20525                           
 20526                           ; BSR set to: 1
 20527                           
 20528                           ; BSR set to: 1
 20529  0003A8  0E18               	movlw	24
 20530  0003AA  184F               	xorwf	_which_screen,w,c
 20531  0003AC  A4D8               	btfss	status,2,c
 20532  0003AE  D006               	goto	l893
 20533                           
 20534                           ;encoder.c: 136: if(encoderPolarityMenu.selector == 0){
 20535  0003B0  0101               	movlb	1	; () banked
 20536  0003B2  513A               	movf	(_encoderPolarityMenu+2)& (0+255),w,b
 20537  0003B4  A4D8               	btfss	status,2,c
 20538  0003B6  D002               	goto	l893
 20539                           
 20540                           ; BSR set to: 1
 20541                           ;encoder.c: 137: encoderPolarityMenu.selector = 1;
 20542  0003B8  0E01               	movlw	1
 20543  0003BA  6F3A               	movwf	(_encoderPolarityMenu+2)& (0+255),b
 20544  0003BC                     l893:
 20545                           
 20546                           ;encoder.c: 138: }
 20547                           ;encoder.c: 139: }
 20548                           ;encoder.c: 141: if (which_screen == POTS_ALPHA_MENU) {
 20549                           
 20550                           ; BSR set to: 1
 20551                           
 20552                           ; BSR set to: 1
 20553  0003BC  0E10               	movlw	16
 20554  0003BE  184F               	xorwf	_which_screen,w,c
 20555  0003C0  A4D8               	btfss	status,2,c
 20556  0003C2  D006               	goto	l895
 20557                           
 20558                           ;encoder.c: 142: if(potsAlphaMenu.selector <= 85){
 20559  0003C4  0E56               	movlw	86
 20560  0003C6  0101               	movlb	1	; () banked
 20561  0003C8  6155               	cpfslt	(_potsAlphaMenu+2)& (0+255),b
 20562  0003CA  D002               	goto	l895
 20563                           
 20564                           ; BSR set to: 1
 20565                           ;encoder.c: 143: potsAlphaMenu.selector += 5;
 20566  0003CC  0E05               	movlw	5
 20567  0003CE  2755               	addwf	(_potsAlphaMenu+2)& (0+255),f,b
 20568  0003D0                     l895:
 20569                           
 20570                           ;encoder.c: 144: }
 20571                           ;encoder.c: 145: }
 20572                           ;encoder.c: 147: if (which_screen == POTS_CC_MENU) {
 20573                           
 20574                           ; BSR set to: 1
 20575  0003D0  0E11               	movlw	17
 20576  0003D2  184F               	xorwf	_which_screen,w,c
 20577  0003D4  A4D8               	btfss	status,2,c
 20578  0003D6  D01F               	goto	l897
 20579                           
 20580                           ;encoder.c: 148: if(potsCCMenu.selector < (potsCCMenu.number - 1)){
 20581  0003D8  0EFF               	movlw	255
 20582  0003DA  0100               	movlb	0	; () banked
 20583  0003DC  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20584  0003DE  0EFF               	movlw	255
 20585  0003E0  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20586  0003E2  0101               	movlb	1	; () banked
 20587  0003E4  5150               	movf	_potsCCMenu& (0+255),w,b
 20588  0003E6  0100               	movlb	0	; () banked
 20589  0003E8  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20590  0003EA  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20591  0003EC  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20592  0003EE  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20593  0003F0  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20594  0003F2  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20595  0003F4  0101               	movlb	1	; () banked
 20596  0003F6  5152               	movf	(_potsCCMenu+2)& (0+255),w,b
 20597  0003F8  0100               	movlb	0	; () banked
 20598  0003FA  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20599  0003FC  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20600  0003FE  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20601  000400  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20602  000402  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20603  000404  0A80               	xorlw	128
 20604  000406  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20605  000408  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20606  00040A  0A80               	xorlw	128
 20607  00040C  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20608  00040E  B0D8               	btfsc	status,0,c
 20609  000410  D002               	goto	l897
 20610                           
 20611                           ; BSR set to: 0
 20612                           ;encoder.c: 149: potsCCMenu.selector++;
 20613  000412  0101               	movlb	1	; () banked
 20614  000414  2B52               	incf	(_potsCCMenu+2)& (0+255),f,b
 20615  000416                     l897:
 20616                           
 20617                           ;encoder.c: 150: }
 20618                           ;encoder.c: 151: }
 20619                           ;encoder.c: 153: if (which_screen == SLIDEPOTS_CC_MENU) {
 20620                           
 20621                           ; BSR set to: 1
 20622                           
 20623                           ; BSR set to: 1
 20624  000416  0E12               	movlw	18
 20625  000418  184F               	xorwf	_which_screen,w,c
 20626  00041A  A4D8               	btfss	status,2,c
 20627  00041C  D01F               	goto	l899
 20628                           
 20629                           ;encoder.c: 154: if(slidepotsCCMenu.selector < (slidepotsCCMenu.number - 1)){
 20630  00041E  0EFF               	movlw	255
 20631  000420  0100               	movlb	0	; () banked
 20632  000422  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20633  000424  0EFF               	movlw	255
 20634  000426  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20635  000428  0101               	movlb	1	; () banked
 20636  00042A  514D               	movf	_slidepotsCCMenu& (0+255),w,b
 20637  00042C  0100               	movlb	0	; () banked
 20638  00042E  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20639  000430  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20640  000432  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20641  000434  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20642  000436  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20643  000438  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20644  00043A  0101               	movlb	1	; () banked
 20645  00043C  514F               	movf	(_slidepotsCCMenu+2)& (0+255),w,b
 20646  00043E  0100               	movlb	0	; () banked
 20647  000440  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20648  000442  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20649  000444  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20650  000446  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20651  000448  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20652  00044A  0A80               	xorlw	128
 20653  00044C  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20654  00044E  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20655  000450  0A80               	xorlw	128
 20656  000452  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20657  000454  B0D8               	btfsc	status,0,c
 20658  000456  D002               	goto	l899
 20659                           
 20660                           ; BSR set to: 0
 20661                           ;encoder.c: 155: slidepotsCCMenu.selector++;
 20662  000458  0101               	movlb	1	; () banked
 20663  00045A  2B4F               	incf	(_slidepotsCCMenu+2)& (0+255),f,b
 20664  00045C                     l899:
 20665                           
 20666                           ;encoder.c: 156: }
 20667                           ;encoder.c: 157: }
 20668                           ;encoder.c: 159: if (which_screen == PROGRAM_CHANGE_MENU) {
 20669                           
 20670                           ; BSR set to: 1
 20671                           
 20672                           ; BSR set to: 1
 20673  00045C  0E08               	movlw	8
 20674  00045E  184F               	xorwf	_which_screen,w,c
 20675  000460  A4D8               	btfss	status,2,c
 20676  000462  D005               	goto	l901
 20677                           
 20678                           ;encoder.c: 160: if(programChangeMenu.selector < 127){
 20679  000464  0E7F               	movlw	127
 20680  000466  0101               	movlb	1	; () banked
 20681  000468  6146               	cpfslt	(_programChangeMenu+2)& (0+255),b
 20682  00046A  D001               	goto	l901
 20683                           
 20684                           ; BSR set to: 1
 20685                           ;encoder.c: 161: programChangeMenu.selector++;
 20686  00046C  2B46               	incf	(_programChangeMenu+2)& (0+255),f,b
 20687  00046E                     l901:
 20688                           
 20689                           ;encoder.c: 162: }
 20690                           ;encoder.c: 163: }
 20691                           ;encoder.c: 165: if (which_screen == MAIN_CH_MENU) {
 20692                           
 20693                           ; BSR set to: 1
 20694                           
 20695                           ; BSR set to: 1
 20696  00046E  0E14               	movlw	20
 20697  000470  184F               	xorwf	_which_screen,w,c
 20698  000472  A4D8               	btfss	status,2,c
 20699  000474  D005               	goto	l903
 20700                           
 20701                           ;encoder.c: 166: if(mainChannelMenu.selector < 15){
 20702  000476  0E0F               	movlw	15
 20703  000478  0101               	movlb	1	; () banked
 20704  00047A  6143               	cpfslt	(_mainChannelMenu+2)& (0+255),b
 20705  00047C  D001               	goto	l903
 20706                           
 20707                           ; BSR set to: 1
 20708                           ;encoder.c: 167: mainChannelMenu.selector++;
 20709  00047E  2B43               	incf	(_mainChannelMenu+2)& (0+255),f,b
 20710  000480                     l903:
 20711                           
 20712                           ;encoder.c: 168: }
 20713                           ;encoder.c: 169: }
 20714                           ;encoder.c: 171: if (which_screen == DRUM_CH_MENU) {
 20715                           
 20716                           ; BSR set to: 1
 20717                           
 20718                           ; BSR set to: 1
 20719  000480  0E15               	movlw	21
 20720  000482  184F               	xorwf	_which_screen,w,c
 20721  000484  A4D8               	btfss	status,2,c
 20722  000486  D005               	goto	l905
 20723                           
 20724                           ;encoder.c: 172: if(drumChannelMenu.selector < 15){
 20725  000488  0E0F               	movlw	15
 20726  00048A  0101               	movlb	1	; () banked
 20727  00048C  6140               	cpfslt	(_drumChannelMenu+2)& (0+255),b
 20728  00048E  D001               	goto	l905
 20729                           
 20730                           ; BSR set to: 1
 20731                           ;encoder.c: 173: drumChannelMenu.selector++;
 20732  000490  2B40               	incf	(_drumChannelMenu+2)& (0+255),f,b
 20733  000492                     l905:
 20734                           
 20735                           ;encoder.c: 174: }
 20736                           ;encoder.c: 175: }
 20737                           ;encoder.c: 176: if (which_screen == JOYSTICK_CC_MENU) {
 20738                           
 20739                           ; BSR set to: 1
 20740                           
 20741                           ; BSR set to: 1
 20742  000492  0E13               	movlw	19
 20743  000494  184F               	xorwf	_which_screen,w,c
 20744  000496  A4D8               	btfss	status,2,c
 20745  000498  D01F               	goto	l907
 20746                           
 20747                           ;encoder.c: 177: if(joystickCCMenu.selector < (joystickCCMenu.number - 1)){
 20748  00049A  0EFF               	movlw	255
 20749  00049C  0100               	movlb	0	; () banked
 20750  00049E  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20751  0004A0  0EFF               	movlw	255
 20752  0004A2  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20753  0004A4  0101               	movlb	1	; () banked
 20754  0004A6  514A               	movf	_joystickCCMenu& (0+255),w,b
 20755  0004A8  0100               	movlb	0	; () banked
 20756  0004AA  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20757  0004AC  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20758  0004AE  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20759  0004B0  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20760  0004B2  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20761  0004B4  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20762  0004B6  0101               	movlb	1	; () banked
 20763  0004B8  514C               	movf	(_joystickCCMenu+2)& (0+255),w,b
 20764  0004BA  0100               	movlb	0	; () banked
 20765  0004BC  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20766  0004BE  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20767  0004C0  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20768  0004C2  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20769  0004C4  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20770  0004C6  0A80               	xorlw	128
 20771  0004C8  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20772  0004CA  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20773  0004CC  0A80               	xorlw	128
 20774  0004CE  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20775  0004D0  B0D8               	btfsc	status,0,c
 20776  0004D2  D002               	goto	l907
 20777                           
 20778                           ; BSR set to: 0
 20779                           ;encoder.c: 178: joystickCCMenu.selector++;
 20780  0004D4  0101               	movlb	1	; () banked
 20781  0004D6  2B4C               	incf	(_joystickCCMenu+2)& (0+255),f,b
 20782  0004D8                     l907:
 20783                           
 20784                           ;encoder.c: 179: }
 20785                           ;encoder.c: 180: }
 20786                           ;encoder.c: 181: if (which_screen == EEPROM_MENU) {
 20787                           
 20788                           ; BSR set to: 1
 20789                           
 20790                           ; BSR set to: 1
 20791  0004D8  0E16               	movlw	22
 20792  0004DA  184F               	xorwf	_which_screen,w,c
 20793  0004DC  A4D8               	btfss	status,2,c
 20794  0004DE  D01F               	goto	l909
 20795                           
 20796                           ;encoder.c: 182: if(eepromMenu.selector < (eepromMenu.number - 1)){
 20797  0004E0  0EFF               	movlw	255
 20798  0004E2  0100               	movlb	0	; () banked
 20799  0004E4  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20800  0004E6  0EFF               	movlw	255
 20801  0004E8  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20802  0004EA  0101               	movlb	1	; () banked
 20803  0004EC  513B               	movf	_eepromMenu& (0+255),w,b
 20804  0004EE  0100               	movlb	0	; () banked
 20805  0004F0  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20806  0004F2  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20807  0004F4  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20808  0004F6  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20809  0004F8  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20810  0004FA  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20811  0004FC  0101               	movlb	1	; () banked
 20812  0004FE  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 20813  000500  0100               	movlb	0	; () banked
 20814  000502  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20815  000504  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20816  000506  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20817  000508  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20818  00050A  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20819  00050C  0A80               	xorlw	128
 20820  00050E  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20821  000510  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20822  000512  0A80               	xorlw	128
 20823  000514  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20824  000516  B0D8               	btfsc	status,0,c
 20825  000518  D002               	goto	l909
 20826                           
 20827                           ; BSR set to: 0
 20828                           ;encoder.c: 183: eepromMenu.selector++;
 20829  00051A  0101               	movlb	1	; () banked
 20830  00051C  2B3D               	incf	(_eepromMenu+2)& (0+255),f,b
 20831  00051E                     l909:
 20832                           
 20833                           ;encoder.c: 184: }
 20834                           ;encoder.c: 185: }
 20835                           ;encoder.c: 186: if (which_screen == SAVES_MENU) {
 20836                           
 20837                           ; BSR set to: 1
 20838                           
 20839                           ; BSR set to: 1
 20840  00051E  0E17               	movlw	23
 20841  000520  184F               	xorwf	_which_screen,w,c
 20842  000522  A4D8               	btfss	status,2,c
 20843  000524  D019               	goto	l911
 20844                           
 20845                           ;encoder.c: 187: if(savesMenu.selector < (savesMenu.number - 1)){
 20846  000526  0EFF               	movlw	255
 20847  000528  0100               	movlb	0	; () banked
 20848  00052A  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20849  00052C  0EFF               	movlw	255
 20850  00052E  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20851  000530  51E2               	movf	_savesMenu& (0+255),w,b
 20852  000532  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20853  000534  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20854  000536  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20855  000538  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20856  00053A  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20857  00053C  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20858  00053E  51E4               	movf	(_savesMenu+2)& (0+255),w,b
 20859  000540  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20860  000542  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20861  000544  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20862  000546  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20863  000548  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20864  00054A  0A80               	xorlw	128
 20865  00054C  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20866  00054E  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20867  000550  0A80               	xorlw	128
 20868  000552  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20869  000554  A0D8               	btfss	status,0,c
 20870                           
 20871                           ; BSR set to: 0
 20872                           ;encoder.c: 188: savesMenu.selector++;
 20873  000556  2BE4               	incf	(_savesMenu+2)& (0+255),f,b
 20874  000558                     l911:
 20875                           
 20876                           ;encoder.c: 189: }
 20877                           ;encoder.c: 190: }
 20878                           ;encoder.c: 192: if (which_screen == ARPEGGIATOR_MENU) {
 20879                           
 20880                           ; BSR set to: 0
 20881                           
 20882                           ; BSR set to: 0
 20883  000558  0E19               	movlw	25
 20884  00055A  184F               	xorwf	_which_screen,w,c
 20885  00055C  A4D8               	btfss	status,2,c
 20886  00055E  D019               	goto	l913
 20887                           
 20888                           ;encoder.c: 193: if(arpeggiatorMenu.selector < (arpeggiatorMenu.number - 1)){
 20889  000560  0EFF               	movlw	255
 20890  000562  0100               	movlb	0	; () banked
 20891  000564  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20892  000566  0EFF               	movlw	255
 20893  000568  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20894  00056A  51DF               	movf	_arpeggiatorMenu& (0+255),w,b
 20895  00056C  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20896  00056E  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20897  000570  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20898  000572  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20899  000574  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20900  000576  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20901  000578  51E1               	movf	(_arpeggiatorMenu+2)& (0+255),w,b
 20902  00057A  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20903  00057C  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20904  00057E  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20905  000580  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20906  000582  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20907  000584  0A80               	xorlw	128
 20908  000586  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20909  000588  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20910  00058A  0A80               	xorlw	128
 20911  00058C  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20912  00058E  A0D8               	btfss	status,0,c
 20913                           
 20914                           ; BSR set to: 0
 20915                           ;encoder.c: 194: arpeggiatorMenu.selector++;
 20916  000590  2BE1               	incf	(_arpeggiatorMenu+2)& (0+255),f,b
 20917  000592                     l913:
 20918                           
 20919                           ;encoder.c: 195: }
 20920                           ;encoder.c: 196: }
 20921                           ;encoder.c: 198: if (which_screen == ARPEGGIATOR_ON_OFF_MENU) {
 20922                           
 20923                           ; BSR set to: 0
 20924                           
 20925                           ; BSR set to: 0
 20926  000592  0E1A               	movlw	26
 20927  000594  184F               	xorwf	_which_screen,w,c
 20928  000596  A4D8               	btfss	status,2,c
 20929  000598  D003               	goto	l914
 20930                           
 20931                           ;encoder.c: 199: arpeggiatorOnOffMenu.selector ^= 1;
 20932  00059A  0E01               	movlw	1
 20933  00059C  0101               	movlb	1	; () banked
 20934  00059E  1B37               	xorwf	(_arpeggiatorOnOffMenu+2)& (0+255),f,b
 20935  0005A0                     l914:
 20936                           
 20937                           ;encoder.c: 203: }
 20938                           ;encoder.c: 204: if (which_screen == ARPEGGIATOR_TEMPO_MENU) {
 20939  0005A0  0E1B               	movlw	27
 20940  0005A2  184F               	xorwf	_which_screen,w,c
 20941  0005A4  A4D8               	btfss	status,2,c
 20942  0005A6  D005               	goto	l916
 20943                           
 20944                           ;encoder.c: 205: if(arpeggiatorTempoMenu.selector < 250){
 20945  0005A8  0EFA               	movlw	250
 20946  0005AA  0101               	movlb	1	; () banked
 20947  0005AC  6134               	cpfslt	(_arpeggiatorTempoMenu+2)& (0+255),b
 20948  0005AE  D001               	goto	l916
 20949                           
 20950                           ; BSR set to: 1
 20951                           ;encoder.c: 206: arpeggiatorTempoMenu.selector++;
 20952  0005B0  2B34               	incf	(_arpeggiatorTempoMenu+2)& (0+255),f,b
 20953  0005B2                     l916:
 20954                           
 20955                           ;encoder.c: 207: }
 20956                           ;encoder.c: 208: }
 20957                           ;encoder.c: 209: if (which_screen == ARPEGGIATOR_OCTAVES_MENU) {
 20958                           
 20959                           ; BSR set to: 1
 20960                           
 20961                           ; BSR set to: 1
 20962  0005B2  0E1C               	movlw	28
 20963  0005B4  184F               	xorwf	_which_screen,w,c
 20964  0005B6  A4D8               	btfss	status,2,c
 20965  0005B8  D005               	goto	l918
 20966                           
 20967                           ;encoder.c: 210: if(arpeggiatorOctavesMenu.selector < 4){
 20968  0005BA  0E04               	movlw	4
 20969  0005BC  0101               	movlb	1	; () banked
 20970  0005BE  6131               	cpfslt	(_arpeggiatorOctavesMenu+2)& (0+255),b
 20971  0005C0  D001               	goto	l918
 20972                           
 20973                           ; BSR set to: 1
 20974                           ;encoder.c: 211: arpeggiatorOctavesMenu.selector++;
 20975  0005C2  2B31               	incf	(_arpeggiatorOctavesMenu+2)& (0+255),f,b
 20976  0005C4                     l918:
 20977                           
 20978                           ;encoder.c: 212: }
 20979                           ;encoder.c: 213: }
 20980                           ;encoder.c: 214: if (which_screen == ARPEGGIATOR_ARPEGGIO_TYPE_MENU) {
 20981                           
 20982                           ; BSR set to: 1
 20983                           
 20984                           ; BSR set to: 1
 20985  0005C4  0E1D               	movlw	29
 20986  0005C6  184F               	xorwf	_which_screen,w,c
 20987  0005C8  A4D8               	btfss	status,2,c
 20988  0005CA  D01F               	goto	l920
 20989                           
 20990                           ;encoder.c: 215: if(arpeggiatorTypeMenu.selector < (arpeggiatorTypeMenu.number - 1)){
 20991  0005CC  0EFF               	movlw	255
 20992  0005CE  0100               	movlb	0	; () banked
 20993  0005D0  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20994  0005D2  0EFF               	movlw	255
 20995  0005D4  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20996  0005D6  0101               	movlb	1	; () banked
 20997  0005D8  512C               	movf	_arpeggiatorTypeMenu& (0+255),w,b
 20998  0005DA  0100               	movlb	0	; () banked
 20999  0005DC  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21000  0005DE  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21001  0005E0  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21002  0005E2  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21003  0005E4  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21004  0005E6  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21005  0005E8  0101               	movlb	1	; () banked
 21006  0005EA  512E               	movf	(_arpeggiatorTypeMenu+2)& (0+255),w,b
 21007  0005EC  0100               	movlb	0	; () banked
 21008  0005EE  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21009  0005F0  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21010  0005F2  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21011  0005F4  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21012  0005F6  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21013  0005F8  0A80               	xorlw	128
 21014  0005FA  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21015  0005FC  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21016  0005FE  0A80               	xorlw	128
 21017  000600  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21018  000602  B0D8               	btfsc	status,0,c
 21019  000604  D002               	goto	l920
 21020                           
 21021                           ; BSR set to: 0
 21022                           ;encoder.c: 216: arpeggiatorTypeMenu.selector++;
 21023  000606  0101               	movlb	1	; () banked
 21024  000608  2B2E               	incf	(_arpeggiatorTypeMenu+2)& (0+255),f,b
 21025  00060A                     l920:
 21026                           
 21027                           ;encoder.c: 217: }
 21028                           ;encoder.c: 218: }
 21029                           ;encoder.c: 219: if (which_screen == ARPEGGIATOR_NOTE_LENGTH_MENU) {
 21030                           
 21031                           ; BSR set to: 1
 21032                           
 21033                           ; BSR set to: 1
 21034  00060A  0E1E               	movlw	30
 21035  00060C  184F               	xorwf	_which_screen,w,c
 21036  00060E  A4D8               	btfss	status,2,c
 21037  000610  D01F               	goto	l922
 21038                           
 21039                           ;encoder.c: 220: if(arpeggiatorNoteLengthMenu.selector < (arpeggiatorNoteLengthMenu.numb
      +                          er - 1)){
 21040  000612  0EFF               	movlw	255
 21041  000614  0100               	movlb	0	; () banked
 21042  000616  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 21043  000618  0EFF               	movlw	255
 21044  00061A  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 21045  00061C  0101               	movlb	1	; () banked
 21046  00061E  5129               	movf	_arpeggiatorNoteLengthMenu& (0+255),w,b
 21047  000620  0100               	movlb	0	; () banked
 21048  000622  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21049  000624  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21050  000626  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21051  000628  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21052  00062A  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21053  00062C  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21054  00062E  0101               	movlb	1	; () banked
 21055  000630  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 21056  000632  0100               	movlb	0	; () banked
 21057  000634  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21058  000636  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21059  000638  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21060  00063A  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21061  00063C  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21062  00063E  0A80               	xorlw	128
 21063  000640  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21064  000642  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21065  000644  0A80               	xorlw	128
 21066  000646  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21067  000648  B0D8               	btfsc	status,0,c
 21068  00064A  D002               	goto	l922
 21069                           
 21070                           ; BSR set to: 0
 21071                           ;encoder.c: 221: arpeggiatorNoteLengthMenu.selector++;
 21072  00064C  0101               	movlb	1	; () banked
 21073  00064E  2B2B               	incf	(_arpeggiatorNoteLengthMenu+2)& (0+255),f,b
 21074  000650                     l922:
 21075                           
 21076                           ;encoder.c: 222: }
 21077                           ;encoder.c: 223: }
 21078                           ;encoder.c: 224: if (which_screen == ARPEGGIATOR_LATCH_MENU) {
 21079                           
 21080                           ; BSR set to: 1
 21081                           
 21082                           ; BSR set to: 1
 21083  000650  0E1F               	movlw	31
 21084  000652  184F               	xorwf	_which_screen,w,c
 21085  000654  A4D8               	btfss	status,2,c
 21086  000656  D01F               	goto	l924
 21087                           
 21088                           ;encoder.c: 226: if(arpeggiatorLatchMenu.selector < (arpeggiatorLatchMenu.number - 1)){
 21089  000658  0EFF               	movlw	255
 21090  00065A  0100               	movlb	0	; () banked
 21091  00065C  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 21092  00065E  0EFF               	movlw	255
 21093  000660  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 21094  000662  0101               	movlb	1	; () banked
 21095  000664  5126               	movf	_arpeggiatorLatchMenu& (0+255),w,b
 21096  000666  0100               	movlb	0	; () banked
 21097  000668  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21098  00066A  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21099  00066C  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21100  00066E  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21101  000670  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21102  000672  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21103  000674  0101               	movlb	1	; () banked
 21104  000676  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 21105  000678  0100               	movlb	0	; () banked
 21106  00067A  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21107  00067C  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21108  00067E  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21109  000680  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21110  000682  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21111  000684  0A80               	xorlw	128
 21112  000686  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21113  000688  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21114  00068A  0A80               	xorlw	128
 21115  00068C  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21116  00068E  B0D8               	btfsc	status,0,c
 21117  000690  D002               	goto	l924
 21118                           
 21119                           ; BSR set to: 0
 21120                           ;encoder.c: 227: arpeggiatorLatchMenu.selector++;
 21121  000692  0101               	movlb	1	; () banked
 21122  000694  2B28               	incf	(_arpeggiatorLatchMenu+2)& (0+255),f,b
 21123  000696                     l924:
 21124                           
 21125                           ;encoder.c: 228: }
 21126                           ;encoder.c: 229: }
 21127                           ;encoder.c: 230: if (which_screen == ARPEGGIATOR_LATCH_ON_OFF_MENU) {
 21128                           
 21129                           ; BSR set to: 1
 21130                           
 21131                           ; BSR set to: 1
 21132  000696  0E20               	movlw	32
 21133  000698  184F               	xorwf	_which_screen,w,c
 21134  00069A  A4D8               	btfss	status,2,c
 21135  00069C  D003               	goto	l925
 21136                           
 21137                           ;encoder.c: 231: arpeggiatorLatchOnOffMenu.selector ^= 1;
 21138  00069E  0E01               	movlw	1
 21139  0006A0  0101               	movlb	1	; () banked
 21140  0006A2  1B25               	xorwf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),f,b
 21141  0006A4                     l925:
 21142                           
 21143                           ;encoder.c: 232: }
 21144                           ;encoder.c: 233: if (which_screen == ARPEGGIATOR_AUTO_LATCH_ON_OFF_MENU) {
 21145  0006A4  0E21               	movlw	33
 21146  0006A6  184F               	xorwf	_which_screen,w,c
 21147  0006A8  A4D8               	btfss	status,2,c
 21148  0006AA  D003               	goto	l926
 21149                           
 21150                           ;encoder.c: 234: arpeggiatorAutoLatchOnOffMenu.selector ^= 1;
 21151  0006AC  0E01               	movlw	1
 21152  0006AE  0101               	movlb	1	; () banked
 21153  0006B0  1B22               	xorwf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),f,b
 21154  0006B2                     l926:
 21155                           
 21156                           ;encoder.c: 235: }
 21157                           ;encoder.c: 236: if (which_screen == ARPEGGIATOR_UN_LATCH_MODE_MENU) {
 21158  0006B2  0E22               	movlw	34
 21159  0006B4  184F               	xorwf	_which_screen,w,c
 21160  0006B6  A4D8               	btfss	status,2,c
 21161  0006B8  D003               	goto	l927
 21162                           
 21163                           ;encoder.c: 237: arpeggiatorUnLatchModeMenu.selector ^= 1;
 21164  0006BA  0E01               	movlw	1
 21165  0006BC  0101               	movlb	1	; () banked
 21166  0006BE  1B1F               	xorwf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),f,b
 21167  0006C0                     l927:
 21168                           
 21169                           ;encoder.c: 238: }
 21170                           ;encoder.c: 239: if (which_screen == ARPEGGIATOR_RANDOMIZE_SKIP_MENU) {
 21171  0006C0  0E23               	movlw	35
 21172  0006C2  184F               	xorwf	_which_screen,w,c
 21173  0006C4  A4D8               	btfss	status,2,c
 21174  0006C6  D01F               	goto	l929
 21175                           
 21176                           ;encoder.c: 240: if(arpeggiatorRandomizeSkipMenu.selector < (arpeggiatorRandomizeSkipMen
      +                          u.number - 1)){
 21177  0006C8  0EFF               	movlw	255
 21178  0006CA  0100               	movlb	0	; () banked
 21179  0006CC  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 21180  0006CE  0EFF               	movlw	255
 21181  0006D0  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 21182  0006D2  0101               	movlb	1	; () banked
 21183  0006D4  511A               	movf	_arpeggiatorRandomizeSkipMenu& (0+255),w,b
 21184  0006D6  0100               	movlb	0	; () banked
 21185  0006D8  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21186  0006DA  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21187  0006DC  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21188  0006DE  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21189  0006E0  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21190  0006E2  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21191  0006E4  0101               	movlb	1	; () banked
 21192  0006E6  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 21193  0006E8  0100               	movlb	0	; () banked
 21194  0006EA  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21195  0006EC  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21196  0006EE  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21197  0006F0  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21198  0006F2  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21199  0006F4  0A80               	xorlw	128
 21200  0006F6  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21201  0006F8  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21202  0006FA  0A80               	xorlw	128
 21203  0006FC  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21204  0006FE  B0D8               	btfsc	status,0,c
 21205  000700  D002               	goto	l929
 21206                           
 21207                           ; BSR set to: 0
 21208                           ;encoder.c: 241: arpeggiatorRandomizeSkipMenu.selector++;
 21209  000702  0101               	movlb	1	; () banked
 21210  000704  2B1C               	incf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),f,b
 21211  000706                     l929:
 21212                           
 21213                           ;encoder.c: 242: }
 21214                           ;encoder.c: 243: }
 21215                           ;encoder.c: 244: if (which_screen == ARPEGGIATOR_RANDOMIZE_TYPE_MENU) {
 21216                           
 21217                           ; BSR set to: 1
 21218                           
 21219                           ; BSR set to: 1
 21220  000706  0E24               	movlw	36
 21221  000708  184F               	xorwf	_which_screen,w,c
 21222  00070A  A4D8               	btfss	status,2,c
 21223  00070C  D003               	goto	l930
 21224                           
 21225                           ;encoder.c: 245: arpeggiatorRandomizeTypeMenu.selector ^= 1;
 21226  00070E  0E01               	movlw	1
 21227  000710  0101               	movlb	1	; () banked
 21228  000712  1B19               	xorwf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),f,b
 21229  000714                     l930:
 21230                           
 21231                           ;encoder.c: 249: }
 21232                           ;encoder.c: 250: if (which_screen == ARPEGGIATOR_SKIP_FIRST_LAST_MENU) {
 21233  000714  0E25               	movlw	37
 21234  000716  184F               	xorwf	_which_screen,w,c
 21235  000718  A4D8               	btfss	status,2,c
 21236  00071A  D003               	goto	l931
 21237                           
 21238                           ;encoder.c: 251: arpeggiatorSkipFirstLastMenu.selector ^= 1;
 21239  00071C  0E01               	movlw	1
 21240  00071E  0101               	movlb	1	; () banked
 21241  000720  1B16               	xorwf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),f,b
 21242  000722                     l931:
 21243                           
 21244                           ;encoder.c: 252: }
 21245                           ;encoder.c: 253: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_MENU) {
 21246  000722  0E26               	movlw	38
 21247  000724  184F               	xorwf	_which_screen,w,c
 21248  000726  A4D8               	btfss	status,2,c
 21249  000728  D019               	goto	l933
 21250                           
 21251                           ;encoder.c: 254: if(arpeggiatorLastNoteModeMenu.selector < (arpeggiatorLastNoteModeMenu.
      +                          number - 1)){
 21252  00072A  0EFF               	movlw	255
 21253  00072C  0100               	movlb	0	; () banked
 21254  00072E  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 21255  000730  0EFF               	movlw	255
 21256  000732  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 21257  000734  51DC               	movf	_arpeggiatorLastNoteModeMenu& (0+255),w,b
 21258  000736  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21259  000738  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21260  00073A  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21261  00073C  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21262  00073E  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21263  000740  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21264  000742  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 21265  000744  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21266  000746  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21267  000748  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21268  00074A  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21269  00074C  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21270  00074E  0A80               	xorlw	128
 21271  000750  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21272  000752  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21273  000754  0A80               	xorlw	128
 21274  000756  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21275  000758  A0D8               	btfss	status,0,c
 21276                           
 21277                           ; BSR set to: 0
 21278                           ;encoder.c: 255: arpeggiatorLastNoteModeMenu.selector++;
 21279  00075A  2BDE               	incf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),f,b
 21280  00075C                     l933:
 21281                           
 21282                           ;encoder.c: 256: }
 21283                           ;encoder.c: 257: }
 21284                           ;encoder.c: 258: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_PRESS_MENU) {
 21285                           
 21286                           ; BSR set to: 0
 21287                           
 21288                           ; BSR set to: 0
 21289  00075C  0E27               	movlw	39
 21290  00075E  184F               	xorwf	_which_screen,w,c
 21291  000760  A4D8               	btfss	status,2,c
 21292  000762  D003               	goto	l934
 21293                           
 21294                           ;encoder.c: 259: arpeggiatorLastNoteModeKeyPressMenu.selector ^= 1;
 21295  000764  0E01               	movlw	1
 21296  000766  0101               	movlb	1	; () banked
 21297  000768  1B13               	xorwf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),f,b
 21298  00076A                     l934:
 21299                           
 21300                           ;encoder.c: 260: }
 21301                           ;encoder.c: 261: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_RELEASE_MENU) {
 21302  00076A  0E28               	movlw	40
 21303  00076C  184F               	xorwf	_which_screen,w,c
 21304  00076E  A4D8               	btfss	status,2,c
 21305  000770  D003               	goto	l935
 21306                           
 21307                           ;encoder.c: 262: arpeggiatorLastNoteModeKeyReleaseMenu.selector ^= 1;
 21308  000772  0E01               	movlw	1
 21309  000774  0101               	movlb	1	; () banked
 21310  000776  1B10               	xorwf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),f,b
 21311  000778                     l935:
 21312                           
 21313                           ;encoder.c: 263: }
 21314                           ;encoder.c: 264: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU) {
 21315  000778  0E29               	movlw	41
 21316  00077A  184F               	xorwf	_which_screen,w,c
 21317  00077C  A4D8               	btfss	status,2,c
 21318  00077E  D003               	goto	l936
 21319                           
 21320                           ;encoder.c: 265: arpeggiatorLastNoteModeTransposeMenu.selector ^= 1;
 21321  000780  0E01               	movlw	1
 21322  000782  0101               	movlb	1	; () banked
 21323  000784  1B0D               	xorwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),f,b
 21324  000786                     l936:
 21325                           
 21326                           ;encoder.c: 266: }
 21327                           ;encoder.c: 267: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_RESET_MENU) {
 21328  000786  0E2A               	movlw	42
 21329  000788  184F               	xorwf	_which_screen,w,c
 21330  00078A  A4D8               	btfss	status,2,c
 21331  00078C  D003               	goto	l937
 21332                           
 21333                           ;encoder.c: 268: arpeggiatorLastNoteModeResetMenu.selector ^= 1;
 21334  00078E  0E01               	movlw	1
 21335  000790  0101               	movlb	1	; () banked
 21336  000792  1B0A               	xorwf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),f,b
 21337  000794                     l937:
 21338                           
 21339                           ;encoder.c: 269: }
 21340                           ;encoder.c: 270: }
 21341                           ;encoder.c: 273: if (encoder_direction == 0x20) {
 21342                           
 21343                           ; BSR set to: 1
 21344  000794  0E20               	movlw	32
 21345  000796  1836               	xorwf	_encoder_direction,w,c
 21346  000798  A4D8               	btfss	status,2,c
 21347  00079A  D147               	goto	l1011
 21348                           
 21349                           ;encoder.c: 275: lcd_print_once = 0;
 21350  00079C  9E04               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 21351                           
 21352                           ;encoder.c: 276: print_row_2_once = 0;
 21353  00079E  9C04               	bcf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 21354                           
 21355                           ;encoder.c: 279: if (which_screen == MAIN_MENU) {
 21356  0007A0  0E02               	movlw	2
 21357  0007A2  184F               	xorwf	_which_screen,w,c
 21358  0007A4  A4D8               	btfss	status,2,c
 21359  0007A6  D004               	goto	l940
 21360                           
 21361                           ;encoder.c: 280: if(mainMenu.selector > 0){
 21362  0007A8  0101               	movlb	1	; () banked
 21363  0007AA  5176               	movf	(_mainMenu+2)& (0+255),w,b
 21364  0007AC  A4D8               	btfss	status,2,c
 21365                           
 21366                           ; BSR set to: 1
 21367                           ;encoder.c: 281: mainMenu.selector--;
 21368  0007AE  0776               	decf	(_mainMenu+2)& (0+255),f,b
 21369  0007B0                     l940:
 21370                           
 21371                           ;encoder.c: 282: }
 21372                           ;encoder.c: 283: }
 21373                           ;encoder.c: 284: if (which_screen == KEYBOARD_MENU) {
 21374                           
 21375                           ; BSR set to: 1
 21376                           
 21377                           ; BSR set to: 1
 21378  0007B0  0E03               	movlw	3
 21379  0007B2  184F               	xorwf	_which_screen,w,c
 21380  0007B4  A4D8               	btfss	status,2,c
 21381  0007B6  D004               	goto	l942
 21382                           
 21383                           ;encoder.c: 285: if(keyboardMenu.selector > 0){
 21384  0007B8  0100               	movlb	0	; () banked
 21385  0007BA  51E7               	movf	(_keyboardMenu+2)& (0+255),w,b
 21386  0007BC  A4D8               	btfss	status,2,c
 21387                           
 21388                           ; BSR set to: 0
 21389                           ;encoder.c: 286: keyboardMenu.selector--;
 21390  0007BE  07E7               	decf	(_keyboardMenu+2)& (0+255),f,b
 21391  0007C0                     l942:
 21392                           
 21393                           ;encoder.c: 287: }
 21394                           ;encoder.c: 288: }
 21395                           ;encoder.c: 289: if (which_screen == TRANSPOSE_MENU) {
 21396                           
 21397                           ; BSR set to: 0
 21398                           
 21399                           ; BSR set to: 0
 21400  0007C0  0E04               	movlw	4
 21401  0007C2  184F               	xorwf	_which_screen,w,c
 21402  0007C4  A4D8               	btfss	status,2,c
 21403  0007C6  D004               	goto	l944
 21404                           
 21405                           ;encoder.c: 290: if(transposeMenu.selector > 0){
 21406  0007C8  0101               	movlb	1	; () banked
 21407  0007CA  516A               	movf	(_transposeMenu+2)& (0+255),w,b
 21408  0007CC  A4D8               	btfss	status,2,c
 21409                           
 21410                           ; BSR set to: 1
 21411                           ;encoder.c: 291: transposeMenu.selector--;
 21412  0007CE  076A               	decf	(_transposeMenu+2)& (0+255),f,b
 21413  0007D0                     l944:
 21414                           
 21415                           ;encoder.c: 292: }
 21416                           ;encoder.c: 293: }
 21417                           ;encoder.c: 294: if (which_screen == DRUM_MENU) {
 21418                           
 21419                           ; BSR set to: 1
 21420                           
 21421                           ; BSR set to: 1
 21422  0007D0  0E05               	movlw	5
 21423  0007D2  184F               	xorwf	_which_screen,w,c
 21424  0007D4  A4D8               	btfss	status,2,c
 21425  0007D6  D004               	goto	l946
 21426                           
 21427                           ;encoder.c: 295: if(drumMenu.selector > 0){
 21428  0007D8  0101               	movlb	1	; () banked
 21429  0007DA  5167               	movf	(_drumMenu+2)& (0+255),w,b
 21430  0007DC  A4D8               	btfss	status,2,c
 21431                           
 21432                           ; BSR set to: 1
 21433                           ;encoder.c: 296: drumMenu.selector--;
 21434  0007DE  0767               	decf	(_drumMenu+2)& (0+255),f,b
 21435  0007E0                     l946:
 21436                           
 21437                           ;encoder.c: 297: }
 21438                           ;encoder.c: 298: }
 21439                           ;encoder.c: 299: if (which_screen == POTENTIOMETER_MENU) {
 21440                           
 21441                           ; BSR set to: 1
 21442                           
 21443                           ; BSR set to: 1
 21444  0007E0  0E06               	movlw	6
 21445  0007E2  184F               	xorwf	_which_screen,w,c
 21446  0007E4  A4D8               	btfss	status,2,c
 21447  0007E6  D004               	goto	l948
 21448                           
 21449                           ;encoder.c: 300: if(potsMenu.selector > 0){
 21450  0007E8  0101               	movlb	1	; () banked
 21451  0007EA  515B               	movf	(_potsMenu+2)& (0+255),w,b
 21452  0007EC  A4D8               	btfss	status,2,c
 21453                           
 21454                           ; BSR set to: 1
 21455                           ;encoder.c: 301: potsMenu.selector--;
 21456  0007EE  075B               	decf	(_potsMenu+2)& (0+255),f,b
 21457  0007F0                     l948:
 21458                           
 21459                           ;encoder.c: 302: }
 21460                           ;encoder.c: 303: }
 21461                           ;encoder.c: 304: if (which_screen == MIDI_CHANNEL_MENU) {
 21462                           
 21463                           ; BSR set to: 1
 21464                           
 21465                           ; BSR set to: 1
 21466  0007F0  0E07               	movlw	7
 21467  0007F2  184F               	xorwf	_which_screen,w,c
 21468  0007F4  A4D8               	btfss	status,2,c
 21469  0007F6  D004               	goto	l950
 21470                           
 21471                           ;encoder.c: 305: if(midiChannelMenu.selector > 0){
 21472  0007F8  0101               	movlb	1	; () banked
 21473  0007FA  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 21474  0007FC  A4D8               	btfss	status,2,c
 21475                           
 21476                           ; BSR set to: 1
 21477                           ;encoder.c: 306: midiChannelMenu.selector--;
 21478  0007FE  0749               	decf	(_midiChannelMenu+2)& (0+255),f,b
 21479  000800                     l950:
 21480                           
 21481                           ;encoder.c: 307: }
 21482                           ;encoder.c: 308: }
 21483                           ;encoder.c: 310: if (which_screen == MODES_MENU) {
 21484                           
 21485                           ; BSR set to: 1
 21486                           
 21487                           ; BSR set to: 1
 21488  000800  0E09               	movlw	9
 21489  000802  184F               	xorwf	_which_screen,w,c
 21490  000804  A4D8               	btfss	status,2,c
 21491  000806  D004               	goto	l952
 21492                           
 21493                           ;encoder.c: 311: if(modeMenu.selector > 0){
 21494  000808  0101               	movlb	1	; () banked
 21495  00080A  5173               	movf	(_modeMenu+2)& (0+255),w,b
 21496  00080C  A4D8               	btfss	status,2,c
 21497                           
 21498                           ; BSR set to: 1
 21499                           ;encoder.c: 312: modeMenu.selector--;
 21500  00080E  0773               	decf	(_modeMenu+2)& (0+255),f,b
 21501  000810                     l952:
 21502                           
 21503                           ;encoder.c: 313: }
 21504                           ;encoder.c: 314: }
 21505                           ;encoder.c: 316: if (which_screen == TRIADS_MENU) {
 21506                           
 21507                           ; BSR set to: 1
 21508                           
 21509                           ; BSR set to: 1
 21510  000810  0E0A               	movlw	10
 21511  000812  184F               	xorwf	_which_screen,w,c
 21512  000814  A4D8               	btfss	status,2,c
 21513  000816  D004               	goto	l954
 21514                           
 21515                           ;encoder.c: 317: if(triadMenu.selector > 0){
 21516  000818  0101               	movlb	1	; () banked
 21517  00081A  5170               	movf	(_triadMenu+2)& (0+255),w,b
 21518  00081C  A4D8               	btfss	status,2,c
 21519                           
 21520                           ; BSR set to: 1
 21521                           ;encoder.c: 318: triadMenu.selector--;
 21522  00081E  0770               	decf	(_triadMenu+2)& (0+255),f,b
 21523  000820                     l954:
 21524                           
 21525                           ;encoder.c: 319: }
 21526                           ;encoder.c: 320: }
 21527                           ;encoder.c: 321: if (which_screen == SEVENTHS_MENU) {
 21528                           
 21529                           ; BSR set to: 1
 21530                           
 21531                           ; BSR set to: 1
 21532  000820  0E0B               	movlw	11
 21533  000822  184F               	xorwf	_which_screen,w,c
 21534  000824  A4D8               	btfss	status,2,c
 21535  000826  D004               	goto	l956
 21536                           
 21537                           ;encoder.c: 322: if(seventhMenu.selector > 0){
 21538  000828  0101               	movlb	1	; () banked
 21539  00082A  516D               	movf	(_seventhMenu+2)& (0+255),w,b
 21540  00082C  A4D8               	btfss	status,2,c
 21541                           
 21542                           ; BSR set to: 1
 21543                           ;encoder.c: 323: seventhMenu.selector--;
 21544  00082E  076D               	decf	(_seventhMenu+2)& (0+255),f,b
 21545  000830                     l956:
 21546                           
 21547                           ;encoder.c: 324: }
 21548                           ;encoder.c: 325: }
 21549                           ;encoder.c: 326: if (which_screen == DRUMS_CC_TYPE_MENU) {
 21550                           
 21551                           ; BSR set to: 1
 21552                           
 21553                           ; BSR set to: 1
 21554  000830  0E0C               	movlw	12
 21555  000832  184F               	xorwf	_which_screen,w,c
 21556  000834  A4D8               	btfss	status,2,c
 21557  000836  D004               	goto	l958
 21558                           
 21559                           ;encoder.c: 327: if(drumCCTypeMenu.selector > 0){
 21560  000838  0101               	movlb	1	; () banked
 21561  00083A  5164               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 21562  00083C  A4D8               	btfss	status,2,c
 21563                           
 21564                           ; BSR set to: 1
 21565                           ;encoder.c: 328: drumCCTypeMenu.selector--;
 21566  00083E  0764               	decf	(_drumCCTypeMenu+2)& (0+255),f,b
 21567  000840                     l958:
 21568                           
 21569                           ;encoder.c: 329: }
 21570                           ;encoder.c: 330: }
 21571                           ;encoder.c: 332: if (which_screen == DRUMS_NN_MENU) {
 21572                           
 21573                           ; BSR set to: 1
 21574                           
 21575                           ; BSR set to: 1
 21576  000840  0E0D               	movlw	13
 21577  000842  184F               	xorwf	_which_screen,w,c
 21578  000844  A4D8               	btfss	status,2,c
 21579  000846  D004               	goto	l960
 21580                           
 21581                           ;encoder.c: 333: if(drumNNMenu.selector > 0){
 21582  000848  0101               	movlb	1	; () banked
 21583  00084A  5161               	movf	(_drumNNMenu+2)& (0+255),w,b
 21584  00084C  A4D8               	btfss	status,2,c
 21585                           
 21586                           ; BSR set to: 1
 21587                           ;encoder.c: 334: drumNNMenu.selector--;
 21588  00084E  0761               	decf	(_drumNNMenu+2)& (0+255),f,b
 21589  000850                     l960:
 21590                           
 21591                           ;encoder.c: 335: }
 21592                           ;encoder.c: 336: }
 21593                           ;encoder.c: 338: if (which_screen == DRUMS_CC_MENU) {
 21594                           
 21595                           ; BSR set to: 1
 21596                           
 21597                           ; BSR set to: 1
 21598  000850  0E0E               	movlw	14
 21599  000852  184F               	xorwf	_which_screen,w,c
 21600  000854  A4D8               	btfss	status,2,c
 21601  000856  D004               	goto	l962
 21602                           
 21603                           ;encoder.c: 339: if(drumCCMenu.selector > 0){
 21604  000858  0101               	movlb	1	; () banked
 21605  00085A  515E               	movf	(_drumCCMenu+2)& (0+255),w,b
 21606  00085C  A4D8               	btfss	status,2,c
 21607                           
 21608                           ; BSR set to: 1
 21609                           ;encoder.c: 340: drumCCMenu.selector--;
 21610  00085E  075E               	decf	(_drumCCMenu+2)& (0+255),f,b
 21611  000860                     l962:
 21612                           
 21613                           ;encoder.c: 341: }
 21614                           ;encoder.c: 342: }
 21615                           ;encoder.c: 344: if (which_screen == POTS_RES_MENU) {
 21616                           
 21617                           ; BSR set to: 1
 21618                           
 21619                           ; BSR set to: 1
 21620  000860  0E0F               	movlw	15
 21621  000862  184F               	xorwf	_which_screen,w,c
 21622  000864  A4D8               	btfss	status,2,c
 21623  000866  D004               	goto	l964
 21624                           
 21625                           ;encoder.c: 345: if(potsResoMenu.selector > 0){
 21626  000868  0101               	movlb	1	; () banked
 21627  00086A  5158               	movf	(_potsResoMenu+2)& (0+255),w,b
 21628  00086C  A4D8               	btfss	status,2,c
 21629                           
 21630                           ; BSR set to: 1
 21631                           ;encoder.c: 346: potsResoMenu.selector--;
 21632  00086E  0758               	decf	(_potsResoMenu+2)& (0+255),f,b
 21633  000870                     l964:
 21634                           
 21635                           ;encoder.c: 347: }
 21636                           ;encoder.c: 348: }
 21637                           ;encoder.c: 350: if (which_screen == ENCODER_POLARITY_MENU) {
 21638                           
 21639                           ; BSR set to: 1
 21640                           
 21641                           ; BSR set to: 1
 21642  000870  0E18               	movlw	24
 21643  000872  184F               	xorwf	_which_screen,w,c
 21644  000874  A4D8               	btfss	status,2,c
 21645  000876  D006               	goto	l966
 21646                           
 21647                           ;encoder.c: 351: if(encoderPolarityMenu.selector == 1){
 21648  000878  0101               	movlb	1	; () banked
 21649  00087A  053A               	decf	(_encoderPolarityMenu+2)& (0+255),w,b
 21650  00087C  A4D8               	btfss	status,2,c
 21651  00087E  D002               	goto	l966
 21652                           
 21653                           ; BSR set to: 1
 21654                           ;encoder.c: 352: encoderPolarityMenu.selector = 0;
 21655  000880  0E00               	movlw	0
 21656  000882  6F3A               	movwf	(_encoderPolarityMenu+2)& (0+255),b
 21657  000884                     l966:
 21658                           
 21659                           ;encoder.c: 353: }
 21660                           ;encoder.c: 354: }
 21661                           ;encoder.c: 356: if (which_screen == POTS_ALPHA_MENU) {
 21662                           
 21663                           ; BSR set to: 1
 21664                           
 21665                           ; BSR set to: 1
 21666  000884  0E10               	movlw	16
 21667  000886  184F               	xorwf	_which_screen,w,c
 21668  000888  A4D8               	btfss	status,2,c
 21669  00088A  D006               	goto	l968
 21670                           
 21671                           ;encoder.c: 357: if(potsAlphaMenu.selector >= 15){
 21672  00088C  0E0E               	movlw	14
 21673  00088E  0101               	movlb	1	; () banked
 21674  000890  6555               	cpfsgt	(_potsAlphaMenu+2)& (0+255),b
 21675  000892  D002               	goto	l968
 21676                           
 21677                           ; BSR set to: 1
 21678                           ;encoder.c: 358: potsAlphaMenu.selector -= 5;
 21679  000894  0E05               	movlw	5
 21680  000896  5F55               	subwf	(_potsAlphaMenu+2)& (0+255),f,b
 21681  000898                     l968:
 21682                           
 21683                           ;encoder.c: 363: if(potsCCMenu.selector > -2){
 21684                           
 21685                           ; BSR set to: 1
 21686  000898  0E11               	movlw	17
 21687  00089A  184F               	xorwf	_which_screen,w,c
 21688  00089C  A4D8               	btfss	status,2,c
 21689  00089E  D002               	goto	l970
 21690                           
 21691                           ;encoder.c: 364: potsCCMenu.selector--;
 21692  0008A0  0101               	movlb	1	; () banked
 21693  0008A2  0752               	decf	(_potsCCMenu+2)& (0+255),f,b
 21694  0008A4                     l970:
 21695                           
 21696                           ;encoder.c: 369: if(slidepotsCCMenu.selector > -2){
 21697                           
 21698                           ; BSR set to: 1
 21699                           
 21700                           ; BSR set to: 1
 21701  0008A4  0E12               	movlw	18
 21702  0008A6  184F               	xorwf	_which_screen,w,c
 21703  0008A8  A4D8               	btfss	status,2,c
 21704  0008AA  D002               	goto	l972
 21705                           
 21706                           ;encoder.c: 370: slidepotsCCMenu.selector--;
 21707  0008AC  0101               	movlb	1	; () banked
 21708  0008AE  074F               	decf	(_slidepotsCCMenu+2)& (0+255),f,b
 21709  0008B0                     l972:
 21710                           
 21711                           ;encoder.c: 371: }
 21712                           ;encoder.c: 372: }
 21713                           ;encoder.c: 373: if (which_screen == PROGRAM_CHANGE_MENU) {
 21714                           
 21715                           ; BSR set to: 1
 21716                           
 21717                           ; BSR set to: 1
 21718  0008B0  0E08               	movlw	8
 21719  0008B2  184F               	xorwf	_which_screen,w,c
 21720  0008B4  A4D8               	btfss	status,2,c
 21721  0008B6  D004               	goto	l974
 21722                           
 21723                           ;encoder.c: 374: if(programChangeMenu.selector > 0){
 21724  0008B8  0101               	movlb	1	; () banked
 21725  0008BA  5146               	movf	(_programChangeMenu+2)& (0+255),w,b
 21726  0008BC  A4D8               	btfss	status,2,c
 21727                           
 21728                           ; BSR set to: 1
 21729                           ;encoder.c: 375: programChangeMenu.selector--;
 21730  0008BE  0746               	decf	(_programChangeMenu+2)& (0+255),f,b
 21731  0008C0                     l974:
 21732                           
 21733                           ;encoder.c: 376: }
 21734                           ;encoder.c: 377: }
 21735                           ;encoder.c: 379: if (which_screen == MAIN_CH_MENU) {
 21736                           
 21737                           ; BSR set to: 1
 21738                           
 21739                           ; BSR set to: 1
 21740  0008C0  0E14               	movlw	20
 21741  0008C2  184F               	xorwf	_which_screen,w,c
 21742  0008C4  A4D8               	btfss	status,2,c
 21743  0008C6  D004               	goto	l976
 21744                           
 21745                           ;encoder.c: 380: if(mainChannelMenu.selector > 0){
 21746  0008C8  0101               	movlb	1	; () banked
 21747  0008CA  5143               	movf	(_mainChannelMenu+2)& (0+255),w,b
 21748  0008CC  A4D8               	btfss	status,2,c
 21749                           
 21750                           ; BSR set to: 1
 21751                           ;encoder.c: 381: mainChannelMenu.selector--;
 21752  0008CE  0743               	decf	(_mainChannelMenu+2)& (0+255),f,b
 21753  0008D0                     l976:
 21754                           
 21755                           ;encoder.c: 382: }
 21756                           ;encoder.c: 383: }
 21757                           ;encoder.c: 385: if (which_screen == DRUM_CH_MENU) {
 21758                           
 21759                           ; BSR set to: 1
 21760                           
 21761                           ; BSR set to: 1
 21762  0008D0  0E15               	movlw	21
 21763  0008D2  184F               	xorwf	_which_screen,w,c
 21764  0008D4  A4D8               	btfss	status,2,c
 21765  0008D6  D004               	goto	l978
 21766                           
 21767                           ;encoder.c: 386: if(drumChannelMenu.selector > 0){
 21768  0008D8  0101               	movlb	1	; () banked
 21769  0008DA  5140               	movf	(_drumChannelMenu+2)& (0+255),w,b
 21770  0008DC  A4D8               	btfss	status,2,c
 21771                           
 21772                           ; BSR set to: 1
 21773                           ;encoder.c: 387: drumChannelMenu.selector--;
 21774  0008DE  0740               	decf	(_drumChannelMenu+2)& (0+255),f,b
 21775  0008E0                     l978:
 21776                           
 21777                           ;encoder.c: 392: if(joystickCCMenu.selector > -2){
 21778                           
 21779                           ; BSR set to: 1
 21780                           
 21781                           ; BSR set to: 1
 21782  0008E0  0E13               	movlw	19
 21783  0008E2  184F               	xorwf	_which_screen,w,c
 21784  0008E4  A4D8               	btfss	status,2,c
 21785  0008E6  D002               	goto	l980
 21786                           
 21787                           ;encoder.c: 393: joystickCCMenu.selector--;
 21788  0008E8  0101               	movlb	1	; () banked
 21789  0008EA  074C               	decf	(_joystickCCMenu+2)& (0+255),f,b
 21790  0008EC                     l980:
 21791                           
 21792                           ;encoder.c: 394: }
 21793                           ;encoder.c: 395: }
 21794                           ;encoder.c: 396: if (which_screen == EEPROM_MENU) {
 21795                           
 21796                           ; BSR set to: 1
 21797                           
 21798                           ; BSR set to: 1
 21799  0008EC  0E16               	movlw	22
 21800  0008EE  184F               	xorwf	_which_screen,w,c
 21801  0008F0  A4D8               	btfss	status,2,c
 21802  0008F2  D004               	goto	l982
 21803                           
 21804                           ;encoder.c: 397: if(eepromMenu.selector > 0){
 21805  0008F4  0101               	movlb	1	; () banked
 21806  0008F6  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 21807  0008F8  A4D8               	btfss	status,2,c
 21808                           
 21809                           ; BSR set to: 1
 21810                           ;encoder.c: 398: eepromMenu.selector--;
 21811  0008FA  073D               	decf	(_eepromMenu+2)& (0+255),f,b
 21812  0008FC                     l982:
 21813                           
 21814                           ;encoder.c: 399: }
 21815                           ;encoder.c: 400: }
 21816                           ;encoder.c: 401: if (which_screen == SAVES_MENU) {
 21817                           
 21818                           ; BSR set to: 1
 21819                           
 21820                           ; BSR set to: 1
 21821  0008FC  0E17               	movlw	23
 21822  0008FE  184F               	xorwf	_which_screen,w,c
 21823  000900  A4D8               	btfss	status,2,c
 21824  000902  D004               	goto	l984
 21825                           
 21826                           ;encoder.c: 402: if(savesMenu.selector > 0){
 21827  000904  0100               	movlb	0	; () banked
 21828  000906  51E4               	movf	(_savesMenu+2)& (0+255),w,b
 21829  000908  A4D8               	btfss	status,2,c
 21830                           
 21831                           ; BSR set to: 0
 21832                           ;encoder.c: 403: savesMenu.selector--;
 21833  00090A  07E4               	decf	(_savesMenu+2)& (0+255),f,b
 21834  00090C                     l984:
 21835                           
 21836                           ;encoder.c: 404: }
 21837                           ;encoder.c: 405: }
 21838                           ;encoder.c: 406: if (which_screen == ARPEGGIATOR_MENU) {
 21839                           
 21840                           ; BSR set to: 0
 21841                           
 21842                           ; BSR set to: 0
 21843  00090C  0E19               	movlw	25
 21844  00090E  184F               	xorwf	_which_screen,w,c
 21845  000910  A4D8               	btfss	status,2,c
 21846  000912  D004               	goto	l986
 21847                           
 21848                           ;encoder.c: 407: if(arpeggiatorMenu.selector > 0){
 21849  000914  0100               	movlb	0	; () banked
 21850  000916  51E1               	movf	(_arpeggiatorMenu+2)& (0+255),w,b
 21851  000918  A4D8               	btfss	status,2,c
 21852                           
 21853                           ; BSR set to: 0
 21854                           ;encoder.c: 408: arpeggiatorMenu.selector--;
 21855  00091A  07E1               	decf	(_arpeggiatorMenu+2)& (0+255),f,b
 21856  00091C                     l986:
 21857                           
 21858                           ;encoder.c: 409: }
 21859                           ;encoder.c: 410: }
 21860                           ;encoder.c: 411: if (which_screen == ARPEGGIATOR_ON_OFF_MENU) {
 21861                           
 21862                           ; BSR set to: 0
 21863                           
 21864                           ; BSR set to: 0
 21865  00091C  0E1A               	movlw	26
 21866  00091E  184F               	xorwf	_which_screen,w,c
 21867  000920  A4D8               	btfss	status,2,c
 21868  000922  D003               	goto	l987
 21869                           
 21870                           ;encoder.c: 412: arpeggiatorOnOffMenu.selector ^= 1;
 21871  000924  0E01               	movlw	1
 21872  000926  0101               	movlb	1	; () banked
 21873  000928  1B37               	xorwf	(_arpeggiatorOnOffMenu+2)& (0+255),f,b
 21874  00092A                     l987:
 21875                           
 21876                           ;encoder.c: 416: }
 21877                           ;encoder.c: 417: if (which_screen == ARPEGGIATOR_TEMPO_MENU) {
 21878  00092A  0E1B               	movlw	27
 21879  00092C  184F               	xorwf	_which_screen,w,c
 21880  00092E  A4D8               	btfss	status,2,c
 21881  000930  D005               	goto	l989
 21882                           
 21883                           ;encoder.c: 418: if(arpeggiatorTempoMenu.selector > 25){
 21884  000932  0E19               	movlw	25
 21885  000934  0101               	movlb	1	; () banked
 21886  000936  6534               	cpfsgt	(_arpeggiatorTempoMenu+2)& (0+255),b
 21887  000938  D001               	goto	l989
 21888                           
 21889                           ; BSR set to: 1
 21890                           ;encoder.c: 419: arpeggiatorTempoMenu.selector--;
 21891  00093A  0734               	decf	(_arpeggiatorTempoMenu+2)& (0+255),f,b
 21892  00093C                     l989:
 21893                           
 21894                           ;encoder.c: 420: }
 21895                           ;encoder.c: 421: }
 21896                           ;encoder.c: 422: if (which_screen == ARPEGGIATOR_OCTAVES_MENU) {
 21897                           
 21898                           ; BSR set to: 1
 21899                           
 21900                           ; BSR set to: 1
 21901  00093C  0E1C               	movlw	28
 21902  00093E  184F               	xorwf	_which_screen,w,c
 21903  000940  A4D8               	btfss	status,2,c
 21904  000942  D005               	goto	l991
 21905                           
 21906                           ;encoder.c: 423: if(arpeggiatorOctavesMenu.selector > 1){
 21907  000944  0E01               	movlw	1
 21908  000946  0101               	movlb	1	; () banked
 21909  000948  6531               	cpfsgt	(_arpeggiatorOctavesMenu+2)& (0+255),b
 21910  00094A  D001               	goto	l991
 21911                           
 21912                           ; BSR set to: 1
 21913                           ;encoder.c: 424: arpeggiatorOctavesMenu.selector--;
 21914  00094C  0731               	decf	(_arpeggiatorOctavesMenu+2)& (0+255),f,b
 21915  00094E                     l991:
 21916                           
 21917                           ;encoder.c: 425: }
 21918                           ;encoder.c: 426: }
 21919                           ;encoder.c: 427: if (which_screen == ARPEGGIATOR_ARPEGGIO_TYPE_MENU) {
 21920                           
 21921                           ; BSR set to: 1
 21922                           
 21923                           ; BSR set to: 1
 21924  00094E  0E1D               	movlw	29
 21925  000950  184F               	xorwf	_which_screen,w,c
 21926  000952  A4D8               	btfss	status,2,c
 21927  000954  D004               	goto	l993
 21928                           
 21929                           ;encoder.c: 428: if(arpeggiatorTypeMenu.selector > 0){
 21930  000956  0101               	movlb	1	; () banked
 21931  000958  512E               	movf	(_arpeggiatorTypeMenu+2)& (0+255),w,b
 21932  00095A  A4D8               	btfss	status,2,c
 21933                           
 21934                           ; BSR set to: 1
 21935                           ;encoder.c: 429: arpeggiatorTypeMenu.selector--;
 21936  00095C  072E               	decf	(_arpeggiatorTypeMenu+2)& (0+255),f,b
 21937  00095E                     l993:
 21938                           
 21939                           ;encoder.c: 430: }
 21940                           ;encoder.c: 431: }
 21941                           ;encoder.c: 432: if (which_screen == ARPEGGIATOR_NOTE_LENGTH_MENU) {
 21942                           
 21943                           ; BSR set to: 1
 21944                           
 21945                           ; BSR set to: 1
 21946  00095E  0E1E               	movlw	30
 21947  000960  184F               	xorwf	_which_screen,w,c
 21948  000962  A4D8               	btfss	status,2,c
 21949  000964  D004               	goto	l995
 21950                           
 21951                           ;encoder.c: 433: if(arpeggiatorNoteLengthMenu.selector > 0){
 21952  000966  0101               	movlb	1	; () banked
 21953  000968  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 21954  00096A  A4D8               	btfss	status,2,c
 21955                           
 21956                           ; BSR set to: 1
 21957                           ;encoder.c: 434: arpeggiatorNoteLengthMenu.selector--;
 21958  00096C  072B               	decf	(_arpeggiatorNoteLengthMenu+2)& (0+255),f,b
 21959  00096E                     l995:
 21960                           
 21961                           ;encoder.c: 435: }
 21962                           ;encoder.c: 436: }
 21963                           ;encoder.c: 437: if (which_screen == ARPEGGIATOR_LATCH_MENU) {
 21964                           
 21965                           ; BSR set to: 1
 21966                           
 21967                           ; BSR set to: 1
 21968  00096E  0E1F               	movlw	31
 21969  000970  184F               	xorwf	_which_screen,w,c
 21970  000972  A4D8               	btfss	status,2,c
 21971  000974  D004               	goto	l997
 21972                           
 21973                           ;encoder.c: 439: if(arpeggiatorLatchMenu.selector > 0){
 21974  000976  0101               	movlb	1	; () banked
 21975  000978  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 21976  00097A  A4D8               	btfss	status,2,c
 21977                           
 21978                           ; BSR set to: 1
 21979                           ;encoder.c: 440: arpeggiatorLatchMenu.selector--;
 21980  00097C  0728               	decf	(_arpeggiatorLatchMenu+2)& (0+255),f,b
 21981  00097E                     l997:
 21982                           
 21983                           ;encoder.c: 441: }
 21984                           ;encoder.c: 442: }
 21985                           ;encoder.c: 443: if (which_screen == ARPEGGIATOR_LATCH_ON_OFF_MENU) {
 21986                           
 21987                           ; BSR set to: 1
 21988                           
 21989                           ; BSR set to: 1
 21990  00097E  0E20               	movlw	32
 21991  000980  184F               	xorwf	_which_screen,w,c
 21992  000982  A4D8               	btfss	status,2,c
 21993  000984  D003               	goto	l998
 21994                           
 21995                           ;encoder.c: 444: arpeggiatorLatchOnOffMenu.selector ^= 1;
 21996  000986  0E01               	movlw	1
 21997  000988  0101               	movlb	1	; () banked
 21998  00098A  1B25               	xorwf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),f,b
 21999  00098C                     l998:
 22000                           
 22001                           ;encoder.c: 445: }
 22002                           ;encoder.c: 446: if (which_screen == ARPEGGIATOR_AUTO_LATCH_ON_OFF_MENU) {
 22003  00098C  0E21               	movlw	33
 22004  00098E  184F               	xorwf	_which_screen,w,c
 22005  000990  A4D8               	btfss	status,2,c
 22006  000992  D003               	goto	l999
 22007                           
 22008                           ;encoder.c: 447: arpeggiatorAutoLatchOnOffMenu.selector ^= 1;
 22009  000994  0E01               	movlw	1
 22010  000996  0101               	movlb	1	; () banked
 22011  000998  1B22               	xorwf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),f,b
 22012  00099A                     l999:
 22013                           
 22014                           ;encoder.c: 448: }
 22015                           ;encoder.c: 449: if (which_screen == ARPEGGIATOR_UN_LATCH_MODE_MENU) {
 22016  00099A  0E22               	movlw	34
 22017  00099C  184F               	xorwf	_which_screen,w,c
 22018  00099E  A4D8               	btfss	status,2,c
 22019  0009A0  D003               	goto	l1000
 22020                           
 22021                           ;encoder.c: 450: arpeggiatorUnLatchModeMenu.selector ^= 1;
 22022  0009A2  0E01               	movlw	1
 22023  0009A4  0101               	movlb	1	; () banked
 22024  0009A6  1B1F               	xorwf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),f,b
 22025  0009A8                     l1000:
 22026                           
 22027                           ;encoder.c: 451: }
 22028                           ;encoder.c: 452: if (which_screen == ARPEGGIATOR_RANDOMIZE_SKIP_MENU) {
 22029  0009A8  0E23               	movlw	35
 22030  0009AA  184F               	xorwf	_which_screen,w,c
 22031  0009AC  A4D8               	btfss	status,2,c
 22032  0009AE  D004               	goto	l1002
 22033                           
 22034                           ;encoder.c: 453: if(arpeggiatorRandomizeSkipMenu.selector > 0){
 22035  0009B0  0101               	movlb	1	; () banked
 22036  0009B2  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 22037  0009B4  A4D8               	btfss	status,2,c
 22038                           
 22039                           ; BSR set to: 1
 22040                           ;encoder.c: 454: arpeggiatorRandomizeSkipMenu.selector--;
 22041  0009B6  071C               	decf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),f,b
 22042  0009B8                     l1002:
 22043                           
 22044                           ;encoder.c: 455: }
 22045                           ;encoder.c: 456: }
 22046                           ;encoder.c: 457: if (which_screen == ARPEGGIATOR_RANDOMIZE_TYPE_MENU) {
 22047                           
 22048                           ; BSR set to: 1
 22049                           
 22050                           ; BSR set to: 1
 22051  0009B8  0E24               	movlw	36
 22052  0009BA  184F               	xorwf	_which_screen,w,c
 22053  0009BC  A4D8               	btfss	status,2,c
 22054  0009BE  D003               	goto	l1003
 22055                           
 22056                           ;encoder.c: 458: arpeggiatorRandomizeTypeMenu.selector ^= 1;
 22057  0009C0  0E01               	movlw	1
 22058  0009C2  0101               	movlb	1	; () banked
 22059  0009C4  1B19               	xorwf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),f,b
 22060  0009C6                     l1003:
 22061                           
 22062                           ;encoder.c: 462: }
 22063                           ;encoder.c: 463: if (which_screen == ARPEGGIATOR_SKIP_FIRST_LAST_MENU) {
 22064  0009C6  0E25               	movlw	37
 22065  0009C8  184F               	xorwf	_which_screen,w,c
 22066  0009CA  A4D8               	btfss	status,2,c
 22067  0009CC  D003               	goto	l1004
 22068                           
 22069                           ;encoder.c: 464: arpeggiatorSkipFirstLastMenu.selector ^= 1;
 22070  0009CE  0E01               	movlw	1
 22071  0009D0  0101               	movlb	1	; () banked
 22072  0009D2  1B16               	xorwf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),f,b
 22073  0009D4                     l1004:
 22074                           
 22075                           ;encoder.c: 465: }
 22076                           ;encoder.c: 466: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_MENU) {
 22077  0009D4  0E26               	movlw	38
 22078  0009D6  184F               	xorwf	_which_screen,w,c
 22079  0009D8  A4D8               	btfss	status,2,c
 22080  0009DA  D004               	goto	l1006
 22081                           
 22082                           ;encoder.c: 467: if(arpeggiatorLastNoteModeMenu.selector > 0){
 22083  0009DC  0100               	movlb	0	; () banked
 22084  0009DE  51DE               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 22085  0009E0  A4D8               	btfss	status,2,c
 22086                           
 22087                           ; BSR set to: 0
 22088                           ;encoder.c: 468: arpeggiatorLastNoteModeMenu.selector--;
 22089  0009E2  07DE               	decf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),f,b
 22090  0009E4                     l1006:
 22091                           
 22092                           ;encoder.c: 469: }
 22093                           ;encoder.c: 470: }
 22094                           ;encoder.c: 471: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_PRESS_MENU) {
 22095                           
 22096                           ; BSR set to: 0
 22097                           
 22098                           ; BSR set to: 0
 22099  0009E4  0E27               	movlw	39
 22100  0009E6  184F               	xorwf	_which_screen,w,c
 22101  0009E8  A4D8               	btfss	status,2,c
 22102  0009EA  D003               	goto	l1007
 22103                           
 22104                           ;encoder.c: 472: arpeggiatorLastNoteModeKeyPressMenu.selector ^= 1;
 22105  0009EC  0E01               	movlw	1
 22106  0009EE  0101               	movlb	1	; () banked
 22107  0009F0  1B13               	xorwf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),f,b
 22108  0009F2                     l1007:
 22109                           
 22110                           ;encoder.c: 473: }
 22111                           ;encoder.c: 474: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_RELEASE_MENU) {
 22112  0009F2  0E28               	movlw	40
 22113  0009F4  184F               	xorwf	_which_screen,w,c
 22114  0009F6  A4D8               	btfss	status,2,c
 22115  0009F8  D003               	goto	l1008
 22116                           
 22117                           ;encoder.c: 475: arpeggiatorLastNoteModeKeyReleaseMenu.selector ^= 1;
 22118  0009FA  0E01               	movlw	1
 22119  0009FC  0101               	movlb	1	; () banked
 22120  0009FE  1B10               	xorwf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),f,b
 22121  000A00                     l1008:
 22122                           
 22123                           ;encoder.c: 476: }
 22124                           ;encoder.c: 477: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU) {
 22125  000A00  0E29               	movlw	41
 22126  000A02  184F               	xorwf	_which_screen,w,c
 22127  000A04  A4D8               	btfss	status,2,c
 22128  000A06  D003               	goto	l1009
 22129                           
 22130                           ;encoder.c: 478: arpeggiatorLastNoteModeTransposeMenu.selector ^= 1;
 22131  000A08  0E01               	movlw	1
 22132  000A0A  0101               	movlb	1	; () banked
 22133  000A0C  1B0D               	xorwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),f,b
 22134  000A0E                     l1009:
 22135                           
 22136                           ;encoder.c: 479: }
 22137                           ;encoder.c: 480: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU) {
 22138  000A0E  0E29               	movlw	41
 22139  000A10  184F               	xorwf	_which_screen,w,c
 22140  000A12  A4D8               	btfss	status,2,c
 22141  000A14  D003               	goto	l1010
 22142                           
 22143                           ;encoder.c: 481: arpeggiatorLastNoteModeTransposeMenu.selector ^= 1;
 22144  000A16  0E01               	movlw	1
 22145  000A18  0101               	movlb	1	; () banked
 22146  000A1A  1B0D               	xorwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),f,b
 22147  000A1C                     l1010:
 22148                           
 22149                           ;encoder.c: 482: }
 22150                           ;encoder.c: 483: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_RESET_MENU) {
 22151  000A1C  0E2A               	movlw	42
 22152  000A1E  184F               	xorwf	_which_screen,w,c
 22153  000A20  A4D8               	btfss	status,2,c
 22154  000A22  D003               	goto	l1011
 22155                           
 22156                           ;encoder.c: 484: arpeggiatorLastNoteModeResetMenu.selector ^= 1;
 22157  000A24  0E01               	movlw	1
 22158  000A26  0101               	movlb	1	; () banked
 22159  000A28  1B0A               	xorwf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),f,b
 22160  000A2A                     l1011:
 22161                           
 22162                           ;encoder.c: 485: }
 22163                           ;encoder.c: 486: }
 22164                           ;encoder.c: 488: encoder_direction = 0x00;
 22165                           
 22166                           ; BSR set to: 1
 22167                           
 22168                           ; BSR set to: 1
 22169  000A2A  0E00               	movlw	0
 22170  000A2C  6E36               	movwf	_encoder_direction,c
 22171  000A2E  0012               	return		;funcret
 22172  000A30                     __end_of_processEncoderBuxton:
 22173                           	opt stack 0
 22174                           tblptru	equ	0xFF8
 22175                           tblptrh	equ	0xFF7
 22176                           tblptrl	equ	0xFF6
 22177                           tablat	equ	0xFF5
 22178                           prodh	equ	0xFF4
 22179                           prodl	equ	0xFF3
 22180                           intcon	equ	0xFF2
 22181                           intcon2	equ	0xFF1
 22182                           postinc0	equ	0xFEE
 22183                           wreg	equ	0xFE8
 22184                           postinc1	equ	0xFE6
 22185                           plusw1	equ	0xFE3
 22186                           fsr1h	equ	0xFE2
 22187                           fsr1l	equ	0xFE1
 22188                           indf2	equ	0xFDF
 22189                           postinc2	equ	0xFDE
 22190                           postdec2	equ	0xFDD
 22191                           plusw2	equ	0xFDB
 22192                           fsr2h	equ	0xFDA
 22193                           fsr2l	equ	0xFD9
 22194                           status	equ	0xFD8
 22195                           
 22196 ;; *************** function _digitalInputs *****************
 22197 ;; Defined at:
 22198 ;;		line 359 in file "main.c"
 22199 ;; Parameters:    Size  Location     Type
 22200 ;;		None
 22201 ;; Auto vars:     Size  Location     Type
 22202 ;;		None
 22203 ;; Return value:  Size  Location     Type
 22204 ;;                  1    wreg      void 
 22205 ;; Registers used:
 22206 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22207 ;; Tracked objects:
 22208 ;;		On entry : 0/0
 22209 ;;		On exit  : 0/0
 22210 ;;		Unchanged: 0/0
 22211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22216 ;;Total ram usage:        0 bytes
 22217 ;; Hardware stack levels used:    1
 22218 ;; Hardware stack levels required when called:   14
 22219 ;; This function calls:
 22220 ;;		_buttonInputsSerial
 22221 ;;		_keyboardTranspose
 22222 ;;		_processDrumpad
 22223 ;;		_processKeyboard
 22224 ;;		_processOctave
 22225 ;; This function is called by:
 22226 ;;		_un_block_code
 22227 ;;		_main
 22228 ;; This function uses a non-reentrant model
 22229 ;;
 22230                           
 22231                           	psect	text64
 22232  00923A                     __ptext64:
 22233                           	opt stack 0
 22234  00923A                     _digitalInputs:
 22235                           	opt stack 13
 22236                           
 22237                           ;main.c: 361: buttonInputsSerial();
 22238                           
 22239                           ;incstack = 0
 22240  00923A  EC78  F043         	call	_buttonInputsSerial	;wreg free
 22241                           
 22242                           ;main.c: 364: if(button_state_now != button_state_last) {
 22243  00923E  0100               	movlb	0	; () banked
 22244  009240  51D4               	movf	_button_state_last& (0+255),w,b
 22245  009242  19D8               	xorwf	_button_state_now& (0+255),w,b
 22246  009244  E10A               	bnz	u56360
 22247  009246  51D5               	movf	(_button_state_last+1)& (0+255),w,b
 22248  009248  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 22249  00924A  E107               	bnz	u56360
 22250  00924C  51D6               	movf	(_button_state_last+2)& (0+255),w,b
 22251  00924E  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 22252  009250  E104               	bnz	u56360
 22253  009252  51D7               	movf	(_button_state_last+3)& (0+255),w,b
 22254  009254  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 22255  009256  B4D8               	btfsc	status,2,c
 22256  009258  D00E               	goto	l4987
 22257  00925A                     u56360:
 22258                           
 22259                           ; BSR set to: 0
 22260                           ;main.c: 365: processOctave();
 22261  00925A  EC3A  F01B         	call	_processOctave	;wreg free
 22262                           
 22263                           ;main.c: 366: keyboardTranspose();
 22264  00925E  EC23  F022         	call	_keyboardTranspose	;wreg free
 22265                           
 22266                           ;main.c: 367: processKeyboard();
 22267  009262  ECA9  F046         	call	_processKeyboard	;wreg free
 22268                           
 22269                           ;main.c: 368: button_state_last = button_state_now;
 22270  009266  C0D8  F0D4         	movff	_button_state_now,_button_state_last
 22271  00926A  C0D9  F0D5         	movff	_button_state_now+1,_button_state_last+1
 22272  00926E  C0DA  F0D6         	movff	_button_state_now+2,_button_state_last+2
 22273  009272  C0DB  F0D7         	movff	_button_state_now+3,_button_state_last+3
 22274  009276                     l4987:
 22275                           
 22276                           ;main.c: 369: }
 22277                           ;main.c: 372: if(drum_button_state_now != drum_button_state_last) {
 22278  009276  5038               	movf	_drum_button_state_last,w,c
 22279  009278  1839               	xorwf	_drum_button_state_now,w,c
 22280  00927A  B4D8               	btfsc	status,2,c
 22281  00927C  0012               	return	
 22282                           
 22283                           ;main.c: 373: processOctave();
 22284  00927E  EC3A  F01B         	call	_processOctave	;wreg free
 22285                           
 22286                           ;main.c: 374: processDrumpad();
 22287  009282  ECD9  F00E         	call	_processDrumpad	;wreg free
 22288                           
 22289                           ;main.c: 375: drum_button_state_last = drum_button_state_now;
 22290  009286  C039  F038         	movff	_drum_button_state_now,_drum_button_state_last
 22291  00928A  0012               	return	
 22292  00928C                     __end_of_digitalInputs:
 22293                           	opt stack 0
 22294                           tblptru	equ	0xFF8
 22295                           tblptrh	equ	0xFF7
 22296                           tblptrl	equ	0xFF6
 22297                           tablat	equ	0xFF5
 22298                           prodh	equ	0xFF4
 22299                           prodl	equ	0xFF3
 22300                           intcon	equ	0xFF2
 22301                           intcon2	equ	0xFF1
 22302                           postinc0	equ	0xFEE
 22303                           wreg	equ	0xFE8
 22304                           postinc1	equ	0xFE6
 22305                           plusw1	equ	0xFE3
 22306                           fsr1h	equ	0xFE2
 22307                           fsr1l	equ	0xFE1
 22308                           indf2	equ	0xFDF
 22309                           postinc2	equ	0xFDE
 22310                           postdec2	equ	0xFDD
 22311                           plusw2	equ	0xFDB
 22312                           fsr2h	equ	0xFDA
 22313                           fsr2l	equ	0xFD9
 22314                           status	equ	0xFD8
 22315                           
 22316 ;; *************** function _processOctave *****************
 22317 ;; Defined at:
 22318 ;;		line 275 in file "octave.c"
 22319 ;; Parameters:    Size  Location     Type
 22320 ;;		None
 22321 ;; Auto vars:     Size  Location     Type
 22322 ;;		None
 22323 ;; Return value:  Size  Location     Type
 22324 ;;                  1    wreg      void 
 22325 ;; Registers used:
 22326 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22327 ;; Tracked objects:
 22328 ;;		On entry : 0/0
 22329 ;;		On exit  : 0/0
 22330 ;;		Unchanged: 0/0
 22331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22334 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22335 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22336 ;;Total ram usage:        2 bytes
 22337 ;; Hardware stack levels used:    1
 22338 ;; Hardware stack levels required when called:   13
 22339 ;; This function calls:
 22340 ;;		___awmod
 22341 ;;		___wmul
 22342 ;;		_doTheLatch
 22343 ;;		_doTheUnLatch
 22344 ;;		_key_press_release_note_off
 22345 ;;		_printThisNumber
 22346 ;;		_random_pitches
 22347 ;;		_random_pitches_non_repeating
 22348 ;;		_resetArpeggio
 22349 ;;		_strcpy
 22350 ;;		_wait_one_pulse
 22351 ;; This function is called by:
 22352 ;;		_digitalInputs
 22353 ;; This function uses a non-reentrant model
 22354 ;;
 22355                           
 22356                           	psect	text65
 22357  003674                     __ptext65:
 22358                           	opt stack 0
 22359  003674                     _processOctave:
 22360                           	opt stack 13
 22361                           
 22362                           ;octave.c: 280: if(ARPEGGIO_ON == 1) {
 22363                           
 22364                           ;incstack = 0
 22365  003674  A604               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 22366  003676  D044               	goto	l2886
 22367                           
 22368                           ;octave.c: 284: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x01))
 22369  003678  0100               	movlb	0	; () banked
 22370  00367A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 22371                           
 22372                           ; BSR set to: 0
 22373  00367C  A039               	btfss	_drum_button_state_now,0,c
 22374  00367E  D002               	goto	l2881
 22375                           
 22376                           ; BSR set to: 0
 22377                           ;octave.c: 285: {
 22378                           ;octave.c: 292: doTheLatch();
 22379  003680  EC72  F04C         	call	_doTheLatch	;wreg free
 22380  003684                     l2881:
 22381                           
 22382                           ;octave.c: 293: }
 22383                           ;octave.c: 297: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x02)) {
 22384  003684  0100               	movlb	0	; () banked
 22385  003686  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 22386                           
 22387                           ; BSR set to: 0
 22388  003688  A239               	btfss	_drum_button_state_now,1,c
 22389  00368A  D002               	goto	l2882
 22390                           
 22391                           ; BSR set to: 0
 22392                           ;octave.c: 299: doTheUnLatch();
 22393  00368C  ECEE  F028         	call	_doTheUnLatch	;wreg free
 22394  003690                     l2882:
 22395                           
 22396                           ;octave.c: 378: }
 22397                           ;octave.c: 382: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x04)){
 22398  003690  0100               	movlb	0	; () banked
 22399  003692  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 22400                           
 22401                           ; BSR set to: 0
 22402  003694  A439               	btfss	_drum_button_state_now,2,c
 22403  003696  D017               	goto	l2883
 22404                           
 22405                           ; BSR set to: 0
 22406                           ;octave.c: 385: if(ARPEGGIO_TYPE == RANDOM) {random_pitches();}
 22407  003698  0E05               	movlw	5
 22408  00369A  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 22409  00369C  B4D8               	btfsc	status,2,c
 22410                           
 22411                           ; BSR set to: 0
 22412  00369E  ECCC  F045         	call	_random_pitches	;wreg free
 22413                           
 22414                           ;octave.c: 386: if(ARPEGGIO_TYPE == RANDOM_NON_REPEATING){random_pitches_non_repeating()
      +                          ;}
 22415  0036A2  0E04               	movlw	4
 22416  0036A4  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 22417  0036A6  B4D8               	btfsc	status,2,c
 22418  0036A8  EC7A  F03C         	call	_random_pitches_non_repeating	;wreg free
 22419                           
 22420                           ;octave.c: 388: DISPLAY_MODE = 1;
 22421  0036AC  0E01               	movlw	1
 22422  0036AE  0100               	movlb	0	; () banked
 22423  0036B0  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 22424                           
 22425                           ; BSR set to: 0
 22426                           ;octave.c: 389: strcpy(string_to_display, "rAnd");
 22427  0036B2  0EF8               	movlw	low _string_to_display
 22428  0036B4  6F60               	movwf	strcpy@to& (0+255),b
 22429  0036B6  0E01               	movlw	high _string_to_display
 22430  0036B8  6F61               	movwf	(strcpy@to+1)& (0+255),b
 22431  0036BA  0EEB               	movlw	low STR_6
 22432  0036BC  6F62               	movwf	strcpy@from& (0+255),b
 22433  0036BE  0EFF               	movlw	high STR_6
 22434  0036C0  6F63               	movwf	(strcpy@from+1)& (0+255),b
 22435  0036C2  EC8E  F04B         	call	_strcpy	;wreg free
 22436  0036C6                     l2883:
 22437                           
 22438                           ;octave.c: 391: }
 22439                           ;octave.c: 395: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x08)){
 22440  0036C6  0100               	movlb	0	; () banked
 22441  0036C8  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 22442                           
 22443                           ; BSR set to: 0
 22444  0036CA  A639               	btfss	_drum_button_state_now,3,c
 22445  0036CC  D019               	goto	l2886
 22446                           
 22447                           ; BSR set to: 0
 22448                           ;octave.c: 398: wait_one_pulse(LAST_NOTE_MODE_RESET);
 22449  0036CE  0E00               	movlw	0
 22450  0036D0  BC02               	btfsc	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 22451  0036D2  0E01               	movlw	1
 22452  0036D4  ECED  F04B         	call	_wait_one_pulse
 22453                           
 22454                           ;octave.c: 399: note_off_was_sent = 1;
 22455  0036D8  8002               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 22456                           
 22457                           ;octave.c: 400: key_press_release_note_off();
 22458  0036DA  EC8B  F02E         	call	_key_press_release_note_off	;wreg free
 22459                           
 22460                           ;octave.c: 403: resetArpeggio();
 22461  0036DE  EC8D  F04A         	call	_resetArpeggio	;wreg free
 22462                           
 22463                           ;octave.c: 406: TIMER_OVERFLOWS = 0;
 22464  0036E2  0E00               	movlw	0
 22465  0036E4  6E2E               	movwf	_TIMER_OVERFLOWS,c
 22466                           
 22467                           ;octave.c: 408: DISPLAY_MODE = 1;
 22468  0036E6  0E01               	movlw	1
 22469  0036E8  0100               	movlb	0	; () banked
 22470  0036EA  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 22471                           
 22472                           ; BSR set to: 0
 22473                           ;octave.c: 409: strcpy(string_to_display, "rSEt");
 22474  0036EC  0EF8               	movlw	low _string_to_display
 22475  0036EE  6F60               	movwf	strcpy@to& (0+255),b
 22476  0036F0  0E01               	movlw	high _string_to_display
 22477  0036F2  6F61               	movwf	(strcpy@to+1)& (0+255),b
 22478  0036F4  0EF5               	movlw	low STR_7
 22479  0036F6  6F62               	movwf	strcpy@from& (0+255),b
 22480  0036F8  0EFF               	movlw	high STR_7
 22481  0036FA  6F63               	movwf	(strcpy@from+1)& (0+255),b
 22482  0036FC  EC8E  F04B         	call	_strcpy	;wreg free
 22483  003700                     l2886:
 22484                           
 22485                           ;octave.c: 410: }
 22486                           ;octave.c: 411: }
 22487                           ;octave.c: 414: if(button_state_now == 0x04000000){
 22488  003700  0E04               	movlw	4
 22489  003702  0100               	movlb	0	; () banked
 22490  003704  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 22491  003706  11D8               	iorwf	_button_state_now& (0+255),w,b
 22492  003708  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 22493  00370A  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 22494  00370C  A4D8               	btfss	status,2,c
 22495  00370E  D03D               	goto	l2888
 22496                           
 22497                           ; BSR set to: 0
 22498                           ;octave.c: 415: if ((octave * 12 + semitone) <= 60) {
 22499  003710  C03B  F07E         	movff	_semitone,??_processOctave
 22500  003714  6B7F               	clrf	(??_processOctave+1)& (0+255),b
 22501  003716  BF7E               	btfsc	??_processOctave& (0+255),7,b
 22502  003718  077F               	decf	(??_processOctave+1)& (0+255),f,b
 22503  00371A  5050               	movf	_octave,w,c
 22504  00371C  6F60               	movwf	___wmul@multiplier& (0+255),b
 22505  00371E  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 22506  003720  BF60               	btfsc	___wmul@multiplier& (0+255),7,b
 22507  003722  0761               	decf	(___wmul@multiplier+1)& (0+255),f,b
 22508  003724  0E00               	movlw	0
 22509  003726  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22510  003728  0E0C               	movlw	12
 22511  00372A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22512  00372C  EC2A  F04C         	call	___wmul	;wreg free
 22513  003730  0100               	movlb	0	; () banked
 22514  003732  517E               	movf	??_processOctave& (0+255),w,b
 22515  003734  2760               	addwf	?___wmul& (0+255),f,b
 22516  003736  517F               	movf	(??_processOctave+1)& (0+255),w,b
 22517  003738  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22518  00373A  BF61               	btfsc	(?___wmul+1)& (0+255),7,b
 22519  00373C  D006               	goto	u54290
 22520  00373E  5161               	movf	(?___wmul+1)& (0+255),w,b
 22521  003740  E124               	bnz	l30191
 22522  003742  0E3D               	movlw	61
 22523  003744  5D60               	subwf	?___wmul& (0+255),w,b
 22524  003746  B0D8               	btfsc	status,0,c
 22525  003748  D020               	goto	l2888
 22526  00374A                     u54290:
 22527                           
 22528                           ; BSR set to: 0
 22529                           ;octave.c: 418: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 22530  00374A  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 22531  00374C  D00E               	goto	l2889
 22532                           
 22533                           ; BSR set to: 0
 22534  00374E  502F               	movf	_NUM_NOTES_PRESSED,w,c
 22535  003750  B4D8               	btfsc	status,2,c
 22536  003752  D00B               	goto	l2889
 22537                           
 22538                           ; BSR set to: 0
 22539                           ;octave.c: 421: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 22540  003754  0E00               	movlw	0
 22541  003756  BE02               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 22542  003758  0E01               	movlw	1
 22543  00375A  ECED  F04B         	call	_wait_one_pulse
 22544                           
 22545                           ;octave.c: 425: if(note_off_was_sent == 0) {key_press_release_note_off();}
 22546  00375E  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 22547  003760  EC8B  F02E         	call	_key_press_release_note_off	;wreg free
 22548                           
 22549                           ;octave.c: 428: suppress_note_off = 1;
 22550  003764  8602               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 22551                           
 22552                           ;octave.c: 430: flag1 = 1;
 22553  003766  8E01               	bsf	_flag1/(0+8),_flag1& (0+7),c
 22554                           
 22555                           ;octave.c: 431: flag2 = 1;
 22556  003768  8C01               	bsf	_flag2/(0+8),_flag2& (0+7),c
 22557  00376A                     l2889:
 22558                           
 22559                           ;octave.c: 432: }
 22560                           ;octave.c: 434: octave++;
 22561  00376A  2A50               	incf	_octave,f,c
 22562                           
 22563                           ;octave.c: 435: if (octave > 7) {octave = 7;}
 22564  00376C  5050               	movf	_octave,w,c
 22565  00376E  0A80               	xorlw	128
 22566  003770  0F78               	addlw	-136
 22567  003772  A0D8               	btfss	status,0,c
 22568  003774  D002               	goto	l2891
 22569  003776  0E07               	movlw	7
 22570  003778  6E50               	movwf	_octave,c
 22571  00377A                     l2891:
 22572                           
 22573                           ;octave.c: 437: printThisNumber(octave);
 22574  00377A  5050               	movf	_octave,w,c
 22575  00377C  0100               	movlb	0	; () banked
 22576  00377E  6F60               	movwf	printThisNumber@n& (0+255),b
 22577  003780  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 22578  003782  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 22579  003784  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 22580  003786  ECCE  F04C         	call	_printThisNumber	;wreg free
 22581  00378A                     l2888:
 22582  00378A                     l30191:
 22583                           
 22584                           ;octave.c: 438: }
 22585                           ;octave.c: 439: }
 22586                           ;octave.c: 442: if(button_state_now == 0x02000000){
 22587  00378A  0E02               	movlw	2
 22588  00378C  0100               	movlb	0	; () banked
 22589  00378E  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 22590  003790  11D8               	iorwf	_button_state_now& (0+255),w,b
 22591  003792  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 22592  003794  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 22593  003796  A4D8               	btfss	status,2,c
 22594  003798  D03A               	goto	l2893
 22595                           
 22596                           ; BSR set to: 0
 22597                           ;octave.c: 443: if ((octave * 12 + semitone) >= 12) {
 22598  00379A  C03B  F07E         	movff	_semitone,??_processOctave
 22599  00379E  6B7F               	clrf	(??_processOctave+1)& (0+255),b
 22600  0037A0  BF7E               	btfsc	??_processOctave& (0+255),7,b
 22601  0037A2  077F               	decf	(??_processOctave+1)& (0+255),f,b
 22602  0037A4  5050               	movf	_octave,w,c
 22603  0037A6  6F60               	movwf	___wmul@multiplier& (0+255),b
 22604  0037A8  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 22605  0037AA  BF60               	btfsc	___wmul@multiplier& (0+255),7,b
 22606  0037AC  0761               	decf	(___wmul@multiplier+1)& (0+255),f,b
 22607  0037AE  0E00               	movlw	0
 22608  0037B0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22609  0037B2  0E0C               	movlw	12
 22610  0037B4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22611  0037B6  EC2A  F04C         	call	___wmul	;wreg free
 22612  0037BA  0100               	movlb	0	; () banked
 22613  0037BC  517E               	movf	??_processOctave& (0+255),w,b
 22614  0037BE  2760               	addwf	?___wmul& (0+255),f,b
 22615  0037C0  517F               	movf	(??_processOctave+1)& (0+255),w,b
 22616  0037C2  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22617  0037C4  BF61               	btfsc	(?___wmul+1)& (0+255),7,b
 22618  0037C6  D023               	goto	l2893
 22619  0037C8  5161               	movf	(?___wmul+1)& (0+255),w,b
 22620  0037CA  E104               	bnz	u54350
 22621  0037CC  0E0C               	movlw	12
 22622  0037CE  5D60               	subwf	?___wmul& (0+255),w,b
 22623  0037D0  A0D8               	btfss	status,0,c
 22624  0037D2  D01D               	goto	l2893
 22625  0037D4                     u54350:
 22626                           
 22627                           ; BSR set to: 0
 22628                           ;octave.c: 446: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 22629  0037D4  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 22630  0037D6  D00E               	goto	l2894
 22631                           
 22632                           ; BSR set to: 0
 22633  0037D8  502F               	movf	_NUM_NOTES_PRESSED,w,c
 22634  0037DA  B4D8               	btfsc	status,2,c
 22635  0037DC  D00B               	goto	l2894
 22636                           
 22637                           ; BSR set to: 0
 22638                           ;octave.c: 449: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 22639  0037DE  0E00               	movlw	0
 22640  0037E0  BE02               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 22641  0037E2  0E01               	movlw	1
 22642  0037E4  ECED  F04B         	call	_wait_one_pulse
 22643                           
 22644                           ;octave.c: 453: if(note_off_was_sent == 0) {key_press_release_note_off();}
 22645  0037E8  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 22646  0037EA  EC8B  F02E         	call	_key_press_release_note_off	;wreg free
 22647                           
 22648                           ;octave.c: 456: suppress_note_off = 1;
 22649  0037EE  8602               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 22650                           
 22651                           ;octave.c: 458: flag1 = 1;
 22652  0037F0  8E01               	bsf	_flag1/(0+8),_flag1& (0+7),c
 22653                           
 22654                           ;octave.c: 460: flag2 = 1;
 22655  0037F2  8C01               	bsf	_flag2/(0+8),_flag2& (0+7),c
 22656  0037F4                     l2894:
 22657                           
 22658                           ;octave.c: 461: }
 22659                           ;octave.c: 463: octave--;
 22660  0037F4  0650               	decf	_octave,f,c
 22661                           
 22662                           ;octave.c: 464: if (octave < 0) {octave = 0;}
 22663  0037F6  AE50               	btfss	_octave,7,c
 22664  0037F8  D002               	goto	l2896
 22665  0037FA  0E00               	movlw	0
 22666  0037FC  6E50               	movwf	_octave,c
 22667  0037FE                     l2896:
 22668                           
 22669                           ;octave.c: 466: printThisNumber(octave);
 22670  0037FE  5050               	movf	_octave,w,c
 22671  003800  0100               	movlb	0	; () banked
 22672  003802  6F60               	movwf	printThisNumber@n& (0+255),b
 22673  003804  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 22674  003806  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 22675  003808  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 22676  00380A  ECCE  F04C         	call	_printThisNumber	;wreg free
 22677  00380E                     l2893:
 22678                           
 22679                           ;octave.c: 468: }
 22680                           ;octave.c: 469: }
 22681                           ;octave.c: 475: if(button_state_now == (0x04000000 | 0x08000000)){
 22682  00380E  0E0C               	movlw	12
 22683  003810  0100               	movlb	0	; () banked
 22684  003812  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 22685  003814  11D8               	iorwf	_button_state_now& (0+255),w,b
 22686  003816  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 22687  003818  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 22688  00381A  A4D8               	btfss	status,2,c
 22689  00381C  D055               	goto	l2898
 22690                           
 22691                           ; BSR set to: 0
 22692                           ;octave.c: 477: if ((octave * 12 + semitone) < 72) {
 22693  00381E  C03B  F07E         	movff	_semitone,??_processOctave
 22694  003822  6B7F               	clrf	(??_processOctave+1)& (0+255),b
 22695  003824  BF7E               	btfsc	??_processOctave& (0+255),7,b
 22696  003826  077F               	decf	(??_processOctave+1)& (0+255),f,b
 22697  003828  5050               	movf	_octave,w,c
 22698  00382A  6F60               	movwf	___wmul@multiplier& (0+255),b
 22699  00382C  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 22700  00382E  BF60               	btfsc	___wmul@multiplier& (0+255),7,b
 22701  003830  0761               	decf	(___wmul@multiplier+1)& (0+255),f,b
 22702  003832  0E00               	movlw	0
 22703  003834  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22704  003836  0E0C               	movlw	12
 22705  003838  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22706  00383A  EC2A  F04C         	call	___wmul	;wreg free
 22707  00383E  0100               	movlb	0	; () banked
 22708  003840  517E               	movf	??_processOctave& (0+255),w,b
 22709  003842  2760               	addwf	?___wmul& (0+255),f,b
 22710  003844  517F               	movf	(??_processOctave+1)& (0+255),w,b
 22711  003846  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22712  003848  BF61               	btfsc	(?___wmul+1)& (0+255),7,b
 22713  00384A  D006               	goto	u54410
 22714  00384C  5161               	movf	(?___wmul+1)& (0+255),w,b
 22715  00384E  E13C               	bnz	l30253
 22716  003850  0E48               	movlw	72
 22717  003852  5D60               	subwf	?___wmul& (0+255),w,b
 22718  003854  B0D8               	btfsc	status,0,c
 22719  003856  D038               	goto	l2898
 22720  003858                     u54410:
 22721                           
 22722                           ; BSR set to: 0
 22723                           ;octave.c: 480: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 22724  003858  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 22725  00385A  D00E               	goto	l2899
 22726                           
 22727                           ; BSR set to: 0
 22728  00385C  502F               	movf	_NUM_NOTES_PRESSED,w,c
 22729  00385E  B4D8               	btfsc	status,2,c
 22730  003860  D00B               	goto	l2899
 22731                           
 22732                           ; BSR set to: 0
 22733                           ;octave.c: 483: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 22734  003862  0E00               	movlw	0
 22735  003864  BE02               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 22736  003866  0E01               	movlw	1
 22737  003868  ECED  F04B         	call	_wait_one_pulse
 22738                           
 22739                           ;octave.c: 487: if(note_off_was_sent == 0) {key_press_release_note_off();}
 22740  00386C  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 22741  00386E  EC8B  F02E         	call	_key_press_release_note_off	;wreg free
 22742                           
 22743                           ;octave.c: 490: suppress_note_off = 1;
 22744  003872  8602               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 22745                           
 22746                           ;octave.c: 492: flag1 = 1;
 22747  003874  8E01               	bsf	_flag1/(0+8),_flag1& (0+7),c
 22748                           
 22749                           ;octave.c: 493: flag2 = 1;
 22750  003876  8C01               	bsf	_flag2/(0+8),_flag2& (0+7),c
 22751  003878                     l2899:
 22752                           
 22753                           ;octave.c: 494: }
 22754                           ;octave.c: 496: if (TRANSPOSE_MODE == 0) {
 22755  003878  BA04               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 22756  00387A  D008               	goto	l2902
 22757                           
 22758                           ;octave.c: 497: semitone++;
 22759  00387C  2A3B               	incf	_semitone,f,c
 22760                           
 22761                           ;octave.c: 498: if (semitone > 12) {semitone = 12;}
 22762  00387E  503B               	movf	_semitone,w,c
 22763  003880  0A80               	xorlw	128
 22764  003882  0F73               	addlw	-141
 22765  003884  A0D8               	btfss	status,0,c
 22766  003886  D002               	goto	l2902
 22767  003888  0E0C               	movlw	12
 22768  00388A  6E3B               	movwf	_semitone,c
 22769  00388C                     l2902:
 22770                           
 22771                           ;octave.c: 499: }
 22772                           ;octave.c: 501: if (TRANSPOSE_MODE == 1) {
 22773  00388C  AA04               	btfss	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 22774  00388E  D014               	goto	l2903
 22775                           
 22776                           ;octave.c: 502: semitone = (semitone +=7) % 12;
 22777  003890  0E0C               	movlw	12
 22778  003892  6EE6               	movwf	postinc1,c
 22779  003894  0E00               	movlw	0
 22780  003896  6EE6               	movwf	postinc1,c
 22781  003898  0E07               	movlw	7
 22782  00389A  263B               	addwf	_semitone,f,c
 22783  00389C  C03B  F07E         	movff	_semitone,??_processOctave
 22784  0038A0  0100               	movlb	0	; () banked
 22785  0038A2  6B7F               	clrf	(??_processOctave+1)& (0+255),b
 22786  0038A4  BF7E               	btfsc	??_processOctave& (0+255),7,b
 22787  0038A6  077F               	decf	(??_processOctave+1)& (0+255),f,b
 22788  0038A8  C07E  FFE6         	movff	??_processOctave,postinc1
 22789  0038AC  C07F  FFE6         	movff	??_processOctave+1,postinc1
 22790  0038B0  EC72  F034         	call	___awmod	;wreg free
 22791  0038B4  503F               	movf	btemp,w,c
 22792  0038B6  6E3B               	movwf	_semitone,c
 22793  0038B8                     l2903:
 22794                           
 22795                           ;octave.c: 503: }
 22796                           ;octave.c: 505: printThisNumber(semitone);
 22797  0038B8  503B               	movf	_semitone,w,c
 22798  0038BA  0100               	movlb	0	; () banked
 22799  0038BC  6F60               	movwf	printThisNumber@n& (0+255),b
 22800  0038BE  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 22801  0038C0  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 22802  0038C2  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 22803  0038C4  ECCE  F04C         	call	_printThisNumber	;wreg free
 22804  0038C8                     l2898:
 22805  0038C8                     l30253:
 22806                           
 22807                           ;octave.c: 506: }
 22808                           ;octave.c: 507: }
 22809                           ;octave.c: 510: if(button_state_now == (0x02000000 | 0x08000000)){
 22810  0038C8  0E0A               	movlw	10
 22811  0038CA  0100               	movlb	0	; () banked
 22812  0038CC  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 22813  0038CE  11D8               	iorwf	_button_state_now& (0+255),w,b
 22814  0038D0  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 22815  0038D2  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 22816  0038D4  A4D8               	btfss	status,2,c
 22817  0038D6  0012               	return	
 22818                           
 22819                           ; BSR set to: 0
 22820                           ;octave.c: 512: if ((octave * 12 + semitone) > 0 ) {
 22821  0038D8  C03B  F07E         	movff	_semitone,??_processOctave
 22822  0038DC  6B7F               	clrf	(??_processOctave+1)& (0+255),b
 22823  0038DE  BF7E               	btfsc	??_processOctave& (0+255),7,b
 22824  0038E0  077F               	decf	(??_processOctave+1)& (0+255),f,b
 22825  0038E2  5050               	movf	_octave,w,c
 22826  0038E4  6F60               	movwf	___wmul@multiplier& (0+255),b
 22827  0038E6  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 22828  0038E8  BF60               	btfsc	___wmul@multiplier& (0+255),7,b
 22829  0038EA  0761               	decf	(___wmul@multiplier+1)& (0+255),f,b
 22830  0038EC  0E00               	movlw	0
 22831  0038EE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22832  0038F0  0E0C               	movlw	12
 22833  0038F2  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22834  0038F4  EC2A  F04C         	call	___wmul	;wreg free
 22835  0038F8  0100               	movlb	0	; () banked
 22836  0038FA  517E               	movf	??_processOctave& (0+255),w,b
 22837  0038FC  2760               	addwf	?___wmul& (0+255),f,b
 22838  0038FE  517F               	movf	(??_processOctave+1)& (0+255),w,b
 22839  003900  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22840  003902  BF61               	btfsc	(?___wmul+1)& (0+255),7,b
 22841  003904  0012               	return	
 22842  003906  5161               	movf	(?___wmul+1)& (0+255),w,b
 22843  003908  E103               	bnz	u54490
 22844  00390A  0560               	decf	?___wmul& (0+255),w,b
 22845  00390C  A0D8               	btfss	status,0,c
 22846  00390E  0012               	return	
 22847  003910                     u54490:
 22848                           
 22849                           ; BSR set to: 0
 22850                           ;octave.c: 516: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 22851  003910  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 22852  003912  D00E               	goto	l2906
 22853                           
 22854                           ; BSR set to: 0
 22855  003914  502F               	movf	_NUM_NOTES_PRESSED,w,c
 22856  003916  B4D8               	btfsc	status,2,c
 22857  003918  D00B               	goto	l2906
 22858                           
 22859                           ; BSR set to: 0
 22860                           ;octave.c: 519: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 22861  00391A  0E00               	movlw	0
 22862  00391C  BE02               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 22863  00391E  0E01               	movlw	1
 22864  003920  ECED  F04B         	call	_wait_one_pulse
 22865                           
 22866                           ;octave.c: 523: if(note_off_was_sent == 0) {key_press_release_note_off();}
 22867  003924  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 22868  003926  EC8B  F02E         	call	_key_press_release_note_off	;wreg free
 22869                           
 22870                           ;octave.c: 526: suppress_note_off = 1;
 22871  00392A  8602               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 22872                           
 22873                           ;octave.c: 528: flag1 = 1;
 22874  00392C  8E01               	bsf	_flag1/(0+8),_flag1& (0+7),c
 22875                           
 22876                           ;octave.c: 529: flag2 = 1;
 22877  00392E  8C01               	bsf	_flag2/(0+8),_flag2& (0+7),c
 22878  003930                     l2906:
 22879                           
 22880                           ;octave.c: 530: }
 22881                           ;octave.c: 532: if (TRANSPOSE_MODE == 0) {
 22882  003930  BA04               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 22883  003932  D008               	goto	l2909
 22884                           
 22885                           ;octave.c: 533: semitone--;
 22886  003934  063B               	decf	_semitone,f,c
 22887                           
 22888                           ;octave.c: 534: if (semitone < -12) {semitone = -12;}
 22889  003936  503B               	movf	_semitone,w,c
 22890  003938  0A80               	xorlw	128
 22891  00393A  0F8C               	addlw	140
 22892  00393C  B0D8               	btfsc	status,0,c
 22893  00393E  D002               	goto	l2909
 22894  003940  0EF4               	movlw	244
 22895  003942  6E3B               	movwf	_semitone,c
 22896  003944                     l2909:
 22897                           
 22898                           ;octave.c: 535: }
 22899                           ;octave.c: 537: if (TRANSPOSE_MODE == 1) {
 22900  003944  AA04               	btfss	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 22901  003946  D014               	goto	l2910
 22902                           
 22903                           ;octave.c: 538: semitone = (semitone -=7) % 12;
 22904  003948  0E0C               	movlw	12
 22905  00394A  6EE6               	movwf	postinc1,c
 22906  00394C  0E00               	movlw	0
 22907  00394E  6EE6               	movwf	postinc1,c
 22908  003950  0EF9               	movlw	249
 22909  003952  263B               	addwf	_semitone,f,c
 22910  003954  C03B  F07E         	movff	_semitone,??_processOctave
 22911  003958  0100               	movlb	0	; () banked
 22912  00395A  6B7F               	clrf	(??_processOctave+1)& (0+255),b
 22913  00395C  BF7E               	btfsc	??_processOctave& (0+255),7,b
 22914  00395E  077F               	decf	(??_processOctave+1)& (0+255),f,b
 22915  003960  C07E  FFE6         	movff	??_processOctave,postinc1
 22916  003964  C07F  FFE6         	movff	??_processOctave+1,postinc1
 22917  003968  EC72  F034         	call	___awmod	;wreg free
 22918  00396C  503F               	movf	btemp,w,c
 22919  00396E  6E3B               	movwf	_semitone,c
 22920  003970                     l2910:
 22921                           
 22922                           ;octave.c: 539: }
 22923                           ;octave.c: 541: printThisNumber(semitone);
 22924  003970  503B               	movf	_semitone,w,c
 22925  003972  0100               	movlb	0	; () banked
 22926  003974  6F60               	movwf	printThisNumber@n& (0+255),b
 22927  003976  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 22928  003978  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 22929  00397A  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 22930  00397C  ECCE  F04C         	call	_printThisNumber	;wreg free
 22931  003980  0012               	return	
 22932  003982                     __end_of_processOctave:
 22933                           	opt stack 0
 22934                           tblptru	equ	0xFF8
 22935                           tblptrh	equ	0xFF7
 22936                           tblptrl	equ	0xFF6
 22937                           tablat	equ	0xFF5
 22938                           prodh	equ	0xFF4
 22939                           prodl	equ	0xFF3
 22940                           intcon	equ	0xFF2
 22941                           intcon2	equ	0xFF1
 22942                           postinc0	equ	0xFEE
 22943                           wreg	equ	0xFE8
 22944                           postinc1	equ	0xFE6
 22945                           plusw1	equ	0xFE3
 22946                           fsr1h	equ	0xFE2
 22947                           fsr1l	equ	0xFE1
 22948                           indf2	equ	0xFDF
 22949                           postinc2	equ	0xFDE
 22950                           postdec2	equ	0xFDD
 22951                           plusw2	equ	0xFDB
 22952                           fsr2h	equ	0xFDA
 22953                           fsr2l	equ	0xFD9
 22954                           status	equ	0xFD8
 22955                           
 22956 ;; *************** function _doTheUnLatch *****************
 22957 ;; Defined at:
 22958 ;;		line 195 in file "octave.c"
 22959 ;; Parameters:    Size  Location     Type
 22960 ;;		None
 22961 ;; Auto vars:     Size  Location     Type
 22962 ;;		None
 22963 ;; Return value:  Size  Location     Type
 22964 ;;                  1    wreg      void 
 22965 ;; Registers used:
 22966 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22967 ;; Tracked objects:
 22968 ;;		On entry : 0/0
 22969 ;;		On exit  : 0/0
 22970 ;;		Unchanged: 0/0
 22971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22974 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22975 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22976 ;;Total ram usage:        4 bytes
 22977 ;; Hardware stack levels used:    1
 22978 ;; Hardware stack levels required when called:   12
 22979 ;; This function calls:
 22980 ;;		_playThisNote
 22981 ;;		_playThisNote8
 22982 ;;		_playThisNotePentatonic
 22983 ;;		_strcpy
 22984 ;; This function is called by:
 22985 ;;		_processOctave
 22986 ;;		_Function_H_1
 22987 ;;		_Function_H_6_1
 22988 ;; This function uses a non-reentrant model
 22989 ;;
 22990                           
 22991                           	psect	text66
 22992  0051DC                     __ptext66:
 22993                           	opt stack 0
 22994  0051DC                     _doTheUnLatch:
 22995                           	opt stack 13
 22996                           
 22997                           ;octave.c: 197: LATCH = 0;
 22998                           
 22999                           ;incstack = 0
 23000  0051DC  9004               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
 23001                           
 23002                           ;octave.c: 198: ON_OFF = 0;
 23003  0051DE  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23004                           
 23005                           ;octave.c: 202: if(NUM_NOTES_PRESSED > 0) {
 23006  0051E0  502F               	movf	_NUM_NOTES_PRESSED,w,c
 23007  0051E2  B4D8               	btfsc	status,2,c
 23008  0051E4  D07F               	goto	l2848
 23009                           
 23010                           ;octave.c: 204: static __bit once;
 23011                           ;octave.c: 206: parallel = 25;
 23012  0051E6  0E19               	movlw	25
 23013  0051E8  6E30               	movwf	_parallel,c
 23014                           
 23015                           ;octave.c: 209: if ((KEYBOARD_MODE == CHROMATIC) || KEYBOARD_MODE == TRIAD || KEYBOARD_M
      +                          ODE == SEVENTH){
 23016  0051EA  0100               	movlb	0	; () banked
 23017  0051EC  51F2               	movf	_KEYBOARD_MODE& (0+255),w,b
 23018  0051EE  B4D8               	btfsc	status,2,c
 23019  0051F0  D008               	goto	u51030
 23020                           
 23021                           ; BSR set to: 0
 23022  0051F2  0E06               	movlw	6
 23023  0051F4  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23024  0051F6  B4D8               	btfsc	status,2,c
 23025  0051F8  D004               	goto	u51030
 23026                           
 23027                           ; BSR set to: 0
 23028  0051FA  0E09               	movlw	9
 23029  0051FC  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23030  0051FE  A4D8               	btfss	status,2,c
 23031  005200  D03D               	goto	l2860
 23032  005202                     u51030:
 23033                           
 23034                           ; BSR set to: 0
 23035                           ;octave.c: 211: if((ARPEGGIO_TYPE == AS_PRESSED) || (ARPEGGIO_TYPE == RANDOM) || (ARPEGG
      +                          IO_TYPE == RANDOM_NON_REPEATING) && (once == 0)){
 23036                           
 23037                           ; BSR set to: 0
 23038  005202  0E06               	movlw	6
 23039  005204  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 23040  005206  B4D8               	btfsc	status,2,c
 23041  005208  D009               	goto	u51070
 23042                           
 23043                           ; BSR set to: 0
 23044  00520A  0E05               	movlw	5
 23045  00520C  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 23046  00520E  B4D8               	btfsc	status,2,c
 23047  005210  D005               	goto	u51070
 23048                           
 23049                           ; BSR set to: 0
 23050  005212  0E04               	movlw	4
 23051  005214  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 23052  005216  B4D8               	btfsc	status,2,c
 23053                           
 23054                           ; BSR set to: 0
 23055  005218  B201               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23056  00521A  D005               	goto	l2854
 23057  00521C                     u51070:
 23058                           
 23059                           ; BSR set to: 0
 23060                           ;octave.c: 212: playThisNote(ARPEGGIO[0]);
 23061                           
 23062                           ; BSR set to: 0
 23063  00521C  0101               	movlb	1	; () banked
 23064  00521E  5182               	movf	_ARPEGGIO& (0+255),w,b
 23065  005220  ECF0  F033         	call	_playThisNote
 23066                           
 23067                           ;octave.c: 213: once = 1;
 23068  005224  8201               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23069  005226                     l2854:
 23070                           
 23071                           ;octave.c: 214: }
 23072                           ;octave.c: 215: if((ARPEGGIO_TYPE == UP) || (ARPEGGIO_TYPE == UP_DOWN) && (once == 0)){
 23073  005226  5035               	movf	_ARPEGGIO_TYPE,w,c
 23074  005228  B4D8               	btfsc	status,2,c
 23075  00522A  D005               	goto	u51100
 23076  00522C  0E02               	movlw	2
 23077  00522E  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 23078  005230  B4D8               	btfsc	status,2,c
 23079  005232  B201               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23080  005234  D005               	goto	l2857
 23081  005236                     u51100:
 23082                           
 23083                           ;octave.c: 216: playThisNote(ARPEGGIO_SORTED[0]);
 23084  005236  0102               	movlb	2	; () banked
 23085  005238  5178               	movf	_ARPEGGIO_SORTED& (0+255),w,b
 23086  00523A  ECF0  F033         	call	_playThisNote
 23087                           
 23088                           ;octave.c: 217: once = 1;
 23089  00523E  8201               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23090  005240                     l2857:
 23091                           
 23092                           ;octave.c: 218: }
 23093                           ;octave.c: 219: if((ARPEGGIO_TYPE == DOWN) || (ARPEGGIO_TYPE == DOWN_UP) && (once == 0))
      +                          {
 23094  005240  0435               	decf	_ARPEGGIO_TYPE,w,c
 23095  005242  B4D8               	btfsc	status,2,c
 23096  005244  D005               	goto	u51130
 23097  005246  0E03               	movlw	3
 23098  005248  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 23099  00524A  B4D8               	btfsc	status,2,c
 23100  00524C  B201               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23101  00524E  D016               	goto	l2860
 23102  005250                     u51130:
 23103                           
 23104                           ;octave.c: 220: playThisNote(ARPEGGIO_SORTED[NUM_NOTES_PRESSED - 1]);
 23105  005250  0EFF               	movlw	255
 23106  005252  0100               	movlb	0	; () banked
 23107  005254  6F7A               	movwf	??_doTheUnLatch& (0+255),b
 23108  005256  0EFF               	movlw	255
 23109  005258  6F7B               	movwf	(??_doTheUnLatch+1)& (0+255),b
 23110  00525A  502F               	movf	_NUM_NOTES_PRESSED,w,c
 23111  00525C  6F7C               	movwf	(??_doTheUnLatch+2)& (0+255),b
 23112  00525E  6B7D               	clrf	(??_doTheUnLatch+3)& (0+255),b
 23113  005260  517A               	movf	??_doTheUnLatch& (0+255),w,b
 23114  005262  277C               	addwf	(??_doTheUnLatch+2)& (0+255),f,b
 23115  005264  517B               	movf	(??_doTheUnLatch+1)& (0+255),w,b
 23116  005266  237D               	addwfc	(??_doTheUnLatch+3)& (0+255),f,b
 23117  005268  0E78               	movlw	low _ARPEGGIO_SORTED
 23118  00526A  257C               	addwf	(??_doTheUnLatch+2)& (0+255),w,b
 23119  00526C  6ED9               	movwf	fsr2l,c
 23120  00526E  0E02               	movlw	high _ARPEGGIO_SORTED
 23121  005270  217D               	addwfc	(??_doTheUnLatch+3)& (0+255),w,b
 23122  005272  6EDA               	movwf	fsr2h,c
 23123  005274  50DF               	movf	indf2,w,c
 23124  005276  ECF0  F033         	call	_playThisNote
 23125                           
 23126                           ;octave.c: 221: once = 1;
 23127  00527A  8201               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23128  00527C                     l2860:
 23129                           
 23130                           ;octave.c: 222: }
 23131                           ;octave.c: 223: }
 23132                           ;octave.c: 225: if ((KEYBOARD_MODE == MAJOR) || (KEYBOARD_MODE == MINOR) || (KEYBOARD_MO
      +                          DE == MODES) || (KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) || (KEYBOARD_MODE == DIATONIC_TR
      +                          IAD_MINOR)|| (KEYBOARD_MODE == DIATONIC_7TH_MAJOR) || (KEYBOARD_MODE == DIATONIC_7TH_MIN
      +                          OR
 23133  00527C  0100               	movlb	0	; () banked
 23134  00527E  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 23135  005280  B4D8               	btfsc	status,2,c
 23136  005282  D019               	goto	u51210
 23137                           
 23138                           ; BSR set to: 0
 23139  005284  0E02               	movlw	2
 23140  005286  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23141  005288  B4D8               	btfsc	status,2,c
 23142  00528A  D015               	goto	u51210
 23143                           
 23144                           ; BSR set to: 0
 23145  00528C  0E03               	movlw	3
 23146  00528E  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23147  005290  B4D8               	btfsc	status,2,c
 23148  005292  D011               	goto	u51210
 23149                           
 23150                           ; BSR set to: 0
 23151  005294  0E07               	movlw	7
 23152  005296  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23153  005298  B4D8               	btfsc	status,2,c
 23154  00529A  D00D               	goto	u51210
 23155                           
 23156                           ; BSR set to: 0
 23157  00529C  0E08               	movlw	8
 23158  00529E  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23159  0052A0  B4D8               	btfsc	status,2,c
 23160  0052A2  D009               	goto	u51210
 23161                           
 23162                           ; BSR set to: 0
 23163  0052A4  0E0A               	movlw	10
 23164  0052A6  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23165  0052A8  B4D8               	btfsc	status,2,c
 23166  0052AA  D005               	goto	u51210
 23167                           
 23168                           ; BSR set to: 0
 23169  0052AC  0E0B               	movlw	11
 23170  0052AE  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23171  0052B0  B4D8               	btfsc	status,2,c
 23172                           
 23173                           ; BSR set to: 0
 23174  0052B2  B201               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23175  0052B4  D006               	goto	l2863
 23176  0052B6                     u51210:
 23177                           
 23178                           ; BSR set to: 0
 23179                           ;octave.c: 226: playThisNote8(0,0);
 23180                           
 23181                           ; BSR set to: 0
 23182  0052B6  0E00               	movlw	0
 23183  0052B8  6F71               	movwf	playThisNote8@index& (0+255),b
 23184  0052BA  0E00               	movlw	0
 23185  0052BC  ECD7  F013         	call	_playThisNote8
 23186                           
 23187                           ;octave.c: 227: once = 1;
 23188  0052C0  8201               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23189  0052C2                     l2863:
 23190                           
 23191                           ;octave.c: 228: }
 23192                           ;octave.c: 230: if ((KEYBOARD_MODE == PENTATONIC_MAJOR) || (KEYBOARD_MODE == PENTATONIC_
      +                          MINOR) && (once == 0)){
 23193  0052C2  0E04               	movlw	4
 23194  0052C4  0100               	movlb	0	; () banked
 23195  0052C6  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23196  0052C8  B4D8               	btfsc	status,2,c
 23197  0052CA  D005               	goto	u51240
 23198                           
 23199                           ; BSR set to: 0
 23200  0052CC  0E05               	movlw	5
 23201  0052CE  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23202  0052D0  B4D8               	btfsc	status,2,c
 23203                           
 23204                           ; BSR set to: 0
 23205  0052D2  B201               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23206  0052D4  D006               	goto	l2866
 23207  0052D6                     u51240:
 23208                           
 23209                           ; BSR set to: 0
 23210                           ;octave.c: 231: playThisNotePentatonic(0,0);
 23211                           
 23212                           ; BSR set to: 0
 23213  0052D6  0E00               	movlw	0
 23214  0052D8  6F71               	movwf	playThisNotePentatonic@index& (0+255),b
 23215  0052DA  0E00               	movlw	0
 23216  0052DC  ECA2  F02A         	call	_playThisNotePentatonic
 23217                           
 23218                           ;octave.c: 232: once = 1;
 23219  0052E0  8201               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23220  0052E2                     l2866:
 23221                           
 23222                           ;octave.c: 233: }
 23223                           ;octave.c: 235: once = 0;
 23224  0052E2  9201               	bcf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23225  0052E4                     l2848:
 23226                           
 23227                           ;octave.c: 236: }
 23228                           ;octave.c: 239: if((UN_LATCH_MODE == 1) && (latch_was_pressed == 1) && (NUM_NOTES_PRESSE
      +                          D > 1)){
 23229  0052E4  BE03               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 23230  0052E6  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 23231  0052E8  D010               	goto	l2869
 23232  0052EA  0E01               	movlw	1
 23233  0052EC  642F               	cpfsgt	_NUM_NOTES_PRESSED,c
 23234  0052EE  D00D               	goto	l2869
 23235                           
 23236                           ;octave.c: 240: DISPLAY_MODE = 1;
 23237  0052F0  0E01               	movlw	1
 23238  0052F2  0100               	movlb	0	; () banked
 23239  0052F4  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 23240                           
 23241                           ; BSR set to: 0
 23242                           ;octave.c: 241: strcpy(string_to_display, " dEL");
 23243  0052F6  0EF8               	movlw	low _string_to_display
 23244  0052F8  6F60               	movwf	strcpy@to& (0+255),b
 23245  0052FA  0E01               	movlw	high _string_to_display
 23246  0052FC  6F61               	movwf	(strcpy@to+1)& (0+255),b
 23247  0052FE  0EE1               	movlw	low STR_2
 23248  005300  6F62               	movwf	strcpy@from& (0+255),b
 23249  005302  0EFF               	movlw	high STR_2
 23250  005304  6F63               	movwf	(strcpy@from+1)& (0+255),b
 23251  005306  EC8E  F04B         	call	_strcpy	;wreg free
 23252  00530A                     l2869:
 23253                           
 23254                           ;octave.c: 242: }
 23255                           ;octave.c: 246: if((UN_LATCH_MODE == 1) && (NUM_NOTES_PRESSED == 1)){
 23256  00530A  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 23257  00530C  D010               	goto	l2870
 23258  00530E  042F               	decf	_NUM_NOTES_PRESSED,w,c
 23259  005310  A4D8               	btfss	status,2,c
 23260  005312  D00D               	goto	l2870
 23261                           
 23262                           ;octave.c: 247: DISPLAY_MODE = 1;
 23263  005314  0E01               	movlw	1
 23264  005316  0100               	movlb	0	; () banked
 23265  005318  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 23266                           
 23267                           ; BSR set to: 0
 23268                           ;octave.c: 248: strcpy(string_to_display, "LaSt");
 23269  00531A  0EF8               	movlw	low _string_to_display
 23270  00531C  6F60               	movwf	strcpy@to& (0+255),b
 23271  00531E  0E01               	movlw	high _string_to_display
 23272  005320  6F61               	movwf	(strcpy@to+1)& (0+255),b
 23273  005322  0EFA               	movlw	low STR_3
 23274  005324  6F62               	movwf	strcpy@from& (0+255),b
 23275  005326  0EFF               	movlw	high STR_3
 23276  005328  6F63               	movwf	(strcpy@from+1)& (0+255),b
 23277  00532A  EC8E  F04B         	call	_strcpy	;wreg free
 23278  00532E                     l2870:
 23279                           
 23280                           ;octave.c: 249: }
 23281                           ;octave.c: 253: if((AUTO_LATCH == 1) && (latch_was_pressed == 1) && ((UN_LATCH_MODE == 0
      +                          ) || (UN_LATCH_MODE == 1)) && (NUM_NOTES_PRESSED == 0)){
 23282  00532E  BC03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 23283  005330  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 23284  005332  D018               	goto	l2871
 23285  005334  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 23286  005336  D002               	goto	u51330
 23287  005338  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 23288  00533A  D014               	goto	l2871
 23289  00533C                     u51330:
 23290  00533C  502F               	movf	_NUM_NOTES_PRESSED,w,c
 23291  00533E  A4D8               	btfss	status,2,c
 23292  005340  D011               	goto	l2871
 23293                           
 23294                           ;octave.c: 254: NUM_NOTES_PRESSED = 0;
 23295  005342  0E00               	movlw	0
 23296  005344  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 23297                           
 23298                           ;octave.c: 255: ARRAY_INDEX = 0;
 23299  005346  0E00               	movlw	0
 23300  005348  0100               	movlb	0	; () banked
 23301  00534A  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 23302                           
 23303                           ;octave.c: 257: DISPLAY_MODE = 1;
 23304  00534C  0E01               	movlw	1
 23305  00534E  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 23306                           
 23307                           ; BSR set to: 0
 23308                           ;octave.c: 258: strcpy(string_to_display, "Auto");
 23309  005350  0EF8               	movlw	low _string_to_display
 23310  005352  6F60               	movwf	strcpy@to& (0+255),b
 23311  005354  0E01               	movlw	high _string_to_display
 23312  005356  6F61               	movwf	(strcpy@to+1)& (0+255),b
 23313  005358  0EF0               	movlw	low STR_4
 23314  00535A  6F62               	movwf	strcpy@from& (0+255),b
 23315  00535C  0EFF               	movlw	high STR_4
 23316  00535E  6F63               	movwf	(strcpy@from+1)& (0+255),b
 23317  005360  EC8E  F04B         	call	_strcpy	;wreg free
 23318  005364                     l2871:
 23319                           
 23320                           ;octave.c: 259: }
 23321                           ;octave.c: 266: if((LATCH == 0) && ((UN_LATCH_MODE == 0) || (UN_LATCH_MODE == 1)) && (NU
      +                          M_NOTES_PRESSED == 0)){
 23322  005364  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 23323  005366  0012               	return	
 23324  005368  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 23325  00536A  D002               	goto	u51370
 23326  00536C  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 23327  00536E  0012               	return	
 23328  005370                     u51370:
 23329  005370  502F               	movf	_NUM_NOTES_PRESSED,w,c
 23330  005372  A4D8               	btfss	status,2,c
 23331  005374  0012               	return	
 23332                           
 23333                           ;octave.c: 267: NUM_NOTES_PRESSED = 0;
 23334  005376  0E00               	movlw	0
 23335  005378  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 23336                           
 23337                           ;octave.c: 268: ARRAY_INDEX = 0;
 23338  00537A  0E00               	movlw	0
 23339  00537C  0100               	movlb	0	; () banked
 23340  00537E  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 23341                           
 23342                           ;octave.c: 269: DISPLAY_MODE = 1;
 23343  005380  0E01               	movlw	1
 23344  005382  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 23345                           
 23346                           ; BSR set to: 0
 23347                           ;octave.c: 270: strcpy(string_to_display, " oFF");
 23348  005384  0EF8               	movlw	low _string_to_display
 23349  005386  6F60               	movwf	strcpy@to& (0+255),b
 23350  005388  0E01               	movlw	high _string_to_display
 23351  00538A  6F61               	movwf	(strcpy@to+1)& (0+255),b
 23352  00538C  0EDC               	movlw	low STR_5
 23353  00538E  6F62               	movwf	strcpy@from& (0+255),b
 23354  005390  0EFF               	movlw	high STR_5
 23355  005392  6F63               	movwf	(strcpy@from+1)& (0+255),b
 23356  005394  EC8E  F04B         	call	_strcpy	;wreg free
 23357  005398  0012               	return	
 23358  00539A                     __end_of_doTheUnLatch:
 23359                           	opt stack 0
 23360                           tblptru	equ	0xFF8
 23361                           tblptrh	equ	0xFF7
 23362                           tblptrl	equ	0xFF6
 23363                           tablat	equ	0xFF5
 23364                           prodh	equ	0xFF4
 23365                           prodl	equ	0xFF3
 23366                           intcon	equ	0xFF2
 23367                           intcon2	equ	0xFF1
 23368                           postinc0	equ	0xFEE
 23369                           wreg	equ	0xFE8
 23370                           postinc1	equ	0xFE6
 23371                           plusw1	equ	0xFE3
 23372                           fsr1h	equ	0xFE2
 23373                           fsr1l	equ	0xFE1
 23374                           indf2	equ	0xFDF
 23375                           postinc2	equ	0xFDE
 23376                           postdec2	equ	0xFDD
 23377                           plusw2	equ	0xFDB
 23378                           fsr2h	equ	0xFDA
 23379                           fsr2l	equ	0xFD9
 23380                           status	equ	0xFD8
 23381                           
 23382 ;; *************** function _doTheLatch *****************
 23383 ;; Defined at:
 23384 ;;		line 188 in file "octave.c"
 23385 ;; Parameters:    Size  Location     Type
 23386 ;;		None
 23387 ;; Auto vars:     Size  Location     Type
 23388 ;;		None
 23389 ;; Return value:  Size  Location     Type
 23390 ;;                  1    wreg      void 
 23391 ;; Registers used:
 23392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23393 ;; Tracked objects:
 23394 ;;		On entry : 0/0
 23395 ;;		On exit  : 0/0
 23396 ;;		Unchanged: 0/0
 23397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23402 ;;Total ram usage:        0 bytes
 23403 ;; Hardware stack levels used:    1
 23404 ;; Hardware stack levels required when called:    6
 23405 ;; This function calls:
 23406 ;;		_strcpy
 23407 ;; This function is called by:
 23408 ;;		_processOctave
 23409 ;;		_Function_H_6_1
 23410 ;; This function uses a non-reentrant model
 23411 ;;
 23412                           
 23413                           	psect	text67
 23414  0098E4                     __ptext67:
 23415                           	opt stack 0
 23416  0098E4                     _doTheLatch:
 23417                           	opt stack 19
 23418                           
 23419                           ;octave.c: 189: LATCH = 1;
 23420                           
 23421                           ;incstack = 0
 23422  0098E4  8004               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 23423                           
 23424                           ;octave.c: 190: latch_was_pressed = 1;
 23425  0098E6  8A03               	bsf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 23426                           
 23427                           ;octave.c: 191: DISPLAY_MODE = 1;
 23428  0098E8  0E01               	movlw	1
 23429  0098EA  0100               	movlb	0	; () banked
 23430  0098EC  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 23431                           
 23432                           ; BSR set to: 0
 23433                           ;octave.c: 192: strcpy(string_to_display, "HoLd");
 23434  0098EE  0EF8               	movlw	low _string_to_display
 23435  0098F0  6F60               	movwf	strcpy@to& (0+255),b
 23436  0098F2  0E01               	movlw	high _string_to_display
 23437  0098F4  6F61               	movwf	(strcpy@to+1)& (0+255),b
 23438  0098F6  0EE6               	movlw	low STR_1
 23439  0098F8  6F62               	movwf	strcpy@from& (0+255),b
 23440  0098FA  0EFF               	movlw	high STR_1
 23441  0098FC  6F63               	movwf	(strcpy@from+1)& (0+255),b
 23442  0098FE  EC8E  F04B         	call	_strcpy	;wreg free
 23443  009902  0012               	return		;funcret
 23444  009904                     __end_of_doTheLatch:
 23445                           	opt stack 0
 23446                           tblptru	equ	0xFF8
 23447                           tblptrh	equ	0xFF7
 23448                           tblptrl	equ	0xFF6
 23449                           tablat	equ	0xFF5
 23450                           prodh	equ	0xFF4
 23451                           prodl	equ	0xFF3
 23452                           intcon	equ	0xFF2
 23453                           intcon2	equ	0xFF1
 23454                           postinc0	equ	0xFEE
 23455                           wreg	equ	0xFE8
 23456                           postinc1	equ	0xFE6
 23457                           plusw1	equ	0xFE3
 23458                           fsr1h	equ	0xFE2
 23459                           fsr1l	equ	0xFE1
 23460                           indf2	equ	0xFDF
 23461                           postinc2	equ	0xFDE
 23462                           postdec2	equ	0xFDD
 23463                           plusw2	equ	0xFDB
 23464                           fsr2h	equ	0xFDA
 23465                           fsr2l	equ	0xFD9
 23466                           status	equ	0xFD8
 23467                           
 23468 ;; *************** function _processKeyboard *****************
 23469 ;; Defined at:
 23470 ;;		line 23 in file "keyboard.c"
 23471 ;; Parameters:    Size  Location     Type
 23472 ;;		None
 23473 ;; Auto vars:     Size  Location     Type
 23474 ;;		None
 23475 ;; Return value:  Size  Location     Type
 23476 ;;                  1    wreg      void 
 23477 ;; Registers used:
 23478 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23479 ;; Tracked objects:
 23480 ;;		On entry : 0/0
 23481 ;;		On exit  : 0/0
 23482 ;;		Unchanged: 0/0
 23483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23488 ;;Total ram usage:        0 bytes
 23489 ;; Hardware stack levels used:    1
 23490 ;; Hardware stack levels required when called:   13
 23491 ;; This function calls:
 23492 ;;		_keyboard_all_note_efficient
 23493 ;;		_keyboard_eight_note_efficient
 23494 ;;		_keyboard_sharps_only_efficient
 23495 ;; This function is called by:
 23496 ;;		_digitalInputs
 23497 ;; This function uses a non-reentrant model
 23498 ;;
 23499                           
 23500                           	psect	text68
 23501  008D52                     __ptext68:
 23502                           	opt stack 0
 23503  008D52                     _processKeyboard:
 23504                           	opt stack 13
 23505                           
 23506                           ;keyboard.c: 25: if ((KEYBOARD_MODE == CHROMATIC) || KEYBOARD_MODE == TRIAD || KEYBOARD_
      +                          MODE == SEVENTH) {keyboard_all_note_efficient();}
 23507                           
 23508                           ;incstack = 0
 23509  008D52  0100               	movlb	0	; () banked
 23510  008D54  51F2               	movf	_KEYBOARD_MODE& (0+255),w,b
 23511  008D56  B4D8               	btfsc	status,2,c
 23512  008D58  D007               	goto	u52320
 23513                           
 23514                           ; BSR set to: 0
 23515  008D5A  0E06               	movlw	6
 23516  008D5C  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23517  008D5E  B4D8               	btfsc	status,2,c
 23518  008D60  D003               	goto	u52320
 23519                           
 23520                           ; BSR set to: 0
 23521  008D62  0E09               	movlw	9
 23522  008D64  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23523  008D66  B4D8               	btfsc	status,2,c
 23524  008D68                     u52320:
 23525                           
 23526                           ; BSR set to: 0
 23527                           
 23528                           ; BSR set to: 0
 23529  008D68  EC4C  F00C         	call	_keyboard_all_note_efficient	;wreg free
 23530                           
 23531                           ;keyboard.c: 27: if ((KEYBOARD_MODE == MAJOR) || (KEYBOARD_MODE == MINOR) || (KEYBOARD_M
      +                          ODE == MODES) || (KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) || (KEYBOARD_MODE == DIATONIC_T
      +                          RIAD_MINOR)|| (KEYBOARD_MODE == DIATONIC_7TH_MAJOR) || (KEYBOARD_MODE == DIATONIC_7TH_MI
      +                          NOR
 23532  008D6C  0100               	movlb	0	; () banked
 23533  008D6E  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 23534  008D70  B4D8               	btfsc	status,2,c
 23535  008D72  D017               	goto	u52390
 23536                           
 23537                           ; BSR set to: 0
 23538  008D74  0E02               	movlw	2
 23539  008D76  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23540  008D78  B4D8               	btfsc	status,2,c
 23541  008D7A  D013               	goto	u52390
 23542                           
 23543                           ; BSR set to: 0
 23544  008D7C  0E03               	movlw	3
 23545  008D7E  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23546  008D80  B4D8               	btfsc	status,2,c
 23547  008D82  D00F               	goto	u52390
 23548                           
 23549                           ; BSR set to: 0
 23550  008D84  0E07               	movlw	7
 23551  008D86  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23552  008D88  B4D8               	btfsc	status,2,c
 23553  008D8A  D00B               	goto	u52390
 23554                           
 23555                           ; BSR set to: 0
 23556  008D8C  0E08               	movlw	8
 23557  008D8E  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23558  008D90  B4D8               	btfsc	status,2,c
 23559  008D92  D007               	goto	u52390
 23560                           
 23561                           ; BSR set to: 0
 23562  008D94  0E0A               	movlw	10
 23563  008D96  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23564  008D98  B4D8               	btfsc	status,2,c
 23565  008D9A  D003               	goto	u52390
 23566                           
 23567                           ; BSR set to: 0
 23568  008D9C  0E0B               	movlw	11
 23569  008D9E  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23570  008DA0  B4D8               	btfsc	status,2,c
 23571  008DA2                     u52390:
 23572                           
 23573                           ; BSR set to: 0
 23574                           
 23575                           ; BSR set to: 0
 23576  008DA2  ECF1  F015         	call	_keyboard_eight_note_efficient	;wreg free
 23577                           
 23578                           ;keyboard.c: 30: if ((KEYBOARD_MODE == PENTATONIC_MAJOR) || (KEYBOARD_MODE == PENTATONIC
      +                          _MINOR)) {keyboard_sharps_only_efficient();}
 23579  008DA6  0E04               	movlw	4
 23580  008DA8  0100               	movlb	0	; () banked
 23581  008DAA  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23582  008DAC  B4D8               	btfsc	status,2,c
 23583  008DAE  D004               	goto	u52410
 23584                           
 23585                           ; BSR set to: 0
 23586  008DB0  0E05               	movlw	5
 23587  008DB2  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23588  008DB4  A4D8               	btfss	status,2,c
 23589  008DB6  0012               	return	
 23590  008DB8                     u52410:
 23591                           
 23592                           ; BSR set to: 0
 23593                           
 23594                           ; BSR set to: 0
 23595  008DB8  EC78  F01F         	call	_keyboard_sharps_only_efficient	;wreg free
 23596  008DBC  0012               	return	
 23597  008DBE                     __end_of_processKeyboard:
 23598                           	opt stack 0
 23599                           tblptru	equ	0xFF8
 23600                           tblptrh	equ	0xFF7
 23601                           tblptrl	equ	0xFF6
 23602                           tablat	equ	0xFF5
 23603                           prodh	equ	0xFF4
 23604                           prodl	equ	0xFF3
 23605                           intcon	equ	0xFF2
 23606                           intcon2	equ	0xFF1
 23607                           postinc0	equ	0xFEE
 23608                           wreg	equ	0xFE8
 23609                           postinc1	equ	0xFE6
 23610                           plusw1	equ	0xFE3
 23611                           fsr1h	equ	0xFE2
 23612                           fsr1l	equ	0xFE1
 23613                           indf2	equ	0xFDF
 23614                           postinc2	equ	0xFDE
 23615                           postdec2	equ	0xFDD
 23616                           plusw2	equ	0xFDB
 23617                           fsr2h	equ	0xFDA
 23618                           fsr2l	equ	0xFD9
 23619                           status	equ	0xFD8
 23620                           
 23621 ;; *************** function _keyboard_sharps_only_efficient *****************
 23622 ;; Defined at:
 23623 ;;		line 140 in file "keyboard.c"
 23624 ;; Parameters:    Size  Location     Type
 23625 ;;		None
 23626 ;; Auto vars:     Size  Location     Type
 23627 ;;  index           1   24[BANK0 ] unsigned char 
 23628 ;;  pitch           1   23[BANK0 ] unsigned char 
 23629 ;; Return value:  Size  Location     Type
 23630 ;;                  1    wreg      void 
 23631 ;; Registers used:
 23632 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23633 ;; Tracked objects:
 23634 ;;		On entry : 0/0
 23635 ;;		On exit  : 0/0
 23636 ;;		Unchanged: 0/0
 23637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23639 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23641 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23642 ;;Total ram usage:        2 bytes
 23643 ;; Hardware stack levels used:    1
 23644 ;; Hardware stack levels required when called:   11
 23645 ;; This function calls:
 23646 ;;		_playThisNotePentatonic
 23647 ;; This function is called by:
 23648 ;;		_processKeyboard
 23649 ;; This function uses a non-reentrant model
 23650 ;;
 23651                           
 23652                           	psect	text69
 23653  003EF0                     __ptext69:
 23654                           	opt stack 0
 23655  003EF0                     _keyboard_sharps_only_efficient:
 23656                           	opt stack 14
 23657                           
 23658                           ;keyboard.c: 142: unsigned char pitch;
 23659                           ;keyboard.c: 143: unsigned char index;
 23660                           ;keyboard.c: 146: if((button_state_now & 0x00000002) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW2){
 23661                           
 23662                           ;incstack = 0
 23663  003EF0  0100               	movlb	0	; () banked
 23664  003EF2  B3D8               	btfsc	_button_state_now& (0+255),1,b
 23665                           
 23666                           ; BSR set to: 0
 23667  003EF4  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 23668  003EF6  D00E               	goto	l1425
 23669                           
 23670                           ; BSR set to: 0
 23671  003EF8  B3D0               	btfsc	_keyboard& (0+255),1,b
 23672  003EFA  D00C               	goto	l1425
 23673                           
 23674                           ; BSR set to: 0
 23675                           ;keyboard.c: 147: pitch = Cs;
 23676  003EFC  0E01               	movlw	1
 23677  003EFE  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23678                           
 23679                           ;keyboard.c: 148: index = 0;
 23680  003F00  0E00               	movlw	0
 23681  003F02  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23682                           
 23683                           ; BSR set to: 0
 23684                           ;keyboard.c: 149: ON_OFF = 1;
 23685  003F04  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23686                           
 23687                           ; BSR set to: 0
 23688                           ;keyboard.c: 150: playThisNotePentatonic(pitch, index);
 23689  003F06  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 23690  003F0A  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 23691  003F0C  ECA2  F02A         	call	_playThisNotePentatonic
 23692                           
 23693                           ;keyboard.c: 151: keyboard.SW2 = 1;
 23694  003F10  0100               	movlb	0	; () banked
 23695  003F12  83D0               	bsf	_keyboard& (0+255),1,b
 23696  003F14                     l1425:
 23697                           
 23698                           ; BSR set to: 0
 23699                           ;keyboard.c: 152: }
 23700                           ;keyboard.c: 153: if((button_state_now & 0x00000008) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW4){
 23701                           
 23702                           ; BSR set to: 0
 23703  003F14  B7D8               	btfsc	_button_state_now& (0+255),3,b
 23704                           
 23705                           ; BSR set to: 0
 23706  003F16  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 23707  003F18  D00E               	goto	l1426
 23708                           
 23709                           ; BSR set to: 0
 23710  003F1A  B7D0               	btfsc	_keyboard& (0+255),3,b
 23711  003F1C  D00C               	goto	l1426
 23712                           
 23713                           ; BSR set to: 0
 23714                           ;keyboard.c: 154: pitch = Ds;
 23715  003F1E  0E03               	movlw	3
 23716  003F20  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23717                           
 23718                           ;keyboard.c: 155: index = 1;
 23719  003F22  0E01               	movlw	1
 23720  003F24  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23721                           
 23722                           ; BSR set to: 0
 23723                           ;keyboard.c: 156: ON_OFF = 1;
 23724  003F26  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23725                           
 23726                           ; BSR set to: 0
 23727                           ;keyboard.c: 157: playThisNotePentatonic(pitch, index);
 23728  003F28  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 23729  003F2C  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 23730  003F2E  ECA2  F02A         	call	_playThisNotePentatonic
 23731                           
 23732                           ;keyboard.c: 158: keyboard.SW4 = 1;
 23733  003F32  0100               	movlb	0	; () banked
 23734  003F34  87D0               	bsf	_keyboard& (0+255),3,b
 23735  003F36                     l1426:
 23736                           
 23737                           ; BSR set to: 0
 23738                           ;keyboard.c: 159: }
 23739                           ;keyboard.c: 160: if((button_state_now & 0x00000040) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW7){
 23740                           
 23741                           ; BSR set to: 0
 23742  003F36  BDD8               	btfsc	_button_state_now& (0+255),6,b
 23743                           
 23744                           ; BSR set to: 0
 23745  003F38  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 23746  003F3A  D00E               	goto	l1427
 23747                           
 23748                           ; BSR set to: 0
 23749  003F3C  BDD0               	btfsc	_keyboard& (0+255),6,b
 23750  003F3E  D00C               	goto	l1427
 23751                           
 23752                           ; BSR set to: 0
 23753                           ;keyboard.c: 161: pitch = Fs;
 23754  003F40  0E06               	movlw	6
 23755  003F42  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23756                           
 23757                           ;keyboard.c: 162: index = 2;
 23758  003F44  0E02               	movlw	2
 23759  003F46  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23760                           
 23761                           ; BSR set to: 0
 23762                           ;keyboard.c: 163: ON_OFF = 1;
 23763  003F48  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23764                           
 23765                           ; BSR set to: 0
 23766                           ;keyboard.c: 164: playThisNotePentatonic(pitch, index);
 23767  003F4A  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 23768  003F4E  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 23769  003F50  ECA2  F02A         	call	_playThisNotePentatonic
 23770                           
 23771                           ;keyboard.c: 165: keyboard.SW7 = 1;
 23772  003F54  0100               	movlb	0	; () banked
 23773  003F56  8DD0               	bsf	_keyboard& (0+255),6,b
 23774  003F58                     l1427:
 23775                           
 23776                           ; BSR set to: 0
 23777                           ;keyboard.c: 166: }
 23778                           ;keyboard.c: 167: if((button_state_now & 0x00000100) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW9){
 23779                           
 23780                           ; BSR set to: 0
 23781  003F58  B1D9               	btfsc	(_button_state_now+1)& (0+255),0,b
 23782                           
 23783                           ; BSR set to: 0
 23784  003F5A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 23785  003F5C  D00E               	goto	l1428
 23786                           
 23787                           ; BSR set to: 0
 23788  003F5E  B1D1               	btfsc	(_keyboard+1)& (0+255),0,b
 23789  003F60  D00C               	goto	l1428
 23790                           
 23791                           ; BSR set to: 0
 23792                           ;keyboard.c: 168: pitch = Gs;
 23793  003F62  0E08               	movlw	8
 23794  003F64  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23795                           
 23796                           ;keyboard.c: 169: index = 3;
 23797  003F66  0E03               	movlw	3
 23798  003F68  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23799                           
 23800                           ; BSR set to: 0
 23801                           ;keyboard.c: 170: ON_OFF = 1;
 23802  003F6A  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23803                           
 23804                           ; BSR set to: 0
 23805                           ;keyboard.c: 171: playThisNotePentatonic(pitch, index);
 23806  003F6C  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 23807  003F70  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 23808  003F72  ECA2  F02A         	call	_playThisNotePentatonic
 23809                           
 23810                           ;keyboard.c: 172: keyboard.SW9 = 1;
 23811  003F76  0100               	movlb	0	; () banked
 23812  003F78  81D1               	bsf	(_keyboard+1)& (0+255),0,b
 23813  003F7A                     l1428:
 23814                           
 23815                           ; BSR set to: 0
 23816                           ;keyboard.c: 173: }
 23817                           ;keyboard.c: 174: if((button_state_now & 0x00000400) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW11){
 23818                           
 23819                           ; BSR set to: 0
 23820  003F7A  B5D9               	btfsc	(_button_state_now+1)& (0+255),2,b
 23821                           
 23822                           ; BSR set to: 0
 23823  003F7C  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 23824  003F7E  D00E               	goto	l1429
 23825                           
 23826                           ; BSR set to: 0
 23827  003F80  B5D1               	btfsc	(_keyboard+1)& (0+255),2,b
 23828  003F82  D00C               	goto	l1429
 23829                           
 23830                           ; BSR set to: 0
 23831                           ;keyboard.c: 175: pitch = As;
 23832  003F84  0E0A               	movlw	10
 23833  003F86  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23834                           
 23835                           ;keyboard.c: 176: index = 4;
 23836  003F88  0E04               	movlw	4
 23837  003F8A  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23838                           
 23839                           ; BSR set to: 0
 23840                           ;keyboard.c: 177: ON_OFF = 1;
 23841  003F8C  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23842                           
 23843                           ; BSR set to: 0
 23844                           ;keyboard.c: 178: playThisNotePentatonic(pitch, index);
 23845  003F8E  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 23846  003F92  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 23847  003F94  ECA2  F02A         	call	_playThisNotePentatonic
 23848                           
 23849                           ;keyboard.c: 179: keyboard.SW11 = 1;
 23850  003F98  0100               	movlb	0	; () banked
 23851  003F9A  85D1               	bsf	(_keyboard+1)& (0+255),2,b
 23852  003F9C                     l1429:
 23853                           
 23854                           ; BSR set to: 0
 23855                           ;keyboard.c: 180: }
 23856                           ;keyboard.c: 182: if((button_state_now & 0x00002000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW14){
 23857                           
 23858                           ; BSR set to: 0
 23859  003F9C  BBD9               	btfsc	(_button_state_now+1)& (0+255),5,b
 23860                           
 23861                           ; BSR set to: 0
 23862  003F9E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 23863  003FA0  D00E               	goto	l1430
 23864                           
 23865                           ; BSR set to: 0
 23866  003FA2  BBD1               	btfsc	(_keyboard+1)& (0+255),5,b
 23867  003FA4  D00C               	goto	l1430
 23868                           
 23869                           ; BSR set to: 0
 23870                           ;keyboard.c: 183: pitch = C2s;
 23871  003FA6  0E0D               	movlw	13
 23872  003FA8  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23873                           
 23874                           ;keyboard.c: 184: index = 5;
 23875  003FAA  0E05               	movlw	5
 23876  003FAC  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23877                           
 23878                           ; BSR set to: 0
 23879                           ;keyboard.c: 185: ON_OFF = 1;
 23880  003FAE  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23881                           
 23882                           ; BSR set to: 0
 23883                           ;keyboard.c: 186: playThisNotePentatonic(pitch, index);
 23884  003FB0  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 23885  003FB4  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 23886  003FB6  ECA2  F02A         	call	_playThisNotePentatonic
 23887                           
 23888                           ;keyboard.c: 187: keyboard.SW14 = 1;
 23889  003FBA  0100               	movlb	0	; () banked
 23890  003FBC  8BD1               	bsf	(_keyboard+1)& (0+255),5,b
 23891  003FBE                     l1430:
 23892                           
 23893                           ; BSR set to: 0
 23894                           ;keyboard.c: 188: }
 23895                           ;keyboard.c: 189: if((button_state_now & 0x00008000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW16){
 23896                           
 23897                           ; BSR set to: 0
 23898  003FBE  BFD9               	btfsc	(_button_state_now+1)& (0+255),7,b
 23899                           
 23900                           ; BSR set to: 0
 23901  003FC0  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 23902  003FC2  D00E               	goto	l1431
 23903                           
 23904                           ; BSR set to: 0
 23905  003FC4  BFD1               	btfsc	(_keyboard+1)& (0+255),7,b
 23906  003FC6  D00C               	goto	l1431
 23907                           
 23908                           ; BSR set to: 0
 23909                           ;keyboard.c: 190: pitch = D2s;
 23910  003FC8  0E0F               	movlw	15
 23911  003FCA  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23912                           
 23913                           ;keyboard.c: 191: index = 6;
 23914  003FCC  0E06               	movlw	6
 23915  003FCE  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23916                           
 23917                           ; BSR set to: 0
 23918                           ;keyboard.c: 192: ON_OFF = 1;
 23919  003FD0  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23920                           
 23921                           ; BSR set to: 0
 23922                           ;keyboard.c: 193: playThisNotePentatonic(pitch, index);
 23923  003FD2  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 23924  003FD6  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 23925  003FD8  ECA2  F02A         	call	_playThisNotePentatonic
 23926                           
 23927                           ;keyboard.c: 194: keyboard.SW16 = 1;
 23928  003FDC  0100               	movlb	0	; () banked
 23929  003FDE  8FD1               	bsf	(_keyboard+1)& (0+255),7,b
 23930  003FE0                     l1431:
 23931                           
 23932                           ; BSR set to: 0
 23933                           ;keyboard.c: 195: }
 23934                           ;keyboard.c: 196: if((button_state_now & 0x00040000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW19){
 23935                           
 23936                           ; BSR set to: 0
 23937  003FE0  B5DA               	btfsc	(_button_state_now+2)& (0+255),2,b
 23938                           
 23939                           ; BSR set to: 0
 23940  003FE2  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 23941  003FE4  D00E               	goto	l1432
 23942                           
 23943                           ; BSR set to: 0
 23944  003FE6  B5D2               	btfsc	(_keyboard+2)& (0+255),2,b
 23945  003FE8  D00C               	goto	l1432
 23946                           
 23947                           ; BSR set to: 0
 23948                           ;keyboard.c: 197: pitch = F2s;
 23949  003FEA  0E12               	movlw	18
 23950  003FEC  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23951                           
 23952                           ;keyboard.c: 198: index = 7;
 23953  003FEE  0E07               	movlw	7
 23954  003FF0  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23955                           
 23956                           ; BSR set to: 0
 23957                           ;keyboard.c: 199: ON_OFF = 1;
 23958  003FF2  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23959                           
 23960                           ; BSR set to: 0
 23961                           ;keyboard.c: 200: playThisNotePentatonic(pitch, index);
 23962  003FF4  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 23963  003FF8  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 23964  003FFA  ECA2  F02A         	call	_playThisNotePentatonic
 23965                           
 23966                           ;keyboard.c: 201: keyboard.SW19 = 1;
 23967  003FFE  0100               	movlb	0	; () banked
 23968  004000  85D2               	bsf	(_keyboard+2)& (0+255),2,b
 23969  004002                     l1432:
 23970                           
 23971                           ; BSR set to: 0
 23972                           ;keyboard.c: 202: }
 23973                           ;keyboard.c: 203: if((button_state_now & 0x00100000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW21){
 23974                           
 23975                           ; BSR set to: 0
 23976  004002  B9DA               	btfsc	(_button_state_now+2)& (0+255),4,b
 23977                           
 23978                           ; BSR set to: 0
 23979  004004  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 23980  004006  D00E               	goto	l1433
 23981                           
 23982                           ; BSR set to: 0
 23983  004008  B9D2               	btfsc	(_keyboard+2)& (0+255),4,b
 23984  00400A  D00C               	goto	l1433
 23985                           
 23986                           ; BSR set to: 0
 23987                           ;keyboard.c: 204: pitch = G2s;
 23988  00400C  0E14               	movlw	20
 23989  00400E  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23990                           
 23991                           ;keyboard.c: 205: index = 8;
 23992  004010  0E08               	movlw	8
 23993  004012  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23994                           
 23995                           ; BSR set to: 0
 23996                           ;keyboard.c: 206: ON_OFF = 1;
 23997  004014  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23998                           
 23999                           ; BSR set to: 0
 24000                           ;keyboard.c: 207: playThisNotePentatonic(pitch, index);
 24001  004016  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24002  00401A  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24003  00401C  ECA2  F02A         	call	_playThisNotePentatonic
 24004                           
 24005                           ;keyboard.c: 208: keyboard.SW21 = 1;
 24006  004020  0100               	movlb	0	; () banked
 24007  004022  89D2               	bsf	(_keyboard+2)& (0+255),4,b
 24008  004024                     l1433:
 24009                           
 24010                           ; BSR set to: 0
 24011                           ;keyboard.c: 209: }
 24012                           ;keyboard.c: 210: if((button_state_now & 0x00400000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW23){
 24013                           
 24014                           ; BSR set to: 0
 24015  004024  BDDA               	btfsc	(_button_state_now+2)& (0+255),6,b
 24016                           
 24017                           ; BSR set to: 0
 24018  004026  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 24019  004028  D00E               	goto	l1434
 24020                           
 24021                           ; BSR set to: 0
 24022  00402A  BDD2               	btfsc	(_keyboard+2)& (0+255),6,b
 24023  00402C  D00C               	goto	l1434
 24024                           
 24025                           ; BSR set to: 0
 24026                           ;keyboard.c: 211: pitch = A2s;
 24027  00402E  0E16               	movlw	22
 24028  004030  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24029                           
 24030                           ;keyboard.c: 212: index = 9;
 24031  004032  0E09               	movlw	9
 24032  004034  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24033                           
 24034                           ; BSR set to: 0
 24035                           ;keyboard.c: 213: ON_OFF = 1;
 24036  004036  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24037                           
 24038                           ; BSR set to: 0
 24039                           ;keyboard.c: 214: playThisNotePentatonic(pitch, index);
 24040  004038  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24041  00403C  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24042  00403E  ECA2  F02A         	call	_playThisNotePentatonic
 24043                           
 24044                           ;keyboard.c: 215: keyboard.SW23 = 1;
 24045  004042  0100               	movlb	0	; () banked
 24046  004044  8DD2               	bsf	(_keyboard+2)& (0+255),6,b
 24047  004046                     l1434:
 24048                           
 24049                           ; BSR set to: 0
 24050                           ;keyboard.c: 216: }
 24051                           ;keyboard.c: 219: if(((button_state_last & 0x00000002)) && ((button_state_now & 0x000000
      +                          02) == 0) && keyboard.SW2) {
 24052                           
 24053                           ; BSR set to: 0
 24054  004046  B3D4               	btfsc	_button_state_last& (0+255),1,b
 24055                           
 24056                           ; BSR set to: 0
 24057  004048  B3D8               	btfsc	_button_state_now& (0+255),1,b
 24058  00404A  D00E               	goto	l1435
 24059                           
 24060                           ; BSR set to: 0
 24061  00404C  A3D0               	btfss	_keyboard& (0+255),1,b
 24062  00404E  D00C               	goto	l1435
 24063                           
 24064                           ; BSR set to: 0
 24065                           ;keyboard.c: 220: pitch = Cs;
 24066  004050  0E01               	movlw	1
 24067  004052  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24068                           
 24069                           ;keyboard.c: 221: index = 0;
 24070  004054  0E00               	movlw	0
 24071  004056  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24072                           
 24073                           ; BSR set to: 0
 24074                           ;keyboard.c: 222: ON_OFF = 0;
 24075  004058  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24076                           
 24077                           ; BSR set to: 0
 24078                           ;keyboard.c: 223: playThisNotePentatonic(pitch, index);
 24079  00405A  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24080  00405E  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24081  004060  ECA2  F02A         	call	_playThisNotePentatonic
 24082                           
 24083                           ;keyboard.c: 224: keyboard.SW2 = 0;
 24084  004064  0100               	movlb	0	; () banked
 24085  004066  93D0               	bcf	_keyboard& (0+255),1,b
 24086  004068                     l1435:
 24087                           
 24088                           ; BSR set to: 0
 24089                           ;keyboard.c: 225: }
 24090                           ;keyboard.c: 226: if(((button_state_last & 0x00000008)) && ((button_state_now & 0x000000
      +                          08) == 0) && keyboard.SW4) {
 24091                           
 24092                           ; BSR set to: 0
 24093  004068  B7D4               	btfsc	_button_state_last& (0+255),3,b
 24094                           
 24095                           ; BSR set to: 0
 24096  00406A  B7D8               	btfsc	_button_state_now& (0+255),3,b
 24097  00406C  D00E               	goto	l1436
 24098                           
 24099                           ; BSR set to: 0
 24100  00406E  A7D0               	btfss	_keyboard& (0+255),3,b
 24101  004070  D00C               	goto	l1436
 24102                           
 24103                           ; BSR set to: 0
 24104                           ;keyboard.c: 227: pitch = Ds;
 24105  004072  0E03               	movlw	3
 24106  004074  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24107                           
 24108                           ;keyboard.c: 228: index = 1;
 24109  004076  0E01               	movlw	1
 24110  004078  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24111                           
 24112                           ; BSR set to: 0
 24113                           ;keyboard.c: 229: ON_OFF = 0;
 24114  00407A  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24115                           
 24116                           ; BSR set to: 0
 24117                           ;keyboard.c: 230: playThisNotePentatonic(pitch, index);
 24118  00407C  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24119  004080  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24120  004082  ECA2  F02A         	call	_playThisNotePentatonic
 24121                           
 24122                           ;keyboard.c: 231: keyboard.SW4 = 0;
 24123  004086  0100               	movlb	0	; () banked
 24124  004088  97D0               	bcf	_keyboard& (0+255),3,b
 24125  00408A                     l1436:
 24126                           
 24127                           ; BSR set to: 0
 24128                           ;keyboard.c: 232: }
 24129                           ;keyboard.c: 233: if(((button_state_last & 0x00000040)) && ((button_state_now & 0x000000
      +                          40) == 0) && keyboard.SW7) {
 24130                           
 24131                           ; BSR set to: 0
 24132  00408A  BDD4               	btfsc	_button_state_last& (0+255),6,b
 24133                           
 24134                           ; BSR set to: 0
 24135  00408C  BDD8               	btfsc	_button_state_now& (0+255),6,b
 24136  00408E  D00E               	goto	l1437
 24137                           
 24138                           ; BSR set to: 0
 24139  004090  ADD0               	btfss	_keyboard& (0+255),6,b
 24140  004092  D00C               	goto	l1437
 24141                           
 24142                           ; BSR set to: 0
 24143                           ;keyboard.c: 234: pitch = Fs;
 24144  004094  0E06               	movlw	6
 24145  004096  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24146                           
 24147                           ;keyboard.c: 235: index = 2;
 24148  004098  0E02               	movlw	2
 24149  00409A  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24150                           
 24151                           ; BSR set to: 0
 24152                           ;keyboard.c: 236: ON_OFF = 0;
 24153  00409C  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24154                           
 24155                           ; BSR set to: 0
 24156                           ;keyboard.c: 237: playThisNotePentatonic(pitch, index);
 24157  00409E  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24158  0040A2  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24159  0040A4  ECA2  F02A         	call	_playThisNotePentatonic
 24160                           
 24161                           ;keyboard.c: 238: keyboard.SW7 = 0;
 24162  0040A8  0100               	movlb	0	; () banked
 24163  0040AA  9DD0               	bcf	_keyboard& (0+255),6,b
 24164  0040AC                     l1437:
 24165                           
 24166                           ; BSR set to: 0
 24167                           ;keyboard.c: 239: }
 24168                           ;keyboard.c: 240: if(((button_state_last & 0x00000100)) && ((button_state_now & 0x000001
      +                          00) == 0) && keyboard.SW9) {
 24169                           
 24170                           ; BSR set to: 0
 24171  0040AC  B1D5               	btfsc	(_button_state_last+1)& (0+255),0,b
 24172                           
 24173                           ; BSR set to: 0
 24174  0040AE  B1D9               	btfsc	(_button_state_now+1)& (0+255),0,b
 24175  0040B0  D00E               	goto	l1438
 24176                           
 24177                           ; BSR set to: 0
 24178  0040B2  A1D1               	btfss	(_keyboard+1)& (0+255),0,b
 24179  0040B4  D00C               	goto	l1438
 24180                           
 24181                           ; BSR set to: 0
 24182                           ;keyboard.c: 241: pitch = Gs;
 24183  0040B6  0E08               	movlw	8
 24184  0040B8  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24185                           
 24186                           ;keyboard.c: 242: index = 3;
 24187  0040BA  0E03               	movlw	3
 24188  0040BC  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24189                           
 24190                           ; BSR set to: 0
 24191                           ;keyboard.c: 243: ON_OFF = 0;
 24192  0040BE  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24193                           
 24194                           ; BSR set to: 0
 24195                           ;keyboard.c: 244: playThisNotePentatonic(pitch, index);
 24196  0040C0  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24197  0040C4  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24198  0040C6  ECA2  F02A         	call	_playThisNotePentatonic
 24199                           
 24200                           ;keyboard.c: 245: keyboard.SW9 = 0;
 24201  0040CA  0100               	movlb	0	; () banked
 24202  0040CC  91D1               	bcf	(_keyboard+1)& (0+255),0,b
 24203  0040CE                     l1438:
 24204                           
 24205                           ; BSR set to: 0
 24206                           ;keyboard.c: 246: }
 24207                           ;keyboard.c: 247: if(((button_state_last & 0x00000400)) && ((button_state_now & 0x000004
      +                          00) == 0) && keyboard.SW11) {
 24208                           
 24209                           ; BSR set to: 0
 24210  0040CE  B5D5               	btfsc	(_button_state_last+1)& (0+255),2,b
 24211                           
 24212                           ; BSR set to: 0
 24213  0040D0  B5D9               	btfsc	(_button_state_now+1)& (0+255),2,b
 24214  0040D2  D00E               	goto	l1439
 24215                           
 24216                           ; BSR set to: 0
 24217  0040D4  A5D1               	btfss	(_keyboard+1)& (0+255),2,b
 24218  0040D6  D00C               	goto	l1439
 24219                           
 24220                           ; BSR set to: 0
 24221                           ;keyboard.c: 248: pitch = As;
 24222  0040D8  0E0A               	movlw	10
 24223  0040DA  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24224                           
 24225                           ;keyboard.c: 249: index = 4;
 24226  0040DC  0E04               	movlw	4
 24227  0040DE  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24228                           
 24229                           ; BSR set to: 0
 24230                           ;keyboard.c: 250: ON_OFF = 0;
 24231  0040E0  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24232                           
 24233                           ; BSR set to: 0
 24234                           ;keyboard.c: 251: playThisNotePentatonic(pitch, index);
 24235  0040E2  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24236  0040E6  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24237  0040E8  ECA2  F02A         	call	_playThisNotePentatonic
 24238                           
 24239                           ;keyboard.c: 252: keyboard.SW11 = 0;
 24240  0040EC  0100               	movlb	0	; () banked
 24241  0040EE  95D1               	bcf	(_keyboard+1)& (0+255),2,b
 24242  0040F0                     l1439:
 24243                           
 24244                           ; BSR set to: 0
 24245                           ;keyboard.c: 253: }
 24246                           ;keyboard.c: 256: if(((button_state_last & 0x00002000)) && ((button_state_now & 0x000020
      +                          00) == 0) && keyboard.SW14) {
 24247                           
 24248                           ; BSR set to: 0
 24249  0040F0  BBD5               	btfsc	(_button_state_last+1)& (0+255),5,b
 24250                           
 24251                           ; BSR set to: 0
 24252  0040F2  BBD9               	btfsc	(_button_state_now+1)& (0+255),5,b
 24253  0040F4  D00E               	goto	l1440
 24254                           
 24255                           ; BSR set to: 0
 24256  0040F6  ABD1               	btfss	(_keyboard+1)& (0+255),5,b
 24257  0040F8  D00C               	goto	l1440
 24258                           
 24259                           ; BSR set to: 0
 24260                           ;keyboard.c: 257: pitch = C2s;
 24261  0040FA  0E0D               	movlw	13
 24262  0040FC  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24263                           
 24264                           ;keyboard.c: 258: index = 5;
 24265  0040FE  0E05               	movlw	5
 24266  004100  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24267                           
 24268                           ; BSR set to: 0
 24269                           ;keyboard.c: 259: ON_OFF = 0;
 24270  004102  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24271                           
 24272                           ; BSR set to: 0
 24273                           ;keyboard.c: 260: playThisNotePentatonic(pitch, index);
 24274  004104  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24275  004108  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24276  00410A  ECA2  F02A         	call	_playThisNotePentatonic
 24277                           
 24278                           ;keyboard.c: 261: keyboard.SW14 = 0;
 24279  00410E  0100               	movlb	0	; () banked
 24280  004110  9BD1               	bcf	(_keyboard+1)& (0+255),5,b
 24281  004112                     l1440:
 24282                           
 24283                           ; BSR set to: 0
 24284                           ;keyboard.c: 262: }
 24285                           ;keyboard.c: 263: if(((button_state_last & 0x00008000)) && ((button_state_now & 0x000080
      +                          00) == 0) && keyboard.SW16) {
 24286                           
 24287                           ; BSR set to: 0
 24288  004112  BFD5               	btfsc	(_button_state_last+1)& (0+255),7,b
 24289                           
 24290                           ; BSR set to: 0
 24291  004114  BFD9               	btfsc	(_button_state_now+1)& (0+255),7,b
 24292  004116  D00E               	goto	l1441
 24293                           
 24294                           ; BSR set to: 0
 24295  004118  AFD1               	btfss	(_keyboard+1)& (0+255),7,b
 24296  00411A  D00C               	goto	l1441
 24297                           
 24298                           ; BSR set to: 0
 24299                           ;keyboard.c: 264: pitch = D2s;
 24300  00411C  0E0F               	movlw	15
 24301  00411E  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24302                           
 24303                           ;keyboard.c: 265: index = 6;
 24304  004120  0E06               	movlw	6
 24305  004122  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24306                           
 24307                           ; BSR set to: 0
 24308                           ;keyboard.c: 266: ON_OFF = 0;
 24309  004124  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24310                           
 24311                           ; BSR set to: 0
 24312                           ;keyboard.c: 267: playThisNotePentatonic(pitch, index);
 24313  004126  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24314  00412A  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24315  00412C  ECA2  F02A         	call	_playThisNotePentatonic
 24316                           
 24317                           ;keyboard.c: 268: keyboard.SW16 = 0;
 24318  004130  0100               	movlb	0	; () banked
 24319  004132  9FD1               	bcf	(_keyboard+1)& (0+255),7,b
 24320  004134                     l1441:
 24321                           
 24322                           ; BSR set to: 0
 24323                           ;keyboard.c: 269: }
 24324                           ;keyboard.c: 270: if(((button_state_last & 0x00040000)) && ((button_state_now & 0x000400
      +                          00) == 0) && keyboard.SW19) {
 24325                           
 24326                           ; BSR set to: 0
 24327  004134  B5D6               	btfsc	(_button_state_last+2)& (0+255),2,b
 24328                           
 24329                           ; BSR set to: 0
 24330  004136  B5DA               	btfsc	(_button_state_now+2)& (0+255),2,b
 24331  004138  D00E               	goto	l1442
 24332                           
 24333                           ; BSR set to: 0
 24334  00413A  A5D2               	btfss	(_keyboard+2)& (0+255),2,b
 24335  00413C  D00C               	goto	l1442
 24336                           
 24337                           ; BSR set to: 0
 24338                           ;keyboard.c: 271: pitch = F2s;
 24339  00413E  0E12               	movlw	18
 24340  004140  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24341                           
 24342                           ;keyboard.c: 272: index = 7;
 24343  004142  0E07               	movlw	7
 24344  004144  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24345                           
 24346                           ; BSR set to: 0
 24347                           ;keyboard.c: 273: ON_OFF = 0;
 24348  004146  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24349                           
 24350                           ; BSR set to: 0
 24351                           ;keyboard.c: 274: playThisNotePentatonic(pitch, index);
 24352  004148  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24353  00414C  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24354  00414E  ECA2  F02A         	call	_playThisNotePentatonic
 24355                           
 24356                           ;keyboard.c: 275: keyboard.SW19 = 0;
 24357  004152  0100               	movlb	0	; () banked
 24358  004154  95D2               	bcf	(_keyboard+2)& (0+255),2,b
 24359  004156                     l1442:
 24360                           
 24361                           ; BSR set to: 0
 24362                           ;keyboard.c: 276: }
 24363                           ;keyboard.c: 277: if(((button_state_last & 0x00100000)) && ((button_state_now & 0x001000
      +                          00) == 0) && keyboard.SW21) {
 24364                           
 24365                           ; BSR set to: 0
 24366  004156  B9D6               	btfsc	(_button_state_last+2)& (0+255),4,b
 24367                           
 24368                           ; BSR set to: 0
 24369  004158  B9DA               	btfsc	(_button_state_now+2)& (0+255),4,b
 24370  00415A  D00E               	goto	l1443
 24371                           
 24372                           ; BSR set to: 0
 24373  00415C  A9D2               	btfss	(_keyboard+2)& (0+255),4,b
 24374  00415E  D00C               	goto	l1443
 24375                           
 24376                           ; BSR set to: 0
 24377                           ;keyboard.c: 278: pitch = G2s;
 24378  004160  0E14               	movlw	20
 24379  004162  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24380                           
 24381                           ;keyboard.c: 279: index = 8;
 24382  004164  0E08               	movlw	8
 24383  004166  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24384                           
 24385                           ; BSR set to: 0
 24386                           ;keyboard.c: 280: ON_OFF = 0;
 24387  004168  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24388                           
 24389                           ; BSR set to: 0
 24390                           ;keyboard.c: 281: playThisNotePentatonic(pitch, index);
 24391  00416A  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24392  00416E  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24393  004170  ECA2  F02A         	call	_playThisNotePentatonic
 24394                           
 24395                           ;keyboard.c: 282: keyboard.SW21 = 0;
 24396  004174  0100               	movlb	0	; () banked
 24397  004176  99D2               	bcf	(_keyboard+2)& (0+255),4,b
 24398  004178                     l1443:
 24399                           
 24400                           ; BSR set to: 0
 24401                           ;keyboard.c: 283: }
 24402                           ;keyboard.c: 284: if(((button_state_last & 0x00400000)) && ((button_state_now & 0x004000
      +                          00) == 0) && keyboard.SW23) {
 24403                           
 24404                           ; BSR set to: 0
 24405  004178  ADD6               	btfss	(_button_state_last+2)& (0+255),6,b
 24406  00417A  0012               	return	
 24407                           
 24408                           ; BSR set to: 0
 24409  00417C  BDDA               	btfsc	(_button_state_now+2)& (0+255),6,b
 24410  00417E  0012               	return	
 24411                           
 24412                           ; BSR set to: 0
 24413  004180  ADD2               	btfss	(_keyboard+2)& (0+255),6,b
 24414  004182  0012               	return	
 24415                           
 24416                           ; BSR set to: 0
 24417                           ;keyboard.c: 285: pitch = A2s;
 24418  004184  0E16               	movlw	22
 24419  004186  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24420                           
 24421                           ;keyboard.c: 286: index = 9;
 24422  004188  0E09               	movlw	9
 24423  00418A  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24424                           
 24425                           ; BSR set to: 0
 24426                           ;keyboard.c: 287: ON_OFF = 0;
 24427  00418C  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24428                           
 24429                           ; BSR set to: 0
 24430                           ;keyboard.c: 288: playThisNotePentatonic(pitch, index);
 24431  00418E  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24432  004192  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24433  004194  ECA2  F02A         	call	_playThisNotePentatonic
 24434                           
 24435                           ;keyboard.c: 289: keyboard.SW23 = 0;
 24436  004198  0100               	movlb	0	; () banked
 24437  00419A  9DD2               	bcf	(_keyboard+2)& (0+255),6,b
 24438  00419C  0012               	return	
 24439  00419E                     __end_of_keyboard_sharps_only_efficient:
 24440                           	opt stack 0
 24441                           tblptru	equ	0xFF8
 24442                           tblptrh	equ	0xFF7
 24443                           tblptrl	equ	0xFF6
 24444                           tablat	equ	0xFF5
 24445                           prodh	equ	0xFF4
 24446                           prodl	equ	0xFF3
 24447                           intcon	equ	0xFF2
 24448                           intcon2	equ	0xFF1
 24449                           postinc0	equ	0xFEE
 24450                           wreg	equ	0xFE8
 24451                           postinc1	equ	0xFE6
 24452                           plusw1	equ	0xFE3
 24453                           fsr1h	equ	0xFE2
 24454                           fsr1l	equ	0xFE1
 24455                           indf2	equ	0xFDF
 24456                           postinc2	equ	0xFDE
 24457                           postdec2	equ	0xFDD
 24458                           plusw2	equ	0xFDB
 24459                           fsr2h	equ	0xFDA
 24460                           fsr2l	equ	0xFD9
 24461                           status	equ	0xFD8
 24462                           
 24463 ;; *************** function _playThisNotePentatonic *****************
 24464 ;; Defined at:
 24465 ;;		line 33 in file "keyboard.c"
 24466 ;; Parameters:    Size  Location     Type
 24467 ;;  pitch           1    wreg     unsigned char 
 24468 ;;  index           1   17[BANK0 ] unsigned char 
 24469 ;; Auto vars:     Size  Location     Type
 24470 ;;  pitch           1    0[COMRAM] unsigned char 
 24471 ;;  temp_pitch      1   22[BANK0 ] unsigned char 
 24472 ;; Return value:  Size  Location     Type
 24473 ;;                  1    wreg      void 
 24474 ;; Registers used:
 24475 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24476 ;; Tracked objects:
 24477 ;;		On entry : 0/0
 24478 ;;		On exit  : 0/0
 24479 ;;		Unchanged: 0/0
 24480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 24481 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24482 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24483 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24484 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24485 ;;Total ram usage:        6 bytes
 24486 ;; Hardware stack levels used:    1
 24487 ;; Hardware stack levels required when called:   10
 24488 ;; This function calls:
 24489 ;;		_add_notes_to_arpeggio
 24490 ;;		_delete_notes_from_arpeggio
 24491 ;;		_finish_arpeggio_setup
 24492 ;;		_key_press_release_note_off
 24493 ;;		_noteOff
 24494 ;;		_noteOn
 24495 ;;		_wait_one_pulse
 24496 ;; This function is called by:
 24497 ;;		_keyboard_sharps_only_efficient
 24498 ;;		_doTheUnLatch
 24499 ;; This function uses a non-reentrant model
 24500 ;;
 24501                           
 24502                           	psect	text70
 24503  005544                     __ptext70:
 24504                           	opt stack 0
 24505  005544                     _playThisNotePentatonic:
 24506                           	opt stack 14
 24507                           
 24508                           ;keyboard.c: 35: if(ARPEGGIO_ON == 0){
 24509                           
 24510                           ; BSR set to: 0
 24511                           ;incstack = 0
 24512  005544  B604               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 24513  005546  D058               	goto	l1408
 24514                           
 24515                           ;keyboard.c: 37: if(KEYBOARD_MODE == PENTATONIC_MAJOR) {
 24516  005548  0E04               	movlw	4
 24517  00554A  0100               	movlb	0	; () banked
 24518  00554C  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 24519  00554E  A4D8               	btfss	status,2,c
 24520  005550  D027               	goto	l1405
 24521                           
 24522                           ; BSR set to: 0
 24523                           ;keyboard.c: 38: if(ON_OFF == 1) {noteOn(channel,pentatonic_major_key[index],velocity);}
 24524  005552  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24525  005554  D011               	goto	l1404
 24526                           
 24527                           ; BSR set to: 0
 24528  005556  5051               	movf	_velocity,w,c
 24529  005558  6EE6               	movwf	postinc1,c
 24530  00555A  5171               	movf	playThisNotePentatonic@index& (0+255),w,b
 24531  00555C  0D01               	mullw	1
 24532  00555E  0E92               	movlw	low _pentatonic_major_key
 24533  005560  24F3               	addwf	prodl,w,c
 24534  005562  6EF6               	movwf	tblptrl,c
 24535  005564  0EF3               	movlw	high _pentatonic_major_key
 24536  005566  20F4               	addwfc	prodh,w,c
 24537  005568  6EF7               	movwf	tblptrh,c
 24538  00556A                     	if	0	;There are less than 3 active tblptr bytes
 24539  00556A                     	endif
 24540  00556A  0008               	tblrd		*
 24541  00556C  50F5               	movf	tablat,w,c
 24542  00556E  6EE6               	movwf	postinc1,c
 24543  005570  503E               	movf	_channel,w,c
 24544  005572  6EE6               	movwf	postinc1,c
 24545  005574  EC93  F045         	call	_noteOn	;wreg free
 24546  005578                     l1404:
 24547                           
 24548                           ;keyboard.c: 39: if(ON_OFF == 0) {noteOff(channel,pentatonic_major_key[index],velocity);
      +                          }
 24549  005578  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24550  00557A  D012               	goto	l1405
 24551  00557C  5051               	movf	_velocity,w,c
 24552  00557E  6EE6               	movwf	postinc1,c
 24553  005580  0100               	movlb	0	; () banked
 24554  005582  5171               	movf	playThisNotePentatonic@index& (0+255),w,b
 24555  005584  0D01               	mullw	1
 24556  005586  0E92               	movlw	low _pentatonic_major_key
 24557  005588  24F3               	addwf	prodl,w,c
 24558  00558A  6EF6               	movwf	tblptrl,c
 24559  00558C  0EF3               	movlw	high _pentatonic_major_key
 24560  00558E  20F4               	addwfc	prodh,w,c
 24561  005590  6EF7               	movwf	tblptrh,c
 24562  005592                     	if	0	;There are less than 3 active tblptr bytes
 24563  005592                     	endif
 24564  005592  0008               	tblrd		*
 24565  005594  50F5               	movf	tablat,w,c
 24566  005596  6EE6               	movwf	postinc1,c
 24567  005598  503E               	movf	_channel,w,c
 24568  00559A  6EE6               	movwf	postinc1,c
 24569  00559C  EC48  F04A         	call	_noteOff	;wreg free
 24570  0055A0                     l1405:
 24571                           
 24572                           ;keyboard.c: 40: }
 24573                           ;keyboard.c: 42: if(KEYBOARD_MODE == PENTATONIC_MINOR) {
 24574  0055A0  0E05               	movlw	5
 24575  0055A2  0100               	movlb	0	; () banked
 24576  0055A4  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 24577  0055A6  A4D8               	btfss	status,2,c
 24578  0055A8  D027               	goto	l1408
 24579                           
 24580                           ; BSR set to: 0
 24581                           ;keyboard.c: 43: if(ON_OFF == 1) {noteOn(channel,pentatonic_minor_key[index],velocity);}
 24582  0055AA  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24583  0055AC  D011               	goto	l1407
 24584                           
 24585                           ; BSR set to: 0
 24586  0055AE  5051               	movf	_velocity,w,c
 24587  0055B0  6EE6               	movwf	postinc1,c
 24588  0055B2  5171               	movf	playThisNotePentatonic@index& (0+255),w,b
 24589  0055B4  0D01               	mullw	1
 24590  0055B6  0E87               	movlw	low _pentatonic_minor_key
 24591  0055B8  24F3               	addwf	prodl,w,c
 24592  0055BA  6EF6               	movwf	tblptrl,c
 24593  0055BC  0EF3               	movlw	high _pentatonic_minor_key
 24594  0055BE  20F4               	addwfc	prodh,w,c
 24595  0055C0  6EF7               	movwf	tblptrh,c
 24596  0055C2                     	if	0	;There are less than 3 active tblptr bytes
 24597  0055C2                     	endif
 24598  0055C2  0008               	tblrd		*
 24599  0055C4  50F5               	movf	tablat,w,c
 24600  0055C6  6EE6               	movwf	postinc1,c
 24601  0055C8  503E               	movf	_channel,w,c
 24602  0055CA  6EE6               	movwf	postinc1,c
 24603  0055CC  EC93  F045         	call	_noteOn	;wreg free
 24604  0055D0                     l1407:
 24605                           
 24606                           ;keyboard.c: 44: if(ON_OFF == 0) {noteOff(channel,pentatonic_minor_key[index],velocity);
      +                          }
 24607  0055D0  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24608  0055D2  D012               	goto	l1408
 24609  0055D4  5051               	movf	_velocity,w,c
 24610  0055D6  6EE6               	movwf	postinc1,c
 24611  0055D8  0100               	movlb	0	; () banked
 24612  0055DA  5171               	movf	playThisNotePentatonic@index& (0+255),w,b
 24613  0055DC  0D01               	mullw	1
 24614  0055DE  0E87               	movlw	low _pentatonic_minor_key
 24615  0055E0  24F3               	addwf	prodl,w,c
 24616  0055E2  6EF6               	movwf	tblptrl,c
 24617  0055E4  0EF3               	movlw	high _pentatonic_minor_key
 24618  0055E6  20F4               	addwfc	prodh,w,c
 24619  0055E8  6EF7               	movwf	tblptrh,c
 24620  0055EA                     	if	0	;There are less than 3 active tblptr bytes
 24621  0055EA                     	endif
 24622  0055EA  0008               	tblrd		*
 24623  0055EC  50F5               	movf	tablat,w,c
 24624  0055EE  6EE6               	movwf	postinc1,c
 24625  0055F0  503E               	movf	_channel,w,c
 24626  0055F2  6EE6               	movwf	postinc1,c
 24627  0055F4  EC48  F04A         	call	_noteOff	;wreg free
 24628  0055F8                     l1408:
 24629                           
 24630                           ;keyboard.c: 45: }
 24631                           ;keyboard.c: 46: }
 24632                           ;keyboard.c: 49: if(ARPEGGIO_ON == 1){
 24633  0055F8  A604               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 24634  0055FA  0012               	return	
 24635                           
 24636                           ;keyboard.c: 51: unsigned char temp_pitch;
 24637                           ;keyboard.c: 53: if(KEYBOARD_MODE == PENTATONIC_MAJOR) {
 24638  0055FC  0E04               	movlw	4
 24639  0055FE  0100               	movlb	0	; () banked
 24640  005600  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 24641  005602  A4D8               	btfss	status,2,c
 24642  005604  D00B               	goto	l1410
 24643                           
 24644                           ; BSR set to: 0
 24645                           ;keyboard.c: 54: temp_pitch = pentatonic_major_key[index];
 24646  005606  5171               	movf	playThisNotePentatonic@index& (0+255),w,b
 24647  005608  0D01               	mullw	1
 24648  00560A  0E92               	movlw	low _pentatonic_major_key
 24649  00560C  24F3               	addwf	prodl,w,c
 24650  00560E  6EF6               	movwf	tblptrl,c
 24651  005610  0EF3               	movlw	high _pentatonic_major_key
 24652  005612  20F4               	addwfc	prodh,w,c
 24653  005614  6EF7               	movwf	tblptrh,c
 24654  005616                     	if	0	;There are less than 3 active tblptr bytes
 24655  005616                     	endif
 24656  005616  0008               	tblrd		*
 24657  005618  CFF5 F076          	movff	tablat,playThisNotePentatonic@temp_pitch
 24658  00561C                     l1410:
 24659                           
 24660                           ; BSR set to: 0
 24661                           ;keyboard.c: 55: }
 24662                           ;keyboard.c: 57: if(KEYBOARD_MODE == PENTATONIC_MINOR) {
 24663                           
 24664                           ; BSR set to: 0
 24665  00561C  0E05               	movlw	5
 24666  00561E  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 24667  005620  A4D8               	btfss	status,2,c
 24668  005622  D00B               	goto	l1411
 24669                           
 24670                           ; BSR set to: 0
 24671                           ;keyboard.c: 58: temp_pitch = pentatonic_minor_key[index];
 24672  005624  5171               	movf	playThisNotePentatonic@index& (0+255),w,b
 24673  005626  0D01               	mullw	1
 24674  005628  0E87               	movlw	low _pentatonic_minor_key
 24675  00562A  24F3               	addwf	prodl,w,c
 24676  00562C  6EF6               	movwf	tblptrl,c
 24677  00562E  0EF3               	movlw	high _pentatonic_minor_key
 24678  005630  20F4               	addwfc	prodh,w,c
 24679  005632  6EF7               	movwf	tblptrh,c
 24680  005634                     	if	0	;There are less than 3 active tblptr bytes
 24681  005634                     	endif
 24682  005634  0008               	tblrd		*
 24683  005636  CFF5 F076          	movff	tablat,playThisNotePentatonic@temp_pitch
 24684  00563A                     l1411:
 24685                           
 24686                           ; BSR set to: 0
 24687                           ;keyboard.c: 59: }
 24688                           ;keyboard.c: 61: if(ON_OFF == 1) {
 24689                           
 24690                           ; BSR set to: 0
 24691  00563A  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24692  00563C  D019               	goto	l1412
 24693                           
 24694                           ; BSR set to: 0
 24695                           ;keyboard.c: 64: TMR0ON = 0;
 24696  00563E  9ED5               	bcf	4053,7,c	;volatile
 24697                           
 24698                           ;keyboard.c: 66: parallel = temp_pitch;
 24699  005640  C076  F030         	movff	playThisNotePentatonic@temp_pitch,_parallel
 24700                           
 24701                           ; BSR set to: 0
 24702                           ;keyboard.c: 69: if(NUM_NOTES_PRESSED > 0){
 24703  005644  502F               	movf	_NUM_NOTES_PRESSED,w,c
 24704  005646  B4D8               	btfsc	status,2,c
 24705  005648  D00A               	goto	l1413
 24706                           
 24707                           ; BSR set to: 0
 24708                           ;keyboard.c: 70: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 24709  00564A  0E00               	movlw	0
 24710  00564C  B203               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 24711  00564E  0E01               	movlw	1
 24712  005650  ECED  F04B         	call	_wait_one_pulse
 24713                           
 24714                           ;keyboard.c: 71: if(note_off_was_sent == 0) {key_press_release_note_off();}
 24715  005654  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 24716  005656  EC8B  F02E         	call	_key_press_release_note_off	;wreg free
 24717                           
 24718                           ;keyboard.c: 72: TIMER_OVERFLOWS = 0;
 24719  00565A  0E00               	movlw	0
 24720  00565C  6E2E               	movwf	_TIMER_OVERFLOWS,c
 24721  00565E                     l1413:
 24722                           
 24723                           ;keyboard.c: 73: }
 24724                           ;keyboard.c: 75: add_notes_to_arpeggio(temp_pitch);
 24725  00565E  0100               	movlb	0	; () banked
 24726  005660  5176               	movf	playThisNotePentatonic@temp_pitch& (0+255),w,b
 24727  005662  ECF2  F034         	call	_add_notes_to_arpeggio
 24728                           
 24729                           ;keyboard.c: 87: if(LATCH == 0) {latch_was_pressed = 0;}
 24730  005666  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 24731  005668  9A03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 24732                           
 24733                           ;keyboard.c: 90: finish_arpeggio_setup();
 24734  00566A  EC82  F04C         	call	_finish_arpeggio_setup	;wreg free
 24735                           
 24736                           ;keyboard.c: 93: TMR0ON = 1;
 24737  00566E  8ED5               	bsf	4053,7,c	;volatile
 24738  005670                     l1412:
 24739                           
 24740                           ;keyboard.c: 94: }
 24741                           ;keyboard.c: 96: if((ON_OFF == 0) && (LATCH == 0)) {
 24742  005670  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24743  005672  0012               	return	
 24744  005674  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 24745  005676  0012               	return	
 24746                           
 24747                           ;keyboard.c: 99: TMR0ON = 0;
 24748  005678  9ED5               	bcf	4053,7,c	;volatile
 24749                           
 24750                           ;keyboard.c: 102: if(NUM_NOTES_PRESSED > 0){
 24751  00567A  502F               	movf	_NUM_NOTES_PRESSED,w,c
 24752  00567C  B4D8               	btfsc	status,2,c
 24753  00567E  D00A               	goto	l1417
 24754                           
 24755                           ;keyboard.c: 103: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 24756  005680  0E00               	movlw	0
 24757  005682  B003               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 24758  005684  0E01               	movlw	1
 24759  005686  ECED  F04B         	call	_wait_one_pulse
 24760                           
 24761                           ;keyboard.c: 104: if(note_off_was_sent == 0) {key_press_release_note_off();}
 24762  00568A  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 24763  00568C  EC8B  F02E         	call	_key_press_release_note_off	;wreg free
 24764                           
 24765                           ;keyboard.c: 105: TIMER_OVERFLOWS = 0;
 24766  005690  0E00               	movlw	0
 24767  005692  6E2E               	movwf	_TIMER_OVERFLOWS,c
 24768  005694                     l1417:
 24769                           
 24770                           ;keyboard.c: 106: }
 24771                           ;keyboard.c: 108: delete_notes_from_arpeggio(temp_pitch);
 24772  005694  0100               	movlb	0	; () banked
 24773  005696  5176               	movf	playThisNotePentatonic@temp_pitch& (0+255),w,b
 24774  005698  EC5A  F04B         	call	_delete_notes_from_arpeggio
 24775                           
 24776                           ;keyboard.c: 118: if(temp_pitch == parallel){NUM_NOTES_PRESSED = 0;}
 24777  00569C  C030  F072         	movff	_parallel,??_playThisNotePentatonic
 24778  0056A0  0100               	movlb	0	; () banked
 24779  0056A2  6B73               	clrf	(??_playThisNotePentatonic+1)& (0+255),b
 24780  0056A4  BF72               	btfsc	??_playThisNotePentatonic& (0+255),7,b
 24781  0056A6  0773               	decf	(??_playThisNotePentatonic+1)& (0+255),f,b
 24782  0056A8  5176               	movf	playThisNotePentatonic@temp_pitch& (0+255),w,b
 24783  0056AA  6F74               	movwf	(??_playThisNotePentatonic+2)& (0+255),b
 24784  0056AC  6B75               	clrf	(??_playThisNotePentatonic+3)& (0+255),b
 24785  0056AE  5172               	movf	??_playThisNotePentatonic& (0+255),w,b
 24786  0056B0  1974               	xorwf	(??_playThisNotePentatonic+2)& (0+255),w,b
 24787  0056B2  E106               	bnz	l27067
 24788  0056B4  5173               	movf	(??_playThisNotePentatonic+1)& (0+255),w,b
 24789  0056B6  1975               	xorwf	(??_playThisNotePentatonic+3)& (0+255),w,b
 24790  0056B8  A4D8               	btfss	status,2,c
 24791  0056BA  D002               	goto	l1419
 24792                           
 24793                           ; BSR set to: 0
 24794  0056BC  0E00               	movlw	0
 24795  0056BE  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 24796  0056C0                     l1419:
 24797  0056C0                     l27067:
 24798                           
 24799                           ; BSR set to: 0
 24800                           ;keyboard.c: 121: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 24801  0056C0  BC03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 24802                           
 24803                           ; BSR set to: 0
 24804  0056C2  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 24805  0056C4  D001               	goto	l1420
 24806                           
 24807                           ; BSR set to: 0
 24808                           ;keyboard.c: 122: LATCH = 1;
 24809  0056C6  8004               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 24810  0056C8                     l1420:
 24811                           
 24812                           ; BSR set to: 0
 24813                           ;keyboard.c: 123: }
 24814                           ;keyboard.c: 126: if((UN_LATCH_MODE == 0) && (latch_was_pressed == 1)){
 24815  0056C8  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 24816                           
 24817                           ; BSR set to: 0
 24818  0056CA  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 24819  0056CC  D004               	goto	l1421
 24820                           
 24821                           ; BSR set to: 0
 24822                           ;keyboard.c: 127: NUM_NOTES_PRESSED = 0;
 24823  0056CE  0E00               	movlw	0
 24824  0056D0  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 24825                           
 24826                           ;keyboard.c: 128: ARRAY_INDEX = 0;
 24827  0056D2  0E00               	movlw	0
 24828  0056D4  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 24829  0056D6                     l1421:
 24830                           
 24831                           ; BSR set to: 0
 24832                           ;keyboard.c: 129: }
 24833                           ;keyboard.c: 132: finish_arpeggio_setup();
 24834                           
 24835                           ; BSR set to: 0
 24836  0056D6  EC82  F04C         	call	_finish_arpeggio_setup	;wreg free
 24837                           
 24838                           ;keyboard.c: 135: TMR0ON = 1;
 24839  0056DA  8ED5               	bsf	4053,7,c	;volatile
 24840  0056DC  0012               	return	
 24841  0056DE                     __end_of_playThisNotePentatonic:
 24842                           	opt stack 0
 24843                           tblptru	equ	0xFF8
 24844                           tblptrh	equ	0xFF7
 24845                           tblptrl	equ	0xFF6
 24846                           tablat	equ	0xFF5
 24847                           prodh	equ	0xFF4
 24848                           prodl	equ	0xFF3
 24849                           intcon	equ	0xFF2
 24850                           intcon2	equ	0xFF1
 24851                           postinc0	equ	0xFEE
 24852                           wreg	equ	0xFE8
 24853                           postinc1	equ	0xFE6
 24854                           plusw1	equ	0xFE3
 24855                           fsr1h	equ	0xFE2
 24856                           fsr1l	equ	0xFE1
 24857                           indf2	equ	0xFDF
 24858                           postinc2	equ	0xFDE
 24859                           postdec2	equ	0xFDD
 24860                           plusw2	equ	0xFDB
 24861                           fsr2h	equ	0xFDA
 24862                           fsr2l	equ	0xFD9
 24863                           status	equ	0xFD8
 24864                           
 24865 ;; *************** function _keyboard_eight_note_efficient *****************
 24866 ;; Defined at:
 24867 ;;		line 1363 in file "keyboard.c"
 24868 ;; Parameters:    Size  Location     Type
 24869 ;;		None
 24870 ;; Auto vars:     Size  Location     Type
 24871 ;;  index           1   27[BANK0 ] unsigned char 
 24872 ;;  pitch           1   26[BANK0 ] unsigned char 
 24873 ;; Return value:  Size  Location     Type
 24874 ;;                  1    wreg      void 
 24875 ;; Registers used:
 24876 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24877 ;; Tracked objects:
 24878 ;;		On entry : 0/0
 24879 ;;		On exit  : 0/0
 24880 ;;		Unchanged: 0/0
 24881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 24882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24883 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24885 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24886 ;;Total ram usage:        2 bytes
 24887 ;; Hardware stack levels used:    1
 24888 ;; Hardware stack levels required when called:   12
 24889 ;; This function calls:
 24890 ;;		_playThisNote8
 24891 ;; This function is called by:
 24892 ;;		_processKeyboard
 24893 ;; This function uses a non-reentrant model
 24894 ;;
 24895                           
 24896                           	psect	text71
 24897  002BE2                     __ptext71:
 24898                           	opt stack 0
 24899  002BE2                     _keyboard_eight_note_efficient:
 24900                           	opt stack 13
 24901                           
 24902                           ;keyboard.c: 1365: unsigned char pitch;
 24903                           ;keyboard.c: 1366: unsigned char index;
 24904                           ;keyboard.c: 1369: if((button_state_now & 0x00000001) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW1){
 24905                           
 24906                           ;incstack = 0
 24907  002BE2  0100               	movlb	0	; () banked
 24908  002BE4  B1D8               	btfsc	_button_state_now& (0+255),0,b
 24909                           
 24910                           ; BSR set to: 0
 24911  002BE6  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 24912  002BE8  D00E               	goto	l1746
 24913                           
 24914                           ; BSR set to: 0
 24915  002BEA  B1D0               	btfsc	_keyboard& (0+255),0,b
 24916  002BEC  D00C               	goto	l1746
 24917                           
 24918                           ; BSR set to: 0
 24919                           ;keyboard.c: 1370: pitch = C;
 24920  002BEE  0E00               	movlw	0
 24921  002BF0  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 24922                           
 24923                           ;keyboard.c: 1371: index = 0;
 24924  002BF2  0E00               	movlw	0
 24925  002BF4  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 24926                           
 24927                           ; BSR set to: 0
 24928                           ;keyboard.c: 1372: ON_OFF = 1;
 24929  002BF6  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24930                           
 24931                           ; BSR set to: 0
 24932                           ;keyboard.c: 1373: playThisNote8(pitch, index);
 24933  002BF8  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 24934  002BFC  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 24935  002BFE  ECD7  F013         	call	_playThisNote8
 24936                           
 24937                           ;keyboard.c: 1374: keyboard.SW1 = 1;
 24938  002C02  0100               	movlb	0	; () banked
 24939  002C04  81D0               	bsf	_keyboard& (0+255),0,b
 24940  002C06                     l1746:
 24941                           
 24942                           ; BSR set to: 0
 24943                           ;keyboard.c: 1375: }
 24944                           ;keyboard.c: 1376: if((button_state_now & 0x00000004) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW3){
 24945                           
 24946                           ; BSR set to: 0
 24947  002C06  B5D8               	btfsc	_button_state_now& (0+255),2,b
 24948                           
 24949                           ; BSR set to: 0
 24950  002C08  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 24951  002C0A  D00E               	goto	l1747
 24952                           
 24953                           ; BSR set to: 0
 24954  002C0C  B5D0               	btfsc	_keyboard& (0+255),2,b
 24955  002C0E  D00C               	goto	l1747
 24956                           
 24957                           ; BSR set to: 0
 24958                           ;keyboard.c: 1377: pitch = D;
 24959  002C10  0E02               	movlw	2
 24960  002C12  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 24961                           
 24962                           ;keyboard.c: 1378: index = 1;
 24963  002C14  0E01               	movlw	1
 24964  002C16  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 24965                           
 24966                           ; BSR set to: 0
 24967                           ;keyboard.c: 1379: ON_OFF = 1;
 24968  002C18  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24969                           
 24970                           ; BSR set to: 0
 24971                           ;keyboard.c: 1380: playThisNote8(pitch, index);
 24972  002C1A  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 24973  002C1E  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 24974  002C20  ECD7  F013         	call	_playThisNote8
 24975                           
 24976                           ;keyboard.c: 1381: keyboard.SW3 = 1;
 24977  002C24  0100               	movlb	0	; () banked
 24978  002C26  85D0               	bsf	_keyboard& (0+255),2,b
 24979  002C28                     l1747:
 24980                           
 24981                           ; BSR set to: 0
 24982                           ;keyboard.c: 1382: }
 24983                           ;keyboard.c: 1383: if((button_state_now & 0x00000010) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW5){
 24984                           
 24985                           ; BSR set to: 0
 24986  002C28  B9D8               	btfsc	_button_state_now& (0+255),4,b
 24987                           
 24988                           ; BSR set to: 0
 24989  002C2A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 24990  002C2C  D00E               	goto	l1748
 24991                           
 24992                           ; BSR set to: 0
 24993  002C2E  B9D0               	btfsc	_keyboard& (0+255),4,b
 24994  002C30  D00C               	goto	l1748
 24995                           
 24996                           ; BSR set to: 0
 24997                           ;keyboard.c: 1384: pitch = E;
 24998  002C32  0E04               	movlw	4
 24999  002C34  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25000                           
 25001                           ;keyboard.c: 1385: index = 2;
 25002  002C36  0E02               	movlw	2
 25003  002C38  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25004                           
 25005                           ; BSR set to: 0
 25006                           ;keyboard.c: 1386: ON_OFF = 1;
 25007  002C3A  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25008                           
 25009                           ; BSR set to: 0
 25010                           ;keyboard.c: 1387: playThisNote8(pitch, index);
 25011  002C3C  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25012  002C40  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25013  002C42  ECD7  F013         	call	_playThisNote8
 25014                           
 25015                           ;keyboard.c: 1388: keyboard.SW5 = 5;
 25016  002C46  0100               	movlb	0	; () banked
 25017  002C48  89D0               	bsf	_keyboard& (0+255),4,b
 25018  002C4A                     l1748:
 25019                           
 25020                           ; BSR set to: 0
 25021                           ;keyboard.c: 1389: }
 25022                           ;keyboard.c: 1390: if((button_state_now & 0x00000020) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW6){
 25023                           
 25024                           ; BSR set to: 0
 25025  002C4A  BBD8               	btfsc	_button_state_now& (0+255),5,b
 25026                           
 25027                           ; BSR set to: 0
 25028  002C4C  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25029  002C4E  D00E               	goto	l1749
 25030                           
 25031                           ; BSR set to: 0
 25032  002C50  BBD0               	btfsc	_keyboard& (0+255),5,b
 25033  002C52  D00C               	goto	l1749
 25034                           
 25035                           ; BSR set to: 0
 25036                           ;keyboard.c: 1391: pitch = F;
 25037  002C54  0E05               	movlw	5
 25038  002C56  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25039                           
 25040                           ;keyboard.c: 1392: index = 3;
 25041  002C58  0E03               	movlw	3
 25042  002C5A  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25043                           
 25044                           ; BSR set to: 0
 25045                           ;keyboard.c: 1393: ON_OFF = 1;
 25046  002C5C  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25047                           
 25048                           ; BSR set to: 0
 25049                           ;keyboard.c: 1394: playThisNote8(pitch, index);
 25050  002C5E  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25051  002C62  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25052  002C64  ECD7  F013         	call	_playThisNote8
 25053                           
 25054                           ;keyboard.c: 1395: keyboard.SW6 = 1;
 25055  002C68  0100               	movlb	0	; () banked
 25056  002C6A  8BD0               	bsf	_keyboard& (0+255),5,b
 25057  002C6C                     l1749:
 25058                           
 25059                           ; BSR set to: 0
 25060                           ;keyboard.c: 1396: }
 25061                           ;keyboard.c: 1397: if((button_state_now & 0x00000080) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW8){
 25062                           
 25063                           ; BSR set to: 0
 25064  002C6C  BFD8               	btfsc	_button_state_now& (0+255),7,b
 25065                           
 25066                           ; BSR set to: 0
 25067  002C6E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25068  002C70  D00E               	goto	l1750
 25069                           
 25070                           ; BSR set to: 0
 25071  002C72  BFD0               	btfsc	_keyboard& (0+255),7,b
 25072  002C74  D00C               	goto	l1750
 25073                           
 25074                           ; BSR set to: 0
 25075                           ;keyboard.c: 1398: pitch = G;
 25076  002C76  0E07               	movlw	7
 25077  002C78  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25078                           
 25079                           ;keyboard.c: 1399: index = 4;
 25080  002C7A  0E04               	movlw	4
 25081  002C7C  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25082                           
 25083                           ; BSR set to: 0
 25084                           ;keyboard.c: 1400: ON_OFF = 1;
 25085  002C7E  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25086                           
 25087                           ; BSR set to: 0
 25088                           ;keyboard.c: 1401: playThisNote8(pitch, index);
 25089  002C80  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25090  002C84  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25091  002C86  ECD7  F013         	call	_playThisNote8
 25092                           
 25093                           ;keyboard.c: 1402: keyboard.SW8 = 1;
 25094  002C8A  0100               	movlb	0	; () banked
 25095  002C8C  8FD0               	bsf	_keyboard& (0+255),7,b
 25096  002C8E                     l1750:
 25097                           
 25098                           ; BSR set to: 0
 25099                           ;keyboard.c: 1403: }
 25100                           ;keyboard.c: 1404: if((button_state_now & 0x00000200) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW10){
 25101                           
 25102                           ; BSR set to: 0
 25103  002C8E  B3D9               	btfsc	(_button_state_now+1)& (0+255),1,b
 25104                           
 25105                           ; BSR set to: 0
 25106  002C90  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25107  002C92  D00E               	goto	l1751
 25108                           
 25109                           ; BSR set to: 0
 25110  002C94  B3D1               	btfsc	(_keyboard+1)& (0+255),1,b
 25111  002C96  D00C               	goto	l1751
 25112                           
 25113                           ; BSR set to: 0
 25114                           ;keyboard.c: 1405: pitch = A;
 25115  002C98  0E09               	movlw	9
 25116  002C9A  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25117                           
 25118                           ;keyboard.c: 1406: index = 5;
 25119  002C9C  0E05               	movlw	5
 25120  002C9E  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25121                           
 25122                           ; BSR set to: 0
 25123                           ;keyboard.c: 1407: ON_OFF = 1;
 25124  002CA0  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25125                           
 25126                           ; BSR set to: 0
 25127                           ;keyboard.c: 1408: playThisNote8(pitch, index);
 25128  002CA2  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25129  002CA6  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25130  002CA8  ECD7  F013         	call	_playThisNote8
 25131                           
 25132                           ;keyboard.c: 1409: keyboard.SW10 = 1;
 25133  002CAC  0100               	movlb	0	; () banked
 25134  002CAE  83D1               	bsf	(_keyboard+1)& (0+255),1,b
 25135  002CB0                     l1751:
 25136                           
 25137                           ; BSR set to: 0
 25138                           ;keyboard.c: 1410: }
 25139                           ;keyboard.c: 1411: if((button_state_now & 0x00000800) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW12){
 25140                           
 25141                           ; BSR set to: 0
 25142  002CB0  B7D9               	btfsc	(_button_state_now+1)& (0+255),3,b
 25143                           
 25144                           ; BSR set to: 0
 25145  002CB2  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25146  002CB4  D00E               	goto	l1752
 25147                           
 25148                           ; BSR set to: 0
 25149  002CB6  B7D1               	btfsc	(_keyboard+1)& (0+255),3,b
 25150  002CB8  D00C               	goto	l1752
 25151                           
 25152                           ; BSR set to: 0
 25153                           ;keyboard.c: 1412: pitch = B;
 25154  002CBA  0E0B               	movlw	11
 25155  002CBC  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25156                           
 25157                           ;keyboard.c: 1413: index = 6;
 25158  002CBE  0E06               	movlw	6
 25159  002CC0  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25160                           
 25161                           ; BSR set to: 0
 25162                           ;keyboard.c: 1414: ON_OFF = 1;
 25163  002CC2  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25164                           
 25165                           ; BSR set to: 0
 25166                           ;keyboard.c: 1415: playThisNote8(pitch, index);
 25167  002CC4  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25168  002CC8  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25169  002CCA  ECD7  F013         	call	_playThisNote8
 25170                           
 25171                           ;keyboard.c: 1416: keyboard.SW12 = 1;
 25172  002CCE  0100               	movlb	0	; () banked
 25173  002CD0  87D1               	bsf	(_keyboard+1)& (0+255),3,b
 25174  002CD2                     l1752:
 25175                           
 25176                           ; BSR set to: 0
 25177                           ;keyboard.c: 1417: }
 25178                           ;keyboard.c: 1418: if((button_state_now & 0x00001000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW13){
 25179                           
 25180                           ; BSR set to: 0
 25181  002CD2  B9D9               	btfsc	(_button_state_now+1)& (0+255),4,b
 25182                           
 25183                           ; BSR set to: 0
 25184  002CD4  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25185  002CD6  D00E               	goto	l1753
 25186                           
 25187                           ; BSR set to: 0
 25188  002CD8  B9D1               	btfsc	(_keyboard+1)& (0+255),4,b
 25189  002CDA  D00C               	goto	l1753
 25190                           
 25191                           ; BSR set to: 0
 25192                           ;keyboard.c: 1419: pitch = C2;
 25193  002CDC  0E0C               	movlw	12
 25194  002CDE  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25195                           
 25196                           ;keyboard.c: 1420: index = 7;
 25197  002CE0  0E07               	movlw	7
 25198  002CE2  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25199                           
 25200                           ; BSR set to: 0
 25201                           ;keyboard.c: 1421: ON_OFF = 1;
 25202  002CE4  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25203                           
 25204                           ; BSR set to: 0
 25205                           ;keyboard.c: 1422: playThisNote8(pitch, index);
 25206  002CE6  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25207  002CEA  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25208  002CEC  ECD7  F013         	call	_playThisNote8
 25209                           
 25210                           ;keyboard.c: 1423: keyboard.SW13 = 1;
 25211  002CF0  0100               	movlb	0	; () banked
 25212  002CF2  89D1               	bsf	(_keyboard+1)& (0+255),4,b
 25213  002CF4                     l1753:
 25214                           
 25215                           ; BSR set to: 0
 25216                           ;keyboard.c: 1424: }
 25217                           ;keyboard.c: 1425: if((button_state_now & 0x00004000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW15){
 25218                           
 25219                           ; BSR set to: 0
 25220  002CF4  BDD9               	btfsc	(_button_state_now+1)& (0+255),6,b
 25221                           
 25222                           ; BSR set to: 0
 25223  002CF6  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25224  002CF8  D00E               	goto	l1754
 25225                           
 25226                           ; BSR set to: 0
 25227  002CFA  BDD1               	btfsc	(_keyboard+1)& (0+255),6,b
 25228  002CFC  D00C               	goto	l1754
 25229                           
 25230                           ; BSR set to: 0
 25231                           ;keyboard.c: 1426: pitch = D2;
 25232  002CFE  0E0E               	movlw	14
 25233  002D00  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25234                           
 25235                           ;keyboard.c: 1427: index = 8;
 25236  002D02  0E08               	movlw	8
 25237  002D04  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25238                           
 25239                           ; BSR set to: 0
 25240                           ;keyboard.c: 1428: ON_OFF = 1;
 25241  002D06  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25242                           
 25243                           ; BSR set to: 0
 25244                           ;keyboard.c: 1429: playThisNote8(pitch, index);
 25245  002D08  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25246  002D0C  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25247  002D0E  ECD7  F013         	call	_playThisNote8
 25248                           
 25249                           ;keyboard.c: 1430: keyboard.SW15 = 1;
 25250  002D12  0100               	movlb	0	; () banked
 25251  002D14  8DD1               	bsf	(_keyboard+1)& (0+255),6,b
 25252  002D16                     l1754:
 25253                           
 25254                           ; BSR set to: 0
 25255                           ;keyboard.c: 1431: }
 25256                           ;keyboard.c: 1432: if((button_state_now & 0x00010000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW17){
 25257                           
 25258                           ; BSR set to: 0
 25259  002D16  B1DA               	btfsc	(_button_state_now+2)& (0+255),0,b
 25260                           
 25261                           ; BSR set to: 0
 25262  002D18  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25263  002D1A  D00E               	goto	l1755
 25264                           
 25265                           ; BSR set to: 0
 25266  002D1C  B1D2               	btfsc	(_keyboard+2)& (0+255),0,b
 25267  002D1E  D00C               	goto	l1755
 25268                           
 25269                           ; BSR set to: 0
 25270                           ;keyboard.c: 1433: pitch = E2;
 25271  002D20  0E10               	movlw	16
 25272  002D22  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25273                           
 25274                           ;keyboard.c: 1434: index = 9;
 25275  002D24  0E09               	movlw	9
 25276  002D26  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25277                           
 25278                           ; BSR set to: 0
 25279                           ;keyboard.c: 1435: ON_OFF = 1;
 25280  002D28  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25281                           
 25282                           ; BSR set to: 0
 25283                           ;keyboard.c: 1436: playThisNote8(pitch, index);
 25284  002D2A  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25285  002D2E  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25286  002D30  ECD7  F013         	call	_playThisNote8
 25287                           
 25288                           ;keyboard.c: 1437: keyboard.SW17 = 1;
 25289  002D34  0100               	movlb	0	; () banked
 25290  002D36  81D2               	bsf	(_keyboard+2)& (0+255),0,b
 25291  002D38                     l1755:
 25292                           
 25293                           ; BSR set to: 0
 25294                           ;keyboard.c: 1438: }
 25295                           ;keyboard.c: 1439: if((button_state_now & 0x00020000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW18){
 25296                           
 25297                           ; BSR set to: 0
 25298  002D38  B3DA               	btfsc	(_button_state_now+2)& (0+255),1,b
 25299                           
 25300                           ; BSR set to: 0
 25301  002D3A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25302  002D3C  D00E               	goto	l1756
 25303                           
 25304                           ; BSR set to: 0
 25305  002D3E  B3D2               	btfsc	(_keyboard+2)& (0+255),1,b
 25306  002D40  D00C               	goto	l1756
 25307                           
 25308                           ; BSR set to: 0
 25309                           ;keyboard.c: 1440: pitch = F2;
 25310  002D42  0E11               	movlw	17
 25311  002D44  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25312                           
 25313                           ;keyboard.c: 1441: index = 10;
 25314  002D46  0E0A               	movlw	10
 25315  002D48  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25316                           
 25317                           ; BSR set to: 0
 25318                           ;keyboard.c: 1442: ON_OFF = 1;
 25319  002D4A  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25320                           
 25321                           ; BSR set to: 0
 25322                           ;keyboard.c: 1443: playThisNote8(pitch, index);
 25323  002D4C  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25324  002D50  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25325  002D52  ECD7  F013         	call	_playThisNote8
 25326                           
 25327                           ;keyboard.c: 1444: keyboard.SW18 = 1;
 25328  002D56  0100               	movlb	0	; () banked
 25329  002D58  83D2               	bsf	(_keyboard+2)& (0+255),1,b
 25330  002D5A                     l1756:
 25331                           
 25332                           ; BSR set to: 0
 25333                           ;keyboard.c: 1445: }
 25334                           ;keyboard.c: 1446: if((button_state_now & 0x00080000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW20){
 25335                           
 25336                           ; BSR set to: 0
 25337  002D5A  B7DA               	btfsc	(_button_state_now+2)& (0+255),3,b
 25338                           
 25339                           ; BSR set to: 0
 25340  002D5C  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25341  002D5E  D00E               	goto	l1757
 25342                           
 25343                           ; BSR set to: 0
 25344  002D60  B7D2               	btfsc	(_keyboard+2)& (0+255),3,b
 25345  002D62  D00C               	goto	l1757
 25346                           
 25347                           ; BSR set to: 0
 25348                           ;keyboard.c: 1447: pitch = G2;
 25349  002D64  0E13               	movlw	19
 25350  002D66  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25351                           
 25352                           ;keyboard.c: 1448: index = 11;
 25353  002D68  0E0B               	movlw	11
 25354  002D6A  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25355                           
 25356                           ; BSR set to: 0
 25357                           ;keyboard.c: 1449: ON_OFF = 1;
 25358  002D6C  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25359                           
 25360                           ; BSR set to: 0
 25361                           ;keyboard.c: 1450: playThisNote8(pitch, index);
 25362  002D6E  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25363  002D72  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25364  002D74  ECD7  F013         	call	_playThisNote8
 25365                           
 25366                           ;keyboard.c: 1451: keyboard.SW20 = 1;
 25367  002D78  0100               	movlb	0	; () banked
 25368  002D7A  87D2               	bsf	(_keyboard+2)& (0+255),3,b
 25369  002D7C                     l1757:
 25370                           
 25371                           ; BSR set to: 0
 25372                           ;keyboard.c: 1452: }
 25373                           ;keyboard.c: 1453: if((button_state_now & 0x00200000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW22){
 25374                           
 25375                           ; BSR set to: 0
 25376  002D7C  BBDA               	btfsc	(_button_state_now+2)& (0+255),5,b
 25377                           
 25378                           ; BSR set to: 0
 25379  002D7E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25380  002D80  D00E               	goto	l1758
 25381                           
 25382                           ; BSR set to: 0
 25383  002D82  BBD2               	btfsc	(_keyboard+2)& (0+255),5,b
 25384  002D84  D00C               	goto	l1758
 25385                           
 25386                           ; BSR set to: 0
 25387                           ;keyboard.c: 1454: pitch = A2;
 25388  002D86  0E15               	movlw	21
 25389  002D88  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25390                           
 25391                           ;keyboard.c: 1455: index = 12;
 25392  002D8A  0E0C               	movlw	12
 25393  002D8C  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25394                           
 25395                           ; BSR set to: 0
 25396                           ;keyboard.c: 1456: ON_OFF = 1;
 25397  002D8E  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25398                           
 25399                           ; BSR set to: 0
 25400                           ;keyboard.c: 1457: playThisNote8(pitch, index);
 25401  002D90  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25402  002D94  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25403  002D96  ECD7  F013         	call	_playThisNote8
 25404                           
 25405                           ;keyboard.c: 1458: keyboard.SW22 = 1;
 25406  002D9A  0100               	movlb	0	; () banked
 25407  002D9C  8BD2               	bsf	(_keyboard+2)& (0+255),5,b
 25408  002D9E                     l1758:
 25409                           
 25410                           ; BSR set to: 0
 25411                           ;keyboard.c: 1459: }
 25412                           ;keyboard.c: 1460: if((button_state_now & 0x00800000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW24){
 25413                           
 25414                           ; BSR set to: 0
 25415  002D9E  BFDA               	btfsc	(_button_state_now+2)& (0+255),7,b
 25416                           
 25417                           ; BSR set to: 0
 25418  002DA0  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25419  002DA2  D00E               	goto	l1759
 25420                           
 25421                           ; BSR set to: 0
 25422  002DA4  BFD2               	btfsc	(_keyboard+2)& (0+255),7,b
 25423  002DA6  D00C               	goto	l1759
 25424                           
 25425                           ; BSR set to: 0
 25426                           ;keyboard.c: 1461: pitch = B2;
 25427  002DA8  0E17               	movlw	23
 25428  002DAA  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25429                           
 25430                           ;keyboard.c: 1462: index = 13;
 25431  002DAC  0E0D               	movlw	13
 25432  002DAE  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25433                           
 25434                           ; BSR set to: 0
 25435                           ;keyboard.c: 1463: ON_OFF = 1;
 25436  002DB0  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25437                           
 25438                           ; BSR set to: 0
 25439                           ;keyboard.c: 1464: playThisNote8(pitch, index);
 25440  002DB2  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25441  002DB6  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25442  002DB8  ECD7  F013         	call	_playThisNote8
 25443                           
 25444                           ;keyboard.c: 1465: keyboard.SW24 = 1;
 25445  002DBC  0100               	movlb	0	; () banked
 25446  002DBE  8FD2               	bsf	(_keyboard+2)& (0+255),7,b
 25447  002DC0                     l1759:
 25448                           
 25449                           ; BSR set to: 0
 25450                           ;keyboard.c: 1466: }
 25451                           ;keyboard.c: 1467: if((button_state_now & 0x01000000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW25){
 25452                           
 25453                           ; BSR set to: 0
 25454  002DC0  B1DB               	btfsc	(_button_state_now+3)& (0+255),0,b
 25455                           
 25456                           ; BSR set to: 0
 25457  002DC2  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 25458  002DC4  D00E               	goto	l1760
 25459                           
 25460                           ; BSR set to: 0
 25461  002DC6  B1D3               	btfsc	(_keyboard+3)& (0+255),0,b
 25462  002DC8  D00C               	goto	l1760
 25463                           
 25464                           ; BSR set to: 0
 25465                           ;keyboard.c: 1468: pitch = C3;
 25466  002DCA  0E18               	movlw	24
 25467  002DCC  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25468                           
 25469                           ;keyboard.c: 1469: index = 14;
 25470  002DCE  0E0E               	movlw	14
 25471  002DD0  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25472                           
 25473                           ; BSR set to: 0
 25474                           ;keyboard.c: 1470: ON_OFF = 1;
 25475  002DD2  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25476                           
 25477                           ; BSR set to: 0
 25478                           ;keyboard.c: 1471: playThisNote8(pitch, index);
 25479  002DD4  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25480  002DD8  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25481  002DDA  ECD7  F013         	call	_playThisNote8
 25482                           
 25483                           ;keyboard.c: 1472: keyboard.SW25 = 1;
 25484  002DDE  0100               	movlb	0	; () banked
 25485  002DE0  81D3               	bsf	(_keyboard+3)& (0+255),0,b
 25486  002DE2                     l1760:
 25487                           
 25488                           ; BSR set to: 0
 25489                           ;keyboard.c: 1473: }
 25490                           ;keyboard.c: 1476: if(((button_state_last & 0x00000001)) && ((button_state_now & 0x00000
      +                          001) == 0) && keyboard.SW1) {
 25491                           
 25492                           ; BSR set to: 0
 25493  002DE2  B1D4               	btfsc	_button_state_last& (0+255),0,b
 25494                           
 25495                           ; BSR set to: 0
 25496  002DE4  B1D8               	btfsc	_button_state_now& (0+255),0,b
 25497  002DE6  D00E               	goto	l1761
 25498                           
 25499                           ; BSR set to: 0
 25500  002DE8  A1D0               	btfss	_keyboard& (0+255),0,b
 25501  002DEA  D00C               	goto	l1761
 25502                           
 25503                           ; BSR set to: 0
 25504                           ;keyboard.c: 1477: pitch = C;
 25505  002DEC  0E00               	movlw	0
 25506  002DEE  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25507                           
 25508                           ;keyboard.c: 1478: index = 0;
 25509  002DF0  0E00               	movlw	0
 25510  002DF2  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25511                           
 25512                           ; BSR set to: 0
 25513                           ;keyboard.c: 1479: ON_OFF = 0;
 25514  002DF4  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25515                           
 25516                           ; BSR set to: 0
 25517                           ;keyboard.c: 1480: playThisNote8(pitch, index);
 25518  002DF6  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25519  002DFA  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25520  002DFC  ECD7  F013         	call	_playThisNote8
 25521                           
 25522                           ;keyboard.c: 1481: keyboard.SW1 = 0;
 25523  002E00  0100               	movlb	0	; () banked
 25524  002E02  91D0               	bcf	_keyboard& (0+255),0,b
 25525  002E04                     l1761:
 25526                           
 25527                           ; BSR set to: 0
 25528                           ;keyboard.c: 1482: }
 25529                           ;keyboard.c: 1483: if(((button_state_last & 0x00000004)) && ((button_state_now & 0x00000
      +                          004) == 0) && keyboard.SW3) {
 25530                           
 25531                           ; BSR set to: 0
 25532  002E04  B5D4               	btfsc	_button_state_last& (0+255),2,b
 25533                           
 25534                           ; BSR set to: 0
 25535  002E06  B5D8               	btfsc	_button_state_now& (0+255),2,b
 25536  002E08  D00E               	goto	l1762
 25537                           
 25538                           ; BSR set to: 0
 25539  002E0A  A5D0               	btfss	_keyboard& (0+255),2,b
 25540  002E0C  D00C               	goto	l1762
 25541                           
 25542                           ; BSR set to: 0
 25543                           ;keyboard.c: 1484: pitch = D;
 25544  002E0E  0E02               	movlw	2
 25545  002E10  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25546                           
 25547                           ;keyboard.c: 1485: index = 1;
 25548  002E12  0E01               	movlw	1
 25549  002E14  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25550                           
 25551                           ; BSR set to: 0
 25552                           ;keyboard.c: 1486: ON_OFF = 0;
 25553  002E16  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25554                           
 25555                           ; BSR set to: 0
 25556                           ;keyboard.c: 1487: playThisNote8(pitch, index);
 25557  002E18  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25558  002E1C  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25559  002E1E  ECD7  F013         	call	_playThisNote8
 25560                           
 25561                           ;keyboard.c: 1488: keyboard.SW3 = 0;
 25562  002E22  0100               	movlb	0	; () banked
 25563  002E24  95D0               	bcf	_keyboard& (0+255),2,b
 25564  002E26                     l1762:
 25565                           
 25566                           ; BSR set to: 0
 25567                           ;keyboard.c: 1489: }
 25568                           ;keyboard.c: 1490: if(((button_state_last & 0x00000010)) && ((button_state_now & 0x00000
      +                          010) == 0) && keyboard.SW5) {
 25569                           
 25570                           ; BSR set to: 0
 25571  002E26  B9D4               	btfsc	_button_state_last& (0+255),4,b
 25572                           
 25573                           ; BSR set to: 0
 25574  002E28  B9D8               	btfsc	_button_state_now& (0+255),4,b
 25575  002E2A  D00E               	goto	l1763
 25576                           
 25577                           ; BSR set to: 0
 25578  002E2C  A9D0               	btfss	_keyboard& (0+255),4,b
 25579  002E2E  D00C               	goto	l1763
 25580                           
 25581                           ; BSR set to: 0
 25582                           ;keyboard.c: 1491: pitch = E;
 25583  002E30  0E04               	movlw	4
 25584  002E32  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25585                           
 25586                           ;keyboard.c: 1492: index = 2;
 25587  002E34  0E02               	movlw	2
 25588  002E36  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25589                           
 25590                           ; BSR set to: 0
 25591                           ;keyboard.c: 1493: ON_OFF = 0;
 25592  002E38  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25593                           
 25594                           ; BSR set to: 0
 25595                           ;keyboard.c: 1494: playThisNote8(pitch, index);
 25596  002E3A  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25597  002E3E  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25598  002E40  ECD7  F013         	call	_playThisNote8
 25599                           
 25600                           ;keyboard.c: 1495: keyboard.SW5 = 0;
 25601  002E44  0100               	movlb	0	; () banked
 25602  002E46  99D0               	bcf	_keyboard& (0+255),4,b
 25603  002E48                     l1763:
 25604                           
 25605                           ; BSR set to: 0
 25606                           ;keyboard.c: 1496: }
 25607                           ;keyboard.c: 1497: if(((button_state_last & 0x00000020)) && ((button_state_now & 0x00000
      +                          020) == 0) && keyboard.SW6) {
 25608                           
 25609                           ; BSR set to: 0
 25610  002E48  BBD4               	btfsc	_button_state_last& (0+255),5,b
 25611                           
 25612                           ; BSR set to: 0
 25613  002E4A  BBD8               	btfsc	_button_state_now& (0+255),5,b
 25614  002E4C  D00E               	goto	l1764
 25615                           
 25616                           ; BSR set to: 0
 25617  002E4E  ABD0               	btfss	_keyboard& (0+255),5,b
 25618  002E50  D00C               	goto	l1764
 25619                           
 25620                           ; BSR set to: 0
 25621                           ;keyboard.c: 1498: pitch = F;
 25622  002E52  0E05               	movlw	5
 25623  002E54  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25624                           
 25625                           ;keyboard.c: 1499: index = 3;
 25626  002E56  0E03               	movlw	3
 25627  002E58  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25628                           
 25629                           ; BSR set to: 0
 25630                           ;keyboard.c: 1500: ON_OFF = 0;
 25631  002E5A  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25632                           
 25633                           ; BSR set to: 0
 25634                           ;keyboard.c: 1501: playThisNote8(pitch, index);
 25635  002E5C  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25636  002E60  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25637  002E62  ECD7  F013         	call	_playThisNote8
 25638                           
 25639                           ;keyboard.c: 1502: keyboard.SW6 = 0;
 25640  002E66  0100               	movlb	0	; () banked
 25641  002E68  9BD0               	bcf	_keyboard& (0+255),5,b
 25642  002E6A                     l1764:
 25643                           
 25644                           ; BSR set to: 0
 25645                           ;keyboard.c: 1503: }
 25646                           ;keyboard.c: 1504: if(((button_state_last & 0x00000080)) && ((button_state_now & 0x00000
      +                          080) == 0) && keyboard.SW8) {
 25647                           
 25648                           ; BSR set to: 0
 25649  002E6A  BFD4               	btfsc	_button_state_last& (0+255),7,b
 25650                           
 25651                           ; BSR set to: 0
 25652  002E6C  BFD8               	btfsc	_button_state_now& (0+255),7,b
 25653  002E6E  D00E               	goto	l1765
 25654                           
 25655                           ; BSR set to: 0
 25656  002E70  AFD0               	btfss	_keyboard& (0+255),7,b
 25657  002E72  D00C               	goto	l1765
 25658                           
 25659                           ; BSR set to: 0
 25660                           ;keyboard.c: 1505: pitch = G;
 25661  002E74  0E07               	movlw	7
 25662  002E76  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25663                           
 25664                           ;keyboard.c: 1506: index = 4;
 25665  002E78  0E04               	movlw	4
 25666  002E7A  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25667                           
 25668                           ; BSR set to: 0
 25669                           ;keyboard.c: 1507: ON_OFF = 0;
 25670  002E7C  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25671                           
 25672                           ; BSR set to: 0
 25673                           ;keyboard.c: 1508: playThisNote8(pitch, index);
 25674  002E7E  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25675  002E82  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25676  002E84  ECD7  F013         	call	_playThisNote8
 25677                           
 25678                           ;keyboard.c: 1509: keyboard.SW8 = 0;
 25679  002E88  0100               	movlb	0	; () banked
 25680  002E8A  9FD0               	bcf	_keyboard& (0+255),7,b
 25681  002E8C                     l1765:
 25682                           
 25683                           ; BSR set to: 0
 25684                           ;keyboard.c: 1510: }
 25685                           ;keyboard.c: 1511: if(((button_state_last & 0x00000200)) && ((button_state_now & 0x00000
      +                          200) == 0) && keyboard.SW10) {
 25686                           
 25687                           ; BSR set to: 0
 25688  002E8C  B3D5               	btfsc	(_button_state_last+1)& (0+255),1,b
 25689                           
 25690                           ; BSR set to: 0
 25691  002E8E  B3D9               	btfsc	(_button_state_now+1)& (0+255),1,b
 25692  002E90  D00E               	goto	l1766
 25693                           
 25694                           ; BSR set to: 0
 25695  002E92  A3D1               	btfss	(_keyboard+1)& (0+255),1,b
 25696  002E94  D00C               	goto	l1766
 25697                           
 25698                           ; BSR set to: 0
 25699                           ;keyboard.c: 1512: pitch = A;
 25700  002E96  0E09               	movlw	9
 25701  002E98  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25702                           
 25703                           ;keyboard.c: 1513: index = 5;
 25704  002E9A  0E05               	movlw	5
 25705  002E9C  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25706                           
 25707                           ; BSR set to: 0
 25708                           ;keyboard.c: 1514: ON_OFF = 0;
 25709  002E9E  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25710                           
 25711                           ; BSR set to: 0
 25712                           ;keyboard.c: 1515: playThisNote8(pitch, index);
 25713  002EA0  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25714  002EA4  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25715  002EA6  ECD7  F013         	call	_playThisNote8
 25716                           
 25717                           ;keyboard.c: 1516: keyboard.SW10 = 10;
 25718  002EAA  0100               	movlb	0	; () banked
 25719  002EAC  93D1               	bcf	(_keyboard+1)& (0+255),1,b
 25720  002EAE                     l1766:
 25721                           
 25722                           ; BSR set to: 0
 25723                           ;keyboard.c: 1517: }
 25724                           ;keyboard.c: 1518: if(((button_state_last & 0x00000800)) && ((button_state_now & 0x00000
      +                          800) == 0) && keyboard.SW12) {
 25725                           
 25726                           ; BSR set to: 0
 25727  002EAE  B7D5               	btfsc	(_button_state_last+1)& (0+255),3,b
 25728                           
 25729                           ; BSR set to: 0
 25730  002EB0  B7D9               	btfsc	(_button_state_now+1)& (0+255),3,b
 25731  002EB2  D00E               	goto	l1767
 25732                           
 25733                           ; BSR set to: 0
 25734  002EB4  A7D1               	btfss	(_keyboard+1)& (0+255),3,b
 25735  002EB6  D00C               	goto	l1767
 25736                           
 25737                           ; BSR set to: 0
 25738                           ;keyboard.c: 1519: pitch = B;
 25739  002EB8  0E0B               	movlw	11
 25740  002EBA  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25741                           
 25742                           ;keyboard.c: 1520: index = 6;
 25743  002EBC  0E06               	movlw	6
 25744  002EBE  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25745                           
 25746                           ; BSR set to: 0
 25747                           ;keyboard.c: 1521: ON_OFF = 0;
 25748  002EC0  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25749                           
 25750                           ; BSR set to: 0
 25751                           ;keyboard.c: 1522: playThisNote8(pitch, index);
 25752  002EC2  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25753  002EC6  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25754  002EC8  ECD7  F013         	call	_playThisNote8
 25755                           
 25756                           ;keyboard.c: 1523: keyboard.SW12 = 0;
 25757  002ECC  0100               	movlb	0	; () banked
 25758  002ECE  97D1               	bcf	(_keyboard+1)& (0+255),3,b
 25759  002ED0                     l1767:
 25760                           
 25761                           ; BSR set to: 0
 25762                           ;keyboard.c: 1524: }
 25763                           ;keyboard.c: 1525: if(((button_state_last & 0x00001000)) && ((button_state_now & 0x00001
      +                          000) == 0) && keyboard.SW13) {
 25764                           
 25765                           ; BSR set to: 0
 25766  002ED0  B9D5               	btfsc	(_button_state_last+1)& (0+255),4,b
 25767                           
 25768                           ; BSR set to: 0
 25769  002ED2  B9D9               	btfsc	(_button_state_now+1)& (0+255),4,b
 25770  002ED4  D00E               	goto	l1768
 25771                           
 25772                           ; BSR set to: 0
 25773  002ED6  A9D1               	btfss	(_keyboard+1)& (0+255),4,b
 25774  002ED8  D00C               	goto	l1768
 25775                           
 25776                           ; BSR set to: 0
 25777                           ;keyboard.c: 1526: pitch = C2;
 25778  002EDA  0E0C               	movlw	12
 25779  002EDC  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25780                           
 25781                           ;keyboard.c: 1527: index = 7;
 25782  002EDE  0E07               	movlw	7
 25783  002EE0  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25784                           
 25785                           ; BSR set to: 0
 25786                           ;keyboard.c: 1528: ON_OFF = 0;
 25787  002EE2  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25788                           
 25789                           ; BSR set to: 0
 25790                           ;keyboard.c: 1529: playThisNote8(pitch, index);
 25791  002EE4  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25792  002EE8  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25793  002EEA  ECD7  F013         	call	_playThisNote8
 25794                           
 25795                           ;keyboard.c: 1530: keyboard.SW13 = 0;
 25796  002EEE  0100               	movlb	0	; () banked
 25797  002EF0  99D1               	bcf	(_keyboard+1)& (0+255),4,b
 25798  002EF2                     l1768:
 25799                           
 25800                           ; BSR set to: 0
 25801                           ;keyboard.c: 1531: }
 25802                           ;keyboard.c: 1532: if(((button_state_last & 0x00004000)) && ((button_state_now & 0x00004
      +                          000) == 0) && keyboard.SW15) {
 25803                           
 25804                           ; BSR set to: 0
 25805  002EF2  BDD5               	btfsc	(_button_state_last+1)& (0+255),6,b
 25806                           
 25807                           ; BSR set to: 0
 25808  002EF4  BDD9               	btfsc	(_button_state_now+1)& (0+255),6,b
 25809  002EF6  D00E               	goto	l1769
 25810                           
 25811                           ; BSR set to: 0
 25812  002EF8  ADD1               	btfss	(_keyboard+1)& (0+255),6,b
 25813  002EFA  D00C               	goto	l1769
 25814                           
 25815                           ; BSR set to: 0
 25816                           ;keyboard.c: 1533: pitch = D2;
 25817  002EFC  0E0E               	movlw	14
 25818  002EFE  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25819                           
 25820                           ;keyboard.c: 1534: index = 8;
 25821  002F00  0E08               	movlw	8
 25822  002F02  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25823                           
 25824                           ; BSR set to: 0
 25825                           ;keyboard.c: 1535: ON_OFF = 0;
 25826  002F04  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25827                           
 25828                           ; BSR set to: 0
 25829                           ;keyboard.c: 1536: playThisNote8(pitch, index);
 25830  002F06  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25831  002F0A  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25832  002F0C  ECD7  F013         	call	_playThisNote8
 25833                           
 25834                           ;keyboard.c: 1537: keyboard.SW15 = 0;
 25835  002F10  0100               	movlb	0	; () banked
 25836  002F12  9DD1               	bcf	(_keyboard+1)& (0+255),6,b
 25837  002F14                     l1769:
 25838                           
 25839                           ; BSR set to: 0
 25840                           ;keyboard.c: 1538: }
 25841                           ;keyboard.c: 1539: if(((button_state_last & 0x00010000)) && ((button_state_now & 0x00010
      +                          000) == 0) && keyboard.SW17) {
 25842                           
 25843                           ; BSR set to: 0
 25844  002F14  B1D6               	btfsc	(_button_state_last+2)& (0+255),0,b
 25845                           
 25846                           ; BSR set to: 0
 25847  002F16  B1DA               	btfsc	(_button_state_now+2)& (0+255),0,b
 25848  002F18  D00E               	goto	l1770
 25849                           
 25850                           ; BSR set to: 0
 25851  002F1A  A1D2               	btfss	(_keyboard+2)& (0+255),0,b
 25852  002F1C  D00C               	goto	l1770
 25853                           
 25854                           ; BSR set to: 0
 25855                           ;keyboard.c: 1540: pitch = E2;
 25856  002F1E  0E10               	movlw	16
 25857  002F20  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25858                           
 25859                           ;keyboard.c: 1541: index = 9;
 25860  002F22  0E09               	movlw	9
 25861  002F24  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25862                           
 25863                           ; BSR set to: 0
 25864                           ;keyboard.c: 1542: ON_OFF = 0;
 25865  002F26  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25866                           
 25867                           ; BSR set to: 0
 25868                           ;keyboard.c: 1543: playThisNote8(pitch, index);
 25869  002F28  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25870  002F2C  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25871  002F2E  ECD7  F013         	call	_playThisNote8
 25872                           
 25873                           ;keyboard.c: 1544: keyboard.SW17 = 0;
 25874  002F32  0100               	movlb	0	; () banked
 25875  002F34  91D2               	bcf	(_keyboard+2)& (0+255),0,b
 25876  002F36                     l1770:
 25877                           
 25878                           ; BSR set to: 0
 25879                           ;keyboard.c: 1545: }
 25880                           ;keyboard.c: 1546: if(((button_state_last & 0x00020000)) && ((button_state_now & 0x00020
      +                          000) == 0) && keyboard.SW18) {
 25881                           
 25882                           ; BSR set to: 0
 25883  002F36  B3D6               	btfsc	(_button_state_last+2)& (0+255),1,b
 25884                           
 25885                           ; BSR set to: 0
 25886  002F38  B3DA               	btfsc	(_button_state_now+2)& (0+255),1,b
 25887  002F3A  D00E               	goto	l1771
 25888                           
 25889                           ; BSR set to: 0
 25890  002F3C  A3D2               	btfss	(_keyboard+2)& (0+255),1,b
 25891  002F3E  D00C               	goto	l1771
 25892                           
 25893                           ; BSR set to: 0
 25894                           ;keyboard.c: 1547: pitch = F2;
 25895  002F40  0E11               	movlw	17
 25896  002F42  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25897                           
 25898                           ;keyboard.c: 1548: index = 10;
 25899  002F44  0E0A               	movlw	10
 25900  002F46  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25901                           
 25902                           ; BSR set to: 0
 25903                           ;keyboard.c: 1549: ON_OFF = 0;
 25904  002F48  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25905                           
 25906                           ; BSR set to: 0
 25907                           ;keyboard.c: 1550: playThisNote8(pitch, index);
 25908  002F4A  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25909  002F4E  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25910  002F50  ECD7  F013         	call	_playThisNote8
 25911                           
 25912                           ;keyboard.c: 1551: keyboard.SW18 = 0;
 25913  002F54  0100               	movlb	0	; () banked
 25914  002F56  93D2               	bcf	(_keyboard+2)& (0+255),1,b
 25915  002F58                     l1771:
 25916                           
 25917                           ; BSR set to: 0
 25918                           ;keyboard.c: 1552: }
 25919                           ;keyboard.c: 1553: if(((button_state_last & 0x00080000)) && ((button_state_now & 0x00080
      +                          000) == 0) && keyboard.SW20) {
 25920                           
 25921                           ; BSR set to: 0
 25922  002F58  B7D6               	btfsc	(_button_state_last+2)& (0+255),3,b
 25923                           
 25924                           ; BSR set to: 0
 25925  002F5A  B7DA               	btfsc	(_button_state_now+2)& (0+255),3,b
 25926  002F5C  D00E               	goto	l1772
 25927                           
 25928                           ; BSR set to: 0
 25929  002F5E  A7D2               	btfss	(_keyboard+2)& (0+255),3,b
 25930  002F60  D00C               	goto	l1772
 25931                           
 25932                           ; BSR set to: 0
 25933                           ;keyboard.c: 1554: pitch = G2;
 25934  002F62  0E13               	movlw	19
 25935  002F64  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25936                           
 25937                           ;keyboard.c: 1555: index = 11;
 25938  002F66  0E0B               	movlw	11
 25939  002F68  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25940                           
 25941                           ; BSR set to: 0
 25942                           ;keyboard.c: 1556: ON_OFF = 0;
 25943  002F6A  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25944                           
 25945                           ; BSR set to: 0
 25946                           ;keyboard.c: 1557: playThisNote8(pitch, index);
 25947  002F6C  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25948  002F70  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25949  002F72  ECD7  F013         	call	_playThisNote8
 25950                           
 25951                           ;keyboard.c: 1558: keyboard.SW20 = 0;
 25952  002F76  0100               	movlb	0	; () banked
 25953  002F78  97D2               	bcf	(_keyboard+2)& (0+255),3,b
 25954  002F7A                     l1772:
 25955                           
 25956                           ; BSR set to: 0
 25957                           ;keyboard.c: 1559: }
 25958                           ;keyboard.c: 1560: if(((button_state_last & 0x00200000)) && ((button_state_now & 0x00200
      +                          000) == 0) && keyboard.SW22) {
 25959                           
 25960                           ; BSR set to: 0
 25961  002F7A  BBD6               	btfsc	(_button_state_last+2)& (0+255),5,b
 25962                           
 25963                           ; BSR set to: 0
 25964  002F7C  BBDA               	btfsc	(_button_state_now+2)& (0+255),5,b
 25965  002F7E  D00E               	goto	l1773
 25966                           
 25967                           ; BSR set to: 0
 25968  002F80  ABD2               	btfss	(_keyboard+2)& (0+255),5,b
 25969  002F82  D00C               	goto	l1773
 25970                           
 25971                           ; BSR set to: 0
 25972                           ;keyboard.c: 1561: pitch = A2;
 25973  002F84  0E15               	movlw	21
 25974  002F86  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25975                           
 25976                           ;keyboard.c: 1562: index = 12;
 25977  002F88  0E0C               	movlw	12
 25978  002F8A  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25979                           
 25980                           ; BSR set to: 0
 25981                           ;keyboard.c: 1563: ON_OFF = 0;
 25982  002F8C  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25983                           
 25984                           ; BSR set to: 0
 25985                           ;keyboard.c: 1564: playThisNote8(pitch, index);
 25986  002F8E  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25987  002F92  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25988  002F94  ECD7  F013         	call	_playThisNote8
 25989                           
 25990                           ;keyboard.c: 1565: keyboard.SW22 = 0;
 25991  002F98  0100               	movlb	0	; () banked
 25992  002F9A  9BD2               	bcf	(_keyboard+2)& (0+255),5,b
 25993  002F9C                     l1773:
 25994                           
 25995                           ; BSR set to: 0
 25996                           ;keyboard.c: 1566: }
 25997                           ;keyboard.c: 1567: if(((button_state_last & 0x00800000)) && ((button_state_now & 0x00800
      +                          000) == 0) && keyboard.SW24) {
 25998                           
 25999                           ; BSR set to: 0
 26000  002F9C  BFD6               	btfsc	(_button_state_last+2)& (0+255),7,b
 26001                           
 26002                           ; BSR set to: 0
 26003  002F9E  BFDA               	btfsc	(_button_state_now+2)& (0+255),7,b
 26004  002FA0  D00E               	goto	l1774
 26005                           
 26006                           ; BSR set to: 0
 26007  002FA2  AFD2               	btfss	(_keyboard+2)& (0+255),7,b
 26008  002FA4  D00C               	goto	l1774
 26009                           
 26010                           ; BSR set to: 0
 26011                           ;keyboard.c: 1568: pitch = B2;
 26012  002FA6  0E17               	movlw	23
 26013  002FA8  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 26014                           
 26015                           ;keyboard.c: 1569: index = 13;
 26016  002FAA  0E0D               	movlw	13
 26017  002FAC  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 26018                           
 26019                           ; BSR set to: 0
 26020                           ;keyboard.c: 1570: ON_OFF = 0;
 26021  002FAE  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26022                           
 26023                           ; BSR set to: 0
 26024                           ;keyboard.c: 1571: playThisNote8(pitch, index);
 26025  002FB0  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 26026  002FB4  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 26027  002FB6  ECD7  F013         	call	_playThisNote8
 26028                           
 26029                           ;keyboard.c: 1572: keyboard.SW24 = 0;
 26030  002FBA  0100               	movlb	0	; () banked
 26031  002FBC  9FD2               	bcf	(_keyboard+2)& (0+255),7,b
 26032  002FBE                     l1774:
 26033                           
 26034                           ; BSR set to: 0
 26035                           ;keyboard.c: 1573: }
 26036                           ;keyboard.c: 1574: if(((button_state_last & 0x01000000)) && ((button_state_now & 0x01000
      +                          000) == 0) && keyboard.SW25) {
 26037                           
 26038                           ; BSR set to: 0
 26039  002FBE  A1D7               	btfss	(_button_state_last+3)& (0+255),0,b
 26040  002FC0  0012               	return	
 26041                           
 26042                           ; BSR set to: 0
 26043  002FC2  B1DB               	btfsc	(_button_state_now+3)& (0+255),0,b
 26044  002FC4  0012               	return	
 26045                           
 26046                           ; BSR set to: 0
 26047  002FC6  A1D3               	btfss	(_keyboard+3)& (0+255),0,b
 26048  002FC8  0012               	return	
 26049                           
 26050                           ; BSR set to: 0
 26051                           ;keyboard.c: 1575: pitch = C;
 26052  002FCA  0E00               	movlw	0
 26053  002FCC  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 26054                           
 26055                           ;keyboard.c: 1576: index = 14;
 26056  002FCE  0E0E               	movlw	14
 26057  002FD0  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 26058                           
 26059                           ; BSR set to: 0
 26060                           ;keyboard.c: 1577: ON_OFF = 0;
 26061  002FD2  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26062                           
 26063                           ; BSR set to: 0
 26064                           ;keyboard.c: 1578: playThisNote8(pitch, index);
 26065  002FD4  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 26066  002FD8  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 26067  002FDA  ECD7  F013         	call	_playThisNote8
 26068                           
 26069                           ;keyboard.c: 1579: keyboard.SW25 = 0;
 26070  002FDE  0100               	movlb	0	; () banked
 26071  002FE0  91D3               	bcf	(_keyboard+3)& (0+255),0,b
 26072  002FE2  0012               	return	
 26073  002FE4                     __end_of_keyboard_eight_note_efficient:
 26074                           	opt stack 0
 26075                           tblptru	equ	0xFF8
 26076                           tblptrh	equ	0xFF7
 26077                           tblptrl	equ	0xFF6
 26078                           tablat	equ	0xFF5
 26079                           prodh	equ	0xFF4
 26080                           prodl	equ	0xFF3
 26081                           intcon	equ	0xFF2
 26082                           intcon2	equ	0xFF1
 26083                           postinc0	equ	0xFEE
 26084                           wreg	equ	0xFE8
 26085                           postinc1	equ	0xFE6
 26086                           plusw1	equ	0xFE3
 26087                           fsr1h	equ	0xFE2
 26088                           fsr1l	equ	0xFE1
 26089                           indf2	equ	0xFDF
 26090                           postinc2	equ	0xFDE
 26091                           postdec2	equ	0xFDD
 26092                           plusw2	equ	0xFDB
 26093                           fsr2h	equ	0xFDA
 26094                           fsr2l	equ	0xFD9
 26095                           status	equ	0xFD8
 26096                           
 26097 ;; *************** function _playThisNote8 *****************
 26098 ;; Defined at:
 26099 ;;		line 902 in file "keyboard.c"
 26100 ;; Parameters:    Size  Location     Type
 26101 ;;  pitch           1    wreg     unsigned char 
 26102 ;;  index           1   17[BANK0 ] unsigned char 
 26103 ;; Auto vars:     Size  Location     Type
 26104 ;;  pitch           1   22[BANK0 ] unsigned char 
 26105 ;;  temp_pitch      1   23[BANK0 ] unsigned char 
 26106 ;;  mode_p          2   24[BANK0 ] PTR unsigned char 
 26107 ;;		 -> locrian_key(15), aeolian_key(15), mixolydian_key(15), lydian_key(15), 
 26108 ;;		 -> phrygian_key(15), dorian_key(15), ionian_key(15), 
 26109 ;; Return value:  Size  Location     Type
 26110 ;;                  1    wreg      void 
 26111 ;; Registers used:
 26112 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26113 ;; Tracked objects:
 26114 ;;		On entry : 0/0
 26115 ;;		On exit  : 0/0
 26116 ;;		Unchanged: 0/0
 26117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 26118 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26119 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26120 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26121 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26122 ;;Total ram usage:        9 bytes
 26123 ;; Hardware stack levels used:    1
 26124 ;; Hardware stack levels required when called:   11
 26125 ;; This function calls:
 26126 ;;		_add_notes_to_arpeggio
 26127 ;;		_delete_notes_from_arpeggio
 26128 ;;		_finish_arpeggio_setup
 26129 ;;		_key_press_release_note_off
 26130 ;;		_noteOff
 26131 ;;		_noteOn
 26132 ;;		_playDiatonicSeventhMajor
 26133 ;;		_playDiatonicSeventhMinor
 26134 ;;		_playDiatonicTriadMajor
 26135 ;;		_playDiatonicTriadMinor
 26136 ;;		_wait_one_pulse
 26137 ;; This function is called by:
 26138 ;;		_keyboard_eight_note_efficient
 26139 ;;		_doTheUnLatch
 26140 ;; This function uses a non-reentrant model
 26141 ;;
 26142                           
 26143                           	psect	text72
 26144  0027AE                     __ptext72:
 26145                           	opt stack 0
 26146  0027AE                     _playThisNote8:
 26147                           	opt stack 13
 26148                           
 26149                           ; BSR set to: 0
 26150                           ;incstack = 0
 26151                           ;playThisNote8@pitch stored from wreg
 26152  0027AE  0100               	movlb	0	; () banked
 26153  0027B0  6F76               	movwf	playThisNote8@pitch& (0+255),b
 26154                           
 26155                           ;keyboard.c: 904: unsigned char *mode_p;
 26156                           ;keyboard.c: 907: switch (which_mode) {
 26157  0027B2  D01E               	goto	l1582
 26158  0027B4                     
 26159                           ;keyboard.c: 909: mode_p = ionian_key;
 26160  0027B4  0E55               	movlw	low _ionian_key
 26161  0027B6  0100               	movlb	0	; () banked
 26162  0027B8  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26163  0027BA  0EFD               	movlw	high _ionian_key
 26164  0027BC  D017               	goto	L11
 26165  0027BE                     
 26166                           ; BSR set to: 0
 26167                           ;keyboard.c: 912: mode_p = dorian_key;
 26168                           
 26169                           ; BSR set to: 0
 26170  0027BE  0E46               	movlw	low _dorian_key
 26171  0027C0  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26172  0027C2  0EFD               	movlw	high _dorian_key
 26173  0027C4  D013               	goto	L11
 26174  0027C6                     
 26175                           ; BSR set to: 0
 26176                           ;keyboard.c: 915: mode_p = phrygian_key;
 26177                           
 26178                           ; BSR set to: 0
 26179  0027C6  0E37               	movlw	low _phrygian_key
 26180  0027C8  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26181  0027CA  0EFD               	movlw	high _phrygian_key
 26182  0027CC  D00F               	goto	L11
 26183  0027CE                     
 26184                           ; BSR set to: 0
 26185                           ;keyboard.c: 918: mode_p = lydian_key;
 26186                           
 26187                           ; BSR set to: 0
 26188  0027CE  0E28               	movlw	low _lydian_key
 26189  0027D0  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26190  0027D2  0EFD               	movlw	high _lydian_key
 26191  0027D4  D00B               	goto	L11
 26192  0027D6                     
 26193                           ; BSR set to: 0
 26194                           ;keyboard.c: 921: mode_p = mixolydian_key;
 26195                           
 26196                           ; BSR set to: 0
 26197  0027D6  0E19               	movlw	low _mixolydian_key
 26198  0027D8  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26199  0027DA  0EFD               	movlw	high _mixolydian_key
 26200  0027DC  D007               	goto	L11
 26201  0027DE                     
 26202                           ; BSR set to: 0
 26203                           ;keyboard.c: 924: mode_p = aeolian_key;
 26204                           
 26205                           ; BSR set to: 0
 26206  0027DE  0E0A               	movlw	low _aeolian_key
 26207  0027E0  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26208  0027E2  0EFD               	movlw	high _aeolian_key
 26209  0027E4  D003               	goto	L11
 26210  0027E6                     
 26211                           ; BSR set to: 0
 26212                           ;keyboard.c: 927: mode_p = locrian_key;
 26213                           
 26214                           ; BSR set to: 0
 26215  0027E6  0EFB               	movlw	low _locrian_key
 26216  0027E8  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26217  0027EA  0EFC               	movlw	high _locrian_key
 26218  0027EC                     L11:
 26219  0027EC  6F79               	movwf	(playThisNote8@mode_p+1)& (0+255),b
 26220                           
 26221                           ; BSR set to: 0
 26222                           ;keyboard.c: 931: }
 26223                           
 26224                           ; BSR set to: 0
 26225                           ;keyboard.c: 930: break;
 26226                           
 26227                           ;keyboard.c: 929: default:
 26228                           
 26229                           ;keyboard.c: 928: break;
 26230  0027EE  D017               	goto	l1584
 26231  0027F0                     l1582:
 26232                           
 26233                           ; BSR set to: 0
 26234  0027F0  0100               	movlb	0	; () banked
 26235  0027F2  51F1               	movf	_which_mode& (0+255),w,b
 26236                           
 26237                           ; Switch size 1, requested type "space"
 26238                           ; Number of cases is 7, Range of values is 0 to 6
 26239                           ; switch strategies available:
 26240                           ; Name         Instructions Cycles
 26241                           ; simple_byte           22    12 (average)
 26242                           ;	Chosen strategy is simple_byte
 26243  0027F4  0A00               	xorlw	0	; case 0
 26244  0027F6  B4D8               	btfsc	status,2,c
 26245  0027F8  D7DD               	goto	l1583
 26246  0027FA  0A01               	xorlw	1	; case 1
 26247  0027FC  B4D8               	btfsc	status,2,c
 26248  0027FE  D7DF               	goto	l1585
 26249  002800  0A03               	xorlw	3	; case 2
 26250  002802  B4D8               	btfsc	status,2,c
 26251  002804  D7E0               	goto	l1586
 26252  002806  0A01               	xorlw	1	; case 3
 26253  002808  B4D8               	btfsc	status,2,c
 26254  00280A  D7E1               	goto	l1587
 26255  00280C  0A07               	xorlw	7	; case 4
 26256  00280E  B4D8               	btfsc	status,2,c
 26257  002810  D7E2               	goto	l1588
 26258  002812  0A01               	xorlw	1	; case 5
 26259  002814  B4D8               	btfsc	status,2,c
 26260  002816  D7E3               	goto	l1589
 26261  002818  0A03               	xorlw	3	; case 6
 26262  00281A  B4D8               	btfsc	status,2,c
 26263  00281C  D7E4               	goto	l1590
 26264  00281E                     l1584:
 26265                           
 26266                           ; BSR set to: 0
 26267                           ;keyboard.c: 934: if(ARPEGGIO_ON == 0){
 26268  00281E  B604               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 26269  002820  D0D8               	goto	l1605
 26270                           
 26271                           ; BSR set to: 0
 26272                           ;keyboard.c: 936: if(KEYBOARD_MODE == MAJOR) {
 26273  002822  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 26274  002824  A4D8               	btfss	status,2,c
 26275  002826  D027               	goto	l1595
 26276                           
 26277                           ; BSR set to: 0
 26278                           ;keyboard.c: 937: if(ON_OFF == 1) {noteOn(channel,major_key[index],velocity);}
 26279  002828  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26280  00282A  D011               	goto	l1594
 26281                           
 26282                           ; BSR set to: 0
 26283  00282C  5051               	movf	_velocity,w,c
 26284  00282E  6EE6               	movwf	postinc1,c
 26285  002830  5171               	movf	playThisNote8@index& (0+255),w,b
 26286  002832  0D01               	mullw	1
 26287  002834  0E78               	movlw	low _major_key
 26288  002836  24F3               	addwf	prodl,w,c
 26289  002838  6EF6               	movwf	tblptrl,c
 26290  00283A  0EF3               	movlw	high _major_key
 26291  00283C  20F4               	addwfc	prodh,w,c
 26292  00283E  6EF7               	movwf	tblptrh,c
 26293  002840                     	if	0	;There are less than 3 active tblptr bytes
 26294  002840                     	endif
 26295  002840  0008               	tblrd		*
 26296  002842  50F5               	movf	tablat,w,c
 26297  002844  6EE6               	movwf	postinc1,c
 26298  002846  503E               	movf	_channel,w,c
 26299  002848  6EE6               	movwf	postinc1,c
 26300  00284A  EC93  F045         	call	_noteOn	;wreg free
 26301  00284E                     l1594:
 26302                           
 26303                           ;keyboard.c: 938: if(ON_OFF == 0) {noteOff(channel,major_key[index],velocity);}
 26304  00284E  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26305  002850  D012               	goto	l1595
 26306  002852  5051               	movf	_velocity,w,c
 26307  002854  6EE6               	movwf	postinc1,c
 26308  002856  0100               	movlb	0	; () banked
 26309  002858  5171               	movf	playThisNote8@index& (0+255),w,b
 26310  00285A  0D01               	mullw	1
 26311  00285C  0E78               	movlw	low _major_key
 26312  00285E  24F3               	addwf	prodl,w,c
 26313  002860  6EF6               	movwf	tblptrl,c
 26314  002862  0EF3               	movlw	high _major_key
 26315  002864  20F4               	addwfc	prodh,w,c
 26316  002866  6EF7               	movwf	tblptrh,c
 26317  002868                     	if	0	;There are less than 3 active tblptr bytes
 26318  002868                     	endif
 26319  002868  0008               	tblrd		*
 26320  00286A  50F5               	movf	tablat,w,c
 26321  00286C  6EE6               	movwf	postinc1,c
 26322  00286E  503E               	movf	_channel,w,c
 26323  002870  6EE6               	movwf	postinc1,c
 26324  002872  EC48  F04A         	call	_noteOff	;wreg free
 26325  002876                     l1595:
 26326                           
 26327                           ;keyboard.c: 939: }
 26328                           ;keyboard.c: 941: if(KEYBOARD_MODE == MINOR) {
 26329  002876  0E02               	movlw	2
 26330  002878  0100               	movlb	0	; () banked
 26331  00287A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26332  00287C  A4D8               	btfss	status,2,c
 26333  00287E  D027               	goto	l1598
 26334                           
 26335                           ; BSR set to: 0
 26336                           ;keyboard.c: 942: if(ON_OFF == 1) {noteOn(channel,minor_key[index],velocity);}
 26337  002880  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26338  002882  D011               	goto	l1597
 26339                           
 26340                           ; BSR set to: 0
 26341  002884  5051               	movf	_velocity,w,c
 26342  002886  6EE6               	movwf	postinc1,c
 26343  002888  5171               	movf	playThisNote8@index& (0+255),w,b
 26344  00288A  0D01               	mullw	1
 26345  00288C  0E69               	movlw	low _minor_key
 26346  00288E  24F3               	addwf	prodl,w,c
 26347  002890  6EF6               	movwf	tblptrl,c
 26348  002892  0EF3               	movlw	high _minor_key
 26349  002894  20F4               	addwfc	prodh,w,c
 26350  002896  6EF7               	movwf	tblptrh,c
 26351  002898                     	if	0	;There are less than 3 active tblptr bytes
 26352  002898                     	endif
 26353  002898  0008               	tblrd		*
 26354  00289A  50F5               	movf	tablat,w,c
 26355  00289C  6EE6               	movwf	postinc1,c
 26356  00289E  503E               	movf	_channel,w,c
 26357  0028A0  6EE6               	movwf	postinc1,c
 26358  0028A2  EC93  F045         	call	_noteOn	;wreg free
 26359  0028A6                     l1597:
 26360                           
 26361                           ;keyboard.c: 943: if(ON_OFF == 0) {noteOff(channel,minor_key[index],velocity);}
 26362  0028A6  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26363  0028A8  D012               	goto	l1598
 26364  0028AA  5051               	movf	_velocity,w,c
 26365  0028AC  6EE6               	movwf	postinc1,c
 26366  0028AE  0100               	movlb	0	; () banked
 26367  0028B0  5171               	movf	playThisNote8@index& (0+255),w,b
 26368  0028B2  0D01               	mullw	1
 26369  0028B4  0E69               	movlw	low _minor_key
 26370  0028B6  24F3               	addwf	prodl,w,c
 26371  0028B8  6EF6               	movwf	tblptrl,c
 26372  0028BA  0EF3               	movlw	high _minor_key
 26373  0028BC  20F4               	addwfc	prodh,w,c
 26374  0028BE  6EF7               	movwf	tblptrh,c
 26375  0028C0                     	if	0	;There are less than 3 active tblptr bytes
 26376  0028C0                     	endif
 26377  0028C0  0008               	tblrd		*
 26378  0028C2  50F5               	movf	tablat,w,c
 26379  0028C4  6EE6               	movwf	postinc1,c
 26380  0028C6  503E               	movf	_channel,w,c
 26381  0028C8  6EE6               	movwf	postinc1,c
 26382  0028CA  EC48  F04A         	call	_noteOff	;wreg free
 26383  0028CE                     l1598:
 26384                           
 26385                           ;keyboard.c: 944: }
 26386                           ;keyboard.c: 946: if(KEYBOARD_MODE == MODES) {
 26387  0028CE  0E03               	movlw	3
 26388  0028D0  0100               	movlb	0	; () banked
 26389  0028D2  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26390  0028D4  A4D8               	btfss	status,2,c
 26391  0028D6  D07D               	goto	l1605
 26392                           
 26393                           ; BSR set to: 0
 26394                           ;keyboard.c: 947: if(index == 0) {
 26395  0028D8  5171               	movf	playThisNote8@index& (0+255),w,b
 26396  0028DA  A4D8               	btfss	status,2,c
 26397  0028DC  D033               	goto	l1602
 26398                           
 26399                           ; BSR set to: 0
 26400                           ;keyboard.c: 948: if(ON_OFF == 1) {noteOn(channel,mode_p[index],velocity);}
 26401  0028DE  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26402  0028E0  D017               	goto	l1601
 26403                           
 26404                           ; BSR set to: 0
 26405  0028E2  5051               	movf	_velocity,w,c
 26406  0028E4  6EE6               	movwf	postinc1,c
 26407  0028E6  5171               	movf	playThisNote8@index& (0+255),w,b
 26408  0028E8  0D01               	mullw	1
 26409  0028EA  C078  F072         	movff	playThisNote8@mode_p,??_playThisNote8
 26410  0028EE  C079  F073         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 26411  0028F2  50F3               	movf	prodl,w,c
 26412  0028F4  2772               	addwf	??_playThisNote8& (0+255),f,b
 26413  0028F6  50F4               	movf	prodh,w,c
 26414  0028F8  2373               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 26415  0028FA  C072  FFF6         	movff	??_playThisNote8,tblptrl
 26416  0028FE  C073  FFF7         	movff	??_playThisNote8+1,tblptrh
 26417  002902                     	if	0	;tblptru may be non-zero
 26418  002902                     	endif
 26419  002902                     	if	0	;tblptru may be non-zero
 26420  002902                     	endif
 26421  002902  0008               	tblrd		*
 26422  002904  50F5               	movf	tablat,w,c
 26423  002906  6EE6               	movwf	postinc1,c
 26424  002908  503E               	movf	_channel,w,c
 26425  00290A  6EE6               	movwf	postinc1,c
 26426  00290C  EC93  F045         	call	_noteOn	;wreg free
 26427  002910                     l1601:
 26428                           
 26429                           ;keyboard.c: 949: if(ON_OFF == 0) {noteOff(channel,mode_p[index],velocity);}
 26430  002910  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26431  002912  D018               	goto	l1602
 26432  002914  5051               	movf	_velocity,w,c
 26433  002916  6EE6               	movwf	postinc1,c
 26434  002918  0100               	movlb	0	; () banked
 26435  00291A  5171               	movf	playThisNote8@index& (0+255),w,b
 26436  00291C  0D01               	mullw	1
 26437  00291E  C078  F072         	movff	playThisNote8@mode_p,??_playThisNote8
 26438  002922  C079  F073         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 26439  002926  50F3               	movf	prodl,w,c
 26440  002928  2772               	addwf	??_playThisNote8& (0+255),f,b
 26441  00292A  50F4               	movf	prodh,w,c
 26442  00292C  2373               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 26443  00292E  C072  FFF6         	movff	??_playThisNote8,tblptrl
 26444  002932  C073  FFF7         	movff	??_playThisNote8+1,tblptrh
 26445  002936                     	if	0	;tblptru may be non-zero
 26446  002936                     	endif
 26447  002936                     	if	0	;tblptru may be non-zero
 26448  002936                     	endif
 26449  002936  0008               	tblrd		*
 26450  002938  50F5               	movf	tablat,w,c
 26451  00293A  6EE6               	movwf	postinc1,c
 26452  00293C  503E               	movf	_channel,w,c
 26453  00293E  6EE6               	movwf	postinc1,c
 26454  002940  EC48  F04A         	call	_noteOff	;wreg free
 26455  002944                     l1602:
 26456                           
 26457                           ;keyboard.c: 950: }
 26458                           ;keyboard.c: 951: if(index > 0) {
 26459  002944  0100               	movlb	0	; () banked
 26460  002946  5171               	movf	playThisNote8@index& (0+255),w,b
 26461  002948  B4D8               	btfsc	status,2,c
 26462  00294A  D043               	goto	l1605
 26463                           
 26464                           ; BSR set to: 0
 26465                           ;keyboard.c: 952: if(ON_OFF == 1) {noteOn(channel,mode_p[0] + mode_p[index],velocity);}
 26466  00294C  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26467  00294E  D01F               	goto	l1604
 26468                           
 26469                           ; BSR set to: 0
 26470  002950  5051               	movf	_velocity,w,c
 26471  002952  6EE6               	movwf	postinc1,c
 26472  002954  5171               	movf	playThisNote8@index& (0+255),w,b
 26473  002956  0D01               	mullw	1
 26474  002958  C078  F072         	movff	playThisNote8@mode_p,??_playThisNote8
 26475  00295C  C079  F073         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 26476  002960  50F3               	movf	prodl,w,c
 26477  002962  2772               	addwf	??_playThisNote8& (0+255),f,b
 26478  002964  50F4               	movf	prodh,w,c
 26479  002966  2373               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 26480  002968  C072  FFF6         	movff	??_playThisNote8,tblptrl
 26481  00296C  C073  FFF7         	movff	??_playThisNote8+1,tblptrh
 26482  002970                     	if	0	;tblptru may be non-zero
 26483  002970                     	endif
 26484  002970                     	if	0	;tblptru may be non-zero
 26485  002970                     	endif
 26486  002970  0008               	tblrd		*
 26487  002972  CFF5 F074          	movff	tablat,??_playThisNote8+2
 26488  002976  C078  FFF6         	movff	playThisNote8@mode_p,tblptrl
 26489  00297A  C079  FFF7         	movff	playThisNote8@mode_p+1,tblptrh
 26490  00297E                     	if	0	;tblptru may be non-zero
 26491  00297E                     	endif
 26492  00297E                     	if	0	;tblptru may be non-zero
 26493  00297E                     	endif
 26494  00297E  0008               	tblrd		*
 26495  002980  50F5               	movf	tablat,w,c
 26496  002982  2574               	addwf	(??_playThisNote8+2)& (0+255),w,b
 26497  002984  6EE6               	movwf	postinc1,c
 26498  002986  503E               	movf	_channel,w,c
 26499  002988  6EE6               	movwf	postinc1,c
 26500  00298A  EC93  F045         	call	_noteOn	;wreg free
 26501  00298E                     l1604:
 26502                           
 26503                           ;keyboard.c: 953: if(ON_OFF == 0) {noteOff(channel,mode_p[0] + mode_p[index],velocity);}
 26504  00298E  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26505  002990  D020               	goto	l1605
 26506  002992  5051               	movf	_velocity,w,c
 26507  002994  6EE6               	movwf	postinc1,c
 26508  002996  0100               	movlb	0	; () banked
 26509  002998  5171               	movf	playThisNote8@index& (0+255),w,b
 26510  00299A  0D01               	mullw	1
 26511  00299C  C078  F072         	movff	playThisNote8@mode_p,??_playThisNote8
 26512  0029A0  C079  F073         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 26513  0029A4  50F3               	movf	prodl,w,c
 26514  0029A6  2772               	addwf	??_playThisNote8& (0+255),f,b
 26515  0029A8  50F4               	movf	prodh,w,c
 26516  0029AA  2373               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 26517  0029AC  C072  FFF6         	movff	??_playThisNote8,tblptrl
 26518  0029B0  C073  FFF7         	movff	??_playThisNote8+1,tblptrh
 26519  0029B4                     	if	0	;tblptru may be non-zero
 26520  0029B4                     	endif
 26521  0029B4                     	if	0	;tblptru may be non-zero
 26522  0029B4                     	endif
 26523  0029B4  0008               	tblrd		*
 26524  0029B6  CFF5 F074          	movff	tablat,??_playThisNote8+2
 26525  0029BA  C078  FFF6         	movff	playThisNote8@mode_p,tblptrl
 26526  0029BE  C079  FFF7         	movff	playThisNote8@mode_p+1,tblptrh
 26527  0029C2                     	if	0	;tblptru may be non-zero
 26528  0029C2                     	endif
 26529  0029C2                     	if	0	;tblptru may be non-zero
 26530  0029C2                     	endif
 26531  0029C2  0008               	tblrd		*
 26532  0029C4  50F5               	movf	tablat,w,c
 26533  0029C6  2574               	addwf	(??_playThisNote8+2)& (0+255),w,b
 26534  0029C8  6EE6               	movwf	postinc1,c
 26535  0029CA  503E               	movf	_channel,w,c
 26536  0029CC  6EE6               	movwf	postinc1,c
 26537  0029CE  EC48  F04A         	call	_noteOff	;wreg free
 26538  0029D2                     l1605:
 26539                           
 26540                           ;keyboard.c: 954: }
 26541                           ;keyboard.c: 955: }
 26542                           ;keyboard.c: 956: }
 26543                           ;keyboard.c: 959: if(ARPEGGIO_ON == 1){
 26544  0029D2  A604               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 26545  0029D4  D0DD               	goto	l1619
 26546                           
 26547                           ;keyboard.c: 961: unsigned char temp_pitch;
 26548                           ;keyboard.c: 963: if(KEYBOARD_MODE == MAJOR) {
 26549  0029D6  0100               	movlb	0	; () banked
 26550  0029D8  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 26551  0029DA  A4D8               	btfss	status,2,c
 26552  0029DC  D00B               	goto	l1607
 26553                           
 26554                           ; BSR set to: 0
 26555                           ;keyboard.c: 964: temp_pitch = major_key[index];
 26556  0029DE  5171               	movf	playThisNote8@index& (0+255),w,b
 26557  0029E0  0D01               	mullw	1
 26558  0029E2  0E78               	movlw	low _major_key
 26559  0029E4  24F3               	addwf	prodl,w,c
 26560  0029E6  6EF6               	movwf	tblptrl,c
 26561  0029E8  0EF3               	movlw	high _major_key
 26562  0029EA  20F4               	addwfc	prodh,w,c
 26563  0029EC  6EF7               	movwf	tblptrh,c
 26564  0029EE                     	if	0	;There are less than 3 active tblptr bytes
 26565  0029EE                     	endif
 26566  0029EE  0008               	tblrd		*
 26567  0029F0  CFF5 F077          	movff	tablat,playThisNote8@temp_pitch
 26568  0029F4                     l1607:
 26569                           
 26570                           ; BSR set to: 0
 26571                           ;keyboard.c: 965: }
 26572                           ;keyboard.c: 967: if(KEYBOARD_MODE == MINOR) {
 26573                           
 26574                           ; BSR set to: 0
 26575  0029F4  0E02               	movlw	2
 26576  0029F6  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26577  0029F8  A4D8               	btfss	status,2,c
 26578  0029FA  D00B               	goto	l1608
 26579                           
 26580                           ; BSR set to: 0
 26581                           ;keyboard.c: 968: temp_pitch = minor_key[index];
 26582  0029FC  5171               	movf	playThisNote8@index& (0+255),w,b
 26583  0029FE  0D01               	mullw	1
 26584  002A00  0E69               	movlw	low _minor_key
 26585  002A02  24F3               	addwf	prodl,w,c
 26586  002A04  6EF6               	movwf	tblptrl,c
 26587  002A06  0EF3               	movlw	high _minor_key
 26588  002A08  20F4               	addwfc	prodh,w,c
 26589  002A0A  6EF7               	movwf	tblptrh,c
 26590  002A0C                     	if	0	;There are less than 3 active tblptr bytes
 26591  002A0C                     	endif
 26592  002A0C  0008               	tblrd		*
 26593  002A0E  CFF5 F077          	movff	tablat,playThisNote8@temp_pitch
 26594  002A12                     l1608:
 26595                           
 26596                           ; BSR set to: 0
 26597                           ;keyboard.c: 969: }
 26598                           ;keyboard.c: 971: if(KEYBOARD_MODE == MODES) {
 26599                           
 26600                           ; BSR set to: 0
 26601  002A12  0E03               	movlw	3
 26602  002A14  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26603  002A16  A4D8               	btfss	status,2,c
 26604  002A18  D030               	goto	l1611
 26605                           
 26606                           ; BSR set to: 0
 26607                           ;keyboard.c: 972: if(index == 0){temp_pitch = mode_p[index];}
 26608  002A1A  5171               	movf	playThisNote8@index& (0+255),w,b
 26609  002A1C  A4D8               	btfss	status,2,c
 26610  002A1E  D011               	goto	l1610
 26611                           
 26612                           ; BSR set to: 0
 26613  002A20  5171               	movf	playThisNote8@index& (0+255),w,b
 26614  002A22  0D01               	mullw	1
 26615  002A24  C078  F072         	movff	playThisNote8@mode_p,??_playThisNote8
 26616  002A28  C079  F073         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 26617  002A2C  50F3               	movf	prodl,w,c
 26618  002A2E  2772               	addwf	??_playThisNote8& (0+255),f,b
 26619  002A30  50F4               	movf	prodh,w,c
 26620  002A32  2373               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 26621  002A34  C072  FFF6         	movff	??_playThisNote8,tblptrl
 26622  002A38  C073  FFF7         	movff	??_playThisNote8+1,tblptrh
 26623  002A3C                     	if	0	;tblptru may be non-zero
 26624  002A3C                     	endif
 26625  002A3C                     	if	0	;tblptru may be non-zero
 26626  002A3C                     	endif
 26627  002A3C  0008               	tblrd		*
 26628  002A3E  CFF5 F077          	movff	tablat,playThisNote8@temp_pitch
 26629  002A42                     l1610:
 26630                           
 26631                           ; BSR set to: 0
 26632                           ;keyboard.c: 973: if(index > 0){temp_pitch = (mode_p[0] + mode_p[index]);}
 26633                           
 26634                           ; BSR set to: 0
 26635  002A42  5171               	movf	playThisNote8@index& (0+255),w,b
 26636  002A44  B4D8               	btfsc	status,2,c
 26637  002A46  D019               	goto	l1611
 26638                           
 26639                           ; BSR set to: 0
 26640  002A48  5171               	movf	playThisNote8@index& (0+255),w,b
 26641  002A4A  0D01               	mullw	1
 26642  002A4C  C078  F072         	movff	playThisNote8@mode_p,??_playThisNote8
 26643  002A50  C079  F073         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 26644  002A54  50F3               	movf	prodl,w,c
 26645  002A56  2772               	addwf	??_playThisNote8& (0+255),f,b
 26646  002A58  50F4               	movf	prodh,w,c
 26647  002A5A  2373               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 26648  002A5C  C072  FFF6         	movff	??_playThisNote8,tblptrl
 26649  002A60  C073  FFF7         	movff	??_playThisNote8+1,tblptrh
 26650  002A64                     	if	0	;tblptru may be non-zero
 26651  002A64                     	endif
 26652  002A64                     	if	0	;tblptru may be non-zero
 26653  002A64                     	endif
 26654  002A64  0008               	tblrd		*
 26655  002A66  CFF5 F074          	movff	tablat,??_playThisNote8+2
 26656  002A6A  C078  FFF6         	movff	playThisNote8@mode_p,tblptrl
 26657  002A6E  C079  FFF7         	movff	playThisNote8@mode_p+1,tblptrh
 26658  002A72                     	if	0	;tblptru may be non-zero
 26659  002A72                     	endif
 26660  002A72                     	if	0	;tblptru may be non-zero
 26661  002A72                     	endif
 26662  002A72  0008               	tblrd		*
 26663  002A74  50F5               	movf	tablat,w,c
 26664  002A76  2574               	addwf	(??_playThisNote8+2)& (0+255),w,b
 26665  002A78  6F77               	movwf	playThisNote8@temp_pitch& (0+255),b
 26666  002A7A                     l1611:
 26667                           
 26668                           ; BSR set to: 0
 26669                           ;keyboard.c: 974: }
 26670                           ;keyboard.c: 976: if(ON_OFF == 1) {
 26671                           
 26672                           ; BSR set to: 0
 26673                           
 26674                           ; BSR set to: 0
 26675  002A7A  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26676  002A7C  D024               	goto	l1612
 26677                           
 26678                           ; BSR set to: 0
 26679                           ;keyboard.c: 979: TMR0ON = 0;
 26680  002A7E  9ED5               	bcf	4053,7,c	;volatile
 26681                           
 26682                           ;keyboard.c: 981: parallel = temp_pitch;
 26683  002A80  C077  F030         	movff	playThisNote8@temp_pitch,_parallel
 26684                           
 26685                           ; BSR set to: 0
 26686                           ;keyboard.c: 984: if(NUM_NOTES_PRESSED > 0){
 26687  002A84  502F               	movf	_NUM_NOTES_PRESSED,w,c
 26688  002A86  B4D8               	btfsc	status,2,c
 26689  002A88  D00A               	goto	l1613
 26690                           
 26691                           ; BSR set to: 0
 26692                           ;keyboard.c: 985: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 26693  002A8A  0E00               	movlw	0
 26694  002A8C  B203               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 26695  002A8E  0E01               	movlw	1
 26696  002A90  ECED  F04B         	call	_wait_one_pulse
 26697                           
 26698                           ;keyboard.c: 986: if(note_off_was_sent == 0) {key_press_release_note_off();}
 26699  002A94  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 26700  002A96  EC8B  F02E         	call	_key_press_release_note_off	;wreg free
 26701                           
 26702                           ;keyboard.c: 987: TIMER_OVERFLOWS = 0;
 26703  002A9A  0E00               	movlw	0
 26704  002A9C  6E2E               	movwf	_TIMER_OVERFLOWS,c
 26705  002A9E                     l1613:
 26706                           
 26707                           ;keyboard.c: 988: }
 26708                           ;keyboard.c: 991: if((KEYBOARD_MODE == MAJOR) | (KEYBOARD_MODE == MINOR) | (KEYBOARD_MOD
      +                          E == MODES)){
 26709  002A9E  0100               	movlb	0	; () banked
 26710  002AA0  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 26711  002AA2  B4D8               	btfsc	status,2,c
 26712  002AA4  D008               	goto	u47580
 26713                           
 26714                           ; BSR set to: 0
 26715  002AA6  0E02               	movlw	2
 26716  002AA8  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26717  002AAA  B4D8               	btfsc	status,2,c
 26718  002AAC  D004               	goto	u47580
 26719                           
 26720                           ; BSR set to: 0
 26721  002AAE  0E03               	movlw	3
 26722  002AB0  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26723  002AB2  A4D8               	btfss	status,2,c
 26724  002AB4  D003               	goto	l1615
 26725  002AB6                     u47580:
 26726                           
 26727                           ; BSR set to: 0
 26728                           ;keyboard.c: 992: add_notes_to_arpeggio(temp_pitch);
 26729                           
 26730                           ; BSR set to: 0
 26731  002AB6  5177               	movf	playThisNote8@temp_pitch& (0+255),w,b
 26732  002AB8  ECF2  F034         	call	_add_notes_to_arpeggio
 26733  002ABC                     l1615:
 26734                           
 26735                           ;keyboard.c: 993: }
 26736                           ;keyboard.c: 996: if(LATCH == 0) {latch_was_pressed = 0;}
 26737  002ABC  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 26738  002ABE  9A03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 26739                           
 26740                           ;keyboard.c: 999: finish_arpeggio_setup();
 26741  002AC0  EC82  F04C         	call	_finish_arpeggio_setup	;wreg free
 26742                           
 26743                           ;keyboard.c: 1002: TMR0ON = 1;
 26744  002AC4  8ED5               	bsf	4053,7,c	;volatile
 26745  002AC6                     l1612:
 26746                           
 26747                           ;keyboard.c: 1003: }
 26748                           ;keyboard.c: 1005: if((ON_OFF == 0) && (LATCH == 0)) {
 26749  002AC6  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26750  002AC8  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 26751  002ACA  D062               	goto	l1619
 26752                           
 26753                           ;keyboard.c: 1008: TMR0ON = 0;
 26754  002ACC  9ED5               	bcf	4053,7,c	;volatile
 26755                           
 26756                           ;keyboard.c: 1011: if(NUM_NOTES_PRESSED > 0){
 26757  002ACE  502F               	movf	_NUM_NOTES_PRESSED,w,c
 26758  002AD0  B4D8               	btfsc	status,2,c
 26759  002AD2  D00A               	goto	l1620
 26760                           
 26761                           ;keyboard.c: 1012: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 26762  002AD4  0E00               	movlw	0
 26763  002AD6  B003               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 26764  002AD8  0E01               	movlw	1
 26765  002ADA  ECED  F04B         	call	_wait_one_pulse
 26766                           
 26767                           ;keyboard.c: 1013: if(note_off_was_sent == 0) {key_press_release_note_off();}
 26768  002ADE  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 26769  002AE0  EC8B  F02E         	call	_key_press_release_note_off	;wreg free
 26770                           
 26771                           ;keyboard.c: 1014: TIMER_OVERFLOWS = 0;
 26772  002AE4  0E00               	movlw	0
 26773  002AE6  6E2E               	movwf	_TIMER_OVERFLOWS,c
 26774  002AE8                     l1620:
 26775                           
 26776                           ;keyboard.c: 1015: }
 26777                           ;keyboard.c: 1018: if((KEYBOARD_MODE == MAJOR) | (KEYBOARD_MODE == MINOR) | (KEYBOARD_MO
      +                          DE == MODES)){
 26778  002AE8  0100               	movlb	0	; () banked
 26779  002AEA  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 26780  002AEC  B4D8               	btfsc	status,2,c
 26781  002AEE  D008               	goto	u47660
 26782                           
 26783                           ; BSR set to: 0
 26784  002AF0  0E02               	movlw	2
 26785  002AF2  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26786  002AF4  B4D8               	btfsc	status,2,c
 26787  002AF6  D004               	goto	u47660
 26788                           
 26789                           ; BSR set to: 0
 26790  002AF8  0E03               	movlw	3
 26791  002AFA  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26792  002AFC  A4D8               	btfss	status,2,c
 26793  002AFE  D003               	goto	l1622
 26794  002B00                     u47660:
 26795                           
 26796                           ; BSR set to: 0
 26797                           ;keyboard.c: 1019: delete_notes_from_arpeggio(temp_pitch);
 26798                           
 26799                           ; BSR set to: 0
 26800  002B00  5177               	movf	playThisNote8@temp_pitch& (0+255),w,b
 26801  002B02  EC5A  F04B         	call	_delete_notes_from_arpeggio
 26802  002B06                     l1622:
 26803                           
 26804                           ;keyboard.c: 1020: }
 26805                           ;keyboard.c: 1022: if(temp_pitch == parallel){NUM_NOTES_PRESSED = 0;}
 26806  002B06  C030  F072         	movff	_parallel,??_playThisNote8
 26807  002B0A  0100               	movlb	0	; () banked
 26808  002B0C  6B73               	clrf	(??_playThisNote8+1)& (0+255),b
 26809  002B0E  BF72               	btfsc	??_playThisNote8& (0+255),7,b
 26810  002B10  0773               	decf	(??_playThisNote8+1)& (0+255),f,b
 26811  002B12  5177               	movf	playThisNote8@temp_pitch& (0+255),w,b
 26812  002B14  6F74               	movwf	(??_playThisNote8+2)& (0+255),b
 26813  002B16  6B75               	clrf	(??_playThisNote8+3)& (0+255),b
 26814  002B18  5172               	movf	??_playThisNote8& (0+255),w,b
 26815  002B1A  1974               	xorwf	(??_playThisNote8+2)& (0+255),w,b
 26816  002B1C  E106               	bnz	l27305
 26817  002B1E  5173               	movf	(??_playThisNote8+1)& (0+255),w,b
 26818  002B20  1975               	xorwf	(??_playThisNote8+3)& (0+255),w,b
 26819  002B22  A4D8               	btfss	status,2,c
 26820  002B24  D002               	goto	l1625
 26821                           
 26822                           ; BSR set to: 0
 26823  002B26  0E00               	movlw	0
 26824  002B28  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 26825  002B2A                     l1625:
 26826  002B2A                     l27305:
 26827                           
 26828                           ; BSR set to: 0
 26829                           ;keyboard.c: 1027: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 26830  002B2A  BC03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 26831                           
 26832                           ; BSR set to: 0
 26833  002B2C  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 26834  002B2E  D001               	goto	l1626
 26835                           
 26836                           ; BSR set to: 0
 26837                           ;keyboard.c: 1028: LATCH = 1;
 26838  002B30  8004               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 26839  002B32                     l1626:
 26840                           
 26841                           ; BSR set to: 0
 26842                           ;keyboard.c: 1029: }
 26843                           ;keyboard.c: 1034: if(((KEYBOARD_MODE == MAJOR) | (KEYBOARD_MODE == MINOR) | (KEYBOARD_M
      +                          ODE == MODES)) && (UN_LATCH_MODE == 0) && (latch_was_pressed == 1)){
 26844                           
 26845                           ; BSR set to: 0
 26846  002B32  05F2               	decf	_KEYBOARD_MODE& (0+255),w,b
 26847  002B34  B4D8               	btfsc	status,2,c
 26848  002B36  D008               	goto	u47720
 26849                           
 26850                           ; BSR set to: 0
 26851  002B38  0E02               	movlw	2
 26852  002B3A  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26853  002B3C  B4D8               	btfsc	status,2,c
 26854  002B3E  D004               	goto	u47720
 26855                           
 26856                           ; BSR set to: 0
 26857  002B40  0E03               	movlw	3
 26858  002B42  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26859  002B44  A4D8               	btfss	status,2,c
 26860  002B46  D007               	goto	l1627
 26861  002B48                     u47720:
 26862                           
 26863                           ; BSR set to: 0
 26864  002B48  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 26865                           
 26866                           ; BSR set to: 0
 26867  002B4A  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 26868  002B4C  D004               	goto	l1627
 26869                           
 26870                           ; BSR set to: 0
 26871                           ;keyboard.c: 1035: NUM_NOTES_PRESSED = 0;
 26872  002B4E  0E00               	movlw	0
 26873  002B50  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 26874                           
 26875                           ;keyboard.c: 1036: ARRAY_INDEX = 0;
 26876  002B52  0E00               	movlw	0
 26877  002B54  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 26878  002B56                     l1627:
 26879                           
 26880                           ; BSR set to: 0
 26881                           ;keyboard.c: 1037: }
 26882                           ;keyboard.c: 1040: if((KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) | (KEYBOARD_MODE == DIATON
      +                          IC_TRIAD_MINOR) | (KEYBOARD_MODE == DIATONIC_7TH_MAJOR) |(KEYBOARD_MODE == DIATONIC_7TH_
      +                          MINOR) && ((UN_LATCH_MODE == 0) || (UN_LATCH_MODE == 1)) && (latch_was_pressed == 1)){
 26883                           
 26884                           ; BSR set to: 0
 26885  002B56  0E07               	movlw	7
 26886  002B58  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26887  002B5A  B4D8               	btfsc	status,2,c
 26888  002B5C  D00C               	goto	u47780
 26889                           
 26890                           ; BSR set to: 0
 26891  002B5E  0E08               	movlw	8
 26892  002B60  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26893  002B62  B4D8               	btfsc	status,2,c
 26894  002B64  D008               	goto	u47780
 26895                           
 26896                           ; BSR set to: 0
 26897  002B66  0E0A               	movlw	10
 26898  002B68  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26899  002B6A  B4D8               	btfsc	status,2,c
 26900  002B6C  D004               	goto	u47780
 26901                           
 26902                           ; BSR set to: 0
 26903  002B6E  0E0B               	movlw	11
 26904  002B70  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26905  002B72  A4D8               	btfss	status,2,c
 26906  002B74  D00A               	goto	l1630
 26907  002B76                     u47780:
 26908                           
 26909                           ; BSR set to: 0
 26910  002B76  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 26911  002B78  D002               	goto	u47800
 26912                           
 26913                           ; BSR set to: 0
 26914  002B7A  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 26915  002B7C  D006               	goto	l1630
 26916  002B7E                     u47800:
 26917                           
 26918                           ; BSR set to: 0
 26919  002B7E  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 26920  002B80  D004               	goto	l1630
 26921                           
 26922                           ; BSR set to: 0
 26923                           ;keyboard.c: 1041: NUM_NOTES_PRESSED = 0;
 26924  002B82  0E00               	movlw	0
 26925  002B84  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 26926                           
 26927                           ;keyboard.c: 1042: ARRAY_INDEX = 0;
 26928  002B86  0E00               	movlw	0
 26929  002B88  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 26930  002B8A                     l1630:
 26931                           
 26932                           ; BSR set to: 0
 26933                           ;keyboard.c: 1043: }
 26934                           ;keyboard.c: 1046: finish_arpeggio_setup();
 26935                           
 26936                           ; BSR set to: 0
 26937  002B8A  EC82  F04C         	call	_finish_arpeggio_setup	;wreg free
 26938                           
 26939                           ;keyboard.c: 1049: TMR0ON = 1;
 26940  002B8E  8ED5               	bsf	4053,7,c	;volatile
 26941  002B90                     l1619:
 26942                           
 26943                           ;keyboard.c: 1050: }
 26944                           ;keyboard.c: 1051: }
 26945                           ;keyboard.c: 1053: if(KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) {
 26946  002B90  0E07               	movlw	7
 26947  002B92  0100               	movlb	0	; () banked
 26948  002B94  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26949  002B96  A4D8               	btfss	status,2,c
 26950  002B98  D005               	goto	l1635
 26951                           
 26952                           ; BSR set to: 0
 26953                           ;keyboard.c: 1054: playDiatonicTriadMajor(pitch, index);
 26954  002B9A  C071  F061         	movff	playThisNote8@index,playDiatonicTriadMajor@index
 26955  002B9E  5176               	movf	playThisNote8@pitch& (0+255),w,b
 26956  002BA0  EC01  F02D         	call	_playDiatonicTriadMajor
 26957  002BA4                     l1635:
 26958                           
 26959                           ;keyboard.c: 1055: }
 26960                           ;keyboard.c: 1056: if(KEYBOARD_MODE == DIATONIC_TRIAD_MINOR) {
 26961  002BA4  0E08               	movlw	8
 26962  002BA6  0100               	movlb	0	; () banked
 26963  002BA8  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26964  002BAA  A4D8               	btfss	status,2,c
 26965  002BAC  D005               	goto	l1636
 26966                           
 26967                           ; BSR set to: 0
 26968                           ;keyboard.c: 1057: playDiatonicTriadMinor(pitch, index);
 26969  002BAE  C071  F061         	movff	playThisNote8@index,playDiatonicTriadMinor@index
 26970  002BB2  5176               	movf	playThisNote8@pitch& (0+255),w,b
 26971  002BB4  EC76  F023         	call	_playDiatonicTriadMinor
 26972  002BB8                     l1636:
 26973                           
 26974                           ;keyboard.c: 1058: }
 26975                           ;keyboard.c: 1059: if(KEYBOARD_MODE == DIATONIC_7TH_MAJOR) {
 26976  002BB8  0E0A               	movlw	10
 26977  002BBA  0100               	movlb	0	; () banked
 26978  002BBC  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26979  002BBE  A4D8               	btfss	status,2,c
 26980  002BC0  D005               	goto	l1637
 26981                           
 26982                           ; BSR set to: 0
 26983                           ;keyboard.c: 1060: playDiatonicSeventhMajor(pitch, index);
 26984  002BC2  C071  F061         	movff	playThisNote8@index,playDiatonicSeventhMajor@index
 26985  002BC6  5176               	movf	playThisNote8@pitch& (0+255),w,b
 26986  002BC8  EC6F  F02B         	call	_playDiatonicSeventhMajor
 26987  002BCC                     l1637:
 26988                           
 26989                           ;keyboard.c: 1061: }
 26990                           ;keyboard.c: 1062: if(KEYBOARD_MODE == DIATONIC_7TH_MINOR) {
 26991  002BCC  0E0B               	movlw	11
 26992  002BCE  0100               	movlb	0	; () banked
 26993  002BD0  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26994  002BD2  A4D8               	btfss	status,2,c
 26995  002BD4  0012               	return	
 26996                           
 26997                           ; BSR set to: 0
 26998                           ;keyboard.c: 1063: playDiatonicSeventhMinor(pitch, index);
 26999  002BD6  C071  F061         	movff	playThisNote8@index,playDiatonicSeventhMinor@index
 27000  002BDA  5176               	movf	playThisNote8@pitch& (0+255),w,b
 27001  002BDC  ECA7  F024         	call	_playDiatonicSeventhMinor
 27002  002BE0  0012               	return	
 27003  002BE2                     __end_of_playThisNote8:
 27004                           	opt stack 0
 27005                           tblptru	equ	0xFF8
 27006                           tblptrh	equ	0xFF7
 27007                           tblptrl	equ	0xFF6
 27008                           tablat	equ	0xFF5
 27009                           prodh	equ	0xFF4
 27010                           prodl	equ	0xFF3
 27011                           intcon	equ	0xFF2
 27012                           intcon2	equ	0xFF1
 27013                           postinc0	equ	0xFEE
 27014                           wreg	equ	0xFE8
 27015                           postinc1	equ	0xFE6
 27016                           plusw1	equ	0xFE3
 27017                           fsr1h	equ	0xFE2
 27018                           fsr1l	equ	0xFE1
 27019                           indf2	equ	0xFDF
 27020                           postinc2	equ	0xFDE
 27021                           postdec2	equ	0xFDD
 27022                           plusw2	equ	0xFDB
 27023                           fsr2h	equ	0xFDA
 27024                           fsr2l	equ	0xFD9
 27025                           status	equ	0xFD8
 27026                           
 27027 ;; *************** function _playDiatonicTriadMinor *****************
 27028 ;; Defined at:
 27029 ;;		line 1207 in file "keyboard.c"
 27030 ;; Parameters:    Size  Location     Type
 27031 ;;  pitch           1    wreg     unsigned char 
 27032 ;;  index           1    1[BANK0 ] unsigned char 
 27033 ;; Auto vars:     Size  Location     Type
 27034 ;;  pitch           1    6[BANK0 ] unsigned char 
 27035 ;;  i               1    8[BANK0 ] unsigned char 
 27036 ;;  i               1    7[BANK0 ] unsigned char 
 27037 ;; Return value:  Size  Location     Type
 27038 ;;                  1    wreg      void 
 27039 ;; Registers used:
 27040 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27041 ;; Tracked objects:
 27042 ;;		On entry : 0/0
 27043 ;;		On exit  : 0/0
 27044 ;;		Unchanged: 0/0
 27045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 27046 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27047 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27048 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27049 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27050 ;;Total ram usage:        8 bytes
 27051 ;; Hardware stack levels used:    1
 27052 ;; Hardware stack levels required when called:   10
 27053 ;; This function calls:
 27054 ;;		_finish_arpeggio_setup
 27055 ;;		_key_press_release_note_off
 27056 ;;		_noteOff
 27057 ;;		_noteOn
 27058 ;;		_wait_one_pulse
 27059 ;; This function is called by:
 27060 ;;		_playThisNote8
 27061 ;; This function uses a non-reentrant model
 27062 ;;
 27063                           
 27064                           	psect	text73
 27065  0046EC                     __ptext73:
 27066                           	opt stack 0
 27067  0046EC                     _playDiatonicTriadMinor:
 27068                           	opt stack 13
 27069                           
 27070                           ;incstack = 0
 27071                           ;playDiatonicTriadMinor@pitch stored from wreg
 27072  0046EC  0100               	movlb	0	; () banked
 27073  0046EE  6F66               	movwf	playDiatonicTriadMinor@pitch& (0+255),b
 27074                           
 27075                           ;keyboard.c: 1210: if(ARPEGGIO_ON == 0){
 27076  0046F0  B604               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 27077  0046F2  D08F               	goto	u46160
 27078                           
 27079                           ;keyboard.c: 1211: for(unsigned char i = 0; i<3; i++){
 27080  0046F4  0E00               	movlw	0
 27081  0046F6  0100               	movlb	0	; () banked
 27082  0046F8  6F67               	movwf	playDiatonicTriadMinor@i& (0+255),b
 27083  0046FA                     l26655:
 27084                           
 27085                           ; BSR set to: 0
 27086  0046FA  0E02               	movlw	2
 27087  0046FC  6567               	cpfsgt	playDiatonicTriadMinor@i& (0+255),b
 27088  0046FE  D001               	goto	l1689
 27089  004700  D088               	goto	u46160
 27090  004702                     l1689:
 27091                           
 27092                           ; BSR set to: 0
 27093                           ;keyboard.c: 1212: if(i==0){
 27094                           
 27095                           ; BSR set to: 0
 27096  004702  5167               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 27097  004704  A4D8               	btfss	status,2,c
 27098  004706  D027               	goto	l1693
 27099                           
 27100                           ; BSR set to: 0
 27101                           ;keyboard.c: 1213: if(ON_OFF == 1) {noteOn(channel,diatonic_minor[index][0],velocity);}
 27102  004708  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27103  00470A  D011               	goto	l1692
 27104                           
 27105                           ; BSR set to: 0
 27106  00470C  5051               	movf	_velocity,w,c
 27107  00470E  6EE6               	movwf	postinc1,c
 27108  004710  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27109  004712  0D03               	mullw	3
 27110  004714  0EE3               	movlw	low _diatonic_minor
 27111  004716  24F3               	addwf	prodl,w,c
 27112  004718  6EF6               	movwf	tblptrl,c
 27113  00471A  0EF2               	movlw	high _diatonic_minor
 27114  00471C  20F4               	addwfc	prodh,w,c
 27115  00471E  6EF7               	movwf	tblptrh,c
 27116  004720                     	if	0	;There are less than 3 active tblptr bytes
 27117  004720                     	endif
 27118  004720  0008               	tblrd		*
 27119  004722  50F5               	movf	tablat,w,c
 27120  004724  6EE6               	movwf	postinc1,c
 27121  004726  503E               	movf	_channel,w,c
 27122  004728  6EE6               	movwf	postinc1,c
 27123  00472A  EC93  F045         	call	_noteOn	;wreg free
 27124  00472E                     l1692:
 27125                           
 27126                           ;keyboard.c: 1214: if(ON_OFF == 0) {noteOff(channel,diatonic_minor[index][0],velocity);}
 27127  00472E  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27128  004730  D012               	goto	l1693
 27129  004732  5051               	movf	_velocity,w,c
 27130  004734  6EE6               	movwf	postinc1,c
 27131  004736  0100               	movlb	0	; () banked
 27132  004738  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27133  00473A  0D03               	mullw	3
 27134  00473C  0EE3               	movlw	low _diatonic_minor
 27135  00473E  24F3               	addwf	prodl,w,c
 27136  004740  6EF6               	movwf	tblptrl,c
 27137  004742  0EF2               	movlw	high _diatonic_minor
 27138  004744  20F4               	addwfc	prodh,w,c
 27139  004746  6EF7               	movwf	tblptrh,c
 27140  004748                     	if	0	;There are less than 3 active tblptr bytes
 27141  004748                     	endif
 27142  004748  0008               	tblrd		*
 27143  00474A  50F5               	movf	tablat,w,c
 27144  00474C  6EE6               	movwf	postinc1,c
 27145  00474E  503E               	movf	_channel,w,c
 27146  004750  6EE6               	movwf	postinc1,c
 27147  004752  EC48  F04A         	call	_noteOff	;wreg free
 27148  004756                     l1693:
 27149                           
 27150                           ;keyboard.c: 1215: }
 27151                           ;keyboard.c: 1216: if(i>0){
 27152  004756  0100               	movlb	0	; () banked
 27153  004758  5167               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 27154  00475A  B4D8               	btfsc	status,2,c
 27155  00475C  D057               	goto	l1696
 27156                           
 27157                           ; BSR set to: 0
 27158                           ;keyboard.c: 1217: if(ON_OFF == 1) noteOn(channel,diatonic_minor[index][0] + diatonic_mi
      +                          nor[index][i],velocity);
 27159  00475E  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27160  004760  D029               	goto	l1695
 27161                           
 27162                           ; BSR set to: 0
 27163  004762  5051               	movf	_velocity,w,c
 27164  004764  6EE6               	movwf	postinc1,c
 27165  004766  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27166  004768  0D03               	mullw	3
 27167  00476A  0EE3               	movlw	low _diatonic_minor
 27168  00476C  6F62               	movwf	??_playDiatonicTriadMinor& (0+255),b
 27169  00476E  0EF2               	movlw	high _diatonic_minor
 27170  004770  6F63               	movwf	(??_playDiatonicTriadMinor+1)& (0+255),b
 27171  004772  50F3               	movf	prodl,w,c
 27172  004774  2762               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 27173  004776  50F4               	movf	prodh,w,c
 27174  004778  2363               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27175  00477A  5167               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 27176  00477C  0D01               	mullw	1
 27177  00477E  50F3               	movf	prodl,w,c
 27178  004780  2762               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 27179  004782  50F4               	movf	prodh,w,c
 27180  004784  2363               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27181  004786  C062  FFF6         	movff	??_playDiatonicTriadMinor,tblptrl
 27182  00478A  C063  FFF7         	movff	??_playDiatonicTriadMinor+1,tblptrh
 27183  00478E                     	if	0	;tblptru may be non-zero
 27184  00478E                     	endif
 27185  00478E                     	if	0	;tblptru may be non-zero
 27186  00478E                     	endif
 27187  00478E  0008               	tblrd		*
 27188  004790  CFF5 F064          	movff	tablat,??_playDiatonicTriadMinor+2
 27189  004794  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27190  004796  0D03               	mullw	3
 27191  004798  0EE3               	movlw	low _diatonic_minor
 27192  00479A  24F3               	addwf	prodl,w,c
 27193  00479C  6EF6               	movwf	tblptrl,c
 27194  00479E  0EF2               	movlw	high _diatonic_minor
 27195  0047A0  20F4               	addwfc	prodh,w,c
 27196  0047A2  6EF7               	movwf	tblptrh,c
 27197  0047A4                     	if	0	;There are less than 3 active tblptr bytes
 27198  0047A4                     	endif
 27199  0047A4  0008               	tblrd		*
 27200  0047A6  50F5               	movf	tablat,w,c
 27201  0047A8  2564               	addwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 27202  0047AA  6EE6               	movwf	postinc1,c
 27203  0047AC  503E               	movf	_channel,w,c
 27204  0047AE  6EE6               	movwf	postinc1,c
 27205  0047B0  EC93  F045         	call	_noteOn	;wreg free
 27206  0047B4                     l1695:
 27207                           
 27208                           ;keyboard.c: 1218: if(ON_OFF == 0) noteOff(channel,diatonic_minor[index][0] + diatonic_m
      +                          inor[index][i],velocity);
 27209  0047B4  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27210  0047B6  D02A               	goto	l1696
 27211  0047B8  5051               	movf	_velocity,w,c
 27212  0047BA  6EE6               	movwf	postinc1,c
 27213  0047BC  0100               	movlb	0	; () banked
 27214  0047BE  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27215  0047C0  0D03               	mullw	3
 27216  0047C2  0EE3               	movlw	low _diatonic_minor
 27217  0047C4  6F62               	movwf	??_playDiatonicTriadMinor& (0+255),b
 27218  0047C6  0EF2               	movlw	high _diatonic_minor
 27219  0047C8  6F63               	movwf	(??_playDiatonicTriadMinor+1)& (0+255),b
 27220  0047CA  50F3               	movf	prodl,w,c
 27221  0047CC  2762               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 27222  0047CE  50F4               	movf	prodh,w,c
 27223  0047D0  2363               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27224  0047D2  5167               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 27225  0047D4  0D01               	mullw	1
 27226  0047D6  50F3               	movf	prodl,w,c
 27227  0047D8  2762               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 27228  0047DA  50F4               	movf	prodh,w,c
 27229  0047DC  2363               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27230  0047DE  C062  FFF6         	movff	??_playDiatonicTriadMinor,tblptrl
 27231  0047E2  C063  FFF7         	movff	??_playDiatonicTriadMinor+1,tblptrh
 27232  0047E6                     	if	0	;tblptru may be non-zero
 27233  0047E6                     	endif
 27234  0047E6                     	if	0	;tblptru may be non-zero
 27235  0047E6                     	endif
 27236  0047E6  0008               	tblrd		*
 27237  0047E8  CFF5 F064          	movff	tablat,??_playDiatonicTriadMinor+2
 27238  0047EC  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27239  0047EE  0D03               	mullw	3
 27240  0047F0  0EE3               	movlw	low _diatonic_minor
 27241  0047F2  24F3               	addwf	prodl,w,c
 27242  0047F4  6EF6               	movwf	tblptrl,c
 27243  0047F6  0EF2               	movlw	high _diatonic_minor
 27244  0047F8  20F4               	addwfc	prodh,w,c
 27245  0047FA  6EF7               	movwf	tblptrh,c
 27246  0047FC                     	if	0	;There are less than 3 active tblptr bytes
 27247  0047FC                     	endif
 27248  0047FC  0008               	tblrd		*
 27249  0047FE  50F5               	movf	tablat,w,c
 27250  004800  2564               	addwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 27251  004802  6EE6               	movwf	postinc1,c
 27252  004804  503E               	movf	_channel,w,c
 27253  004806  6EE6               	movwf	postinc1,c
 27254  004808  EC48  F04A         	call	_noteOff	;wreg free
 27255  00480C                     l1696:
 27256  00480C  0100               	movlb	0	; () banked
 27257  00480E  2B67               	incf	playDiatonicTriadMinor@i& (0+255),f,b
 27258  004810  D774               	goto	l26655
 27259  004812                     u46160:
 27260                           
 27261                           ;keyboard.c: 1219: }
 27262                           ;keyboard.c: 1220: }
 27263                           ;keyboard.c: 1221: }
 27264                           ;keyboard.c: 1224: if(ARPEGGIO_ON == 1){
 27265                           
 27266                           ; BSR set to: 0
 27267  004812  A604               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 27268  004814  0012               	return	
 27269                           
 27270                           ;keyboard.c: 1225: if(ON_OFF == 1) {
 27271  004816  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27272  004818  D065               	goto	l1698
 27273                           
 27274                           ;keyboard.c: 1227: TMR0ON = 0;
 27275  00481A  9ED5               	bcf	4053,7,c	;volatile
 27276                           
 27277                           ;keyboard.c: 1229: parallel = pitch;
 27278  00481C  C066  F030         	movff	playDiatonicTriadMinor@pitch,_parallel
 27279                           
 27280                           ;keyboard.c: 1232: if(NUM_NOTES_PRESSED > 0){
 27281  004820  502F               	movf	_NUM_NOTES_PRESSED,w,c
 27282  004822  B4D8               	btfsc	status,2,c
 27283  004824  D00A               	goto	l1699
 27284                           
 27285                           ;keyboard.c: 1233: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 27286  004826  0E00               	movlw	0
 27287  004828  B203               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 27288  00482A  0E01               	movlw	1
 27289  00482C  ECED  F04B         	call	_wait_one_pulse
 27290                           
 27291                           ;keyboard.c: 1234: if(note_off_was_sent == 0) {key_press_release_note_off();}
 27292  004830  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 27293  004832  EC8B  F02E         	call	_key_press_release_note_off	;wreg free
 27294                           
 27295                           ;keyboard.c: 1235: TIMER_OVERFLOWS = 0;
 27296  004836  0E00               	movlw	0
 27297  004838  6E2E               	movwf	_TIMER_OVERFLOWS,c
 27298  00483A                     l1699:
 27299                           
 27300                           ;keyboard.c: 1236: }
 27301                           ;keyboard.c: 1238: for(unsigned char i = 0; i<3; i++){
 27302  00483A  0E00               	movlw	0
 27303  00483C  0100               	movlb	0	; () banked
 27304  00483E  6F68               	movwf	playDiatonicTriadMinor@i_1723& (0+255),b
 27305  004840                     l26699:
 27306                           
 27307                           ; BSR set to: 0
 27308  004840  0E02               	movlw	2
 27309  004842  6568               	cpfsgt	playDiatonicTriadMinor@i_1723& (0+255),b
 27310  004844  D001               	goto	l1701
 27311  004846  D046               	goto	u46240
 27312  004848                     l1701:
 27313                           
 27314                           ; BSR set to: 0
 27315                           ;keyboard.c: 1239: if(i==0){ARPEGGIO[i] = diatonic_minor[index][0];}
 27316                           
 27317                           ; BSR set to: 0
 27318  004848  5168               	movf	playDiatonicTriadMinor@i_1723& (0+255),w,b
 27319  00484A  A4D8               	btfss	status,2,c
 27320  00484C  D013               	goto	l1703
 27321                           
 27322                           ; BSR set to: 0
 27323  00484E  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27324  004850  0D03               	mullw	3
 27325  004852  0EE3               	movlw	low _diatonic_minor
 27326  004854  24F3               	addwf	prodl,w,c
 27327  004856  6EF6               	movwf	tblptrl,c
 27328  004858  0EF2               	movlw	high _diatonic_minor
 27329  00485A  20F4               	addwfc	prodh,w,c
 27330  00485C  6EF7               	movwf	tblptrh,c
 27331  00485E                     	if	0	;There are less than 3 active tblptr bytes
 27332  00485E                     	endif
 27333  00485E  5168               	movf	playDiatonicTriadMinor@i_1723& (0+255),w,b
 27334  004860  0D01               	mullw	1
 27335  004862  0E82               	movlw	low _ARPEGGIO
 27336  004864  24F3               	addwf	prodl,w,c
 27337  004866  6ED9               	movwf	fsr2l,c
 27338  004868  0E01               	movlw	high _ARPEGGIO
 27339  00486A  20F4               	addwfc	prodh,w,c
 27340  00486C  6EDA               	movwf	fsr2h,c
 27341  00486E  0008               	tblrd		*
 27342  004870  CFF5 FFDF          	movff	tablat,indf2
 27343  004874                     l1703:
 27344                           
 27345                           ; BSR set to: 0
 27346                           ;keyboard.c: 1240: if(i>0){ARPEGGIO[i] = diatonic_minor[index][0] + diatonic_minor[index
      +                          ][i];}
 27347                           
 27348                           ; BSR set to: 0
 27349  004874  5168               	movf	playDiatonicTriadMinor@i_1723& (0+255),w,b
 27350  004876  B4D8               	btfsc	status,2,c
 27351  004878  D02B               	goto	l1704
 27352                           
 27353                           ; BSR set to: 0
 27354  00487A  5168               	movf	playDiatonicTriadMinor@i_1723& (0+255),w,b
 27355  00487C  0D01               	mullw	1
 27356  00487E  0E82               	movlw	low _ARPEGGIO
 27357  004880  24F3               	addwf	prodl,w,c
 27358  004882  6ED9               	movwf	fsr2l,c
 27359  004884  0E01               	movlw	high _ARPEGGIO
 27360  004886  20F4               	addwfc	prodh,w,c
 27361  004888  6EDA               	movwf	fsr2h,c
 27362  00488A  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27363  00488C  0D03               	mullw	3
 27364  00488E  0EE3               	movlw	low _diatonic_minor
 27365  004890  6F62               	movwf	??_playDiatonicTriadMinor& (0+255),b
 27366  004892  0EF2               	movlw	high _diatonic_minor
 27367  004894  6F63               	movwf	(??_playDiatonicTriadMinor+1)& (0+255),b
 27368  004896  50F3               	movf	prodl,w,c
 27369  004898  2762               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 27370  00489A  50F4               	movf	prodh,w,c
 27371  00489C  2363               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27372  00489E  5168               	movf	playDiatonicTriadMinor@i_1723& (0+255),w,b
 27373  0048A0  0D01               	mullw	1
 27374  0048A2  50F3               	movf	prodl,w,c
 27375  0048A4  2762               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 27376  0048A6  50F4               	movf	prodh,w,c
 27377  0048A8  2363               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27378  0048AA  C062  FFF6         	movff	??_playDiatonicTriadMinor,tblptrl
 27379  0048AE  C063  FFF7         	movff	??_playDiatonicTriadMinor+1,tblptrh
 27380  0048B2                     	if	0	;tblptru may be non-zero
 27381  0048B2                     	endif
 27382  0048B2                     	if	0	;tblptru may be non-zero
 27383  0048B2                     	endif
 27384  0048B2  0008               	tblrd		*
 27385  0048B4  CFF5 F064          	movff	tablat,??_playDiatonicTriadMinor+2
 27386  0048B8  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27387  0048BA  0D03               	mullw	3
 27388  0048BC  0EE3               	movlw	low _diatonic_minor
 27389  0048BE  24F3               	addwf	prodl,w,c
 27390  0048C0  6EF6               	movwf	tblptrl,c
 27391  0048C2  0EF2               	movlw	high _diatonic_minor
 27392  0048C4  20F4               	addwfc	prodh,w,c
 27393  0048C6  6EF7               	movwf	tblptrh,c
 27394  0048C8                     	if	0	;There are less than 3 active tblptr bytes
 27395  0048C8                     	endif
 27396  0048C8  0008               	tblrd		*
 27397  0048CA  50F5               	movf	tablat,w,c
 27398  0048CC  2564               	addwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 27399  0048CE  6EDF               	movwf	indf2,c
 27400  0048D0                     l1704:
 27401                           
 27402                           ; BSR set to: 0
 27403                           
 27404                           ; BSR set to: 0
 27405  0048D0  2B68               	incf	playDiatonicTriadMinor@i_1723& (0+255),f,b
 27406  0048D2  D7B6               	goto	l26699
 27407  0048D4                     u46240:
 27408                           
 27409                           ; BSR set to: 0
 27410                           ;keyboard.c: 1241: }
 27411                           ;keyboard.c: 1243: NUM_NOTES_PRESSED = 3;
 27412                           
 27413                           ; BSR set to: 0
 27414  0048D4  0E03               	movlw	3
 27415  0048D6  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 27416                           
 27417                           ; BSR set to: 0
 27418                           ;keyboard.c: 1246: if(LATCH == 0) {latch_was_pressed = 0;}
 27419  0048D8  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 27420                           
 27421                           ; BSR set to: 0
 27422  0048DA  9A03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27423                           
 27424                           ; BSR set to: 0
 27425                           ;keyboard.c: 1249: finish_arpeggio_setup();
 27426                           
 27427                           ; BSR set to: 0
 27428  0048DC  EC82  F04C         	call	_finish_arpeggio_setup	;wreg free
 27429                           
 27430                           ;keyboard.c: 1251: TMR0ON = 1;
 27431  0048E0  8ED5               	bsf	4053,7,c	;volatile
 27432                           
 27433                           ;keyboard.c: 1253: return;
 27434  0048E2  0012               	return	
 27435  0048E4                     l1698:
 27436                           
 27437                           ;keyboard.c: 1254: }
 27438                           ;keyboard.c: 1256: if((ON_OFF == 0) && (LATCH == 0)) {
 27439  0048E4  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27440  0048E6  0012               	return	
 27441  0048E8  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 27442  0048EA  0012               	return	
 27443                           
 27444                           ;keyboard.c: 1258: if(NUM_NOTES_PRESSED > 0){
 27445  0048EC  502F               	movf	_NUM_NOTES_PRESSED,w,c
 27446  0048EE  B4D8               	btfsc	status,2,c
 27447  0048F0  D00A               	goto	l1708
 27448                           
 27449                           ;keyboard.c: 1259: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 27450  0048F2  0E00               	movlw	0
 27451  0048F4  B003               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 27452  0048F6  0E01               	movlw	1
 27453  0048F8  ECED  F04B         	call	_wait_one_pulse
 27454                           
 27455                           ;keyboard.c: 1260: if(note_off_was_sent == 0) {key_press_release_note_off();}
 27456  0048FC  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 27457  0048FE  EC8B  F02E         	call	_key_press_release_note_off	;wreg free
 27458                           
 27459                           ;keyboard.c: 1261: TIMER_OVERFLOWS = 0;
 27460  004902  0E00               	movlw	0
 27461  004904  6E2E               	movwf	_TIMER_OVERFLOWS,c
 27462  004906                     l1708:
 27463                           
 27464                           ;keyboard.c: 1262: }
 27465                           ;keyboard.c: 1264: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 27466  004906  C030  F062         	movff	_parallel,??_playDiatonicTriadMinor
 27467  00490A  0100               	movlb	0	; () banked
 27468  00490C  6B63               	clrf	(??_playDiatonicTriadMinor+1)& (0+255),b
 27469  00490E  BF62               	btfsc	??_playDiatonicTriadMinor& (0+255),7,b
 27470  004910  0763               	decf	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27471  004912  5166               	movf	playDiatonicTriadMinor@pitch& (0+255),w,b
 27472  004914  6F64               	movwf	(??_playDiatonicTriadMinor+2)& (0+255),b
 27473  004916  6B65               	clrf	(??_playDiatonicTriadMinor+3)& (0+255),b
 27474  004918  5162               	movf	??_playDiatonicTriadMinor& (0+255),w,b
 27475  00491A  1964               	xorwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 27476  00491C  E106               	bnz	l26743
 27477  00491E  5163               	movf	(??_playDiatonicTriadMinor+1)& (0+255),w,b
 27478  004920  1965               	xorwf	(??_playDiatonicTriadMinor+3)& (0+255),w,b
 27479  004922  A4D8               	btfss	status,2,c
 27480  004924  D002               	goto	l1710
 27481                           
 27482                           ; BSR set to: 0
 27483  004926  0E00               	movlw	0
 27484  004928  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 27485  00492A                     l1710:
 27486  00492A                     l26743:
 27487                           
 27488                           ; BSR set to: 0
 27489                           ;keyboard.c: 1266: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 27490  00492A  BC03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 27491                           
 27492                           ; BSR set to: 0
 27493  00492C  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27494  00492E  D001               	goto	l1711
 27495                           
 27496                           ; BSR set to: 0
 27497                           ;keyboard.c: 1267: LATCH = 1;
 27498  004930  8004               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 27499  004932                     l1711:
 27500                           
 27501                           ; BSR set to: 0
 27502                           ;keyboard.c: 1268: }
 27503                           ;keyboard.c: 1271: if(((UN_LATCH_MODE == 0) | (UN_LATCH_MODE == 1)) && (latch_was_presse
      +                          d == 1)){
 27504  004932  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 27505  004934  D002               	goto	u46340
 27506                           
 27507                           ; BSR set to: 0
 27508  004936  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 27509  004938  D006               	goto	l1712
 27510  00493A                     u46340:
 27511                           
 27512                           ; BSR set to: 0
 27513  00493A  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27514  00493C  D004               	goto	l1712
 27515                           
 27516                           ; BSR set to: 0
 27517                           ;keyboard.c: 1272: NUM_NOTES_PRESSED = 0;
 27518  00493E  0E00               	movlw	0
 27519  004940  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 27520                           
 27521                           ;keyboard.c: 1273: ARRAY_INDEX = 0;
 27522  004942  0E00               	movlw	0
 27523  004944  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 27524  004946                     l1712:
 27525                           
 27526                           ; BSR set to: 0
 27527                           ;keyboard.c: 1274: }
 27528                           ;keyboard.c: 1277: finish_arpeggio_setup();
 27529                           
 27530                           ; BSR set to: 0
 27531  004946  EC82  F04C         	call	_finish_arpeggio_setup	;wreg free
 27532                           
 27533                           ;keyboard.c: 1278: TMR0ON = 1;
 27534  00494A  8ED5               	bsf	4053,7,c	;volatile
 27535                           
 27536                           ;keyboard.c: 1280: return;
 27537  00494C  0012               	return	
 27538  00494E                     __end_of_playDiatonicTriadMinor:
 27539                           	opt stack 0
 27540                           tblptru	equ	0xFF8
 27541                           tblptrh	equ	0xFF7
 27542                           tblptrl	equ	0xFF6
 27543                           tablat	equ	0xFF5
 27544                           prodh	equ	0xFF4
 27545                           prodl	equ	0xFF3
 27546                           intcon	equ	0xFF2
 27547                           intcon2	equ	0xFF1
 27548                           postinc0	equ	0xFEE
 27549                           wreg	equ	0xFE8
 27550                           postinc1	equ	0xFE6
 27551                           plusw1	equ	0xFE3
 27552                           fsr1h	equ	0xFE2
 27553                           fsr1l	equ	0xFE1
 27554                           indf2	equ	0xFDF
 27555                           postinc2	equ	0xFDE
 27556                           postdec2	equ	0xFDD
 27557                           plusw2	equ	0xFDB
 27558                           fsr2h	equ	0xFDA
 27559                           fsr2l	equ	0xFD9
 27560                           status	equ	0xFD8
 27561                           
 27562 ;; *************** function _playDiatonicTriadMajor *****************
 27563 ;; Defined at:
 27564 ;;		line 1067 in file "keyboard.c"
 27565 ;; Parameters:    Size  Location     Type
 27566 ;;  pitch           1    wreg     unsigned char 
 27567 ;;  index           1    1[BANK0 ] unsigned char 
 27568 ;; Auto vars:     Size  Location     Type
 27569 ;;  pitch           1    8[BANK0 ] unsigned char 
 27570 ;;  i               1    7[BANK0 ] unsigned char 
 27571 ;;  i               1    6[BANK0 ] unsigned char 
 27572 ;; Return value:  Size  Location     Type
 27573 ;;                  1    wreg      void 
 27574 ;; Registers used:
 27575 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27576 ;; Tracked objects:
 27577 ;;		On entry : 0/0
 27578 ;;		On exit  : 0/0
 27579 ;;		Unchanged: 0/0
 27580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 27581 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27582 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27583 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27584 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27585 ;;Total ram usage:        8 bytes
 27586 ;; Hardware stack levels used:    1
 27587 ;; Hardware stack levels required when called:   10
 27588 ;; This function calls:
 27589 ;;		_finish_arpeggio_setup
 27590 ;;		_key_press_release_note_off
 27591 ;;		_noteOff
 27592 ;;		_noteOn
 27593 ;;		_wait_one_pulse
 27594 ;; This function is called by:
 27595 ;;		_playThisNote8
 27596 ;; This function uses a non-reentrant model
 27597 ;;
 27598                           
 27599                           	psect	text74
 27600  005A02                     __ptext74:
 27601                           	opt stack 0
 27602  005A02                     _playDiatonicTriadMajor:
 27603                           	opt stack 13
 27604                           
 27605                           ;incstack = 0
 27606                           ;playDiatonicTriadMajor@pitch stored from wreg
 27607  005A02  0100               	movlb	0	; () banked
 27608  005A04  6F68               	movwf	playDiatonicTriadMajor@pitch& (0+255),b
 27609                           
 27610                           ;keyboard.c: 1070: if(ARPEGGIO_ON == 0){
 27611  005A06  B604               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 27612  005A08  D04B               	goto	u45900
 27613                           
 27614                           ;keyboard.c: 1071: for(unsigned char i = 0; i<3; i++){
 27615  005A0A  0E00               	movlw	0
 27616  005A0C  0100               	movlb	0	; () banked
 27617  005A0E  6F66               	movwf	playDiatonicTriadMajor@i& (0+255),b
 27618  005A10                     l26569:
 27619                           
 27620                           ; BSR set to: 0
 27621  005A10  0E02               	movlw	2
 27622  005A12  6566               	cpfsgt	playDiatonicTriadMajor@i& (0+255),b
 27623  005A14  D001               	goto	l1643
 27624  005A16  D044               	goto	u45900
 27625  005A18                     l1643:
 27626                           
 27627                           ; BSR set to: 0
 27628                           ;keyboard.c: 1072: if(ON_OFF == 1) {noteOn(channel,pitch + diatonic_major[index][i],velo
      +                          city);}
 27629  005A18  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27630  005A1A  D01E               	goto	l1645
 27631                           
 27632                           ; BSR set to: 0
 27633  005A1C  5051               	movf	_velocity,w,c
 27634  005A1E  6EE6               	movwf	postinc1,c
 27635  005A20  5161               	movf	playDiatonicTriadMajor@index& (0+255),w,b
 27636  005A22  0D03               	mullw	3
 27637  005A24  0E10               	movlw	low _diatonic_major
 27638  005A26  6F62               	movwf	??_playDiatonicTriadMajor& (0+255),b
 27639  005A28  0EF3               	movlw	high _diatonic_major
 27640  005A2A  6F63               	movwf	(??_playDiatonicTriadMajor+1)& (0+255),b
 27641  005A2C  50F3               	movf	prodl,w,c
 27642  005A2E  2762               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 27643  005A30  50F4               	movf	prodh,w,c
 27644  005A32  2363               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 27645  005A34  5166               	movf	playDiatonicTriadMajor@i& (0+255),w,b
 27646  005A36  0D01               	mullw	1
 27647  005A38  50F3               	movf	prodl,w,c
 27648  005A3A  2762               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 27649  005A3C  50F4               	movf	prodh,w,c
 27650  005A3E  2363               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 27651  005A40  C062  FFF6         	movff	??_playDiatonicTriadMajor,tblptrl
 27652  005A44  C063  FFF7         	movff	??_playDiatonicTriadMajor+1,tblptrh
 27653  005A48                     	if	0	;tblptru may be non-zero
 27654  005A48                     	endif
 27655  005A48                     	if	0	;tblptru may be non-zero
 27656  005A48                     	endif
 27657  005A48  0008               	tblrd		*
 27658  005A4A  50F5               	movf	tablat,w,c
 27659  005A4C  2568               	addwf	playDiatonicTriadMajor@pitch& (0+255),w,b
 27660  005A4E  6EE6               	movwf	postinc1,c
 27661  005A50  503E               	movf	_channel,w,c
 27662  005A52  6EE6               	movwf	postinc1,c
 27663  005A54  EC93  F045         	call	_noteOn	;wreg free
 27664  005A58                     l1645:
 27665                           
 27666                           ;keyboard.c: 1073: if(ON_OFF == 0) {noteOff(channel,pitch + diatonic_major[index][i],vel
      +                          ocity);}
 27667  005A58  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27668  005A5A  D01F               	goto	l1646
 27669  005A5C  5051               	movf	_velocity,w,c
 27670  005A5E  6EE6               	movwf	postinc1,c
 27671  005A60  0100               	movlb	0	; () banked
 27672  005A62  5161               	movf	playDiatonicTriadMajor@index& (0+255),w,b
 27673  005A64  0D03               	mullw	3
 27674  005A66  0E10               	movlw	low _diatonic_major
 27675  005A68  6F62               	movwf	??_playDiatonicTriadMajor& (0+255),b
 27676  005A6A  0EF3               	movlw	high _diatonic_major
 27677  005A6C  6F63               	movwf	(??_playDiatonicTriadMajor+1)& (0+255),b
 27678  005A6E  50F3               	movf	prodl,w,c
 27679  005A70  2762               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 27680  005A72  50F4               	movf	prodh,w,c
 27681  005A74  2363               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 27682  005A76  5166               	movf	playDiatonicTriadMajor@i& (0+255),w,b
 27683  005A78  0D01               	mullw	1
 27684  005A7A  50F3               	movf	prodl,w,c
 27685  005A7C  2762               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 27686  005A7E  50F4               	movf	prodh,w,c
 27687  005A80  2363               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 27688  005A82  C062  FFF6         	movff	??_playDiatonicTriadMajor,tblptrl
 27689  005A86  C063  FFF7         	movff	??_playDiatonicTriadMajor+1,tblptrh
 27690  005A8A                     	if	0	;tblptru may be non-zero
 27691  005A8A                     	endif
 27692  005A8A                     	if	0	;tblptru may be non-zero
 27693  005A8A                     	endif
 27694  005A8A  0008               	tblrd		*
 27695  005A8C  50F5               	movf	tablat,w,c
 27696  005A8E  2568               	addwf	playDiatonicTriadMajor@pitch& (0+255),w,b
 27697  005A90  6EE6               	movwf	postinc1,c
 27698  005A92  503E               	movf	_channel,w,c
 27699  005A94  6EE6               	movwf	postinc1,c
 27700  005A96  EC48  F04A         	call	_noteOff	;wreg free
 27701  005A9A                     l1646:
 27702  005A9A  0100               	movlb	0	; () banked
 27703  005A9C  2B66               	incf	playDiatonicTriadMajor@i& (0+255),f,b
 27704  005A9E  D7B8               	goto	l26569
 27705  005AA0                     u45900:
 27706                           
 27707                           ;keyboard.c: 1074: }
 27708                           ;keyboard.c: 1075: }
 27709                           ;keyboard.c: 1078: if(ARPEGGIO_ON == 1){
 27710                           
 27711                           ; BSR set to: 0
 27712  005AA0  A604               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 27713  005AA2  0012               	return	
 27714                           
 27715                           ;keyboard.c: 1079: if(ON_OFF == 1) {
 27716  005AA4  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27717  005AA6  D040               	goto	l1648
 27718                           
 27719                           ;keyboard.c: 1081: TMR0ON = 0;
 27720  005AA8  9ED5               	bcf	4053,7,c	;volatile
 27721                           
 27722                           ;keyboard.c: 1083: parallel = pitch;
 27723  005AAA  C068  F030         	movff	playDiatonicTriadMajor@pitch,_parallel
 27724                           
 27725                           ;keyboard.c: 1086: if(NUM_NOTES_PRESSED > 0){
 27726  005AAE  502F               	movf	_NUM_NOTES_PRESSED,w,c
 27727  005AB0  B4D8               	btfsc	status,2,c
 27728  005AB2  D00A               	goto	l1649
 27729                           
 27730                           ;keyboard.c: 1087: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 27731  005AB4  0E00               	movlw	0
 27732  005AB6  B203               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 27733  005AB8  0E01               	movlw	1
 27734  005ABA  ECED  F04B         	call	_wait_one_pulse
 27735                           
 27736                           ;keyboard.c: 1088: if(note_off_was_sent == 0) {key_press_release_note_off();}
 27737  005ABE  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 27738  005AC0  EC8B  F02E         	call	_key_press_release_note_off	;wreg free
 27739                           
 27740                           ;keyboard.c: 1089: TIMER_OVERFLOWS = 0;
 27741  005AC4  0E00               	movlw	0
 27742  005AC6  6E2E               	movwf	_TIMER_OVERFLOWS,c
 27743  005AC8                     l1649:
 27744                           
 27745                           ;keyboard.c: 1090: }
 27746                           ;keyboard.c: 1092: for(unsigned char i = 0; i<3; i++){
 27747  005AC8  0E00               	movlw	0
 27748  005ACA  0100               	movlb	0	; () banked
 27749  005ACC  6F67               	movwf	playDiatonicTriadMajor@i_1713& (0+255),b
 27750  005ACE                     l26599:
 27751                           
 27752                           ; BSR set to: 0
 27753  005ACE  0E02               	movlw	2
 27754  005AD0  6567               	cpfsgt	playDiatonicTriadMajor@i_1713& (0+255),b
 27755  005AD2  D001               	goto	l1651
 27756  005AD4  D022               	goto	u45960
 27757  005AD6                     l1651:
 27758                           
 27759                           ; BSR set to: 0
 27760                           ;keyboard.c: 1093: ARPEGGIO[i] = pitch + diatonic_major[index][i];
 27761                           
 27762                           ; BSR set to: 0
 27763  005AD6  5167               	movf	playDiatonicTriadMajor@i_1713& (0+255),w,b
 27764  005AD8  0D01               	mullw	1
 27765  005ADA  0E82               	movlw	low _ARPEGGIO
 27766  005ADC  24F3               	addwf	prodl,w,c
 27767  005ADE  6ED9               	movwf	fsr2l,c
 27768  005AE0  0E01               	movlw	high _ARPEGGIO
 27769  005AE2  20F4               	addwfc	prodh,w,c
 27770  005AE4  6EDA               	movwf	fsr2h,c
 27771  005AE6  5161               	movf	playDiatonicTriadMajor@index& (0+255),w,b
 27772  005AE8  0D03               	mullw	3
 27773  005AEA  0E10               	movlw	low _diatonic_major
 27774  005AEC  6F62               	movwf	??_playDiatonicTriadMajor& (0+255),b
 27775  005AEE  0EF3               	movlw	high _diatonic_major
 27776  005AF0  6F63               	movwf	(??_playDiatonicTriadMajor+1)& (0+255),b
 27777  005AF2  50F3               	movf	prodl,w,c
 27778  005AF4  2762               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 27779  005AF6  50F4               	movf	prodh,w,c
 27780  005AF8  2363               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 27781  005AFA  5167               	movf	playDiatonicTriadMajor@i_1713& (0+255),w,b
 27782  005AFC  0D01               	mullw	1
 27783  005AFE  50F3               	movf	prodl,w,c
 27784  005B00  2762               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 27785  005B02  50F4               	movf	prodh,w,c
 27786  005B04  2363               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 27787  005B06  C062  FFF6         	movff	??_playDiatonicTriadMajor,tblptrl
 27788  005B0A  C063  FFF7         	movff	??_playDiatonicTriadMajor+1,tblptrh
 27789  005B0E                     	if	0	;tblptru may be non-zero
 27790  005B0E                     	endif
 27791  005B0E                     	if	0	;tblptru may be non-zero
 27792  005B0E                     	endif
 27793  005B0E  0008               	tblrd		*
 27794  005B10  50F5               	movf	tablat,w,c
 27795  005B12  2568               	addwf	playDiatonicTriadMajor@pitch& (0+255),w,b
 27796  005B14  6EDF               	movwf	indf2,c
 27797                           
 27798                           ; BSR set to: 0
 27799  005B16  2B67               	incf	playDiatonicTriadMajor@i_1713& (0+255),f,b
 27800  005B18  D7DA               	goto	l26599
 27801  005B1A                     u45960:
 27802                           
 27803                           ; BSR set to: 0
 27804                           ;keyboard.c: 1094: }
 27805                           ;keyboard.c: 1096: NUM_NOTES_PRESSED = 3;
 27806                           
 27807                           ; BSR set to: 0
 27808  005B1A  0E03               	movlw	3
 27809  005B1C  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 27810                           
 27811                           ; BSR set to: 0
 27812                           ;keyboard.c: 1099: if(LATCH == 0) {latch_was_pressed = 0;}
 27813  005B1E  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 27814                           
 27815                           ; BSR set to: 0
 27816  005B20  9A03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27817                           
 27818                           ; BSR set to: 0
 27819                           ;keyboard.c: 1102: finish_arpeggio_setup();
 27820                           
 27821                           ; BSR set to: 0
 27822  005B22  EC82  F04C         	call	_finish_arpeggio_setup	;wreg free
 27823                           
 27824                           ;keyboard.c: 1104: TMR0ON = 1;
 27825  005B26  8ED5               	bsf	4053,7,c	;volatile
 27826  005B28                     l1648:
 27827                           
 27828                           ;keyboard.c: 1105: }
 27829                           ;keyboard.c: 1107: if((ON_OFF == 0) && (LATCH == 0)) {
 27830  005B28  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27831  005B2A  0012               	return	
 27832  005B2C  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 27833  005B2E  0012               	return	
 27834                           
 27835                           ;keyboard.c: 1109: if(NUM_NOTES_PRESSED > 0){
 27836  005B30  502F               	movf	_NUM_NOTES_PRESSED,w,c
 27837  005B32  B4D8               	btfsc	status,2,c
 27838  005B34  D00A               	goto	l1655
 27839                           
 27840                           ;keyboard.c: 1110: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 27841  005B36  0E00               	movlw	0
 27842  005B38  B003               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 27843  005B3A  0E01               	movlw	1
 27844  005B3C  ECED  F04B         	call	_wait_one_pulse
 27845                           
 27846                           ;keyboard.c: 1111: if(note_off_was_sent == 0) {key_press_release_note_off();}
 27847  005B40  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 27848  005B42  EC8B  F02E         	call	_key_press_release_note_off	;wreg free
 27849                           
 27850                           ;keyboard.c: 1112: TIMER_OVERFLOWS = 0;
 27851  005B46  0E00               	movlw	0
 27852  005B48  6E2E               	movwf	_TIMER_OVERFLOWS,c
 27853  005B4A                     l1655:
 27854                           
 27855                           ;keyboard.c: 1113: }
 27856                           ;keyboard.c: 1115: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 27857  005B4A  C030  F062         	movff	_parallel,??_playDiatonicTriadMajor
 27858  005B4E  0100               	movlb	0	; () banked
 27859  005B50  6B63               	clrf	(??_playDiatonicTriadMajor+1)& (0+255),b
 27860  005B52  BF62               	btfsc	??_playDiatonicTriadMajor& (0+255),7,b
 27861  005B54  0763               	decf	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 27862  005B56  5168               	movf	playDiatonicTriadMajor@pitch& (0+255),w,b
 27863  005B58  6F64               	movwf	(??_playDiatonicTriadMajor+2)& (0+255),b
 27864  005B5A  6B65               	clrf	(??_playDiatonicTriadMajor+3)& (0+255),b
 27865  005B5C  5162               	movf	??_playDiatonicTriadMajor& (0+255),w,b
 27866  005B5E  1964               	xorwf	(??_playDiatonicTriadMajor+2)& (0+255),w,b
 27867  005B60  E106               	bnz	l26637
 27868  005B62  5163               	movf	(??_playDiatonicTriadMajor+1)& (0+255),w,b
 27869  005B64  1965               	xorwf	(??_playDiatonicTriadMajor+3)& (0+255),w,b
 27870  005B66  A4D8               	btfss	status,2,c
 27871  005B68  D002               	goto	l1657
 27872                           
 27873                           ; BSR set to: 0
 27874  005B6A  0E00               	movlw	0
 27875  005B6C  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 27876  005B6E                     l1657:
 27877  005B6E                     l26637:
 27878                           
 27879                           ; BSR set to: 0
 27880                           ;keyboard.c: 1117: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 27881  005B6E  BC03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 27882                           
 27883                           ; BSR set to: 0
 27884  005B70  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27885  005B72  D001               	goto	l1658
 27886                           
 27887                           ; BSR set to: 0
 27888                           ;keyboard.c: 1118: LATCH = 1;
 27889  005B74  8004               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 27890  005B76                     l1658:
 27891                           
 27892                           ; BSR set to: 0
 27893                           ;keyboard.c: 1119: }
 27894                           ;keyboard.c: 1122: if(((UN_LATCH_MODE == 0) | (UN_LATCH_MODE == 1)) && (latch_was_presse
      +                          d == 1)){
 27895  005B76  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 27896  005B78  D002               	goto	u46060
 27897                           
 27898                           ; BSR set to: 0
 27899  005B7A  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 27900  005B7C  D006               	goto	l1659
 27901  005B7E                     u46060:
 27902                           
 27903                           ; BSR set to: 0
 27904  005B7E  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27905  005B80  D004               	goto	l1659
 27906                           
 27907                           ; BSR set to: 0
 27908                           ;keyboard.c: 1123: NUM_NOTES_PRESSED = 0;
 27909  005B82  0E00               	movlw	0
 27910  005B84  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 27911                           
 27912                           ;keyboard.c: 1124: ARRAY_INDEX = 0;
 27913  005B86  0E00               	movlw	0
 27914  005B88  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 27915  005B8A                     l1659:
 27916                           
 27917                           ; BSR set to: 0
 27918                           ;keyboard.c: 1125: }
 27919                           ;keyboard.c: 1128: finish_arpeggio_setup();
 27920                           
 27921                           ; BSR set to: 0
 27922  005B8A  EC82  F04C         	call	_finish_arpeggio_setup	;wreg free
 27923                           
 27924                           ;keyboard.c: 1129: TMR0ON = 1;
 27925  005B8E  8ED5               	bsf	4053,7,c	;volatile
 27926  005B90  0012               	return	
 27927  005B92                     __end_of_playDiatonicTriadMajor:
 27928                           	opt stack 0
 27929                           tblptru	equ	0xFF8
 27930                           tblptrh	equ	0xFF7
 27931                           tblptrl	equ	0xFF6
 27932                           tablat	equ	0xFF5
 27933                           prodh	equ	0xFF4
 27934                           prodl	equ	0xFF3
 27935                           intcon	equ	0xFF2
 27936                           intcon2	equ	0xFF1
 27937                           postinc0	equ	0xFEE
 27938                           wreg	equ	0xFE8
 27939                           postinc1	equ	0xFE6
 27940                           plusw1	equ	0xFE3
 27941                           fsr1h	equ	0xFE2
 27942                           fsr1l	equ	0xFE1
 27943                           indf2	equ	0xFDF
 27944                           postinc2	equ	0xFDE
 27945                           postdec2	equ	0xFDD
 27946                           plusw2	equ	0xFDB
 27947                           fsr2h	equ	0xFDA
 27948                           fsr2l	equ	0xFD9
 27949                           status	equ	0xFD8
 27950                           
 27951 ;; *************** function _playDiatonicSeventhMinor *****************
 27952 ;; Defined at:
 27953 ;;		line 1285 in file "keyboard.c"
 27954 ;; Parameters:    Size  Location     Type
 27955 ;;  pitch           1    wreg     unsigned char 
 27956 ;;  index           1    1[BANK0 ] unsigned char 
 27957 ;; Auto vars:     Size  Location     Type
 27958 ;;  pitch           1    6[BANK0 ] unsigned char 
 27959 ;;  i               1    8[BANK0 ] unsigned char 
 27960 ;;  i               1    7[BANK0 ] unsigned char 
 27961 ;; Return value:  Size  Location     Type
 27962 ;;                  1    wreg      void 
 27963 ;; Registers used:
 27964 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27965 ;; Tracked objects:
 27966 ;;		On entry : 0/0
 27967 ;;		On exit  : 0/0
 27968 ;;		Unchanged: 0/0
 27969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 27970 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27971 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27972 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27973 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27974 ;;Total ram usage:        8 bytes
 27975 ;; Hardware stack levels used:    1
 27976 ;; Hardware stack levels required when called:   10
 27977 ;; This function calls:
 27978 ;;		_finish_arpeggio_setup
 27979 ;;		_key_press_release_note_off
 27980 ;;		_noteOff
 27981 ;;		_noteOn
 27982 ;;		_wait_one_pulse
 27983 ;; This function is called by:
 27984 ;;		_playThisNote8
 27985 ;; This function uses a non-reentrant model
 27986 ;;
 27987                           
 27988                           	psect	text75
 27989  00494E                     __ptext75:
 27990                           	opt stack 0
 27991  00494E                     _playDiatonicSeventhMinor:
 27992                           	opt stack 13
 27993                           
 27994                           ;incstack = 0
 27995                           ;playDiatonicSeventhMinor@pitch stored from wreg
 27996  00494E  0100               	movlb	0	; () banked
 27997  004950  6F66               	movwf	playDiatonicSeventhMinor@pitch& (0+255),b
 27998                           
 27999                           ;keyboard.c: 1288: if(ARPEGGIO_ON == 0){
 28000  004952  B604               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 28001  004954  D08F               	goto	u46660
 28002                           
 28003                           ;keyboard.c: 1289: for(unsigned char i = 0; i<4; i++){
 28004  004956  0E00               	movlw	0
 28005  004958  0100               	movlb	0	; () banked
 28006  00495A  6F67               	movwf	playDiatonicSeventhMinor@i& (0+255),b
 28007  00495C                     l26851:
 28008                           
 28009                           ; BSR set to: 0
 28010  00495C  0E03               	movlw	3
 28011  00495E  6567               	cpfsgt	playDiatonicSeventhMinor@i& (0+255),b
 28012  004960  D001               	goto	l1718
 28013  004962  D088               	goto	u46660
 28014  004964                     l1718:
 28015                           
 28016                           ; BSR set to: 0
 28017                           ;keyboard.c: 1290: if(i==0){
 28018                           
 28019                           ; BSR set to: 0
 28020  004964  5167               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 28021  004966  A4D8               	btfss	status,2,c
 28022  004968  D027               	goto	l1722
 28023                           
 28024                           ; BSR set to: 0
 28025                           ;keyboard.c: 1291: if(ON_OFF == 1) {noteOn(channel,diatonic_seventh_minor[index][0],velo
      +                          city);}
 28026  00496A  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28027  00496C  D011               	goto	l1721
 28028                           
 28029                           ; BSR set to: 0
 28030  00496E  5051               	movf	_velocity,w,c
 28031  004970  6EE6               	movwf	postinc1,c
 28032  004972  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28033  004974  0D04               	mullw	4
 28034  004976  0E6B               	movlw	low _diatonic_seventh_minor
 28035  004978  24F3               	addwf	prodl,w,c
 28036  00497A  6EF6               	movwf	tblptrl,c
 28037  00497C  0EF2               	movlw	high _diatonic_seventh_minor
 28038  00497E  20F4               	addwfc	prodh,w,c
 28039  004980  6EF7               	movwf	tblptrh,c
 28040  004982                     	if	0	;There are less than 3 active tblptr bytes
 28041  004982                     	endif
 28042  004982  0008               	tblrd		*
 28043  004984  50F5               	movf	tablat,w,c
 28044  004986  6EE6               	movwf	postinc1,c
 28045  004988  503E               	movf	_channel,w,c
 28046  00498A  6EE6               	movwf	postinc1,c
 28047  00498C  EC93  F045         	call	_noteOn	;wreg free
 28048  004990                     l1721:
 28049                           
 28050                           ;keyboard.c: 1292: if(ON_OFF == 0) {noteOff(channel,diatonic_seventh_minor[index][0],vel
      +                          ocity);}
 28051  004990  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28052  004992  D012               	goto	l1722
 28053  004994  5051               	movf	_velocity,w,c
 28054  004996  6EE6               	movwf	postinc1,c
 28055  004998  0100               	movlb	0	; () banked
 28056  00499A  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28057  00499C  0D04               	mullw	4
 28058  00499E  0E6B               	movlw	low _diatonic_seventh_minor
 28059  0049A0  24F3               	addwf	prodl,w,c
 28060  0049A2  6EF6               	movwf	tblptrl,c
 28061  0049A4  0EF2               	movlw	high _diatonic_seventh_minor
 28062  0049A6  20F4               	addwfc	prodh,w,c
 28063  0049A8  6EF7               	movwf	tblptrh,c
 28064  0049AA                     	if	0	;There are less than 3 active tblptr bytes
 28065  0049AA                     	endif
 28066  0049AA  0008               	tblrd		*
 28067  0049AC  50F5               	movf	tablat,w,c
 28068  0049AE  6EE6               	movwf	postinc1,c
 28069  0049B0  503E               	movf	_channel,w,c
 28070  0049B2  6EE6               	movwf	postinc1,c
 28071  0049B4  EC48  F04A         	call	_noteOff	;wreg free
 28072  0049B8                     l1722:
 28073                           
 28074                           ;keyboard.c: 1293: }
 28075                           ;keyboard.c: 1294: if(i>0){
 28076  0049B8  0100               	movlb	0	; () banked
 28077  0049BA  5167               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 28078  0049BC  B4D8               	btfsc	status,2,c
 28079  0049BE  D057               	goto	l1725
 28080                           
 28081                           ; BSR set to: 0
 28082                           ;keyboard.c: 1295: if(ON_OFF == 1) noteOn(channel,diatonic_seventh_minor[index][0] + dia
      +                          tonic_seventh_minor[index][i],velocity);
 28083  0049C0  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28084  0049C2  D029               	goto	l1724
 28085                           
 28086                           ; BSR set to: 0
 28087  0049C4  5051               	movf	_velocity,w,c
 28088  0049C6  6EE6               	movwf	postinc1,c
 28089  0049C8  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28090  0049CA  0D04               	mullw	4
 28091  0049CC  0E6B               	movlw	low _diatonic_seventh_minor
 28092  0049CE  6F62               	movwf	??_playDiatonicSeventhMinor& (0+255),b
 28093  0049D0  0EF2               	movlw	high _diatonic_seventh_minor
 28094  0049D2  6F63               	movwf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 28095  0049D4  50F3               	movf	prodl,w,c
 28096  0049D6  2762               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 28097  0049D8  50F4               	movf	prodh,w,c
 28098  0049DA  2363               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28099  0049DC  5167               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 28100  0049DE  0D01               	mullw	1
 28101  0049E0  50F3               	movf	prodl,w,c
 28102  0049E2  2762               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 28103  0049E4  50F4               	movf	prodh,w,c
 28104  0049E6  2363               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28105  0049E8  C062  FFF6         	movff	??_playDiatonicSeventhMinor,tblptrl
 28106  0049EC  C063  FFF7         	movff	??_playDiatonicSeventhMinor+1,tblptrh
 28107  0049F0                     	if	0	;tblptru may be non-zero
 28108  0049F0                     	endif
 28109  0049F0                     	if	0	;tblptru may be non-zero
 28110  0049F0                     	endif
 28111  0049F0  0008               	tblrd		*
 28112  0049F2  CFF5 F064          	movff	tablat,??_playDiatonicSeventhMinor+2
 28113  0049F6  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28114  0049F8  0D04               	mullw	4
 28115  0049FA  0E6B               	movlw	low _diatonic_seventh_minor
 28116  0049FC  24F3               	addwf	prodl,w,c
 28117  0049FE  6EF6               	movwf	tblptrl,c
 28118  004A00  0EF2               	movlw	high _diatonic_seventh_minor
 28119  004A02  20F4               	addwfc	prodh,w,c
 28120  004A04  6EF7               	movwf	tblptrh,c
 28121  004A06                     	if	0	;There are less than 3 active tblptr bytes
 28122  004A06                     	endif
 28123  004A06  0008               	tblrd		*
 28124  004A08  50F5               	movf	tablat,w,c
 28125  004A0A  2564               	addwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 28126  004A0C  6EE6               	movwf	postinc1,c
 28127  004A0E  503E               	movf	_channel,w,c
 28128  004A10  6EE6               	movwf	postinc1,c
 28129  004A12  EC93  F045         	call	_noteOn	;wreg free
 28130  004A16                     l1724:
 28131                           
 28132                           ;keyboard.c: 1296: if(ON_OFF == 0) noteOff(channel,diatonic_seventh_minor[index][0] + di
      +                          atonic_seventh_minor[index][i],velocity);
 28133  004A16  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28134  004A18  D02A               	goto	l1725
 28135  004A1A  5051               	movf	_velocity,w,c
 28136  004A1C  6EE6               	movwf	postinc1,c
 28137  004A1E  0100               	movlb	0	; () banked
 28138  004A20  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28139  004A22  0D04               	mullw	4
 28140  004A24  0E6B               	movlw	low _diatonic_seventh_minor
 28141  004A26  6F62               	movwf	??_playDiatonicSeventhMinor& (0+255),b
 28142  004A28  0EF2               	movlw	high _diatonic_seventh_minor
 28143  004A2A  6F63               	movwf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 28144  004A2C  50F3               	movf	prodl,w,c
 28145  004A2E  2762               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 28146  004A30  50F4               	movf	prodh,w,c
 28147  004A32  2363               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28148  004A34  5167               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 28149  004A36  0D01               	mullw	1
 28150  004A38  50F3               	movf	prodl,w,c
 28151  004A3A  2762               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 28152  004A3C  50F4               	movf	prodh,w,c
 28153  004A3E  2363               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28154  004A40  C062  FFF6         	movff	??_playDiatonicSeventhMinor,tblptrl
 28155  004A44  C063  FFF7         	movff	??_playDiatonicSeventhMinor+1,tblptrh
 28156  004A48                     	if	0	;tblptru may be non-zero
 28157  004A48                     	endif
 28158  004A48                     	if	0	;tblptru may be non-zero
 28159  004A48                     	endif
 28160  004A48  0008               	tblrd		*
 28161  004A4A  CFF5 F064          	movff	tablat,??_playDiatonicSeventhMinor+2
 28162  004A4E  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28163  004A50  0D04               	mullw	4
 28164  004A52  0E6B               	movlw	low _diatonic_seventh_minor
 28165  004A54  24F3               	addwf	prodl,w,c
 28166  004A56  6EF6               	movwf	tblptrl,c
 28167  004A58  0EF2               	movlw	high _diatonic_seventh_minor
 28168  004A5A  20F4               	addwfc	prodh,w,c
 28169  004A5C  6EF7               	movwf	tblptrh,c
 28170  004A5E                     	if	0	;There are less than 3 active tblptr bytes
 28171  004A5E                     	endif
 28172  004A5E  0008               	tblrd		*
 28173  004A60  50F5               	movf	tablat,w,c
 28174  004A62  2564               	addwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 28175  004A64  6EE6               	movwf	postinc1,c
 28176  004A66  503E               	movf	_channel,w,c
 28177  004A68  6EE6               	movwf	postinc1,c
 28178  004A6A  EC48  F04A         	call	_noteOff	;wreg free
 28179  004A6E                     l1725:
 28180  004A6E  0100               	movlb	0	; () banked
 28181  004A70  2B67               	incf	playDiatonicSeventhMinor@i& (0+255),f,b
 28182  004A72  D774               	goto	l26851
 28183  004A74                     u46660:
 28184                           
 28185                           ;keyboard.c: 1297: }
 28186                           ;keyboard.c: 1298: }
 28187                           ;keyboard.c: 1299: }
 28188                           ;keyboard.c: 1302: if(ARPEGGIO_ON == 1){
 28189                           
 28190                           ; BSR set to: 0
 28191  004A74  A604               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 28192  004A76  0012               	return	
 28193                           
 28194                           ;keyboard.c: 1304: if(ON_OFF == 1) {
 28195  004A78  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28196  004A7A  D064               	goto	l1727
 28197                           
 28198                           ;keyboard.c: 1306: TMR0ON = 0;
 28199  004A7C  9ED5               	bcf	4053,7,c	;volatile
 28200                           
 28201                           ;keyboard.c: 1308: parallel = pitch;
 28202  004A7E  C066  F030         	movff	playDiatonicSeventhMinor@pitch,_parallel
 28203                           
 28204                           ;keyboard.c: 1311: if(NUM_NOTES_PRESSED > 0){
 28205  004A82  502F               	movf	_NUM_NOTES_PRESSED,w,c
 28206  004A84  B4D8               	btfsc	status,2,c
 28207  004A86  D00A               	goto	l1728
 28208                           
 28209                           ;keyboard.c: 1312: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 28210  004A88  0E00               	movlw	0
 28211  004A8A  B203               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 28212  004A8C  0E01               	movlw	1
 28213  004A8E  ECED  F04B         	call	_wait_one_pulse
 28214                           
 28215                           ;keyboard.c: 1313: if(note_off_was_sent == 0) {key_press_release_note_off();}
 28216  004A92  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 28217  004A94  EC8B  F02E         	call	_key_press_release_note_off	;wreg free
 28218                           
 28219                           ;keyboard.c: 1314: TIMER_OVERFLOWS = 0;
 28220  004A98  0E00               	movlw	0
 28221  004A9A  6E2E               	movwf	_TIMER_OVERFLOWS,c
 28222  004A9C                     l1728:
 28223                           
 28224                           ;keyboard.c: 1315: }
 28225                           ;keyboard.c: 1317: for(unsigned char i = 0; i<4; i++){
 28226  004A9C  0E00               	movlw	0
 28227  004A9E  0100               	movlb	0	; () banked
 28228  004AA0  6F68               	movwf	playDiatonicSeventhMinor@i_1728& (0+255),b
 28229  004AA2                     l26895:
 28230                           
 28231                           ; BSR set to: 0
 28232  004AA2  0E03               	movlw	3
 28233  004AA4  6568               	cpfsgt	playDiatonicSeventhMinor@i_1728& (0+255),b
 28234  004AA6  D001               	goto	l1730
 28235  004AA8  D046               	goto	u46740
 28236  004AAA                     l1730:
 28237                           
 28238                           ; BSR set to: 0
 28239                           ;keyboard.c: 1318: if(i==0){ARPEGGIO[i] = diatonic_seventh_minor[index][0];}
 28240                           
 28241                           ; BSR set to: 0
 28242  004AAA  5168               	movf	playDiatonicSeventhMinor@i_1728& (0+255),w,b
 28243  004AAC  A4D8               	btfss	status,2,c
 28244  004AAE  D013               	goto	l1732
 28245                           
 28246                           ; BSR set to: 0
 28247  004AB0  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28248  004AB2  0D04               	mullw	4
 28249  004AB4  0E6B               	movlw	low _diatonic_seventh_minor
 28250  004AB6  24F3               	addwf	prodl,w,c
 28251  004AB8  6EF6               	movwf	tblptrl,c
 28252  004ABA  0EF2               	movlw	high _diatonic_seventh_minor
 28253  004ABC  20F4               	addwfc	prodh,w,c
 28254  004ABE  6EF7               	movwf	tblptrh,c
 28255  004AC0                     	if	0	;There are less than 3 active tblptr bytes
 28256  004AC0                     	endif
 28257  004AC0  5168               	movf	playDiatonicSeventhMinor@i_1728& (0+255),w,b
 28258  004AC2  0D01               	mullw	1
 28259  004AC4  0E82               	movlw	low _ARPEGGIO
 28260  004AC6  24F3               	addwf	prodl,w,c
 28261  004AC8  6ED9               	movwf	fsr2l,c
 28262  004ACA  0E01               	movlw	high _ARPEGGIO
 28263  004ACC  20F4               	addwfc	prodh,w,c
 28264  004ACE  6EDA               	movwf	fsr2h,c
 28265  004AD0  0008               	tblrd		*
 28266  004AD2  CFF5 FFDF          	movff	tablat,indf2
 28267  004AD6                     l1732:
 28268                           
 28269                           ; BSR set to: 0
 28270                           ;keyboard.c: 1319: if(i>0){ARPEGGIO[i] = diatonic_seventh_minor[index][0] + diatonic_sev
      +                          enth_minor[index][i];}
 28271                           
 28272                           ; BSR set to: 0
 28273  004AD6  5168               	movf	playDiatonicSeventhMinor@i_1728& (0+255),w,b
 28274  004AD8  B4D8               	btfsc	status,2,c
 28275  004ADA  D02B               	goto	l1733
 28276                           
 28277                           ; BSR set to: 0
 28278  004ADC  5168               	movf	playDiatonicSeventhMinor@i_1728& (0+255),w,b
 28279  004ADE  0D01               	mullw	1
 28280  004AE0  0E82               	movlw	low _ARPEGGIO
 28281  004AE2  24F3               	addwf	prodl,w,c
 28282  004AE4  6ED9               	movwf	fsr2l,c
 28283  004AE6  0E01               	movlw	high _ARPEGGIO
 28284  004AE8  20F4               	addwfc	prodh,w,c
 28285  004AEA  6EDA               	movwf	fsr2h,c
 28286  004AEC  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28287  004AEE  0D04               	mullw	4
 28288  004AF0  0E6B               	movlw	low _diatonic_seventh_minor
 28289  004AF2  6F62               	movwf	??_playDiatonicSeventhMinor& (0+255),b
 28290  004AF4  0EF2               	movlw	high _diatonic_seventh_minor
 28291  004AF6  6F63               	movwf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 28292  004AF8  50F3               	movf	prodl,w,c
 28293  004AFA  2762               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 28294  004AFC  50F4               	movf	prodh,w,c
 28295  004AFE  2363               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28296  004B00  5168               	movf	playDiatonicSeventhMinor@i_1728& (0+255),w,b
 28297  004B02  0D01               	mullw	1
 28298  004B04  50F3               	movf	prodl,w,c
 28299  004B06  2762               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 28300  004B08  50F4               	movf	prodh,w,c
 28301  004B0A  2363               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28302  004B0C  C062  FFF6         	movff	??_playDiatonicSeventhMinor,tblptrl
 28303  004B10  C063  FFF7         	movff	??_playDiatonicSeventhMinor+1,tblptrh
 28304  004B14                     	if	0	;tblptru may be non-zero
 28305  004B14                     	endif
 28306  004B14                     	if	0	;tblptru may be non-zero
 28307  004B14                     	endif
 28308  004B14  0008               	tblrd		*
 28309  004B16  CFF5 F064          	movff	tablat,??_playDiatonicSeventhMinor+2
 28310  004B1A  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28311  004B1C  0D04               	mullw	4
 28312  004B1E  0E6B               	movlw	low _diatonic_seventh_minor
 28313  004B20  24F3               	addwf	prodl,w,c
 28314  004B22  6EF6               	movwf	tblptrl,c
 28315  004B24  0EF2               	movlw	high _diatonic_seventh_minor
 28316  004B26  20F4               	addwfc	prodh,w,c
 28317  004B28  6EF7               	movwf	tblptrh,c
 28318  004B2A                     	if	0	;There are less than 3 active tblptr bytes
 28319  004B2A                     	endif
 28320  004B2A  0008               	tblrd		*
 28321  004B2C  50F5               	movf	tablat,w,c
 28322  004B2E  2564               	addwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 28323  004B30  6EDF               	movwf	indf2,c
 28324  004B32                     l1733:
 28325                           
 28326                           ; BSR set to: 0
 28327                           
 28328                           ; BSR set to: 0
 28329  004B32  2B68               	incf	playDiatonicSeventhMinor@i_1728& (0+255),f,b
 28330  004B34  D7B6               	goto	l26895
 28331  004B36                     u46740:
 28332                           
 28333                           ; BSR set to: 0
 28334                           ;keyboard.c: 1320: }
 28335                           ;keyboard.c: 1322: NUM_NOTES_PRESSED = 4;
 28336                           
 28337                           ; BSR set to: 0
 28338  004B36  0E04               	movlw	4
 28339  004B38  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 28340                           
 28341                           ; BSR set to: 0
 28342                           ;keyboard.c: 1325: if(LATCH == 0) {latch_was_pressed = 0;}
 28343  004B3A  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 28344                           
 28345                           ; BSR set to: 0
 28346  004B3C  9A03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 28347                           
 28348                           ; BSR set to: 0
 28349                           ;keyboard.c: 1328: finish_arpeggio_setup();
 28350                           
 28351                           ; BSR set to: 0
 28352  004B3E  EC82  F04C         	call	_finish_arpeggio_setup	;wreg free
 28353                           
 28354                           ;keyboard.c: 1330: TMR0ON = 1;
 28355  004B42  8ED5               	bsf	4053,7,c	;volatile
 28356  004B44                     l1727:
 28357                           
 28358                           ;keyboard.c: 1331: }
 28359                           ;keyboard.c: 1333: if((ON_OFF == 0) && (LATCH == 0)) {
 28360  004B44  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28361  004B46  0012               	return	
 28362  004B48  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 28363  004B4A  0012               	return	
 28364                           
 28365                           ;keyboard.c: 1335: if(NUM_NOTES_PRESSED > 0){
 28366  004B4C  502F               	movf	_NUM_NOTES_PRESSED,w,c
 28367  004B4E  B4D8               	btfsc	status,2,c
 28368  004B50  D00A               	goto	l1736
 28369                           
 28370                           ;keyboard.c: 1336: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 28371  004B52  0E00               	movlw	0
 28372  004B54  B003               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 28373  004B56  0E01               	movlw	1
 28374  004B58  ECED  F04B         	call	_wait_one_pulse
 28375                           
 28376                           ;keyboard.c: 1337: if(note_off_was_sent == 0) {key_press_release_note_off();}
 28377  004B5C  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 28378  004B5E  EC8B  F02E         	call	_key_press_release_note_off	;wreg free
 28379                           
 28380                           ;keyboard.c: 1338: TIMER_OVERFLOWS = 0;
 28381  004B62  0E00               	movlw	0
 28382  004B64  6E2E               	movwf	_TIMER_OVERFLOWS,c
 28383  004B66                     l1736:
 28384                           
 28385                           ;keyboard.c: 1339: }
 28386                           ;keyboard.c: 1341: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 28387  004B66  C030  F062         	movff	_parallel,??_playDiatonicSeventhMinor
 28388  004B6A  0100               	movlb	0	; () banked
 28389  004B6C  6B63               	clrf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 28390  004B6E  BF62               	btfsc	??_playDiatonicSeventhMinor& (0+255),7,b
 28391  004B70  0763               	decf	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28392  004B72  5166               	movf	playDiatonicSeventhMinor@pitch& (0+255),w,b
 28393  004B74  6F64               	movwf	(??_playDiatonicSeventhMinor+2)& (0+255),b
 28394  004B76  6B65               	clrf	(??_playDiatonicSeventhMinor+3)& (0+255),b
 28395  004B78  5162               	movf	??_playDiatonicSeventhMinor& (0+255),w,b
 28396  004B7A  1964               	xorwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 28397  004B7C  E106               	bnz	l26939
 28398  004B7E  5163               	movf	(??_playDiatonicSeventhMinor+1)& (0+255),w,b
 28399  004B80  1965               	xorwf	(??_playDiatonicSeventhMinor+3)& (0+255),w,b
 28400  004B82  A4D8               	btfss	status,2,c
 28401  004B84  D002               	goto	l1738
 28402                           
 28403                           ; BSR set to: 0
 28404  004B86  0E00               	movlw	0
 28405  004B88  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 28406  004B8A                     l1738:
 28407  004B8A                     l26939:
 28408                           
 28409                           ; BSR set to: 0
 28410                           ;keyboard.c: 1343: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 28411  004B8A  BC03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 28412                           
 28413                           ; BSR set to: 0
 28414  004B8C  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 28415  004B8E  D001               	goto	l1739
 28416                           
 28417                           ; BSR set to: 0
 28418                           ;keyboard.c: 1344: LATCH = 1;
 28419  004B90  8004               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 28420  004B92                     l1739:
 28421                           
 28422                           ; BSR set to: 0
 28423                           ;keyboard.c: 1345: }
 28424                           ;keyboard.c: 1348: if(((UN_LATCH_MODE == 0) | (UN_LATCH_MODE == 1)) && (latch_was_presse
      +                          d == 1)){
 28425  004B92  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 28426  004B94  D002               	goto	u46840
 28427                           
 28428                           ; BSR set to: 0
 28429  004B96  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 28430  004B98  D006               	goto	l1740
 28431  004B9A                     u46840:
 28432                           
 28433                           ; BSR set to: 0
 28434  004B9A  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 28435  004B9C  D004               	goto	l1740
 28436                           
 28437                           ; BSR set to: 0
 28438                           ;keyboard.c: 1349: NUM_NOTES_PRESSED = 0;
 28439  004B9E  0E00               	movlw	0
 28440  004BA0  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 28441                           
 28442                           ;keyboard.c: 1350: ARRAY_INDEX = 0;
 28443  004BA2  0E00               	movlw	0
 28444  004BA4  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 28445  004BA6                     l1740:
 28446                           
 28447                           ; BSR set to: 0
 28448                           ;keyboard.c: 1351: }
 28449                           ;keyboard.c: 1354: finish_arpeggio_setup();
 28450                           
 28451                           ; BSR set to: 0
 28452  004BA6  EC82  F04C         	call	_finish_arpeggio_setup	;wreg free
 28453                           
 28454                           ;keyboard.c: 1355: TMR0ON = 1;
 28455  004BAA  8ED5               	bsf	4053,7,c	;volatile
 28456                           
 28457                           ;keyboard.c: 1357: return;
 28458  004BAC  0012               	return	
 28459  004BAE                     __end_of_playDiatonicSeventhMinor:
 28460                           	opt stack 0
 28461                           tblptru	equ	0xFF8
 28462                           tblptrh	equ	0xFF7
 28463                           tblptrl	equ	0xFF6
 28464                           tablat	equ	0xFF5
 28465                           prodh	equ	0xFF4
 28466                           prodl	equ	0xFF3
 28467                           intcon	equ	0xFF2
 28468                           intcon2	equ	0xFF1
 28469                           postinc0	equ	0xFEE
 28470                           wreg	equ	0xFE8
 28471                           postinc1	equ	0xFE6
 28472                           plusw1	equ	0xFE3
 28473                           fsr1h	equ	0xFE2
 28474                           fsr1l	equ	0xFE1
 28475                           indf2	equ	0xFDF
 28476                           postinc2	equ	0xFDE
 28477                           postdec2	equ	0xFDD
 28478                           plusw2	equ	0xFDB
 28479                           fsr2h	equ	0xFDA
 28480                           fsr2l	equ	0xFD9
 28481                           status	equ	0xFD8
 28482                           
 28483 ;; *************** function _playDiatonicSeventhMajor *****************
 28484 ;; Defined at:
 28485 ;;		line 1135 in file "keyboard.c"
 28486 ;; Parameters:    Size  Location     Type
 28487 ;;  pitch           1    wreg     unsigned char 
 28488 ;;  index           1    1[BANK0 ] unsigned char 
 28489 ;; Auto vars:     Size  Location     Type
 28490 ;;  pitch           1    8[BANK0 ] unsigned char 
 28491 ;;  i               1    7[BANK0 ] unsigned char 
 28492 ;;  i               1    6[BANK0 ] unsigned char 
 28493 ;; Return value:  Size  Location     Type
 28494 ;;                  1    wreg      void 
 28495 ;; Registers used:
 28496 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28497 ;; Tracked objects:
 28498 ;;		On entry : 0/0
 28499 ;;		On exit  : 0/0
 28500 ;;		Unchanged: 0/0
 28501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 28502 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28503 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28504 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28505 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28506 ;;Total ram usage:        8 bytes
 28507 ;; Hardware stack levels used:    1
 28508 ;; Hardware stack levels required when called:   10
 28509 ;; This function calls:
 28510 ;;		_finish_arpeggio_setup
 28511 ;;		_key_press_release_note_off
 28512 ;;		_noteOff
 28513 ;;		_noteOn
 28514 ;;		_wait_one_pulse
 28515 ;; This function is called by:
 28516 ;;		_playThisNote8
 28517 ;; This function uses a non-reentrant model
 28518 ;;
 28519                           
 28520                           	psect	text76
 28521  0056DE                     __ptext76:
 28522                           	opt stack 0
 28523  0056DE                     _playDiatonicSeventhMajor:
 28524                           	opt stack 13
 28525                           
 28526                           ;incstack = 0
 28527                           ;playDiatonicSeventhMajor@pitch stored from wreg
 28528  0056DE  0100               	movlb	0	; () banked
 28529  0056E0  6F68               	movwf	playDiatonicSeventhMajor@pitch& (0+255),b
 28530                           
 28531                           ;keyboard.c: 1138: if(ARPEGGIO_ON == 0){
 28532  0056E2  B604               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 28533  0056E4  D04B               	goto	u46400
 28534                           
 28535                           ;keyboard.c: 1139: for(unsigned char i = 0; i<4; i++){
 28536  0056E6  0E00               	movlw	0
 28537  0056E8  0100               	movlb	0	; () banked
 28538  0056EA  6F66               	movwf	playDiatonicSeventhMajor@i& (0+255),b
 28539  0056EC                     l26763:
 28540                           
 28541                           ; BSR set to: 0
 28542  0056EC  0E03               	movlw	3
 28543  0056EE  6566               	cpfsgt	playDiatonicSeventhMajor@i& (0+255),b
 28544  0056F0  D001               	goto	l1666
 28545  0056F2  D044               	goto	u46400
 28546  0056F4                     l1666:
 28547                           
 28548                           ; BSR set to: 0
 28549                           ;keyboard.c: 1141: if(ON_OFF == 1) {noteOn(channel,pitch + diatonic_seventh_major[index]
      +                          [i],velocity);}
 28550  0056F4  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28551  0056F6  D01E               	goto	l1668
 28552                           
 28553                           ; BSR set to: 0
 28554  0056F8  5051               	movf	_velocity,w,c
 28555  0056FA  6EE6               	movwf	postinc1,c
 28556  0056FC  5161               	movf	playDiatonicSeventhMajor@index& (0+255),w,b
 28557  0056FE  0D04               	mullw	4
 28558  005700  0EA7               	movlw	low _diatonic_seventh_major
 28559  005702  6F62               	movwf	??_playDiatonicSeventhMajor& (0+255),b
 28560  005704  0EF2               	movlw	high _diatonic_seventh_major
 28561  005706  6F63               	movwf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 28562  005708  50F3               	movf	prodl,w,c
 28563  00570A  2762               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 28564  00570C  50F4               	movf	prodh,w,c
 28565  00570E  2363               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 28566  005710  5166               	movf	playDiatonicSeventhMajor@i& (0+255),w,b
 28567  005712  0D01               	mullw	1
 28568  005714  50F3               	movf	prodl,w,c
 28569  005716  2762               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 28570  005718  50F4               	movf	prodh,w,c
 28571  00571A  2363               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 28572  00571C  C062  FFF6         	movff	??_playDiatonicSeventhMajor,tblptrl
 28573  005720  C063  FFF7         	movff	??_playDiatonicSeventhMajor+1,tblptrh
 28574  005724                     	if	0	;tblptru may be non-zero
 28575  005724                     	endif
 28576  005724                     	if	0	;tblptru may be non-zero
 28577  005724                     	endif
 28578  005724  0008               	tblrd		*
 28579  005726  50F5               	movf	tablat,w,c
 28580  005728  2568               	addwf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 28581  00572A  6EE6               	movwf	postinc1,c
 28582  00572C  503E               	movf	_channel,w,c
 28583  00572E  6EE6               	movwf	postinc1,c
 28584  005730  EC93  F045         	call	_noteOn	;wreg free
 28585  005734                     l1668:
 28586                           
 28587                           ;keyboard.c: 1142: if(ON_OFF == 0) {noteOff(channel,pitch + diatonic_seventh_major[index
      +                          ][i],velocity);}
 28588  005734  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28589  005736  D01F               	goto	l1669
 28590  005738  5051               	movf	_velocity,w,c
 28591  00573A  6EE6               	movwf	postinc1,c
 28592  00573C  0100               	movlb	0	; () banked
 28593  00573E  5161               	movf	playDiatonicSeventhMajor@index& (0+255),w,b
 28594  005740  0D04               	mullw	4
 28595  005742  0EA7               	movlw	low _diatonic_seventh_major
 28596  005744  6F62               	movwf	??_playDiatonicSeventhMajor& (0+255),b
 28597  005746  0EF2               	movlw	high _diatonic_seventh_major
 28598  005748  6F63               	movwf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 28599  00574A  50F3               	movf	prodl,w,c
 28600  00574C  2762               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 28601  00574E  50F4               	movf	prodh,w,c
 28602  005750  2363               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 28603  005752  5166               	movf	playDiatonicSeventhMajor@i& (0+255),w,b
 28604  005754  0D01               	mullw	1
 28605  005756  50F3               	movf	prodl,w,c
 28606  005758  2762               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 28607  00575A  50F4               	movf	prodh,w,c
 28608  00575C  2363               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 28609  00575E  C062  FFF6         	movff	??_playDiatonicSeventhMajor,tblptrl
 28610  005762  C063  FFF7         	movff	??_playDiatonicSeventhMajor+1,tblptrh
 28611  005766                     	if	0	;tblptru may be non-zero
 28612  005766                     	endif
 28613  005766                     	if	0	;tblptru may be non-zero
 28614  005766                     	endif
 28615  005766  0008               	tblrd		*
 28616  005768  50F5               	movf	tablat,w,c
 28617  00576A  2568               	addwf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 28618  00576C  6EE6               	movwf	postinc1,c
 28619  00576E  503E               	movf	_channel,w,c
 28620  005770  6EE6               	movwf	postinc1,c
 28621  005772  EC48  F04A         	call	_noteOff	;wreg free
 28622  005776                     l1669:
 28623  005776  0100               	movlb	0	; () banked
 28624  005778  2B66               	incf	playDiatonicSeventhMajor@i& (0+255),f,b
 28625  00577A  D7B8               	goto	l26763
 28626  00577C                     u46400:
 28627                           
 28628                           ;keyboard.c: 1143: }
 28629                           ;keyboard.c: 1144: }
 28630                           ;keyboard.c: 1147: if(ARPEGGIO_ON == 1){
 28631                           
 28632                           ; BSR set to: 0
 28633  00577C  A604               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 28634  00577E  0012               	return	
 28635                           
 28636                           ;keyboard.c: 1148: if(ON_OFF == 1) {
 28637  005780  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28638  005782  D041               	goto	l1671
 28639                           
 28640                           ;keyboard.c: 1150: TMR0ON = 0;
 28641  005784  9ED5               	bcf	4053,7,c	;volatile
 28642                           
 28643                           ;keyboard.c: 1152: parallel = pitch;
 28644  005786  C068  F030         	movff	playDiatonicSeventhMajor@pitch,_parallel
 28645                           
 28646                           ;keyboard.c: 1155: if(NUM_NOTES_PRESSED > 0){
 28647  00578A  502F               	movf	_NUM_NOTES_PRESSED,w,c
 28648  00578C  B4D8               	btfsc	status,2,c
 28649  00578E  D00A               	goto	l1672
 28650                           
 28651                           ;keyboard.c: 1156: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 28652  005790  0E00               	movlw	0
 28653  005792  B203               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 28654  005794  0E01               	movlw	1
 28655  005796  ECED  F04B         	call	_wait_one_pulse
 28656                           
 28657                           ;keyboard.c: 1157: if(note_off_was_sent == 0) {key_press_release_note_off();}
 28658  00579A  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 28659  00579C  EC8B  F02E         	call	_key_press_release_note_off	;wreg free
 28660                           
 28661                           ;keyboard.c: 1158: TIMER_OVERFLOWS = 0;
 28662  0057A0  0E00               	movlw	0
 28663  0057A2  6E2E               	movwf	_TIMER_OVERFLOWS,c
 28664  0057A4                     l1672:
 28665                           
 28666                           ;keyboard.c: 1159: }
 28667                           ;keyboard.c: 1161: for(unsigned char i = 0; i<4; i++){
 28668  0057A4  0E00               	movlw	0
 28669  0057A6  0100               	movlb	0	; () banked
 28670  0057A8  6F67               	movwf	playDiatonicSeventhMajor@i_1718& (0+255),b
 28671  0057AA                     l26793:
 28672                           
 28673                           ; BSR set to: 0
 28674  0057AA  0E03               	movlw	3
 28675  0057AC  6567               	cpfsgt	playDiatonicSeventhMajor@i_1718& (0+255),b
 28676  0057AE  D001               	goto	l1674
 28677  0057B0  D022               	goto	u46460
 28678  0057B2                     l1674:
 28679                           
 28680                           ; BSR set to: 0
 28681                           ;keyboard.c: 1162: ARPEGGIO[i] = pitch + diatonic_seventh_major[index][i];
 28682                           
 28683                           ; BSR set to: 0
 28684  0057B2  5167               	movf	playDiatonicSeventhMajor@i_1718& (0+255),w,b
 28685  0057B4  0D01               	mullw	1
 28686  0057B6  0E82               	movlw	low _ARPEGGIO
 28687  0057B8  24F3               	addwf	prodl,w,c
 28688  0057BA  6ED9               	movwf	fsr2l,c
 28689  0057BC  0E01               	movlw	high _ARPEGGIO
 28690  0057BE  20F4               	addwfc	prodh,w,c
 28691  0057C0  6EDA               	movwf	fsr2h,c
 28692  0057C2  5161               	movf	playDiatonicSeventhMajor@index& (0+255),w,b
 28693  0057C4  0D04               	mullw	4
 28694  0057C6  0EA7               	movlw	low _diatonic_seventh_major
 28695  0057C8  6F62               	movwf	??_playDiatonicSeventhMajor& (0+255),b
 28696  0057CA  0EF2               	movlw	high _diatonic_seventh_major
 28697  0057CC  6F63               	movwf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 28698  0057CE  50F3               	movf	prodl,w,c
 28699  0057D0  2762               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 28700  0057D2  50F4               	movf	prodh,w,c
 28701  0057D4  2363               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 28702  0057D6  5167               	movf	playDiatonicSeventhMajor@i_1718& (0+255),w,b
 28703  0057D8  0D01               	mullw	1
 28704  0057DA  50F3               	movf	prodl,w,c
 28705  0057DC  2762               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 28706  0057DE  50F4               	movf	prodh,w,c
 28707  0057E0  2363               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 28708  0057E2  C062  FFF6         	movff	??_playDiatonicSeventhMajor,tblptrl
 28709  0057E6  C063  FFF7         	movff	??_playDiatonicSeventhMajor+1,tblptrh
 28710  0057EA                     	if	0	;tblptru may be non-zero
 28711  0057EA                     	endif
 28712  0057EA                     	if	0	;tblptru may be non-zero
 28713  0057EA                     	endif
 28714  0057EA  0008               	tblrd		*
 28715  0057EC  50F5               	movf	tablat,w,c
 28716  0057EE  2568               	addwf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 28717  0057F0  6EDF               	movwf	indf2,c
 28718                           
 28719                           ; BSR set to: 0
 28720  0057F2  2B67               	incf	playDiatonicSeventhMajor@i_1718& (0+255),f,b
 28721  0057F4  D7DA               	goto	l26793
 28722  0057F6                     u46460:
 28723                           
 28724                           ; BSR set to: 0
 28725                           ;keyboard.c: 1163: }
 28726                           ;keyboard.c: 1165: NUM_NOTES_PRESSED = 4;
 28727                           
 28728                           ; BSR set to: 0
 28729  0057F6  0E04               	movlw	4
 28730  0057F8  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 28731                           
 28732                           ; BSR set to: 0
 28733                           ;keyboard.c: 1168: if(LATCH == 0) {latch_was_pressed = 0;}
 28734  0057FA  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 28735                           
 28736                           ; BSR set to: 0
 28737  0057FC  9A03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 28738                           
 28739                           ; BSR set to: 0
 28740                           ;keyboard.c: 1171: finish_arpeggio_setup();
 28741                           
 28742                           ; BSR set to: 0
 28743  0057FE  EC82  F04C         	call	_finish_arpeggio_setup	;wreg free
 28744                           
 28745                           ;keyboard.c: 1173: TMR0ON = 1;
 28746  005802  8ED5               	bsf	4053,7,c	;volatile
 28747                           
 28748                           ;keyboard.c: 1175: return;
 28749  005804  0012               	return	
 28750  005806                     l1671:
 28751                           
 28752                           ;keyboard.c: 1176: }
 28753                           ;keyboard.c: 1178: if((ON_OFF == 0) && (LATCH == 0)) {
 28754  005806  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28755  005808  0012               	return	
 28756  00580A  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 28757  00580C  0012               	return	
 28758                           
 28759                           ;keyboard.c: 1180: if(NUM_NOTES_PRESSED > 0){
 28760  00580E  502F               	movf	_NUM_NOTES_PRESSED,w,c
 28761  005810  B4D8               	btfsc	status,2,c
 28762  005812  D00A               	goto	l1679
 28763                           
 28764                           ;keyboard.c: 1181: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 28765  005814  0E00               	movlw	0
 28766  005816  B003               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 28767  005818  0E01               	movlw	1
 28768  00581A  ECED  F04B         	call	_wait_one_pulse
 28769                           
 28770                           ;keyboard.c: 1182: if(note_off_was_sent == 0) {key_press_release_note_off();}
 28771  00581E  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 28772  005820  EC8B  F02E         	call	_key_press_release_note_off	;wreg free
 28773                           
 28774                           ;keyboard.c: 1183: TIMER_OVERFLOWS = 0;
 28775  005824  0E00               	movlw	0
 28776  005826  6E2E               	movwf	_TIMER_OVERFLOWS,c
 28777  005828                     l1679:
 28778                           
 28779                           ;keyboard.c: 1184: }
 28780                           ;keyboard.c: 1186: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 28781  005828  C030  F062         	movff	_parallel,??_playDiatonicSeventhMajor
 28782  00582C  0100               	movlb	0	; () banked
 28783  00582E  6B63               	clrf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 28784  005830  BF62               	btfsc	??_playDiatonicSeventhMajor& (0+255),7,b
 28785  005832  0763               	decf	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 28786  005834  5168               	movf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 28787  005836  6F64               	movwf	(??_playDiatonicSeventhMajor+2)& (0+255),b
 28788  005838  6B65               	clrf	(??_playDiatonicSeventhMajor+3)& (0+255),b
 28789  00583A  5162               	movf	??_playDiatonicSeventhMajor& (0+255),w,b
 28790  00583C  1964               	xorwf	(??_playDiatonicSeventhMajor+2)& (0+255),w,b
 28791  00583E  E106               	bnz	l26831
 28792  005840  5163               	movf	(??_playDiatonicSeventhMajor+1)& (0+255),w,b
 28793  005842  1965               	xorwf	(??_playDiatonicSeventhMajor+3)& (0+255),w,b
 28794  005844  A4D8               	btfss	status,2,c
 28795  005846  D002               	goto	l1681
 28796                           
 28797                           ; BSR set to: 0
 28798  005848  0E00               	movlw	0
 28799  00584A  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 28800  00584C                     l1681:
 28801  00584C                     l26831:
 28802                           
 28803                           ; BSR set to: 0
 28804                           ;keyboard.c: 1188: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 28805  00584C  BC03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 28806                           
 28807                           ; BSR set to: 0
 28808  00584E  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 28809  005850  D001               	goto	l1682
 28810                           
 28811                           ; BSR set to: 0
 28812                           ;keyboard.c: 1189: LATCH = 1;
 28813  005852  8004               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 28814  005854                     l1682:
 28815                           
 28816                           ; BSR set to: 0
 28817                           ;keyboard.c: 1190: }
 28818                           ;keyboard.c: 1193: if(((UN_LATCH_MODE == 0 | (UN_LATCH_MODE == 1)) && (latch_was_pressed
      +                           == 1))){
 28819  005854  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 28820  005856  D002               	goto	u46560
 28821                           
 28822                           ; BSR set to: 0
 28823  005858  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 28824  00585A  D006               	goto	l1683
 28825  00585C                     u46560:
 28826                           
 28827                           ; BSR set to: 0
 28828  00585C  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 28829  00585E  D004               	goto	l1683
 28830                           
 28831                           ; BSR set to: 0
 28832                           ;keyboard.c: 1194: NUM_NOTES_PRESSED = 0;
 28833  005860  0E00               	movlw	0
 28834  005862  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 28835                           
 28836                           ;keyboard.c: 1195: ARRAY_INDEX = 0;
 28837  005864  0E00               	movlw	0
 28838  005866  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 28839  005868                     l1683:
 28840                           
 28841                           ; BSR set to: 0
 28842                           ;keyboard.c: 1196: }
 28843                           ;keyboard.c: 1199: finish_arpeggio_setup();
 28844                           
 28845                           ; BSR set to: 0
 28846  005868  EC82  F04C         	call	_finish_arpeggio_setup	;wreg free
 28847                           
 28848                           ;keyboard.c: 1200: TMR0ON = 1;
 28849  00586C  8ED5               	bsf	4053,7,c	;volatile
 28850                           
 28851                           ;keyboard.c: 1202: return;
 28852  00586E  0012               	return	
 28853  005870                     __end_of_playDiatonicSeventhMajor:
 28854                           	opt stack 0
 28855                           tblptru	equ	0xFF8
 28856                           tblptrh	equ	0xFF7
 28857                           tblptrl	equ	0xFF6
 28858                           tablat	equ	0xFF5
 28859                           prodh	equ	0xFF4
 28860                           prodl	equ	0xFF3
 28861                           intcon	equ	0xFF2
 28862                           intcon2	equ	0xFF1
 28863                           postinc0	equ	0xFEE
 28864                           wreg	equ	0xFE8
 28865                           postinc1	equ	0xFE6
 28866                           plusw1	equ	0xFE3
 28867                           fsr1h	equ	0xFE2
 28868                           fsr1l	equ	0xFE1
 28869                           indf2	equ	0xFDF
 28870                           postinc2	equ	0xFDE
 28871                           postdec2	equ	0xFDD
 28872                           plusw2	equ	0xFDB
 28873                           fsr2h	equ	0xFDA
 28874                           fsr2l	equ	0xFD9
 28875                           status	equ	0xFD8
 28876                           
 28877 ;; *************** function _keyboard_all_note_efficient *****************
 28878 ;; Defined at:
 28879 ;;		line 590 in file "keyboard.c"
 28880 ;; Parameters:    Size  Location     Type
 28881 ;;		None
 28882 ;; Auto vars:     Size  Location     Type
 28883 ;;  pitch           1   22[BANK0 ] unsigned char 
 28884 ;; Return value:  Size  Location     Type
 28885 ;;                  1    wreg      void 
 28886 ;; Registers used:
 28887 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28888 ;; Tracked objects:
 28889 ;;		On entry : 0/0
 28890 ;;		On exit  : 0/0
 28891 ;;		Unchanged: 0/0
 28892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 28893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28894 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28896 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28897 ;;Total ram usage:        1 bytes
 28898 ;; Hardware stack levels used:    1
 28899 ;; Hardware stack levels required when called:   12
 28900 ;; This function calls:
 28901 ;;		_playThisNote
 28902 ;; This function is called by:
 28903 ;;		_processKeyboard
 28904 ;; This function uses a non-reentrant model
 28905 ;;
 28906                           
 28907                           	psect	text77
 28908  001898                     __ptext77:
 28909                           	opt stack 0
 28910  001898                     _keyboard_all_note_efficient:
 28911                           	opt stack 13
 28912                           
 28913                           ;keyboard.c: 592: unsigned char pitch;
 28914                           ;keyboard.c: 595: if((button_state_now & 0x00000001) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW1) {
 28915                           
 28916                           ;incstack = 0
 28917  001898  0100               	movlb	0	; () banked
 28918  00189A  B1D8               	btfsc	_button_state_now& (0+255),0,b
 28919                           
 28920                           ; BSR set to: 0
 28921  00189C  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 28922  00189E  D00A               	goto	l1529
 28923                           
 28924                           ; BSR set to: 0
 28925  0018A0  B1D0               	btfsc	_keyboard& (0+255),0,b
 28926  0018A2  D008               	goto	l1529
 28927                           
 28928                           ; BSR set to: 0
 28929                           ;keyboard.c: 596: pitch = C;
 28930  0018A4  0E00               	movlw	0
 28931  0018A6  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 28932                           
 28933                           ; BSR set to: 0
 28934                           ;keyboard.c: 597: ON_OFF = 1;
 28935  0018A8  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28936                           
 28937                           ; BSR set to: 0
 28938                           ;keyboard.c: 598: playThisNote(pitch);
 28939  0018AA  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 28940  0018AC  ECF0  F033         	call	_playThisNote
 28941                           
 28942                           ;keyboard.c: 599: keyboard.SW1 = 1;
 28943  0018B0  0100               	movlb	0	; () banked
 28944  0018B2  81D0               	bsf	_keyboard& (0+255),0,b
 28945  0018B4                     l1529:
 28946                           
 28947                           ; BSR set to: 0
 28948                           ;keyboard.c: 600: }
 28949                           ;keyboard.c: 602: if((button_state_now & 0x00000002) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW2) {
 28950                           
 28951                           ; BSR set to: 0
 28952  0018B4  B3D8               	btfsc	_button_state_now& (0+255),1,b
 28953                           
 28954                           ; BSR set to: 0
 28955  0018B6  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 28956  0018B8  D00A               	goto	l1530
 28957                           
 28958                           ; BSR set to: 0
 28959  0018BA  B3D0               	btfsc	_keyboard& (0+255),1,b
 28960  0018BC  D008               	goto	l1530
 28961                           
 28962                           ; BSR set to: 0
 28963                           ;keyboard.c: 603: pitch = Cs;
 28964  0018BE  0E01               	movlw	1
 28965  0018C0  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 28966                           
 28967                           ; BSR set to: 0
 28968                           ;keyboard.c: 604: ON_OFF = 1;
 28969  0018C2  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28970                           
 28971                           ; BSR set to: 0
 28972                           ;keyboard.c: 605: playThisNote(pitch);
 28973  0018C4  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 28974  0018C6  ECF0  F033         	call	_playThisNote
 28975                           
 28976                           ;keyboard.c: 606: keyboard.SW2 = 1;
 28977  0018CA  0100               	movlb	0	; () banked
 28978  0018CC  83D0               	bsf	_keyboard& (0+255),1,b
 28979  0018CE                     l1530:
 28980                           
 28981                           ; BSR set to: 0
 28982                           ;keyboard.c: 607: }
 28983                           ;keyboard.c: 609: if((button_state_now & 0x00000004) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW3) {
 28984                           
 28985                           ; BSR set to: 0
 28986  0018CE  B5D8               	btfsc	_button_state_now& (0+255),2,b
 28987                           
 28988                           ; BSR set to: 0
 28989  0018D0  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 28990  0018D2  D00A               	goto	l1531
 28991                           
 28992                           ; BSR set to: 0
 28993  0018D4  B5D0               	btfsc	_keyboard& (0+255),2,b
 28994  0018D6  D008               	goto	l1531
 28995                           
 28996                           ; BSR set to: 0
 28997                           ;keyboard.c: 610: pitch = D;
 28998  0018D8  0E02               	movlw	2
 28999  0018DA  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29000                           
 29001                           ; BSR set to: 0
 29002                           ;keyboard.c: 611: ON_OFF = 1;
 29003  0018DC  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29004                           
 29005                           ; BSR set to: 0
 29006                           ;keyboard.c: 612: playThisNote(pitch);
 29007  0018DE  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29008  0018E0  ECF0  F033         	call	_playThisNote
 29009                           
 29010                           ;keyboard.c: 613: keyboard.SW3 = 1;
 29011  0018E4  0100               	movlb	0	; () banked
 29012  0018E6  85D0               	bsf	_keyboard& (0+255),2,b
 29013  0018E8                     l1531:
 29014                           
 29015                           ; BSR set to: 0
 29016                           ;keyboard.c: 614: }
 29017                           ;keyboard.c: 615: if((button_state_now & 0x00000008) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW4) {
 29018                           
 29019                           ; BSR set to: 0
 29020  0018E8  B7D8               	btfsc	_button_state_now& (0+255),3,b
 29021                           
 29022                           ; BSR set to: 0
 29023  0018EA  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29024  0018EC  D00A               	goto	l1532
 29025                           
 29026                           ; BSR set to: 0
 29027  0018EE  B7D0               	btfsc	_keyboard& (0+255),3,b
 29028  0018F0  D008               	goto	l1532
 29029                           
 29030                           ; BSR set to: 0
 29031                           ;keyboard.c: 616: pitch = Ds;
 29032  0018F2  0E03               	movlw	3
 29033  0018F4  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29034                           
 29035                           ; BSR set to: 0
 29036                           ;keyboard.c: 617: ON_OFF = 1;
 29037  0018F6  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29038                           
 29039                           ; BSR set to: 0
 29040                           ;keyboard.c: 618: playThisNote(pitch);
 29041  0018F8  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29042  0018FA  ECF0  F033         	call	_playThisNote
 29043                           
 29044                           ;keyboard.c: 619: keyboard.SW4 = 1;
 29045  0018FE  0100               	movlb	0	; () banked
 29046  001900  87D0               	bsf	_keyboard& (0+255),3,b
 29047  001902                     l1532:
 29048                           
 29049                           ; BSR set to: 0
 29050                           ;keyboard.c: 620: }
 29051                           ;keyboard.c: 621: if((button_state_now & 0x00000010) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW5) {
 29052                           
 29053                           ; BSR set to: 0
 29054  001902  B9D8               	btfsc	_button_state_now& (0+255),4,b
 29055                           
 29056                           ; BSR set to: 0
 29057  001904  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29058  001906  D00A               	goto	l1533
 29059                           
 29060                           ; BSR set to: 0
 29061  001908  B9D0               	btfsc	_keyboard& (0+255),4,b
 29062  00190A  D008               	goto	l1533
 29063                           
 29064                           ; BSR set to: 0
 29065                           ;keyboard.c: 622: pitch = E;
 29066  00190C  0E04               	movlw	4
 29067  00190E  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29068                           
 29069                           ; BSR set to: 0
 29070                           ;keyboard.c: 623: ON_OFF = 1;
 29071  001910  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29072                           
 29073                           ; BSR set to: 0
 29074                           ;keyboard.c: 624: playThisNote(pitch);
 29075  001912  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29076  001914  ECF0  F033         	call	_playThisNote
 29077                           
 29078                           ;keyboard.c: 625: keyboard.SW5 = 1;
 29079  001918  0100               	movlb	0	; () banked
 29080  00191A  89D0               	bsf	_keyboard& (0+255),4,b
 29081  00191C                     l1533:
 29082                           
 29083                           ; BSR set to: 0
 29084                           ;keyboard.c: 626: }
 29085                           ;keyboard.c: 627: if((button_state_now & 0x00000020) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW6) {
 29086                           
 29087                           ; BSR set to: 0
 29088  00191C  BBD8               	btfsc	_button_state_now& (0+255),5,b
 29089                           
 29090                           ; BSR set to: 0
 29091  00191E  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29092  001920  D00A               	goto	l1534
 29093                           
 29094                           ; BSR set to: 0
 29095  001922  BBD0               	btfsc	_keyboard& (0+255),5,b
 29096  001924  D008               	goto	l1534
 29097                           
 29098                           ; BSR set to: 0
 29099                           ;keyboard.c: 628: pitch = F;
 29100  001926  0E05               	movlw	5
 29101  001928  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29102                           
 29103                           ; BSR set to: 0
 29104                           ;keyboard.c: 629: ON_OFF = 1;
 29105  00192A  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29106                           
 29107                           ; BSR set to: 0
 29108                           ;keyboard.c: 630: playThisNote(pitch);
 29109  00192C  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29110  00192E  ECF0  F033         	call	_playThisNote
 29111                           
 29112                           ;keyboard.c: 631: keyboard.SW6 = 1;
 29113  001932  0100               	movlb	0	; () banked
 29114  001934  8BD0               	bsf	_keyboard& (0+255),5,b
 29115  001936                     l1534:
 29116                           
 29117                           ; BSR set to: 0
 29118                           ;keyboard.c: 632: }
 29119                           ;keyboard.c: 633: if((button_state_now & 0x00000040) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW7) {
 29120                           
 29121                           ; BSR set to: 0
 29122  001936  BDD8               	btfsc	_button_state_now& (0+255),6,b
 29123                           
 29124                           ; BSR set to: 0
 29125  001938  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29126  00193A  D00A               	goto	l1535
 29127                           
 29128                           ; BSR set to: 0
 29129  00193C  BDD0               	btfsc	_keyboard& (0+255),6,b
 29130  00193E  D008               	goto	l1535
 29131                           
 29132                           ; BSR set to: 0
 29133                           ;keyboard.c: 634: pitch = Fs;
 29134  001940  0E06               	movlw	6
 29135  001942  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29136                           
 29137                           ; BSR set to: 0
 29138                           ;keyboard.c: 635: ON_OFF = 1;
 29139  001944  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29140                           
 29141                           ; BSR set to: 0
 29142                           ;keyboard.c: 636: playThisNote(pitch);
 29143  001946  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29144  001948  ECF0  F033         	call	_playThisNote
 29145                           
 29146                           ;keyboard.c: 637: keyboard.SW7 = 1;
 29147  00194C  0100               	movlb	0	; () banked
 29148  00194E  8DD0               	bsf	_keyboard& (0+255),6,b
 29149  001950                     l1535:
 29150                           
 29151                           ; BSR set to: 0
 29152                           ;keyboard.c: 638: }
 29153                           ;keyboard.c: 639: if((button_state_now & 0x00000080) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW8) {
 29154                           
 29155                           ; BSR set to: 0
 29156  001950  BFD8               	btfsc	_button_state_now& (0+255),7,b
 29157                           
 29158                           ; BSR set to: 0
 29159  001952  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29160  001954  D00A               	goto	l1536
 29161                           
 29162                           ; BSR set to: 0
 29163  001956  BFD0               	btfsc	_keyboard& (0+255),7,b
 29164  001958  D008               	goto	l1536
 29165                           
 29166                           ; BSR set to: 0
 29167                           ;keyboard.c: 640: pitch = G;
 29168  00195A  0E07               	movlw	7
 29169  00195C  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29170                           
 29171                           ; BSR set to: 0
 29172                           ;keyboard.c: 641: ON_OFF = 1;
 29173  00195E  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29174                           
 29175                           ; BSR set to: 0
 29176                           ;keyboard.c: 642: playThisNote(pitch);
 29177  001960  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29178  001962  ECF0  F033         	call	_playThisNote
 29179                           
 29180                           ;keyboard.c: 643: keyboard.SW8 = 1;
 29181  001966  0100               	movlb	0	; () banked
 29182  001968  8FD0               	bsf	_keyboard& (0+255),7,b
 29183  00196A                     l1536:
 29184                           
 29185                           ; BSR set to: 0
 29186                           ;keyboard.c: 644: }
 29187                           ;keyboard.c: 645: if((button_state_now & 0x00000100) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW9) {
 29188                           
 29189                           ; BSR set to: 0
 29190  00196A  B1D9               	btfsc	(_button_state_now+1)& (0+255),0,b
 29191                           
 29192                           ; BSR set to: 0
 29193  00196C  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29194  00196E  D00A               	goto	l1537
 29195                           
 29196                           ; BSR set to: 0
 29197  001970  B1D1               	btfsc	(_keyboard+1)& (0+255),0,b
 29198  001972  D008               	goto	l1537
 29199                           
 29200                           ; BSR set to: 0
 29201                           ;keyboard.c: 646: pitch = Gs;
 29202  001974  0E08               	movlw	8
 29203  001976  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29204                           
 29205                           ; BSR set to: 0
 29206                           ;keyboard.c: 647: ON_OFF = 1;
 29207  001978  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29208                           
 29209                           ; BSR set to: 0
 29210                           ;keyboard.c: 648: playThisNote(pitch);
 29211  00197A  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29212  00197C  ECF0  F033         	call	_playThisNote
 29213                           
 29214                           ;keyboard.c: 649: keyboard.SW9 = 1;
 29215  001980  0100               	movlb	0	; () banked
 29216  001982  81D1               	bsf	(_keyboard+1)& (0+255),0,b
 29217  001984                     l1537:
 29218                           
 29219                           ; BSR set to: 0
 29220                           ;keyboard.c: 650: }
 29221                           ;keyboard.c: 651: if((button_state_now & 0x00000200) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW10) {
 29222                           
 29223                           ; BSR set to: 0
 29224  001984  B3D9               	btfsc	(_button_state_now+1)& (0+255),1,b
 29225                           
 29226                           ; BSR set to: 0
 29227  001986  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29228  001988  D00A               	goto	l1538
 29229                           
 29230                           ; BSR set to: 0
 29231  00198A  B3D1               	btfsc	(_keyboard+1)& (0+255),1,b
 29232  00198C  D008               	goto	l1538
 29233                           
 29234                           ; BSR set to: 0
 29235                           ;keyboard.c: 652: pitch = A;
 29236  00198E  0E09               	movlw	9
 29237  001990  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29238                           
 29239                           ; BSR set to: 0
 29240                           ;keyboard.c: 653: ON_OFF = 1;
 29241  001992  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29242                           
 29243                           ; BSR set to: 0
 29244                           ;keyboard.c: 654: playThisNote(pitch);
 29245  001994  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29246  001996  ECF0  F033         	call	_playThisNote
 29247                           
 29248                           ;keyboard.c: 655: keyboard.SW10 = 1;
 29249  00199A  0100               	movlb	0	; () banked
 29250  00199C  83D1               	bsf	(_keyboard+1)& (0+255),1,b
 29251  00199E                     l1538:
 29252                           
 29253                           ; BSR set to: 0
 29254                           ;keyboard.c: 656: }
 29255                           ;keyboard.c: 657: if((button_state_now & 0x00000400) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW11) {
 29256                           
 29257                           ; BSR set to: 0
 29258  00199E  B5D9               	btfsc	(_button_state_now+1)& (0+255),2,b
 29259                           
 29260                           ; BSR set to: 0
 29261  0019A0  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29262  0019A2  D00A               	goto	l1539
 29263                           
 29264                           ; BSR set to: 0
 29265  0019A4  B5D1               	btfsc	(_keyboard+1)& (0+255),2,b
 29266  0019A6  D008               	goto	l1539
 29267                           
 29268                           ; BSR set to: 0
 29269                           ;keyboard.c: 658: pitch = As;
 29270  0019A8  0E0A               	movlw	10
 29271  0019AA  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29272                           
 29273                           ; BSR set to: 0
 29274                           ;keyboard.c: 659: ON_OFF = 1;
 29275  0019AC  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29276                           
 29277                           ; BSR set to: 0
 29278                           ;keyboard.c: 660: playThisNote(pitch);
 29279  0019AE  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29280  0019B0  ECF0  F033         	call	_playThisNote
 29281                           
 29282                           ;keyboard.c: 661: keyboard.SW11 = 1;
 29283  0019B4  0100               	movlb	0	; () banked
 29284  0019B6  85D1               	bsf	(_keyboard+1)& (0+255),2,b
 29285  0019B8                     l1539:
 29286                           
 29287                           ; BSR set to: 0
 29288                           ;keyboard.c: 662: }
 29289                           ;keyboard.c: 663: if((button_state_now & 0x00000800) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW12) {
 29290                           
 29291                           ; BSR set to: 0
 29292  0019B8  B7D9               	btfsc	(_button_state_now+1)& (0+255),3,b
 29293                           
 29294                           ; BSR set to: 0
 29295  0019BA  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29296  0019BC  D00A               	goto	l1540
 29297                           
 29298                           ; BSR set to: 0
 29299  0019BE  B7D1               	btfsc	(_keyboard+1)& (0+255),3,b
 29300  0019C0  D008               	goto	l1540
 29301                           
 29302                           ; BSR set to: 0
 29303                           ;keyboard.c: 664: pitch = B;
 29304  0019C2  0E0B               	movlw	11
 29305  0019C4  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29306                           
 29307                           ; BSR set to: 0
 29308                           ;keyboard.c: 665: ON_OFF = 1;
 29309  0019C6  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29310                           
 29311                           ; BSR set to: 0
 29312                           ;keyboard.c: 666: playThisNote(pitch);
 29313  0019C8  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29314  0019CA  ECF0  F033         	call	_playThisNote
 29315                           
 29316                           ;keyboard.c: 667: keyboard.SW12 = 1;
 29317  0019CE  0100               	movlb	0	; () banked
 29318  0019D0  87D1               	bsf	(_keyboard+1)& (0+255),3,b
 29319  0019D2                     l1540:
 29320                           
 29321                           ; BSR set to: 0
 29322                           ;keyboard.c: 668: }
 29323                           ;keyboard.c: 669: if((button_state_now & 0x00001000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW13) {
 29324                           
 29325                           ; BSR set to: 0
 29326  0019D2  B9D9               	btfsc	(_button_state_now+1)& (0+255),4,b
 29327                           
 29328                           ; BSR set to: 0
 29329  0019D4  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29330  0019D6  D00A               	goto	l1541
 29331                           
 29332                           ; BSR set to: 0
 29333  0019D8  B9D1               	btfsc	(_keyboard+1)& (0+255),4,b
 29334  0019DA  D008               	goto	l1541
 29335                           
 29336                           ; BSR set to: 0
 29337                           ;keyboard.c: 670: pitch = C2;
 29338  0019DC  0E0C               	movlw	12
 29339  0019DE  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29340                           
 29341                           ; BSR set to: 0
 29342                           ;keyboard.c: 671: ON_OFF = 1;
 29343  0019E0  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29344                           
 29345                           ; BSR set to: 0
 29346                           ;keyboard.c: 672: playThisNote(pitch);
 29347  0019E2  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29348  0019E4  ECF0  F033         	call	_playThisNote
 29349                           
 29350                           ;keyboard.c: 673: keyboard.SW13 = 1;
 29351  0019E8  0100               	movlb	0	; () banked
 29352  0019EA  89D1               	bsf	(_keyboard+1)& (0+255),4,b
 29353  0019EC                     l1541:
 29354                           
 29355                           ; BSR set to: 0
 29356                           ;keyboard.c: 674: }
 29357                           ;keyboard.c: 675: if((button_state_now & 0x00002000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW14) {
 29358                           
 29359                           ; BSR set to: 0
 29360  0019EC  BBD9               	btfsc	(_button_state_now+1)& (0+255),5,b
 29361                           
 29362                           ; BSR set to: 0
 29363  0019EE  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29364  0019F0  D00A               	goto	l1542
 29365                           
 29366                           ; BSR set to: 0
 29367  0019F2  BBD1               	btfsc	(_keyboard+1)& (0+255),5,b
 29368  0019F4  D008               	goto	l1542
 29369                           
 29370                           ; BSR set to: 0
 29371                           ;keyboard.c: 676: pitch = C2s;
 29372  0019F6  0E0D               	movlw	13
 29373  0019F8  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29374                           
 29375                           ; BSR set to: 0
 29376                           ;keyboard.c: 677: ON_OFF = 1;
 29377  0019FA  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29378                           
 29379                           ; BSR set to: 0
 29380                           ;keyboard.c: 678: playThisNote(pitch);
 29381  0019FC  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29382  0019FE  ECF0  F033         	call	_playThisNote
 29383                           
 29384                           ;keyboard.c: 679: keyboard.SW14 = 1;
 29385  001A02  0100               	movlb	0	; () banked
 29386  001A04  8BD1               	bsf	(_keyboard+1)& (0+255),5,b
 29387  001A06                     l1542:
 29388                           
 29389                           ; BSR set to: 0
 29390                           ;keyboard.c: 680: }
 29391                           ;keyboard.c: 681: if((button_state_now & 0x00004000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW15) {
 29392                           
 29393                           ; BSR set to: 0
 29394  001A06  BDD9               	btfsc	(_button_state_now+1)& (0+255),6,b
 29395                           
 29396                           ; BSR set to: 0
 29397  001A08  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29398  001A0A  D00A               	goto	l1543
 29399                           
 29400                           ; BSR set to: 0
 29401  001A0C  BDD1               	btfsc	(_keyboard+1)& (0+255),6,b
 29402  001A0E  D008               	goto	l1543
 29403                           
 29404                           ; BSR set to: 0
 29405                           ;keyboard.c: 682: pitch = D2;
 29406  001A10  0E0E               	movlw	14
 29407  001A12  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29408                           
 29409                           ; BSR set to: 0
 29410                           ;keyboard.c: 683: ON_OFF = 1;
 29411  001A14  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29412                           
 29413                           ; BSR set to: 0
 29414                           ;keyboard.c: 684: playThisNote(pitch);
 29415  001A16  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29416  001A18  ECF0  F033         	call	_playThisNote
 29417                           
 29418                           ;keyboard.c: 685: keyboard.SW15 = 1;
 29419  001A1C  0100               	movlb	0	; () banked
 29420  001A1E  8DD1               	bsf	(_keyboard+1)& (0+255),6,b
 29421  001A20                     l1543:
 29422                           
 29423                           ; BSR set to: 0
 29424                           ;keyboard.c: 686: }
 29425                           ;keyboard.c: 687: if((button_state_now & 0x00008000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW16) {
 29426                           
 29427                           ; BSR set to: 0
 29428  001A20  BFD9               	btfsc	(_button_state_now+1)& (0+255),7,b
 29429                           
 29430                           ; BSR set to: 0
 29431  001A22  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29432  001A24  D00A               	goto	l1544
 29433                           
 29434                           ; BSR set to: 0
 29435  001A26  BFD1               	btfsc	(_keyboard+1)& (0+255),7,b
 29436  001A28  D008               	goto	l1544
 29437                           
 29438                           ; BSR set to: 0
 29439                           ;keyboard.c: 688: pitch = D2s;
 29440  001A2A  0E0F               	movlw	15
 29441  001A2C  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29442                           
 29443                           ; BSR set to: 0
 29444                           ;keyboard.c: 689: ON_OFF = 1;
 29445  001A2E  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29446                           
 29447                           ; BSR set to: 0
 29448                           ;keyboard.c: 690: playThisNote(pitch);
 29449  001A30  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29450  001A32  ECF0  F033         	call	_playThisNote
 29451                           
 29452                           ;keyboard.c: 691: keyboard.SW16 = 1;
 29453  001A36  0100               	movlb	0	; () banked
 29454  001A38  8FD1               	bsf	(_keyboard+1)& (0+255),7,b
 29455  001A3A                     l1544:
 29456                           
 29457                           ; BSR set to: 0
 29458                           ;keyboard.c: 692: }
 29459                           ;keyboard.c: 693: if((button_state_now & 0x00010000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW17) {
 29460                           
 29461                           ; BSR set to: 0
 29462  001A3A  B1DA               	btfsc	(_button_state_now+2)& (0+255),0,b
 29463                           
 29464                           ; BSR set to: 0
 29465  001A3C  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29466  001A3E  D00A               	goto	l1545
 29467                           
 29468                           ; BSR set to: 0
 29469  001A40  B1D2               	btfsc	(_keyboard+2)& (0+255),0,b
 29470  001A42  D008               	goto	l1545
 29471                           
 29472                           ; BSR set to: 0
 29473                           ;keyboard.c: 694: pitch = E2;
 29474  001A44  0E10               	movlw	16
 29475  001A46  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29476                           
 29477                           ; BSR set to: 0
 29478                           ;keyboard.c: 695: ON_OFF = 1;
 29479  001A48  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29480                           
 29481                           ; BSR set to: 0
 29482                           ;keyboard.c: 696: playThisNote(pitch);
 29483  001A4A  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29484  001A4C  ECF0  F033         	call	_playThisNote
 29485                           
 29486                           ;keyboard.c: 697: keyboard.SW17 = 1;
 29487  001A50  0100               	movlb	0	; () banked
 29488  001A52  81D2               	bsf	(_keyboard+2)& (0+255),0,b
 29489  001A54                     l1545:
 29490                           
 29491                           ; BSR set to: 0
 29492                           ;keyboard.c: 698: }
 29493                           ;keyboard.c: 699: if((button_state_now & 0x00020000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW18) {
 29494                           
 29495                           ; BSR set to: 0
 29496  001A54  B3DA               	btfsc	(_button_state_now+2)& (0+255),1,b
 29497                           
 29498                           ; BSR set to: 0
 29499  001A56  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29500  001A58  D00A               	goto	l1546
 29501                           
 29502                           ; BSR set to: 0
 29503  001A5A  B3D2               	btfsc	(_keyboard+2)& (0+255),1,b
 29504  001A5C  D008               	goto	l1546
 29505                           
 29506                           ; BSR set to: 0
 29507                           ;keyboard.c: 700: pitch = F2;
 29508  001A5E  0E11               	movlw	17
 29509  001A60  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29510                           
 29511                           ; BSR set to: 0
 29512                           ;keyboard.c: 701: ON_OFF = 1;
 29513  001A62  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29514                           
 29515                           ; BSR set to: 0
 29516                           ;keyboard.c: 702: playThisNote(pitch);
 29517  001A64  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29518  001A66  ECF0  F033         	call	_playThisNote
 29519                           
 29520                           ;keyboard.c: 703: keyboard.SW18 = 1;
 29521  001A6A  0100               	movlb	0	; () banked
 29522  001A6C  83D2               	bsf	(_keyboard+2)& (0+255),1,b
 29523  001A6E                     l1546:
 29524                           
 29525                           ; BSR set to: 0
 29526                           ;keyboard.c: 704: }
 29527                           ;keyboard.c: 705: if((button_state_now & 0x00040000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW19) {
 29528                           
 29529                           ; BSR set to: 0
 29530  001A6E  B5DA               	btfsc	(_button_state_now+2)& (0+255),2,b
 29531                           
 29532                           ; BSR set to: 0
 29533  001A70  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29534  001A72  D00A               	goto	l1547
 29535                           
 29536                           ; BSR set to: 0
 29537  001A74  B5D2               	btfsc	(_keyboard+2)& (0+255),2,b
 29538  001A76  D008               	goto	l1547
 29539                           
 29540                           ; BSR set to: 0
 29541                           ;keyboard.c: 706: pitch = F2s;
 29542  001A78  0E12               	movlw	18
 29543  001A7A  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29544                           
 29545                           ; BSR set to: 0
 29546                           ;keyboard.c: 707: ON_OFF = 1;
 29547  001A7C  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29548                           
 29549                           ; BSR set to: 0
 29550                           ;keyboard.c: 708: playThisNote(pitch);
 29551  001A7E  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29552  001A80  ECF0  F033         	call	_playThisNote
 29553                           
 29554                           ;keyboard.c: 709: keyboard.SW19 = 1;
 29555  001A84  0100               	movlb	0	; () banked
 29556  001A86  85D2               	bsf	(_keyboard+2)& (0+255),2,b
 29557  001A88                     l1547:
 29558                           
 29559                           ; BSR set to: 0
 29560                           ;keyboard.c: 710: }
 29561                           ;keyboard.c: 711: if((button_state_now & 0x00080000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW20) {
 29562                           
 29563                           ; BSR set to: 0
 29564  001A88  B7DA               	btfsc	(_button_state_now+2)& (0+255),3,b
 29565                           
 29566                           ; BSR set to: 0
 29567  001A8A  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29568  001A8C  D00A               	goto	l1548
 29569                           
 29570                           ; BSR set to: 0
 29571  001A8E  B7D2               	btfsc	(_keyboard+2)& (0+255),3,b
 29572  001A90  D008               	goto	l1548
 29573                           
 29574                           ; BSR set to: 0
 29575                           ;keyboard.c: 712: pitch = G2;
 29576  001A92  0E13               	movlw	19
 29577  001A94  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29578                           
 29579                           ; BSR set to: 0
 29580                           ;keyboard.c: 713: ON_OFF = 1;
 29581  001A96  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29582                           
 29583                           ; BSR set to: 0
 29584                           ;keyboard.c: 714: playThisNote(pitch);
 29585  001A98  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29586  001A9A  ECF0  F033         	call	_playThisNote
 29587                           
 29588                           ;keyboard.c: 715: keyboard.SW20 = 1;
 29589  001A9E  0100               	movlb	0	; () banked
 29590  001AA0  87D2               	bsf	(_keyboard+2)& (0+255),3,b
 29591  001AA2                     l1548:
 29592                           
 29593                           ; BSR set to: 0
 29594                           ;keyboard.c: 716: }
 29595                           ;keyboard.c: 717: if((button_state_now & 0x00100000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW21) {
 29596                           
 29597                           ; BSR set to: 0
 29598  001AA2  B9DA               	btfsc	(_button_state_now+2)& (0+255),4,b
 29599                           
 29600                           ; BSR set to: 0
 29601  001AA4  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29602  001AA6  D00A               	goto	l1549
 29603                           
 29604                           ; BSR set to: 0
 29605  001AA8  B9D2               	btfsc	(_keyboard+2)& (0+255),4,b
 29606  001AAA  D008               	goto	l1549
 29607                           
 29608                           ; BSR set to: 0
 29609                           ;keyboard.c: 718: pitch = G2s;
 29610  001AAC  0E14               	movlw	20
 29611  001AAE  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29612                           
 29613                           ; BSR set to: 0
 29614                           ;keyboard.c: 719: ON_OFF = 1;
 29615  001AB0  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29616                           
 29617                           ; BSR set to: 0
 29618                           ;keyboard.c: 720: playThisNote(pitch);
 29619  001AB2  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29620  001AB4  ECF0  F033         	call	_playThisNote
 29621                           
 29622                           ;keyboard.c: 721: keyboard.SW21 = 1;
 29623  001AB8  0100               	movlb	0	; () banked
 29624  001ABA  89D2               	bsf	(_keyboard+2)& (0+255),4,b
 29625  001ABC                     l1549:
 29626                           
 29627                           ; BSR set to: 0
 29628                           ;keyboard.c: 722: }
 29629                           ;keyboard.c: 723: if((button_state_now & 0x00200000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW22) {
 29630                           
 29631                           ; BSR set to: 0
 29632  001ABC  BBDA               	btfsc	(_button_state_now+2)& (0+255),5,b
 29633                           
 29634                           ; BSR set to: 0
 29635  001ABE  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29636  001AC0  D00A               	goto	l1550
 29637                           
 29638                           ; BSR set to: 0
 29639  001AC2  BBD2               	btfsc	(_keyboard+2)& (0+255),5,b
 29640  001AC4  D008               	goto	l1550
 29641                           
 29642                           ; BSR set to: 0
 29643                           ;keyboard.c: 724: pitch = A2;
 29644  001AC6  0E15               	movlw	21
 29645  001AC8  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29646                           
 29647                           ; BSR set to: 0
 29648                           ;keyboard.c: 725: ON_OFF = 1;
 29649  001ACA  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29650                           
 29651                           ; BSR set to: 0
 29652                           ;keyboard.c: 726: playThisNote(pitch);
 29653  001ACC  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29654  001ACE  ECF0  F033         	call	_playThisNote
 29655                           
 29656                           ;keyboard.c: 727: keyboard.SW22 = 1;
 29657  001AD2  0100               	movlb	0	; () banked
 29658  001AD4  8BD2               	bsf	(_keyboard+2)& (0+255),5,b
 29659  001AD6                     l1550:
 29660                           
 29661                           ; BSR set to: 0
 29662                           ;keyboard.c: 728: }
 29663                           ;keyboard.c: 729: if((button_state_now & 0x00400000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW23) {
 29664                           
 29665                           ; BSR set to: 0
 29666  001AD6  BDDA               	btfsc	(_button_state_now+2)& (0+255),6,b
 29667                           
 29668                           ; BSR set to: 0
 29669  001AD8  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29670  001ADA  D00A               	goto	l1551
 29671                           
 29672                           ; BSR set to: 0
 29673  001ADC  BDD2               	btfsc	(_keyboard+2)& (0+255),6,b
 29674  001ADE  D008               	goto	l1551
 29675                           
 29676                           ; BSR set to: 0
 29677                           ;keyboard.c: 730: pitch = A2s;
 29678  001AE0  0E16               	movlw	22
 29679  001AE2  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29680                           
 29681                           ; BSR set to: 0
 29682                           ;keyboard.c: 731: ON_OFF = 1;
 29683  001AE4  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29684                           
 29685                           ; BSR set to: 0
 29686                           ;keyboard.c: 732: playThisNote(pitch);
 29687  001AE6  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29688  001AE8  ECF0  F033         	call	_playThisNote
 29689                           
 29690                           ;keyboard.c: 733: keyboard.SW23 = 1;
 29691  001AEC  0100               	movlb	0	; () banked
 29692  001AEE  8DD2               	bsf	(_keyboard+2)& (0+255),6,b
 29693  001AF0                     l1551:
 29694                           
 29695                           ; BSR set to: 0
 29696                           ;keyboard.c: 734: }
 29697                           ;keyboard.c: 735: if((button_state_now & 0x00800000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW24) {
 29698                           
 29699                           ; BSR set to: 0
 29700  001AF0  BFDA               	btfsc	(_button_state_now+2)& (0+255),7,b
 29701                           
 29702                           ; BSR set to: 0
 29703  001AF2  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29704  001AF4  D00A               	goto	l1552
 29705                           
 29706                           ; BSR set to: 0
 29707  001AF6  BFD2               	btfsc	(_keyboard+2)& (0+255),7,b
 29708  001AF8  D008               	goto	l1552
 29709                           
 29710                           ; BSR set to: 0
 29711                           ;keyboard.c: 736: pitch = B2;
 29712  001AFA  0E17               	movlw	23
 29713  001AFC  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29714                           
 29715                           ; BSR set to: 0
 29716                           ;keyboard.c: 737: ON_OFF = 1;
 29717  001AFE  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29718                           
 29719                           ; BSR set to: 0
 29720                           ;keyboard.c: 738: playThisNote(pitch);
 29721  001B00  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29722  001B02  ECF0  F033         	call	_playThisNote
 29723                           
 29724                           ;keyboard.c: 739: keyboard.SW24 = 1;
 29725  001B06  0100               	movlb	0	; () banked
 29726  001B08  8FD2               	bsf	(_keyboard+2)& (0+255),7,b
 29727  001B0A                     l1552:
 29728                           
 29729                           ; BSR set to: 0
 29730                           ;keyboard.c: 740: }
 29731                           ;keyboard.c: 741: if((button_state_now & 0x01000000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW25) {
 29732                           
 29733                           ; BSR set to: 0
 29734  001B0A  B1DB               	btfsc	(_button_state_now+3)& (0+255),0,b
 29735                           
 29736                           ; BSR set to: 0
 29737  001B0C  B7DB               	btfsc	(_button_state_now+3)& (0+255),3,b
 29738  001B0E  D00A               	goto	l1553
 29739                           
 29740                           ; BSR set to: 0
 29741  001B10  B1D3               	btfsc	(_keyboard+3)& (0+255),0,b
 29742  001B12  D008               	goto	l1553
 29743                           
 29744                           ; BSR set to: 0
 29745                           ;keyboard.c: 742: pitch = C3;
 29746  001B14  0E18               	movlw	24
 29747  001B16  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29748                           
 29749                           ; BSR set to: 0
 29750                           ;keyboard.c: 743: ON_OFF = 1;
 29751  001B18  8E05               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29752                           
 29753                           ; BSR set to: 0
 29754                           ;keyboard.c: 744: playThisNote(pitch);
 29755  001B1A  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29756  001B1C  ECF0  F033         	call	_playThisNote
 29757                           
 29758                           ;keyboard.c: 745: keyboard.SW25 = 1;
 29759  001B20  0100               	movlb	0	; () banked
 29760  001B22  81D3               	bsf	(_keyboard+3)& (0+255),0,b
 29761  001B24                     l1553:
 29762                           
 29763                           ; BSR set to: 0
 29764                           ;keyboard.c: 746: }
 29765                           ;keyboard.c: 749: if(((button_state_last & 0x00000001)) && ((button_state_now & 0x000000
      +                          01) == 0) && keyboard.SW1) {
 29766                           
 29767                           ; BSR set to: 0
 29768  001B24  B1D4               	btfsc	_button_state_last& (0+255),0,b
 29769                           
 29770                           ; BSR set to: 0
 29771  001B26  B1D8               	btfsc	_button_state_now& (0+255),0,b
 29772  001B28  D00A               	goto	l1554
 29773                           
 29774                           ; BSR set to: 0
 29775  001B2A  A1D0               	btfss	_keyboard& (0+255),0,b
 29776  001B2C  D008               	goto	l1554
 29777                           
 29778                           ; BSR set to: 0
 29779                           ;keyboard.c: 750: pitch = C;
 29780  001B2E  0E00               	movlw	0
 29781  001B30  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29782                           
 29783                           ; BSR set to: 0
 29784                           ;keyboard.c: 751: ON_OFF = 0;
 29785  001B32  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29786                           
 29787                           ; BSR set to: 0
 29788                           ;keyboard.c: 752: playThisNote(pitch);
 29789  001B34  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29790  001B36  ECF0  F033         	call	_playThisNote
 29791                           
 29792                           ;keyboard.c: 753: keyboard.SW1 = 0;
 29793  001B3A  0100               	movlb	0	; () banked
 29794  001B3C  91D0               	bcf	_keyboard& (0+255),0,b
 29795  001B3E                     l1554:
 29796                           
 29797                           ; BSR set to: 0
 29798                           ;keyboard.c: 754: }
 29799                           ;keyboard.c: 755: if(((button_state_last & 0x00000002)) && ((button_state_now & 0x000000
      +                          02) == 0) && keyboard.SW2) {
 29800                           
 29801                           ; BSR set to: 0
 29802  001B3E  B3D4               	btfsc	_button_state_last& (0+255),1,b
 29803                           
 29804                           ; BSR set to: 0
 29805  001B40  B3D8               	btfsc	_button_state_now& (0+255),1,b
 29806  001B42  D00A               	goto	l1555
 29807                           
 29808                           ; BSR set to: 0
 29809  001B44  A3D0               	btfss	_keyboard& (0+255),1,b
 29810  001B46  D008               	goto	l1555
 29811                           
 29812                           ; BSR set to: 0
 29813                           ;keyboard.c: 756: pitch = Cs;
 29814  001B48  0E01               	movlw	1
 29815  001B4A  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29816                           
 29817                           ; BSR set to: 0
 29818                           ;keyboard.c: 757: ON_OFF = 0;
 29819  001B4C  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29820                           
 29821                           ; BSR set to: 0
 29822                           ;keyboard.c: 758: playThisNote(pitch);
 29823  001B4E  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29824  001B50  ECF0  F033         	call	_playThisNote
 29825                           
 29826                           ;keyboard.c: 759: keyboard.SW2 = 0;
 29827  001B54  0100               	movlb	0	; () banked
 29828  001B56  93D0               	bcf	_keyboard& (0+255),1,b
 29829  001B58                     l1555:
 29830                           
 29831                           ; BSR set to: 0
 29832                           ;keyboard.c: 760: }
 29833                           ;keyboard.c: 761: if(((button_state_last & 0x00000004)) && ((button_state_now & 0x000000
      +                          04) == 0) && keyboard.SW3) {
 29834                           
 29835                           ; BSR set to: 0
 29836  001B58  B5D4               	btfsc	_button_state_last& (0+255),2,b
 29837                           
 29838                           ; BSR set to: 0
 29839  001B5A  B5D8               	btfsc	_button_state_now& (0+255),2,b
 29840  001B5C  D00A               	goto	l1556
 29841                           
 29842                           ; BSR set to: 0
 29843  001B5E  A5D0               	btfss	_keyboard& (0+255),2,b
 29844  001B60  D008               	goto	l1556
 29845                           
 29846                           ; BSR set to: 0
 29847                           ;keyboard.c: 762: pitch = D;
 29848  001B62  0E02               	movlw	2
 29849  001B64  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29850                           
 29851                           ; BSR set to: 0
 29852                           ;keyboard.c: 763: ON_OFF = 0;
 29853  001B66  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29854                           
 29855                           ; BSR set to: 0
 29856                           ;keyboard.c: 764: playThisNote(pitch);
 29857  001B68  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29858  001B6A  ECF0  F033         	call	_playThisNote
 29859                           
 29860                           ;keyboard.c: 765: keyboard.SW3 = 0;
 29861  001B6E  0100               	movlb	0	; () banked
 29862  001B70  95D0               	bcf	_keyboard& (0+255),2,b
 29863  001B72                     l1556:
 29864                           
 29865                           ; BSR set to: 0
 29866                           ;keyboard.c: 766: }
 29867                           ;keyboard.c: 767: if(((button_state_last & 0x00000008)) && ((button_state_now & 0x000000
      +                          08) == 0) && keyboard.SW4) {
 29868                           
 29869                           ; BSR set to: 0
 29870  001B72  B7D4               	btfsc	_button_state_last& (0+255),3,b
 29871                           
 29872                           ; BSR set to: 0
 29873  001B74  B7D8               	btfsc	_button_state_now& (0+255),3,b
 29874  001B76  D00A               	goto	l1557
 29875                           
 29876                           ; BSR set to: 0
 29877  001B78  A7D0               	btfss	_keyboard& (0+255),3,b
 29878  001B7A  D008               	goto	l1557
 29879                           
 29880                           ; BSR set to: 0
 29881                           ;keyboard.c: 768: pitch = Ds;
 29882  001B7C  0E03               	movlw	3
 29883  001B7E  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29884                           
 29885                           ; BSR set to: 0
 29886                           ;keyboard.c: 769: ON_OFF = 0;
 29887  001B80  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29888                           
 29889                           ; BSR set to: 0
 29890                           ;keyboard.c: 770: playThisNote(pitch);
 29891  001B82  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29892  001B84  ECF0  F033         	call	_playThisNote
 29893                           
 29894                           ;keyboard.c: 771: keyboard.SW4 = 0;
 29895  001B88  0100               	movlb	0	; () banked
 29896  001B8A  97D0               	bcf	_keyboard& (0+255),3,b
 29897  001B8C                     l1557:
 29898                           
 29899                           ; BSR set to: 0
 29900                           ;keyboard.c: 772: }
 29901                           ;keyboard.c: 773: if(((button_state_last & 0x00000010)) && ((button_state_now & 0x000000
      +                          10) == 0) && keyboard.SW5) {
 29902                           
 29903                           ; BSR set to: 0
 29904  001B8C  B9D4               	btfsc	_button_state_last& (0+255),4,b
 29905                           
 29906                           ; BSR set to: 0
 29907  001B8E  B9D8               	btfsc	_button_state_now& (0+255),4,b
 29908  001B90  D00A               	goto	l1558
 29909                           
 29910                           ; BSR set to: 0
 29911  001B92  A9D0               	btfss	_keyboard& (0+255),4,b
 29912  001B94  D008               	goto	l1558
 29913                           
 29914                           ; BSR set to: 0
 29915                           ;keyboard.c: 774: pitch = E;
 29916  001B96  0E04               	movlw	4
 29917  001B98  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29918                           
 29919                           ; BSR set to: 0
 29920                           ;keyboard.c: 775: ON_OFF = 0;
 29921  001B9A  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29922                           
 29923                           ; BSR set to: 0
 29924                           ;keyboard.c: 776: playThisNote(pitch);
 29925  001B9C  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29926  001B9E  ECF0  F033         	call	_playThisNote
 29927                           
 29928                           ;keyboard.c: 777: keyboard.SW5 = 0;
 29929  001BA2  0100               	movlb	0	; () banked
 29930  001BA4  99D0               	bcf	_keyboard& (0+255),4,b
 29931  001BA6                     l1558:
 29932                           
 29933                           ; BSR set to: 0
 29934                           ;keyboard.c: 778: }
 29935                           ;keyboard.c: 779: if(((button_state_last & 0x00000020)) && ((button_state_now & 0x000000
      +                          20) == 0) && keyboard.SW6) {
 29936                           
 29937                           ; BSR set to: 0
 29938  001BA6  BBD4               	btfsc	_button_state_last& (0+255),5,b
 29939                           
 29940                           ; BSR set to: 0
 29941  001BA8  BBD8               	btfsc	_button_state_now& (0+255),5,b
 29942  001BAA  D00A               	goto	l1559
 29943                           
 29944                           ; BSR set to: 0
 29945  001BAC  ABD0               	btfss	_keyboard& (0+255),5,b
 29946  001BAE  D008               	goto	l1559
 29947                           
 29948                           ; BSR set to: 0
 29949                           ;keyboard.c: 780: pitch = F;
 29950  001BB0  0E05               	movlw	5
 29951  001BB2  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29952                           
 29953                           ; BSR set to: 0
 29954                           ;keyboard.c: 781: ON_OFF = 0;
 29955  001BB4  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29956                           
 29957                           ; BSR set to: 0
 29958                           ;keyboard.c: 782: playThisNote(pitch);
 29959  001BB6  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29960  001BB8  ECF0  F033         	call	_playThisNote
 29961                           
 29962                           ;keyboard.c: 783: keyboard.SW6 = 0;
 29963  001BBC  0100               	movlb	0	; () banked
 29964  001BBE  9BD0               	bcf	_keyboard& (0+255),5,b
 29965  001BC0                     l1559:
 29966                           
 29967                           ; BSR set to: 0
 29968                           ;keyboard.c: 784: }
 29969                           ;keyboard.c: 785: if(((button_state_last & 0x00000040)) && ((button_state_now & 0x000000
      +                          40) == 0) && keyboard.SW7) {
 29970                           
 29971                           ; BSR set to: 0
 29972  001BC0  BDD4               	btfsc	_button_state_last& (0+255),6,b
 29973                           
 29974                           ; BSR set to: 0
 29975  001BC2  BDD8               	btfsc	_button_state_now& (0+255),6,b
 29976  001BC4  D00A               	goto	l1560
 29977                           
 29978                           ; BSR set to: 0
 29979  001BC6  ADD0               	btfss	_keyboard& (0+255),6,b
 29980  001BC8  D008               	goto	l1560
 29981                           
 29982                           ; BSR set to: 0
 29983                           ;keyboard.c: 786: pitch = Fs;
 29984  001BCA  0E06               	movlw	6
 29985  001BCC  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29986                           
 29987                           ; BSR set to: 0
 29988                           ;keyboard.c: 787: ON_OFF = 0;
 29989  001BCE  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29990                           
 29991                           ; BSR set to: 0
 29992                           ;keyboard.c: 788: playThisNote(pitch);
 29993  001BD0  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29994  001BD2  ECF0  F033         	call	_playThisNote
 29995                           
 29996                           ;keyboard.c: 789: keyboard.SW7 = 0;
 29997  001BD6  0100               	movlb	0	; () banked
 29998  001BD8  9DD0               	bcf	_keyboard& (0+255),6,b
 29999  001BDA                     l1560:
 30000                           
 30001                           ; BSR set to: 0
 30002                           ;keyboard.c: 790: }
 30003                           ;keyboard.c: 791: if(((button_state_last & 0x00000080)) && ((button_state_now & 0x000000
      +                          80) == 0) && keyboard.SW8) {
 30004                           
 30005                           ; BSR set to: 0
 30006  001BDA  BFD4               	btfsc	_button_state_last& (0+255),7,b
 30007                           
 30008                           ; BSR set to: 0
 30009  001BDC  BFD8               	btfsc	_button_state_now& (0+255),7,b
 30010  001BDE  D00A               	goto	l1561
 30011                           
 30012                           ; BSR set to: 0
 30013  001BE0  AFD0               	btfss	_keyboard& (0+255),7,b
 30014  001BE2  D008               	goto	l1561
 30015                           
 30016                           ; BSR set to: 0
 30017                           ;keyboard.c: 792: pitch = G;
 30018  001BE4  0E07               	movlw	7
 30019  001BE6  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30020                           
 30021                           ; BSR set to: 0
 30022                           ;keyboard.c: 793: ON_OFF = 0;
 30023  001BE8  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30024                           
 30025                           ; BSR set to: 0
 30026                           ;keyboard.c: 794: playThisNote(pitch);
 30027  001BEA  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30028  001BEC  ECF0  F033         	call	_playThisNote
 30029                           
 30030                           ;keyboard.c: 795: keyboard.SW8 = 0;
 30031  001BF0  0100               	movlb	0	; () banked
 30032  001BF2  9FD0               	bcf	_keyboard& (0+255),7,b
 30033  001BF4                     l1561:
 30034                           
 30035                           ; BSR set to: 0
 30036                           ;keyboard.c: 796: }
 30037                           ;keyboard.c: 797: if(((button_state_last & 0x00000100)) && ((button_state_now & 0x000001
      +                          00) == 0) && keyboard.SW9) {
 30038                           
 30039                           ; BSR set to: 0
 30040  001BF4  B1D5               	btfsc	(_button_state_last+1)& (0+255),0,b
 30041                           
 30042                           ; BSR set to: 0
 30043  001BF6  B1D9               	btfsc	(_button_state_now+1)& (0+255),0,b
 30044  001BF8  D00A               	goto	l1562
 30045                           
 30046                           ; BSR set to: 0
 30047  001BFA  A1D1               	btfss	(_keyboard+1)& (0+255),0,b
 30048  001BFC  D008               	goto	l1562
 30049                           
 30050                           ; BSR set to: 0
 30051                           ;keyboard.c: 798: pitch = Gs;
 30052  001BFE  0E08               	movlw	8
 30053  001C00  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30054                           
 30055                           ; BSR set to: 0
 30056                           ;keyboard.c: 799: ON_OFF = 0;
 30057  001C02  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30058                           
 30059                           ; BSR set to: 0
 30060                           ;keyboard.c: 800: playThisNote(pitch);
 30061  001C04  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30062  001C06  ECF0  F033         	call	_playThisNote
 30063                           
 30064                           ;keyboard.c: 801: keyboard.SW9 = 0;
 30065  001C0A  0100               	movlb	0	; () banked
 30066  001C0C  91D1               	bcf	(_keyboard+1)& (0+255),0,b
 30067  001C0E                     l1562:
 30068                           
 30069                           ; BSR set to: 0
 30070                           ;keyboard.c: 802: }
 30071                           ;keyboard.c: 803: if(((button_state_last & 0x00000200)) && ((button_state_now & 0x000002
      +                          00) == 0) && keyboard.SW10) {
 30072                           
 30073                           ; BSR set to: 0
 30074  001C0E  B3D5               	btfsc	(_button_state_last+1)& (0+255),1,b
 30075                           
 30076                           ; BSR set to: 0
 30077  001C10  B3D9               	btfsc	(_button_state_now+1)& (0+255),1,b
 30078  001C12  D00A               	goto	l1563
 30079                           
 30080                           ; BSR set to: 0
 30081  001C14  A3D1               	btfss	(_keyboard+1)& (0+255),1,b
 30082  001C16  D008               	goto	l1563
 30083                           
 30084                           ; BSR set to: 0
 30085                           ;keyboard.c: 804: pitch = A;
 30086  001C18  0E09               	movlw	9
 30087  001C1A  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30088                           
 30089                           ; BSR set to: 0
 30090                           ;keyboard.c: 805: ON_OFF = 0;
 30091  001C1C  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30092                           
 30093                           ; BSR set to: 0
 30094                           ;keyboard.c: 806: playThisNote(pitch);
 30095  001C1E  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30096  001C20  ECF0  F033         	call	_playThisNote
 30097                           
 30098                           ;keyboard.c: 807: keyboard.SW10 = 0;
 30099  001C24  0100               	movlb	0	; () banked
 30100  001C26  93D1               	bcf	(_keyboard+1)& (0+255),1,b
 30101  001C28                     l1563:
 30102                           
 30103                           ; BSR set to: 0
 30104                           ;keyboard.c: 808: }
 30105                           ;keyboard.c: 809: if(((button_state_last & 0x00000400)) && ((button_state_now & 0x000004
      +                          00) == 0) && keyboard.SW11) {
 30106                           
 30107                           ; BSR set to: 0
 30108  001C28  B5D5               	btfsc	(_button_state_last+1)& (0+255),2,b
 30109                           
 30110                           ; BSR set to: 0
 30111  001C2A  B5D9               	btfsc	(_button_state_now+1)& (0+255),2,b
 30112  001C2C  D00A               	goto	l1564
 30113                           
 30114                           ; BSR set to: 0
 30115  001C2E  A5D1               	btfss	(_keyboard+1)& (0+255),2,b
 30116  001C30  D008               	goto	l1564
 30117                           
 30118                           ; BSR set to: 0
 30119                           ;keyboard.c: 810: pitch = As;
 30120  001C32  0E0A               	movlw	10
 30121  001C34  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30122                           
 30123                           ; BSR set to: 0
 30124                           ;keyboard.c: 811: ON_OFF = 0;
 30125  001C36  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30126                           
 30127                           ; BSR set to: 0
 30128                           ;keyboard.c: 812: playThisNote(pitch);
 30129  001C38  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30130  001C3A  ECF0  F033         	call	_playThisNote
 30131                           
 30132                           ;keyboard.c: 813: keyboard.SW11 = 0;
 30133  001C3E  0100               	movlb	0	; () banked
 30134  001C40  95D1               	bcf	(_keyboard+1)& (0+255),2,b
 30135  001C42                     l1564:
 30136                           
 30137                           ; BSR set to: 0
 30138                           ;keyboard.c: 814: }
 30139                           ;keyboard.c: 815: if(((button_state_last & 0x00000800)) && ((button_state_now & 0x000008
      +                          00) == 0) && keyboard.SW12) {
 30140                           
 30141                           ; BSR set to: 0
 30142  001C42  B7D5               	btfsc	(_button_state_last+1)& (0+255),3,b
 30143                           
 30144                           ; BSR set to: 0
 30145  001C44  B7D9               	btfsc	(_button_state_now+1)& (0+255),3,b
 30146  001C46  D00A               	goto	l1565
 30147                           
 30148                           ; BSR set to: 0
 30149  001C48  A7D1               	btfss	(_keyboard+1)& (0+255),3,b
 30150  001C4A  D008               	goto	l1565
 30151                           
 30152                           ; BSR set to: 0
 30153                           ;keyboard.c: 816: pitch = B;
 30154  001C4C  0E0B               	movlw	11
 30155  001C4E  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30156                           
 30157                           ; BSR set to: 0
 30158                           ;keyboard.c: 817: ON_OFF = 0;
 30159  001C50  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30160                           
 30161                           ; BSR set to: 0
 30162                           ;keyboard.c: 818: playThisNote(pitch);
 30163  001C52  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30164  001C54  ECF0  F033         	call	_playThisNote
 30165                           
 30166                           ;keyboard.c: 819: keyboard.SW12 = 0;
 30167  001C58  0100               	movlb	0	; () banked
 30168  001C5A  97D1               	bcf	(_keyboard+1)& (0+255),3,b
 30169  001C5C                     l1565:
 30170                           
 30171                           ; BSR set to: 0
 30172                           ;keyboard.c: 820: }
 30173                           ;keyboard.c: 821: if(((button_state_last & 0x00001000)) && ((button_state_now & 0x000010
      +                          00) == 0) && keyboard.SW13) {
 30174                           
 30175                           ; BSR set to: 0
 30176  001C5C  B9D5               	btfsc	(_button_state_last+1)& (0+255),4,b
 30177                           
 30178                           ; BSR set to: 0
 30179  001C5E  B9D9               	btfsc	(_button_state_now+1)& (0+255),4,b
 30180  001C60  D00A               	goto	l1566
 30181                           
 30182                           ; BSR set to: 0
 30183  001C62  A9D1               	btfss	(_keyboard+1)& (0+255),4,b
 30184  001C64  D008               	goto	l1566
 30185                           
 30186                           ; BSR set to: 0
 30187                           ;keyboard.c: 822: pitch = C2;
 30188  001C66  0E0C               	movlw	12
 30189  001C68  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30190                           
 30191                           ; BSR set to: 0
 30192                           ;keyboard.c: 823: ON_OFF = 0;
 30193  001C6A  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30194                           
 30195                           ; BSR set to: 0
 30196                           ;keyboard.c: 824: playThisNote(pitch);
 30197  001C6C  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30198  001C6E  ECF0  F033         	call	_playThisNote
 30199                           
 30200                           ;keyboard.c: 825: keyboard.SW13 = 0;
 30201  001C72  0100               	movlb	0	; () banked
 30202  001C74  99D1               	bcf	(_keyboard+1)& (0+255),4,b
 30203  001C76                     l1566:
 30204                           
 30205                           ; BSR set to: 0
 30206                           ;keyboard.c: 826: }
 30207                           ;keyboard.c: 827: if(((button_state_last & 0x00002000)) && ((button_state_now & 0x000020
      +                          00) == 0) && keyboard.SW14) {
 30208                           
 30209                           ; BSR set to: 0
 30210  001C76  BBD5               	btfsc	(_button_state_last+1)& (0+255),5,b
 30211                           
 30212                           ; BSR set to: 0
 30213  001C78  BBD9               	btfsc	(_button_state_now+1)& (0+255),5,b
 30214  001C7A  D00A               	goto	l1567
 30215                           
 30216                           ; BSR set to: 0
 30217  001C7C  ABD1               	btfss	(_keyboard+1)& (0+255),5,b
 30218  001C7E  D008               	goto	l1567
 30219                           
 30220                           ; BSR set to: 0
 30221                           ;keyboard.c: 828: pitch = C2s;
 30222  001C80  0E0D               	movlw	13
 30223  001C82  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30224                           
 30225                           ; BSR set to: 0
 30226                           ;keyboard.c: 829: ON_OFF = 0;
 30227  001C84  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30228                           
 30229                           ; BSR set to: 0
 30230                           ;keyboard.c: 830: playThisNote(pitch);
 30231  001C86  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30232  001C88  ECF0  F033         	call	_playThisNote
 30233                           
 30234                           ;keyboard.c: 831: keyboard.SW14 = 0;
 30235  001C8C  0100               	movlb	0	; () banked
 30236  001C8E  9BD1               	bcf	(_keyboard+1)& (0+255),5,b
 30237  001C90                     l1567:
 30238                           
 30239                           ; BSR set to: 0
 30240                           ;keyboard.c: 832: }
 30241                           ;keyboard.c: 833: if(((button_state_last & 0x00004000)) && ((button_state_now & 0x000040
      +                          00) == 0) && keyboard.SW15) {
 30242                           
 30243                           ; BSR set to: 0
 30244  001C90  BDD5               	btfsc	(_button_state_last+1)& (0+255),6,b
 30245                           
 30246                           ; BSR set to: 0
 30247  001C92  BDD9               	btfsc	(_button_state_now+1)& (0+255),6,b
 30248  001C94  D00A               	goto	l1568
 30249                           
 30250                           ; BSR set to: 0
 30251  001C96  ADD1               	btfss	(_keyboard+1)& (0+255),6,b
 30252  001C98  D008               	goto	l1568
 30253                           
 30254                           ; BSR set to: 0
 30255                           ;keyboard.c: 834: pitch = D2;
 30256  001C9A  0E0E               	movlw	14
 30257  001C9C  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30258                           
 30259                           ; BSR set to: 0
 30260                           ;keyboard.c: 835: ON_OFF = 0;
 30261  001C9E  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30262                           
 30263                           ; BSR set to: 0
 30264                           ;keyboard.c: 836: playThisNote(pitch);
 30265  001CA0  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30266  001CA2  ECF0  F033         	call	_playThisNote
 30267                           
 30268                           ;keyboard.c: 837: keyboard.SW15 = 0;
 30269  001CA6  0100               	movlb	0	; () banked
 30270  001CA8  9DD1               	bcf	(_keyboard+1)& (0+255),6,b
 30271  001CAA                     l1568:
 30272                           
 30273                           ; BSR set to: 0
 30274                           ;keyboard.c: 838: }
 30275                           ;keyboard.c: 839: if(((button_state_last & 0x00008000)) && ((button_state_now & 0x000080
      +                          00) == 0) && keyboard.SW16) {
 30276                           
 30277                           ; BSR set to: 0
 30278  001CAA  BFD5               	btfsc	(_button_state_last+1)& (0+255),7,b
 30279                           
 30280                           ; BSR set to: 0
 30281  001CAC  BFD9               	btfsc	(_button_state_now+1)& (0+255),7,b
 30282  001CAE  D00A               	goto	l1569
 30283                           
 30284                           ; BSR set to: 0
 30285  001CB0  AFD1               	btfss	(_keyboard+1)& (0+255),7,b
 30286  001CB2  D008               	goto	l1569
 30287                           
 30288                           ; BSR set to: 0
 30289                           ;keyboard.c: 840: pitch = D2s;
 30290  001CB4  0E0F               	movlw	15
 30291  001CB6  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30292                           
 30293                           ; BSR set to: 0
 30294                           ;keyboard.c: 841: ON_OFF = 0;
 30295  001CB8  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30296                           
 30297                           ; BSR set to: 0
 30298                           ;keyboard.c: 842: playThisNote(pitch);
 30299  001CBA  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30300  001CBC  ECF0  F033         	call	_playThisNote
 30301                           
 30302                           ;keyboard.c: 843: keyboard.SW16 = 0;
 30303  001CC0  0100               	movlb	0	; () banked
 30304  001CC2  9FD1               	bcf	(_keyboard+1)& (0+255),7,b
 30305  001CC4                     l1569:
 30306                           
 30307                           ; BSR set to: 0
 30308                           ;keyboard.c: 844: }
 30309                           ;keyboard.c: 845: if(((button_state_last & 0x00010000)) && ((button_state_now & 0x000100
      +                          00) == 0) && keyboard.SW17) {
 30310                           
 30311                           ; BSR set to: 0
 30312  001CC4  B1D6               	btfsc	(_button_state_last+2)& (0+255),0,b
 30313                           
 30314                           ; BSR set to: 0
 30315  001CC6  B1DA               	btfsc	(_button_state_now+2)& (0+255),0,b
 30316  001CC8  D00A               	goto	l1570
 30317                           
 30318                           ; BSR set to: 0
 30319  001CCA  A1D2               	btfss	(_keyboard+2)& (0+255),0,b
 30320  001CCC  D008               	goto	l1570
 30321                           
 30322                           ; BSR set to: 0
 30323                           ;keyboard.c: 846: pitch = E2;
 30324  001CCE  0E10               	movlw	16
 30325  001CD0  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30326                           
 30327                           ; BSR set to: 0
 30328                           ;keyboard.c: 847: ON_OFF = 0;
 30329  001CD2  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30330                           
 30331                           ; BSR set to: 0
 30332                           ;keyboard.c: 848: playThisNote(pitch);
 30333  001CD4  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30334  001CD6  ECF0  F033         	call	_playThisNote
 30335                           
 30336                           ;keyboard.c: 849: keyboard.SW17 = 0;
 30337  001CDA  0100               	movlb	0	; () banked
 30338  001CDC  91D2               	bcf	(_keyboard+2)& (0+255),0,b
 30339  001CDE                     l1570:
 30340                           
 30341                           ; BSR set to: 0
 30342                           ;keyboard.c: 850: }
 30343                           ;keyboard.c: 851: if(((button_state_last & 0x00020000)) && ((button_state_now & 0x000200
      +                          00) == 0) && keyboard.SW18) {
 30344                           
 30345                           ; BSR set to: 0
 30346  001CDE  B3D6               	btfsc	(_button_state_last+2)& (0+255),1,b
 30347                           
 30348                           ; BSR set to: 0
 30349  001CE0  B3DA               	btfsc	(_button_state_now+2)& (0+255),1,b
 30350  001CE2  D00A               	goto	l1571
 30351                           
 30352                           ; BSR set to: 0
 30353  001CE4  A3D2               	btfss	(_keyboard+2)& (0+255),1,b
 30354  001CE6  D008               	goto	l1571
 30355                           
 30356                           ; BSR set to: 0
 30357                           ;keyboard.c: 852: pitch = F2;
 30358  001CE8  0E11               	movlw	17
 30359  001CEA  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30360                           
 30361                           ; BSR set to: 0
 30362                           ;keyboard.c: 853: ON_OFF = 0;
 30363  001CEC  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30364                           
 30365                           ; BSR set to: 0
 30366                           ;keyboard.c: 854: playThisNote(pitch);
 30367  001CEE  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30368  001CF0  ECF0  F033         	call	_playThisNote
 30369                           
 30370                           ;keyboard.c: 855: keyboard.SW18 = 0;
 30371  001CF4  0100               	movlb	0	; () banked
 30372  001CF6  93D2               	bcf	(_keyboard+2)& (0+255),1,b
 30373  001CF8                     l1571:
 30374                           
 30375                           ; BSR set to: 0
 30376                           ;keyboard.c: 856: }
 30377                           ;keyboard.c: 857: if(((button_state_last & 0x00040000)) && ((button_state_now & 0x000400
      +                          00) == 0) && keyboard.SW19) {
 30378                           
 30379                           ; BSR set to: 0
 30380  001CF8  B5D6               	btfsc	(_button_state_last+2)& (0+255),2,b
 30381                           
 30382                           ; BSR set to: 0
 30383  001CFA  B5DA               	btfsc	(_button_state_now+2)& (0+255),2,b
 30384  001CFC  D00A               	goto	l1572
 30385                           
 30386                           ; BSR set to: 0
 30387  001CFE  A5D2               	btfss	(_keyboard+2)& (0+255),2,b
 30388  001D00  D008               	goto	l1572
 30389                           
 30390                           ; BSR set to: 0
 30391                           ;keyboard.c: 858: pitch = F2s;
 30392  001D02  0E12               	movlw	18
 30393  001D04  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30394                           
 30395                           ; BSR set to: 0
 30396                           ;keyboard.c: 859: ON_OFF = 0;
 30397  001D06  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30398                           
 30399                           ; BSR set to: 0
 30400                           ;keyboard.c: 860: playThisNote(pitch);
 30401  001D08  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30402  001D0A  ECF0  F033         	call	_playThisNote
 30403                           
 30404                           ;keyboard.c: 861: keyboard.SW19 = 0;
 30405  001D0E  0100               	movlb	0	; () banked
 30406  001D10  95D2               	bcf	(_keyboard+2)& (0+255),2,b
 30407  001D12                     l1572:
 30408                           
 30409                           ; BSR set to: 0
 30410                           ;keyboard.c: 862: }
 30411                           ;keyboard.c: 863: if(((button_state_last & 0x00080000)) && ((button_state_now & 0x000800
      +                          00) == 0) && keyboard.SW20) {
 30412                           
 30413                           ; BSR set to: 0
 30414  001D12  B7D6               	btfsc	(_button_state_last+2)& (0+255),3,b
 30415                           
 30416                           ; BSR set to: 0
 30417  001D14  B7DA               	btfsc	(_button_state_now+2)& (0+255),3,b
 30418  001D16  D00A               	goto	l1573
 30419                           
 30420                           ; BSR set to: 0
 30421  001D18  A7D2               	btfss	(_keyboard+2)& (0+255),3,b
 30422  001D1A  D008               	goto	l1573
 30423                           
 30424                           ; BSR set to: 0
 30425                           ;keyboard.c: 864: pitch = G2;
 30426  001D1C  0E13               	movlw	19
 30427  001D1E  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30428                           
 30429                           ; BSR set to: 0
 30430                           ;keyboard.c: 865: ON_OFF = 0;
 30431  001D20  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30432                           
 30433                           ; BSR set to: 0
 30434                           ;keyboard.c: 866: playThisNote(pitch);
 30435  001D22  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30436  001D24  ECF0  F033         	call	_playThisNote
 30437                           
 30438                           ;keyboard.c: 867: keyboard.SW20 = 0;
 30439  001D28  0100               	movlb	0	; () banked
 30440  001D2A  97D2               	bcf	(_keyboard+2)& (0+255),3,b
 30441  001D2C                     l1573:
 30442                           
 30443                           ; BSR set to: 0
 30444                           ;keyboard.c: 868: }
 30445                           ;keyboard.c: 869: if(((button_state_last & 0x00100000)) && ((button_state_now & 0x001000
      +                          00) == 0) && keyboard.SW21) {
 30446                           
 30447                           ; BSR set to: 0
 30448  001D2C  B9D6               	btfsc	(_button_state_last+2)& (0+255),4,b
 30449                           
 30450                           ; BSR set to: 0
 30451  001D2E  B9DA               	btfsc	(_button_state_now+2)& (0+255),4,b
 30452  001D30  D00A               	goto	l1574
 30453                           
 30454                           ; BSR set to: 0
 30455  001D32  A9D2               	btfss	(_keyboard+2)& (0+255),4,b
 30456  001D34  D008               	goto	l1574
 30457                           
 30458                           ; BSR set to: 0
 30459                           ;keyboard.c: 870: pitch = G2s;
 30460  001D36  0E14               	movlw	20
 30461  001D38  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30462                           
 30463                           ; BSR set to: 0
 30464                           ;keyboard.c: 871: ON_OFF = 0;
 30465  001D3A  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30466                           
 30467                           ; BSR set to: 0
 30468                           ;keyboard.c: 872: playThisNote(pitch);
 30469  001D3C  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30470  001D3E  ECF0  F033         	call	_playThisNote
 30471                           
 30472                           ;keyboard.c: 873: keyboard.SW21 = 0;
 30473  001D42  0100               	movlb	0	; () banked
 30474  001D44  99D2               	bcf	(_keyboard+2)& (0+255),4,b
 30475  001D46                     l1574:
 30476                           
 30477                           ; BSR set to: 0
 30478                           ;keyboard.c: 874: }
 30479                           ;keyboard.c: 875: if(((button_state_last & 0x00200000)) && ((button_state_now & 0x002000
      +                          00) == 0) && keyboard.SW22) {
 30480                           
 30481                           ; BSR set to: 0
 30482  001D46  BBD6               	btfsc	(_button_state_last+2)& (0+255),5,b
 30483                           
 30484                           ; BSR set to: 0
 30485  001D48  BBDA               	btfsc	(_button_state_now+2)& (0+255),5,b
 30486  001D4A  D00A               	goto	l1575
 30487                           
 30488                           ; BSR set to: 0
 30489  001D4C  ABD2               	btfss	(_keyboard+2)& (0+255),5,b
 30490  001D4E  D008               	goto	l1575
 30491                           
 30492                           ; BSR set to: 0
 30493                           ;keyboard.c: 876: pitch = A2;
 30494  001D50  0E15               	movlw	21
 30495  001D52  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30496                           
 30497                           ; BSR set to: 0
 30498                           ;keyboard.c: 877: ON_OFF = 0;
 30499  001D54  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30500                           
 30501                           ; BSR set to: 0
 30502                           ;keyboard.c: 878: playThisNote(pitch);
 30503  001D56  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30504  001D58  ECF0  F033         	call	_playThisNote
 30505                           
 30506                           ;keyboard.c: 879: keyboard.SW22 = 0;
 30507  001D5C  0100               	movlb	0	; () banked
 30508  001D5E  9BD2               	bcf	(_keyboard+2)& (0+255),5,b
 30509  001D60                     l1575:
 30510                           
 30511                           ; BSR set to: 0
 30512                           ;keyboard.c: 880: }
 30513                           ;keyboard.c: 881: if(((button_state_last & 0x00400000)) && ((button_state_now & 0x004000
      +                          00) == 0) && keyboard.SW23) {
 30514                           
 30515                           ; BSR set to: 0
 30516  001D60  BDD6               	btfsc	(_button_state_last+2)& (0+255),6,b
 30517                           
 30518                           ; BSR set to: 0
 30519  001D62  BDDA               	btfsc	(_button_state_now+2)& (0+255),6,b
 30520  001D64  D00A               	goto	l1576
 30521                           
 30522                           ; BSR set to: 0
 30523  001D66  ADD2               	btfss	(_keyboard+2)& (0+255),6,b
 30524  001D68  D008               	goto	l1576
 30525                           
 30526                           ; BSR set to: 0
 30527                           ;keyboard.c: 882: pitch = A2s;
 30528  001D6A  0E16               	movlw	22
 30529  001D6C  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30530                           
 30531                           ; BSR set to: 0
 30532                           ;keyboard.c: 883: ON_OFF = 0;
 30533  001D6E  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30534                           
 30535                           ; BSR set to: 0
 30536                           ;keyboard.c: 884: playThisNote(pitch);
 30537  001D70  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30538  001D72  ECF0  F033         	call	_playThisNote
 30539                           
 30540                           ;keyboard.c: 885: keyboard.SW23 = 0;
 30541  001D76  0100               	movlb	0	; () banked
 30542  001D78  9DD2               	bcf	(_keyboard+2)& (0+255),6,b
 30543  001D7A                     l1576:
 30544                           
 30545                           ; BSR set to: 0
 30546                           ;keyboard.c: 886: }
 30547                           ;keyboard.c: 887: if(((button_state_last & 0x00800000)) && ((button_state_now & 0x008000
      +                          00) == 0) && keyboard.SW24) {
 30548                           
 30549                           ; BSR set to: 0
 30550  001D7A  BFD6               	btfsc	(_button_state_last+2)& (0+255),7,b
 30551                           
 30552                           ; BSR set to: 0
 30553  001D7C  BFDA               	btfsc	(_button_state_now+2)& (0+255),7,b
 30554  001D7E  D00A               	goto	l1577
 30555                           
 30556                           ; BSR set to: 0
 30557  001D80  AFD2               	btfss	(_keyboard+2)& (0+255),7,b
 30558  001D82  D008               	goto	l1577
 30559                           
 30560                           ; BSR set to: 0
 30561                           ;keyboard.c: 888: pitch = B2;
 30562  001D84  0E17               	movlw	23
 30563  001D86  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30564                           
 30565                           ; BSR set to: 0
 30566                           ;keyboard.c: 889: ON_OFF = 0;
 30567  001D88  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30568                           
 30569                           ; BSR set to: 0
 30570                           ;keyboard.c: 890: playThisNote(pitch);
 30571  001D8A  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30572  001D8C  ECF0  F033         	call	_playThisNote
 30573                           
 30574                           ;keyboard.c: 891: keyboard.SW24 = 0;
 30575  001D90  0100               	movlb	0	; () banked
 30576  001D92  9FD2               	bcf	(_keyboard+2)& (0+255),7,b
 30577  001D94                     l1577:
 30578                           
 30579                           ; BSR set to: 0
 30580                           ;keyboard.c: 892: }
 30581                           ;keyboard.c: 893: if(((button_state_last & 0x01000000)) && ((button_state_now & 0x010000
      +                          00) == 0) && keyboard.SW25) {
 30582                           
 30583                           ; BSR set to: 0
 30584  001D94  A1D7               	btfss	(_button_state_last+3)& (0+255),0,b
 30585  001D96  0012               	return	
 30586                           
 30587                           ; BSR set to: 0
 30588  001D98  B1DB               	btfsc	(_button_state_now+3)& (0+255),0,b
 30589  001D9A  0012               	return	
 30590                           
 30591                           ; BSR set to: 0
 30592  001D9C  A1D3               	btfss	(_keyboard+3)& (0+255),0,b
 30593  001D9E  0012               	return	
 30594                           
 30595                           ; BSR set to: 0
 30596                           ;keyboard.c: 894: pitch = C3;
 30597  001DA0  0E18               	movlw	24
 30598  001DA2  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30599                           
 30600                           ; BSR set to: 0
 30601                           ;keyboard.c: 895: ON_OFF = 0;
 30602  001DA4  9E05               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30603                           
 30604                           ; BSR set to: 0
 30605                           ;keyboard.c: 896: playThisNote(pitch);
 30606  001DA6  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30607  001DA8  ECF0  F033         	call	_playThisNote
 30608                           
 30609                           ;keyboard.c: 897: keyboard.SW25 = 0;
 30610  001DAC  0100               	movlb	0	; () banked
 30611  001DAE  91D3               	bcf	(_keyboard+3)& (0+255),0,b
 30612  001DB0  0012               	return	
 30613  001DB2                     __end_of_keyboard_all_note_efficient:
 30614                           	opt stack 0
 30615                           tblptru	equ	0xFF8
 30616                           tblptrh	equ	0xFF7
 30617                           tblptrl	equ	0xFF6
 30618                           tablat	equ	0xFF5
 30619                           prodh	equ	0xFF4
 30620                           prodl	equ	0xFF3
 30621                           intcon	equ	0xFF2
 30622                           intcon2	equ	0xFF1
 30623                           postinc0	equ	0xFEE
 30624                           wreg	equ	0xFE8
 30625                           postinc1	equ	0xFE6
 30626                           plusw1	equ	0xFE3
 30627                           fsr1h	equ	0xFE2
 30628                           fsr1l	equ	0xFE1
 30629                           indf2	equ	0xFDF
 30630                           postinc2	equ	0xFDE
 30631                           postdec2	equ	0xFDD
 30632                           plusw2	equ	0xFDB
 30633                           fsr2h	equ	0xFDA
 30634                           fsr2l	equ	0xFD9
 30635                           status	equ	0xFD8
 30636                           
 30637 ;; *************** function _playThisNote *****************
 30638 ;; Defined at:
 30639 ;;		line 493 in file "keyboard.c"
 30640 ;; Parameters:    Size  Location     Type
 30641 ;;  pitch           1    wreg     unsigned char 
 30642 ;; Auto vars:     Size  Location     Type
 30643 ;;  pitch           1   21[BANK0 ] unsigned char 
 30644 ;; Return value:  Size  Location     Type
 30645 ;;                  1    wreg      void 
 30646 ;; Registers used:
 30647 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30648 ;; Tracked objects:
 30649 ;;		On entry : 0/0
 30650 ;;		On exit  : 0/0
 30651 ;;		Unchanged: 0/0
 30652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 30653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30654 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30655 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30656 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30657 ;;Total ram usage:        5 bytes
 30658 ;; Hardware stack levels used:    1
 30659 ;; Hardware stack levels required when called:   11
 30660 ;; This function calls:
 30661 ;;		_add_notes_to_arpeggio
 30662 ;;		_delete_notes_from_arpeggio
 30663 ;;		_finish_arpeggio_setup
 30664 ;;		_key_press_release_note_off
 30665 ;;		_noteOff
 30666 ;;		_noteOn
 30667 ;;		_playSeventh
 30668 ;;		_playTriad
 30669 ;;		_wait_one_pulse
 30670 ;; This function is called by:
 30671 ;;		_keyboard_all_note_efficient
 30672 ;;		_doTheUnLatch
 30673 ;; This function uses a non-reentrant model
 30674 ;;
 30675                           
 30676                           	psect	text78
 30677  0067E0                     __ptext78:
 30678                           	opt stack 0
 30679  0067E0                     _playThisNote:
 30680                           	opt stack 13
 30681                           
 30682                           ; BSR set to: 0
 30683                           ;incstack = 0
 30684                           ;playThisNote@pitch stored from wreg
 30685  0067E0  0100               	movlb	0	; () banked
 30686  0067E2  6F75               	movwf	playThisNote@pitch& (0+255),b
 30687                           
 30688                           ;keyboard.c: 495: if(KEYBOARD_MODE == CHROMATIC) {
 30689  0067E4  0100               	movlb	0	; () banked
 30690  0067E6  51F2               	movf	_KEYBOARD_MODE& (0+255),w,b
 30691  0067E8  A4D8               	btfss	status,2,c
 30692  0067EA  D06B               	goto	l1519
 30693                           
 30694                           ; BSR set to: 0
 30695                           ;keyboard.c: 498: if(ARPEGGIO_ON == 0){
 30696  0067EC  B604               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 30697  0067EE  D015               	goto	l1512
 30698                           
 30699                           ; BSR set to: 0
 30700                           ;keyboard.c: 499: if(ON_OFF == 1) {noteOn(channel,pitch,velocity);}
 30701  0067F0  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30702  0067F2  D008               	goto	l1511
 30703                           
 30704                           ; BSR set to: 0
 30705  0067F4  5051               	movf	_velocity,w,c
 30706  0067F6  6EE6               	movwf	postinc1,c
 30707  0067F8  5175               	movf	playThisNote@pitch& (0+255),w,b
 30708  0067FA  6EE6               	movwf	postinc1,c
 30709  0067FC  503E               	movf	_channel,w,c
 30710  0067FE  6EE6               	movwf	postinc1,c
 30711  006800  EC93  F045         	call	_noteOn	;wreg free
 30712  006804                     l1511:
 30713                           
 30714                           ;keyboard.c: 500: if(ON_OFF == 0) {noteOff(channel,pitch,velocity);}
 30715  006804  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30716  006806  D009               	goto	l1512
 30717  006808  5051               	movf	_velocity,w,c
 30718  00680A  6EE6               	movwf	postinc1,c
 30719  00680C  0100               	movlb	0	; () banked
 30720  00680E  5175               	movf	playThisNote@pitch& (0+255),w,b
 30721  006810  6EE6               	movwf	postinc1,c
 30722  006812  503E               	movf	_channel,w,c
 30723  006814  6EE6               	movwf	postinc1,c
 30724  006816  EC48  F04A         	call	_noteOff	;wreg free
 30725  00681A                     l1512:
 30726                           
 30727                           ;keyboard.c: 501: }
 30728                           ;keyboard.c: 504: if(ARPEGGIO_ON == 1){
 30729  00681A  A604               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 30730  00681C  D052               	goto	l1519
 30731                           
 30732                           ;keyboard.c: 506: if(ON_OFF == 1){
 30733  00681E  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30734  006820  D01A               	goto	l1514
 30735                           
 30736                           ;keyboard.c: 509: TMR0ON = 0;
 30737  006822  9ED5               	bcf	4053,7,c	;volatile
 30738                           
 30739                           ;keyboard.c: 511: parallel = pitch;
 30740  006824  C075  F030         	movff	playThisNote@pitch,_parallel
 30741                           
 30742                           ;keyboard.c: 514: if(NUM_NOTES_PRESSED > 0){
 30743  006828  502F               	movf	_NUM_NOTES_PRESSED,w,c
 30744  00682A  B4D8               	btfsc	status,2,c
 30745  00682C  D00A               	goto	l1515
 30746                           
 30747                           ;keyboard.c: 515: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 30748  00682E  0E00               	movlw	0
 30749  006830  B203               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 30750  006832  0E01               	movlw	1
 30751  006834  ECED  F04B         	call	_wait_one_pulse
 30752                           
 30753                           ;keyboard.c: 516: if(note_off_was_sent == 0) {key_press_release_note_off();}
 30754  006838  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 30755  00683A  EC8B  F02E         	call	_key_press_release_note_off	;wreg free
 30756                           
 30757                           ;keyboard.c: 517: TIMER_OVERFLOWS = 0;
 30758  00683E  0E00               	movlw	0
 30759  006840  6E2E               	movwf	_TIMER_OVERFLOWS,c
 30760  006842                     l1515:
 30761                           
 30762                           ;keyboard.c: 518: }
 30763                           ;keyboard.c: 521: add_notes_to_arpeggio(pitch);
 30764  006842  0100               	movlb	0	; () banked
 30765  006844  5175               	movf	playThisNote@pitch& (0+255),w,b
 30766  006846  ECF2  F034         	call	_add_notes_to_arpeggio
 30767                           
 30768                           ;keyboard.c: 524: if(LATCH == 0) {
 30769  00684A  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 30770                           
 30771                           ;keyboard.c: 525: latch_was_pressed = 0;
 30772  00684C  9A03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30773                           
 30774                           ;keyboard.c: 526: }
 30775                           ;keyboard.c: 529: finish_arpeggio_setup();
 30776  00684E  EC82  F04C         	call	_finish_arpeggio_setup	;wreg free
 30777                           
 30778                           ;keyboard.c: 532: TMR0ON = 1;
 30779  006852  8ED5               	bsf	4053,7,c	;volatile
 30780                           
 30781                           ;keyboard.c: 534: return;
 30782  006854  0012               	return	
 30783  006856                     l1514:
 30784                           
 30785                           ;keyboard.c: 535: }
 30786                           ;keyboard.c: 538: if((ON_OFF == 0) && (LATCH == 0)){
 30787  006856  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30788  006858  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 30789  00685A  D033               	goto	l1519
 30790                           
 30791                           ;keyboard.c: 541: TMR0ON = 0;
 30792  00685C  9ED5               	bcf	4053,7,c	;volatile
 30793                           
 30794                           ;keyboard.c: 544: if(NUM_NOTES_PRESSED > 0){
 30795  00685E  502F               	movf	_NUM_NOTES_PRESSED,w,c
 30796  006860  B4D8               	btfsc	status,2,c
 30797  006862  D00A               	goto	l1520
 30798                           
 30799                           ;keyboard.c: 545: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 30800  006864  0E00               	movlw	0
 30801  006866  B003               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 30802  006868  0E01               	movlw	1
 30803  00686A  ECED  F04B         	call	_wait_one_pulse
 30804                           
 30805                           ;keyboard.c: 546: if(note_off_was_sent == 0) {key_press_release_note_off();}
 30806  00686E  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 30807  006870  EC8B  F02E         	call	_key_press_release_note_off	;wreg free
 30808                           
 30809                           ;keyboard.c: 547: TIMER_OVERFLOWS = 0;
 30810  006874  0E00               	movlw	0
 30811  006876  6E2E               	movwf	_TIMER_OVERFLOWS,c
 30812  006878                     l1520:
 30813                           
 30814                           ;keyboard.c: 548: }
 30815                           ;keyboard.c: 551: delete_notes_from_arpeggio(pitch);
 30816  006878  0100               	movlb	0	; () banked
 30817  00687A  5175               	movf	playThisNote@pitch& (0+255),w,b
 30818  00687C  EC5A  F04B         	call	_delete_notes_from_arpeggio
 30819                           
 30820                           ;keyboard.c: 554: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 30821  006880  C030  F071         	movff	_parallel,??_playThisNote
 30822  006884  0100               	movlb	0	; () banked
 30823  006886  6B72               	clrf	(??_playThisNote+1)& (0+255),b
 30824  006888  BF71               	btfsc	??_playThisNote& (0+255),7,b
 30825  00688A  0772               	decf	(??_playThisNote+1)& (0+255),f,b
 30826  00688C  5175               	movf	playThisNote@pitch& (0+255),w,b
 30827  00688E  6F73               	movwf	(??_playThisNote+2)& (0+255),b
 30828  006890  6B74               	clrf	(??_playThisNote+3)& (0+255),b
 30829  006892  5171               	movf	??_playThisNote& (0+255),w,b
 30830  006894  1973               	xorwf	(??_playThisNote+2)& (0+255),w,b
 30831  006896  E106               	bnz	l27141
 30832  006898  5172               	movf	(??_playThisNote+1)& (0+255),w,b
 30833  00689A  1974               	xorwf	(??_playThisNote+3)& (0+255),w,b
 30834  00689C  A4D8               	btfss	status,2,c
 30835  00689E  D002               	goto	l1522
 30836                           
 30837                           ; BSR set to: 0
 30838  0068A0  0E00               	movlw	0
 30839  0068A2  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 30840  0068A4                     l1522:
 30841  0068A4                     l27141:
 30842                           
 30843                           ; BSR set to: 0
 30844                           ;keyboard.c: 559: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 30845  0068A4  BC03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 30846                           
 30847                           ; BSR set to: 0
 30848  0068A6  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30849  0068A8  D001               	goto	l1523
 30850                           
 30851                           ; BSR set to: 0
 30852                           ;keyboard.c: 560: LATCH = 1;
 30853  0068AA  8004               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 30854  0068AC                     l1523:
 30855                           
 30856                           ; BSR set to: 0
 30857                           ;keyboard.c: 561: }
 30858                           ;keyboard.c: 564: if((UN_LATCH_MODE == 0) && (latch_was_pressed == 1)){
 30859  0068AC  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 30860                           
 30861                           ; BSR set to: 0
 30862  0068AE  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30863  0068B0  D004               	goto	l1524
 30864                           
 30865                           ; BSR set to: 0
 30866                           ;keyboard.c: 565: NUM_NOTES_PRESSED = 0;
 30867  0068B2  0E00               	movlw	0
 30868  0068B4  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 30869                           
 30870                           ;keyboard.c: 566: ARRAY_INDEX = 0;
 30871  0068B6  0E00               	movlw	0
 30872  0068B8  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 30873  0068BA                     l1524:
 30874                           
 30875                           ; BSR set to: 0
 30876                           ;keyboard.c: 567: }
 30877                           ;keyboard.c: 570: finish_arpeggio_setup();
 30878                           
 30879                           ; BSR set to: 0
 30880  0068BA  EC82  F04C         	call	_finish_arpeggio_setup	;wreg free
 30881                           
 30882                           ;keyboard.c: 573: TMR0ON = 1;
 30883  0068BE  8ED5               	bsf	4053,7,c	;volatile
 30884                           
 30885                           ;keyboard.c: 575: return;
 30886  0068C0  0012               	return	
 30887  0068C2                     l1519:
 30888                           
 30889                           ;keyboard.c: 576: }
 30890                           ;keyboard.c: 577: }
 30891                           ;keyboard.c: 578: }
 30892                           ;keyboard.c: 580: if(KEYBOARD_MODE == TRIAD) {
 30893  0068C2  0E06               	movlw	6
 30894  0068C4  0100               	movlb	0	; () banked
 30895  0068C6  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 30896  0068C8  A4D8               	btfss	status,2,c
 30897  0068CA  D003               	goto	l1525
 30898                           
 30899                           ; BSR set to: 0
 30900                           ;keyboard.c: 581: playTriad(pitch);
 30901  0068CC  5175               	movf	playThisNote@pitch& (0+255),w,b
 30902  0068CE  ECC9  F02D         	call	_playTriad
 30903  0068D2                     l1525:
 30904                           
 30905                           ;keyboard.c: 582: }
 30906                           ;keyboard.c: 584: if(KEYBOARD_MODE == SEVENTH) {
 30907  0068D2  0E09               	movlw	9
 30908  0068D4  0100               	movlb	0	; () banked
 30909  0068D6  19F2               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 30910  0068D8  A4D8               	btfss	status,2,c
 30911  0068DA  0012               	return	
 30912                           
 30913                           ; BSR set to: 0
 30914                           ;keyboard.c: 585: playSeventh(pitch);
 30915  0068DC  5175               	movf	playThisNote@pitch& (0+255),w,b
 30916  0068DE  EC38  F02C         	call	_playSeventh
 30917  0068E2  0012               	return	
 30918  0068E4                     __end_of_playThisNote:
 30919                           	opt stack 0
 30920                           tblptru	equ	0xFF8
 30921                           tblptrh	equ	0xFF7
 30922                           tblptrl	equ	0xFF6
 30923                           tablat	equ	0xFF5
 30924                           prodh	equ	0xFF4
 30925                           prodl	equ	0xFF3
 30926                           intcon	equ	0xFF2
 30927                           intcon2	equ	0xFF1
 30928                           postinc0	equ	0xFEE
 30929                           wreg	equ	0xFE8
 30930                           postinc1	equ	0xFE6
 30931                           plusw1	equ	0xFE3
 30932                           fsr1h	equ	0xFE2
 30933                           fsr1l	equ	0xFE1
 30934                           indf2	equ	0xFDF
 30935                           postinc2	equ	0xFDE
 30936                           postdec2	equ	0xFDD
 30937                           plusw2	equ	0xFDB
 30938                           fsr2h	equ	0xFDA
 30939                           fsr2l	equ	0xFD9
 30940                           status	equ	0xFD8
 30941                           
 30942 ;; *************** function _playTriad *****************
 30943 ;; Defined at:
 30944 ;;		line 293 in file "keyboard.c"
 30945 ;; Parameters:    Size  Location     Type
 30946 ;;  pitch           1    wreg     unsigned char 
 30947 ;; Auto vars:     Size  Location     Type
 30948 ;;  pitch           1    9[BANK0 ] unsigned char 
 30949 ;;  i               1    8[BANK0 ] unsigned char 
 30950 ;;  i               1    7[BANK0 ] unsigned char 
 30951 ;;  triad_p         2    5[BANK0 ] PTR unsigned char 
 30952 ;;		 -> diminished_triad(3), augmented_triad(3), minor_triad(3), major_triad(3), 
 30953 ;; Return value:  Size  Location     Type
 30954 ;;                  1    wreg      void 
 30955 ;; Registers used:
 30956 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, prodl, prodh, cstack
 30957 ;; Tracked objects:
 30958 ;;		On entry : 0/0
 30959 ;;		On exit  : 0/0
 30960 ;;		Unchanged: 0/0
 30961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 30962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30963 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30964 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30965 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30966 ;;Total ram usage:        9 bytes
 30967 ;; Hardware stack levels used:    1
 30968 ;; Hardware stack levels required when called:   10
 30969 ;; This function calls:
 30970 ;;		_finish_arpeggio_setup
 30971 ;;		_key_press_release_note_off
 30972 ;;		_noteOff
 30973 ;;		_noteOn
 30974 ;;		_wait_one_pulse
 30975 ;; This function is called by:
 30976 ;;		_playThisNote
 30977 ;; This function uses a non-reentrant model
 30978 ;;
 30979                           
 30980                           	psect	text79
 30981  005B92                     __ptext79:
 30982                           	opt stack 0
 30983  005B92                     _playTriad:
 30984                           	opt stack 13
 30985                           
 30986                           ;incstack = 0
 30987                           ;playTriad@pitch stored from wreg
 30988  005B92  0100               	movlb	0	; () banked
 30989  005B94  6F69               	movwf	playTriad@pitch& (0+255),b
 30990                           
 30991                           ;keyboard.c: 295: unsigned char *triad_p;
 30992                           ;keyboard.c: 299: switch (which_triad) {
 30993  005B96  D012               	goto	l1448
 30994  005B98                     
 30995                           ;keyboard.c: 301: triad_p = major_triad;
 30996  005B98  0EFD               	movlw	low _major_triad
 30997  005B9A  0100               	movlb	0	; () banked
 30998  005B9C  6F65               	movwf	playTriad@triad_p& (0+255),b
 30999  005B9E  0E01               	movlw	high _major_triad
 31000  005BA0  D00B               	goto	L14
 31001  005BA2                     
 31002                           ; BSR set to: 0
 31003                           ;keyboard.c: 304: triad_p = minor_triad;
 31004                           
 31005                           ; BSR set to: 0
 31006  005BA2  0EE2               	movlw	low _minor_triad
 31007  005BA4  6F65               	movwf	playTriad@triad_p& (0+255),b
 31008  005BA6  0E02               	movlw	high _minor_triad
 31009  005BA8  D007               	goto	L14
 31010  005BAA                     
 31011                           ; BSR set to: 0
 31012                           ;keyboard.c: 307: triad_p = augmented_triad;
 31013                           
 31014                           ; BSR set to: 0
 31015  005BAA  0EDF               	movlw	low _augmented_triad
 31016  005BAC  6F65               	movwf	playTriad@triad_p& (0+255),b
 31017  005BAE  0E02               	movlw	high _augmented_triad
 31018  005BB0  D003               	goto	L14
 31019  005BB2                     
 31020                           ; BSR set to: 0
 31021                           ;keyboard.c: 310: triad_p = diminished_triad;
 31022                           
 31023                           ; BSR set to: 0
 31024  005BB2  0EDC               	movlw	low _diminished_triad
 31025  005BB4  6F65               	movwf	playTriad@triad_p& (0+255),b
 31026  005BB6  0E02               	movlw	high _diminished_triad
 31027  005BB8                     L14:
 31028  005BB8  6F66               	movwf	(playTriad@triad_p+1)& (0+255),b
 31029                           
 31030                           ; BSR set to: 0
 31031                           ;keyboard.c: 314: }
 31032                           
 31033                           ; BSR set to: 0
 31034                           ;keyboard.c: 313: break;
 31035                           
 31036                           ;keyboard.c: 312: default:
 31037                           
 31038                           ;keyboard.c: 311: break;
 31039  005BBA  D00E               	goto	l1450
 31040  005BBC                     l1448:
 31041                           
 31042                           ; BSR set to: 0
 31043  005BBC  0100               	movlb	0	; () banked
 31044  005BBE  51F0               	movf	_which_triad& (0+255),w,b
 31045                           
 31046                           ; Switch size 1, requested type "space"
 31047                           ; Number of cases is 4, Range of values is 0 to 3
 31048                           ; switch strategies available:
 31049                           ; Name         Instructions Cycles
 31050                           ; simple_byte           13     7 (average)
 31051                           ;	Chosen strategy is simple_byte
 31052  005BC0  0A00               	xorlw	0	; case 0
 31053  005BC2  B4D8               	btfsc	status,2,c
 31054  005BC4  D7E9               	goto	l1449
 31055  005BC6  0A01               	xorlw	1	; case 1
 31056  005BC8  B4D8               	btfsc	status,2,c
 31057  005BCA  D7EB               	goto	l1451
 31058  005BCC  0A03               	xorlw	3	; case 2
 31059  005BCE  B4D8               	btfsc	status,2,c
 31060  005BD0  D7EC               	goto	l1452
 31061  005BD2  0A01               	xorlw	1	; case 3
 31062  005BD4  B4D8               	btfsc	status,2,c
 31063  005BD6  D7ED               	goto	l1453
 31064  005BD8                     l1450:
 31065                           
 31066                           ; BSR set to: 0
 31067                           ;keyboard.c: 326: if(ARPEGGIO_ON == 0){
 31068  005BD8  B604               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 31069  005BDA  D030               	goto	u45460
 31070                           
 31071                           ; BSR set to: 0
 31072                           ;keyboard.c: 327: for(unsigned char i = 0; i<3; i++){
 31073  005BDC  0E00               	movlw	0
 31074  005BDE  6F67               	movwf	playTriad@i& (0+255),b
 31075  005BE0                     l26379:
 31076                           
 31077                           ; BSR set to: 0
 31078  005BE0  0E02               	movlw	2
 31079  005BE2  6567               	cpfsgt	playTriad@i& (0+255),b
 31080  005BE4  D001               	goto	l1456
 31081  005BE6  D02A               	goto	u45460
 31082  005BE8                     l1456:
 31083                           
 31084                           ; BSR set to: 0
 31085                           ;keyboard.c: 328: if(ON_OFF == 1) {noteOn(channel,triad_p[i] + pitch,velocity);}
 31086  005BE8  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31087  005BEA  D011               	goto	l1458
 31088                           
 31089                           ; BSR set to: 0
 31090  005BEC  5051               	movf	_velocity,w,c
 31091  005BEE  6EE6               	movwf	postinc1,c
 31092  005BF0  5167               	movf	playTriad@i& (0+255),w,b
 31093  005BF2  0D01               	mullw	1
 31094  005BF4  50F3               	movf	prodl,w,c
 31095  005BF6  2565               	addwf	playTriad@triad_p& (0+255),w,b
 31096  005BF8  6ED9               	movwf	fsr2l,c
 31097  005BFA  50F4               	movf	prodh,w,c
 31098  005BFC  2166               	addwfc	(playTriad@triad_p+1)& (0+255),w,b
 31099  005BFE  6EDA               	movwf	fsr2h,c
 31100  005C00  50DF               	movf	indf2,w,c
 31101  005C02  2569               	addwf	playTriad@pitch& (0+255),w,b
 31102  005C04  6EE6               	movwf	postinc1,c
 31103  005C06  503E               	movf	_channel,w,c
 31104  005C08  6EE6               	movwf	postinc1,c
 31105  005C0A  EC93  F045         	call	_noteOn	;wreg free
 31106  005C0E                     l1458:
 31107                           
 31108                           ;keyboard.c: 329: if(ON_OFF == 0) {noteOff(channel,triad_p[i] + pitch,velocity);}
 31109  005C0E  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31110  005C10  D012               	goto	l1459
 31111  005C12  5051               	movf	_velocity,w,c
 31112  005C14  6EE6               	movwf	postinc1,c
 31113  005C16  0100               	movlb	0	; () banked
 31114  005C18  5167               	movf	playTriad@i& (0+255),w,b
 31115  005C1A  0D01               	mullw	1
 31116  005C1C  50F3               	movf	prodl,w,c
 31117  005C1E  2565               	addwf	playTriad@triad_p& (0+255),w,b
 31118  005C20  6ED9               	movwf	fsr2l,c
 31119  005C22  50F4               	movf	prodh,w,c
 31120  005C24  2166               	addwfc	(playTriad@triad_p+1)& (0+255),w,b
 31121  005C26  6EDA               	movwf	fsr2h,c
 31122  005C28  50DF               	movf	indf2,w,c
 31123  005C2A  2569               	addwf	playTriad@pitch& (0+255),w,b
 31124  005C2C  6EE6               	movwf	postinc1,c
 31125  005C2E  503E               	movf	_channel,w,c
 31126  005C30  6EE6               	movwf	postinc1,c
 31127  005C32  EC48  F04A         	call	_noteOff	;wreg free
 31128  005C36                     l1459:
 31129  005C36  0100               	movlb	0	; () banked
 31130  005C38  2B67               	incf	playTriad@i& (0+255),f,b
 31131  005C3A  D7D2               	goto	l26379
 31132  005C3C                     u45460:
 31133                           
 31134                           ; BSR set to: 0
 31135                           ;keyboard.c: 330: }
 31136                           ;keyboard.c: 331: }
 31137                           ;keyboard.c: 334: if(ARPEGGIO_ON == 1){
 31138                           
 31139                           ; BSR set to: 0
 31140  005C3C  A604               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 31141  005C3E  0012               	return	
 31142                           
 31143                           ; BSR set to: 0
 31144                           ;keyboard.c: 335: if(ON_OFF == 1) {
 31145  005C40  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31146  005C42  D034               	goto	l1461
 31147                           
 31148                           ; BSR set to: 0
 31149                           ;keyboard.c: 337: TMR0ON = 0;
 31150  005C44  9ED5               	bcf	4053,7,c	;volatile
 31151                           
 31152                           ;keyboard.c: 340: parallel = pitch;
 31153  005C46  C069  F030         	movff	playTriad@pitch,_parallel
 31154                           
 31155                           ; BSR set to: 0
 31156                           ;keyboard.c: 343: if(NUM_NOTES_PRESSED > 0){
 31157  005C4A  502F               	movf	_NUM_NOTES_PRESSED,w,c
 31158  005C4C  B4D8               	btfsc	status,2,c
 31159  005C4E  D00A               	goto	l1462
 31160                           
 31161                           ; BSR set to: 0
 31162                           ;keyboard.c: 344: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 31163  005C50  0E00               	movlw	0
 31164  005C52  B203               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 31165  005C54  0E01               	movlw	1
 31166  005C56  ECED  F04B         	call	_wait_one_pulse
 31167                           
 31168                           ;keyboard.c: 345: if(note_off_was_sent == 0) {key_press_release_note_off();}
 31169  005C5A  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 31170  005C5C  EC8B  F02E         	call	_key_press_release_note_off	;wreg free
 31171                           
 31172                           ;keyboard.c: 346: TIMER_OVERFLOWS = 0;
 31173  005C60  0E00               	movlw	0
 31174  005C62  6E2E               	movwf	_TIMER_OVERFLOWS,c
 31175  005C64                     l1462:
 31176                           
 31177                           ;keyboard.c: 347: }
 31178                           ;keyboard.c: 349: for(unsigned char i = 0; i<3; i++){
 31179  005C64  0E00               	movlw	0
 31180  005C66  0100               	movlb	0	; () banked
 31181  005C68  6F68               	movwf	playTriad@i_1691& (0+255),b
 31182  005C6A                     l26409:
 31183                           
 31184                           ; BSR set to: 0
 31185  005C6A  0E02               	movlw	2
 31186  005C6C  6568               	cpfsgt	playTriad@i_1691& (0+255),b
 31187  005C6E  D001               	goto	l1464
 31188  005C70  D015               	goto	u45520
 31189  005C72                     l1464:
 31190                           
 31191                           ; BSR set to: 0
 31192                           ;keyboard.c: 350: ARPEGGIO[i] = triad_p[i] + pitch;
 31193                           
 31194                           ; BSR set to: 0
 31195  005C72  5168               	movf	playTriad@i_1691& (0+255),w,b
 31196  005C74  0D01               	mullw	1
 31197  005C76  0E82               	movlw	low _ARPEGGIO
 31198  005C78  24F3               	addwf	prodl,w,c
 31199  005C7A  6ED9               	movwf	fsr2l,c
 31200  005C7C  0E01               	movlw	high _ARPEGGIO
 31201  005C7E  20F4               	addwfc	prodh,w,c
 31202  005C80  6EDA               	movwf	fsr2h,c
 31203  005C82  5168               	movf	playTriad@i_1691& (0+255),w,b
 31204  005C84  0D01               	mullw	1
 31205  005C86  50F3               	movf	prodl,w,c
 31206  005C88  2565               	addwf	playTriad@triad_p& (0+255),w,b
 31207  005C8A  6EE9               	movwf	fsr0l,c
 31208  005C8C  50F4               	movf	prodh,w,c
 31209  005C8E  2166               	addwfc	(playTriad@triad_p+1)& (0+255),w,b
 31210  005C90  6EEA               	movwf	fsr0h,c
 31211  005C92  50EF               	movf	indf0,w,c
 31212  005C94  2569               	addwf	playTriad@pitch& (0+255),w,b
 31213  005C96  6EDF               	movwf	indf2,c
 31214                           
 31215                           ; BSR set to: 0
 31216  005C98  2B68               	incf	playTriad@i_1691& (0+255),f,b
 31217  005C9A  D7E7               	goto	l26409
 31218  005C9C                     u45520:
 31219                           
 31220                           ; BSR set to: 0
 31221                           ;keyboard.c: 351: }
 31222                           ;keyboard.c: 353: NUM_NOTES_PRESSED = 3;
 31223                           
 31224                           ; BSR set to: 0
 31225  005C9C  0E03               	movlw	3
 31226  005C9E  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 31227                           
 31228                           ; BSR set to: 0
 31229                           ;keyboard.c: 357: if(LATCH == 0) {latch_was_pressed = 0;}
 31230  005CA0  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 31231                           
 31232                           ; BSR set to: 0
 31233  005CA2  9A03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31234                           
 31235                           ; BSR set to: 0
 31236                           ;keyboard.c: 359: finish_arpeggio_setup();
 31237                           
 31238                           ; BSR set to: 0
 31239  005CA4  EC82  F04C         	call	_finish_arpeggio_setup	;wreg free
 31240                           
 31241                           ;keyboard.c: 360: TMR0ON = 1;
 31242  005CA8  8ED5               	bsf	4053,7,c	;volatile
 31243                           
 31244                           ;keyboard.c: 362: return;
 31245  005CAA  0012               	return	
 31246  005CAC                     l1461:
 31247                           
 31248                           ; BSR set to: 0
 31249                           ;keyboard.c: 363: }
 31250                           ;keyboard.c: 365: if((ON_OFF == 0) && (LATCH == 0)) {
 31251  005CAC  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31252  005CAE  0012               	return	
 31253                           
 31254                           ; BSR set to: 0
 31255  005CB0  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 31256  005CB2  0012               	return	
 31257                           
 31258                           ; BSR set to: 0
 31259                           ;keyboard.c: 367: if(NUM_NOTES_PRESSED > 0){
 31260  005CB4  502F               	movf	_NUM_NOTES_PRESSED,w,c
 31261  005CB6  B4D8               	btfsc	status,2,c
 31262  005CB8  D00A               	goto	l1469
 31263                           
 31264                           ; BSR set to: 0
 31265                           ;keyboard.c: 368: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 31266  005CBA  0E00               	movlw	0
 31267  005CBC  B003               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 31268  005CBE  0E01               	movlw	1
 31269  005CC0  ECED  F04B         	call	_wait_one_pulse
 31270                           
 31271                           ;keyboard.c: 369: if(note_off_was_sent == 0) {key_press_release_note_off();}
 31272  005CC4  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 31273  005CC6  EC8B  F02E         	call	_key_press_release_note_off	;wreg free
 31274                           
 31275                           ;keyboard.c: 370: TIMER_OVERFLOWS = 0;
 31276  005CCA  0E00               	movlw	0
 31277  005CCC  6E2E               	movwf	_TIMER_OVERFLOWS,c
 31278  005CCE                     l1469:
 31279                           
 31280                           ;keyboard.c: 371: }
 31281                           ;keyboard.c: 374: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 31282  005CCE  C030  F061         	movff	_parallel,??_playTriad
 31283  005CD2  0100               	movlb	0	; () banked
 31284  005CD4  6B62               	clrf	(??_playTriad+1)& (0+255),b
 31285  005CD6  BF61               	btfsc	??_playTriad& (0+255),7,b
 31286  005CD8  0762               	decf	(??_playTriad+1)& (0+255),f,b
 31287  005CDA  5169               	movf	playTriad@pitch& (0+255),w,b
 31288  005CDC  6F63               	movwf	(??_playTriad+2)& (0+255),b
 31289  005CDE  6B64               	clrf	(??_playTriad+3)& (0+255),b
 31290  005CE0  5161               	movf	??_playTriad& (0+255),w,b
 31291  005CE2  1963               	xorwf	(??_playTriad+2)& (0+255),w,b
 31292  005CE4  E106               	bnz	l26447
 31293  005CE6  5162               	movf	(??_playTriad+1)& (0+255),w,b
 31294  005CE8  1964               	xorwf	(??_playTriad+3)& (0+255),w,b
 31295  005CEA  A4D8               	btfss	status,2,c
 31296  005CEC  D002               	goto	l1471
 31297                           
 31298                           ; BSR set to: 0
 31299  005CEE  0E00               	movlw	0
 31300  005CF0  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 31301  005CF2                     l1471:
 31302  005CF2                     l26447:
 31303                           
 31304                           ; BSR set to: 0
 31305                           ;keyboard.c: 379: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 31306  005CF2  BC03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 31307                           
 31308                           ; BSR set to: 0
 31309  005CF4  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31310  005CF6  D001               	goto	l1472
 31311                           
 31312                           ; BSR set to: 0
 31313                           ;keyboard.c: 380: LATCH = 1;
 31314  005CF8  8004               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 31315  005CFA                     l1472:
 31316                           
 31317                           ; BSR set to: 0
 31318                           ;keyboard.c: 381: }
 31319                           ;keyboard.c: 384: if(((UN_LATCH_MODE == 0) | (UN_LATCH_MODE == 1)) && (latch_was_pressed
      +                           == 1)){
 31320  005CFA  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 31321  005CFC  D002               	goto	u45620
 31322                           
 31323                           ; BSR set to: 0
 31324  005CFE  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 31325  005D00  D006               	goto	l1473
 31326  005D02                     u45620:
 31327                           
 31328                           ; BSR set to: 0
 31329  005D02  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31330  005D04  D004               	goto	l1473
 31331                           
 31332                           ; BSR set to: 0
 31333                           ;keyboard.c: 385: NUM_NOTES_PRESSED = 0;
 31334  005D06  0E00               	movlw	0
 31335  005D08  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 31336                           
 31337                           ;keyboard.c: 386: ARRAY_INDEX = 0;
 31338  005D0A  0E00               	movlw	0
 31339  005D0C  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 31340  005D0E                     l1473:
 31341                           
 31342                           ; BSR set to: 0
 31343                           ;keyboard.c: 387: }
 31344                           ;keyboard.c: 389: finish_arpeggio_setup();
 31345                           
 31346                           ; BSR set to: 0
 31347  005D0E  EC82  F04C         	call	_finish_arpeggio_setup	;wreg free
 31348                           
 31349                           ;keyboard.c: 390: TMR0ON = 1;
 31350  005D12  8ED5               	bsf	4053,7,c	;volatile
 31351                           
 31352                           ;keyboard.c: 391: return;
 31353  005D14  0012               	return	
 31354  005D16                     __end_of_playTriad:
 31355                           	opt stack 0
 31356                           tblptru	equ	0xFF8
 31357                           tblptrh	equ	0xFF7
 31358                           tblptrl	equ	0xFF6
 31359                           tablat	equ	0xFF5
 31360                           prodh	equ	0xFF4
 31361                           prodl	equ	0xFF3
 31362                           intcon	equ	0xFF2
 31363                           intcon2	equ	0xFF1
 31364                           indf0	equ	0xFEF
 31365                           postinc0	equ	0xFEE
 31366                           fsr0h	equ	0xFEA
 31367                           fsr0l	equ	0xFE9
 31368                           wreg	equ	0xFE8
 31369                           postinc1	equ	0xFE6
 31370                           plusw1	equ	0xFE3
 31371                           fsr1h	equ	0xFE2
 31372                           fsr1l	equ	0xFE1
 31373                           indf2	equ	0xFDF
 31374                           postinc2	equ	0xFDE
 31375                           postdec2	equ	0xFDD
 31376                           plusw2	equ	0xFDB
 31377                           fsr2h	equ	0xFDA
 31378                           fsr2l	equ	0xFD9
 31379                           status	equ	0xFD8
 31380                           
 31381 ;; *************** function _playSeventh *****************
 31382 ;; Defined at:
 31383 ;;		line 396 in file "keyboard.c"
 31384 ;; Parameters:    Size  Location     Type
 31385 ;;  pitch           1    wreg     unsigned char 
 31386 ;; Auto vars:     Size  Location     Type
 31387 ;;  pitch           1    9[BANK0 ] unsigned char 
 31388 ;;  i               1    8[BANK0 ] unsigned char 
 31389 ;;  i               1    7[BANK0 ] unsigned char 
 31390 ;;  seventh_p       2    5[BANK0 ] PTR unsigned char 
 31391 ;;		 -> diminished_7th(4), half_diminished_7th(4), minor_7th(4), major_7th(4), 
 31392 ;;		 -> dominant_7th(4), 
 31393 ;; Return value:  Size  Location     Type
 31394 ;;                  1    wreg      void 
 31395 ;; Registers used:
 31396 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, prodl, prodh, cstack
 31397 ;; Tracked objects:
 31398 ;;		On entry : 0/0
 31399 ;;		On exit  : 0/0
 31400 ;;		Unchanged: 0/0
 31401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 31402 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31403 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31404 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31405 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31406 ;;Total ram usage:        9 bytes
 31407 ;; Hardware stack levels used:    1
 31408 ;; Hardware stack levels required when called:   10
 31409 ;; This function calls:
 31410 ;;		_finish_arpeggio_setup
 31411 ;;		_key_press_release_note_off
 31412 ;;		_noteOff
 31413 ;;		_noteOn
 31414 ;;		_wait_one_pulse
 31415 ;; This function is called by:
 31416 ;;		_playThisNote
 31417 ;; This function uses a non-reentrant model
 31418 ;;
 31419                           
 31420                           	psect	text80
 31421  005870                     __ptext80:
 31422                           	opt stack 0
 31423  005870                     _playSeventh:
 31424                           	opt stack 13
 31425                           
 31426                           ;incstack = 0
 31427                           ;playSeventh@pitch stored from wreg
 31428  005870  0100               	movlb	0	; () banked
 31429  005872  6F69               	movwf	playSeventh@pitch& (0+255),b
 31430                           
 31431                           ;keyboard.c: 398: unsigned char *seventh_p;
 31432                           ;keyboard.c: 401: switch (which_seventh) {
 31433  005874  D016               	goto	l1478
 31434  005876                     
 31435                           ;keyboard.c: 403: seventh_p = dominant_7th;
 31436  005876  0ED8               	movlw	low _dominant_7th
 31437  005878  0100               	movlb	0	; () banked
 31438  00587A  6F65               	movwf	playSeventh@seventh_p& (0+255),b
 31439  00587C  0E02               	movlw	high _dominant_7th
 31440  00587E  D00F               	goto	L18
 31441  005880                     
 31442                           ; BSR set to: 0
 31443                           ;keyboard.c: 406: seventh_p = major_7th;
 31444                           
 31445                           ; BSR set to: 0
 31446  005880  0ED4               	movlw	low _major_7th
 31447  005882  6F65               	movwf	playSeventh@seventh_p& (0+255),b
 31448  005884  0E02               	movlw	high _major_7th
 31449  005886  D00B               	goto	L18
 31450  005888                     
 31451                           ; BSR set to: 0
 31452                           ;keyboard.c: 409: seventh_p = minor_7th;
 31453                           
 31454                           ; BSR set to: 0
 31455  005888  0ED0               	movlw	low _minor_7th
 31456  00588A  6F65               	movwf	playSeventh@seventh_p& (0+255),b
 31457  00588C  0E02               	movlw	high _minor_7th
 31458  00588E  D007               	goto	L18
 31459  005890                     
 31460                           ; BSR set to: 0
 31461                           ;keyboard.c: 412: seventh_p = half_diminished_7th;
 31462                           
 31463                           ; BSR set to: 0
 31464  005890  0ECC               	movlw	low _half_diminished_7th
 31465  005892  6F65               	movwf	playSeventh@seventh_p& (0+255),b
 31466  005894  0E02               	movlw	high _half_diminished_7th
 31467  005896  D003               	goto	L18
 31468  005898                     
 31469                           ; BSR set to: 0
 31470                           ;keyboard.c: 415: seventh_p = diminished_7th;
 31471                           
 31472                           ; BSR set to: 0
 31473  005898  0EC8               	movlw	low _diminished_7th
 31474  00589A  6F65               	movwf	playSeventh@seventh_p& (0+255),b
 31475  00589C  0E02               	movlw	high _diminished_7th
 31476  00589E                     L18:
 31477  00589E  6F66               	movwf	(playSeventh@seventh_p+1)& (0+255),b
 31478                           
 31479                           ; BSR set to: 0
 31480                           ;keyboard.c: 419: }
 31481                           
 31482                           ; BSR set to: 0
 31483                           ;keyboard.c: 418: break;
 31484                           
 31485                           ;keyboard.c: 417: default:
 31486                           
 31487                           ;keyboard.c: 416: break;
 31488  0058A0  D011               	goto	l1480
 31489  0058A2                     l1478:
 31490                           
 31491                           ; BSR set to: 0
 31492  0058A2  0100               	movlb	0	; () banked
 31493  0058A4  51EF               	movf	_which_seventh& (0+255),w,b
 31494                           
 31495                           ; Switch size 1, requested type "space"
 31496                           ; Number of cases is 5, Range of values is 0 to 4
 31497                           ; switch strategies available:
 31498                           ; Name         Instructions Cycles
 31499                           ; simple_byte           16     9 (average)
 31500                           ;	Chosen strategy is simple_byte
 31501  0058A6  0A00               	xorlw	0	; case 0
 31502  0058A8  B4D8               	btfsc	status,2,c
 31503  0058AA  D7E5               	goto	l1479
 31504  0058AC  0A01               	xorlw	1	; case 1
 31505  0058AE  B4D8               	btfsc	status,2,c
 31506  0058B0  D7E7               	goto	l1481
 31507  0058B2  0A03               	xorlw	3	; case 2
 31508  0058B4  B4D8               	btfsc	status,2,c
 31509  0058B6  D7E8               	goto	l1482
 31510  0058B8  0A01               	xorlw	1	; case 3
 31511  0058BA  B4D8               	btfsc	status,2,c
 31512  0058BC  D7E9               	goto	l1483
 31513  0058BE  0A07               	xorlw	7	; case 4
 31514  0058C0  B4D8               	btfsc	status,2,c
 31515  0058C2  D7EA               	goto	l1484
 31516  0058C4                     l1480:
 31517                           
 31518                           ; BSR set to: 0
 31519                           ;keyboard.c: 422: if(ARPEGGIO_ON == 0){
 31520  0058C4  B604               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 31521  0058C6  D030               	goto	u45680
 31522                           
 31523                           ; BSR set to: 0
 31524                           ;keyboard.c: 423: for(unsigned char i = 0; i<4; i++){
 31525  0058C8  0E00               	movlw	0
 31526  0058CA  6F67               	movwf	playSeventh@i& (0+255),b
 31527  0058CC                     l26481:
 31528                           
 31529                           ; BSR set to: 0
 31530  0058CC  0E03               	movlw	3
 31531  0058CE  6567               	cpfsgt	playSeventh@i& (0+255),b
 31532  0058D0  D001               	goto	l1487
 31533  0058D2  D02A               	goto	u45680
 31534  0058D4                     l1487:
 31535                           
 31536                           ; BSR set to: 0
 31537                           ;keyboard.c: 424: if(ON_OFF == 1) {noteOn(channel,seventh_p[i] + pitch,velocity);}
 31538  0058D4  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31539  0058D6  D011               	goto	l1489
 31540                           
 31541                           ; BSR set to: 0
 31542  0058D8  5051               	movf	_velocity,w,c
 31543  0058DA  6EE6               	movwf	postinc1,c
 31544  0058DC  5167               	movf	playSeventh@i& (0+255),w,b
 31545  0058DE  0D01               	mullw	1
 31546  0058E0  50F3               	movf	prodl,w,c
 31547  0058E2  2565               	addwf	playSeventh@seventh_p& (0+255),w,b
 31548  0058E4  6ED9               	movwf	fsr2l,c
 31549  0058E6  50F4               	movf	prodh,w,c
 31550  0058E8  2166               	addwfc	(playSeventh@seventh_p+1)& (0+255),w,b
 31551  0058EA  6EDA               	movwf	fsr2h,c
 31552  0058EC  50DF               	movf	indf2,w,c
 31553  0058EE  2569               	addwf	playSeventh@pitch& (0+255),w,b
 31554  0058F0  6EE6               	movwf	postinc1,c
 31555  0058F2  503E               	movf	_channel,w,c
 31556  0058F4  6EE6               	movwf	postinc1,c
 31557  0058F6  EC93  F045         	call	_noteOn	;wreg free
 31558  0058FA                     l1489:
 31559                           
 31560                           ;keyboard.c: 425: if(ON_OFF == 0) {noteOff(channel,seventh_p[i] + pitch,velocity);}
 31561  0058FA  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31562  0058FC  D012               	goto	l1490
 31563  0058FE  5051               	movf	_velocity,w,c
 31564  005900  6EE6               	movwf	postinc1,c
 31565  005902  0100               	movlb	0	; () banked
 31566  005904  5167               	movf	playSeventh@i& (0+255),w,b
 31567  005906  0D01               	mullw	1
 31568  005908  50F3               	movf	prodl,w,c
 31569  00590A  2565               	addwf	playSeventh@seventh_p& (0+255),w,b
 31570  00590C  6ED9               	movwf	fsr2l,c
 31571  00590E  50F4               	movf	prodh,w,c
 31572  005910  2166               	addwfc	(playSeventh@seventh_p+1)& (0+255),w,b
 31573  005912  6EDA               	movwf	fsr2h,c
 31574  005914  50DF               	movf	indf2,w,c
 31575  005916  2569               	addwf	playSeventh@pitch& (0+255),w,b
 31576  005918  6EE6               	movwf	postinc1,c
 31577  00591A  503E               	movf	_channel,w,c
 31578  00591C  6EE6               	movwf	postinc1,c
 31579  00591E  EC48  F04A         	call	_noteOff	;wreg free
 31580  005922                     l1490:
 31581  005922  0100               	movlb	0	; () banked
 31582  005924  2B67               	incf	playSeventh@i& (0+255),f,b
 31583  005926  D7D2               	goto	l26481
 31584  005928                     u45680:
 31585                           
 31586                           ; BSR set to: 0
 31587                           ;keyboard.c: 426: }
 31588                           ;keyboard.c: 427: }
 31589                           ;keyboard.c: 430: if(ARPEGGIO_ON == 1){
 31590                           
 31591                           ; BSR set to: 0
 31592  005928  A604               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 31593  00592A  0012               	return	
 31594                           
 31595                           ; BSR set to: 0
 31596                           ;keyboard.c: 432: if(ON_OFF == 1) {
 31597  00592C  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31598  00592E  D034               	goto	l1492
 31599                           
 31600                           ; BSR set to: 0
 31601                           ;keyboard.c: 434: TMR0ON = 0;
 31602  005930  9ED5               	bcf	4053,7,c	;volatile
 31603                           
 31604                           ;keyboard.c: 437: parallel = pitch;
 31605  005932  C069  F030         	movff	playSeventh@pitch,_parallel
 31606                           
 31607                           ; BSR set to: 0
 31608                           ;keyboard.c: 440: if(NUM_NOTES_PRESSED > 0){
 31609  005936  502F               	movf	_NUM_NOTES_PRESSED,w,c
 31610  005938  B4D8               	btfsc	status,2,c
 31611  00593A  D00A               	goto	l1493
 31612                           
 31613                           ; BSR set to: 0
 31614                           ;keyboard.c: 441: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 31615  00593C  0E00               	movlw	0
 31616  00593E  B203               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 31617  005940  0E01               	movlw	1
 31618  005942  ECED  F04B         	call	_wait_one_pulse
 31619                           
 31620                           ;keyboard.c: 442: if(note_off_was_sent == 0) {key_press_release_note_off();}
 31621  005946  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 31622  005948  EC8B  F02E         	call	_key_press_release_note_off	;wreg free
 31623                           
 31624                           ;keyboard.c: 443: TIMER_OVERFLOWS = 0;
 31625  00594C  0E00               	movlw	0
 31626  00594E  6E2E               	movwf	_TIMER_OVERFLOWS,c
 31627  005950                     l1493:
 31628                           
 31629                           ;keyboard.c: 444: }
 31630                           ;keyboard.c: 446: for(unsigned char i = 0; i<4; i++){
 31631  005950  0E00               	movlw	0
 31632  005952  0100               	movlb	0	; () banked
 31633  005954  6F68               	movwf	playSeventh@i_1696& (0+255),b
 31634  005956                     l26511:
 31635                           
 31636                           ; BSR set to: 0
 31637  005956  0E03               	movlw	3
 31638  005958  6568               	cpfsgt	playSeventh@i_1696& (0+255),b
 31639  00595A  D001               	goto	l1495
 31640  00595C  D015               	goto	u45740
 31641  00595E                     l1495:
 31642                           
 31643                           ; BSR set to: 0
 31644                           ;keyboard.c: 447: ARPEGGIO[i] = seventh_p[i] + pitch;
 31645                           
 31646                           ; BSR set to: 0
 31647  00595E  5168               	movf	playSeventh@i_1696& (0+255),w,b
 31648  005960  0D01               	mullw	1
 31649  005962  0E82               	movlw	low _ARPEGGIO
 31650  005964  24F3               	addwf	prodl,w,c
 31651  005966  6ED9               	movwf	fsr2l,c
 31652  005968  0E01               	movlw	high _ARPEGGIO
 31653  00596A  20F4               	addwfc	prodh,w,c
 31654  00596C  6EDA               	movwf	fsr2h,c
 31655  00596E  5168               	movf	playSeventh@i_1696& (0+255),w,b
 31656  005970  0D01               	mullw	1
 31657  005972  50F3               	movf	prodl,w,c
 31658  005974  2565               	addwf	playSeventh@seventh_p& (0+255),w,b
 31659  005976  6EE9               	movwf	fsr0l,c
 31660  005978  50F4               	movf	prodh,w,c
 31661  00597A  2166               	addwfc	(playSeventh@seventh_p+1)& (0+255),w,b
 31662  00597C  6EEA               	movwf	fsr0h,c
 31663  00597E  50EF               	movf	indf0,w,c
 31664  005980  2569               	addwf	playSeventh@pitch& (0+255),w,b
 31665  005982  6EDF               	movwf	indf2,c
 31666                           
 31667                           ; BSR set to: 0
 31668  005984  2B68               	incf	playSeventh@i_1696& (0+255),f,b
 31669  005986  D7E7               	goto	l26511
 31670  005988                     u45740:
 31671                           
 31672                           ; BSR set to: 0
 31673                           ;keyboard.c: 448: }
 31674                           ;keyboard.c: 450: NUM_NOTES_PRESSED = 4;
 31675                           
 31676                           ; BSR set to: 0
 31677  005988  0E04               	movlw	4
 31678  00598A  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 31679                           
 31680                           ; BSR set to: 0
 31681                           ;keyboard.c: 453: if(LATCH == 0) {latch_was_pressed = 0;}
 31682  00598C  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 31683                           
 31684                           ; BSR set to: 0
 31685  00598E  9A03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31686                           
 31687                           ; BSR set to: 0
 31688                           ;keyboard.c: 455: finish_arpeggio_setup();
 31689                           
 31690                           ; BSR set to: 0
 31691  005990  EC82  F04C         	call	_finish_arpeggio_setup	;wreg free
 31692                           
 31693                           ;keyboard.c: 456: TMR0ON = 1;
 31694  005994  8ED5               	bsf	4053,7,c	;volatile
 31695                           
 31696                           ;keyboard.c: 458: return;
 31697  005996  0012               	return	
 31698  005998                     l1492:
 31699                           
 31700                           ; BSR set to: 0
 31701                           ;keyboard.c: 459: }
 31702                           ;keyboard.c: 461: if((ON_OFF == 0) && (LATCH == 0)) {
 31703  005998  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31704  00599A  0012               	return	
 31705                           
 31706                           ; BSR set to: 0
 31707  00599C  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 31708  00599E  0012               	return	
 31709                           
 31710                           ; BSR set to: 0
 31711                           ;keyboard.c: 463: if(NUM_NOTES_PRESSED > 0){
 31712  0059A0  502F               	movf	_NUM_NOTES_PRESSED,w,c
 31713  0059A2  B4D8               	btfsc	status,2,c
 31714  0059A4  D00A               	goto	l1500
 31715                           
 31716                           ; BSR set to: 0
 31717                           ;keyboard.c: 464: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 31718  0059A6  0E00               	movlw	0
 31719  0059A8  B003               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 31720  0059AA  0E01               	movlw	1
 31721  0059AC  ECED  F04B         	call	_wait_one_pulse
 31722                           
 31723                           ;keyboard.c: 465: if(note_off_was_sent == 0) {key_press_release_note_off();}
 31724  0059B0  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 31725  0059B2  EC8B  F02E         	call	_key_press_release_note_off	;wreg free
 31726                           
 31727                           ;keyboard.c: 466: TIMER_OVERFLOWS = 0;
 31728  0059B6  0E00               	movlw	0
 31729  0059B8  6E2E               	movwf	_TIMER_OVERFLOWS,c
 31730  0059BA                     l1500:
 31731                           
 31732                           ;keyboard.c: 467: }
 31733                           ;keyboard.c: 470: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 31734  0059BA  C030  F061         	movff	_parallel,??_playSeventh
 31735  0059BE  0100               	movlb	0	; () banked
 31736  0059C0  6B62               	clrf	(??_playSeventh+1)& (0+255),b
 31737  0059C2  BF61               	btfsc	??_playSeventh& (0+255),7,b
 31738  0059C4  0762               	decf	(??_playSeventh+1)& (0+255),f,b
 31739  0059C6  5169               	movf	playSeventh@pitch& (0+255),w,b
 31740  0059C8  6F63               	movwf	(??_playSeventh+2)& (0+255),b
 31741  0059CA  6B64               	clrf	(??_playSeventh+3)& (0+255),b
 31742  0059CC  5161               	movf	??_playSeventh& (0+255),w,b
 31743  0059CE  1963               	xorwf	(??_playSeventh+2)& (0+255),w,b
 31744  0059D0  E106               	bnz	l26549
 31745  0059D2  5162               	movf	(??_playSeventh+1)& (0+255),w,b
 31746  0059D4  1964               	xorwf	(??_playSeventh+3)& (0+255),w,b
 31747  0059D6  A4D8               	btfss	status,2,c
 31748  0059D8  D002               	goto	l1502
 31749                           
 31750                           ; BSR set to: 0
 31751  0059DA  0E00               	movlw	0
 31752  0059DC  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 31753  0059DE                     l1502:
 31754  0059DE                     l26549:
 31755                           
 31756                           ; BSR set to: 0
 31757                           ;keyboard.c: 475: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 31758  0059DE  BC03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 31759                           
 31760                           ; BSR set to: 0
 31761  0059E0  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31762  0059E2  D001               	goto	l1503
 31763                           
 31764                           ; BSR set to: 0
 31765                           ;keyboard.c: 476: LATCH = 1;
 31766  0059E4  8004               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 31767  0059E6                     l1503:
 31768                           
 31769                           ; BSR set to: 0
 31770                           ;keyboard.c: 477: }
 31771                           ;keyboard.c: 480: if(((UN_LATCH_MODE == 0) | (UN_LATCH_MODE == 1)) && (latch_was_pressed
      +                           == 1)){
 31772  0059E6  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 31773  0059E8  D002               	goto	u45840
 31774                           
 31775                           ; BSR set to: 0
 31776  0059EA  AE03               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 31777  0059EC  D006               	goto	l1504
 31778  0059EE                     u45840:
 31779                           
 31780                           ; BSR set to: 0
 31781  0059EE  AA03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31782  0059F0  D004               	goto	l1504
 31783                           
 31784                           ; BSR set to: 0
 31785                           ;keyboard.c: 481: NUM_NOTES_PRESSED = 0;
 31786  0059F2  0E00               	movlw	0
 31787  0059F4  6E2F               	movwf	_NUM_NOTES_PRESSED,c
 31788                           
 31789                           ;keyboard.c: 482: ARRAY_INDEX = 0;
 31790  0059F6  0E00               	movlw	0
 31791  0059F8  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 31792  0059FA                     l1504:
 31793                           
 31794                           ; BSR set to: 0
 31795                           ;keyboard.c: 483: }
 31796                           ;keyboard.c: 485: finish_arpeggio_setup();
 31797                           
 31798                           ; BSR set to: 0
 31799  0059FA  EC82  F04C         	call	_finish_arpeggio_setup	;wreg free
 31800                           
 31801                           ;keyboard.c: 486: TMR0ON = 1;
 31802  0059FE  8ED5               	bsf	4053,7,c	;volatile
 31803                           
 31804                           ;keyboard.c: 488: return;
 31805  005A00  0012               	return	
 31806  005A02                     __end_of_playSeventh:
 31807                           	opt stack 0
 31808                           tblptru	equ	0xFF8
 31809                           tblptrh	equ	0xFF7
 31810                           tblptrl	equ	0xFF6
 31811                           tablat	equ	0xFF5
 31812                           prodh	equ	0xFF4
 31813                           prodl	equ	0xFF3
 31814                           intcon	equ	0xFF2
 31815                           intcon2	equ	0xFF1
 31816                           indf0	equ	0xFEF
 31817                           postinc0	equ	0xFEE
 31818                           fsr0h	equ	0xFEA
 31819                           fsr0l	equ	0xFE9
 31820                           wreg	equ	0xFE8
 31821                           postinc1	equ	0xFE6
 31822                           plusw1	equ	0xFE3
 31823                           fsr1h	equ	0xFE2
 31824                           fsr1l	equ	0xFE1
 31825                           indf2	equ	0xFDF
 31826                           postinc2	equ	0xFDE
 31827                           postdec2	equ	0xFDD
 31828                           plusw2	equ	0xFDB
 31829                           fsr2h	equ	0xFDA
 31830                           fsr2l	equ	0xFD9
 31831                           status	equ	0xFD8
 31832                           
 31833 ;; *************** function _noteOn *****************
 31834 ;; Defined at:
 31835 ;;		line 123 in file "midi.c"
 31836 ;; Parameters:    Size  Location     Type
 31837 ;;  channel         1  [STACK] unsigned char 
 31838 ;;  pitch           1  [STACK] unsigned char 
 31839 ;;  velocity        1  [STACK] unsigned char 
 31840 ;; Auto vars:     Size  Location     Type
 31841 ;;		None
 31842 ;; Return value:  Size  Location     Type
 31843 ;;                  1  [STACK] void 
 31844 ;; Registers used:
 31845 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh
 31846 ;; Tracked objects:
 31847 ;;		On entry : 0/0
 31848 ;;		On exit  : 0/0
 31849 ;;		Unchanged: 0/0
 31850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 31851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31855 ;;Total ram usage:        0 bytes
 31856 ;; Hardware stack levels used:    1
 31857 ;; Hardware stack levels required when called:    7
 31858 ;; This function calls:
 31859 ;;		_noteOff
 31860 ;;		_sendOut
 31861 ;;		_sendUSB
 31862 ;; This function is called by:
 31863 ;;		_playThisNotePentatonic
 31864 ;;		_playTriad
 31865 ;;		_playSeventh
 31866 ;;		_playThisNote
 31867 ;;		_playThisNote8
 31868 ;;		_playDiatonicTriadMajor
 31869 ;;		_playDiatonicSeventhMajor
 31870 ;;		_playDiatonicTriadMinor
 31871 ;;		_playDiatonicSeventhMinor
 31872 ;;		_playArpeggio
 31873 ;;		_keyboard_all_note
 31874 ;;		_keyboard_eight_note
 31875 ;; This function uses a reentrant model
 31876 ;;
 31877                           
 31878                           	psect	text81
 31879  008B26                     __ptext81:
 31880                           	opt stack 0
 31881  008B26                     _noteOn:
 31882                           	opt stack 6
 31883                           
 31884                           ;midi.c: 125: noteNumber = pitch + semitone + ((octave + 1) * 12);
 31885                           ;stkvar	noteOn@pitch @ sp[(0)+-2]
 31886                           
 31887                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
 31888                           ;incstack = 0
 31889  008B26  0EFE               	movlw	-2
 31890  008B28  CFE3 F04A          	movff	plusw1,btemp+11
 31891  008B2C  5050               	movf	_octave,w,c
 31892  008B2E  0D0C               	mullw	12
 31893  008B30  50F3               	movf	prodl,w,c
 31894  008B32  243B               	addwf	_semitone,w,c
 31895  008B34  244A               	addwf	btemp+11,w,c
 31896  008B36  0F0C               	addlw	12
 31897  008B38  6E3C               	movwf	_noteNumber,c
 31898                           
 31899                           ;midi.c: 126: statusByte = channel | note_on;
 31900                           ;stkvar	noteOn@channel @ sp[(0)+-1]
 31901  008B3A  0EFF               	movlw	-1
 31902  008B3C  50E3               	movf	plusw1,w,c
 31903  008B3E  0990               	iorlw	144
 31904  008B40  6E3D               	movwf	_statusByte,c
 31905                           
 31906                           ;midi.c: 129: if (velocity == 0) {noteOff(channel, pitch, velocity);return;}
 31907                           ;stkvar	noteOn@velocity @ sp[(0)+-3]
 31908  008B42  0EFD               	movlw	-3
 31909  008B44  50E3               	movf	plusw1,w,c
 31910  008B46  A4D8               	btfss	status,2,c
 31911  008B48  D00C               	goto	l32715
 31912                           
 31913                           ;stkvar	noteOn@velocity @ sp[(0)+-3]
 31914  008B4A  0EFD               	movlw	-3
 31915  008B4C  50E3               	movf	plusw1,w,c
 31916  008B4E  6EE6               	movwf	postinc1,c
 31917                           
 31918                           ;stkvar	noteOn@pitch @ sp[(-1)+-2]
 31919  008B50  0EFD               	movlw	-3
 31920  008B52  50E3               	movf	plusw1,w,c
 31921  008B54  6EE6               	movwf	postinc1,c
 31922                           
 31923                           ;stkvar	noteOn@channel @ sp[(-2)+-1]
 31924  008B56  0EFD               	movlw	-3
 31925  008B58  50E3               	movf	plusw1,w,c
 31926  008B5A  6EE6               	movwf	postinc1,c
 31927  008B5C  EC48  F04A         	call	_noteOff	;wreg free
 31928  008B60  D017               	goto	l484
 31929  008B62                     l32715:
 31930                           
 31931                           ;midi.c: 132: sendUSB(statusByte, noteNumber, velocity);
 31932                           ;stkvar	noteOn@velocity @ sp[(0)+-3]
 31933  008B62  0EFD               	movlw	-3
 31934  008B64  50E3               	movf	plusw1,w,c
 31935  008B66  6EE6               	movwf	postinc1,c
 31936  008B68  503C               	movf	_noteNumber,w,c
 31937  008B6A  6EE6               	movwf	postinc1,c
 31938  008B6C  503D               	movf	_statusByte,w,c
 31939  008B6E  6EE6               	movwf	postinc1,c
 31940  008B70  ECDB  F036         	call	_sendUSB	;wreg free
 31941                           
 31942                           ;midi.c: 135: if(velocity > 0) {
 31943                           ;stkvar	noteOn@velocity @ sp[(0)+-3]
 31944  008B74  0EFD               	movlw	-3
 31945  008B76  50E3               	movf	plusw1,w,c
 31946  008B78  B4D8               	btfsc	status,2,c
 31947  008B7A  D009               	goto	l32721
 31948                           
 31949                           ;midi.c: 136: sendOut(statusByte, noteNumber, velocity);
 31950                           ;stkvar	noteOn@velocity @ sp[(0)+-3]
 31951  008B7C  0EFD               	movlw	-3
 31952  008B7E  50E3               	movf	plusw1,w,c
 31953  008B80  6EE6               	movwf	postinc1,c
 31954  008B82  503C               	movf	_noteNumber,w,c
 31955  008B84  6EE6               	movwf	postinc1,c
 31956  008B86  503D               	movf	_statusByte,w,c
 31957  008B88  6EE6               	movwf	postinc1,c
 31958  008B8A  EC64  F036         	call	_sendOut	;wreg free
 31959  008B8E                     l32721:
 31960                           
 31961                           ;midi.c: 139: }
 31962                           ;midi.c: 141: note_off_was_sent = 0;
 31963  008B8E  9002               	bcf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 31964  008B90                     l484:
 31965                           
 31966                           ; _noteOn: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsiz
      +                          e = 3, vargsize = 0
 31967  008B90  52E5               	movf	postdec1,f,c
 31968  008B92  52E5               	movf	postdec1,f,c
 31969  008B94  52E5               	movf	postdec1,f,c
 31970  008B96  0012               	return		;funcret
 31971  008B98                     __end_of_noteOn:
 31972                           	opt stack 0
 31973                           tblptru	equ	0xFF8
 31974                           tblptrh	equ	0xFF7
 31975                           tblptrl	equ	0xFF6
 31976                           tablat	equ	0xFF5
 31977                           prodh	equ	0xFF4
 31978                           prodl	equ	0xFF3
 31979                           intcon	equ	0xFF2
 31980                           intcon2	equ	0xFF1
 31981                           indf0	equ	0xFEF
 31982                           postinc0	equ	0xFEE
 31983                           fsr0h	equ	0xFEA
 31984                           fsr0l	equ	0xFE9
 31985                           wreg	equ	0xFE8
 31986                           postinc1	equ	0xFE6
 31987                           postdec1	equ	0xFE5
 31988                           plusw1	equ	0xFE3
 31989                           fsr1h	equ	0xFE2
 31990                           fsr1l	equ	0xFE1
 31991                           indf2	equ	0xFDF
 31992                           postinc2	equ	0xFDE
 31993                           postdec2	equ	0xFDD
 31994                           plusw2	equ	0xFDB
 31995                           fsr2h	equ	0xFDA
 31996                           fsr2l	equ	0xFD9
 31997                           status	equ	0xFD8
 31998                           
 31999 ;; *************** function _finish_arpeggio_setup *****************
 32000 ;; Defined at:
 32001 ;;		line 98 in file "arpeggio.c"
 32002 ;; Parameters:    Size  Location     Type
 32003 ;;		None
 32004 ;; Auto vars:     Size  Location     Type
 32005 ;;		None
 32006 ;; Return value:  Size  Location     Type
 32007 ;;                  1    wreg      void 
 32008 ;; Registers used:
 32009 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+10, btemp+11, prodl, prodh, cstack
 32010 ;; Tracked objects:
 32011 ;;		On entry : 0/0
 32012 ;;		On exit  : 0/0
 32013 ;;		Unchanged: 0/0
 32014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32019 ;;Total ram usage:        0 bytes
 32020 ;; Hardware stack levels used:    1
 32021 ;; Hardware stack levels required when called:    9
 32022 ;; This function calls:
 32023 ;;		_resetArpeggio
 32024 ;;		_setupArpeggio
 32025 ;; This function is called by:
 32026 ;;		_playThisNotePentatonic
 32027 ;;		_playTriad
 32028 ;;		_playSeventh
 32029 ;;		_playThisNote
 32030 ;;		_playThisNote8
 32031 ;;		_playDiatonicTriadMajor
 32032 ;;		_playDiatonicSeventhMajor
 32033 ;;		_playDiatonicTriadMinor
 32034 ;;		_playDiatonicSeventhMinor
 32035 ;; This function uses a non-reentrant model
 32036 ;;
 32037                           
 32038                           	psect	text82
 32039  009904                     __ptext82:
 32040                           	opt stack 0
 32041  009904                     _finish_arpeggio_setup:
 32042                           	opt stack 14
 32043                           
 32044                           ;arpeggio.c: 101: if((ON_OFF == 1) && (RESET_ON_KEY_PRESS == 1)){resetArpeggio();}
 32045                           
 32046                           ;incstack = 0
 32047  009904  BE05               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32048  009906  A404               	btfss	_RESET_ON_KEY_PRESS/(0+8),_RESET_ON_KEY_PRESS& (0+7),c
 32049  009908  D002               	goto	l5423
 32050  00990A  EC8D  F04A         	call	_resetArpeggio	;wreg free
 32051  00990E                     l5423:
 32052                           
 32053                           ;arpeggio.c: 102: if((ON_OFF == 0) && (RESET_ON_KEY_RELEASE == 1)){resetArpeggio();}
 32054  00990E  AE05               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32055  009910  A204               	btfss	_RESET_ON_KEY_RELEASE/(0+8),_RESET_ON_KEY_RELEASE& (0+7),c
 32056  009912  D002               	goto	l5424
 32057  009914  EC8D  F04A         	call	_resetArpeggio	;wreg free
 32058  009918                     l5424:
 32059                           
 32060                           ;arpeggio.c: 105: setupArpeggio();
 32061  009918  EC59  F045         	call	_setupArpeggio	;wreg free
 32062                           
 32063                           ;arpeggio.c: 107: TIMER_OVERFLOWS = 0;
 32064  00991C  0E00               	movlw	0
 32065  00991E  6E2E               	movwf	_TIMER_OVERFLOWS,c
 32066  009920  0012               	return		;funcret
 32067  009922                     __end_of_finish_arpeggio_setup:
 32068                           	opt stack 0
 32069                           tblptru	equ	0xFF8
 32070                           tblptrh	equ	0xFF7
 32071                           tblptrl	equ	0xFF6
 32072                           tablat	equ	0xFF5
 32073                           prodh	equ	0xFF4
 32074                           prodl	equ	0xFF3
 32075                           intcon	equ	0xFF2
 32076                           intcon2	equ	0xFF1
 32077                           indf0	equ	0xFEF
 32078                           postinc0	equ	0xFEE
 32079                           fsr0h	equ	0xFEA
 32080                           fsr0l	equ	0xFE9
 32081                           wreg	equ	0xFE8
 32082                           postinc1	equ	0xFE6
 32083                           postdec1	equ	0xFE5
 32084                           plusw1	equ	0xFE3
 32085                           fsr1h	equ	0xFE2
 32086                           fsr1l	equ	0xFE1
 32087                           indf2	equ	0xFDF
 32088                           postinc2	equ	0xFDE
 32089                           postdec2	equ	0xFDD
 32090                           plusw2	equ	0xFDB
 32091                           fsr2h	equ	0xFDA
 32092                           fsr2l	equ	0xFD9
 32093                           status	equ	0xFD8
 32094                           
 32095 ;; *************** function _setupArpeggio *****************
 32096 ;; Defined at:
 32097 ;;		line 183 in file "arpeggio.c"
 32098 ;; Parameters:    Size  Location     Type
 32099 ;;		None
 32100 ;; Auto vars:     Size  Location     Type
 32101 ;;		None
 32102 ;; Return value:  Size  Location     Type
 32103 ;;                  1    wreg      void 
 32104 ;; Registers used:
 32105 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+10, btemp+11, prodl, prodh, cstack
 32106 ;; Tracked objects:
 32107 ;;		On entry : 0/0
 32108 ;;		On exit  : 0/0
 32109 ;;		Unchanged: 0/0
 32110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32115 ;;Total ram usage:        0 bytes
 32116 ;; Hardware stack levels used:    1
 32117 ;; Hardware stack levels required when called:    8
 32118 ;; This function calls:
 32119 ;;		_copy_array
 32120 ;;		_random_pitches
 32121 ;;		_random_pitches_non_repeating
 32122 ;; This function is called by:
 32123 ;;		_Function_H_4
 32124 ;;		_finish_arpeggio_setup
 32125 ;; This function uses a non-reentrant model
 32126 ;;
 32127                           
 32128                           	psect	text83
 32129  008AB2                     __ptext83:
 32130                           	opt stack 0
 32131  008AB2                     _setupArpeggio:
 32132                           	opt stack 14
 32133                           
 32134                           ;arpeggio.c: 188: if(NUM_NOTES_PRESSED == 0){return;}
 32135                           
 32136                           ;incstack = 0
 32137  008AB2  502F               	movf	_NUM_NOTES_PRESSED,w,c
 32138  008AB4  B4D8               	btfsc	status,2,c
 32139  008AB6  0012               	return	
 32140                           
 32141                           ;arpeggio.c: 191: copy_array();
 32142  008AB8  ECAC  F047         	call	_copy_array	;wreg free
 32143                           
 32144                           ;arpeggio.c: 194: if(ARPEGGIO_TYPE == RANDOM) {random_pitches();}
 32145  008ABC  0E05               	movlw	5
 32146  008ABE  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 32147  008AC0  B4D8               	btfsc	status,2,c
 32148  008AC2  ECCC  F045         	call	_random_pitches	;wreg free
 32149                           
 32150                           ;arpeggio.c: 195: if(ARPEGGIO_TYPE == RANDOM_NON_REPEATING) {random_pitches_non_repeatin
      +                          g();}
 32151  008AC6  0E04               	movlw	4
 32152  008AC8  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 32153  008ACA  B4D8               	btfsc	status,2,c
 32154  008ACC  EC7A  F03C         	call	_random_pitches_non_repeating	;wreg free
 32155                           
 32156                           ;arpeggio.c: 204: if(ARPEGGIO_TYPE == AS_PRESSED){arpeggioPtr = ARPEGGIO;}
 32157  008AD0  0E06               	movlw	6
 32158  008AD2  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 32159  008AD4  A4D8               	btfss	status,2,c
 32160  008AD6  D004               	goto	l5457
 32161  008AD8  0E82               	movlw	low _ARPEGGIO
 32162  008ADA  6E2A               	movwf	_arpeggioPtr,c
 32163  008ADC  0E01               	movlw	high _ARPEGGIO
 32164  008ADE  6E2B               	movwf	_arpeggioPtr+1,c
 32165  008AE0                     l5457:
 32166                           
 32167                           ;arpeggio.c: 205: if(ARPEGGIO_TYPE == UP | ARPEGGIO_TYPE == UP_DOWN){arpeggioPtr = ARPEG
      +                          GIO_SORTED;}
 32168  008AE0  5035               	movf	_ARPEGGIO_TYPE,w,c
 32169  008AE2  B4D8               	btfsc	status,2,c
 32170  008AE4  D004               	goto	u45000
 32171  008AE6  0E02               	movlw	2
 32172  008AE8  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 32173  008AEA  A4D8               	btfss	status,2,c
 32174  008AEC  D004               	goto	l5458
 32175  008AEE                     u45000:
 32176  008AEE  0E78               	movlw	low _ARPEGGIO_SORTED
 32177  008AF0  6E2A               	movwf	_arpeggioPtr,c
 32178  008AF2  0E02               	movlw	high _ARPEGGIO_SORTED
 32179  008AF4  6E2B               	movwf	_arpeggioPtr+1,c
 32180  008AF6                     l5458:
 32181                           
 32182                           ;arpeggio.c: 206: if(ARPEGGIO_TYPE == DOWN | ARPEGGIO_TYPE == DOWN_UP){arpeggioPtr = ARP
      +                          EGGIO_SORTED;}
 32183  008AF6  0435               	decf	_ARPEGGIO_TYPE,w,c
 32184  008AF8  B4D8               	btfsc	status,2,c
 32185  008AFA  D004               	goto	u45020
 32186  008AFC  0E03               	movlw	3
 32187  008AFE  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 32188  008B00  A4D8               	btfss	status,2,c
 32189  008B02  D004               	goto	l5461
 32190  008B04                     u45020:
 32191  008B04  0E78               	movlw	low _ARPEGGIO_SORTED
 32192  008B06  6E2A               	movwf	_arpeggioPtr,c
 32193  008B08  0E02               	movlw	high _ARPEGGIO_SORTED
 32194  008B0A  6E2B               	movwf	_arpeggioPtr+1,c
 32195  008B0C                     l5461:
 32196                           
 32197                           ;arpeggio.c: 207: if(ARPEGGIO_TYPE == RANDOM | ARPEGGIO_TYPE == RANDOM_NON_REPEATING){ar
      +                          peggioPtr = ARPEGGIO_RANDOM;}
 32198  008B0C  0E05               	movlw	5
 32199  008B0E  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 32200  008B10  B4D8               	btfsc	status,2,c
 32201  008B12  D004               	goto	u45040
 32202  008B14  0E04               	movlw	4
 32203  008B16  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 32204  008B18  A4D8               	btfss	status,2,c
 32205  008B1A  0012               	return	
 32206  008B1C                     u45040:
 32207  008B1C  0E68               	movlw	low _ARPEGGIO_RANDOM
 32208  008B1E  6E2A               	movwf	_arpeggioPtr,c
 32209  008B20  0E02               	movlw	high _ARPEGGIO_RANDOM
 32210  008B22  6E2B               	movwf	_arpeggioPtr+1,c
 32211  008B24  0012               	return	
 32212  008B26                     __end_of_setupArpeggio:
 32213                           	opt stack 0
 32214                           tblptru	equ	0xFF8
 32215                           tblptrh	equ	0xFF7
 32216                           tblptrl	equ	0xFF6
 32217                           tablat	equ	0xFF5
 32218                           prodh	equ	0xFF4
 32219                           prodl	equ	0xFF3
 32220                           intcon	equ	0xFF2
 32221                           intcon2	equ	0xFF1
 32222                           indf0	equ	0xFEF
 32223                           postinc0	equ	0xFEE
 32224                           fsr0h	equ	0xFEA
 32225                           fsr0l	equ	0xFE9
 32226                           wreg	equ	0xFE8
 32227                           postinc1	equ	0xFE6
 32228                           postdec1	equ	0xFE5
 32229                           plusw1	equ	0xFE3
 32230                           fsr1h	equ	0xFE2
 32231                           fsr1l	equ	0xFE1
 32232                           indf2	equ	0xFDF
 32233                           postinc2	equ	0xFDE
 32234                           postdec2	equ	0xFDD
 32235                           plusw2	equ	0xFDB
 32236                           fsr2h	equ	0xFDA
 32237                           fsr2l	equ	0xFD9
 32238                           status	equ	0xFD8
 32239                           
 32240 ;; *************** function _random_pitches_non_repeating *****************
 32241 ;; Defined at:
 32242 ;;		line 265 in file "arpeggio.c"
 32243 ;; Parameters:    Size  Location     Type
 32244 ;;		None
 32245 ;; Auto vars:     Size  Location     Type
 32246 ;;  randomIndex     1  [STACK] unsigned char 
 32247 ;;  temp            1  [STACK] unsigned char 
 32248 ;;  i               1  [STACK] unsigned char 
 32249 ;; Return value:  Size  Location     Type
 32250 ;;                  1  [STACK] void 
 32251 ;; Registers used:
 32252 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+10, btemp+11, prodl
 32253 ;; Tracked objects:
 32254 ;;		On entry : 0/0
 32255 ;;		On exit  : 0/0
 32256 ;;		Unchanged: 0/0
 32257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32262 ;;Total ram usage:        0 bytes
 32263 ;; Hardware stack levels used:    1
 32264 ;; Hardware stack levels required when called:    7
 32265 ;; This function calls:
 32266 ;;		___awmod
 32267 ;;		_rand
 32268 ;; This function is called by:
 32269 ;;		_processOctave
 32270 ;;		_setupArpeggio
 32271 ;;		_playArpeggio
 32272 ;; This function uses a reentrant model
 32273 ;;
 32274                           
 32275                           	psect	text84
 32276  0078F4                     __ptext84:
 32277                           	opt stack 0
 32278  0078F4                     _random_pitches_non_repeating:
 32279                           	opt stack 0
 32280                           
 32281                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
 32282  0078F4  52E6               	movf	postinc1,f,c
 32283  0078F6  52E6               	movf	postinc1,f,c
 32284  0078F8  52E6               	movf	postinc1,f,c
 32285                           
 32286                           ;arpeggio.c: 267: if(NUM_NOTES_PRESSED == 0){return;}
 32287                           
 32288                           ;incstack = 0
 32289  0078FA  502F               	movf	_NUM_NOTES_PRESSED,w,c
 32290  0078FC  B4D8               	btfsc	status,2,c
 32291  0078FE  D04D               	goto	u59330
 32292                           
 32293                           ;arpeggio.c: 269: for(unsigned char i = 0; i < NUM_NOTES_PRESSED; i++) {
 32294                           ;stkvar	random_pitches_non_repeating@i @ sp[(-3)+2]
 32295  007900  0EFF               	movlw	-1
 32296  007902  6AE3               	clrf	plusw1,c
 32297  007904  D043               	goto	l32753
 32298  007906                     l32743:
 32299                           
 32300                           ;arpeggio.c: 270: unsigned char temp = ARPEGGIO_RANDOM[i];
 32301                           ;stkvar	random_pitches_non_repeating@i @ sp[(-3)+2]
 32302  007906  0EFF               	movlw	-1
 32303  007908  50E3               	movf	plusw1,w,c
 32304  00790A  6E40               	movwf	btemp+1,c
 32305  00790C  6A41               	clrf	btemp+2,c
 32306  00790E  0E68               	movlw	low _ARPEGGIO_RANDOM
 32307  007910  2440               	addwf	btemp+1,w,c
 32308  007912  6ED9               	movwf	fsr2l,c
 32309  007914  0E02               	movlw	high _ARPEGGIO_RANDOM
 32310  007916  2041               	addwfc	btemp+2,w,c
 32311  007918  6EDA               	movwf	fsr2h,c
 32312  00791A  50DF               	movf	indf2,w,c
 32313  00791C  6E4A               	movwf	btemp+11,c
 32314                           
 32315                           ;stkvar	random_pitches_non_repeating@temp @ sp[(-3)+1]
 32316  00791E  0EFE               	movlw	-2
 32317  007920  C04A  FFE3         	movff	btemp+11,plusw1
 32318                           
 32319                           ;arpeggio.c: 271: unsigned char randomIndex = rand() % NUM_NOTES_PRESSED;
 32320  007924  502F               	movf	_NUM_NOTES_PRESSED,w,c
 32321  007926  6EE6               	movwf	postinc1,c
 32322  007928  0E00               	movlw	0
 32323  00792A  6EE6               	movwf	postinc1,c
 32324  00792C  ECEE  F041         	call	_rand	;wreg free
 32325  007930  C03F  FFE6         	movff	btemp,postinc1
 32326  007934  C040  FFE6         	movff	btemp+1,postinc1
 32327  007938  EC72  F034         	call	___awmod	;wreg free
 32328                           
 32329                           ;stkvar	random_pitches_non_repeating@randomIndex @ sp[(-3)+0]
 32330  00793C  0EFD               	movlw	-3
 32331  00793E  C03F  FFE3         	movff	btemp,plusw1
 32332                           
 32333                           ;arpeggio.c: 272: ARPEGGIO_RANDOM[i] = ARPEGGIO_RANDOM[randomIndex];
 32334                           ;stkvar	random_pitches_non_repeating@randomIndex @ sp[(-3)+0]
 32335  007942  0EFD               	movlw	-3
 32336  007944  50E3               	movf	plusw1,w,c
 32337  007946  6E40               	movwf	btemp+1,c
 32338  007948  6A41               	clrf	btemp+2,c
 32339  00794A  0E68               	movlw	low _ARPEGGIO_RANDOM
 32340  00794C  2440               	addwf	btemp+1,w,c
 32341  00794E  6ED9               	movwf	fsr2l,c
 32342  007950  0E02               	movlw	high _ARPEGGIO_RANDOM
 32343  007952  2041               	addwfc	btemp+2,w,c
 32344  007954  6EDA               	movwf	fsr2h,c
 32345                           
 32346                           ;stkvar	random_pitches_non_repeating@i @ sp[(-3)+2]
 32347  007956  0EFF               	movlw	-1
 32348  007958  50E3               	movf	plusw1,w,c
 32349  00795A  6E40               	movwf	btemp+1,c
 32350  00795C  6A41               	clrf	btemp+2,c
 32351  00795E  0E68               	movlw	low _ARPEGGIO_RANDOM
 32352  007960  2440               	addwf	btemp+1,w,c
 32353  007962  6EE9               	movwf	fsr0l,c
 32354  007964  0E02               	movlw	high _ARPEGGIO_RANDOM
 32355  007966  2041               	addwfc	btemp+2,w,c
 32356  007968  6EEA               	movwf	fsr0h,c
 32357  00796A  CFDF FFEF          	movff	indf2,indf0
 32358                           
 32359                           ;arpeggio.c: 273: ARPEGGIO_RANDOM[randomIndex] = temp;
 32360                           ;stkvar	random_pitches_non_repeating@temp @ sp[(-3)+1]
 32361                           ;stkvar	random_pitches_non_repeating@randomIndex @ sp[(-3)+0]
 32362  00796E  0EFD               	movlw	-3
 32363  007970  50E3               	movf	plusw1,w,c
 32364  007972  6E40               	movwf	btemp+1,c
 32365  007974  6A41               	clrf	btemp+2,c
 32366  007976  0E68               	movlw	low _ARPEGGIO_RANDOM
 32367  007978  2440               	addwf	btemp+1,w,c
 32368  00797A  6ED9               	movwf	fsr2l,c
 32369  00797C  0E02               	movlw	high _ARPEGGIO_RANDOM
 32370  00797E  2041               	addwfc	btemp+2,w,c
 32371  007980  6EDA               	movwf	fsr2h,c
 32372  007982  0EFE               	movlw	-2
 32373  007984  CFE3 FFDF          	movff	plusw1,indf2
 32374                           
 32375                           ;stkvar	random_pitches_non_repeating@i @ sp[(-3)+2]
 32376  007988  0EFF               	movlw	-1
 32377  00798A  2AE3               	incf	plusw1,f,c
 32378  00798C                     l32753:
 32379                           
 32380                           ;stkvar	random_pitches_non_repeating@i @ sp[(-3)+2]
 32381  00798C  0EFF               	movlw	-1
 32382  00798E  CFE3 F03F          	movff	plusw1,btemp
 32383  007992  502F               	movf	_NUM_NOTES_PRESSED,w,c
 32384  007994  5C3F               	subwf	btemp,w,c
 32385  007996  A0D8               	btfss	status,0,c
 32386  007998  D7B6               	goto	l32743
 32387  00799A                     u59330:
 32388                           
 32389                           ; _random_pitches_non_repeating: autosize = 3, savesize = 0, parsavesize = 0, tempsize =
      +                           0 parsize = 0, argsize = 0, vargsize = 0
 32390  00799A  52E5               	movf	postdec1,f,c
 32391  00799C  52E5               	movf	postdec1,f,c
 32392  00799E  52E5               	movf	postdec1,f,c
 32393  0079A0  0012               	return		;funcret
 32394  0079A2                     __end_of_random_pitches_non_repeating:
 32395                           	opt stack 0
 32396                           tblptru	equ	0xFF8
 32397                           tblptrh	equ	0xFF7
 32398                           tblptrl	equ	0xFF6
 32399                           tablat	equ	0xFF5
 32400                           prodh	equ	0xFF4
 32401                           prodl	equ	0xFF3
 32402                           intcon	equ	0xFF2
 32403                           intcon2	equ	0xFF1
 32404                           indf0	equ	0xFEF
 32405                           postinc0	equ	0xFEE
 32406                           fsr0h	equ	0xFEA
 32407                           fsr0l	equ	0xFE9
 32408                           wreg	equ	0xFE8
 32409                           postinc1	equ	0xFE6
 32410                           postdec1	equ	0xFE5
 32411                           plusw1	equ	0xFE3
 32412                           fsr1h	equ	0xFE2
 32413                           fsr1l	equ	0xFE1
 32414                           indf2	equ	0xFDF
 32415                           postinc2	equ	0xFDE
 32416                           postdec2	equ	0xFDD
 32417                           plusw2	equ	0xFDB
 32418                           fsr2h	equ	0xFDA
 32419                           fsr2l	equ	0xFD9
 32420                           status	equ	0xFD8
 32421                           
 32422 ;; *************** function _random_pitches *****************
 32423 ;; Defined at:
 32424 ;;		line 254 in file "arpeggio.c"
 32425 ;; Parameters:    Size  Location     Type
 32426 ;;		None
 32427 ;; Auto vars:     Size  Location     Type
 32428 ;;  random_array    1  [STACK] unsigned char 
 32429 ;;  i               1  [STACK] unsigned char 
 32430 ;; Return value:  Size  Location     Type
 32431 ;;                  1  [STACK] void 
 32432 ;; Registers used:
 32433 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+10, btemp+11, prodl
 32434 ;; Tracked objects:
 32435 ;;		On entry : 0/0
 32436 ;;		On exit  : 0/0
 32437 ;;		Unchanged: 0/0
 32438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32443 ;;Total ram usage:        0 bytes
 32444 ;; Hardware stack levels used:    1
 32445 ;; Hardware stack levels required when called:    7
 32446 ;; This function calls:
 32447 ;;		___awmod
 32448 ;;		_rand
 32449 ;; This function is called by:
 32450 ;;		_processOctave
 32451 ;;		_setupArpeggio
 32452 ;;		_playArpeggio
 32453 ;; This function uses a reentrant model
 32454 ;;
 32455                           
 32456                           	psect	text85
 32457  008B98                     __ptext85:
 32458                           	opt stack 0
 32459  008B98                     _random_pitches:
 32460                           	opt stack 0
 32461                           
 32462                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
 32463  008B98  52E6               	movf	postinc1,f,c
 32464  008B9A  52E6               	movf	postinc1,f,c
 32465                           
 32466                           ;arpeggio.c: 256: if(NUM_NOTES_PRESSED == 0){return;}
 32467                           
 32468                           ;incstack = 0
 32469  008B9C  502F               	movf	_NUM_NOTES_PRESSED,w,c
 32470  008B9E  B4D8               	btfsc	status,2,c
 32471  008BA0  D031               	goto	u59310
 32472                           
 32473                           ;arpeggio.c: 258: for (unsigned char i = 0; i < NUM_NOTES_PRESSED; i++){
 32474                           ;stkvar	random_pitches@i @ sp[(-2)+1]
 32475  008BA2  0EFF               	movlw	-1
 32476  008BA4  6AE3               	clrf	plusw1,c
 32477  008BA6  D027               	goto	l32735
 32478  008BA8                     l32729:
 32479                           
 32480                           ;arpeggio.c: 259: unsigned char random_array_index = rand() % (NUM_NOTES_PRESSED);
 32481  008BA8  502F               	movf	_NUM_NOTES_PRESSED,w,c
 32482  008BAA  6EE6               	movwf	postinc1,c
 32483  008BAC  0E00               	movlw	0
 32484  008BAE  6EE6               	movwf	postinc1,c
 32485  008BB0  ECEE  F041         	call	_rand	;wreg free
 32486  008BB4  C03F  FFE6         	movff	btemp,postinc1
 32487  008BB8  C040  FFE6         	movff	btemp+1,postinc1
 32488  008BBC  EC72  F034         	call	___awmod	;wreg free
 32489                           
 32490                           ;stkvar	random_pitches@random_array_index @ sp[(-2)+0]
 32491  008BC0  0EFE               	movlw	-2
 32492  008BC2  C03F  FFE3         	movff	btemp,plusw1
 32493                           
 32494                           ;arpeggio.c: 260: ARPEGGIO_RANDOM[i] = ARPEGGIO[random_array_index];
 32495                           ;stkvar	random_pitches@random_array_index @ sp[(-2)+0]
 32496  008BC6  0EFE               	movlw	-2
 32497  008BC8  50E3               	movf	plusw1,w,c
 32498  008BCA  6E40               	movwf	btemp+1,c
 32499  008BCC  6A41               	clrf	btemp+2,c
 32500  008BCE  0E82               	movlw	low _ARPEGGIO
 32501  008BD0  2440               	addwf	btemp+1,w,c
 32502  008BD2  6ED9               	movwf	fsr2l,c
 32503  008BD4  0E01               	movlw	high _ARPEGGIO
 32504  008BD6  2041               	addwfc	btemp+2,w,c
 32505  008BD8  6EDA               	movwf	fsr2h,c
 32506                           
 32507                           ;stkvar	random_pitches@i @ sp[(-2)+1]
 32508  008BDA  0EFF               	movlw	-1
 32509  008BDC  50E3               	movf	plusw1,w,c
 32510  008BDE  6E40               	movwf	btemp+1,c
 32511  008BE0  6A41               	clrf	btemp+2,c
 32512  008BE2  0E68               	movlw	low _ARPEGGIO_RANDOM
 32513  008BE4  2440               	addwf	btemp+1,w,c
 32514  008BE6  6EE9               	movwf	fsr0l,c
 32515  008BE8  0E02               	movlw	high _ARPEGGIO_RANDOM
 32516  008BEA  2041               	addwfc	btemp+2,w,c
 32517  008BEC  6EEA               	movwf	fsr0h,c
 32518  008BEE  CFDF FFEF          	movff	indf2,indf0
 32519                           
 32520                           ;stkvar	random_pitches@i @ sp[(-2)+1]
 32521  008BF2  0EFF               	movlw	-1
 32522  008BF4  2AE3               	incf	plusw1,f,c
 32523  008BF6                     l32735:
 32524                           
 32525                           ;stkvar	random_pitches@i @ sp[(-2)+1]
 32526  008BF6  0EFF               	movlw	-1
 32527  008BF8  CFE3 F03F          	movff	plusw1,btemp
 32528  008BFC  502F               	movf	_NUM_NOTES_PRESSED,w,c
 32529  008BFE  5C3F               	subwf	btemp,w,c
 32530  008C00  A0D8               	btfss	status,0,c
 32531  008C02  D7D2               	goto	l32729
 32532  008C04                     u59310:
 32533                           
 32534                           ; _random_pitches: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
 32535  008C04  52E5               	movf	postdec1,f,c
 32536  008C06  52E5               	movf	postdec1,f,c
 32537  008C08  0012               	return		;funcret
 32538  008C0A                     __end_of_random_pitches:
 32539                           	opt stack 0
 32540                           tblptru	equ	0xFF8
 32541                           tblptrh	equ	0xFF7
 32542                           tblptrl	equ	0xFF6
 32543                           tablat	equ	0xFF5
 32544                           prodh	equ	0xFF4
 32545                           prodl	equ	0xFF3
 32546                           intcon	equ	0xFF2
 32547                           intcon2	equ	0xFF1
 32548                           indf0	equ	0xFEF
 32549                           postinc0	equ	0xFEE
 32550                           fsr0h	equ	0xFEA
 32551                           fsr0l	equ	0xFE9
 32552                           wreg	equ	0xFE8
 32553                           postinc1	equ	0xFE6
 32554                           postdec1	equ	0xFE5
 32555                           plusw1	equ	0xFE3
 32556                           fsr1h	equ	0xFE2
 32557                           fsr1l	equ	0xFE1
 32558                           indf2	equ	0xFDF
 32559                           postinc2	equ	0xFDE
 32560                           postdec2	equ	0xFDD
 32561                           plusw2	equ	0xFDB
 32562                           fsr2h	equ	0xFDA
 32563                           fsr2l	equ	0xFD9
 32564                           status	equ	0xFD8
 32565                           
 32566 ;; *************** function _rand *****************
 32567 ;; Defined at:
 32568 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
 32569 ;; Parameters:    Size  Location     Type
 32570 ;;		None
 32571 ;; Auto vars:     Size  Location     Type
 32572 ;;		None
 32573 ;; Return value:  Size  Location     Type
 32574 ;;                  2  [STACK] int 
 32575 ;; Registers used:
 32576 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+
      +10, btemp+11
 32577 ;; Tracked objects:
 32578 ;;		On entry : 0/0
 32579 ;;		On exit  : 0/0
 32580 ;;		Unchanged: 0/0
 32581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32583 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32585 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32586 ;;Total ram usage:        0 bytes
 32587 ;; Hardware stack levels used:    1
 32588 ;; Hardware stack levels required when called:    6
 32589 ;; This function calls:
 32590 ;;		___lmul
 32591 ;; This function is called by:
 32592 ;;		_random_pitches
 32593 ;;		_random_pitches_non_repeating
 32594 ;;		_playArpeggio
 32595 ;; This function uses a reentrant model
 32596 ;;
 32597                           
 32598                           	psect	text86
 32599  0083DC                     __ptext86:
 32600                           	opt stack 0
 32601  0083DC                     _rand:
 32602                           	opt stack 6
 32603                           
 32604                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
 32605                           ;incstack = 0
 32606  0083DC  0E6D               	movlw	109
 32607  0083DE  6EE6               	movwf	postinc1,c
 32608  0083E0  0E4E               	movlw	78
 32609  0083E2  6EE6               	movwf	postinc1,c
 32610  0083E4  0EC6               	movlw	198
 32611  0083E6  6EE6               	movwf	postinc1,c
 32612  0083E8  0E41               	movlw	65
 32613  0083EA  6EE6               	movwf	postinc1,c
 32614  0083EC  C1EF  FFE6         	movff	_randx,postinc1
 32615  0083F0  C1F0  FFE6         	movff	_randx+1,postinc1
 32616  0083F4  C1F1  FFE6         	movff	_randx+2,postinc1
 32617  0083F8  C1F2  FFE6         	movff	_randx+3,postinc1
 32618  0083FC  ECA5  F03A         	call	___lmul	;wreg free
 32619  008400  C03F  F1EF         	movff	btemp,_randx
 32620  008404  C040  F1F0         	movff	btemp+1,_randx+1
 32621  008408  C041  F1F1         	movff	btemp+2,_randx+2
 32622  00840C  C042  F1F2         	movff	btemp+3,_randx+3
 32623  008410  0E39               	movlw	57
 32624  008412  0101               	movlb	1	; () banked
 32625  008414  27EF               	addwf	_randx& (0+255),f,b
 32626  008416  0E30               	movlw	48
 32627  008418  23F0               	addwfc	(_randx+1)& (0+255),f,b
 32628  00841A  0E00               	movlw	0
 32629  00841C  23F1               	addwfc	(_randx+2)& (0+255),f,b
 32630  00841E  0E00               	movlw	0
 32631  008420  23F2               	addwfc	(_randx+3)& (0+255),f,b
 32632                           
 32633                           ; BSR set to: 1
 32634  008422  0E10               	movlw	16
 32635  008424  6E4A               	movwf	btemp+11,c
 32636  008426  C1EF  F043         	movff	_randx,btemp+4
 32637  00842A  C1F0  F044         	movff	_randx+1,btemp+5
 32638  00842E  C1F1  F045         	movff	_randx+2,btemp+6
 32639  008432  C1F2  F046         	movff	_randx+3,btemp+7
 32640  008436                     u59135:
 32641  008436  664A               	tstfsz	btemp+11,c
 32642  008438  D001               	goto	u59136
 32643  00843A  D007               	goto	u59137
 32644  00843C                     u59136:
 32645  00843C  3446               	rlcf	btemp+7,w,c
 32646  00843E  3246               	rrcf	btemp+7,f,c
 32647  008440  3245               	rrcf	btemp+6,f,c
 32648  008442  3244               	rrcf	btemp+5,f,c
 32649  008444  3243               	rrcf	btemp+4,f,c
 32650  008446  2E4A               	decfsz	btemp+11,f,c
 32651  008448  D7F6               	goto	u59135
 32652  00844A                     u59137:
 32653  00844A  C043  F03F         	movff	btemp+4,btemp
 32654  00844E  C044  F040         	movff	btemp+5,btemp+1
 32655  008452  0EFF               	movlw	255
 32656  008454  6E49               	movwf	btemp+10,c
 32657  008456  0E7F               	movlw	127
 32658  008458  6E4A               	movwf	btemp+11,c
 32659  00845A  5049               	movf	btemp+10,w,c
 32660  00845C  163F               	andwf	btemp,f,c
 32661  00845E  504A               	movf	btemp+11,w,c
 32662  008460  1640               	andwf	btemp+1,f,c
 32663                           
 32664                           ; _rand: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize 
      +                          = 0, vargsize = 0
 32665  008462  0012               	return		;funcret
 32666  008464                     __end_of_rand:
 32667                           	opt stack 0
 32668                           tblptru	equ	0xFF8
 32669                           tblptrh	equ	0xFF7
 32670                           tblptrl	equ	0xFF6
 32671                           tablat	equ	0xFF5
 32672                           prodh	equ	0xFF4
 32673                           prodl	equ	0xFF3
 32674                           intcon	equ	0xFF2
 32675                           intcon2	equ	0xFF1
 32676                           indf0	equ	0xFEF
 32677                           postinc0	equ	0xFEE
 32678                           fsr0h	equ	0xFEA
 32679                           fsr0l	equ	0xFE9
 32680                           wreg	equ	0xFE8
 32681                           postinc1	equ	0xFE6
 32682                           postdec1	equ	0xFE5
 32683                           plusw1	equ	0xFE3
 32684                           fsr1h	equ	0xFE2
 32685                           fsr1l	equ	0xFE1
 32686                           indf2	equ	0xFDF
 32687                           postinc2	equ	0xFDE
 32688                           postdec2	equ	0xFDD
 32689                           plusw2	equ	0xFDB
 32690                           fsr2h	equ	0xFDA
 32691                           fsr2l	equ	0xFD9
 32692                           status	equ	0xFD8
 32693                           
 32694 ;; *************** function ___awmod *****************
 32695 ;; Defined at:
 32696 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 32697 ;; Parameters:    Size  Location     Type
 32698 ;;  dividend        2  [STACK] int 
 32699 ;;  divisor         2  [STACK] int 
 32700 ;; Auto vars:     Size  Location     Type
 32701 ;;  sign            1  [STACK] unsigned char 
 32702 ;;  counter         1  [STACK] unsigned char 
 32703 ;; Return value:  Size  Location     Type
 32704 ;;                  2  [STACK] int 
 32705 ;; Registers used:
 32706 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl
 32707 ;; Tracked objects:
 32708 ;;		On entry : 0/1
 32709 ;;		On exit  : 0/0
 32710 ;;		Unchanged: 0/0
 32711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32716 ;;Total ram usage:        0 bytes
 32717 ;; Hardware stack levels used:    1
 32718 ;; Hardware stack levels required when called:    5
 32719 ;; This function calls:
 32720 ;;		Nothing
 32721 ;; This function is called by:
 32722 ;;		_processOctave
 32723 ;;		_displayDigits
 32724 ;;		_int2string
 32725 ;;		_random_pitches
 32726 ;;		_random_pitches_non_repeating
 32727 ;;		_playArpeggio
 32728 ;; This function uses a reentrant model
 32729 ;;
 32730                           
 32731                           	psect	text87
 32732  0068E4                     __ptext87:
 32733                           	opt stack 0
 32734  0068E4                     ___awmod:
 32735                           	opt stack 0
 32736                           
 32737                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
 32738  0068E4  52E6               	movf	postinc1,f,c
 32739  0068E6  52E6               	movf	postinc1,f,c
 32740                           
 32741                           ;stkvar	___awmod@sign @ sp[(-2)+0]
 32742                           
 32743                           ;incstack = 0
 32744  0068E8  0EFE               	movlw	-2
 32745  0068EA  6AE3               	clrf	plusw1,c
 32746                           
 32747                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 32748  0068EC  0EFD               	movlw	-3
 32749  0068EE  AEE3               	btfss	plusw1,7,c
 32750  0068F0  D009               	goto	l32665
 32751                           
 32752                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 32753                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 32754  0068F2  0EFC               	movlw	-4
 32755  0068F4  6CE3               	negf	plusw1,c
 32756  0068F6  0EFD               	movlw	-3
 32757  0068F8  1EE3               	comf	plusw1,f,c
 32758  0068FA  B0D8               	btfsc	status,0,c
 32759  0068FC  2AE3               	incf	plusw1,f,c
 32760                           
 32761                           ;stkvar	___awmod@sign @ sp[(-2)+0]
 32762  0068FE  0EFE               	movlw	-2
 32763  006900  6AE3               	clrf	plusw1,c
 32764  006902  2AE3               	incf	plusw1,f,c
 32765  006904                     l32665:
 32766                           
 32767                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32768  006904  0EFB               	movlw	-5
 32769  006906  AEE3               	btfss	plusw1,7,c
 32770  006908  D006               	goto	l32669
 32771                           
 32772                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32773                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32774  00690A  0EFA               	movlw	-6
 32775  00690C  6CE3               	negf	plusw1,c
 32776  00690E  0EFB               	movlw	-5
 32777  006910  1EE3               	comf	plusw1,f,c
 32778  006912  B0D8               	btfsc	status,0,c
 32779  006914  2AE3               	incf	plusw1,f,c
 32780  006916                     l32669:
 32781                           
 32782                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32783  006916  0EFA               	movlw	-6
 32784  006918  CFE3 F03F          	movff	plusw1,btemp
 32785  00691C  0EFB               	movlw	-5
 32786  00691E  50E3               	movf	plusw1,w,c
 32787  006920  103F               	iorwf	btemp,w,c
 32788  006922  B4D8               	btfsc	status,2,c
 32789  006924  D04A               	goto	u59260
 32790                           
 32791                           ;stkvar	___awmod@counter @ sp[(-2)+1]
 32792  006926  0EFF               	movlw	-1
 32793  006928  6AE3               	clrf	plusw1,c
 32794  00692A  D010               	goto	L19
 32795  00692C                     l32673:
 32796                           
 32797                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32798  00692C  0EFA               	movlw	-6
 32799  00692E  50E3               	movf	plusw1,w,c
 32800  006930  90D8               	bcf	status,0,c
 32801  006932  34E8               	rlcf	wreg,w,c
 32802  006934  6E3F               	movwf	btemp,c
 32803  006936  0EFA               	movlw	-6
 32804  006938  C03F  FFE3         	movff	btemp,plusw1
 32805  00693C  0EFB               	movlw	-5
 32806  00693E  50E3               	movf	plusw1,w,c
 32807  006940  34E8               	rlcf	wreg,w,c
 32808  006942  6E3F               	movwf	btemp,c
 32809  006944  0EFB               	movlw	-5
 32810  006946  C03F  FFE3         	movff	btemp,plusw1
 32811                           
 32812                           ;stkvar	___awmod@counter @ sp[(-2)+1]
 32813  00694A  0EFF               	movlw	-1
 32814  00694C                     L19:
 32815  00694C  2AE3               	incf	plusw1,f,c
 32816                           
 32817                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32818  00694E  0EFB               	movlw	-5
 32819  006950  AEE3               	btfss	plusw1,7,c
 32820  006952  D7EC               	goto	l32673
 32821  006954                     u59240:
 32822                           
 32823                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32824  006954  0EFA               	movlw	-6
 32825  006956  CFE3 F040          	movff	plusw1,btemp+1
 32826  00695A  0EFB               	movlw	-5
 32827  00695C  CFE3 F041          	movff	plusw1,btemp+2
 32828                           
 32829                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 32830  006960  0EFC               	movlw	-4
 32831  006962  CFE3 F049          	movff	plusw1,btemp+10
 32832  006966  0EFD               	movlw	-3
 32833  006968  CFE3 F04A          	movff	plusw1,btemp+11
 32834  00696C  5040               	movf	btemp+1,w,c
 32835  00696E  5C49               	subwf	btemp+10,w,c
 32836  006970  5041               	movf	btemp+2,w,c
 32837  006972  584A               	subwfb	btemp+11,w,c
 32838  006974  A0D8               	btfss	status,0,c
 32839  006976  D012               	goto	l32683
 32840                           
 32841                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32842                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 32843  006978  0EFC               	movlw	-4
 32844  00697A  50E3               	movf	plusw1,w,c
 32845  00697C  6E3F               	movwf	btemp,c
 32846  00697E  0EFA               	movlw	-6
 32847  006980  50E3               	movf	plusw1,w,c
 32848  006982  5E3F               	subwf	btemp,f,c
 32849  006984  0EFC               	movlw	-4
 32850  006986  C03F  FFE3         	movff	btemp,plusw1
 32851  00698A  0EFD               	movlw	-3
 32852  00698C  50E3               	movf	plusw1,w,c
 32853  00698E  6E3F               	movwf	btemp,c
 32854  006990  0EFB               	movlw	-5
 32855  006992  50E3               	movf	plusw1,w,c
 32856  006994  5A3F               	subwfb	btemp,f,c
 32857  006996  0EFD               	movlw	-3
 32858  006998  C03F  FFE3         	movff	btemp,plusw1
 32859  00699C                     l32683:
 32860                           
 32861                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32862  00699C  90D8               	bcf	status,0,c
 32863  00699E  0EFB               	movlw	-5
 32864  0069A0  32E3               	rrcf	plusw1,f,c
 32865  0069A2  0EFA               	movlw	-6
 32866  0069A4  32E3               	rrcf	plusw1,f,c
 32867                           
 32868                           ;stkvar	___awmod@counter @ sp[(-2)+1]
 32869  0069A6  0EFF               	movlw	-1
 32870  0069A8  50E3               	movf	plusw1,w,c
 32871  0069AA  6E3F               	movwf	btemp,c
 32872  0069AC  0E01               	movlw	1
 32873  0069AE  5E3F               	subwf	btemp,f,c
 32874  0069B0  0EFF               	movlw	-1
 32875  0069B2  C03F  FFE3         	movff	btemp,plusw1
 32876  0069B6  A4D8               	btfss	status,2,c
 32877  0069B8  D7CD               	goto	u59240
 32878  0069BA                     u59260:
 32879                           
 32880                           ;stkvar	___awmod@sign @ sp[(-2)+0]
 32881  0069BA  0EFE               	movlw	-2
 32882  0069BC  50E3               	movf	plusw1,w,c
 32883  0069BE  B4D8               	btfsc	status,2,c
 32884  0069C0  D006               	goto	l32691
 32885                           
 32886                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 32887                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 32888  0069C2  0EFC               	movlw	-4
 32889  0069C4  6CE3               	negf	plusw1,c
 32890  0069C6  0EFD               	movlw	-3
 32891  0069C8  1EE3               	comf	plusw1,f,c
 32892  0069CA  B0D8               	btfsc	status,0,c
 32893  0069CC  2AE3               	incf	plusw1,f,c
 32894  0069CE                     l32691:
 32895                           
 32896                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 32897  0069CE  0EFC               	movlw	-4
 32898  0069D0  CFE3 F03F          	movff	plusw1,btemp
 32899  0069D4  0EFD               	movlw	-3
 32900  0069D6  CFE3 F040          	movff	plusw1,btemp+1
 32901                           
 32902                           ; ___awmod: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
 32903  0069DA  0EFA               	movlw	250
 32904  0069DC  26E1               	addwf	fsr1l,f,c
 32905  0069DE  0EFF               	movlw	255
 32906  0069E0  22E2               	addwfc	fsr1h,f,c
 32907  0069E2  0012               	return		;funcret
 32908  0069E4                     __end_of___awmod:
 32909                           	opt stack 0
 32910                           tblptru	equ	0xFF8
 32911                           tblptrh	equ	0xFF7
 32912                           tblptrl	equ	0xFF6
 32913                           tablat	equ	0xFF5
 32914                           prodh	equ	0xFF4
 32915                           prodl	equ	0xFF3
 32916                           intcon	equ	0xFF2
 32917                           intcon2	equ	0xFF1
 32918                           indf0	equ	0xFEF
 32919                           postinc0	equ	0xFEE
 32920                           fsr0h	equ	0xFEA
 32921                           fsr0l	equ	0xFE9
 32922                           wreg	equ	0xFE8
 32923                           postinc1	equ	0xFE6
 32924                           postdec1	equ	0xFE5
 32925                           plusw1	equ	0xFE3
 32926                           fsr1h	equ	0xFE2
 32927                           fsr1l	equ	0xFE1
 32928                           indf2	equ	0xFDF
 32929                           postinc2	equ	0xFDE
 32930                           postdec2	equ	0xFDD
 32931                           plusw2	equ	0xFDB
 32932                           fsr2h	equ	0xFDA
 32933                           fsr2l	equ	0xFD9
 32934                           status	equ	0xFD8
 32935                           
 32936 ;; *************** function _copy_array *****************
 32937 ;; Defined at:
 32938 ;;		line 210 in file "arpeggio.c"
 32939 ;; Parameters:    Size  Location     Type
 32940 ;;		None
 32941 ;; Auto vars:     Size  Location     Type
 32942 ;;  i               1    0[BANK0 ] unsigned char 
 32943 ;; Return value:  Size  Location     Type
 32944 ;;                  1    wreg      void 
 32945 ;; Registers used:
 32946 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 32947 ;; Tracked objects:
 32948 ;;		On entry : 0/0
 32949 ;;		On exit  : 0/0
 32950 ;;		Unchanged: 0/0
 32951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32953 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32955 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32956 ;;Total ram usage:        1 bytes
 32957 ;; Hardware stack levels used:    1
 32958 ;; Hardware stack levels required when called:    5
 32959 ;; This function calls:
 32960 ;;		Nothing
 32961 ;; This function is called by:
 32962 ;;		_setupArpeggio
 32963 ;; This function uses a non-reentrant model
 32964 ;;
 32965                           
 32966                           	psect	text88
 32967  008F58                     __ptext88:
 32968                           	opt stack 0
 32969  008F58                     _copy_array:
 32970                           	opt stack 16
 32971                           
 32972                           ;arpeggio.c: 212: if(NUM_NOTES_PRESSED == 0){return;}
 32973                           
 32974                           ;incstack = 0
 32975  008F58  502F               	movf	_NUM_NOTES_PRESSED,w,c
 32976  008F5A  B4D8               	btfsc	status,2,c
 32977  008F5C  0012               	return	
 32978                           
 32979                           ;arpeggio.c: 215: for(unsigned char i = 0; i < NUM_NOTES_PRESSED; i++){
 32980  008F5E  0E00               	movlw	0
 32981  008F60  0100               	movlb	0	; () banked
 32982  008F62  6F60               	movwf	copy_array@i& (0+255),b
 32983  008F64  D025               	goto	l5471
 32984  008F66                     
 32985                           ; BSR set to: 0
 32986                           ;arpeggio.c: 216: ARPEGGIO_SORTED[i] = ARPEGGIO[i];
 32987                           
 32988                           ; BSR set to: 0
 32989  008F66  5160               	movf	copy_array@i& (0+255),w,b
 32990  008F68  0D01               	mullw	1
 32991  008F6A  0E82               	movlw	low _ARPEGGIO
 32992  008F6C  24F3               	addwf	prodl,w,c
 32993  008F6E  6ED9               	movwf	fsr2l,c
 32994  008F70  0E01               	movlw	high _ARPEGGIO
 32995  008F72  20F4               	addwfc	prodh,w,c
 32996  008F74  6EDA               	movwf	fsr2h,c
 32997  008F76  5160               	movf	copy_array@i& (0+255),w,b
 32998  008F78  0D01               	mullw	1
 32999  008F7A  0E78               	movlw	low _ARPEGGIO_SORTED
 33000  008F7C  24F3               	addwf	prodl,w,c
 33001  008F7E  6EE9               	movwf	fsr0l,c
 33002  008F80  0E02               	movlw	high _ARPEGGIO_SORTED
 33003  008F82  20F4               	addwfc	prodh,w,c
 33004  008F84  6EEA               	movwf	fsr0h,c
 33005  008F86  CFDF FFEF          	movff	indf2,indf0
 33006                           
 33007                           ;arpeggio.c: 217: ARPEGGIO_RANDOM[i] = ARPEGGIO[i];
 33008  008F8A  5160               	movf	copy_array@i& (0+255),w,b
 33009  008F8C  0D01               	mullw	1
 33010  008F8E  0E82               	movlw	low _ARPEGGIO
 33011  008F90  24F3               	addwf	prodl,w,c
 33012  008F92  6ED9               	movwf	fsr2l,c
 33013  008F94  0E01               	movlw	high _ARPEGGIO
 33014  008F96  20F4               	addwfc	prodh,w,c
 33015  008F98  6EDA               	movwf	fsr2h,c
 33016  008F9A  5160               	movf	copy_array@i& (0+255),w,b
 33017  008F9C  0D01               	mullw	1
 33018  008F9E  0E68               	movlw	low _ARPEGGIO_RANDOM
 33019  008FA0  24F3               	addwf	prodl,w,c
 33020  008FA2  6EE9               	movwf	fsr0l,c
 33021  008FA4  0E02               	movlw	high _ARPEGGIO_RANDOM
 33022  008FA6  20F4               	addwfc	prodh,w,c
 33023  008FA8  6EEA               	movwf	fsr0h,c
 33024  008FAA  CFDF FFEF          	movff	indf2,indf0
 33025                           
 33026                           ; BSR set to: 0
 33027  008FAE  2B60               	incf	copy_array@i& (0+255),f,b
 33028  008FB0                     l5471:
 33029                           
 33030                           ; BSR set to: 0
 33031                           
 33032                           ; BSR set to: 0
 33033  008FB0  502F               	movf	_NUM_NOTES_PRESSED,w,c
 33034  008FB2  5D60               	subwf	copy_array@i& (0+255),w,b
 33035  008FB4  B0D8               	btfsc	status,0,c
 33036  008FB6  0012               	return	
 33037  008FB8  D7D6               	goto	l5472
 33038  008FBA                     __end_of_copy_array:
 33039                           	opt stack 0
 33040                           tblptru	equ	0xFF8
 33041                           tblptrh	equ	0xFF7
 33042                           tblptrl	equ	0xFF6
 33043                           tablat	equ	0xFF5
 33044                           prodh	equ	0xFF4
 33045                           prodl	equ	0xFF3
 33046                           intcon	equ	0xFF2
 33047                           intcon2	equ	0xFF1
 33048                           indf0	equ	0xFEF
 33049                           postinc0	equ	0xFEE
 33050                           fsr0h	equ	0xFEA
 33051                           fsr0l	equ	0xFE9
 33052                           wreg	equ	0xFE8
 33053                           postinc1	equ	0xFE6
 33054                           postdec1	equ	0xFE5
 33055                           plusw1	equ	0xFE3
 33056                           fsr1h	equ	0xFE2
 33057                           fsr1l	equ	0xFE1
 33058                           indf2	equ	0xFDF
 33059                           postinc2	equ	0xFDE
 33060                           postdec2	equ	0xFDD
 33061                           plusw2	equ	0xFDB
 33062                           fsr2h	equ	0xFDA
 33063                           fsr2l	equ	0xFD9
 33064                           status	equ	0xFD8
 33065                           
 33066 ;; *************** function _resetArpeggio *****************
 33067 ;; Defined at:
 33068 ;;		line 162 in file "arpeggio.c"
 33069 ;; Parameters:    Size  Location     Type
 33070 ;;		None
 33071 ;; Auto vars:     Size  Location     Type
 33072 ;;		None
 33073 ;; Return value:  Size  Location     Type
 33074 ;;                  1    wreg      void 
 33075 ;; Registers used:
 33076 ;;		wreg, status,2, status,0
 33077 ;; Tracked objects:
 33078 ;;		On entry : 0/0
 33079 ;;		On exit  : 0/0
 33080 ;;		Unchanged: 0/0
 33081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33086 ;;Total ram usage:        0 bytes
 33087 ;; Hardware stack levels used:    1
 33088 ;; Hardware stack levels required when called:    5
 33089 ;; This function calls:
 33090 ;;		Nothing
 33091 ;; This function is called by:
 33092 ;;		_processOctave
 33093 ;;		_finish_arpeggio_setup
 33094 ;; This function uses a non-reentrant model
 33095 ;;
 33096                           
 33097                           	psect	text89
 33098  00951A                     __ptext89:
 33099                           	opt stack 0
 33100  00951A                     _resetArpeggio:
 33101                           	opt stack 20
 33102                           
 33103                           ;arpeggio.c: 164: which_note = 0;
 33104                           
 33105                           ;incstack = 0
 33106  00951A  0E00               	movlw	0
 33107  00951C  6E33               	movwf	_which_note,c
 33108                           
 33109                           ;arpeggio.c: 165: which_octave = 0;
 33110  00951E  0E00               	movlw	0
 33111  009520  6E32               	movwf	_which_octave,c
 33112                           
 33113                           ;arpeggio.c: 166: last_note = 0;
 33114  009522  0E00               	movlw	0
 33115  009524  0100               	movlb	0	; () banked
 33116  009526  6FEC               	movwf	_last_note& (0+255),b
 33117                           
 33118                           ;arpeggio.c: 167: last_octave = 0;
 33119  009528  0E00               	movlw	0
 33120  00952A  0101               	movlb	1	; () banked
 33121  00952C  6F7D               	movwf	_last_octave& (0+255),b
 33122                           
 33123                           ; BSR set to: 1
 33124                           ;arpeggio.c: 168: overflow = 0;
 33125  00952E  9402               	bcf	_overflow/(0+8),_overflow& (0+7),c
 33126                           
 33127                           ; BSR set to: 1
 33128                           ;arpeggio.c: 169: octave_overflow = 0;
 33129  009530  9202               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 33130                           
 33131                           ; BSR set to: 1
 33132                           ;arpeggio.c: 172: if(ARPEGGIO_TYPE == UP_DOWN && startingDirection == DOWN){
 33133  009532  0E02               	movlw	2
 33134  009534  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 33135  009536  A4D8               	btfss	status,2,c
 33136  009538  D005               	goto	l5448
 33137                           
 33138                           ; BSR set to: 1
 33139  00953A  0434               	decf	_startingDirection,w,c
 33140  00953C  A4D8               	btfss	status,2,c
 33141  00953E  D002               	goto	l5448
 33142                           
 33143                           ; BSR set to: 1
 33144                           ;arpeggio.c: 173: ARPEGGIO_TYPE = DOWN_UP;
 33145  009540  0E03               	movlw	3
 33146  009542  6E35               	movwf	_ARPEGGIO_TYPE,c
 33147  009544                     l5448:
 33148                           
 33149                           ; BSR set to: 1
 33150                           ;arpeggio.c: 174: }
 33151                           ;arpeggio.c: 176: if(ARPEGGIO_TYPE == DOWN_UP && startingDirection == UP){
 33152                           
 33153                           ; BSR set to: 1
 33154  009544  0E03               	movlw	3
 33155  009546  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 33156  009548  A4D8               	btfss	status,2,c
 33157  00954A  0012               	return	
 33158                           
 33159                           ; BSR set to: 1
 33160  00954C  5034               	movf	_startingDirection,w,c
 33161  00954E  A4D8               	btfss	status,2,c
 33162  009550  0012               	return	
 33163                           
 33164                           ; BSR set to: 1
 33165                           ;arpeggio.c: 177: ARPEGGIO_TYPE = UP_DOWN;
 33166  009552  0E02               	movlw	2
 33167  009554  6E35               	movwf	_ARPEGGIO_TYPE,c
 33168  009556  0012               	return	
 33169  009558                     __end_of_resetArpeggio:
 33170                           	opt stack 0
 33171                           tblptru	equ	0xFF8
 33172                           tblptrh	equ	0xFF7
 33173                           tblptrl	equ	0xFF6
 33174                           tablat	equ	0xFF5
 33175                           prodh	equ	0xFF4
 33176                           prodl	equ	0xFF3
 33177                           intcon	equ	0xFF2
 33178                           intcon2	equ	0xFF1
 33179                           indf0	equ	0xFEF
 33180                           postinc0	equ	0xFEE
 33181                           fsr0h	equ	0xFEA
 33182                           fsr0l	equ	0xFE9
 33183                           wreg	equ	0xFE8
 33184                           postinc1	equ	0xFE6
 33185                           postdec1	equ	0xFE5
 33186                           plusw1	equ	0xFE3
 33187                           fsr1h	equ	0xFE2
 33188                           fsr1l	equ	0xFE1
 33189                           indf2	equ	0xFDF
 33190                           postinc2	equ	0xFDE
 33191                           postdec2	equ	0xFDD
 33192                           plusw2	equ	0xFDB
 33193                           fsr2h	equ	0xFDA
 33194                           fsr2l	equ	0xFD9
 33195                           status	equ	0xFD8
 33196                           
 33197 ;; *************** function _delete_notes_from_arpeggio *****************
 33198 ;; Defined at:
 33199 ;;		line 63 in file "arpeggio.c"
 33200 ;; Parameters:    Size  Location     Type
 33201 ;;  pitch           1    wreg     unsigned char 
 33202 ;; Auto vars:     Size  Location     Type
 33203 ;;  pitch           1    9[BANK0 ] unsigned char 
 33204 ;;  INDEX_TO_SHI    1   10[BANK0 ] char 
 33205 ;; Return value:  Size  Location     Type
 33206 ;;                  1    wreg      void 
 33207 ;; Registers used:
 33208 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33209 ;; Tracked objects:
 33210 ;;		On entry : 0/0
 33211 ;;		On exit  : 0/0
 33212 ;;		Unchanged: 0/0
 33213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33215 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33217 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33218 ;;Total ram usage:        2 bytes
 33219 ;; Hardware stack levels used:    1
 33220 ;; Hardware stack levels required when called:    6
 33221 ;; This function calls:
 33222 ;;		_findArrayIndex
 33223 ;;		_rotateArrayLeft
 33224 ;; This function is called by:
 33225 ;;		_playThisNotePentatonic
 33226 ;;		_playThisNote
 33227 ;;		_playThisNote8
 33228 ;; This function uses a non-reentrant model
 33229 ;;
 33230                           
 33231                           	psect	text90
 33232  0096B4                     __ptext90:
 33233                           	opt stack 0
 33234  0096B4                     _delete_notes_from_arpeggio:
 33235                           	opt stack 17
 33236                           
 33237                           ; BSR set to: 1
 33238                           ;incstack = 0
 33239                           ;delete_notes_from_arpeggio@pitch stored from wreg
 33240  0096B4  0100               	movlb	0	; () banked
 33241  0096B6  6F69               	movwf	delete_notes_from_arpeggio@pitch& (0+255),b
 33242                           
 33243                           ;arpeggio.c: 66: signed char INDEX_TO_SHIFT_LEFT_AT = findArrayIndex(pitch);
 33244  0096B8  0100               	movlb	0	; () banked
 33245  0096BA  5169               	movf	delete_notes_from_arpeggio@pitch& (0+255),w,b
 33246  0096BC  ECAC  F04A         	call	_findArrayIndex
 33247  0096C0  0100               	movlb	0	; () banked
 33248  0096C2  6F6A               	movwf	delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT& (0+255),b
 33249                           
 33250                           ; BSR set to: 0
 33251                           ;arpeggio.c: 77: rotateArrayLeft(INDEX_TO_SHIFT_LEFT_AT);
 33252  0096C4  516A               	movf	delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT& (0+255),w,b
 33253  0096C6  EC6D  F044         	call	_rotateArrayLeft
 33254                           
 33255                           ;arpeggio.c: 80: if(NUM_NOTES_PRESSED > 0) {NUM_NOTES_PRESSED--;}
 33256  0096CA  502F               	movf	_NUM_NOTES_PRESSED,w,c
 33257  0096CC  A4D8               	btfss	status,2,c
 33258  0096CE  062F               	decf	_NUM_NOTES_PRESSED,f,c
 33259                           
 33260                           ;arpeggio.c: 85: if(NUM_NOTES_PRESSED == 0) {ARRAY_INDEX = 0;}
 33261  0096D0  502F               	movf	_NUM_NOTES_PRESSED,w,c
 33262  0096D2  A4D8               	btfss	status,2,c
 33263  0096D4  D003               	goto	l5418
 33264  0096D6  0E00               	movlw	0
 33265  0096D8  0100               	movlb	0	; () banked
 33266  0096DA  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 33267  0096DC                     l5418:
 33268                           
 33269                           ;arpeggio.c: 88: if(ARRAY_INDEX > 0){ARRAY_INDEX--;}
 33270  0096DC  0100               	movlb	0	; () banked
 33271  0096DE  51EB               	movf	_ARRAY_INDEX& (0+255),w,b
 33272  0096E0  B4D8               	btfsc	status,2,c
 33273  0096E2  0012               	return	
 33274                           
 33275                           ; BSR set to: 0
 33276  0096E4  07EB               	decf	_ARRAY_INDEX& (0+255),f,b
 33277  0096E6  0012               	return	
 33278  0096E8                     __end_of_delete_notes_from_arpeggio:
 33279                           	opt stack 0
 33280                           tblptru	equ	0xFF8
 33281                           tblptrh	equ	0xFF7
 33282                           tblptrl	equ	0xFF6
 33283                           tablat	equ	0xFF5
 33284                           prodh	equ	0xFF4
 33285                           prodl	equ	0xFF3
 33286                           intcon	equ	0xFF2
 33287                           intcon2	equ	0xFF1
 33288                           indf0	equ	0xFEF
 33289                           postinc0	equ	0xFEE
 33290                           fsr0h	equ	0xFEA
 33291                           fsr0l	equ	0xFE9
 33292                           wreg	equ	0xFE8
 33293                           postinc1	equ	0xFE6
 33294                           postdec1	equ	0xFE5
 33295                           plusw1	equ	0xFE3
 33296                           fsr1h	equ	0xFE2
 33297                           fsr1l	equ	0xFE1
 33298                           indf2	equ	0xFDF
 33299                           postinc2	equ	0xFDE
 33300                           postdec2	equ	0xFDD
 33301                           plusw2	equ	0xFDB
 33302                           fsr2h	equ	0xFDA
 33303                           fsr2l	equ	0xFD9
 33304                           status	equ	0xFD8
 33305                           
 33306 ;; *************** function _findArrayIndex *****************
 33307 ;; Defined at:
 33308 ;;		line 516 in file "arpeggio.c"
 33309 ;; Parameters:    Size  Location     Type
 33310 ;;  pitch_of_key    1    wreg     unsigned char 
 33311 ;; Auto vars:     Size  Location     Type
 33312 ;;  pitch_of_key    1    1[BANK0 ] unsigned char 
 33313 ;;  i               1    2[BANK0 ] unsigned char 
 33314 ;; Return value:  Size  Location     Type
 33315 ;;                  1    wreg      char 
 33316 ;; Registers used:
 33317 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 33318 ;; Tracked objects:
 33319 ;;		On entry : 0/0
 33320 ;;		On exit  : 0/0
 33321 ;;		Unchanged: 0/0
 33322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33324 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33325 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33326 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33327 ;;Total ram usage:        3 bytes
 33328 ;; Hardware stack levels used:    1
 33329 ;; Hardware stack levels required when called:    5
 33330 ;; This function calls:
 33331 ;;		Nothing
 33332 ;; This function is called by:
 33333 ;;		_delete_notes_from_arpeggio
 33334 ;; This function uses a non-reentrant model
 33335 ;;
 33336                           
 33337                           	psect	text91
 33338  009558                     __ptext91:
 33339                           	opt stack 0
 33340  009558                     _findArrayIndex:
 33341                           	opt stack 17
 33342                           
 33343                           ; BSR set to: 0
 33344                           ;incstack = 0
 33345                           ;findArrayIndex@pitch_of_key_release stored from wreg
 33346  009558  0100               	movlb	0	; () banked
 33347  00955A  6F61               	movwf	findArrayIndex@pitch_of_key_release& (0+255),b
 33348                           
 33349                           ;arpeggio.c: 518: for (unsigned char i=0;i<MAX_NUM_NOTES;i++){
 33350  00955C  0E00               	movlw	0
 33351  00955E  0100               	movlb	0	; () banked
 33352  009560  6F62               	movwf	findArrayIndex@i& (0+255),b
 33353  009562                     l26313:
 33354                           
 33355                           ; BSR set to: 0
 33356  009562  0E9D               	movlw	low _MAX_NUM_NOTES
 33357  009564  6EF6               	movwf	tblptrl,c
 33358  009566                     	if	1	;There is more than 1 active tblptr byte
 33359  009566  0EF3               	movlw	high _MAX_NUM_NOTES
 33360  009568  6EF7               	movwf	tblptrh,c
 33361  00956A                     	endif
 33362  00956A                     	if	0	;There are less than 3 active tblptr bytes
 33363  00956A                     	endif
 33364  00956A  0009               	tblrd		*+
 33365  00956C  50F5               	movf	tablat,w,c
 33366  00956E  5D62               	subwf	findArrayIndex@i& (0+255),w,b
 33367  009570  B0D8               	btfsc	status,0,c
 33368  009572  0012               	return	
 33369                           
 33370                           ; BSR set to: 0
 33371                           ;arpeggio.c: 519: if(ARPEGGIO[i] == pitch_of_key_release){return i;}
 33372                           
 33373                           ; BSR set to: 0
 33374                           
 33375                           ; BSR set to: 0
 33376  009574  5162               	movf	findArrayIndex@i& (0+255),w,b
 33377  009576  0D01               	mullw	1
 33378  009578  0E82               	movlw	low _ARPEGGIO
 33379  00957A  24F3               	addwf	prodl,w,c
 33380  00957C  6ED9               	movwf	fsr2l,c
 33381  00957E  0E01               	movlw	high _ARPEGGIO
 33382  009580  20F4               	addwfc	prodh,w,c
 33383  009582  6EDA               	movwf	fsr2h,c
 33384  009584  5161               	movf	findArrayIndex@pitch_of_key_release& (0+255),w,b
 33385  009586  18DE               	xorwf	postinc2,w,c
 33386  009588  A4D8               	btfss	status,2,c
 33387  00958A  D002               	goto	l26323
 33388                           
 33389                           ; BSR set to: 0
 33390  00958C  5162               	movf	findArrayIndex@i& (0+255),w,b
 33391                           
 33392                           ; BSR set to: 0
 33393  00958E  0012               	return	
 33394  009590                     l26323:
 33395                           
 33396                           ; BSR set to: 0
 33397                           
 33398                           ; BSR set to: 0
 33399                           
 33400                           ;arpeggio.c: 520: else{;}
 33401                           
 33402                           ; BSR set to: 0
 33403                           
 33404                           ; BSR set to: 0
 33405  009590  2B62               	incf	findArrayIndex@i& (0+255),f,b
 33406  009592  D7E7               	goto	l26313
 33407  009594                     __end_of_findArrayIndex:
 33408                           	opt stack 0
 33409                           tblptru	equ	0xFF8
 33410                           tblptrh	equ	0xFF7
 33411                           tblptrl	equ	0xFF6
 33412                           tablat	equ	0xFF5
 33413                           prodh	equ	0xFF4
 33414                           prodl	equ	0xFF3
 33415                           intcon	equ	0xFF2
 33416                           intcon2	equ	0xFF1
 33417                           indf0	equ	0xFEF
 33418                           postinc0	equ	0xFEE
 33419                           fsr0h	equ	0xFEA
 33420                           fsr0l	equ	0xFE9
 33421                           wreg	equ	0xFE8
 33422                           postinc1	equ	0xFE6
 33423                           postdec1	equ	0xFE5
 33424                           plusw1	equ	0xFE3
 33425                           fsr1h	equ	0xFE2
 33426                           fsr1l	equ	0xFE1
 33427                           indf2	equ	0xFDF
 33428                           postinc2	equ	0xFDE
 33429                           postdec2	equ	0xFDD
 33430                           plusw2	equ	0xFDB
 33431                           fsr2h	equ	0xFDA
 33432                           fsr2l	equ	0xFD9
 33433                           status	equ	0xFD8
 33434                           
 33435 ;; *************** function _add_notes_to_arpeggio *****************
 33436 ;; Defined at:
 33437 ;;		line 39 in file "arpeggio.c"
 33438 ;; Parameters:    Size  Location     Type
 33439 ;;  pitch           1    wreg     unsigned char 
 33440 ;; Auto vars:     Size  Location     Type
 33441 ;;  pitch           1   16[BANK0 ] unsigned char 
 33442 ;; Return value:  Size  Location     Type
 33443 ;;                  1    wreg      void 
 33444 ;; Registers used:
 33445 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33446 ;; Tracked objects:
 33447 ;;		On entry : 0/0
 33448 ;;		On exit  : 0/0
 33449 ;;		Unchanged: 0/0
 33450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33452 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33453 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33454 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33455 ;;Total ram usage:        8 bytes
 33456 ;; Hardware stack levels used:    1
 33457 ;; Hardware stack levels required when called:    6
 33458 ;; This function calls:
 33459 ;;		_rotateArrayLeft
 33460 ;; This function is called by:
 33461 ;;		_playThisNotePentatonic
 33462 ;;		_playThisNote
 33463 ;;		_playThisNote8
 33464 ;; This function uses a non-reentrant model
 33465 ;;
 33466                           
 33467                           	psect	text92
 33468  0069E4                     __ptext92:
 33469                           	opt stack 0
 33470  0069E4                     _add_notes_to_arpeggio:
 33471                           	opt stack 17
 33472                           
 33473                           ; BSR set to: 0
 33474                           ;incstack = 0
 33475                           ;add_notes_to_arpeggio@pitch stored from wreg
 33476  0069E4  0100               	movlb	0	; () banked
 33477  0069E6  6F70               	movwf	add_notes_to_arpeggio@pitch& (0+255),b
 33478                           
 33479                           ;arpeggio.c: 43: if(ARRAY_INDEX > (MAX_NUM_NOTES - 1)){
 33480  0069E8  0100               	movlb	0	; () banked
 33481  0069EA  51EB               	movf	_ARRAY_INDEX& (0+255),w,b
 33482  0069EC  6F69               	movwf	??_add_notes_to_arpeggio& (0+255),b
 33483  0069EE  6B6A               	clrf	(??_add_notes_to_arpeggio+1)& (0+255),b
 33484  0069F0  0EFF               	movlw	255
 33485  0069F2  6F6B               	movwf	(??_add_notes_to_arpeggio+2)& (0+255),b
 33486  0069F4  0EFF               	movlw	255
 33487  0069F6  6F6C               	movwf	(??_add_notes_to_arpeggio+3)& (0+255),b
 33488  0069F8  0E9D               	movlw	low _MAX_NUM_NOTES
 33489  0069FA  6EF6               	movwf	tblptrl,c
 33490  0069FC                     	if	1	;There is more than 1 active tblptr byte
 33491  0069FC  0EF3               	movlw	high _MAX_NUM_NOTES
 33492  0069FE  6EF7               	movwf	tblptrh,c
 33493  006A00                     	endif
 33494  006A00                     	if	0	;There are less than 3 active tblptr bytes
 33495  006A00                     	endif
 33496  006A00  0008               	tblrd		*
 33497  006A02  50F5               	movf	tablat,w,c
 33498  006A04  6F6D               	movwf	(??_add_notes_to_arpeggio+4)& (0+255),b
 33499  006A06  6B6E               	clrf	(??_add_notes_to_arpeggio+5)& (0+255),b
 33500  006A08  516B               	movf	(??_add_notes_to_arpeggio+2)& (0+255),w,b
 33501  006A0A  276D               	addwf	(??_add_notes_to_arpeggio+4)& (0+255),f,b
 33502  006A0C  516C               	movf	(??_add_notes_to_arpeggio+3)& (0+255),w,b
 33503  006A0E  236E               	addwfc	(??_add_notes_to_arpeggio+5)& (0+255),f,b
 33504  006A10  5169               	movf	??_add_notes_to_arpeggio& (0+255),w,b
 33505  006A12  5D6D               	subwf	(??_add_notes_to_arpeggio+4)& (0+255),w,b
 33506  006A14  516E               	movf	(??_add_notes_to_arpeggio+5)& (0+255),w,b
 33507  006A16  0A80               	xorlw	128
 33508  006A18  6F6F               	movwf	(??_add_notes_to_arpeggio+6)& (0+255),b
 33509  006A1A  516A               	movf	(??_add_notes_to_arpeggio+1)& (0+255),w,b
 33510  006A1C  0A80               	xorlw	128
 33511  006A1E  596F               	subwfb	(??_add_notes_to_arpeggio+6)& (0+255),w,b
 33512  006A20  B0D8               	btfsc	status,0,c
 33513  006A22  D025               	goto	l5411
 33514                           
 33515                           ; BSR set to: 0
 33516                           ;arpeggio.c: 44: ARRAY_INDEX = MAX_NUM_NOTES - 1;
 33517  006A24  0E9D               	movlw	low _MAX_NUM_NOTES
 33518  006A26  6EF6               	movwf	tblptrl,c
 33519  006A28                     	if	1	;There is more than 1 active tblptr byte
 33520  006A28  0EF3               	movlw	high _MAX_NUM_NOTES
 33521  006A2A  6EF7               	movwf	tblptrh,c
 33522  006A2C                     	endif
 33523  006A2C                     	if	0	;There are less than 3 active tblptr bytes
 33524  006A2C                     	endif
 33525  006A2C  0008               	tblrd		*
 33526  006A2E  CFF5 F069          	movff	tablat,??_add_notes_to_arpeggio
 33527  006A32  0569               	decf	??_add_notes_to_arpeggio& (0+255),w,b
 33528  006A34  6FEB               	movwf	_ARRAY_INDEX& (0+255),b
 33529                           
 33530                           ; BSR set to: 0
 33531                           ;arpeggio.c: 45: rotateArrayLeft(0);
 33532  006A36  0E00               	movlw	0
 33533  006A38  EC6D  F044         	call	_rotateArrayLeft
 33534                           
 33535                           ;arpeggio.c: 46: ARPEGGIO[MAX_NUM_NOTES - 1] = pitch;
 33536  006A3C  0EFF               	movlw	255
 33537  006A3E  0100               	movlb	0	; () banked
 33538  006A40  6F69               	movwf	??_add_notes_to_arpeggio& (0+255),b
 33539  006A42  0EFF               	movlw	255
 33540  006A44  6F6A               	movwf	(??_add_notes_to_arpeggio+1)& (0+255),b
 33541  006A46  0E9D               	movlw	low _MAX_NUM_NOTES
 33542  006A48  6EF6               	movwf	tblptrl,c
 33543  006A4A                     	if	1	;There is more than 1 active tblptr byte
 33544  006A4A  0EF3               	movlw	high _MAX_NUM_NOTES
 33545  006A4C  6EF7               	movwf	tblptrh,c
 33546  006A4E                     	endif
 33547  006A4E                     	if	0	;There are less than 3 active tblptr bytes
 33548  006A4E                     	endif
 33549  006A4E  0008               	tblrd		*
 33550  006A50  50F5               	movf	tablat,w,c
 33551  006A52  6F6B               	movwf	(??_add_notes_to_arpeggio+2)& (0+255),b
 33552  006A54  6B6C               	clrf	(??_add_notes_to_arpeggio+3)& (0+255),b
 33553  006A56  5169               	movf	??_add_notes_to_arpeggio& (0+255),w,b
 33554  006A58  276B               	addwf	(??_add_notes_to_arpeggio+2)& (0+255),f,b
 33555  006A5A  516A               	movf	(??_add_notes_to_arpeggio+1)& (0+255),w,b
 33556  006A5C  236C               	addwfc	(??_add_notes_to_arpeggio+3)& (0+255),f,b
 33557  006A5E  0E82               	movlw	low _ARPEGGIO
 33558  006A60  256B               	addwf	(??_add_notes_to_arpeggio+2)& (0+255),w,b
 33559  006A62  6ED9               	movwf	fsr2l,c
 33560  006A64  0E01               	movlw	high _ARPEGGIO
 33561  006A66  216C               	addwfc	(??_add_notes_to_arpeggio+3)& (0+255),w,b
 33562  006A68  6EDA               	movwf	fsr2h,c
 33563  006A6A  C070  FFDF         	movff	add_notes_to_arpeggio@pitch,indf2
 33564  006A6E                     l5411:
 33565                           
 33566                           ; BSR set to: 0
 33567                           ;arpeggio.c: 47: }
 33568                           ;arpeggio.c: 49: if(ARRAY_INDEX <= (MAX_NUM_NOTES - 1)){
 33569                           
 33570                           ; BSR set to: 0
 33571  006A6E  51EB               	movf	_ARRAY_INDEX& (0+255),w,b
 33572  006A70  6F69               	movwf	??_add_notes_to_arpeggio& (0+255),b
 33573  006A72  6B6A               	clrf	(??_add_notes_to_arpeggio+1)& (0+255),b
 33574  006A74  0EFF               	movlw	255
 33575  006A76  6F6B               	movwf	(??_add_notes_to_arpeggio+2)& (0+255),b
 33576  006A78  0EFF               	movlw	255
 33577  006A7A  6F6C               	movwf	(??_add_notes_to_arpeggio+3)& (0+255),b
 33578  006A7C  0E9D               	movlw	low _MAX_NUM_NOTES
 33579  006A7E  6EF6               	movwf	tblptrl,c
 33580  006A80                     	if	1	;There is more than 1 active tblptr byte
 33581  006A80  0EF3               	movlw	high _MAX_NUM_NOTES
 33582  006A82  6EF7               	movwf	tblptrh,c
 33583  006A84                     	endif
 33584  006A84                     	if	0	;There are less than 3 active tblptr bytes
 33585  006A84                     	endif
 33586  006A84  0008               	tblrd		*
 33587  006A86  50F5               	movf	tablat,w,c
 33588  006A88  6F6D               	movwf	(??_add_notes_to_arpeggio+4)& (0+255),b
 33589  006A8A  6B6E               	clrf	(??_add_notes_to_arpeggio+5)& (0+255),b
 33590  006A8C  516B               	movf	(??_add_notes_to_arpeggio+2)& (0+255),w,b
 33591  006A8E  276D               	addwf	(??_add_notes_to_arpeggio+4)& (0+255),f,b
 33592  006A90  516C               	movf	(??_add_notes_to_arpeggio+3)& (0+255),w,b
 33593  006A92  236E               	addwfc	(??_add_notes_to_arpeggio+5)& (0+255),f,b
 33594  006A94  5169               	movf	??_add_notes_to_arpeggio& (0+255),w,b
 33595  006A96  5D6D               	subwf	(??_add_notes_to_arpeggio+4)& (0+255),w,b
 33596  006A98  516E               	movf	(??_add_notes_to_arpeggio+5)& (0+255),w,b
 33597  006A9A  0A80               	xorlw	128
 33598  006A9C  6F6F               	movwf	(??_add_notes_to_arpeggio+6)& (0+255),b
 33599  006A9E  516A               	movf	(??_add_notes_to_arpeggio+1)& (0+255),w,b
 33600  006AA0  0A80               	xorlw	128
 33601  006AA2  596F               	subwfb	(??_add_notes_to_arpeggio+6)& (0+255),w,b
 33602  006AA4  A0D8               	btfss	status,0,c
 33603  006AA6  D00B               	goto	l5412
 33604                           
 33605                           ; BSR set to: 0
 33606                           ;arpeggio.c: 51: ARPEGGIO[ARRAY_INDEX] = pitch;
 33607  006AA8  51EB               	movf	_ARRAY_INDEX& (0+255),w,b
 33608  006AAA  0D01               	mullw	1
 33609  006AAC  0E82               	movlw	low _ARPEGGIO
 33610  006AAE  24F3               	addwf	prodl,w,c
 33611  006AB0  6ED9               	movwf	fsr2l,c
 33612  006AB2  0E01               	movlw	high _ARPEGGIO
 33613  006AB4  20F4               	addwfc	prodh,w,c
 33614  006AB6  6EDA               	movwf	fsr2h,c
 33615  006AB8  C070  FFDF         	movff	add_notes_to_arpeggio@pitch,indf2
 33616                           
 33617                           ; BSR set to: 0
 33618                           ;arpeggio.c: 53: ARRAY_INDEX++;
 33619  006ABC  2BEB               	incf	_ARRAY_INDEX& (0+255),f,b
 33620  006ABE                     l5412:
 33621                           
 33622                           ; BSR set to: 0
 33623                           ;arpeggio.c: 54: }
 33624                           ;arpeggio.c: 57: NUM_NOTES_PRESSED++;
 33625                           
 33626                           ; BSR set to: 0
 33627  006ABE  2A2F               	incf	_NUM_NOTES_PRESSED,f,c
 33628                           
 33629                           ; BSR set to: 0
 33630                           ;arpeggio.c: 59: if(NUM_NOTES_PRESSED > MAX_NUM_NOTES){NUM_NOTES_PRESSED = MAX_NUM_NOTES
      +                          ;}
 33631  006AC0  0E9D               	movlw	low _MAX_NUM_NOTES
 33632  006AC2  6EF6               	movwf	tblptrl,c
 33633  006AC4                     	if	1	;There is more than 1 active tblptr byte
 33634  006AC4  0EF3               	movlw	high _MAX_NUM_NOTES
 33635  006AC6  6EF7               	movwf	tblptrh,c
 33636  006AC8                     	endif
 33637  006AC8                     	if	0	;There are less than 3 active tblptr bytes
 33638  006AC8                     	endif
 33639  006AC8  502F               	movf	_NUM_NOTES_PRESSED,w,c
 33640  006ACA  0009               	tblrd		*+
 33641  006ACC  5CF5               	subwf	tablat,w,c
 33642  006ACE  B0D8               	btfsc	status,0,c
 33643  006AD0  0012               	return	
 33644                           
 33645                           ; BSR set to: 0
 33646  006AD2  0E9D               	movlw	low _MAX_NUM_NOTES
 33647  006AD4  6EF6               	movwf	tblptrl,c
 33648  006AD6                     	if	1	;There is more than 1 active tblptr byte
 33649  006AD6  0EF3               	movlw	high _MAX_NUM_NOTES
 33650  006AD8  6EF7               	movwf	tblptrh,c
 33651  006ADA                     	endif
 33652  006ADA                     	if	0	;There are less than 3 active tblptr bytes
 33653  006ADA                     	endif
 33654  006ADA  0008               	tblrd		*
 33655  006ADC  CFF5 F02F          	movff	tablat,_NUM_NOTES_PRESSED
 33656  006AE0  0012               	return	
 33657  006AE2                     __end_of_add_notes_to_arpeggio:
 33658                           	opt stack 0
 33659                           tblptru	equ	0xFF8
 33660                           tblptrh	equ	0xFF7
 33661                           tblptrl	equ	0xFF6
 33662                           tablat	equ	0xFF5
 33663                           prodh	equ	0xFF4
 33664                           prodl	equ	0xFF3
 33665                           intcon	equ	0xFF2
 33666                           intcon2	equ	0xFF1
 33667                           indf0	equ	0xFEF
 33668                           postinc0	equ	0xFEE
 33669                           fsr0h	equ	0xFEA
 33670                           fsr0l	equ	0xFE9
 33671                           wreg	equ	0xFE8
 33672                           postinc1	equ	0xFE6
 33673                           postdec1	equ	0xFE5
 33674                           plusw1	equ	0xFE3
 33675                           fsr1h	equ	0xFE2
 33676                           fsr1l	equ	0xFE1
 33677                           indf2	equ	0xFDF
 33678                           postinc2	equ	0xFDE
 33679                           postdec2	equ	0xFDD
 33680                           plusw2	equ	0xFDB
 33681                           fsr2h	equ	0xFDA
 33682                           fsr2l	equ	0xFD9
 33683                           status	equ	0xFD8
 33684                           
 33685 ;; *************** function _rotateArrayLeft *****************
 33686 ;; Defined at:
 33687 ;;		line 584 in file "arpeggio.c"
 33688 ;; Parameters:    Size  Location     Type
 33689 ;;  array_index     1    wreg     unsigned char 
 33690 ;; Auto vars:     Size  Location     Type
 33691 ;;  array_index     1    7[BANK0 ] unsigned char 
 33692 ;;  i               1    8[BANK0 ] unsigned char 
 33693 ;; Return value:  Size  Location     Type
 33694 ;;                  1    wreg      void 
 33695 ;; Registers used:
 33696 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 33697 ;; Tracked objects:
 33698 ;;		On entry : 0/0
 33699 ;;		On exit  : 0/0
 33700 ;;		Unchanged: 0/0
 33701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33703 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33704 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33705 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33706 ;;Total ram usage:        9 bytes
 33707 ;; Hardware stack levels used:    1
 33708 ;; Hardware stack levels required when called:    5
 33709 ;; This function calls:
 33710 ;;		Nothing
 33711 ;; This function is called by:
 33712 ;;		_add_notes_to_arpeggio
 33713 ;;		_delete_notes_from_arpeggio
 33714 ;; This function uses a non-reentrant model
 33715 ;;
 33716                           
 33717                           	psect	text93
 33718  0088DA                     __ptext93:
 33719                           	opt stack 0
 33720  0088DA                     _rotateArrayLeft:
 33721                           	opt stack 17
 33722                           
 33723                           ; BSR set to: 0
 33724                           ;incstack = 0
 33725                           ;rotateArrayLeft@array_index stored from wreg
 33726  0088DA  0100               	movlb	0	; () banked
 33727  0088DC  6F67               	movwf	rotateArrayLeft@array_index& (0+255),b
 33728                           
 33729                           ;arpeggio.c: 607: for(unsigned char i=array_index; i < (MAX_NUM_NOTES - 1) ;i++)
 33730  0088DE  C067  F068         	movff	rotateArrayLeft@array_index,rotateArrayLeft@i
 33731  0088E2  0EFF               	movlw	255
 33732  0088E4  0100               	movlb	0	; () banked
 33733  0088E6  6F60               	movwf	??_rotateArrayLeft& (0+255),b
 33734  0088E8  0EFF               	movlw	255
 33735  0088EA  6F61               	movwf	(??_rotateArrayLeft+1)& (0+255),b
 33736  0088EC  0E9D               	movlw	low _MAX_NUM_NOTES
 33737  0088EE  6EF6               	movwf	tblptrl,c
 33738  0088F0                     	if	1	;There is more than 1 active tblptr byte
 33739  0088F0  0EF3               	movlw	high _MAX_NUM_NOTES
 33740  0088F2  6EF7               	movwf	tblptrh,c
 33741  0088F4                     	endif
 33742  0088F4                     	if	0	;There are less than 3 active tblptr bytes
 33743  0088F4                     	endif
 33744  0088F4  0008               	tblrd		*
 33745  0088F6  50F5               	movf	tablat,w,c
 33746  0088F8  6F62               	movwf	(??_rotateArrayLeft+2)& (0+255),b
 33747  0088FA  6B63               	clrf	(??_rotateArrayLeft+3)& (0+255),b
 33748  0088FC  5160               	movf	??_rotateArrayLeft& (0+255),w,b
 33749  0088FE  2762               	addwf	(??_rotateArrayLeft+2)& (0+255),f,b
 33750  008900  5161               	movf	(??_rotateArrayLeft+1)& (0+255),w,b
 33751  008902  2363               	addwfc	(??_rotateArrayLeft+3)& (0+255),f,b
 33752  008904  5168               	movf	rotateArrayLeft@i& (0+255),w,b
 33753  008906  6F64               	movwf	(??_rotateArrayLeft+4)& (0+255),b
 33754  008908  6B65               	clrf	(??_rotateArrayLeft+5)& (0+255),b
 33755  00890A  5162               	movf	(??_rotateArrayLeft+2)& (0+255),w,b
 33756  00890C  5D64               	subwf	(??_rotateArrayLeft+4)& (0+255),w,b
 33757  00890E  5165               	movf	(??_rotateArrayLeft+5)& (0+255),w,b
 33758  008910  0A80               	xorlw	128
 33759  008912  6F66               	movwf	(??_rotateArrayLeft+6)& (0+255),b
 33760  008914  5163               	movf	(??_rotateArrayLeft+3)& (0+255),w,b
 33761  008916  0A80               	xorlw	128
 33762  008918  5966               	subwfb	(??_rotateArrayLeft+6)& (0+255),w,b
 33763  00891A  B0D8               	btfsc	status,0,c
 33764  00891C  0012               	return	
 33765                           
 33766                           ; BSR set to: 0
 33767                           ;arpeggio.c: 608: {
 33768                           ;arpeggio.c: 609: ARPEGGIO[i]=ARPEGGIO[i+1];
 33769                           
 33770                           ; BSR set to: 0
 33771                           
 33772                           ; BSR set to: 0
 33773  00891E  5168               	movf	rotateArrayLeft@i& (0+255),w,b
 33774  008920  6F60               	movwf	??_rotateArrayLeft& (0+255),b
 33775  008922  6B61               	clrf	(??_rotateArrayLeft+1)& (0+255),b
 33776  008924  0E01               	movlw	1
 33777  008926  2760               	addwf	??_rotateArrayLeft& (0+255),f,b
 33778  008928  0E00               	movlw	0
 33779  00892A  2361               	addwfc	(??_rotateArrayLeft+1)& (0+255),f,b
 33780  00892C  0E82               	movlw	low _ARPEGGIO
 33781  00892E  2560               	addwf	??_rotateArrayLeft& (0+255),w,b
 33782  008930  6ED9               	movwf	fsr2l,c
 33783  008932  0E01               	movlw	high _ARPEGGIO
 33784  008934  2161               	addwfc	(??_rotateArrayLeft+1)& (0+255),w,b
 33785  008936  6EDA               	movwf	fsr2h,c
 33786  008938  5168               	movf	rotateArrayLeft@i& (0+255),w,b
 33787  00893A  0D01               	mullw	1
 33788  00893C  0E82               	movlw	low _ARPEGGIO
 33789  00893E  24F3               	addwf	prodl,w,c
 33790  008940  6EE9               	movwf	fsr0l,c
 33791  008942  0E01               	movlw	high _ARPEGGIO
 33792  008944  20F4               	addwfc	prodh,w,c
 33793  008946  6EEA               	movwf	fsr0h,c
 33794  008948  CFDF FFEF          	movff	indf2,indf0
 33795                           
 33796                           ; BSR set to: 0
 33797  00894C  2B68               	incf	rotateArrayLeft@i& (0+255),f,b
 33798                           
 33799                           ; BSR set to: 0
 33800  00894E  0EFF               	movlw	255
 33801  008950  D7CA               	goto	L20
 33802  008952                     __end_of_rotateArrayLeft:
 33803                           	opt stack 0
 33804                           tblptru	equ	0xFF8
 33805                           tblptrh	equ	0xFF7
 33806                           tblptrl	equ	0xFF6
 33807                           tablat	equ	0xFF5
 33808                           prodh	equ	0xFF4
 33809                           prodl	equ	0xFF3
 33810                           intcon	equ	0xFF2
 33811                           intcon2	equ	0xFF1
 33812                           indf0	equ	0xFEF
 33813                           postinc0	equ	0xFEE
 33814                           fsr0h	equ	0xFEA
 33815                           fsr0l	equ	0xFE9
 33816                           wreg	equ	0xFE8
 33817                           postinc1	equ	0xFE6
 33818                           postdec1	equ	0xFE5
 33819                           plusw1	equ	0xFE3
 33820                           fsr1h	equ	0xFE2
 33821                           fsr1l	equ	0xFE1
 33822                           indf2	equ	0xFDF
 33823                           postinc2	equ	0xFDE
 33824                           postdec2	equ	0xFDD
 33825                           plusw2	equ	0xFDB
 33826                           fsr2h	equ	0xFDA
 33827                           fsr2l	equ	0xFD9
 33828                           status	equ	0xFD8
 33829                           
 33830 ;; *************** function _processDrumpad *****************
 33831 ;; Defined at:
 33832 ;;		line 21 in file "drum.c"
 33833 ;; Parameters:    Size  Location     Type
 33834 ;;		None
 33835 ;; Auto vars:     Size  Location     Type
 33836 ;;		None
 33837 ;; Return value:  Size  Location     Type
 33838 ;;                  1    wreg      void 
 33839 ;; Registers used:
 33840 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
 33841 ;; Tracked objects:
 33842 ;;		On entry : 0/0
 33843 ;;		On exit  : 0/0
 33844 ;;		Unchanged: 0/0
 33845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33850 ;;Total ram usage:        0 bytes
 33851 ;; Hardware stack levels used:    1
 33852 ;; Hardware stack levels required when called:    9
 33853 ;; This function calls:
 33854 ;;		_controlChange
 33855 ;;		_noteOffDrum
 33856 ;;		_noteOnDrum
 33857 ;; This function is called by:
 33858 ;;		_digitalInputs
 33859 ;; This function uses a non-reentrant model
 33860 ;;
 33861                           
 33862                           	psect	text94
 33863  001DB2                     __ptext94:
 33864                           	opt stack 0
 33865  001DB2                     _processDrumpad:
 33866                           	opt stack 17
 33867                           
 33868                           ;drum.c: 25: if((drum_button_state_now & 0x01) && !(button_state_now & 0x08000000) && !d
      +                          rum.SW1){
 33869                           
 33870                           ; BSR set to: 0
 33871                           ;incstack = 0
 33872  001DB2  A039               	btfss	_drum_button_state_now,0,c
 33873  001DB4  D034               	goto	l2374
 33874  001DB6  0100               	movlb	0	; () banked
 33875  001DB8  A7DB               	btfss	(_button_state_now+3)& (0+255),3,b
 33876                           
 33877                           ; BSR set to: 0
 33878  001DBA  B037               	btfsc	_drum,0,c
 33879  001DBC  D030               	goto	l2374
 33880                           
 33881                           ; BSR set to: 0
 33882                           ;drum.c: 26: drum.SW1 = 1;
 33883  001DBE  8037               	bsf	_drum,0,c
 33884                           
 33885                           ;drum.c: 27: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[0],velocity);}
 33886  001DC0  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 33887  001DC2  D007               	goto	l2375
 33888                           
 33889                           ; BSR set to: 0
 33890  001DC4  C1E7  F060         	movff	_DRUM_NOTE,noteOnDrum@pitch
 33891  001DC8  C051  F061         	movff	_velocity,noteOnDrum@velocity
 33892  001DCC  5052               	movf	_drumchannel,w,c
 33893  001DCE  ECF3  F048         	call	_noteOnDrum
 33894  001DD2                     l2375:
 33895                           
 33896                           ;drum.c: 28: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[0], 
      +                          127);}
 33897  001DD2  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 33898  001DD4  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 33899  001DD6  D008               	goto	l2376
 33900  001DD8  C0F5  F060         	movff	_DRUM_CC,controlChange@controllerNumber
 33901  001DDC  0E7F               	movlw	127
 33902  001DDE  0100               	movlb	0	; () banked
 33903  001DE0  6F61               	movwf	controlChange@value& (0+255),b
 33904  001DE2  503E               	movf	_channel,w,c
 33905  001DE4  ECC7  F048         	call	_controlChange
 33906  001DE8                     l2376:
 33907                           
 33908                           ;drum.c: 29: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T1 == 0) {controlChan
      +                          ge(channel,DRUM_CC[0], 127);}
 33909  001DE8  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 33910  001DEA  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 33911  001DEC  D00A               	goto	l2377
 33912  001DEE  B02D               	btfsc	_toggle_state,0,c
 33913  001DF0  D008               	goto	l2377
 33914  001DF2  C0F5  F060         	movff	_DRUM_CC,controlChange@controllerNumber
 33915  001DF6  0E7F               	movlw	127
 33916  001DF8  0100               	movlb	0	; () banked
 33917  001DFA  6F61               	movwf	controlChange@value& (0+255),b
 33918  001DFC  503E               	movf	_channel,w,c
 33919  001DFE  ECC7  F048         	call	_controlChange
 33920  001E02                     l2377:
 33921                           
 33922                           ;drum.c: 30: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T1 == 1) {controlChan
      +                          ge(channel,DRUM_CC[0], 0);}
 33923  001E02  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 33924  001E04  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 33925  001E06  D00A               	goto	l2378
 33926  001E08  A02D               	btfss	_toggle_state,0,c
 33927  001E0A  D008               	goto	l2378
 33928  001E0C  C0F5  F060         	movff	_DRUM_CC,controlChange@controllerNumber
 33929  001E10  0E00               	movlw	0
 33930  001E12  0100               	movlb	0	; () banked
 33931  001E14  6F61               	movwf	controlChange@value& (0+255),b
 33932  001E16  503E               	movf	_channel,w,c
 33933  001E18  ECC7  F048         	call	_controlChange
 33934  001E1C                     l2378:
 33935                           
 33936                           ;drum.c: 31: toggle_state.T1 ^= 1;
 33937  001E1C  702D               	btg	_toggle_state,0,c
 33938  001E1E                     l2374:
 33939                           
 33940                           ;drum.c: 32: }
 33941                           ;drum.c: 33: if(((drum_button_state_now) & 0x02) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW2) {
 33942  001E1E  A239               	btfss	_drum_button_state_now,1,c
 33943  001E20  D034               	goto	l2379
 33944  001E22  0100               	movlb	0	; () banked
 33945  001E24  A7DB               	btfss	(_button_state_now+3)& (0+255),3,b
 33946                           
 33947                           ; BSR set to: 0
 33948  001E26  B237               	btfsc	_drum,1,c
 33949  001E28  D030               	goto	l2379
 33950                           
 33951                           ; BSR set to: 0
 33952                           ;drum.c: 34: drum.SW2 = 1;
 33953  001E2A  8237               	bsf	_drum,1,c
 33954                           
 33955                           ;drum.c: 35: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[1],velocity);}
 33956  001E2C  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 33957  001E2E  D007               	goto	l2380
 33958                           
 33959                           ; BSR set to: 0
 33960  001E30  C1E8  F060         	movff	_DRUM_NOTE+1,noteOnDrum@pitch
 33961  001E34  C051  F061         	movff	_velocity,noteOnDrum@velocity
 33962  001E38  5052               	movf	_drumchannel,w,c
 33963  001E3A  ECF3  F048         	call	_noteOnDrum
 33964  001E3E                     l2380:
 33965                           
 33966                           ;drum.c: 36: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[1], 
      +                          127);}
 33967  001E3E  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 33968  001E40  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 33969  001E42  D008               	goto	l2381
 33970  001E44  C0F6  F060         	movff	_DRUM_CC+1,controlChange@controllerNumber
 33971  001E48  0E7F               	movlw	127
 33972  001E4A  0100               	movlb	0	; () banked
 33973  001E4C  6F61               	movwf	controlChange@value& (0+255),b
 33974  001E4E  503E               	movf	_channel,w,c
 33975  001E50  ECC7  F048         	call	_controlChange
 33976  001E54                     l2381:
 33977                           
 33978                           ;drum.c: 37: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T2 == 0) {controlChan
      +                          ge(channel,DRUM_CC[1], 127);}
 33979  001E54  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 33980  001E56  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 33981  001E58  D00A               	goto	l2382
 33982  001E5A  B22D               	btfsc	_toggle_state,1,c
 33983  001E5C  D008               	goto	l2382
 33984  001E5E  C0F6  F060         	movff	_DRUM_CC+1,controlChange@controllerNumber
 33985  001E62  0E7F               	movlw	127
 33986  001E64  0100               	movlb	0	; () banked
 33987  001E66  6F61               	movwf	controlChange@value& (0+255),b
 33988  001E68  503E               	movf	_channel,w,c
 33989  001E6A  ECC7  F048         	call	_controlChange
 33990  001E6E                     l2382:
 33991                           
 33992                           ;drum.c: 38: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T2 == 1) {controlChan
      +                          ge(channel,DRUM_CC[1], 0);}
 33993  001E6E  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 33994  001E70  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 33995  001E72  D00A               	goto	l2383
 33996  001E74  A22D               	btfss	_toggle_state,1,c
 33997  001E76  D008               	goto	l2383
 33998  001E78  C0F6  F060         	movff	_DRUM_CC+1,controlChange@controllerNumber
 33999  001E7C  0E00               	movlw	0
 34000  001E7E  0100               	movlb	0	; () banked
 34001  001E80  6F61               	movwf	controlChange@value& (0+255),b
 34002  001E82  503E               	movf	_channel,w,c
 34003  001E84  ECC7  F048         	call	_controlChange
 34004  001E88                     l2383:
 34005                           
 34006                           ;drum.c: 39: toggle_state.T2 ^= 1;
 34007  001E88  722D               	btg	_toggle_state,1,c
 34008  001E8A                     l2379:
 34009                           
 34010                           ;drum.c: 40: }
 34011                           ;drum.c: 41: if(((drum_button_state_now) & 0x04) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW3) {
 34012  001E8A  A439               	btfss	_drum_button_state_now,2,c
 34013  001E8C  D034               	goto	l2384
 34014  001E8E  0100               	movlb	0	; () banked
 34015  001E90  A7DB               	btfss	(_button_state_now+3)& (0+255),3,b
 34016                           
 34017                           ; BSR set to: 0
 34018  001E92  B437               	btfsc	_drum,2,c
 34019  001E94  D030               	goto	l2384
 34020                           
 34021                           ; BSR set to: 0
 34022                           ;drum.c: 42: drum.SW3 = 1;
 34023  001E96  8437               	bsf	_drum,2,c
 34024                           
 34025                           ;drum.c: 43: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[2],velocity);}
 34026  001E98  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34027  001E9A  D007               	goto	l2385
 34028                           
 34029                           ; BSR set to: 0
 34030  001E9C  C1E9  F060         	movff	_DRUM_NOTE+2,noteOnDrum@pitch
 34031  001EA0  C051  F061         	movff	_velocity,noteOnDrum@velocity
 34032  001EA4  5052               	movf	_drumchannel,w,c
 34033  001EA6  ECF3  F048         	call	_noteOnDrum
 34034  001EAA                     l2385:
 34035                           
 34036                           ;drum.c: 44: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[2], 
      +                          127);}
 34037  001EAA  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34038  001EAC  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34039  001EAE  D008               	goto	l2386
 34040  001EB0  C0F7  F060         	movff	_DRUM_CC+2,controlChange@controllerNumber
 34041  001EB4  0E7F               	movlw	127
 34042  001EB6  0100               	movlb	0	; () banked
 34043  001EB8  6F61               	movwf	controlChange@value& (0+255),b
 34044  001EBA  503E               	movf	_channel,w,c
 34045  001EBC  ECC7  F048         	call	_controlChange
 34046  001EC0                     l2386:
 34047                           
 34048                           ;drum.c: 45: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T3 == 0) {controlChan
      +                          ge(channel,DRUM_CC[2], 127);}
 34049  001EC0  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34050  001EC2  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34051  001EC4  D00A               	goto	l2387
 34052  001EC6  B42D               	btfsc	_toggle_state,2,c
 34053  001EC8  D008               	goto	l2387
 34054  001ECA  C0F7  F060         	movff	_DRUM_CC+2,controlChange@controllerNumber
 34055  001ECE  0E7F               	movlw	127
 34056  001ED0  0100               	movlb	0	; () banked
 34057  001ED2  6F61               	movwf	controlChange@value& (0+255),b
 34058  001ED4  503E               	movf	_channel,w,c
 34059  001ED6  ECC7  F048         	call	_controlChange
 34060  001EDA                     l2387:
 34061                           
 34062                           ;drum.c: 46: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T3 == 1) {controlChan
      +                          ge(channel,DRUM_CC[2], 0);}
 34063  001EDA  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34064  001EDC  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34065  001EDE  D00A               	goto	l2388
 34066  001EE0  A42D               	btfss	_toggle_state,2,c
 34067  001EE2  D008               	goto	l2388
 34068  001EE4  C0F7  F060         	movff	_DRUM_CC+2,controlChange@controllerNumber
 34069  001EE8  0E00               	movlw	0
 34070  001EEA  0100               	movlb	0	; () banked
 34071  001EEC  6F61               	movwf	controlChange@value& (0+255),b
 34072  001EEE  503E               	movf	_channel,w,c
 34073  001EF0  ECC7  F048         	call	_controlChange
 34074  001EF4                     l2388:
 34075                           
 34076                           ;drum.c: 47: toggle_state.T3 ^= 1;
 34077  001EF4  742D               	btg	_toggle_state,2,c
 34078  001EF6                     l2384:
 34079                           
 34080                           ;drum.c: 48: }
 34081                           ;drum.c: 49: if(((drum_button_state_now) & 0x08) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW4) {
 34082  001EF6  A639               	btfss	_drum_button_state_now,3,c
 34083  001EF8  D034               	goto	l2389
 34084  001EFA  0100               	movlb	0	; () banked
 34085  001EFC  A7DB               	btfss	(_button_state_now+3)& (0+255),3,b
 34086                           
 34087                           ; BSR set to: 0
 34088  001EFE  B637               	btfsc	_drum,3,c
 34089  001F00  D030               	goto	l2389
 34090                           
 34091                           ; BSR set to: 0
 34092                           ;drum.c: 50: drum.SW4 = 1;
 34093  001F02  8637               	bsf	_drum,3,c
 34094                           
 34095                           ;drum.c: 51: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[3],velocity);}
 34096  001F04  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34097  001F06  D007               	goto	l2390
 34098                           
 34099                           ; BSR set to: 0
 34100  001F08  C1EA  F060         	movff	_DRUM_NOTE+3,noteOnDrum@pitch
 34101  001F0C  C051  F061         	movff	_velocity,noteOnDrum@velocity
 34102  001F10  5052               	movf	_drumchannel,w,c
 34103  001F12  ECF3  F048         	call	_noteOnDrum
 34104  001F16                     l2390:
 34105                           
 34106                           ;drum.c: 52: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[3], 
      +                          127);}
 34107  001F16  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34108  001F18  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34109  001F1A  D008               	goto	l2391
 34110  001F1C  C0F8  F060         	movff	_DRUM_CC+3,controlChange@controllerNumber
 34111  001F20  0E7F               	movlw	127
 34112  001F22  0100               	movlb	0	; () banked
 34113  001F24  6F61               	movwf	controlChange@value& (0+255),b
 34114  001F26  503E               	movf	_channel,w,c
 34115  001F28  ECC7  F048         	call	_controlChange
 34116  001F2C                     l2391:
 34117                           
 34118                           ;drum.c: 53: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T4 == 0) {controlChan
      +                          ge(channel,DRUM_CC[3], 127);}
 34119  001F2C  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34120  001F2E  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34121  001F30  D00A               	goto	l2392
 34122  001F32  B62D               	btfsc	_toggle_state,3,c
 34123  001F34  D008               	goto	l2392
 34124  001F36  C0F8  F060         	movff	_DRUM_CC+3,controlChange@controllerNumber
 34125  001F3A  0E7F               	movlw	127
 34126  001F3C  0100               	movlb	0	; () banked
 34127  001F3E  6F61               	movwf	controlChange@value& (0+255),b
 34128  001F40  503E               	movf	_channel,w,c
 34129  001F42  ECC7  F048         	call	_controlChange
 34130  001F46                     l2392:
 34131                           
 34132                           ;drum.c: 54: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T4 == 1) {controlChan
      +                          ge(channel,DRUM_CC[3], 0);}
 34133  001F46  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34134  001F48  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34135  001F4A  D00A               	goto	l2393
 34136  001F4C  A62D               	btfss	_toggle_state,3,c
 34137  001F4E  D008               	goto	l2393
 34138  001F50  C0F8  F060         	movff	_DRUM_CC+3,controlChange@controllerNumber
 34139  001F54  0E00               	movlw	0
 34140  001F56  0100               	movlb	0	; () banked
 34141  001F58  6F61               	movwf	controlChange@value& (0+255),b
 34142  001F5A  503E               	movf	_channel,w,c
 34143  001F5C  ECC7  F048         	call	_controlChange
 34144  001F60                     l2393:
 34145                           
 34146                           ;drum.c: 55: toggle_state.T4 ^= 1;
 34147  001F60  762D               	btg	_toggle_state,3,c
 34148  001F62                     l2389:
 34149                           
 34150                           ;drum.c: 56: }
 34151                           ;drum.c: 57: if(((drum_button_state_now) & 0x10) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW5){
 34152  001F62  A839               	btfss	_drum_button_state_now,4,c
 34153  001F64  D034               	goto	l2394
 34154  001F66  0100               	movlb	0	; () banked
 34155  001F68  A7DB               	btfss	(_button_state_now+3)& (0+255),3,b
 34156                           
 34157                           ; BSR set to: 0
 34158  001F6A  B837               	btfsc	_drum,4,c
 34159  001F6C  D030               	goto	l2394
 34160                           
 34161                           ; BSR set to: 0
 34162                           ;drum.c: 58: drum.SW5 = 1;
 34163  001F6E  8837               	bsf	_drum,4,c
 34164                           
 34165                           ;drum.c: 59: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[4],velocity);}
 34166  001F70  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34167  001F72  D007               	goto	l2395
 34168                           
 34169                           ; BSR set to: 0
 34170  001F74  C1EB  F060         	movff	_DRUM_NOTE+4,noteOnDrum@pitch
 34171  001F78  C051  F061         	movff	_velocity,noteOnDrum@velocity
 34172  001F7C  5052               	movf	_drumchannel,w,c
 34173  001F7E  ECF3  F048         	call	_noteOnDrum
 34174  001F82                     l2395:
 34175                           
 34176                           ;drum.c: 60: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[4], 
      +                          127);}
 34177  001F82  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34178  001F84  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34179  001F86  D008               	goto	l2396
 34180  001F88  C0F9  F060         	movff	_DRUM_CC+4,controlChange@controllerNumber
 34181  001F8C  0E7F               	movlw	127
 34182  001F8E  0100               	movlb	0	; () banked
 34183  001F90  6F61               	movwf	controlChange@value& (0+255),b
 34184  001F92  503E               	movf	_channel,w,c
 34185  001F94  ECC7  F048         	call	_controlChange
 34186  001F98                     l2396:
 34187                           
 34188                           ;drum.c: 61: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T1 == 0) {controlChan
      +                          ge(channel,DRUM_CC[4], 127);}
 34189  001F98  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34190  001F9A  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34191  001F9C  D00A               	goto	l2397
 34192  001F9E  B02D               	btfsc	_toggle_state,0,c
 34193  001FA0  D008               	goto	l2397
 34194  001FA2  C0F9  F060         	movff	_DRUM_CC+4,controlChange@controllerNumber
 34195  001FA6  0E7F               	movlw	127
 34196  001FA8  0100               	movlb	0	; () banked
 34197  001FAA  6F61               	movwf	controlChange@value& (0+255),b
 34198  001FAC  503E               	movf	_channel,w,c
 34199  001FAE  ECC7  F048         	call	_controlChange
 34200  001FB2                     l2397:
 34201                           
 34202                           ;drum.c: 62: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T1 == 1) {controlChan
      +                          ge(channel,DRUM_CC[4], 0);}
 34203  001FB2  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34204  001FB4  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34205  001FB6  D00A               	goto	l2398
 34206  001FB8  A02D               	btfss	_toggle_state,0,c
 34207  001FBA  D008               	goto	l2398
 34208  001FBC  C0F9  F060         	movff	_DRUM_CC+4,controlChange@controllerNumber
 34209  001FC0  0E00               	movlw	0
 34210  001FC2  0100               	movlb	0	; () banked
 34211  001FC4  6F61               	movwf	controlChange@value& (0+255),b
 34212  001FC6  503E               	movf	_channel,w,c
 34213  001FC8  ECC7  F048         	call	_controlChange
 34214  001FCC                     l2398:
 34215                           
 34216                           ;drum.c: 63: toggle_state.T5 ^= 1;
 34217  001FCC  782D               	btg	_toggle_state,4,c
 34218  001FCE                     l2394:
 34219                           
 34220                           ;drum.c: 64: }
 34221                           ;drum.c: 65: if(((drum_button_state_now) & 0x20) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW6) {
 34222  001FCE  AA39               	btfss	_drum_button_state_now,5,c
 34223  001FD0  D034               	goto	l2399
 34224  001FD2  0100               	movlb	0	; () banked
 34225  001FD4  A7DB               	btfss	(_button_state_now+3)& (0+255),3,b
 34226                           
 34227                           ; BSR set to: 0
 34228  001FD6  BA37               	btfsc	_drum,5,c
 34229  001FD8  D030               	goto	l2399
 34230                           
 34231                           ; BSR set to: 0
 34232                           ;drum.c: 66: drum.SW6 = 1;
 34233  001FDA  8A37               	bsf	_drum,5,c
 34234                           
 34235                           ;drum.c: 67: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[5],velocity);}
 34236  001FDC  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34237  001FDE  D007               	goto	l2400
 34238                           
 34239                           ; BSR set to: 0
 34240  001FE0  C1EC  F060         	movff	_DRUM_NOTE+5,noteOnDrum@pitch
 34241  001FE4  C051  F061         	movff	_velocity,noteOnDrum@velocity
 34242  001FE8  5052               	movf	_drumchannel,w,c
 34243  001FEA  ECF3  F048         	call	_noteOnDrum
 34244  001FEE                     l2400:
 34245                           
 34246                           ;drum.c: 68: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[5], 
      +                          127);}
 34247  001FEE  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34248  001FF0  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34249  001FF2  D008               	goto	l2401
 34250  001FF4  C0FA  F060         	movff	_DRUM_CC+5,controlChange@controllerNumber
 34251  001FF8  0E7F               	movlw	127
 34252  001FFA  0100               	movlb	0	; () banked
 34253  001FFC  6F61               	movwf	controlChange@value& (0+255),b
 34254  001FFE  503E               	movf	_channel,w,c
 34255  002000  ECC7  F048         	call	_controlChange
 34256  002004                     l2401:
 34257                           
 34258                           ;drum.c: 69: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T2 == 0) {controlChan
      +                          ge(channel,DRUM_CC[5], 127);}
 34259  002004  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34260  002006  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34261  002008  D00A               	goto	l2402
 34262  00200A  B22D               	btfsc	_toggle_state,1,c
 34263  00200C  D008               	goto	l2402
 34264  00200E  C0FA  F060         	movff	_DRUM_CC+5,controlChange@controllerNumber
 34265  002012  0E7F               	movlw	127
 34266  002014  0100               	movlb	0	; () banked
 34267  002016  6F61               	movwf	controlChange@value& (0+255),b
 34268  002018  503E               	movf	_channel,w,c
 34269  00201A  ECC7  F048         	call	_controlChange
 34270  00201E                     l2402:
 34271                           
 34272                           ;drum.c: 70: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T2 == 1) {controlChan
      +                          ge(channel,DRUM_CC[5], 0);}
 34273  00201E  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34274  002020  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34275  002022  D00A               	goto	l2403
 34276  002024  A22D               	btfss	_toggle_state,1,c
 34277  002026  D008               	goto	l2403
 34278  002028  C0FA  F060         	movff	_DRUM_CC+5,controlChange@controllerNumber
 34279  00202C  0E00               	movlw	0
 34280  00202E  0100               	movlb	0	; () banked
 34281  002030  6F61               	movwf	controlChange@value& (0+255),b
 34282  002032  503E               	movf	_channel,w,c
 34283  002034  ECC7  F048         	call	_controlChange
 34284  002038                     l2403:
 34285                           
 34286                           ;drum.c: 71: toggle_state.T6 ^= 1;
 34287  002038  7A2D               	btg	_toggle_state,5,c
 34288  00203A                     l2399:
 34289                           
 34290                           ;drum.c: 72: }
 34291                           ;drum.c: 73: if(((drum_button_state_now) & 0x40) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW7) {
 34292  00203A  AC39               	btfss	_drum_button_state_now,6,c
 34293  00203C  D034               	goto	l2404
 34294  00203E  0100               	movlb	0	; () banked
 34295  002040  A7DB               	btfss	(_button_state_now+3)& (0+255),3,b
 34296                           
 34297                           ; BSR set to: 0
 34298  002042  BC37               	btfsc	_drum,6,c
 34299  002044  D030               	goto	l2404
 34300                           
 34301                           ; BSR set to: 0
 34302                           ;drum.c: 74: drum.SW7 = 1;
 34303  002046  8C37               	bsf	_drum,6,c
 34304                           
 34305                           ;drum.c: 75: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[6],velocity);}
 34306  002048  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34307  00204A  D007               	goto	l2405
 34308                           
 34309                           ; BSR set to: 0
 34310  00204C  C1ED  F060         	movff	_DRUM_NOTE+6,noteOnDrum@pitch
 34311  002050  C051  F061         	movff	_velocity,noteOnDrum@velocity
 34312  002054  5052               	movf	_drumchannel,w,c
 34313  002056  ECF3  F048         	call	_noteOnDrum
 34314  00205A                     l2405:
 34315                           
 34316                           ;drum.c: 76: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[6], 
      +                          127);}
 34317  00205A  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34318  00205C  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34319  00205E  D008               	goto	l2406
 34320  002060  C0FB  F060         	movff	_DRUM_CC+6,controlChange@controllerNumber
 34321  002064  0E7F               	movlw	127
 34322  002066  0100               	movlb	0	; () banked
 34323  002068  6F61               	movwf	controlChange@value& (0+255),b
 34324  00206A  503E               	movf	_channel,w,c
 34325  00206C  ECC7  F048         	call	_controlChange
 34326  002070                     l2406:
 34327                           
 34328                           ;drum.c: 77: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T3 == 0) {controlChan
      +                          ge(channel,DRUM_CC[6], 127);}
 34329  002070  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34330  002072  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34331  002074  D00A               	goto	l2407
 34332  002076  B42D               	btfsc	_toggle_state,2,c
 34333  002078  D008               	goto	l2407
 34334  00207A  C0FB  F060         	movff	_DRUM_CC+6,controlChange@controllerNumber
 34335  00207E  0E7F               	movlw	127
 34336  002080  0100               	movlb	0	; () banked
 34337  002082  6F61               	movwf	controlChange@value& (0+255),b
 34338  002084  503E               	movf	_channel,w,c
 34339  002086  ECC7  F048         	call	_controlChange
 34340  00208A                     l2407:
 34341                           
 34342                           ;drum.c: 78: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T3 == 1) {controlChan
      +                          ge(channel,DRUM_CC[6], 0);}
 34343  00208A  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34344  00208C  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34345  00208E  D00A               	goto	l2408
 34346  002090  A42D               	btfss	_toggle_state,2,c
 34347  002092  D008               	goto	l2408
 34348  002094  C0FB  F060         	movff	_DRUM_CC+6,controlChange@controllerNumber
 34349  002098  0E00               	movlw	0
 34350  00209A  0100               	movlb	0	; () banked
 34351  00209C  6F61               	movwf	controlChange@value& (0+255),b
 34352  00209E  503E               	movf	_channel,w,c
 34353  0020A0  ECC7  F048         	call	_controlChange
 34354  0020A4                     l2408:
 34355                           
 34356                           ;drum.c: 79: toggle_state.T7 ^= 1;
 34357  0020A4  7C2D               	btg	_toggle_state,6,c
 34358  0020A6                     l2404:
 34359                           
 34360                           ;drum.c: 80: }
 34361                           ;drum.c: 81: if(((drum_button_state_now) & 0x80) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW8) {
 34362  0020A6  AE39               	btfss	_drum_button_state_now,7,c
 34363  0020A8  D034               	goto	l2409
 34364  0020AA  0100               	movlb	0	; () banked
 34365  0020AC  A7DB               	btfss	(_button_state_now+3)& (0+255),3,b
 34366                           
 34367                           ; BSR set to: 0
 34368  0020AE  BE37               	btfsc	_drum,7,c
 34369  0020B0  D030               	goto	l2409
 34370                           
 34371                           ; BSR set to: 0
 34372                           ;drum.c: 82: drum.SW8 = 1;
 34373  0020B2  8E37               	bsf	_drum,7,c
 34374                           
 34375                           ;drum.c: 83: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[7],velocity);}
 34376  0020B4  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34377  0020B6  D007               	goto	l2410
 34378                           
 34379                           ; BSR set to: 0
 34380  0020B8  C1EE  F060         	movff	_DRUM_NOTE+7,noteOnDrum@pitch
 34381  0020BC  C051  F061         	movff	_velocity,noteOnDrum@velocity
 34382  0020C0  5052               	movf	_drumchannel,w,c
 34383  0020C2  ECF3  F048         	call	_noteOnDrum
 34384  0020C6                     l2410:
 34385                           
 34386                           ;drum.c: 84: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[7], 
      +                          127);}
 34387  0020C6  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34388  0020C8  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34389  0020CA  D008               	goto	l2411
 34390  0020CC  C0FC  F060         	movff	_DRUM_CC+7,controlChange@controllerNumber
 34391  0020D0  0E7F               	movlw	127
 34392  0020D2  0100               	movlb	0	; () banked
 34393  0020D4  6F61               	movwf	controlChange@value& (0+255),b
 34394  0020D6  503E               	movf	_channel,w,c
 34395  0020D8  ECC7  F048         	call	_controlChange
 34396  0020DC                     l2411:
 34397                           
 34398                           ;drum.c: 85: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T4 == 0) {controlChan
      +                          ge(channel,DRUM_CC[7], 127);}
 34399  0020DC  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34400  0020DE  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34401  0020E0  D00A               	goto	l2412
 34402  0020E2  B62D               	btfsc	_toggle_state,3,c
 34403  0020E4  D008               	goto	l2412
 34404  0020E6  C0FC  F060         	movff	_DRUM_CC+7,controlChange@controllerNumber
 34405  0020EA  0E7F               	movlw	127
 34406  0020EC  0100               	movlb	0	; () banked
 34407  0020EE  6F61               	movwf	controlChange@value& (0+255),b
 34408  0020F0  503E               	movf	_channel,w,c
 34409  0020F2  ECC7  F048         	call	_controlChange
 34410  0020F6                     l2412:
 34411                           
 34412                           ;drum.c: 86: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T4 == 1) {controlChan
      +                          ge(channel,DRUM_CC[7], 0);}
 34413  0020F6  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34414  0020F8  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34415  0020FA  D00A               	goto	l2413
 34416  0020FC  A62D               	btfss	_toggle_state,3,c
 34417  0020FE  D008               	goto	l2413
 34418  002100  C0FC  F060         	movff	_DRUM_CC+7,controlChange@controllerNumber
 34419  002104  0E00               	movlw	0
 34420  002106  0100               	movlb	0	; () banked
 34421  002108  6F61               	movwf	controlChange@value& (0+255),b
 34422  00210A  503E               	movf	_channel,w,c
 34423  00210C  ECC7  F048         	call	_controlChange
 34424  002110                     l2413:
 34425                           
 34426                           ;drum.c: 87: toggle_state.T8 ^= 1;
 34427  002110  7E2D               	btg	_toggle_state,7,c
 34428  002112                     l2409:
 34429                           
 34430                           ;drum.c: 88: }
 34431                           ;drum.c: 91: if(((drum_button_state_last & 0x01)) && ((drum_button_state_now & 0x01) == 
      +                          0) && drum.SW1) {
 34432  002112  B038               	btfsc	_drum_button_state_last,0,c
 34433  002114  B039               	btfsc	_drum_button_state_now,0,c
 34434  002116  D017               	goto	l2416
 34435  002118  A037               	btfss	_drum,0,c
 34436  00211A  D015               	goto	l2416
 34437                           
 34438                           ;drum.c: 92: drum.SW1 = 0;
 34439  00211C  9037               	bcf	_drum,0,c
 34440                           
 34441                           ;drum.c: 93: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[0],velocity);}
 34442  00211E  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34443  002120  D007               	goto	l2415
 34444  002122  C1E7  F060         	movff	_DRUM_NOTE,noteOffDrum@pitch
 34445  002126  C051  F061         	movff	_velocity,noteOffDrum@velocity
 34446  00212A  5052               	movf	_drumchannel,w,c
 34447  00212C  EC74  F04B         	call	_noteOffDrum
 34448  002130                     l2415:
 34449                           
 34450                           ;drum.c: 94: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[0], 
      +                          0);}
 34451  002130  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34452  002132  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34453  002134  D008               	goto	l2416
 34454  002136  C0F5  F060         	movff	_DRUM_CC,controlChange@controllerNumber
 34455  00213A  0E00               	movlw	0
 34456  00213C  0100               	movlb	0	; () banked
 34457  00213E  6F61               	movwf	controlChange@value& (0+255),b
 34458  002140  503E               	movf	_channel,w,c
 34459  002142  ECC7  F048         	call	_controlChange
 34460  002146                     l2416:
 34461                           
 34462                           ;drum.c: 95: }
 34463                           ;drum.c: 96: if(((drum_button_state_last & 0x02)) && ((drum_button_state_now & 0x02) == 
      +                          0) && drum.SW2) {
 34464  002146  B238               	btfsc	_drum_button_state_last,1,c
 34465  002148  B239               	btfsc	_drum_button_state_now,1,c
 34466  00214A  D017               	goto	l2419
 34467  00214C  A237               	btfss	_drum,1,c
 34468  00214E  D015               	goto	l2419
 34469                           
 34470                           ;drum.c: 97: drum.SW2 = 0;
 34471  002150  9237               	bcf	_drum,1,c
 34472                           
 34473                           ;drum.c: 98: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[1],velocity);}
 34474  002152  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34475  002154  D007               	goto	l2418
 34476  002156  C1E8  F060         	movff	_DRUM_NOTE+1,noteOffDrum@pitch
 34477  00215A  C051  F061         	movff	_velocity,noteOffDrum@velocity
 34478  00215E  5052               	movf	_drumchannel,w,c
 34479  002160  EC74  F04B         	call	_noteOffDrum
 34480  002164                     l2418:
 34481                           
 34482                           ;drum.c: 99: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[1], 
      +                          0);}
 34483  002164  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34484  002166  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34485  002168  D008               	goto	l2419
 34486  00216A  C0F6  F060         	movff	_DRUM_CC+1,controlChange@controllerNumber
 34487  00216E  0E00               	movlw	0
 34488  002170  0100               	movlb	0	; () banked
 34489  002172  6F61               	movwf	controlChange@value& (0+255),b
 34490  002174  503E               	movf	_channel,w,c
 34491  002176  ECC7  F048         	call	_controlChange
 34492  00217A                     l2419:
 34493                           
 34494                           ;drum.c: 100: }
 34495                           ;drum.c: 101: if(((drum_button_state_last & 0x04)) && ((drum_button_state_now & 0x04) ==
      +                           0) && drum.SW3) {
 34496  00217A  B438               	btfsc	_drum_button_state_last,2,c
 34497  00217C  B439               	btfsc	_drum_button_state_now,2,c
 34498  00217E  D017               	goto	l2422
 34499  002180  A437               	btfss	_drum,2,c
 34500  002182  D015               	goto	l2422
 34501                           
 34502                           ;drum.c: 102: drum.SW3 = 0;
 34503  002184  9437               	bcf	_drum,2,c
 34504                           
 34505                           ;drum.c: 103: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[2],velocity);}
 34506  002186  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34507  002188  D007               	goto	l2421
 34508  00218A  C1E9  F060         	movff	_DRUM_NOTE+2,noteOffDrum@pitch
 34509  00218E  C051  F061         	movff	_velocity,noteOffDrum@velocity
 34510  002192  5052               	movf	_drumchannel,w,c
 34511  002194  EC74  F04B         	call	_noteOffDrum
 34512  002198                     l2421:
 34513                           
 34514                           ;drum.c: 104: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[2],
      +                           0);}
 34515  002198  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34516  00219A  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34517  00219C  D008               	goto	l2422
 34518  00219E  C0F7  F060         	movff	_DRUM_CC+2,controlChange@controllerNumber
 34519  0021A2  0E00               	movlw	0
 34520  0021A4  0100               	movlb	0	; () banked
 34521  0021A6  6F61               	movwf	controlChange@value& (0+255),b
 34522  0021A8  503E               	movf	_channel,w,c
 34523  0021AA  ECC7  F048         	call	_controlChange
 34524  0021AE                     l2422:
 34525                           
 34526                           ;drum.c: 105: }
 34527                           ;drum.c: 106: if(((drum_button_state_last & 0x08)) && ((drum_button_state_now & 0x08) ==
      +                           0) && drum.SW4) {
 34528  0021AE  B638               	btfsc	_drum_button_state_last,3,c
 34529  0021B0  B639               	btfsc	_drum_button_state_now,3,c
 34530  0021B2  D017               	goto	l2425
 34531  0021B4  A637               	btfss	_drum,3,c
 34532  0021B6  D015               	goto	l2425
 34533                           
 34534                           ;drum.c: 107: drum.SW4 = 0;
 34535  0021B8  9637               	bcf	_drum,3,c
 34536                           
 34537                           ;drum.c: 108: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[3],velocity);}
 34538  0021BA  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34539  0021BC  D007               	goto	l2424
 34540  0021BE  C1EA  F060         	movff	_DRUM_NOTE+3,noteOffDrum@pitch
 34541  0021C2  C051  F061         	movff	_velocity,noteOffDrum@velocity
 34542  0021C6  5052               	movf	_drumchannel,w,c
 34543  0021C8  EC74  F04B         	call	_noteOffDrum
 34544  0021CC                     l2424:
 34545                           
 34546                           ;drum.c: 109: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[3],
      +                           0);}
 34547  0021CC  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34548  0021CE  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34549  0021D0  D008               	goto	l2425
 34550  0021D2  C0F8  F060         	movff	_DRUM_CC+3,controlChange@controllerNumber
 34551  0021D6  0E00               	movlw	0
 34552  0021D8  0100               	movlb	0	; () banked
 34553  0021DA  6F61               	movwf	controlChange@value& (0+255),b
 34554  0021DC  503E               	movf	_channel,w,c
 34555  0021DE  ECC7  F048         	call	_controlChange
 34556  0021E2                     l2425:
 34557                           
 34558                           ;drum.c: 110: }
 34559                           ;drum.c: 111: if(((drum_button_state_last & 0x10)) && ((drum_button_state_now & 0x10) ==
      +                           0) && drum.SW5) {
 34560  0021E2  B838               	btfsc	_drum_button_state_last,4,c
 34561  0021E4  B839               	btfsc	_drum_button_state_now,4,c
 34562  0021E6  D017               	goto	l2428
 34563  0021E8  A837               	btfss	_drum,4,c
 34564  0021EA  D015               	goto	l2428
 34565                           
 34566                           ;drum.c: 112: drum.SW5 = 0;
 34567  0021EC  9837               	bcf	_drum,4,c
 34568                           
 34569                           ;drum.c: 113: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[4],velocity);}
 34570  0021EE  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34571  0021F0  D007               	goto	l2427
 34572  0021F2  C1EB  F060         	movff	_DRUM_NOTE+4,noteOffDrum@pitch
 34573  0021F6  C051  F061         	movff	_velocity,noteOffDrum@velocity
 34574  0021FA  5052               	movf	_drumchannel,w,c
 34575  0021FC  EC74  F04B         	call	_noteOffDrum
 34576  002200                     l2427:
 34577                           
 34578                           ;drum.c: 114: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[4],
      +                           0);}
 34579  002200  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34580  002202  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34581  002204  D008               	goto	l2428
 34582  002206  C0F9  F060         	movff	_DRUM_CC+4,controlChange@controllerNumber
 34583  00220A  0E00               	movlw	0
 34584  00220C  0100               	movlb	0	; () banked
 34585  00220E  6F61               	movwf	controlChange@value& (0+255),b
 34586  002210  503E               	movf	_channel,w,c
 34587  002212  ECC7  F048         	call	_controlChange
 34588  002216                     l2428:
 34589                           
 34590                           ;drum.c: 115: }
 34591                           ;drum.c: 116: if(((drum_button_state_last & 0x20)) && ((drum_button_state_now & 0x20) ==
      +                           0) && drum.SW6) {
 34592  002216  BA38               	btfsc	_drum_button_state_last,5,c
 34593  002218  BA39               	btfsc	_drum_button_state_now,5,c
 34594  00221A  D017               	goto	l2431
 34595  00221C  AA37               	btfss	_drum,5,c
 34596  00221E  D015               	goto	l2431
 34597                           
 34598                           ;drum.c: 117: drum.SW6 = 0;
 34599  002220  9A37               	bcf	_drum,5,c
 34600                           
 34601                           ;drum.c: 118: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[5],velocity);}
 34602  002222  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34603  002224  D007               	goto	l2430
 34604  002226  C1EC  F060         	movff	_DRUM_NOTE+5,noteOffDrum@pitch
 34605  00222A  C051  F061         	movff	_velocity,noteOffDrum@velocity
 34606  00222E  5052               	movf	_drumchannel,w,c
 34607  002230  EC74  F04B         	call	_noteOffDrum
 34608  002234                     l2430:
 34609                           
 34610                           ;drum.c: 119: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[5],
      +                           0);}
 34611  002234  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34612  002236  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34613  002238  D008               	goto	l2431
 34614  00223A  C0FA  F060         	movff	_DRUM_CC+5,controlChange@controllerNumber
 34615  00223E  0E00               	movlw	0
 34616  002240  0100               	movlb	0	; () banked
 34617  002242  6F61               	movwf	controlChange@value& (0+255),b
 34618  002244  503E               	movf	_channel,w,c
 34619  002246  ECC7  F048         	call	_controlChange
 34620  00224A                     l2431:
 34621                           
 34622                           ;drum.c: 120: }
 34623                           ;drum.c: 121: if(((drum_button_state_last & 0x40)) && ((drum_button_state_now & 0x40) ==
      +                           0) && drum.SW7) {
 34624  00224A  BC38               	btfsc	_drum_button_state_last,6,c
 34625  00224C  BC39               	btfsc	_drum_button_state_now,6,c
 34626  00224E  D017               	goto	l2434
 34627  002250  AC37               	btfss	_drum,6,c
 34628  002252  D015               	goto	l2434
 34629                           
 34630                           ;drum.c: 122: drum.SW7 = 0;
 34631  002254  9C37               	bcf	_drum,6,c
 34632                           
 34633                           ;drum.c: 123: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[6],velocity);}
 34634  002256  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34635  002258  D007               	goto	l2433
 34636  00225A  C1ED  F060         	movff	_DRUM_NOTE+6,noteOffDrum@pitch
 34637  00225E  C051  F061         	movff	_velocity,noteOffDrum@velocity
 34638  002262  5052               	movf	_drumchannel,w,c
 34639  002264  EC74  F04B         	call	_noteOffDrum
 34640  002268                     l2433:
 34641                           
 34642                           ;drum.c: 124: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[6],
      +                           0);}
 34643  002268  A601               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34644  00226A  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34645  00226C  D008               	goto	l2434
 34646  00226E  C0FB  F060         	movff	_DRUM_CC+6,controlChange@controllerNumber
 34647  002272  0E00               	movlw	0
 34648  002274  0100               	movlb	0	; () banked
 34649  002276  6F61               	movwf	controlChange@value& (0+255),b
 34650  002278  503E               	movf	_channel,w,c
 34651  00227A  ECC7  F048         	call	_controlChange
 34652  00227E                     l2434:
 34653                           
 34654                           ;drum.c: 125: }
 34655                           ;drum.c: 126: if(((drum_button_state_last & 0x80)) && ((drum_button_state_now & 0x80) ==
      +                           0) && drum.SW8) {
 34656  00227E  AE38               	btfss	_drum_button_state_last,7,c
 34657  002280  0012               	return	
 34658  002282  BE39               	btfsc	_drum_button_state_now,7,c
 34659  002284  0012               	return	
 34660  002286  AE37               	btfss	_drum,7,c
 34661  002288  0012               	return	
 34662                           
 34663                           ;drum.c: 127: drum.SW8 = 0;
 34664  00228A  9E37               	bcf	_drum,7,c
 34665                           
 34666                           ;drum.c: 128: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[7],velocity);}
 34667  00228C  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34668  00228E  D007               	goto	l2436
 34669  002290  C1EE  F060         	movff	_DRUM_NOTE+7,noteOffDrum@pitch
 34670  002294  C051  F061         	movff	_velocity,noteOffDrum@velocity
 34671  002298  5052               	movf	_drumchannel,w,c
 34672  00229A  EC74  F04B         	call	_noteOffDrum
 34673  00229E                     l2436:
 34674                           
 34675                           ;drum.c: 129: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[7],
      +                           0);}
 34676  00229E  B601               	btfsc	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34677  0022A0  0012               	return	
 34678  0022A2  A801               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34679  0022A4  0012               	return	
 34680  0022A6  C0FC  F060         	movff	_DRUM_CC+7,controlChange@controllerNumber
 34681  0022AA  0E00               	movlw	0
 34682  0022AC  0100               	movlb	0	; () banked
 34683  0022AE  6F61               	movwf	controlChange@value& (0+255),b
 34684  0022B0  503E               	movf	_channel,w,c
 34685  0022B2  ECC7  F048         	call	_controlChange
 34686  0022B6  0012               	return	
 34687  0022B8                     __end_of_processDrumpad:
 34688                           	opt stack 0
 34689                           tblptru	equ	0xFF8
 34690                           tblptrh	equ	0xFF7
 34691                           tblptrl	equ	0xFF6
 34692                           tablat	equ	0xFF5
 34693                           prodh	equ	0xFF4
 34694                           prodl	equ	0xFF3
 34695                           intcon	equ	0xFF2
 34696                           intcon2	equ	0xFF1
 34697                           indf0	equ	0xFEF
 34698                           postinc0	equ	0xFEE
 34699                           fsr0h	equ	0xFEA
 34700                           fsr0l	equ	0xFE9
 34701                           wreg	equ	0xFE8
 34702                           postinc1	equ	0xFE6
 34703                           postdec1	equ	0xFE5
 34704                           plusw1	equ	0xFE3
 34705                           fsr1h	equ	0xFE2
 34706                           fsr1l	equ	0xFE1
 34707                           indf2	equ	0xFDF
 34708                           postinc2	equ	0xFDE
 34709                           postdec2	equ	0xFDD
 34710                           plusw2	equ	0xFDB
 34711                           fsr2h	equ	0xFDA
 34712                           fsr2l	equ	0xFD9
 34713                           status	equ	0xFD8
 34714                           
 34715 ;; *************** function _noteOnDrum *****************
 34716 ;; Defined at:
 34717 ;;		line 160 in file "midi.c"
 34718 ;; Parameters:    Size  Location     Type
 34719 ;;  channel         1    wreg     unsigned char 
 34720 ;;  pitch           1    0[BANK0 ] unsigned char 
 34721 ;;  velocity        1    1[BANK0 ] unsigned char 
 34722 ;; Auto vars:     Size  Location     Type
 34723 ;;  channel         1    2[BANK0 ] unsigned char 
 34724 ;; Return value:  Size  Location     Type
 34725 ;;                  1    wreg      void 
 34726 ;; Registers used:
 34727 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh
 34728 ;; Tracked objects:
 34729 ;;		On entry : 0/0
 34730 ;;		On exit  : 0/0
 34731 ;;		Unchanged: 0/0
 34732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34733 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34734 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34735 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34736 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34737 ;;Total ram usage:        3 bytes
 34738 ;; Hardware stack levels used:    1
 34739 ;; Hardware stack levels required when called:    7
 34740 ;; This function calls:
 34741 ;;		_noteOff
 34742 ;;		_sendOut
 34743 ;;		_sendUSB
 34744 ;; This function is called by:
 34745 ;;		_processDrumpad
 34746 ;; This function uses a non-reentrant model
 34747 ;;
 34748                           
 34749                           	psect	text95
 34750  0091E6                     __ptext95:
 34751                           	opt stack 0
 34752  0091E6                     _noteOnDrum:
 34753                           	opt stack 18
 34754                           
 34755                           ;incstack = 0
 34756                           ;noteOnDrum@channel stored from wreg
 34757  0091E6  0100               	movlb	0	; () banked
 34758  0091E8  6F62               	movwf	noteOnDrum@channel& (0+255),b
 34759                           
 34760                           ;midi.c: 162: noteNumber = pitch;
 34761  0091EA  C060  F03C         	movff	noteOnDrum@pitch,_noteNumber
 34762                           
 34763                           ;midi.c: 163: statusByte = channel | note_on;
 34764  0091EE  0100               	movlb	0	; () banked
 34765  0091F0  5162               	movf	noteOnDrum@channel& (0+255),w,b
 34766  0091F2  0990               	iorlw	144
 34767  0091F4  6E3D               	movwf	_statusByte,c
 34768                           
 34769                           ; BSR set to: 0
 34770                           ;midi.c: 165: if (velocity == 0) {noteOff(channel, pitch, velocity);return;}
 34771  0091F6  5161               	movf	noteOnDrum@velocity& (0+255),w,b
 34772  0091F8  A4D8               	btfss	status,2,c
 34773  0091FA  D009               	goto	l491
 34774                           
 34775                           ; BSR set to: 0
 34776  0091FC  5161               	movf	noteOnDrum@velocity& (0+255),w,b
 34777  0091FE  6EE6               	movwf	postinc1,c
 34778  009200  5160               	movf	noteOnDrum@pitch& (0+255),w,b
 34779  009202  6EE6               	movwf	postinc1,c
 34780  009204  5162               	movf	noteOnDrum@channel& (0+255),w,b
 34781  009206  6EE6               	movwf	postinc1,c
 34782  009208  EC48  F04A         	call	_noteOff	;wreg free
 34783  00920C  0012               	return	
 34784  00920E                     l491:
 34785                           
 34786                           ;midi.c: 168: sendUSB(statusByte, noteNumber, velocity);
 34787  00920E  0100               	movlb	0	; () banked
 34788  009210  5161               	movf	noteOnDrum@velocity& (0+255),w,b
 34789  009212  6EE6               	movwf	postinc1,c
 34790  009214  503C               	movf	_noteNumber,w,c
 34791  009216  6EE6               	movwf	postinc1,c
 34792  009218  503D               	movf	_statusByte,w,c
 34793  00921A  6EE6               	movwf	postinc1,c
 34794  00921C  ECDB  F036         	call	_sendUSB	;wreg free
 34795                           
 34796                           ;midi.c: 171: if(velocity > 0) {
 34797  009220  0100               	movlb	0	; () banked
 34798  009222  5161               	movf	noteOnDrum@velocity& (0+255),w,b
 34799  009224  B4D8               	btfsc	status,2,c
 34800  009226  0012               	return	
 34801                           
 34802                           ; BSR set to: 0
 34803                           ;midi.c: 172: sendOut(statusByte, noteNumber, velocity);
 34804  009228  5161               	movf	noteOnDrum@velocity& (0+255),w,b
 34805  00922A  6EE6               	movwf	postinc1,c
 34806  00922C  503C               	movf	_noteNumber,w,c
 34807  00922E  6EE6               	movwf	postinc1,c
 34808  009230  503D               	movf	_statusByte,w,c
 34809  009232  6EE6               	movwf	postinc1,c
 34810  009234  EC64  F036         	call	_sendOut	;wreg free
 34811  009238  0012               	return	
 34812  00923A                     __end_of_noteOnDrum:
 34813                           	opt stack 0
 34814                           tblptru	equ	0xFF8
 34815                           tblptrh	equ	0xFF7
 34816                           tblptrl	equ	0xFF6
 34817                           tablat	equ	0xFF5
 34818                           prodh	equ	0xFF4
 34819                           prodl	equ	0xFF3
 34820                           intcon	equ	0xFF2
 34821                           intcon2	equ	0xFF1
 34822                           indf0	equ	0xFEF
 34823                           postinc0	equ	0xFEE
 34824                           fsr0h	equ	0xFEA
 34825                           fsr0l	equ	0xFE9
 34826                           wreg	equ	0xFE8
 34827                           postinc1	equ	0xFE6
 34828                           postdec1	equ	0xFE5
 34829                           plusw1	equ	0xFE3
 34830                           fsr1h	equ	0xFE2
 34831                           fsr1l	equ	0xFE1
 34832                           indf2	equ	0xFDF
 34833                           postinc2	equ	0xFDE
 34834                           postdec2	equ	0xFDD
 34835                           plusw2	equ	0xFDB
 34836                           fsr2h	equ	0xFDA
 34837                           fsr2l	equ	0xFD9
 34838                           status	equ	0xFD8
 34839                           
 34840 ;; *************** function _noteOffDrum *****************
 34841 ;; Defined at:
 34842 ;;		line 145 in file "midi.c"
 34843 ;; Parameters:    Size  Location     Type
 34844 ;;  channel         1    wreg     unsigned char 
 34845 ;;  pitch           1    0[BANK0 ] unsigned char 
 34846 ;;  velocity        1    1[BANK0 ] unsigned char 
 34847 ;; Auto vars:     Size  Location     Type
 34848 ;;  channel         1    2[BANK0 ] unsigned char 
 34849 ;; Return value:  Size  Location     Type
 34850 ;;                  1    wreg      void 
 34851 ;; Registers used:
 34852 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11
 34853 ;; Tracked objects:
 34854 ;;		On entry : 0/0
 34855 ;;		On exit  : 0/0
 34856 ;;		Unchanged: 0/0
 34857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34858 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34859 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34861 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34862 ;;Total ram usage:        3 bytes
 34863 ;; Hardware stack levels used:    1
 34864 ;; Hardware stack levels required when called:    6
 34865 ;; This function calls:
 34866 ;;		_sendOut
 34867 ;;		_sendUSB
 34868 ;; This function is called by:
 34869 ;;		_processDrumpad
 34870 ;; This function uses a non-reentrant model
 34871 ;;
 34872                           
 34873                           	psect	text96
 34874  0096E8                     __ptext96:
 34875                           	opt stack 0
 34876  0096E8                     _noteOffDrum:
 34877                           	opt stack 19
 34878                           
 34879                           ;incstack = 0
 34880                           ;noteOffDrum@channel stored from wreg
 34881  0096E8  0100               	movlb	0	; () banked
 34882  0096EA  6F62               	movwf	noteOffDrum@channel& (0+255),b
 34883                           
 34884                           ;midi.c: 147: noteNumber = pitch;
 34885  0096EC  C060  F03C         	movff	noteOffDrum@pitch,_noteNumber
 34886                           
 34887                           ;midi.c: 148: statusByte = channel | note_off;
 34888  0096F0  0100               	movlb	0	; () banked
 34889  0096F2  5162               	movf	noteOffDrum@channel& (0+255),w,b
 34890  0096F4  0980               	iorlw	128
 34891  0096F6  6E3D               	movwf	_statusByte,c
 34892                           
 34893                           ; BSR set to: 0
 34894                           ;midi.c: 151: sendUSB(statusByte, noteNumber, velocity);
 34895  0096F8  5161               	movf	noteOffDrum@velocity& (0+255),w,b
 34896  0096FA  6EE6               	movwf	postinc1,c
 34897  0096FC  503C               	movf	_noteNumber,w,c
 34898  0096FE  6EE6               	movwf	postinc1,c
 34899  009700  503D               	movf	_statusByte,w,c
 34900  009702  6EE6               	movwf	postinc1,c
 34901  009704  ECDB  F036         	call	_sendUSB	;wreg free
 34902                           
 34903                           ;midi.c: 154: sendOut(statusByte, noteNumber, velocity);
 34904  009708  0100               	movlb	0	; () banked
 34905  00970A  5161               	movf	noteOffDrum@velocity& (0+255),w,b
 34906  00970C  6EE6               	movwf	postinc1,c
 34907  00970E  503C               	movf	_noteNumber,w,c
 34908  009710  6EE6               	movwf	postinc1,c
 34909  009712  503D               	movf	_statusByte,w,c
 34910  009714  6EE6               	movwf	postinc1,c
 34911  009716  EC64  F036         	call	_sendOut	;wreg free
 34912  00971A  0012               	return		;funcret
 34913  00971C                     __end_of_noteOffDrum:
 34914                           	opt stack 0
 34915                           tblptru	equ	0xFF8
 34916                           tblptrh	equ	0xFF7
 34917                           tblptrl	equ	0xFF6
 34918                           tablat	equ	0xFF5
 34919                           prodh	equ	0xFF4
 34920                           prodl	equ	0xFF3
 34921                           intcon	equ	0xFF2
 34922                           intcon2	equ	0xFF1
 34923                           indf0	equ	0xFEF
 34924                           postinc0	equ	0xFEE
 34925                           fsr0h	equ	0xFEA
 34926                           fsr0l	equ	0xFE9
 34927                           wreg	equ	0xFE8
 34928                           postinc1	equ	0xFE6
 34929                           postdec1	equ	0xFE5
 34930                           plusw1	equ	0xFE3
 34931                           fsr1h	equ	0xFE2
 34932                           fsr1l	equ	0xFE1
 34933                           indf2	equ	0xFDF
 34934                           postinc2	equ	0xFDE
 34935                           postdec2	equ	0xFDD
 34936                           plusw2	equ	0xFDB
 34937                           fsr2h	equ	0xFDA
 34938                           fsr2l	equ	0xFD9
 34939                           status	equ	0xFD8
 34940                           
 34941 ;; *************** function _keyboardTranspose *****************
 34942 ;; Defined at:
 34943 ;;		line 28 in file "octave.c"
 34944 ;; Parameters:    Size  Location     Type
 34945 ;;		None
 34946 ;; Auto vars:     Size  Location     Type
 34947 ;;		None
 34948 ;; Return value:  Size  Location     Type
 34949 ;;                  1    wreg      void 
 34950 ;; Registers used:
 34951 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
 34952 ;; Tracked objects:
 34953 ;;		On entry : 0/0
 34954 ;;		On exit  : 0/0
 34955 ;;		Unchanged: 0/0
 34956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34961 ;;Total ram usage:        0 bytes
 34962 ;; Hardware stack levels used:    1
 34963 ;; Hardware stack levels required when called:    8
 34964 ;; This function calls:
 34965 ;;		_key_press_release_note_off
 34966 ;;		_printThisNumber
 34967 ;;		_wait_one_pulse
 34968 ;; This function is called by:
 34969 ;;		_digitalInputs
 34970 ;; This function uses a non-reentrant model
 34971 ;;
 34972                           
 34973                           	psect	text97
 34974  004446                     __ptext97:
 34975                           	opt stack 0
 34976  004446                     _keyboardTranspose:
 34977                           	opt stack 18
 34978                           
 34979                           ;octave.c: 30: static signed char semitone_temp;
 34980                           ;octave.c: 31: static __bit keyPress;
 34981                           ;octave.c: 33: if(button_state_now == (0x08000000 | 0x00000001))
 34982                           
 34983                           ;incstack = 0
 34984  004446  0100               	movlb	0	; () banked
 34985  004448  05D8               	decf	_button_state_now& (0+255),w,b
 34986  00444A  E109               	bnz	l29941
 34987  00444C  0E08               	movlw	8
 34988  00444E  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 34989  004450  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 34990  004452  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 34991  004454  A4D8               	btfss	status,2,c
 34992  004456  D003               	goto	l2812
 34993                           
 34994                           ; BSR set to: 0
 34995                           ;octave.c: 34: {
 34996                           ;octave.c: 35: semitone_temp = -12;
 34997  004458  0EF4               	movlw	244
 34998  00445A  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 34999                           
 35000                           ; BSR set to: 0
 35001                           ;octave.c: 36: keyPress = 1;
 35002  00445C  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35003  00445E                     l2812:
 35004  00445E                     l29941:
 35005                           
 35006                           ; BSR set to: 0
 35007                           ;octave.c: 37: }
 35008                           ;octave.c: 38: if(button_state_now == (0x08000000 | 0x00000002))
 35009  00445E  0E02               	movlw	2
 35010  004460  19D8               	xorwf	_button_state_now& (0+255),w,b
 35011  004462  E109               	bnz	l29947
 35012  004464  0E08               	movlw	8
 35013  004466  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35014  004468  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35015  00446A  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35016  00446C  A4D8               	btfss	status,2,c
 35017  00446E  D003               	goto	l2813
 35018                           
 35019                           ; BSR set to: 0
 35020                           ;octave.c: 39: {
 35021                           ;octave.c: 40: semitone_temp = -11;
 35022  004470  0EF5               	movlw	245
 35023  004472  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35024                           
 35025                           ; BSR set to: 0
 35026                           ;octave.c: 41: keyPress = 1;
 35027  004474  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35028  004476                     l2813:
 35029  004476                     l29947:
 35030                           
 35031                           ; BSR set to: 0
 35032                           ;octave.c: 42: }
 35033                           ;octave.c: 43: if(button_state_now == (0x08000000 | 0x00000004))
 35034  004476  0E04               	movlw	4
 35035  004478  19D8               	xorwf	_button_state_now& (0+255),w,b
 35036  00447A  E109               	bnz	l29953
 35037  00447C  0E08               	movlw	8
 35038  00447E  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35039  004480  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35040  004482  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35041  004484  A4D8               	btfss	status,2,c
 35042  004486  D003               	goto	l2814
 35043                           
 35044                           ; BSR set to: 0
 35045                           ;octave.c: 44: {
 35046                           ;octave.c: 45: semitone_temp = -10;
 35047  004488  0EF6               	movlw	246
 35048  00448A  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35049                           
 35050                           ; BSR set to: 0
 35051                           ;octave.c: 46: keyPress = 1;
 35052  00448C  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35053  00448E                     l2814:
 35054  00448E                     l29953:
 35055                           
 35056                           ; BSR set to: 0
 35057                           ;octave.c: 47: }
 35058                           ;octave.c: 48: if(button_state_now == (0x08000000 | 0x00000008))
 35059  00448E  0E08               	movlw	8
 35060  004490  19D8               	xorwf	_button_state_now& (0+255),w,b
 35061  004492  E109               	bnz	l29959
 35062  004494  0E08               	movlw	8
 35063  004496  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35064  004498  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35065  00449A  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35066  00449C  A4D8               	btfss	status,2,c
 35067  00449E  D003               	goto	l2815
 35068                           
 35069                           ; BSR set to: 0
 35070                           ;octave.c: 49: {
 35071                           ;octave.c: 50: semitone_temp = -9;
 35072  0044A0  0EF7               	movlw	247
 35073  0044A2  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35074                           
 35075                           ; BSR set to: 0
 35076                           ;octave.c: 51: keyPress = 1;
 35077  0044A4  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35078  0044A6                     l2815:
 35079  0044A6                     l29959:
 35080                           
 35081                           ; BSR set to: 0
 35082                           ;octave.c: 52: }
 35083                           ;octave.c: 53: if(button_state_now == (0x08000000 | 0x00000010))
 35084  0044A6  0E10               	movlw	16
 35085  0044A8  19D8               	xorwf	_button_state_now& (0+255),w,b
 35086  0044AA  E109               	bnz	l29965
 35087  0044AC  0E08               	movlw	8
 35088  0044AE  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35089  0044B0  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35090  0044B2  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35091  0044B4  A4D8               	btfss	status,2,c
 35092  0044B6  D003               	goto	l2816
 35093                           
 35094                           ; BSR set to: 0
 35095                           ;octave.c: 54: {
 35096                           ;octave.c: 55: semitone_temp = -8;
 35097  0044B8  0EF8               	movlw	248
 35098  0044BA  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35099                           
 35100                           ; BSR set to: 0
 35101                           ;octave.c: 56: keyPress = 1;
 35102  0044BC  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35103  0044BE                     l2816:
 35104  0044BE                     l29965:
 35105                           
 35106                           ; BSR set to: 0
 35107                           ;octave.c: 57: }
 35108                           ;octave.c: 58: if(button_state_now == (0x08000000 | 0x00000020))
 35109  0044BE  0E20               	movlw	32
 35110  0044C0  19D8               	xorwf	_button_state_now& (0+255),w,b
 35111  0044C2  E109               	bnz	l29971
 35112  0044C4  0E08               	movlw	8
 35113  0044C6  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35114  0044C8  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35115  0044CA  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35116  0044CC  A4D8               	btfss	status,2,c
 35117  0044CE  D003               	goto	l2817
 35118                           
 35119                           ; BSR set to: 0
 35120                           ;octave.c: 59: {
 35121                           ;octave.c: 60: semitone_temp = -7;
 35122  0044D0  0EF9               	movlw	249
 35123  0044D2  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35124                           
 35125                           ; BSR set to: 0
 35126                           ;octave.c: 61: keyPress = 1;
 35127  0044D4  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35128  0044D6                     l2817:
 35129  0044D6                     l29971:
 35130                           
 35131                           ; BSR set to: 0
 35132                           ;octave.c: 62: }
 35133                           ;octave.c: 63: if(button_state_now == (0x08000000 | 0x00000040))
 35134  0044D6  0E40               	movlw	64
 35135  0044D8  19D8               	xorwf	_button_state_now& (0+255),w,b
 35136  0044DA  E109               	bnz	l29977
 35137  0044DC  0E08               	movlw	8
 35138  0044DE  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35139  0044E0  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35140  0044E2  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35141  0044E4  A4D8               	btfss	status,2,c
 35142  0044E6  D003               	goto	l2818
 35143                           
 35144                           ; BSR set to: 0
 35145                           ;octave.c: 64: {
 35146                           ;octave.c: 65: semitone_temp = -6;
 35147  0044E8  0EFA               	movlw	250
 35148  0044EA  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35149                           
 35150                           ; BSR set to: 0
 35151                           ;octave.c: 66: keyPress = 1;
 35152  0044EC  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35153  0044EE                     l2818:
 35154  0044EE                     l29977:
 35155                           
 35156                           ; BSR set to: 0
 35157                           ;octave.c: 67: }
 35158                           ;octave.c: 68: if(button_state_now == (0x08000000 | 0x00000080))
 35159  0044EE  0E80               	movlw	128
 35160  0044F0  19D8               	xorwf	_button_state_now& (0+255),w,b
 35161  0044F2  E109               	bnz	l29983
 35162  0044F4  0E08               	movlw	8
 35163  0044F6  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35164  0044F8  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35165  0044FA  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35166  0044FC  A4D8               	btfss	status,2,c
 35167  0044FE  D003               	goto	l2819
 35168                           
 35169                           ; BSR set to: 0
 35170                           ;octave.c: 69: {
 35171                           ;octave.c: 70: semitone_temp = -5;
 35172  004500  0EFB               	movlw	251
 35173  004502  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35174                           
 35175                           ; BSR set to: 0
 35176                           ;octave.c: 71: keyPress = 1;
 35177  004504  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35178  004506                     l2819:
 35179  004506                     l29983:
 35180                           
 35181                           ; BSR set to: 0
 35182                           ;octave.c: 72: }
 35183                           ;octave.c: 73: if(button_state_now == (0x08000000 | 0x00000100))
 35184  004506  05D9               	decf	(_button_state_now+1)& (0+255),w,b
 35185  004508  E109               	bnz	l29989
 35186  00450A  0E08               	movlw	8
 35187  00450C  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35188  00450E  11D8               	iorwf	_button_state_now& (0+255),w,b
 35189  004510  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35190  004512  A4D8               	btfss	status,2,c
 35191  004514  D003               	goto	l2820
 35192                           
 35193                           ; BSR set to: 0
 35194                           ;octave.c: 74: {
 35195                           ;octave.c: 75: semitone_temp = -4;
 35196  004516  0EFC               	movlw	252
 35197  004518  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35198                           
 35199                           ; BSR set to: 0
 35200                           ;octave.c: 76: keyPress = 1;
 35201  00451A  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35202  00451C                     l2820:
 35203  00451C                     l29989:
 35204                           
 35205                           ; BSR set to: 0
 35206                           ;octave.c: 77: }
 35207                           ;octave.c: 78: if(button_state_now == (0x08000000 | 0x00000200))
 35208  00451C  0E02               	movlw	2
 35209  00451E  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 35210  004520  E109               	bnz	l29995
 35211  004522  0E08               	movlw	8
 35212  004524  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35213  004526  11D8               	iorwf	_button_state_now& (0+255),w,b
 35214  004528  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35215  00452A  A4D8               	btfss	status,2,c
 35216  00452C  D003               	goto	l2821
 35217                           
 35218                           ; BSR set to: 0
 35219                           ;octave.c: 79: {
 35220                           ;octave.c: 80: semitone_temp = -3;
 35221  00452E  0EFD               	movlw	253
 35222  004530  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35223                           
 35224                           ; BSR set to: 0
 35225                           ;octave.c: 81: keyPress = 1;
 35226  004532  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35227  004534                     l2821:
 35228  004534                     l29995:
 35229                           
 35230                           ; BSR set to: 0
 35231                           ;octave.c: 82: }
 35232                           ;octave.c: 83: if(button_state_now == (0x08000000 | 0x00000400))
 35233  004534  0E04               	movlw	4
 35234  004536  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 35235  004538  E109               	bnz	l30001
 35236  00453A  0E08               	movlw	8
 35237  00453C  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35238  00453E  11D8               	iorwf	_button_state_now& (0+255),w,b
 35239  004540  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35240  004542  A4D8               	btfss	status,2,c
 35241  004544  D003               	goto	l2822
 35242                           
 35243                           ; BSR set to: 0
 35244                           ;octave.c: 84: {
 35245                           ;octave.c: 85: semitone_temp = -2;
 35246  004546  0EFE               	movlw	254
 35247  004548  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35248                           
 35249                           ; BSR set to: 0
 35250                           ;octave.c: 86: keyPress = 1;
 35251  00454A  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35252  00454C                     l2822:
 35253  00454C                     l30001:
 35254                           
 35255                           ; BSR set to: 0
 35256                           ;octave.c: 87: }
 35257                           ;octave.c: 88: if(button_state_now == (0x08000000 | 0x00000800))
 35258  00454C  0E08               	movlw	8
 35259  00454E  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 35260  004550  E108               	bnz	l30005
 35261  004552  0E08               	movlw	8
 35262  004554  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35263  004556  11D8               	iorwf	_button_state_now& (0+255),w,b
 35264  004558  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35265  00455A  A4D8               	btfss	status,2,c
 35266  00455C  D002               	goto	l2823
 35267                           
 35268                           ; BSR set to: 0
 35269                           ;octave.c: 89: {
 35270                           ;octave.c: 90: semitone_temp = -1;
 35271  00455E  69EA               	setf	keyboardTranspose@semitone_temp& (0+255),b
 35272                           
 35273                           ;octave.c: 91: keyPress = 1;
 35274  004560  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35275  004562                     l2823:
 35276  004562                     l30005:
 35277                           
 35278                           ; BSR set to: 0
 35279                           ;octave.c: 92: }
 35280                           ;octave.c: 93: if(button_state_now == (0x08000000 | 0x00001000))
 35281  004562  0E10               	movlw	16
 35282  004564  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 35283  004566  E109               	bnz	l30011
 35284  004568  0E08               	movlw	8
 35285  00456A  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35286  00456C  11D8               	iorwf	_button_state_now& (0+255),w,b
 35287  00456E  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35288  004570  A4D8               	btfss	status,2,c
 35289  004572  D003               	goto	l2824
 35290                           
 35291                           ; BSR set to: 0
 35292                           ;octave.c: 94: {
 35293                           ;octave.c: 95: semitone_temp = 0;
 35294  004574  0E00               	movlw	0
 35295  004576  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35296                           
 35297                           ; BSR set to: 0
 35298                           ;octave.c: 96: keyPress = 1;
 35299  004578  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35300  00457A                     l2824:
 35301  00457A                     l30011:
 35302                           
 35303                           ; BSR set to: 0
 35304                           ;octave.c: 97: }
 35305                           ;octave.c: 98: if(button_state_now == (0x08000000 | 0x00002000))
 35306  00457A  0E20               	movlw	32
 35307  00457C  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 35308  00457E  E109               	bnz	l30017
 35309  004580  0E08               	movlw	8
 35310  004582  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35311  004584  11D8               	iorwf	_button_state_now& (0+255),w,b
 35312  004586  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35313  004588  A4D8               	btfss	status,2,c
 35314  00458A  D003               	goto	l2825
 35315                           
 35316                           ; BSR set to: 0
 35317                           ;octave.c: 99: {
 35318                           ;octave.c: 100: semitone_temp = 1;
 35319  00458C  0E01               	movlw	1
 35320  00458E  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35321                           
 35322                           ; BSR set to: 0
 35323                           ;octave.c: 101: keyPress = 1;
 35324  004590  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35325  004592                     l2825:
 35326  004592                     l30017:
 35327                           
 35328                           ; BSR set to: 0
 35329                           ;octave.c: 102: }
 35330                           ;octave.c: 103: if(button_state_now == (0x08000000 | 0x00004000))
 35331  004592  0E40               	movlw	64
 35332  004594  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 35333  004596  E109               	bnz	l30023
 35334  004598  0E08               	movlw	8
 35335  00459A  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35336  00459C  11D8               	iorwf	_button_state_now& (0+255),w,b
 35337  00459E  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35338  0045A0  A4D8               	btfss	status,2,c
 35339  0045A2  D003               	goto	l2826
 35340                           
 35341                           ; BSR set to: 0
 35342                           ;octave.c: 104: {
 35343                           ;octave.c: 105: semitone_temp = 2;
 35344  0045A4  0E02               	movlw	2
 35345  0045A6  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35346                           
 35347                           ; BSR set to: 0
 35348                           ;octave.c: 106: keyPress = 1;
 35349  0045A8  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35350  0045AA                     l2826:
 35351  0045AA                     l30023:
 35352                           
 35353                           ; BSR set to: 0
 35354                           ;octave.c: 107: }
 35355                           ;octave.c: 108: if(button_state_now == (0x08000000 | 0x00008000))
 35356  0045AA  0E80               	movlw	128
 35357  0045AC  19D9               	xorwf	(_button_state_now+1)& (0+255),w,b
 35358  0045AE  E109               	bnz	l30029
 35359  0045B0  0E08               	movlw	8
 35360  0045B2  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35361  0045B4  11D8               	iorwf	_button_state_now& (0+255),w,b
 35362  0045B6  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35363  0045B8  A4D8               	btfss	status,2,c
 35364  0045BA  D003               	goto	l2827
 35365                           
 35366                           ; BSR set to: 0
 35367                           ;octave.c: 109: {
 35368                           ;octave.c: 110: semitone_temp = 3;
 35369  0045BC  0E03               	movlw	3
 35370  0045BE  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35371                           
 35372                           ; BSR set to: 0
 35373                           ;octave.c: 111: keyPress = 1;
 35374  0045C0  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35375  0045C2                     l2827:
 35376  0045C2                     l30029:
 35377                           
 35378                           ; BSR set to: 0
 35379                           ;octave.c: 112: }
 35380                           ;octave.c: 113: if(button_state_now == (0x08000000 | 0x00010000))
 35381  0045C2  05DA               	decf	(_button_state_now+2)& (0+255),w,b
 35382  0045C4  E109               	bnz	l30035
 35383  0045C6  0E08               	movlw	8
 35384  0045C8  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35385  0045CA  11D8               	iorwf	_button_state_now& (0+255),w,b
 35386  0045CC  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35387  0045CE  A4D8               	btfss	status,2,c
 35388  0045D0  D003               	goto	l2828
 35389                           
 35390                           ; BSR set to: 0
 35391                           ;octave.c: 114: {
 35392                           ;octave.c: 115: semitone_temp = 4;
 35393  0045D2  0E04               	movlw	4
 35394  0045D4  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35395                           
 35396                           ; BSR set to: 0
 35397                           ;octave.c: 116: keyPress = 1;
 35398  0045D6  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35399  0045D8                     l2828:
 35400  0045D8                     l30035:
 35401                           
 35402                           ; BSR set to: 0
 35403                           ;octave.c: 117: }
 35404                           ;octave.c: 118: if(button_state_now == (0x08000000 | 0x00020000))
 35405  0045D8  0E02               	movlw	2
 35406  0045DA  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 35407  0045DC  E109               	bnz	l30041
 35408  0045DE  0E08               	movlw	8
 35409  0045E0  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35410  0045E2  11D8               	iorwf	_button_state_now& (0+255),w,b
 35411  0045E4  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35412  0045E6  A4D8               	btfss	status,2,c
 35413  0045E8  D003               	goto	l2829
 35414                           
 35415                           ; BSR set to: 0
 35416                           ;octave.c: 119: {
 35417                           ;octave.c: 120: semitone_temp = 5;
 35418  0045EA  0E05               	movlw	5
 35419  0045EC  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35420                           
 35421                           ; BSR set to: 0
 35422                           ;octave.c: 121: keyPress = 1;
 35423  0045EE  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35424  0045F0                     l2829:
 35425  0045F0                     l30041:
 35426                           
 35427                           ; BSR set to: 0
 35428                           ;octave.c: 122: }
 35429                           ;octave.c: 123: if(button_state_now == (0x08000000 | 0x00040000))
 35430  0045F0  0E04               	movlw	4
 35431  0045F2  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 35432  0045F4  E109               	bnz	l30047
 35433  0045F6  0E08               	movlw	8
 35434  0045F8  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35435  0045FA  11D8               	iorwf	_button_state_now& (0+255),w,b
 35436  0045FC  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35437  0045FE  A4D8               	btfss	status,2,c
 35438  004600  D003               	goto	l2830
 35439                           
 35440                           ; BSR set to: 0
 35441                           ;octave.c: 124: {
 35442                           ;octave.c: 125: semitone_temp = 6;
 35443  004602  0E06               	movlw	6
 35444  004604  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35445                           
 35446                           ; BSR set to: 0
 35447                           ;octave.c: 126: keyPress = 1;
 35448  004606  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35449  004608                     l2830:
 35450  004608                     l30047:
 35451                           
 35452                           ; BSR set to: 0
 35453                           ;octave.c: 127: }
 35454                           ;octave.c: 128: if(button_state_now == (0x08000000 | 0x00080000))
 35455  004608  0E08               	movlw	8
 35456  00460A  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 35457  00460C  E109               	bnz	l30053
 35458  00460E  0E08               	movlw	8
 35459  004610  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35460  004612  11D8               	iorwf	_button_state_now& (0+255),w,b
 35461  004614  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35462  004616  A4D8               	btfss	status,2,c
 35463  004618  D003               	goto	l2831
 35464                           
 35465                           ; BSR set to: 0
 35466                           ;octave.c: 129: {
 35467                           ;octave.c: 130: semitone_temp = 7;
 35468  00461A  0E07               	movlw	7
 35469  00461C  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35470                           
 35471                           ; BSR set to: 0
 35472                           ;octave.c: 131: keyPress = 1;
 35473  00461E  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35474  004620                     l2831:
 35475  004620                     l30053:
 35476                           
 35477                           ; BSR set to: 0
 35478                           ;octave.c: 132: }
 35479                           ;octave.c: 133: if(button_state_now == (0x08000000 | 0x00100000))
 35480  004620  0E10               	movlw	16
 35481  004622  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 35482  004624  E109               	bnz	l30059
 35483  004626  0E08               	movlw	8
 35484  004628  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35485  00462A  11D8               	iorwf	_button_state_now& (0+255),w,b
 35486  00462C  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35487  00462E  A4D8               	btfss	status,2,c
 35488  004630  D003               	goto	l2832
 35489                           
 35490                           ; BSR set to: 0
 35491                           ;octave.c: 134: {
 35492                           ;octave.c: 135: semitone_temp = 8;
 35493  004632  0E08               	movlw	8
 35494  004634  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35495                           
 35496                           ; BSR set to: 0
 35497                           ;octave.c: 136: keyPress = 1;
 35498  004636  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35499  004638                     l2832:
 35500  004638                     l30059:
 35501                           
 35502                           ; BSR set to: 0
 35503                           ;octave.c: 137: }
 35504                           ;octave.c: 138: if(button_state_now == (0x08000000 | 0x00200000))
 35505  004638  0E20               	movlw	32
 35506  00463A  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 35507  00463C  E109               	bnz	l30065
 35508  00463E  0E08               	movlw	8
 35509  004640  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35510  004642  11D8               	iorwf	_button_state_now& (0+255),w,b
 35511  004644  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35512  004646  A4D8               	btfss	status,2,c
 35513  004648  D003               	goto	l2833
 35514                           
 35515                           ; BSR set to: 0
 35516                           ;octave.c: 139: {
 35517                           ;octave.c: 140: semitone_temp = 9;
 35518  00464A  0E09               	movlw	9
 35519  00464C  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35520                           
 35521                           ; BSR set to: 0
 35522                           ;octave.c: 141: keyPress = 1;
 35523  00464E  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35524  004650                     l2833:
 35525  004650                     l30065:
 35526                           
 35527                           ; BSR set to: 0
 35528                           ;octave.c: 142: }
 35529                           ;octave.c: 143: if(button_state_now == (0x08000000 | 0x00400000))
 35530  004650  0E40               	movlw	64
 35531  004652  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 35532  004654  E109               	bnz	l30071
 35533  004656  0E08               	movlw	8
 35534  004658  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35535  00465A  11D8               	iorwf	_button_state_now& (0+255),w,b
 35536  00465C  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35537  00465E  A4D8               	btfss	status,2,c
 35538  004660  D003               	goto	l2834
 35539                           
 35540                           ; BSR set to: 0
 35541                           ;octave.c: 144: {
 35542                           ;octave.c: 145: semitone_temp = 10;
 35543  004662  0E0A               	movlw	10
 35544  004664  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35545                           
 35546                           ; BSR set to: 0
 35547                           ;octave.c: 146: keyPress = 1;
 35548  004666  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35549  004668                     l2834:
 35550  004668                     l30071:
 35551                           
 35552                           ; BSR set to: 0
 35553                           ;octave.c: 147: }
 35554                           ;octave.c: 148: if(button_state_now == (0x08000000 | 0x00800000))
 35555  004668  0E80               	movlw	128
 35556  00466A  19DA               	xorwf	(_button_state_now+2)& (0+255),w,b
 35557  00466C  E109               	bnz	l30077
 35558  00466E  0E08               	movlw	8
 35559  004670  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35560  004672  11D8               	iorwf	_button_state_now& (0+255),w,b
 35561  004674  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35562  004676  A4D8               	btfss	status,2,c
 35563  004678  D003               	goto	l2835
 35564                           
 35565                           ; BSR set to: 0
 35566                           ;octave.c: 149: {
 35567                           ;octave.c: 150: semitone_temp = 11;
 35568  00467A  0E0B               	movlw	11
 35569  00467C  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35570                           
 35571                           ; BSR set to: 0
 35572                           ;octave.c: 151: keyPress = 1;
 35573  00467E  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35574  004680                     l2835:
 35575  004680                     l30077:
 35576                           
 35577                           ; BSR set to: 0
 35578                           ;octave.c: 152: }
 35579                           ;octave.c: 153: if(button_state_now == (0x08000000 | 0x01000000))
 35580  004680  0E09               	movlw	9
 35581  004682  19DB               	xorwf	(_button_state_now+3)& (0+255),w,b
 35582  004684  11D8               	iorwf	_button_state_now& (0+255),w,b
 35583  004686  11D9               	iorwf	(_button_state_now+1)& (0+255),w,b
 35584  004688  11DA               	iorwf	(_button_state_now+2)& (0+255),w,b
 35585  00468A  A4D8               	btfss	status,2,c
 35586  00468C  D003               	goto	l2836
 35587                           
 35588                           ; BSR set to: 0
 35589                           ;octave.c: 154: {
 35590                           ;octave.c: 155: semitone_temp = 12;
 35591  00468E  0E0C               	movlw	12
 35592  004690  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35593                           
 35594                           ; BSR set to: 0
 35595                           ;octave.c: 156: keyPress = 1;
 35596  004692  8401               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35597  004694                     l2836:
 35598                           
 35599                           ; BSR set to: 0
 35600                           ;octave.c: 157: }
 35601                           ;octave.c: 159: if(keyPress == 1) {
 35602                           
 35603                           ; BSR set to: 0
 35604  004694  A401               	btfss	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35605  004696  0012               	return	
 35606                           
 35607                           ; BSR set to: 0
 35608                           ;octave.c: 162: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 35609  004698  A004               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 35610  00469A  D00E               	goto	l2838
 35611                           
 35612                           ; BSR set to: 0
 35613  00469C  502F               	movf	_NUM_NOTES_PRESSED,w,c
 35614  00469E  B4D8               	btfsc	status,2,c
 35615  0046A0  D00B               	goto	l2838
 35616                           
 35617                           ; BSR set to: 0
 35618                           ;octave.c: 165: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 35619  0046A2  0E00               	movlw	0
 35620  0046A4  BE02               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 35621  0046A6  0E01               	movlw	1
 35622  0046A8  ECED  F04B         	call	_wait_one_pulse
 35623                           
 35624                           ;octave.c: 169: if(note_off_was_sent == 0) {key_press_release_note_off();}
 35625  0046AC  A002               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 35626  0046AE  EC8B  F02E         	call	_key_press_release_note_off	;wreg free
 35627                           
 35628                           ;octave.c: 172: suppress_note_off = 1;
 35629  0046B2  8602               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 35630                           
 35631                           ;octave.c: 174: flag1 = 1;
 35632  0046B4  8E01               	bsf	_flag1/(0+8),_flag1& (0+7),c
 35633                           
 35634                           ;octave.c: 176: flag2 = 1;
 35635  0046B6  8C01               	bsf	_flag2/(0+8),_flag2& (0+7),c
 35636  0046B8                     l2838:
 35637                           
 35638                           ;octave.c: 177: }
 35639                           ;octave.c: 180: if (semitone_temp > 12) {semitone_temp = 12;}
 35640  0046B8  0100               	movlb	0	; () banked
 35641  0046BA  51EA               	movf	keyboardTranspose@semitone_temp& (0+255),w,b
 35642  0046BC  0A80               	xorlw	128
 35643  0046BE  0F73               	addlw	-141
 35644  0046C0  A0D8               	btfss	status,0,c
 35645  0046C2  D002               	goto	l2840
 35646                           
 35647                           ; BSR set to: 0
 35648  0046C4  0E0C               	movlw	12
 35649  0046C6  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35650  0046C8                     l2840:
 35651                           
 35652                           ; BSR set to: 0
 35653                           ;octave.c: 181: if (semitone_temp < -12) {semitone_temp = -12;}
 35654                           
 35655                           ; BSR set to: 0
 35656  0046C8  51EA               	movf	keyboardTranspose@semitone_temp& (0+255),w,b
 35657  0046CA  0A80               	xorlw	128
 35658  0046CC  0F8C               	addlw	140
 35659  0046CE  B0D8               	btfsc	status,0,c
 35660  0046D0  D002               	goto	l2841
 35661                           
 35662                           ; BSR set to: 0
 35663  0046D2  0EF4               	movlw	244
 35664  0046D4  6FEA               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35665  0046D6                     l2841:
 35666                           
 35667                           ; BSR set to: 0
 35668                           ;octave.c: 182: semitone = semitone_temp;
 35669                           
 35670                           ; BSR set to: 0
 35671  0046D6  C0EA  F03B         	movff	keyboardTranspose@semitone_temp,_semitone
 35672                           
 35673                           ; BSR set to: 0
 35674                           ;octave.c: 183: printThisNumber(semitone);
 35675  0046DA  503B               	movf	_semitone,w,c
 35676  0046DC  6F60               	movwf	printThisNumber@n& (0+255),b
 35677  0046DE  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 35678  0046E0  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 35679  0046E2  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 35680  0046E4  ECCE  F04C         	call	_printThisNumber	;wreg free
 35681                           
 35682                           ;octave.c: 184: keyPress = 0;
 35683  0046E8  9401               	bcf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35684  0046EA  0012               	return	
 35685  0046EC                     __end_of_keyboardTranspose:
 35686                           	opt stack 0
 35687                           tblptru	equ	0xFF8
 35688                           tblptrh	equ	0xFF7
 35689                           tblptrl	equ	0xFF6
 35690                           tablat	equ	0xFF5
 35691                           prodh	equ	0xFF4
 35692                           prodl	equ	0xFF3
 35693                           intcon	equ	0xFF2
 35694                           intcon2	equ	0xFF1
 35695                           indf0	equ	0xFEF
 35696                           postinc0	equ	0xFEE
 35697                           fsr0h	equ	0xFEA
 35698                           fsr0l	equ	0xFE9
 35699                           wreg	equ	0xFE8
 35700                           postinc1	equ	0xFE6
 35701                           postdec1	equ	0xFE5
 35702                           plusw1	equ	0xFE3
 35703                           fsr1h	equ	0xFE2
 35704                           fsr1l	equ	0xFE1
 35705                           indf2	equ	0xFDF
 35706                           postinc2	equ	0xFDE
 35707                           postdec2	equ	0xFDD
 35708                           plusw2	equ	0xFDB
 35709                           fsr2h	equ	0xFDA
 35710                           fsr2l	equ	0xFD9
 35711                           status	equ	0xFD8
 35712                           
 35713 ;; *************** function _wait_one_pulse *****************
 35714 ;; Defined at:
 35715 ;;		line 20 in file "arpeggio.c"
 35716 ;; Parameters:    Size  Location     Type
 35717 ;;  mode            1    wreg     unsigned char 
 35718 ;; Auto vars:     Size  Location     Type
 35719 ;;  mode            1    0[BANK0 ] unsigned char 
 35720 ;; Return value:  Size  Location     Type
 35721 ;;                  1    wreg      void 
 35722 ;; Registers used:
 35723 ;;		wreg, status,2
 35724 ;; Tracked objects:
 35725 ;;		On entry : 0/0
 35726 ;;		On exit  : 0/0
 35727 ;;		Unchanged: 0/0
 35728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35730 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35732 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35733 ;;Total ram usage:        1 bytes
 35734 ;; Hardware stack levels used:    1
 35735 ;; Hardware stack levels required when called:    5
 35736 ;; This function calls:
 35737 ;;		Nothing
 35738 ;; This function is called by:
 35739 ;;		_playThisNotePentatonic
 35740 ;;		_playTriad
 35741 ;;		_playSeventh
 35742 ;;		_playThisNote
 35743 ;;		_playThisNote8
 35744 ;;		_playDiatonicTriadMajor
 35745 ;;		_playDiatonicSeventhMajor
 35746 ;;		_playDiatonicTriadMinor
 35747 ;;		_playDiatonicSeventhMinor
 35748 ;;		_keyboardTranspose
 35749 ;;		_processOctave
 35750 ;; This function uses a non-reentrant model
 35751 ;;
 35752                           
 35753                           	psect	text98
 35754  0097DA                     __ptext98:
 35755                           	opt stack 0
 35756  0097DA                     _wait_one_pulse:
 35757                           	opt stack 20
 35758                           
 35759                           ;incstack = 0
 35760                           ;wait_one_pulse@mode stored from wreg
 35761  0097DA  0100               	movlb	0	; () banked
 35762  0097DC  6F60               	movwf	wait_one_pulse@mode& (0+255),b
 35763                           
 35764                           ;arpeggio.c: 22: lastNoteMode = mode;
 35765  0097DE  0100               	movlb	0	; () banked
 35766  0097E0  A160               	btfss	wait_one_pulse@mode& (0+255),0,b
 35767  0097E2  D002               	goto	u45220
 35768  0097E4  8403               	bsf	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 35769  0097E6  D001               	goto	u45235
 35770  0097E8                     u45220:
 35771  0097E8  9403               	bcf	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 35772  0097EA                     u45235:
 35773                           
 35774                           ;arpeggio.c: 25: if(lastNoteMode == 0) {
 35775  0097EA  B403               	btfsc	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 35776  0097EC  D004               	goto	l5403
 35777                           
 35778                           ;arpeggio.c: 26: finishLastNote = 0;
 35779  0097EE  9A02               	bcf	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 35780                           
 35781                           ;arpeggio.c: 27: TIMER_OVERFLOWS = 0;
 35782  0097F0  0E00               	movlw	0
 35783  0097F2  6E2E               	movwf	_TIMER_OVERFLOWS,c
 35784                           
 35785                           ;arpeggio.c: 28: return;
 35786  0097F4  0012               	return	
 35787  0097F6                     l5403:
 35788                           
 35789                           ;arpeggio.c: 29: }
 35790                           ;arpeggio.c: 32: if(lastNoteMode == 1) {
 35791  0097F6  A403               	btfss	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 35792  0097F8  0012               	return	
 35793                           
 35794                           ;arpeggio.c: 33: finishLastNote = 1;
 35795  0097FA  8A02               	bsf	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 35796                           
 35797                           ;arpeggio.c: 34: TMR0ON = 1;
 35798  0097FC  8ED5               	bsf	4053,7,c	;volatile
 35799  0097FE  AA02               	btfss	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 35800  009800  0012               	return	
 35801  009802  D7FD               	goto	l5407
 35802  009804                     __end_of_wait_one_pulse:
 35803                           	opt stack 0
 35804                           tblptru	equ	0xFF8
 35805                           tblptrh	equ	0xFF7
 35806                           tblptrl	equ	0xFF6
 35807                           tablat	equ	0xFF5
 35808                           prodh	equ	0xFF4
 35809                           prodl	equ	0xFF3
 35810                           intcon	equ	0xFF2
 35811                           intcon2	equ	0xFF1
 35812                           indf0	equ	0xFEF
 35813                           postinc0	equ	0xFEE
 35814                           fsr0h	equ	0xFEA
 35815                           fsr0l	equ	0xFE9
 35816                           wreg	equ	0xFE8
 35817                           postinc1	equ	0xFE6
 35818                           postdec1	equ	0xFE5
 35819                           plusw1	equ	0xFE3
 35820                           fsr1h	equ	0xFE2
 35821                           fsr1l	equ	0xFE1
 35822                           indf2	equ	0xFDF
 35823                           postinc2	equ	0xFDE
 35824                           postdec2	equ	0xFDD
 35825                           plusw2	equ	0xFDB
 35826                           fsr2h	equ	0xFDA
 35827                           fsr2l	equ	0xFD9
 35828                           status	equ	0xFD8
 35829                           
 35830 ;; *************** function _printThisNumber *****************
 35831 ;; Defined at:
 35832 ;;		line 21 in file "octave.c"
 35833 ;; Parameters:    Size  Location     Type
 35834 ;;  n               2    0[BANK0 ] int 
 35835 ;; Auto vars:     Size  Location     Type
 35836 ;;		None
 35837 ;; Return value:  Size  Location     Type
 35838 ;;                  1    wreg      void 
 35839 ;; Registers used:
 35840 ;;		wreg, status,2
 35841 ;; Tracked objects:
 35842 ;;		On entry : 0/0
 35843 ;;		On exit  : 0/0
 35844 ;;		Unchanged: 0/0
 35845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35846 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35849 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35850 ;;Total ram usage:        2 bytes
 35851 ;; Hardware stack levels used:    1
 35852 ;; Hardware stack levels required when called:    5
 35853 ;; This function calls:
 35854 ;;		Nothing
 35855 ;; This function is called by:
 35856 ;;		_keyboardTranspose
 35857 ;;		_processOctave
 35858 ;; This function uses a non-reentrant model
 35859 ;;
 35860                           
 35861                           	psect	text99
 35862  00999C                     __ptext99:
 35863                           	opt stack 0
 35864  00999C                     _printThisNumber:
 35865                           	opt stack 20
 35866                           
 35867                           ;octave.c: 22: DISPLAY_MODE = 0;
 35868                           
 35869                           ;incstack = 0
 35870  00999C  0E00               	movlw	0
 35871  00999E  0100               	movlb	0	; () banked
 35872  0099A0  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 35873                           
 35874                           ;octave.c: 23: DIGIT_MODE = 0;
 35875  0099A2  0E00               	movlw	0
 35876  0099A4  6E3A               	movwf	_DIGIT_MODE,c
 35877                           
 35878                           ; BSR set to: 0
 35879                           ;octave.c: 24: number_to_display = n;
 35880  0099A6  C060  F04B         	movff	printThisNumber@n,_number_to_display
 35881  0099AA  C061  F04C         	movff	printThisNumber@n+1,_number_to_display+1
 35882                           
 35883                           ; BSR set to: 0
 35884  0099AE  0012               	return		;funcret
 35885  0099B0                     __end_of_printThisNumber:
 35886                           	opt stack 0
 35887                           tblptru	equ	0xFF8
 35888                           tblptrh	equ	0xFF7
 35889                           tblptrl	equ	0xFF6
 35890                           tablat	equ	0xFF5
 35891                           prodh	equ	0xFF4
 35892                           prodl	equ	0xFF3
 35893                           intcon	equ	0xFF2
 35894                           intcon2	equ	0xFF1
 35895                           indf0	equ	0xFEF
 35896                           postinc0	equ	0xFEE
 35897                           fsr0h	equ	0xFEA
 35898                           fsr0l	equ	0xFE9
 35899                           wreg	equ	0xFE8
 35900                           postinc1	equ	0xFE6
 35901                           postdec1	equ	0xFE5
 35902                           plusw1	equ	0xFE3
 35903                           fsr1h	equ	0xFE2
 35904                           fsr1l	equ	0xFE1
 35905                           indf2	equ	0xFDF
 35906                           postinc2	equ	0xFDE
 35907                           postdec2	equ	0xFDD
 35908                           plusw2	equ	0xFDB
 35909                           fsr2h	equ	0xFDA
 35910                           fsr2l	equ	0xFD9
 35911                           status	equ	0xFD8
 35912                           
 35913 ;; *************** function _buttonInputsSerial *****************
 35914 ;; Defined at:
 35915 ;;		line 307 in file "main.c"
 35916 ;; Parameters:    Size  Location     Type
 35917 ;;		None
 35918 ;; Auto vars:     Size  Location     Type
 35919 ;;  i               1    5[BANK0 ] unsigned char 
 35920 ;;  i               1    4[BANK0 ] unsigned char 
 35921 ;; Return value:  Size  Location     Type
 35922 ;;                  1    wreg      void 
 35923 ;; Registers used:
 35924 ;;		wreg, status,2, status,0, cstack
 35925 ;; Tracked objects:
 35926 ;;		On entry : 0/0
 35927 ;;		On exit  : 0/0
 35928 ;;		Unchanged: 0/0
 35929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35931 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35932 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35933 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35934 ;;Total ram usage:        6 bytes
 35935 ;; Hardware stack levels used:    1
 35936 ;; Hardware stack levels required when called:    6
 35937 ;; This function calls:
 35938 ;;		_clock
 35939 ;;		_load
 35940 ;; This function is called by:
 35941 ;;		_digitalInputs
 35942 ;; This function uses a non-reentrant model
 35943 ;;
 35944                           
 35945                           	psect	text100
 35946  0086F0                     __ptext100:
 35947                           	opt stack 0
 35948  0086F0                     _buttonInputsSerial:
 35949                           	opt stack 20
 35950                           
 35951                           ;main.c: 309: button_state_now = 0;
 35952                           
 35953                           ; BSR set to: 0
 35954                           ;incstack = 0
 35955  0086F0  0E00               	movlw	0
 35956  0086F2  0100               	movlb	0	; () banked
 35957  0086F4  6FD8               	movwf	_button_state_now& (0+255),b
 35958  0086F6  0E00               	movlw	0
 35959  0086F8  6FD9               	movwf	(_button_state_now+1)& (0+255),b
 35960  0086FA  0E00               	movlw	0
 35961  0086FC  6FDA               	movwf	(_button_state_now+2)& (0+255),b
 35962  0086FE  0E00               	movlw	0
 35963  008700  6FDB               	movwf	(_button_state_now+3)& (0+255),b
 35964                           
 35965                           ;main.c: 310: drum_button_state_now = 0;
 35966  008702  0E00               	movlw	0
 35967  008704  6E39               	movwf	_drum_button_state_now,c
 35968                           
 35969                           ; BSR set to: 0
 35970                           ;main.c: 311: load();
 35971  008706  ECF4  F04C         	call	_load	;wreg free
 35972                           
 35973                           ;main.c: 314: for (unsigned char i = 0;i<12;i++){
 35974  00870A  0E00               	movlw	0
 35975  00870C  0100               	movlb	0	; () banked
 35976  00870E  6F64               	movwf	buttonInputsSerial@i& (0+255),b
 35977  008710                     l30397:
 35978                           
 35979                           ; BSR set to: 0
 35980  008710  0E0B               	movlw	11
 35981  008712  6564               	cpfsgt	buttonInputsSerial@i& (0+255),b
 35982  008714  D001               	goto	l4974
 35983  008716  D009               	goto	u54810
 35984  008718                     l4974:
 35985                           
 35986                           ; BSR set to: 0
 35987                           ;main.c: 315: drum_button_state_now = (drum_button_state_now << 1) | (RC4);
 35988                           
 35989                           ; BSR set to: 0
 35990  008718  90D8               	bcf	status,0,c
 35991  00871A  B882               	btfsc	3970,4,c	;volatile
 35992  00871C  80D8               	bsf	status,0,c
 35993  00871E  3639               	rlcf	_drum_button_state_now,f,c
 35994                           
 35995                           ; BSR set to: 0
 35996                           ;main.c: 316: clock();
 35997  008720  ECF7  F04C         	call	_clock	;wreg free
 35998  008724  0100               	movlb	0	; () banked
 35999  008726  2B64               	incf	buttonInputsSerial@i& (0+255),f,b
 36000  008728  D7F3               	goto	l30397
 36001  00872A                     u54810:
 36002                           
 36003                           ; BSR set to: 0
 36004                           ;main.c: 317: }
 36005                           ;main.c: 320: for (unsigned char i = 0;i<28;i++){
 36006                           
 36007                           ; BSR set to: 0
 36008  00872A  0E00               	movlw	0
 36009  00872C  6F65               	movwf	buttonInputsSerial@i_4479& (0+255),b
 36010  00872E                     l30411:
 36011                           
 36012                           ; BSR set to: 0
 36013  00872E  0E1B               	movlw	27
 36014  008730  6565               	cpfsgt	buttonInputsSerial@i_4479& (0+255),b
 36015  008732  D001               	goto	l4976
 36016  008734  0012               	return	
 36017  008736                     l4976:
 36018                           
 36019                           ; BSR set to: 0
 36020                           ;main.c: 321: button_state_now = (button_state_now << 1) | (RC4);
 36021                           
 36022                           ; BSR set to: 0
 36023  008736  90D8               	bcf	status,0,c
 36024  008738  35D8               	rlcf	_button_state_now& (0+255),w,b
 36025  00873A  6F60               	movwf	??_buttonInputsSerial& (0+255),b
 36026  00873C  35D9               	rlcf	(_button_state_now+1)& (0+255),w,b
 36027  00873E  6F61               	movwf	(??_buttonInputsSerial+1)& (0+255),b
 36028  008740  35DA               	rlcf	(_button_state_now+2)& (0+255),w,b
 36029  008742  6F62               	movwf	(??_buttonInputsSerial+2)& (0+255),b
 36030  008744  35DB               	rlcf	(_button_state_now+3)& (0+255),w,b
 36031  008746  6F63               	movwf	(??_buttonInputsSerial+3)& (0+255),b
 36032  008748  A882               	btfss	3970,4,c	;volatile
 36033  00874A  D002               	goto	u54830
 36034  00874C  0E01               	movlw	1
 36035  00874E  D001               	goto	u54840
 36036  008750                     u54830:
 36037  008750  0E00               	movlw	0
 36038  008752                     u54840:
 36039  008752  1160               	iorwf	??_buttonInputsSerial& (0+255),w,b
 36040  008754  6FD8               	movwf	_button_state_now& (0+255),b
 36041  008756  5161               	movf	(??_buttonInputsSerial+1)& (0+255),w,b
 36042  008758  6FD9               	movwf	(_button_state_now+1)& (0+255),b
 36043  00875A  5162               	movf	(??_buttonInputsSerial+2)& (0+255),w,b
 36044  00875C  6FDA               	movwf	(_button_state_now+2)& (0+255),b
 36045  00875E  5163               	movf	(??_buttonInputsSerial+3)& (0+255),w,b
 36046  008760  6FDB               	movwf	(_button_state_now+3)& (0+255),b
 36047                           
 36048                           ; BSR set to: 0
 36049                           ;main.c: 322: clock();
 36050  008762  ECF7  F04C         	call	_clock	;wreg free
 36051  008766  0100               	movlb	0	; () banked
 36052  008768  2B65               	incf	buttonInputsSerial@i_4479& (0+255),f,b
 36053  00876A  D7E1               	goto	l30411
 36054  00876C                     __end_of_buttonInputsSerial:
 36055                           	opt stack 0
 36056                           tblptru	equ	0xFF8
 36057                           tblptrh	equ	0xFF7
 36058                           tblptrl	equ	0xFF6
 36059                           tablat	equ	0xFF5
 36060                           prodh	equ	0xFF4
 36061                           prodl	equ	0xFF3
 36062                           intcon	equ	0xFF2
 36063                           intcon2	equ	0xFF1
 36064                           indf0	equ	0xFEF
 36065                           postinc0	equ	0xFEE
 36066                           fsr0h	equ	0xFEA
 36067                           fsr0l	equ	0xFE9
 36068                           wreg	equ	0xFE8
 36069                           postinc1	equ	0xFE6
 36070                           postdec1	equ	0xFE5
 36071                           plusw1	equ	0xFE3
 36072                           fsr1h	equ	0xFE2
 36073                           fsr1l	equ	0xFE1
 36074                           indf2	equ	0xFDF
 36075                           postinc2	equ	0xFDE
 36076                           postdec2	equ	0xFDD
 36077                           plusw2	equ	0xFDB
 36078                           fsr2h	equ	0xFDA
 36079                           fsr2l	equ	0xFD9
 36080                           status	equ	0xFD8
 36081                           
 36082 ;; *************** function _load *****************
 36083 ;; Defined at:
 36084 ;;		line 294 in file "main.c"
 36085 ;; Parameters:    Size  Location     Type
 36086 ;;		None
 36087 ;; Auto vars:     Size  Location     Type
 36088 ;;		None
 36089 ;; Return value:  Size  Location     Type
 36090 ;;                  1    wreg      void 
 36091 ;; Registers used:
 36092 ;;		None
 36093 ;; Tracked objects:
 36094 ;;		On entry : 0/0
 36095 ;;		On exit  : 0/0
 36096 ;;		Unchanged: 0/0
 36097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 36098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36102 ;;Total ram usage:        0 bytes
 36103 ;; Hardware stack levels used:    1
 36104 ;; Hardware stack levels required when called:    5
 36105 ;; This function calls:
 36106 ;;		Nothing
 36107 ;; This function is called by:
 36108 ;;		_buttonInputsSerial
 36109 ;; This function uses a non-reentrant model
 36110 ;;
 36111                           
 36112                           	psect	text101
 36113  0099E8                     __ptext101:
 36114                           	opt stack 0
 36115  0099E8                     _load:
 36116                           	opt stack 20
 36117                           
 36118                           ;main.c: 295: RB1 = 0;
 36119                           
 36120                           ; BSR set to: 0
 36121                           ;incstack = 0
 36122  0099E8  9281               	bcf	3969,1,c	;volatile
 36123                           
 36124                           ;main.c: 297: RB1 = 1;
 36125  0099EA  8281               	bsf	3969,1,c	;volatile
 36126  0099EC  0012               	return		;funcret
 36127  0099EE                     __end_of_load:
 36128                           	opt stack 0
 36129                           tblptru	equ	0xFF8
 36130                           tblptrh	equ	0xFF7
 36131                           tblptrl	equ	0xFF6
 36132                           tablat	equ	0xFF5
 36133                           prodh	equ	0xFF4
 36134                           prodl	equ	0xFF3
 36135                           intcon	equ	0xFF2
 36136                           intcon2	equ	0xFF1
 36137                           indf0	equ	0xFEF
 36138                           postinc0	equ	0xFEE
 36139                           fsr0h	equ	0xFEA
 36140                           fsr0l	equ	0xFE9
 36141                           wreg	equ	0xFE8
 36142                           postinc1	equ	0xFE6
 36143                           postdec1	equ	0xFE5
 36144                           plusw1	equ	0xFE3
 36145                           fsr1h	equ	0xFE2
 36146                           fsr1l	equ	0xFE1
 36147                           indf2	equ	0xFDF
 36148                           postinc2	equ	0xFDE
 36149                           postdec2	equ	0xFDD
 36150                           plusw2	equ	0xFDB
 36151                           fsr2h	equ	0xFDA
 36152                           fsr2l	equ	0xFD9
 36153                           status	equ	0xFD8
 36154                           
 36155 ;; *************** function _clock *****************
 36156 ;; Defined at:
 36157 ;;		line 301 in file "main.c"
 36158 ;; Parameters:    Size  Location     Type
 36159 ;;		None
 36160 ;; Auto vars:     Size  Location     Type
 36161 ;;		None
 36162 ;; Return value:  Size  Location     Type
 36163 ;;                  1    wreg      void 
 36164 ;; Registers used:
 36165 ;;		None
 36166 ;; Tracked objects:
 36167 ;;		On entry : 0/0
 36168 ;;		On exit  : 0/0
 36169 ;;		Unchanged: 0/0
 36170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 36171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36175 ;;Total ram usage:        0 bytes
 36176 ;; Hardware stack levels used:    1
 36177 ;; Hardware stack levels required when called:    5
 36178 ;; This function calls:
 36179 ;;		Nothing
 36180 ;; This function is called by:
 36181 ;;		_buttonInputsSerial
 36182 ;; This function uses a non-reentrant model
 36183 ;;
 36184                           
 36185                           	psect	text102
 36186  0099EE                     __ptext102:
 36187                           	opt stack 0
 36188  0099EE                     _clock:
 36189                           	opt stack 20
 36190                           
 36191                           ;main.c: 302: RC5 = 1;
 36192                           
 36193                           ;incstack = 0
 36194  0099EE  8A82               	bsf	3970,5,c	;volatile
 36195                           
 36196                           ;main.c: 303: RC5 = 0;
 36197  0099F0  9A82               	bcf	3970,5,c	;volatile
 36198  0099F2  0012               	return		;funcret
 36199  0099F4                     __end_of_clock:
 36200                           	opt stack 0
 36201                           tblptru	equ	0xFF8
 36202                           tblptrh	equ	0xFF7
 36203                           tblptrl	equ	0xFF6
 36204                           tablat	equ	0xFF5
 36205                           prodh	equ	0xFF4
 36206                           prodl	equ	0xFF3
 36207                           intcon	equ	0xFF2
 36208                           intcon2	equ	0xFF1
 36209                           indf0	equ	0xFEF
 36210                           postinc0	equ	0xFEE
 36211                           fsr0h	equ	0xFEA
 36212                           fsr0l	equ	0xFE9
 36213                           wreg	equ	0xFE8
 36214                           postinc1	equ	0xFE6
 36215                           postdec1	equ	0xFE5
 36216                           plusw1	equ	0xFE3
 36217                           fsr1h	equ	0xFE2
 36218                           fsr1l	equ	0xFE1
 36219                           indf2	equ	0xFDF
 36220                           postinc2	equ	0xFDE
 36221                           postdec2	equ	0xFDD
 36222                           plusw2	equ	0xFDB
 36223                           fsr2h	equ	0xFDA
 36224                           fsr2l	equ	0xFD9
 36225                           status	equ	0xFD8
 36226                           
 36227 ;; *************** function _analogInputs *****************
 36228 ;; Defined at:
 36229 ;;		line 327 in file "main.c"
 36230 ;; Parameters:    Size  Location     Type
 36231 ;;		None
 36232 ;; Auto vars:     Size  Location     Type
 36233 ;;		None
 36234 ;; Return value:  Size  Location     Type
 36235 ;;                  1    wreg      void 
 36236 ;; Registers used:
 36237 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+9, btemp
      ++10, btemp+11, prodl, prodh, cstack
 36238 ;; Tracked objects:
 36239 ;;		On entry : 0/0
 36240 ;;		On exit  : 0/0
 36241 ;;		Unchanged: 0/0
 36242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 36243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36245 ;;      Temps:          0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 36246 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 36247 ;;Total ram usage:        7 bytes
 36248 ;; Hardware stack levels used:    1
 36249 ;; Hardware stack levels required when called:   11
 36250 ;; This function calls:
 36251 ;;		_readPotentiometers
 36252 ;; This function is called by:
 36253 ;;		_un_block_code
 36254 ;;		_main
 36255 ;; This function uses a non-reentrant model
 36256 ;;
 36257                           
 36258                           	psect	text103
 36259  009400                     __ptext103:
 36260                           	opt stack 0
 36261  009400                     _analogInputs:
 36262                           	opt stack 16
 36263                           
 36264                           ;main.c: 343: if(ARPEGGIO_ON == 0) {
 36265                           
 36266                           ;incstack = 0
 36267  009400  A604               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 36268                           
 36269                           ;main.c: 344: readPotentiometers();
 36270  009402  EC18  F005         	call	_readPotentiometers	;wreg free
 36271                           
 36272                           ;main.c: 345: }
 36273                           ;main.c: 348: if(ARPEGGIO_ON == 1) {
 36274  009406  A604               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 36275  009408  0012               	return	
 36276                           
 36277                           ;main.c: 351: if((TIMER_OVERFLOWS > 0) && (TIMER_OVERFLOWS < (NOTE_LENGTH_PULSES - 2))) 
      +                          {
 36278  00940A  502E               	movf	_TIMER_OVERFLOWS,w,c
 36279  00940C  B4D8               	btfsc	status,2,c
 36280  00940E  0012               	return	
 36281  009410  0EFE               	movlw	254
 36282  009412  0101               	movlb	1	; () banked
 36283  009414  6F9E               	movwf	??_analogInputs& (0+255),b
 36284  009416  0EFF               	movlw	255
 36285  009418  6F9F               	movwf	(??_analogInputs+1)& (0+255),b
 36286  00941A  504D               	movf	_NOTE_LENGTH_PULSES,w,c
 36287  00941C  6FA0               	movwf	(??_analogInputs+2)& (0+255),b
 36288  00941E  6BA1               	clrf	(??_analogInputs+3)& (0+255),b
 36289  009420  519E               	movf	??_analogInputs& (0+255),w,b
 36290  009422  27A0               	addwf	(??_analogInputs+2)& (0+255),f,b
 36291  009424  519F               	movf	(??_analogInputs+1)& (0+255),w,b
 36292  009426  23A1               	addwfc	(??_analogInputs+3)& (0+255),f,b
 36293  009428  502E               	movf	_TIMER_OVERFLOWS,w,c
 36294  00942A  6FA2               	movwf	(??_analogInputs+4)& (0+255),b
 36295  00942C  6BA3               	clrf	(??_analogInputs+5)& (0+255),b
 36296  00942E  51A0               	movf	(??_analogInputs+2)& (0+255),w,b
 36297  009430  5DA2               	subwf	(??_analogInputs+4)& (0+255),w,b
 36298  009432  51A3               	movf	(??_analogInputs+5)& (0+255),w,b
 36299  009434  0A80               	xorlw	128
 36300  009436  6FA4               	movwf	(??_analogInputs+6)& (0+255),b
 36301  009438  51A1               	movf	(??_analogInputs+3)& (0+255),w,b
 36302  00943A  0A80               	xorlw	128
 36303  00943C  59A4               	subwfb	(??_analogInputs+6)& (0+255),w,b
 36304  00943E  B0D8               	btfsc	status,0,c
 36305  009440  0012               	return	
 36306                           
 36307                           ; BSR set to: 1
 36308                           ;main.c: 352: readPotentiometers();
 36309  009442  EC18  F005         	call	_readPotentiometers	;wreg free
 36310  009446  0012               	return	
 36311  009448                     __end_of_analogInputs:
 36312                           	opt stack 0
 36313                           tblptru	equ	0xFF8
 36314                           tblptrh	equ	0xFF7
 36315                           tblptrl	equ	0xFF6
 36316                           tablat	equ	0xFF5
 36317                           prodh	equ	0xFF4
 36318                           prodl	equ	0xFF3
 36319                           intcon	equ	0xFF2
 36320                           intcon2	equ	0xFF1
 36321                           indf0	equ	0xFEF
 36322                           postinc0	equ	0xFEE
 36323                           fsr0h	equ	0xFEA
 36324                           fsr0l	equ	0xFE9
 36325                           wreg	equ	0xFE8
 36326                           postinc1	equ	0xFE6
 36327                           postdec1	equ	0xFE5
 36328                           plusw1	equ	0xFE3
 36329                           fsr1h	equ	0xFE2
 36330                           fsr1l	equ	0xFE1
 36331                           indf2	equ	0xFDF
 36332                           postinc2	equ	0xFDE
 36333                           postdec2	equ	0xFDD
 36334                           plusw2	equ	0xFDB
 36335                           fsr2h	equ	0xFDA
 36336                           fsr2l	equ	0xFD9
 36337                           status	equ	0xFD8
 36338                           
 36339 ;; *************** function _readPotentiometers *****************
 36340 ;; Defined at:
 36341 ;;		line 34 in file "potentiometers.c"
 36342 ;; Parameters:    Size  Location     Type
 36343 ;;		None
 36344 ;; Auto vars:     Size  Location     Type
 36345 ;;  i               1    6[BANK1 ] unsigned char 
 36346 ;;  i               1    4[BANK1 ] unsigned char 
 36347 ;;  i               1    5[BANK1 ] unsigned char 
 36348 ;; Return value:  Size  Location     Type
 36349 ;;                  1    wreg      void 
 36350 ;; Registers used:
 36351 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+9, btemp
      ++10, btemp+11, prodl, prodh, cstack
 36352 ;; Tracked objects:
 36353 ;;		On entry : 0/0
 36354 ;;		On exit  : 0/0
 36355 ;;		Unchanged: 0/0
 36356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 36357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36358 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 36359 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36360 ;;      Totals:         0       5       7       0       0       0       0       0       0       0       0       0       
      +0       0
 36361 ;;Total ram usage:       12 bytes
 36362 ;; Hardware stack levels used:    1
 36363 ;; Hardware stack levels required when called:   10
 36364 ;; This function calls:
 36365 ;;		_ADC_Read
 36366 ;;		___fladd
 36367 ;;		___flmul
 36368 ;;		___flneg
 36369 ;;		___fltol
 36370 ;;		___xxtofl
 36371 ;;		_map
 36372 ;;		_processPotentiometers
 36373 ;; This function is called by:
 36374 ;;		_analogInputs
 36375 ;; This function uses a non-reentrant model
 36376 ;;
 36377                           
 36378                           	psect	text104
 36379  000A30                     __ptext104:
 36380                           	opt stack 0
 36381  000A30                     _readPotentiometers:
 36382                           	opt stack 16
 36383                           
 36384                           ;potentiometers.c: 40: for(unsigned char i=0;i<16;i++){
 36385                           
 36386                           ;incstack = 0
 36387  000A30  0E00               	movlw	0
 36388  000A32  0101               	movlb	1	; () banked
 36389  000A34  6F9C               	movwf	readPotentiometers@i& (0+255),b
 36390  000A36                     l30289:
 36391                           
 36392                           ; BSR set to: 1
 36393  000A36  0E0F               	movlw	15
 36394  000A38  659C               	cpfsgt	readPotentiometers@i& (0+255),b
 36395  000A3A  D001               	goto	l4030
 36396  000A3C  D02B               	goto	u54580
 36397  000A3E                     l4030:
 36398                           
 36399                           ; BSR set to: 1
 36400                           ;potentiometers.c: 42: potentiometer_raw[i] = ADC_Read(i);
 36401                           
 36402                           ; BSR set to: 1
 36403  000A3E  519C               	movf	readPotentiometers@i& (0+255),w,b
 36404  000A40  EC3E  F04B         	call	_ADC_Read
 36405  000A44  0101               	movlb	1	; () banked
 36406  000A46  519C               	movf	readPotentiometers@i& (0+255),w,b
 36407  000A48  0D02               	mullw	2
 36408  000A4A  0E69               	movlw	low _potentiometer_raw
 36409  000A4C  24F3               	addwf	prodl,w,c
 36410  000A4E  6ED9               	movwf	fsr2l,c
 36411  000A50  0E03               	movlw	high _potentiometer_raw
 36412  000A52  20F4               	addwfc	prodh,w,c
 36413  000A54  6EDA               	movwf	fsr2h,c
 36414  000A56  0100               	movlb	0	; () banked
 36415  000A58  C060  FFDE         	movff	?_ADC_Read,postinc2
 36416  000A5C  C061  FFDD         	movff	?_ADC_Read+1,postdec2
 36417                           
 36418                           ; BSR set to: 0
 36419                           ;potentiometers.c: 51: if (FIRST_READING == 0) {
 36420  000A60  BC05               	btfsc	_FIRST_READING/(0+8),_FIRST_READING& (0+7),c
 36421  000A62  D015               	goto	l4032
 36422                           
 36423                           ; BSR set to: 0
 36424                           ;potentiometers.c: 52: ema_sum[i] = potentiometer_raw[i];
 36425  000A64  0101               	movlb	1	; () banked
 36426  000A66  519C               	movf	readPotentiometers@i& (0+255),w,b
 36427  000A68  0D02               	mullw	2
 36428  000A6A  0E69               	movlw	low _potentiometer_raw
 36429  000A6C  24F3               	addwf	prodl,w,c
 36430  000A6E  6ED9               	movwf	fsr2l,c
 36431  000A70  0E03               	movlw	high _potentiometer_raw
 36432  000A72  20F4               	addwfc	prodh,w,c
 36433  000A74  6EDA               	movwf	fsr2h,c
 36434  000A76  519C               	movf	readPotentiometers@i& (0+255),w,b
 36435  000A78  0D02               	mullw	2
 36436  000A7A  0E40               	movlw	low _ema_sum
 36437  000A7C  24F3               	addwf	prodl,w,c
 36438  000A7E  6EE9               	movwf	fsr0l,c
 36439  000A80  0E02               	movlw	high _ema_sum
 36440  000A82  20F4               	addwfc	prodh,w,c
 36441  000A84  6EEA               	movwf	fsr0h,c
 36442  000A86  CFDE FFEE          	movff	postinc2,postinc0
 36443  000A8A  CFDD FFED          	movff	postdec2,postdec0
 36444  000A8E                     l4032:
 36445                           
 36446                           ; BSR set to: 1
 36447  000A8E  0101               	movlb	1	; () banked
 36448  000A90  2B9C               	incf	readPotentiometers@i& (0+255),f,b
 36449  000A92  D7D1               	goto	l30289
 36450  000A94                     u54580:
 36451                           
 36452                           ; BSR set to: 1
 36453                           ;potentiometers.c: 53: }
 36454                           ;potentiometers.c: 54: }
 36455                           ;potentiometers.c: 57: for(unsigned char i=0;i<16;i++){
 36456                           
 36457                           ; BSR set to: 1
 36458  000A94  0E00               	movlw	0
 36459  000A96  6F9B               	movwf	readPotentiometers@i_3434& (0+255),b
 36460  000A98                     l30305:
 36461                           
 36462                           ; BSR set to: 1
 36463  000A98  0E0F               	movlw	15
 36464  000A9A  659B               	cpfsgt	readPotentiometers@i_3434& (0+255),b
 36465  000A9C  D001               	goto	l4033
 36466  000A9E  D0A1               	goto	u54600
 36467  000AA0                     l4033:
 36468                           
 36469                           ; BSR set to: 1
 36470                           ;potentiometers.c: 58: ema_sum[i] = (ema_alpha * potentiometer_raw[i]) + ((1 - ema_alpha
      +                          ) * ema_sum[i]);
 36471                           
 36472                           ; BSR set to: 1
 36473  000AA0  519B               	movf	readPotentiometers@i_3434& (0+255),w,b
 36474  000AA2  0D02               	mullw	2
 36475  000AA4  0E40               	movlw	low _ema_sum
 36476  000AA6  24F3               	addwf	prodl,w,c
 36477  000AA8  6ED9               	movwf	fsr2l,c
 36478  000AAA  0E02               	movlw	high _ema_sum
 36479  000AAC  20F4               	addwfc	prodh,w,c
 36480  000AAE  6EDA               	movwf	fsr2h,c
 36481  000AB0  CFDE F060          	movff	postinc2,___xxtofl@val
 36482  000AB4  CFDD F061          	movff	postdec2,___xxtofl@val+1
 36483  000AB8  0100               	movlb	0	; () banked
 36484  000ABA  0E00               	movlw	0
 36485  000ABC  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 36486  000ABE  0EFF               	movlw	-1
 36487  000AC0  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 36488  000AC2  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 36489  000AC4  0E01               	movlw	1
 36490  000AC6  ECF2  F02F         	call	___xxtofl
 36491  000ACA  C060  F072         	movff	?___xxtofl,___flmul@a
 36492  000ACE  C061  F073         	movff	?___xxtofl+1,___flmul@a+1
 36493  000AD2  C062  F074         	movff	?___xxtofl+2,___flmul@a+2
 36494  000AD6  C063  F075         	movff	?___xxtofl+3,___flmul@a+3
 36495  000ADA  0E00               	movlw	0
 36496  000ADC  0100               	movlb	0	; () banked
 36497  000ADE  6FA8               	movwf	___fladd@a& (0+255),b
 36498  000AE0  0E00               	movlw	0
 36499  000AE2  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 36500  000AE4  0E80               	movlw	128
 36501  000AE6  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 36502  000AE8  0E3F               	movlw	63
 36503  000AEA  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 36504  000AEC  C104  F0A0         	movff	_ema_alpha,___flneg@f1
 36505  000AF0  C105  F0A1         	movff	_ema_alpha+1,___flneg@f1+1
 36506  000AF4  C106  F0A2         	movff	_ema_alpha+2,___flneg@f1+2
 36507  000AF8  C107  F0A3         	movff	_ema_alpha+3,___flneg@f1+3
 36508  000AFC  ECA7  F04B         	call	___flneg	;wreg free
 36509  000B00  C0A0  F0A4         	movff	?___flneg,___fladd@b
 36510  000B04  C0A1  F0A5         	movff	?___flneg+1,___fladd@b+1
 36511  000B08  C0A2  F0A6         	movff	?___flneg+2,___fladd@b+2
 36512  000B0C  C0A3  F0A7         	movff	?___flneg+3,___fladd@b+3
 36513  000B10  EC9B  F019         	call	___fladd	;wreg free
 36514  000B14  C0A4  F06E         	movff	?___fladd,___flmul@b
 36515  000B18  C0A5  F06F         	movff	?___fladd+1,___flmul@b+1
 36516  000B1C  C0A6  F070         	movff	?___fladd+2,___flmul@b+2
 36517  000B20  C0A7  F071         	movff	?___fladd+3,___flmul@b+3
 36518  000B24  ECF2  F017         	call	___flmul	;wreg free
 36519  000B28  C06E  F197         	movff	?___flmul,_readPotentiometers$5907
 36520  000B2C  C06F  F198         	movff	?___flmul+1,_readPotentiometers$5907+1
 36521  000B30  C070  F199         	movff	?___flmul+2,_readPotentiometers$5907+2
 36522  000B34  C071  F19A         	movff	?___flmul+3,_readPotentiometers$5907+3
 36523                           
 36524                           ;potentiometers.c: 58: ema_sum[i] = (ema_alpha * potentiometer_raw[i]) + ((1 - ema_alpha
      +                          ) * ema_sum[i]);
 36525  000B38  C197  F0A8         	movff	_readPotentiometers$5907,___fladd@a
 36526  000B3C  C198  F0A9         	movff	_readPotentiometers$5907+1,___fladd@a+1
 36527  000B40  C199  F0AA         	movff	_readPotentiometers$5907+2,___fladd@a+2
 36528  000B44  C19A  F0AB         	movff	_readPotentiometers$5907+3,___fladd@a+3
 36529  000B48  C104  F072         	movff	_ema_alpha,___flmul@a
 36530  000B4C  C105  F073         	movff	_ema_alpha+1,___flmul@a+1
 36531  000B50  C106  F074         	movff	_ema_alpha+2,___flmul@a+2
 36532  000B54  C107  F075         	movff	_ema_alpha+3,___flmul@a+3
 36533  000B58  0101               	movlb	1	; () banked
 36534  000B5A  519B               	movf	readPotentiometers@i_3434& (0+255),w,b
 36535  000B5C  0D02               	mullw	2
 36536  000B5E  0E69               	movlw	low _potentiometer_raw
 36537  000B60  24F3               	addwf	prodl,w,c
 36538  000B62  6ED9               	movwf	fsr2l,c
 36539  000B64  0E03               	movlw	high _potentiometer_raw
 36540  000B66  20F4               	addwfc	prodh,w,c
 36541  000B68  6EDA               	movwf	fsr2h,c
 36542  000B6A  CFDE F060          	movff	postinc2,___xxtofl@val
 36543  000B6E  CFDD F061          	movff	postdec2,___xxtofl@val+1
 36544  000B72  0100               	movlb	0	; () banked
 36545  000B74  0E00               	movlw	0
 36546  000B76  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 36547  000B78  0EFF               	movlw	-1
 36548  000B7A  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 36549  000B7C  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 36550  000B7E  0E01               	movlw	1
 36551  000B80  ECF2  F02F         	call	___xxtofl
 36552  000B84  C060  F06E         	movff	?___xxtofl,___flmul@b
 36553  000B88  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 36554  000B8C  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 36555  000B90  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 36556  000B94  ECF2  F017         	call	___flmul	;wreg free
 36557  000B98  C06E  F0A4         	movff	?___flmul,___fladd@b
 36558  000B9C  C06F  F0A5         	movff	?___flmul+1,___fladd@b+1
 36559  000BA0  C070  F0A6         	movff	?___flmul+2,___fladd@b+2
 36560  000BA4  C071  F0A7         	movff	?___flmul+3,___fladd@b+3
 36561  000BA8  EC9B  F019         	call	___fladd	;wreg free
 36562  000BAC  C0A4  F0B8         	movff	?___fladd,___fltol@f1
 36563  000BB0  C0A5  F0B9         	movff	?___fladd+1,___fltol@f1+1
 36564  000BB4  C0A6  F0BA         	movff	?___fladd+2,___fltol@f1+2
 36565  000BB8  C0A7  F0BB         	movff	?___fladd+3,___fltol@f1+3
 36566  000BBC  ECBC  F037         	call	___fltol	;wreg free
 36567  000BC0  0101               	movlb	1	; () banked
 36568  000BC2  519B               	movf	readPotentiometers@i_3434& (0+255),w,b
 36569  000BC4  0D02               	mullw	2
 36570  000BC6  0E40               	movlw	low _ema_sum
 36571  000BC8  24F3               	addwf	prodl,w,c
 36572  000BCA  6ED9               	movwf	fsr2l,c
 36573  000BCC  0E02               	movlw	high _ema_sum
 36574  000BCE  20F4               	addwfc	prodh,w,c
 36575  000BD0  6EDA               	movwf	fsr2h,c
 36576  000BD2  0100               	movlb	0	; () banked
 36577  000BD4  C0B8  FFDE         	movff	?___fltol,postinc2
 36578  000BD8  C0B9  FFDD         	movff	?___fltol+1,postdec2
 36579                           
 36580                           ; BSR set to: 0
 36581  000BDC  0101               	movlb	1	; () banked
 36582  000BDE  2B9B               	incf	readPotentiometers@i_3434& (0+255),f,b
 36583  000BE0  D75B               	goto	l30305
 36584  000BE2                     u54600:
 36585                           
 36586                           ; BSR set to: 1
 36587                           ;potentiometers.c: 59: }
 36588                           ;potentiometers.c: 64: for(unsigned char i = 0; i<16; i++){
 36589                           
 36590                           ; BSR set to: 1
 36591  000BE2  0E00               	movlw	0
 36592  000BE4  6F9D               	movwf	readPotentiometers@i_3435& (0+255),b
 36593  000BE6                     l30317:
 36594                           
 36595                           ; BSR set to: 1
 36596  000BE6  0E0F               	movlw	15
 36597  000BE8  659D               	cpfsgt	readPotentiometers@i_3435& (0+255),b
 36598  000BEA  D001               	goto	l4035
 36599  000BEC  D2D3               	goto	u54790
 36600  000BEE                     l4035:
 36601                           
 36602                           ; BSR set to: 1
 36603                           ;potentiometers.c: 74: static unsigned long count;
 36604                           ;potentiometers.c: 75: count++;
 36605                           
 36606                           ; BSR set to: 1
 36607  000BEE  0E01               	movlw	1
 36608  000BF0  0102               	movlb	2	; () banked
 36609  000BF2  2760               	addwf	readPotentiometers@count& (0+255),f,b
 36610  000BF4  0E00               	movlw	0
 36611  000BF6  2361               	addwfc	(readPotentiometers@count+1)& (0+255),f,b
 36612  000BF8  2362               	addwfc	(readPotentiometers@count+2)& (0+255),f,b
 36613  000BFA  2363               	addwfc	(readPotentiometers@count+3)& (0+255),f,b
 36614                           
 36615                           ; BSR set to: 2
 36616                           ;potentiometers.c: 81: if (FIRST_READING == 0) {potentiometer_filtered_last[i] = ema_sum
      +                          [i];}
 36617  000BFC  BC05               	btfsc	_FIRST_READING/(0+8),_FIRST_READING& (0+7),c
 36618  000BFE  D015               	goto	l4039
 36619                           
 36620                           ; BSR set to: 2
 36621  000C00  0101               	movlb	1	; () banked
 36622  000C02  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36623  000C04  0D02               	mullw	2
 36624  000C06  0E40               	movlw	low _ema_sum
 36625  000C08  24F3               	addwf	prodl,w,c
 36626  000C0A  6ED9               	movwf	fsr2l,c
 36627  000C0C  0E02               	movlw	high _ema_sum
 36628  000C0E  20F4               	addwfc	prodh,w,c
 36629  000C10  6EDA               	movwf	fsr2h,c
 36630  000C12  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36631  000C14  0D02               	mullw	2
 36632  000C16  0E00               	movlw	low _potentiometer_filtered_last
 36633  000C18  24F3               	addwf	prodl,w,c
 36634  000C1A  6EE9               	movwf	fsr0l,c
 36635  000C1C  0E02               	movlw	high _potentiometer_filtered_last
 36636  000C1E  20F4               	addwfc	prodh,w,c
 36637  000C20  6EEA               	movwf	fsr0h,c
 36638  000C22  CFDE FFEE          	movff	postinc2,postinc0
 36639  000C26  CFDD FFED          	movff	postdec2,postdec0
 36640  000C2A                     l4039:
 36641                           
 36642                           ;potentiometers.c: 83: if (((int)(ema_sum[i] - potentiometer_filtered_last[i]) >= HYST_V
      +                          AL) || ((int)(potentiometer_filtered_last[i] - ema_sum[i]) >= HYST_VAL)) {
 36643                           
 36644                           ; BSR set to: 1
 36645  000C2A  0101               	movlb	1	; () banked
 36646  000C2C  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36647  000C2E  0D02               	mullw	2
 36648  000C30  0E40               	movlw	low _ema_sum
 36649  000C32  24F3               	addwf	prodl,w,c
 36650  000C34  6ED9               	movwf	fsr2l,c
 36651  000C36  0E02               	movlw	high _ema_sum
 36652  000C38  20F4               	addwfc	prodh,w,c
 36653  000C3A  6EDA               	movwf	fsr2h,c
 36654  000C3C  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 36655  000C40  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 36656  000C44  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36657  000C46  0D02               	mullw	2
 36658  000C48  0E00               	movlw	low _potentiometer_filtered_last
 36659  000C4A  24F3               	addwf	prodl,w,c
 36660  000C4C  6ED9               	movwf	fsr2l,c
 36661  000C4E  0E02               	movlw	high _potentiometer_filtered_last
 36662  000C50  20F4               	addwfc	prodh,w,c
 36663  000C52  6EDA               	movwf	fsr2h,c
 36664  000C54  CFDE F0C4          	movff	postinc2,??_readPotentiometers+2
 36665  000C58  CFDD F0C5          	movff	postdec2,??_readPotentiometers+3
 36666  000C5C  0100               	movlb	0	; () banked
 36667  000C5E  1FC4               	comf	(??_readPotentiometers+2)& (0+255),f,b
 36668  000C60  1FC5               	comf	(??_readPotentiometers+3)& (0+255),f,b
 36669  000C62  4BC4               	infsnz	(??_readPotentiometers+2)& (0+255),f,b
 36670  000C64  2BC5               	incf	(??_readPotentiometers+3)& (0+255),f,b
 36671  000C66  51C2               	movf	??_readPotentiometers& (0+255),w,b
 36672  000C68  27C4               	addwf	(??_readPotentiometers+2)& (0+255),f,b
 36673  000C6A  51C3               	movf	(??_readPotentiometers+1)& (0+255),w,b
 36674  000C6C  23C5               	addwfc	(??_readPotentiometers+3)& (0+255),f,b
 36675  000C6E  0101               	movlb	1	; () banked
 36676  000C70  51F3               	movf	_HYST_VAL& (0+255),w,b
 36677  000C72  0100               	movlb	0	; () banked
 36678  000C74  5DC4               	subwf	(??_readPotentiometers+2)& (0+255),w,b
 36679  000C76  51C5               	movf	(??_readPotentiometers+3)& (0+255),w,b
 36680  000C78  0A80               	xorlw	128
 36681  000C7A  6FC6               	movwf	(??_readPotentiometers+4)& (0+255),b
 36682  000C7C  0101               	movlb	1	; () banked
 36683  000C7E  51F4               	movf	(_HYST_VAL+1)& (0+255),w,b
 36684  000C80  0A80               	xorlw	128
 36685  000C82  0100               	movlb	0	; () banked
 36686  000C84  59C6               	subwfb	(??_readPotentiometers+4)& (0+255),w,b
 36687  000C86  B0D8               	btfsc	status,0,c
 36688  000C88  D030               	goto	u54640
 36689                           
 36690                           ; BSR set to: 0
 36691  000C8A  0101               	movlb	1	; () banked
 36692  000C8C  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36693  000C8E  0D02               	mullw	2
 36694  000C90  0E00               	movlw	low _potentiometer_filtered_last
 36695  000C92  24F3               	addwf	prodl,w,c
 36696  000C94  6ED9               	movwf	fsr2l,c
 36697  000C96  0E02               	movlw	high _potentiometer_filtered_last
 36698  000C98  20F4               	addwfc	prodh,w,c
 36699  000C9A  6EDA               	movwf	fsr2h,c
 36700  000C9C  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 36701  000CA0  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 36702  000CA4  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36703  000CA6  0D02               	mullw	2
 36704  000CA8  0E40               	movlw	low _ema_sum
 36705  000CAA  24F3               	addwf	prodl,w,c
 36706  000CAC  6ED9               	movwf	fsr2l,c
 36707  000CAE  0E02               	movlw	high _ema_sum
 36708  000CB0  20F4               	addwfc	prodh,w,c
 36709  000CB2  6EDA               	movwf	fsr2h,c
 36710  000CB4  CFDE F0C4          	movff	postinc2,??_readPotentiometers+2
 36711  000CB8  CFDD F0C5          	movff	postdec2,??_readPotentiometers+3
 36712  000CBC  0100               	movlb	0	; () banked
 36713  000CBE  1FC4               	comf	(??_readPotentiometers+2)& (0+255),f,b
 36714  000CC0  1FC5               	comf	(??_readPotentiometers+3)& (0+255),f,b
 36715  000CC2  4BC4               	infsnz	(??_readPotentiometers+2)& (0+255),f,b
 36716  000CC4  2BC5               	incf	(??_readPotentiometers+3)& (0+255),f,b
 36717  000CC6  51C2               	movf	??_readPotentiometers& (0+255),w,b
 36718  000CC8  27C4               	addwf	(??_readPotentiometers+2)& (0+255),f,b
 36719  000CCA  51C3               	movf	(??_readPotentiometers+1)& (0+255),w,b
 36720  000CCC  23C5               	addwfc	(??_readPotentiometers+3)& (0+255),f,b
 36721  000CCE  0101               	movlb	1	; () banked
 36722  000CD0  51F3               	movf	_HYST_VAL& (0+255),w,b
 36723  000CD2  0100               	movlb	0	; () banked
 36724  000CD4  5DC4               	subwf	(??_readPotentiometers+2)& (0+255),w,b
 36725  000CD6  51C5               	movf	(??_readPotentiometers+3)& (0+255),w,b
 36726  000CD8  0A80               	xorlw	128
 36727  000CDA  6FC6               	movwf	(??_readPotentiometers+4)& (0+255),b
 36728  000CDC  0101               	movlb	1	; () banked
 36729  000CDE  51F4               	movf	(_HYST_VAL+1)& (0+255),w,b
 36730  000CE0  0A80               	xorlw	128
 36731  000CE2  0100               	movlb	0	; () banked
 36732  000CE4  59C6               	subwfb	(??_readPotentiometers+4)& (0+255),w,b
 36733  000CE6  A0D8               	btfss	status,0,c
 36734  000CE8  D240               	goto	l4040
 36735  000CEA                     u54640:
 36736                           
 36737                           ; BSR set to: 0
 36738                           ;potentiometers.c: 86: if((i==iterator_focus) || (iterator_focus==255)) {count = 0; coun
      +                          t_ISR = 0;}
 36739                           
 36740                           ; BSR set to: 0
 36741  000CEA  51FD               	movf	_iterator_focus& (0+255),w,b
 36742  000CEC  0101               	movlb	1	; () banked
 36743  000CEE  199D               	xorwf	readPotentiometers@i_3435& (0+255),w,b
 36744  000CF0  B4D8               	btfsc	status,2,c
 36745  000CF2  D004               	goto	u54660
 36746                           
 36747                           ; BSR set to: 1
 36748  000CF4  0100               	movlb	0	; () banked
 36749  000CF6  29FD               	incf	_iterator_focus& (0+255),w,b
 36750  000CF8  A4D8               	btfss	status,2,c
 36751  000CFA  D011               	goto	l4043
 36752  000CFC                     u54660:
 36753                           
 36754                           ; BSR set to: 0
 36755  000CFC  0E00               	movlw	0
 36756  000CFE  0102               	movlb	2	; () banked
 36757  000D00  6F60               	movwf	readPotentiometers@count& (0+255),b
 36758  000D02  0E00               	movlw	0
 36759  000D04  6F61               	movwf	(readPotentiometers@count+1)& (0+255),b
 36760  000D06  0E00               	movlw	0
 36761  000D08  6F62               	movwf	(readPotentiometers@count+2)& (0+255),b
 36762  000D0A  0E00               	movlw	0
 36763  000D0C  6F63               	movwf	(readPotentiometers@count+3)& (0+255),b
 36764  000D0E  0E00               	movlw	0
 36765  000D10  6F64               	movwf	_count_ISR& (0+255),b
 36766  000D12  0E00               	movlw	0
 36767  000D14  6F65               	movwf	(_count_ISR+1)& (0+255),b
 36768  000D16  0E00               	movlw	0
 36769  000D18  6F66               	movwf	(_count_ISR+2)& (0+255),b
 36770  000D1A  0E00               	movlw	0
 36771  000D1C  6F67               	movwf	(_count_ISR+3)& (0+255),b
 36772  000D1E                     l4043:
 36773                           
 36774                           ;potentiometers.c: 93: if(HYST_VAL == 32) {
 36775                           
 36776                           ; BSR set to: 2
 36777  000D1E  0E20               	movlw	32
 36778  000D20  0101               	movlb	1	; () banked
 36779  000D22  19F3               	xorwf	_HYST_VAL& (0+255),w,b
 36780  000D24  11F4               	iorwf	(_HYST_VAL+1)& (0+255),w,b
 36781  000D26  A4D8               	btfss	status,2,c
 36782  000D28  D095               	goto	l4048
 36783                           
 36784                           ; BSR set to: 1
 36785                           ;potentiometers.c: 96: if((int)(ema_sum[i] - potentiometer_filtered_last[i]) >= 32){
 36786  000D2A  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36787  000D2C  0D02               	mullw	2
 36788  000D2E  0E40               	movlw	low _ema_sum
 36789  000D30  24F3               	addwf	prodl,w,c
 36790  000D32  6ED9               	movwf	fsr2l,c
 36791  000D34  0E02               	movlw	high _ema_sum
 36792  000D36  20F4               	addwfc	prodh,w,c
 36793  000D38  6EDA               	movwf	fsr2h,c
 36794  000D3A  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 36795  000D3E  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 36796  000D42  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36797  000D44  0D02               	mullw	2
 36798  000D46  0E00               	movlw	low _potentiometer_filtered_last
 36799  000D48  24F3               	addwf	prodl,w,c
 36800  000D4A  6ED9               	movwf	fsr2l,c
 36801  000D4C  0E02               	movlw	high _potentiometer_filtered_last
 36802  000D4E  20F4               	addwfc	prodh,w,c
 36803  000D50  6EDA               	movwf	fsr2h,c
 36804  000D52  CFDE F0C4          	movff	postinc2,??_readPotentiometers+2
 36805  000D56  CFDD F0C5          	movff	postdec2,??_readPotentiometers+3
 36806  000D5A  0100               	movlb	0	; () banked
 36807  000D5C  1FC4               	comf	(??_readPotentiometers+2)& (0+255),f,b
 36808  000D5E  1FC5               	comf	(??_readPotentiometers+3)& (0+255),f,b
 36809  000D60  4BC4               	infsnz	(??_readPotentiometers+2)& (0+255),f,b
 36810  000D62  2BC5               	incf	(??_readPotentiometers+3)& (0+255),f,b
 36811  000D64  51C2               	movf	??_readPotentiometers& (0+255),w,b
 36812  000D66  27C4               	addwf	(??_readPotentiometers+2)& (0+255),f,b
 36813  000D68  51C3               	movf	(??_readPotentiometers+1)& (0+255),w,b
 36814  000D6A  23C5               	addwfc	(??_readPotentiometers+3)& (0+255),f,b
 36815  000D6C  BFC5               	btfsc	(??_readPotentiometers+3)& (0+255),7,b
 36816  000D6E  D025               	goto	l4047
 36817  000D70  51C5               	movf	(??_readPotentiometers+3)& (0+255),w,b
 36818  000D72  E104               	bnz	u54680
 36819  000D74  0E20               	movlw	32
 36820  000D76  5DC4               	subwf	(??_readPotentiometers+2)& (0+255),w,b
 36821  000D78  A0D8               	btfss	status,0,c
 36822  000D7A  D01F               	goto	l4047
 36823  000D7C                     u54680:
 36824                           
 36825                           ; BSR set to: 0
 36826                           ;potentiometers.c: 98: ema_sum[i] = (potentiometer_filtered_last[i] + 8);
 36827  000D7C  0101               	movlb	1	; () banked
 36828  000D7E  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36829  000D80  0D02               	mullw	2
 36830  000D82  0E00               	movlw	low _potentiometer_filtered_last
 36831  000D84  24F3               	addwf	prodl,w,c
 36832  000D86  6ED9               	movwf	fsr2l,c
 36833  000D88  0E02               	movlw	high _potentiometer_filtered_last
 36834  000D8A  20F4               	addwfc	prodh,w,c
 36835  000D8C  6EDA               	movwf	fsr2h,c
 36836  000D8E  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 36837  000D92  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 36838  000D96  0E08               	movlw	8
 36839  000D98  0100               	movlb	0	; () banked
 36840  000D9A  27C2               	addwf	??_readPotentiometers& (0+255),f,b
 36841  000D9C  0E00               	movlw	0
 36842  000D9E  23C3               	addwfc	(??_readPotentiometers+1)& (0+255),f,b
 36843  000DA0  0101               	movlb	1	; () banked
 36844  000DA2  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36845  000DA4  0D02               	mullw	2
 36846  000DA6  0E40               	movlw	low _ema_sum
 36847  000DA8  24F3               	addwf	prodl,w,c
 36848  000DAA  6ED9               	movwf	fsr2l,c
 36849  000DAC  0E02               	movlw	high _ema_sum
 36850  000DAE  20F4               	addwfc	prodh,w,c
 36851  000DB0  6EDA               	movwf	fsr2h,c
 36852  000DB2  C0C2  FFDE         	movff	??_readPotentiometers,postinc2
 36853  000DB6  C0C3  FFDD         	movff	??_readPotentiometers+1,postdec2
 36854  000DBA                     l4047:
 36855                           
 36856                           ;potentiometers.c: 99: }
 36857                           ;potentiometers.c: 101: if((int)(potentiometer_filtered_last[i] - ema_sum[i]) >= 32){
 36858  000DBA  0101               	movlb	1	; () banked
 36859  000DBC  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36860  000DBE  0D02               	mullw	2
 36861  000DC0  0E00               	movlw	low _potentiometer_filtered_last
 36862  000DC2  24F3               	addwf	prodl,w,c
 36863  000DC4  6ED9               	movwf	fsr2l,c
 36864  000DC6  0E02               	movlw	high _potentiometer_filtered_last
 36865  000DC8  20F4               	addwfc	prodh,w,c
 36866  000DCA  6EDA               	movwf	fsr2h,c
 36867  000DCC  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 36868  000DD0  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 36869  000DD4  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36870  000DD6  0D02               	mullw	2
 36871  000DD8  0E40               	movlw	low _ema_sum
 36872  000DDA  24F3               	addwf	prodl,w,c
 36873  000DDC  6ED9               	movwf	fsr2l,c
 36874  000DDE  0E02               	movlw	high _ema_sum
 36875  000DE0  20F4               	addwfc	prodh,w,c
 36876  000DE2  6EDA               	movwf	fsr2h,c
 36877  000DE4  CFDE F0C4          	movff	postinc2,??_readPotentiometers+2
 36878  000DE8  CFDD F0C5          	movff	postdec2,??_readPotentiometers+3
 36879  000DEC  0100               	movlb	0	; () banked
 36880  000DEE  1FC4               	comf	(??_readPotentiometers+2)& (0+255),f,b
 36881  000DF0  1FC5               	comf	(??_readPotentiometers+3)& (0+255),f,b
 36882  000DF2  4BC4               	infsnz	(??_readPotentiometers+2)& (0+255),f,b
 36883  000DF4  2BC5               	incf	(??_readPotentiometers+3)& (0+255),f,b
 36884  000DF6  51C2               	movf	??_readPotentiometers& (0+255),w,b
 36885  000DF8  27C4               	addwf	(??_readPotentiometers+2)& (0+255),f,b
 36886  000DFA  51C3               	movf	(??_readPotentiometers+1)& (0+255),w,b
 36887  000DFC  23C5               	addwfc	(??_readPotentiometers+3)& (0+255),f,b
 36888  000DFE  BFC5               	btfsc	(??_readPotentiometers+3)& (0+255),7,b
 36889  000E00  D029               	goto	l4048
 36890  000E02  51C5               	movf	(??_readPotentiometers+3)& (0+255),w,b
 36891  000E04  E104               	bnz	u54690
 36892  000E06  0E20               	movlw	32
 36893  000E08  5DC4               	subwf	(??_readPotentiometers+2)& (0+255),w,b
 36894  000E0A  A0D8               	btfss	status,0,c
 36895  000E0C  D023               	goto	l4048
 36896  000E0E                     u54690:
 36897                           
 36898                           ; BSR set to: 0
 36899                           ;potentiometers.c: 103: ema_sum[i] = (potentiometer_filtered_last[i] - 8);
 36900  000E0E  0EF8               	movlw	248
 36901  000E10  6FC2               	movwf	??_readPotentiometers& (0+255),b
 36902  000E12  0EFF               	movlw	255
 36903  000E14  6FC3               	movwf	(??_readPotentiometers+1)& (0+255),b
 36904  000E16  0101               	movlb	1	; () banked
 36905  000E18  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36906  000E1A  0D02               	mullw	2
 36907  000E1C  0E00               	movlw	low _potentiometer_filtered_last
 36908  000E1E  24F3               	addwf	prodl,w,c
 36909  000E20  6ED9               	movwf	fsr2l,c
 36910  000E22  0E02               	movlw	high _potentiometer_filtered_last
 36911  000E24  20F4               	addwfc	prodh,w,c
 36912  000E26  6EDA               	movwf	fsr2h,c
 36913  000E28  CFDE F0C4          	movff	postinc2,??_readPotentiometers+2
 36914  000E2C  CFDD F0C5          	movff	postdec2,??_readPotentiometers+3
 36915  000E30  0100               	movlb	0	; () banked
 36916  000E32  51C2               	movf	??_readPotentiometers& (0+255),w,b
 36917  000E34  27C4               	addwf	(??_readPotentiometers+2)& (0+255),f,b
 36918  000E36  51C3               	movf	(??_readPotentiometers+1)& (0+255),w,b
 36919  000E38  23C5               	addwfc	(??_readPotentiometers+3)& (0+255),f,b
 36920  000E3A  0101               	movlb	1	; () banked
 36921  000E3C  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36922  000E3E  0D02               	mullw	2
 36923  000E40  0E40               	movlw	low _ema_sum
 36924  000E42  24F3               	addwf	prodl,w,c
 36925  000E44  6ED9               	movwf	fsr2l,c
 36926  000E46  0E02               	movlw	high _ema_sum
 36927  000E48  20F4               	addwfc	prodh,w,c
 36928  000E4A  6EDA               	movwf	fsr2h,c
 36929  000E4C  C0C4  FFDE         	movff	??_readPotentiometers+2,postinc2
 36930  000E50  C0C5  FFDD         	movff	??_readPotentiometers+3,postdec2
 36931  000E54                     l4048:
 36932                           
 36933                           ;potentiometers.c: 104: }
 36934                           ;potentiometers.c: 105: }
 36935                           ;potentiometers.c: 107: HYST_VAL = 8;
 36936                           
 36937                           ; BSR set to: 1
 36938                           
 36939                           ; BSR set to: 1
 36940  000E54  0E00               	movlw	0
 36941  000E56  0101               	movlb	1	; () banked
 36942  000E58  6FF4               	movwf	(_HYST_VAL+1)& (0+255),b
 36943  000E5A  0E08               	movlw	8
 36944  000E5C  6FF3               	movwf	_HYST_VAL& (0+255),b
 36945                           
 36946                           ; BSR set to: 1
 36947                           ;potentiometers.c: 114: if(iterator_focus == 255) {iterator_focus = i;}
 36948  000E5E  0100               	movlb	0	; () banked
 36949  000E60  29FD               	incf	_iterator_focus& (0+255),w,b
 36950  000E62  B4D8               	btfsc	status,2,c
 36951                           
 36952                           ; BSR set to: 0
 36953  000E64  C19D  F0FD         	movff	readPotentiometers@i_3435,_iterator_focus
 36954                           
 36955                           ; BSR set to: 0
 36956                           ;potentiometers.c: 115: potentiometer_filtered_now[i] =ema_sum[i];
 36957                           
 36958                           ; BSR set to: 0
 36959  000E68  0101               	movlb	1	; () banked
 36960  000E6A  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36961  000E6C  0D02               	mullw	2
 36962  000E6E  0E40               	movlw	low _ema_sum
 36963  000E70  24F3               	addwf	prodl,w,c
 36964  000E72  6ED9               	movwf	fsr2l,c
 36965  000E74  0E02               	movlw	high _ema_sum
 36966  000E76  20F4               	addwfc	prodh,w,c
 36967  000E78  6EDA               	movwf	fsr2h,c
 36968  000E7A  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36969  000E7C  0D02               	mullw	2
 36970  000E7E  0E20               	movlw	low _potentiometer_filtered_now
 36971  000E80  24F3               	addwf	prodl,w,c
 36972  000E82  6EE9               	movwf	fsr0l,c
 36973  000E84  0E02               	movlw	high _potentiometer_filtered_now
 36974  000E86  20F4               	addwfc	prodh,w,c
 36975  000E88  6EEA               	movwf	fsr0h,c
 36976  000E8A  CFDE FFEE          	movff	postinc2,postinc0
 36977  000E8E  CFDD FFED          	movff	postdec2,postdec0
 36978                           
 36979                           ; BSR set to: 1
 36980                           ;potentiometers.c: 118: if(inputPotsArray[i].controller_resolution == 0) {
 36981  000E92  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36982  000E94  0D03               	mullw	3
 36983  000E96  0E88               	movlw	low _inputPotsArray
 36984  000E98  24F3               	addwf	prodl,w,c
 36985  000E9A  6ED9               	movwf	fsr2l,c
 36986  000E9C  0E02               	movlw	high _inputPotsArray
 36987  000E9E  20F4               	addwfc	prodh,w,c
 36988  000EA0  6EDA               	movwf	fsr2h,c
 36989  000EA2  0102               	movlb	2	; () banked
 36990  000EA4  B0DF               	btfsc	indf2,0,c
 36991  000EA6  D09C               	goto	l4052
 36992                           
 36993                           ; BSR set to: 2
 36994                           ;potentiometers.c: 119: potentiometer_filtered_now[i] = map(potentiometer_filtered_now[i
      +                          ], 0, 0x3F50, 0, 0x3FFF);
 36995  000EA8  0101               	movlb	1	; () banked
 36996  000EAA  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 36997  000EAC  0D02               	mullw	2
 36998  000EAE  0E20               	movlw	low _potentiometer_filtered_now
 36999  000EB0  24F3               	addwf	prodl,w,c
 37000  000EB2  6ED9               	movwf	fsr2l,c
 37001  000EB4  0E02               	movlw	high _potentiometer_filtered_now
 37002  000EB6  20F4               	addwfc	prodh,w,c
 37003  000EB8  6EDA               	movwf	fsr2h,c
 37004  000EBA  CFDE F06E          	movff	postinc2,map@x
 37005  000EBE  CFDD F06F          	movff	postdec2,map@x+1
 37006  000EC2  0100               	movlb	0	; () banked
 37007  000EC4  0E00               	movlw	0
 37008  000EC6  BF6F               	btfsc	(map@x+1)& (0+255),7,b
 37009  000EC8  0EFF               	movlw	-1
 37010  000ECA  6F70               	movwf	(map@x+2)& (0+255),b
 37011  000ECC  6F71               	movwf	(map@x+3)& (0+255),b
 37012  000ECE  0E00               	movlw	0
 37013  000ED0  6F72               	movwf	map@in_min& (0+255),b
 37014  000ED2  0E00               	movlw	0
 37015  000ED4  6F73               	movwf	(map@in_min+1)& (0+255),b
 37016  000ED6  0E00               	movlw	0
 37017  000ED8  6F74               	movwf	(map@in_min+2)& (0+255),b
 37018  000EDA  0E00               	movlw	0
 37019  000EDC  6F75               	movwf	(map@in_min+3)& (0+255),b
 37020  000EDE  0E50               	movlw	80
 37021  000EE0  6F76               	movwf	map@in_max& (0+255),b
 37022  000EE2  0E3F               	movlw	63
 37023  000EE4  6F77               	movwf	(map@in_max+1)& (0+255),b
 37024  000EE6  0E00               	movlw	0
 37025  000EE8  6F78               	movwf	(map@in_max+2)& (0+255),b
 37026  000EEA  0E00               	movlw	0
 37027  000EEC  6F79               	movwf	(map@in_max+3)& (0+255),b
 37028  000EEE  0E00               	movlw	0
 37029  000EF0  6F7A               	movwf	map@out_min& (0+255),b
 37030  000EF2  0E00               	movlw	0
 37031  000EF4  6F7B               	movwf	(map@out_min+1)& (0+255),b
 37032  000EF6  0E00               	movlw	0
 37033  000EF8  6F7C               	movwf	(map@out_min+2)& (0+255),b
 37034  000EFA  0E00               	movlw	0
 37035  000EFC  6F7D               	movwf	(map@out_min+3)& (0+255),b
 37036  000EFE  0EFF               	movlw	255
 37037  000F00  6F7E               	movwf	map@out_max& (0+255),b
 37038  000F02  0E3F               	movlw	63
 37039  000F04  6F7F               	movwf	(map@out_max+1)& (0+255),b
 37040  000F06  0E00               	movlw	0
 37041  000F08  6F80               	movwf	(map@out_max+2)& (0+255),b
 37042  000F0A  0E00               	movlw	0
 37043  000F0C  6F81               	movwf	(map@out_max+3)& (0+255),b
 37044  000F0E  EC6D  F033         	call	_map	;wreg free
 37045  000F12  0101               	movlb	1	; () banked
 37046  000F14  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37047  000F16  0D02               	mullw	2
 37048  000F18  0E20               	movlw	low _potentiometer_filtered_now
 37049  000F1A  24F3               	addwf	prodl,w,c
 37050  000F1C  6ED9               	movwf	fsr2l,c
 37051  000F1E  0E02               	movlw	high _potentiometer_filtered_now
 37052  000F20  20F4               	addwfc	prodh,w,c
 37053  000F22  6EDA               	movwf	fsr2h,c
 37054  000F24  0100               	movlb	0	; () banked
 37055  000F26  C06E  FFDE         	movff	?_map,postinc2
 37056  000F2A  C06F  FFDD         	movff	?_map+1,postdec2
 37057                           
 37058                           ; BSR set to: 0
 37059                           ;potentiometers.c: 120: potentiometer_filtered_now[i] = potentiometer_filtered_now[i] >>
      +                           3;
 37060  000F2E  0101               	movlb	1	; () banked
 37061  000F30  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37062  000F32  0D02               	mullw	2
 37063  000F34  0E20               	movlw	low _potentiometer_filtered_now
 37064  000F36  24F3               	addwf	prodl,w,c
 37065  000F38  6ED9               	movwf	fsr2l,c
 37066  000F3A  0E02               	movlw	high _potentiometer_filtered_now
 37067  000F3C  20F4               	addwfc	prodh,w,c
 37068  000F3E  6EDA               	movwf	fsr2h,c
 37069  000F40  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 37070  000F44  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 37071  000F48  0100               	movlb	0	; () banked
 37072  000F4A  35C3               	rlcf	(??_readPotentiometers+1)& (0+255),w,b
 37073  000F4C  33C3               	rrcf	(??_readPotentiometers+1)& (0+255),f,b
 37074  000F4E  33C2               	rrcf	??_readPotentiometers& (0+255),f,b
 37075  000F50  35C3               	rlcf	(??_readPotentiometers+1)& (0+255),w,b
 37076  000F52  33C3               	rrcf	(??_readPotentiometers+1)& (0+255),f,b
 37077  000F54  33C2               	rrcf	??_readPotentiometers& (0+255),f,b
 37078  000F56  35C3               	rlcf	(??_readPotentiometers+1)& (0+255),w,b
 37079  000F58  33C3               	rrcf	(??_readPotentiometers+1)& (0+255),f,b
 37080  000F5A  33C2               	rrcf	??_readPotentiometers& (0+255),f,b
 37081  000F5C  0101               	movlb	1	; () banked
 37082  000F5E  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37083  000F60  0D02               	mullw	2
 37084  000F62  0E20               	movlw	low _potentiometer_filtered_now
 37085  000F64  24F3               	addwf	prodl,w,c
 37086  000F66  6ED9               	movwf	fsr2l,c
 37087  000F68  0E02               	movlw	high _potentiometer_filtered_now
 37088  000F6A  20F4               	addwfc	prodh,w,c
 37089  000F6C  6EDA               	movwf	fsr2h,c
 37090  000F6E  C0C2  FFDE         	movff	??_readPotentiometers,postinc2
 37091  000F72  C0C3  FFDD         	movff	??_readPotentiometers+1,postdec2
 37092                           
 37093                           ; BSR set to: 1
 37094                           ;potentiometers.c: 124: if(potentiometer_filtered_now[i] < 0){potentiometer_filtered_now
      +                          [i] = 0;}
 37095  000F76  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37096  000F78  0D02               	mullw	2
 37097  000F7A  0E20               	movlw	low _potentiometer_filtered_now
 37098  000F7C  24F3               	addwf	prodl,w,c
 37099  000F7E  6ED9               	movwf	fsr2l,c
 37100  000F80  0E02               	movlw	high _potentiometer_filtered_now
 37101  000F82  20F4               	addwfc	prodh,w,c
 37102  000F84  6EDA               	movwf	fsr2h,c
 37103  000F86  0E01               	movlw	1
 37104  000F88  AEDB               	btfss	plusw2,7,c
 37105  000F8A  D00C               	goto	l4051
 37106                           
 37107                           ; BSR set to: 1
 37108  000F8C  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37109  000F8E  0D02               	mullw	2
 37110  000F90  0E20               	movlw	low _potentiometer_filtered_now
 37111  000F92  24F3               	addwf	prodl,w,c
 37112  000F94  6ED9               	movwf	fsr2l,c
 37113  000F96  0E02               	movlw	high _potentiometer_filtered_now
 37114  000F98  20F4               	addwfc	prodh,w,c
 37115  000F9A  6EDA               	movwf	fsr2h,c
 37116  000F9C  0E00               	movlw	0
 37117  000F9E  6EDE               	movwf	postinc2,c
 37118  000FA0  0E00               	movlw	0
 37119  000FA2  6EDD               	movwf	postdec2,c
 37120  000FA4                     l4051:
 37121                           
 37122                           ; BSR set to: 1
 37123                           ;potentiometers.c: 125: if(potentiometer_filtered_now[i] > 127){potentiometer_filtered_n
      +                          ow[i] = 127;}
 37124  000FA4  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37125  000FA6  0D02               	mullw	2
 37126  000FA8  0E20               	movlw	low _potentiometer_filtered_now
 37127  000FAA  24F3               	addwf	prodl,w,c
 37128  000FAC  6ED9               	movwf	fsr2l,c
 37129  000FAE  0E02               	movlw	high _potentiometer_filtered_now
 37130  000FB0  20F4               	addwfc	prodh,w,c
 37131  000FB2  6EDA               	movwf	fsr2h,c
 37132  000FB4  0E01               	movlw	1
 37133  000FB6  BEDB               	btfsc	plusw2,7,c
 37134  000FB8  D013               	goto	l4052
 37135  000FBA  0E01               	movlw	1
 37136  000FBC  50DB               	movf	plusw2,w,c
 37137  000FBE  E104               	bnz	u54730
 37138  000FC0  0E80               	movlw	128
 37139  000FC2  5CDE               	subwf	postinc2,w,c
 37140  000FC4  A0D8               	btfss	status,0,c
 37141  000FC6  D00C               	goto	l4052
 37142  000FC8                     u54730:
 37143                           
 37144                           ; BSR set to: 1
 37145  000FC8  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37146  000FCA  0D02               	mullw	2
 37147  000FCC  0E20               	movlw	low _potentiometer_filtered_now
 37148  000FCE  24F3               	addwf	prodl,w,c
 37149  000FD0  6ED9               	movwf	fsr2l,c
 37150  000FD2  0E02               	movlw	high _potentiometer_filtered_now
 37151  000FD4  20F4               	addwfc	prodh,w,c
 37152  000FD6  6EDA               	movwf	fsr2h,c
 37153  000FD8  0E7F               	movlw	127
 37154  000FDA  6EDE               	movwf	postinc2,c
 37155  000FDC  0E00               	movlw	0
 37156  000FDE  6EDD               	movwf	postdec2,c
 37157  000FE0                     l4052:
 37158                           
 37159                           ;potentiometers.c: 126: }
 37160                           ;potentiometers.c: 129: if(inputPotsArray[i].controller_resolution == 1) {
 37161                           
 37162                           ; BSR set to: 1
 37163  000FE0  0101               	movlb	1	; () banked
 37164  000FE2  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37165  000FE4  0D03               	mullw	3
 37166  000FE6  0E88               	movlw	low _inputPotsArray
 37167  000FE8  24F3               	addwf	prodl,w,c
 37168  000FEA  6ED9               	movwf	fsr2l,c
 37169  000FEC  0E02               	movlw	high _inputPotsArray
 37170  000FEE  20F4               	addwfc	prodh,w,c
 37171  000FF0  6EDA               	movwf	fsr2h,c
 37172  000FF2  0102               	movlb	2	; () banked
 37173  000FF4  A0DF               	btfss	indf2,0,c
 37174  000FF6  D09A               	goto	l4055
 37175                           
 37176                           ; BSR set to: 2
 37177                           ;potentiometers.c: 130: potentiometer_filtered_now[i] = potentiometer_filtered_now[i] <<
      +                           4;
 37178  000FF8  0101               	movlb	1	; () banked
 37179  000FFA  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37180  000FFC  0D02               	mullw	2
 37181  000FFE  0E20               	movlw	low _potentiometer_filtered_now
 37182  001000  24F3               	addwf	prodl,w,c
 37183  001002  6ED9               	movwf	fsr2l,c
 37184  001004  0E02               	movlw	high _potentiometer_filtered_now
 37185  001006  20F4               	addwfc	prodh,w,c
 37186  001008  6EDA               	movwf	fsr2h,c
 37187  00100A  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 37188  00100E  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 37189  001012  0100               	movlb	0	; () banked
 37190  001014  3BC2               	swapf	??_readPotentiometers& (0+255),f,b
 37191  001016  3BC3               	swapf	(??_readPotentiometers+1)& (0+255),f,b
 37192  001018  0EF0               	movlw	240
 37193  00101A  17C3               	andwf	(??_readPotentiometers+1)& (0+255),f,b
 37194  00101C  51C2               	movf	??_readPotentiometers& (0+255),w,b
 37195  00101E  0B0F               	andlw	15
 37196  001020  13C3               	iorwf	(??_readPotentiometers+1)& (0+255),f,b
 37197  001022  0EF0               	movlw	240
 37198  001024  17C2               	andwf	??_readPotentiometers& (0+255),f,b
 37199  001026  0101               	movlb	1	; () banked
 37200  001028  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37201  00102A  0D02               	mullw	2
 37202  00102C  0E20               	movlw	low _potentiometer_filtered_now
 37203  00102E  24F3               	addwf	prodl,w,c
 37204  001030  6ED9               	movwf	fsr2l,c
 37205  001032  0E02               	movlw	high _potentiometer_filtered_now
 37206  001034  20F4               	addwfc	prodh,w,c
 37207  001036  6EDA               	movwf	fsr2h,c
 37208  001038  C0C2  FFDE         	movff	??_readPotentiometers,postinc2
 37209  00103C  C0C3  FFDD         	movff	??_readPotentiometers+1,postdec2
 37210                           
 37211                           ; BSR set to: 1
 37212                           ;potentiometers.c: 131: potentiometer_filtered_now[i] = map(potentiometer_filtered_now[i
      +                          ], 0x50, 0x3F00, 0, 0x3FFF);
 37213  001040  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37214  001042  0D02               	mullw	2
 37215  001044  0E20               	movlw	low _potentiometer_filtered_now
 37216  001046  24F3               	addwf	prodl,w,c
 37217  001048  6ED9               	movwf	fsr2l,c
 37218  00104A  0E02               	movlw	high _potentiometer_filtered_now
 37219  00104C  20F4               	addwfc	prodh,w,c
 37220  00104E  6EDA               	movwf	fsr2h,c
 37221  001050  CFDE F06E          	movff	postinc2,map@x
 37222  001054  CFDD F06F          	movff	postdec2,map@x+1
 37223  001058  0100               	movlb	0	; () banked
 37224  00105A  0E00               	movlw	0
 37225  00105C  BF6F               	btfsc	(map@x+1)& (0+255),7,b
 37226  00105E  0EFF               	movlw	-1
 37227  001060  6F70               	movwf	(map@x+2)& (0+255),b
 37228  001062  6F71               	movwf	(map@x+3)& (0+255),b
 37229  001064  0E50               	movlw	80
 37230  001066  6F72               	movwf	map@in_min& (0+255),b
 37231  001068  0E00               	movlw	0
 37232  00106A  6F73               	movwf	(map@in_min+1)& (0+255),b
 37233  00106C  0E00               	movlw	0
 37234  00106E  6F74               	movwf	(map@in_min+2)& (0+255),b
 37235  001070  0E00               	movlw	0
 37236  001072  6F75               	movwf	(map@in_min+3)& (0+255),b
 37237  001074  0E00               	movlw	0
 37238  001076  6F76               	movwf	map@in_max& (0+255),b
 37239  001078  0E3F               	movlw	63
 37240  00107A  6F77               	movwf	(map@in_max+1)& (0+255),b
 37241  00107C  0E00               	movlw	0
 37242  00107E  6F78               	movwf	(map@in_max+2)& (0+255),b
 37243  001080  0E00               	movlw	0
 37244  001082  6F79               	movwf	(map@in_max+3)& (0+255),b
 37245  001084  0E00               	movlw	0
 37246  001086  6F7A               	movwf	map@out_min& (0+255),b
 37247  001088  0E00               	movlw	0
 37248  00108A  6F7B               	movwf	(map@out_min+1)& (0+255),b
 37249  00108C  0E00               	movlw	0
 37250  00108E  6F7C               	movwf	(map@out_min+2)& (0+255),b
 37251  001090  0E00               	movlw	0
 37252  001092  6F7D               	movwf	(map@out_min+3)& (0+255),b
 37253  001094  0EFF               	movlw	255
 37254  001096  6F7E               	movwf	map@out_max& (0+255),b
 37255  001098  0E3F               	movlw	63
 37256  00109A  6F7F               	movwf	(map@out_max+1)& (0+255),b
 37257  00109C  0E00               	movlw	0
 37258  00109E  6F80               	movwf	(map@out_max+2)& (0+255),b
 37259  0010A0  0E00               	movlw	0
 37260  0010A2  6F81               	movwf	(map@out_max+3)& (0+255),b
 37261  0010A4  EC6D  F033         	call	_map	;wreg free
 37262  0010A8  0101               	movlb	1	; () banked
 37263  0010AA  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37264  0010AC  0D02               	mullw	2
 37265  0010AE  0E20               	movlw	low _potentiometer_filtered_now
 37266  0010B0  24F3               	addwf	prodl,w,c
 37267  0010B2  6ED9               	movwf	fsr2l,c
 37268  0010B4  0E02               	movlw	high _potentiometer_filtered_now
 37269  0010B6  20F4               	addwfc	prodh,w,c
 37270  0010B8  6EDA               	movwf	fsr2h,c
 37271  0010BA  0100               	movlb	0	; () banked
 37272  0010BC  C06E  FFDE         	movff	?_map,postinc2
 37273  0010C0  C06F  FFDD         	movff	?_map+1,postdec2
 37274                           
 37275                           ; BSR set to: 0
 37276                           ;potentiometers.c: 133: if(potentiometer_filtered_now[i] < 0){potentiometer_filtered_now
      +                          [i] = 0;}
 37277  0010C4  0101               	movlb	1	; () banked
 37278  0010C6  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37279  0010C8  0D02               	mullw	2
 37280  0010CA  0E20               	movlw	low _potentiometer_filtered_now
 37281  0010CC  24F3               	addwf	prodl,w,c
 37282  0010CE  6ED9               	movwf	fsr2l,c
 37283  0010D0  0E02               	movlw	high _potentiometer_filtered_now
 37284  0010D2  20F4               	addwfc	prodh,w,c
 37285  0010D4  6EDA               	movwf	fsr2h,c
 37286  0010D6  0E01               	movlw	1
 37287  0010D8  AEDB               	btfss	plusw2,7,c
 37288  0010DA  D00C               	goto	l4054
 37289                           
 37290                           ; BSR set to: 1
 37291  0010DC  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37292  0010DE  0D02               	mullw	2
 37293  0010E0  0E20               	movlw	low _potentiometer_filtered_now
 37294  0010E2  24F3               	addwf	prodl,w,c
 37295  0010E4  6ED9               	movwf	fsr2l,c
 37296  0010E6  0E02               	movlw	high _potentiometer_filtered_now
 37297  0010E8  20F4               	addwfc	prodh,w,c
 37298  0010EA  6EDA               	movwf	fsr2h,c
 37299  0010EC  0E00               	movlw	0
 37300  0010EE  6EDE               	movwf	postinc2,c
 37301  0010F0  0E00               	movlw	0
 37302  0010F2  6EDD               	movwf	postdec2,c
 37303  0010F4                     l4054:
 37304                           
 37305                           ; BSR set to: 1
 37306                           ;potentiometers.c: 134: if(potentiometer_filtered_now[i] > 0x3FFF){potentiometer_filtere
      +                          d_now[i] = 0x3FFF;}
 37307  0010F4  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37308  0010F6  0D02               	mullw	2
 37309  0010F8  0E20               	movlw	low _potentiometer_filtered_now
 37310  0010FA  24F3               	addwf	prodl,w,c
 37311  0010FC  6ED9               	movwf	fsr2l,c
 37312  0010FE  0E02               	movlw	high _potentiometer_filtered_now
 37313  001100  20F4               	addwfc	prodh,w,c
 37314  001102  6EDA               	movwf	fsr2h,c
 37315  001104  0E01               	movlw	1
 37316  001106  BEDB               	btfsc	plusw2,7,c
 37317  001108  D011               	goto	l4055
 37318  00110A  52DE               	movf	postinc2,f,c
 37319  00110C  0E40               	movlw	64
 37320  00110E  5CDE               	subwf	postinc2,w,c
 37321  001110  A0D8               	btfss	status,0,c
 37322  001112  D00C               	goto	l4055
 37323                           
 37324                           ; BSR set to: 1
 37325  001114  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37326  001116  0D02               	mullw	2
 37327  001118  0E20               	movlw	low _potentiometer_filtered_now
 37328  00111A  24F3               	addwf	prodl,w,c
 37329  00111C  6ED9               	movwf	fsr2l,c
 37330  00111E  0E02               	movlw	high _potentiometer_filtered_now
 37331  001120  20F4               	addwfc	prodh,w,c
 37332  001122  6EDA               	movwf	fsr2h,c
 37333  001124  0EFF               	movlw	255
 37334  001126  6EDE               	movwf	postinc2,c
 37335  001128  0E3F               	movlw	63
 37336  00112A  6EDD               	movwf	postdec2,c
 37337  00112C                     l4055:
 37338                           
 37339                           ;potentiometers.c: 135: }
 37340                           ;potentiometers.c: 145: if(i==iterator_focus) {processPotentiometers(iterator_focus);}
 37341                           
 37342                           ; BSR set to: 1
 37343                           
 37344                           ; BSR set to: 1
 37345  00112C  0100               	movlb	0	; () banked
 37346  00112E  51FD               	movf	_iterator_focus& (0+255),w,b
 37347  001130  0101               	movlb	1	; () banked
 37348  001132  199D               	xorwf	readPotentiometers@i_3435& (0+255),w,b
 37349  001134  A4D8               	btfss	status,2,c
 37350  001136  D004               	goto	l4056
 37351                           
 37352                           ; BSR set to: 1
 37353  001138  0100               	movlb	0	; () banked
 37354  00113A  51FD               	movf	_iterator_focus& (0+255),w,b
 37355  00113C  ECCF  F020         	call	_processPotentiometers
 37356  001140                     l4056:
 37357                           
 37358                           ;potentiometers.c: 146: potentiometer_filtered_last[i] = ema_sum[i];
 37359  001140  0101               	movlb	1	; () banked
 37360  001142  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37361  001144  0D02               	mullw	2
 37362  001146  0E40               	movlw	low _ema_sum
 37363  001148  24F3               	addwf	prodl,w,c
 37364  00114A  6ED9               	movwf	fsr2l,c
 37365  00114C  0E02               	movlw	high _ema_sum
 37366  00114E  20F4               	addwfc	prodh,w,c
 37367  001150  6EDA               	movwf	fsr2h,c
 37368  001152  519D               	movf	readPotentiometers@i_3435& (0+255),w,b
 37369  001154  0D02               	mullw	2
 37370  001156  0E00               	movlw	low _potentiometer_filtered_last
 37371  001158  24F3               	addwf	prodl,w,c
 37372  00115A  6EE9               	movwf	fsr0l,c
 37373  00115C  0E02               	movlw	high _potentiometer_filtered_last
 37374  00115E  20F4               	addwfc	prodh,w,c
 37375  001160  6EEA               	movwf	fsr0h,c
 37376  001162  CFDE FFEE          	movff	postinc2,postinc0
 37377  001166  CFDD FFED          	movff	postdec2,postdec0
 37378  00116A                     l4040:
 37379                           
 37380                           ;potentiometers.c: 148: }
 37381                           ;potentiometers.c: 152: if (count_ISR >= number_of_interrupts) {
 37382                           
 37383                           ; BSR set to: 1
 37384  00116A  0102               	movlb	2	; () banked
 37385  00116C  51C4               	movf	_number_of_interrupts& (0+255),w,b
 37386  00116E  5D64               	subwf	_count_ISR& (0+255),w,b
 37387  001170  51C5               	movf	(_number_of_interrupts+1)& (0+255),w,b
 37388  001172  5965               	subwfb	(_count_ISR+1)& (0+255),w,b
 37389  001174  51C6               	movf	(_number_of_interrupts+2)& (0+255),w,b
 37390  001176  5966               	subwfb	(_count_ISR+2)& (0+255),w,b
 37391  001178  51C7               	movf	(_number_of_interrupts+3)& (0+255),w,b
 37392  00117A  5967               	subwfb	(_count_ISR+3)& (0+255),w,b
 37393  00117C  A0D8               	btfss	status,0,c
 37394  00117E  D007               	goto	l4057
 37395                           
 37396                           ; BSR set to: 2
 37397                           ;potentiometers.c: 154: HYST_VAL = 32;
 37398  001180  0E00               	movlw	0
 37399  001182  0101               	movlb	1	; () banked
 37400  001184  6FF4               	movwf	(_HYST_VAL+1)& (0+255),b
 37401  001186  0E20               	movlw	32
 37402  001188  6FF3               	movwf	_HYST_VAL& (0+255),b
 37403                           
 37404                           ; BSR set to: 1
 37405                           ;potentiometers.c: 161: iterator_focus = 255;
 37406  00118A  0100               	movlb	0	; () banked
 37407  00118C  69FD               	setf	_iterator_focus& (0+255),b
 37408  00118E                     l4057:
 37409                           
 37410                           ; BSR set to: 0
 37411  00118E  0101               	movlb	1	; () banked
 37412  001190  2B9D               	incf	readPotentiometers@i_3435& (0+255),f,b
 37413  001192  D529               	goto	l30317
 37414  001194                     u54790:
 37415                           
 37416                           ; BSR set to: 1
 37417                           ;potentiometers.c: 162: }
 37418                           ;potentiometers.c: 163: }
 37419                           ;potentiometers.c: 165: FIRST_READING = 1;
 37420  001194  8C05               	bsf	_FIRST_READING/(0+8),_FIRST_READING& (0+7),c
 37421                           
 37422                           ; BSR set to: 1
 37423  001196  0012               	return		;funcret
 37424  001198                     __end_of_readPotentiometers:
 37425                           	opt stack 0
 37426                           tblptru	equ	0xFF8
 37427                           tblptrh	equ	0xFF7
 37428                           tblptrl	equ	0xFF6
 37429                           tablat	equ	0xFF5
 37430                           prodh	equ	0xFF4
 37431                           prodl	equ	0xFF3
 37432                           intcon	equ	0xFF2
 37433                           intcon2	equ	0xFF1
 37434                           indf0	equ	0xFEF
 37435                           postinc0	equ	0xFEE
 37436                           postdec0	equ	0xFED
 37437                           fsr0h	equ	0xFEA
 37438                           fsr0l	equ	0xFE9
 37439                           wreg	equ	0xFE8
 37440                           postinc1	equ	0xFE6
 37441                           postdec1	equ	0xFE5
 37442                           plusw1	equ	0xFE3
 37443                           fsr1h	equ	0xFE2
 37444                           fsr1l	equ	0xFE1
 37445                           indf2	equ	0xFDF
 37446                           postinc2	equ	0xFDE
 37447                           postdec2	equ	0xFDD
 37448                           plusw2	equ	0xFDB
 37449                           fsr2h	equ	0xFDA
 37450                           fsr2l	equ	0xFD9
 37451                           status	equ	0xFD8
 37452                           
 37453 ;; *************** function _processPotentiometers *****************
 37454 ;; Defined at:
 37455 ;;		line 169 in file "potentiometers.c"
 37456 ;; Parameters:    Size  Location     Type
 37457 ;;  i               1    wreg     unsigned char 
 37458 ;; Auto vars:     Size  Location     Type
 37459 ;;  i               1    8[BANK0 ] unsigned char 
 37460 ;;  highByte        1    7[BANK0 ] unsigned char 
 37461 ;;  lowByte         1    6[BANK0 ] unsigned char 
 37462 ;; Return value:  Size  Location     Type
 37463 ;;                  1    wreg      void 
 37464 ;; Registers used:
 37465 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
 37466 ;; Tracked objects:
 37467 ;;		On entry : 0/0
 37468 ;;		On exit  : 0/0
 37469 ;;		Unchanged: 0/0
 37470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 37471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37472 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37473 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37474 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37475 ;;Total ram usage:        6 bytes
 37476 ;; Hardware stack levels used:    1
 37477 ;; Hardware stack levels required when called:    9
 37478 ;; This function calls:
 37479 ;;		_controlChange
 37480 ;;		_pitchBend
 37481 ;; This function is called by:
 37482 ;;		_readPotentiometers
 37483 ;; This function uses a non-reentrant model
 37484 ;;
 37485                           
 37486                           	psect	text105
 37487  00419E                     __ptext105:
 37488                           	opt stack 0
 37489  00419E                     _processPotentiometers:
 37490                           	opt stack 16
 37491                           
 37492                           ; BSR set to: 1
 37493                           ;incstack = 0
 37494                           ;processPotentiometers@i stored from wreg
 37495  00419E  0100               	movlb	0	; () banked
 37496  0041A0  6F68               	movwf	processPotentiometers@i& (0+255),b
 37497                           
 37498                           ;potentiometers.c: 174: number_to_display = potentiometer_filtered_now[i];
 37499  0041A2  0100               	movlb	0	; () banked
 37500  0041A4  5168               	movf	processPotentiometers@i& (0+255),w,b
 37501  0041A6  0D02               	mullw	2
 37502  0041A8  0E20               	movlw	low _potentiometer_filtered_now
 37503  0041AA  24F3               	addwf	prodl,w,c
 37504  0041AC  6ED9               	movwf	fsr2l,c
 37505  0041AE  0E02               	movlw	high _potentiometer_filtered_now
 37506  0041B0  20F4               	addwfc	prodh,w,c
 37507  0041B2  6EDA               	movwf	fsr2h,c
 37508  0041B4  CFDE F04B          	movff	postinc2,_number_to_display
 37509  0041B8  CFDD F04C          	movff	postdec2,_number_to_display+1
 37510                           
 37511                           ;potentiometers.c: 178: if (inputPotsArray[i].controller_resolution == 0){
 37512  0041BC  5168               	movf	processPotentiometers@i& (0+255),w,b
 37513  0041BE  0D03               	mullw	3
 37514  0041C0  0E88               	movlw	low _inputPotsArray
 37515  0041C2  24F3               	addwf	prodl,w,c
 37516  0041C4  6ED9               	movwf	fsr2l,c
 37517  0041C6  0E02               	movlw	high _inputPotsArray
 37518  0041C8  20F4               	addwfc	prodh,w,c
 37519  0041CA  6EDA               	movwf	fsr2h,c
 37520  0041CC  0102               	movlb	2	; () banked
 37521  0041CE  B0DF               	btfsc	indf2,0,c
 37522  0041D0  D088               	goto	l4065
 37523                           
 37524                           ; BSR set to: 2
 37525                           ;potentiometers.c: 181: DISPLAY_MODE = 0;
 37526  0041D2  0E00               	movlw	0
 37527  0041D4  0100               	movlb	0	; () banked
 37528  0041D6  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 37529                           
 37530                           ;potentiometers.c: 182: DIGIT_MODE = 0;
 37531  0041D8  0E00               	movlw	0
 37532  0041DA  6E3A               	movwf	_DIGIT_MODE,c
 37533                           
 37534                           ; BSR set to: 0
 37535                           ;potentiometers.c: 186: if(inputPotsArray[i].controller_number >= 0) {
 37536  0041DC  5168               	movf	processPotentiometers@i& (0+255),w,b
 37537  0041DE  0D03               	mullw	3
 37538  0041E0  0E01               	movlw	1
 37539  0041E2  26F3               	addwf	prodl,f,c
 37540  0041E4  0E00               	movlw	0
 37541  0041E6  22F4               	addwfc	prodh,f,c
 37542  0041E8  0E88               	movlw	low _inputPotsArray
 37543  0041EA  24F3               	addwf	prodl,w,c
 37544  0041EC  6ED9               	movwf	fsr2l,c
 37545  0041EE  0E02               	movlw	high _inputPotsArray
 37546  0041F0  20F4               	addwfc	prodh,w,c
 37547  0041F2  6EDA               	movwf	fsr2h,c
 37548  0041F4  0E00               	movlw	0
 37549  0041F6  BEDB               	btfsc	plusw2,7,c
 37550  0041F8  D01B               	goto	l4062
 37551                           
 37552                           ; BSR set to: 0
 37553                           ;potentiometers.c: 187: controlChange(channel, inputPotsArray[i].controller_number, pote
      +                          ntiometer_filtered_now[i]);
 37554  0041FA  5168               	movf	processPotentiometers@i& (0+255),w,b
 37555  0041FC  0D03               	mullw	3
 37556  0041FE  0E01               	movlw	1
 37557  004200  26F3               	addwf	prodl,f,c
 37558  004202  0E00               	movlw	0
 37559  004204  22F4               	addwfc	prodh,f,c
 37560  004206  0E88               	movlw	low _inputPotsArray
 37561  004208  24F3               	addwf	prodl,w,c
 37562  00420A  6ED9               	movwf	fsr2l,c
 37563  00420C  0E02               	movlw	high _inputPotsArray
 37564  00420E  20F4               	addwfc	prodh,w,c
 37565  004210  6EDA               	movwf	fsr2h,c
 37566  004212  50DF               	movf	indf2,w,c
 37567  004214  6F60               	movwf	controlChange@controllerNumber& (0+255),b
 37568  004216  5168               	movf	processPotentiometers@i& (0+255),w,b
 37569  004218  0D02               	mullw	2
 37570  00421A  0E20               	movlw	low _potentiometer_filtered_now
 37571  00421C  24F3               	addwf	prodl,w,c
 37572  00421E  6ED9               	movwf	fsr2l,c
 37573  004220  0E02               	movlw	high _potentiometer_filtered_now
 37574  004222  20F4               	addwfc	prodh,w,c
 37575  004224  6EDA               	movwf	fsr2h,c
 37576  004226  50DF               	movf	indf2,w,c
 37577  004228  6F61               	movwf	controlChange@value& (0+255),b
 37578  00422A  503E               	movf	_channel,w,c
 37579  00422C  ECC7  F048         	call	_controlChange
 37580  004230                     l4062:
 37581                           
 37582                           ;potentiometers.c: 188: }
 37583                           ;potentiometers.c: 191: if(inputPotsArray[i].controller_number == -1) {
 37584  004230  0100               	movlb	0	; () banked
 37585  004232  5168               	movf	processPotentiometers@i& (0+255),w,b
 37586  004234  0D03               	mullw	3
 37587  004236  0E01               	movlw	1
 37588  004238  26F3               	addwf	prodl,f,c
 37589  00423A  0E00               	movlw	0
 37590  00423C  22F4               	addwfc	prodh,f,c
 37591  00423E  0E88               	movlw	low _inputPotsArray
 37592  004240  24F3               	addwf	prodl,w,c
 37593  004242  6ED9               	movwf	fsr2l,c
 37594  004244  0E02               	movlw	high _inputPotsArray
 37595  004246  20F4               	addwfc	prodh,w,c
 37596  004248  6EDA               	movwf	fsr2h,c
 37597  00424A  28DE               	incf	postinc2,w,c
 37598  00424C  A4D8               	btfss	status,2,c
 37599  00424E  D00A               	goto	l4063
 37600                           
 37601                           ; BSR set to: 0
 37602                           ;potentiometers.c: 192: velocity = potentiometer_filtered_now[i];
 37603  004250  5168               	movf	processPotentiometers@i& (0+255),w,b
 37604  004252  0D02               	mullw	2
 37605  004254  0E20               	movlw	low _potentiometer_filtered_now
 37606  004256  24F3               	addwf	prodl,w,c
 37607  004258  6ED9               	movwf	fsr2l,c
 37608  00425A  0E02               	movlw	high _potentiometer_filtered_now
 37609  00425C  20F4               	addwfc	prodh,w,c
 37610  00425E  6EDA               	movwf	fsr2h,c
 37611  004260  50DF               	movf	indf2,w,c
 37612  004262  6E51               	movwf	_velocity,c
 37613  004264                     l4063:
 37614                           
 37615                           ; BSR set to: 0
 37616                           ;potentiometers.c: 193: }
 37617                           ;potentiometers.c: 195: if(inputPotsArray[i].controller_number == -2) {
 37618  004264  5168               	movf	processPotentiometers@i& (0+255),w,b
 37619  004266  0D03               	mullw	3
 37620  004268  0E01               	movlw	1
 37621  00426A  26F3               	addwf	prodl,f,c
 37622  00426C  0E00               	movlw	0
 37623  00426E  22F4               	addwfc	prodh,f,c
 37624  004270  0E88               	movlw	low _inputPotsArray
 37625  004272  24F3               	addwf	prodl,w,c
 37626  004274  6ED9               	movwf	fsr2l,c
 37627  004276  0E02               	movlw	high _inputPotsArray
 37628  004278  20F4               	addwfc	prodh,w,c
 37629  00427A  6EDA               	movwf	fsr2h,c
 37630  00427C  0EFE               	movlw	254
 37631  00427E  18DE               	xorwf	postinc2,w,c
 37632  004280  A4D8               	btfss	status,2,c
 37633  004282  D00F               	goto	l4064
 37634                           
 37635                           ; BSR set to: 0
 37636                           ;potentiometers.c: 196: pitchBend(channel, 0x00, potentiometer_filtered_now[i]);
 37637  004284  0E00               	movlw	0
 37638  004286  6F60               	movwf	pitchBend@lowByte& (0+255),b
 37639  004288  5168               	movf	processPotentiometers@i& (0+255),w,b
 37640  00428A  0D02               	mullw	2
 37641  00428C  0E20               	movlw	low _potentiometer_filtered_now
 37642  00428E  24F3               	addwf	prodl,w,c
 37643  004290  6ED9               	movwf	fsr2l,c
 37644  004292  0E02               	movlw	high _potentiometer_filtered_now
 37645  004294  20F4               	addwfc	prodh,w,c
 37646  004296  6EDA               	movwf	fsr2h,c
 37647  004298  50DF               	movf	indf2,w,c
 37648  00429A  6F61               	movwf	pitchBend@highByte& (0+255),b
 37649  00429C  503E               	movf	_channel,w,c
 37650  00429E  EC24  F04A         	call	_pitchBend
 37651  0042A2                     l4064:
 37652                           
 37653                           ;potentiometers.c: 197: }
 37654                           ;potentiometers.c: 200: if(inputPotsArray[i].controller_number == -3) {
 37655  0042A2  0100               	movlb	0	; () banked
 37656  0042A4  5168               	movf	processPotentiometers@i& (0+255),w,b
 37657  0042A6  0D03               	mullw	3
 37658  0042A8  0E01               	movlw	1
 37659  0042AA  26F3               	addwf	prodl,f,c
 37660  0042AC  0E00               	movlw	0
 37661  0042AE  22F4               	addwfc	prodh,f,c
 37662  0042B0  0E88               	movlw	low _inputPotsArray
 37663  0042B2  24F3               	addwf	prodl,w,c
 37664  0042B4  6ED9               	movwf	fsr2l,c
 37665  0042B6  0E02               	movlw	high _inputPotsArray
 37666  0042B8  20F4               	addwfc	prodh,w,c
 37667  0042BA  6EDA               	movwf	fsr2h,c
 37668  0042BC  0EFD               	movlw	253
 37669  0042BE  18DE               	xorwf	postinc2,w,c
 37670  0042C0  A4D8               	btfss	status,2,c
 37671  0042C2  D00F               	goto	l4065
 37672                           
 37673                           ; BSR set to: 0
 37674                           ;potentiometers.c: 201: controlChange(channel, modulation_wheel_MSB, potentiometer_filte
      +                          red_now[i]);
 37675  0042C4  0E01               	movlw	1
 37676  0042C6  6F60               	movwf	controlChange@controllerNumber& (0+255),b
 37677  0042C8  5168               	movf	processPotentiometers@i& (0+255),w,b
 37678  0042CA  0D02               	mullw	2
 37679  0042CC  0E20               	movlw	low _potentiometer_filtered_now
 37680  0042CE  24F3               	addwf	prodl,w,c
 37681  0042D0  6ED9               	movwf	fsr2l,c
 37682  0042D2  0E02               	movlw	high _potentiometer_filtered_now
 37683  0042D4  20F4               	addwfc	prodh,w,c
 37684  0042D6  6EDA               	movwf	fsr2h,c
 37685  0042D8  50DF               	movf	indf2,w,c
 37686  0042DA  6F61               	movwf	controlChange@value& (0+255),b
 37687  0042DC  503E               	movf	_channel,w,c
 37688  0042DE  ECC7  F048         	call	_controlChange
 37689  0042E2                     l4065:
 37690                           
 37691                           ;potentiometers.c: 202: }
 37692                           ;potentiometers.c: 203: }
 37693                           ;potentiometers.c: 206: if (inputPotsArray[i].controller_resolution == 1){
 37694  0042E2  0100               	movlb	0	; () banked
 37695  0042E4  5168               	movf	processPotentiometers@i& (0+255),w,b
 37696  0042E6  0D03               	mullw	3
 37697  0042E8  0E88               	movlw	low _inputPotsArray
 37698  0042EA  24F3               	addwf	prodl,w,c
 37699  0042EC  6ED9               	movwf	fsr2l,c
 37700  0042EE  0E02               	movlw	high _inputPotsArray
 37701  0042F0  20F4               	addwfc	prodh,w,c
 37702  0042F2  6EDA               	movwf	fsr2h,c
 37703  0042F4  0102               	movlb	2	; () banked
 37704  0042F6  A0DF               	btfss	indf2,0,c
 37705  0042F8  0012               	return	
 37706                           
 37707                           ; BSR set to: 2
 37708                           ;potentiometers.c: 209: DISPLAY_MODE = 0;
 37709  0042FA  0E00               	movlw	0
 37710  0042FC  0100               	movlb	0	; () banked
 37711  0042FE  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 37712                           
 37713                           ;potentiometers.c: 210: DIGIT_MODE = 2;
 37714  004300  0E02               	movlw	2
 37715  004302  6E3A               	movwf	_DIGIT_MODE,c
 37716                           
 37717                           ; BSR set to: 0
 37718                           ;potentiometers.c: 214: unsigned char lowByte = (potentiometer_filtered_now[i]) & 0x7F;
 37719  004304  5168               	movf	processPotentiometers@i& (0+255),w,b
 37720  004306  0D02               	mullw	2
 37721  004308  0E20               	movlw	low _potentiometer_filtered_now
 37722  00430A  24F3               	addwf	prodl,w,c
 37723  00430C  6ED9               	movwf	fsr2l,c
 37724  00430E  0E02               	movlw	high _potentiometer_filtered_now
 37725  004310  20F4               	addwfc	prodh,w,c
 37726  004312  6EDA               	movwf	fsr2h,c
 37727  004314  50DF               	movf	indf2,w,c
 37728  004316  0B7F               	andlw	127
 37729  004318  6F66               	movwf	processPotentiometers@lowByte& (0+255),b
 37730                           
 37731                           ; BSR set to: 0
 37732                           ;potentiometers.c: 215: unsigned char highByte = (potentiometer_filtered_now[i] >> 7) & 
      +                          0x7F;
 37733  00431A  5168               	movf	processPotentiometers@i& (0+255),w,b
 37734  00431C  0D02               	mullw	2
 37735  00431E  0E20               	movlw	low _potentiometer_filtered_now
 37736  004320  24F3               	addwf	prodl,w,c
 37737  004322  6ED9               	movwf	fsr2l,c
 37738  004324  0E02               	movlw	high _potentiometer_filtered_now
 37739  004326  20F4               	addwfc	prodh,w,c
 37740  004328  6EDA               	movwf	fsr2h,c
 37741  00432A  CFDE F063          	movff	postinc2,??_processPotentiometers
 37742  00432E  CFDD F064          	movff	postdec2,??_processPotentiometers+1
 37743  004332  0E07               	movlw	7
 37744  004334  6F65               	movwf	(??_processPotentiometers+2)& (0+255),b
 37745  004336                     u51455:
 37746  004336  3564               	rlcf	(??_processPotentiometers+1)& (0+255),w,b
 37747  004338  3364               	rrcf	(??_processPotentiometers+1)& (0+255),f,b
 37748  00433A  3363               	rrcf	??_processPotentiometers& (0+255),f,b
 37749  00433C  2F65               	decfsz	(??_processPotentiometers+2)& (0+255),f,b
 37750  00433E  D7FB               	goto	u51455
 37751  004340  5163               	movf	??_processPotentiometers& (0+255),w,b
 37752  004342  0B7F               	andlw	127
 37753  004344  6F67               	movwf	processPotentiometers@highByte& (0+255),b
 37754                           
 37755                           ; BSR set to: 0
 37756                           ;potentiometers.c: 218: if(inputPotsArray[i].controller_number_two_byte >= 0) {
 37757  004346  5168               	movf	processPotentiometers@i& (0+255),w,b
 37758  004348  0D03               	mullw	3
 37759  00434A  0E02               	movlw	2
 37760  00434C  26F3               	addwf	prodl,f,c
 37761  00434E  0E00               	movlw	0
 37762  004350  22F4               	addwfc	prodh,f,c
 37763  004352  0E88               	movlw	low _inputPotsArray
 37764  004354  24F3               	addwf	prodl,w,c
 37765  004356  6ED9               	movwf	fsr2l,c
 37766  004358  0E02               	movlw	high _inputPotsArray
 37767  00435A  20F4               	addwfc	prodh,w,c
 37768  00435C  6EDA               	movwf	fsr2h,c
 37769  00435E  0E00               	movlw	0
 37770  004360  BEDB               	btfsc	plusw2,7,c
 37771  004362  D028               	goto	l4067
 37772                           
 37773                           ; BSR set to: 0
 37774                           ;potentiometers.c: 219: controlChange(channel, inputPotsArray[i].controller_number_two_b
      +                          yte, highByte);
 37775  004364  5168               	movf	processPotentiometers@i& (0+255),w,b
 37776  004366  0D03               	mullw	3
 37777  004368  0E02               	movlw	2
 37778  00436A  26F3               	addwf	prodl,f,c
 37779  00436C  0E00               	movlw	0
 37780  00436E  22F4               	addwfc	prodh,f,c
 37781  004370  0E88               	movlw	low _inputPotsArray
 37782  004372  24F3               	addwf	prodl,w,c
 37783  004374  6ED9               	movwf	fsr2l,c
 37784  004376  0E02               	movlw	high _inputPotsArray
 37785  004378  20F4               	addwfc	prodh,w,c
 37786  00437A  6EDA               	movwf	fsr2h,c
 37787  00437C  50DF               	movf	indf2,w,c
 37788  00437E  6F60               	movwf	controlChange@controllerNumber& (0+255),b
 37789  004380  C067  F061         	movff	processPotentiometers@highByte,controlChange@value
 37790  004384  503E               	movf	_channel,w,c
 37791  004386  ECC7  F048         	call	_controlChange
 37792                           
 37793                           ;potentiometers.c: 220: controlChange(channel, inputPotsArray[i].controller_number_two_b
      +                          yte + 32, lowByte);
 37794  00438A  0100               	movlb	0	; () banked
 37795  00438C  5168               	movf	processPotentiometers@i& (0+255),w,b
 37796  00438E  0D03               	mullw	3
 37797  004390  0E02               	movlw	2
 37798  004392  26F3               	addwf	prodl,f,c
 37799  004394  0E00               	movlw	0
 37800  004396  22F4               	addwfc	prodh,f,c
 37801  004398  0E88               	movlw	low _inputPotsArray
 37802  00439A  24F3               	addwf	prodl,w,c
 37803  00439C  6ED9               	movwf	fsr2l,c
 37804  00439E  0E02               	movlw	high _inputPotsArray
 37805  0043A0  20F4               	addwfc	prodh,w,c
 37806  0043A2  6EDA               	movwf	fsr2h,c
 37807  0043A4  50DF               	movf	indf2,w,c
 37808  0043A6  0F20               	addlw	32
 37809  0043A8  6F60               	movwf	controlChange@controllerNumber& (0+255),b
 37810  0043AA  C066  F061         	movff	processPotentiometers@lowByte,controlChange@value
 37811  0043AE  503E               	movf	_channel,w,c
 37812  0043B0  ECC7  F048         	call	_controlChange
 37813  0043B4                     l4067:
 37814                           
 37815                           ;potentiometers.c: 221: }
 37816                           ;potentiometers.c: 223: if(inputPotsArray[i].controller_number_two_byte == -1) {
 37817  0043B4  0100               	movlb	0	; () banked
 37818  0043B6  5168               	movf	processPotentiometers@i& (0+255),w,b
 37819  0043B8  0D03               	mullw	3
 37820  0043BA  0E02               	movlw	2
 37821  0043BC  26F3               	addwf	prodl,f,c
 37822  0043BE  0E00               	movlw	0
 37823  0043C0  22F4               	addwfc	prodh,f,c
 37824  0043C2  0E88               	movlw	low _inputPotsArray
 37825  0043C4  24F3               	addwf	prodl,w,c
 37826  0043C6  6ED9               	movwf	fsr2l,c
 37827  0043C8  0E02               	movlw	high _inputPotsArray
 37828  0043CA  20F4               	addwfc	prodh,w,c
 37829  0043CC  6EDA               	movwf	fsr2h,c
 37830  0043CE  28DE               	incf	postinc2,w,c
 37831  0043D0  B4D8               	btfsc	status,2,c
 37832                           
 37833                           ; BSR set to: 0
 37834                           ;potentiometers.c: 224: velocity = highByte;
 37835  0043D2  C067  F051         	movff	processPotentiometers@highByte,_velocity
 37836                           
 37837                           ; BSR set to: 0
 37838                           ;potentiometers.c: 225: }
 37839                           ;potentiometers.c: 227: if(inputPotsArray[i].controller_number_two_byte == -2) {
 37840                           
 37841                           ; BSR set to: 0
 37842  0043D6  5168               	movf	processPotentiometers@i& (0+255),w,b
 37843  0043D8  0D03               	mullw	3
 37844  0043DA  0E02               	movlw	2
 37845  0043DC  26F3               	addwf	prodl,f,c
 37846  0043DE  0E00               	movlw	0
 37847  0043E0  22F4               	addwfc	prodh,f,c
 37848  0043E2  0E88               	movlw	low _inputPotsArray
 37849  0043E4  24F3               	addwf	prodl,w,c
 37850  0043E6  6ED9               	movwf	fsr2l,c
 37851  0043E8  0E02               	movlw	high _inputPotsArray
 37852  0043EA  20F4               	addwfc	prodh,w,c
 37853  0043EC  6EDA               	movwf	fsr2h,c
 37854  0043EE  0EFE               	movlw	254
 37855  0043F0  18DE               	xorwf	postinc2,w,c
 37856  0043F2  A4D8               	btfss	status,2,c
 37857  0043F4  D007               	goto	l4069
 37858                           
 37859                           ; BSR set to: 0
 37860                           ;potentiometers.c: 228: pitchBend(channel, lowByte, highByte);
 37861  0043F6  C066  F060         	movff	processPotentiometers@lowByte,pitchBend@lowByte
 37862  0043FA  C067  F061         	movff	processPotentiometers@highByte,pitchBend@highByte
 37863  0043FE  503E               	movf	_channel,w,c
 37864  004400  EC24  F04A         	call	_pitchBend
 37865  004404                     l4069:
 37866                           
 37867                           ;potentiometers.c: 229: }
 37868                           ;potentiometers.c: 231: if(inputPotsArray[i].controller_number_two_byte == -3) {
 37869  004404  0100               	movlb	0	; () banked
 37870  004406  5168               	movf	processPotentiometers@i& (0+255),w,b
 37871  004408  0D03               	mullw	3
 37872  00440A  0E02               	movlw	2
 37873  00440C  26F3               	addwf	prodl,f,c
 37874  00440E  0E00               	movlw	0
 37875  004410  22F4               	addwfc	prodh,f,c
 37876  004412  0E88               	movlw	low _inputPotsArray
 37877  004414  24F3               	addwf	prodl,w,c
 37878  004416  6ED9               	movwf	fsr2l,c
 37879  004418  0E02               	movlw	high _inputPotsArray
 37880  00441A  20F4               	addwfc	prodh,w,c
 37881  00441C  6EDA               	movwf	fsr2h,c
 37882  00441E  0EFD               	movlw	253
 37883  004420  18DE               	xorwf	postinc2,w,c
 37884  004422  A4D8               	btfss	status,2,c
 37885  004424  0012               	return	
 37886                           
 37887                           ; BSR set to: 0
 37888                           ;potentiometers.c: 232: controlChange(channel, modulation_wheel_MSB, highByte);
 37889  004426  0E01               	movlw	1
 37890  004428  6F60               	movwf	controlChange@controllerNumber& (0+255),b
 37891  00442A  C067  F061         	movff	processPotentiometers@highByte,controlChange@value
 37892  00442E  503E               	movf	_channel,w,c
 37893  004430  ECC7  F048         	call	_controlChange
 37894                           
 37895                           ;potentiometers.c: 233: controlChange(channel, modulation_wheel_MSB + 32, lowByte);
 37896  004434  0E21               	movlw	33
 37897  004436  0100               	movlb	0	; () banked
 37898  004438  6F60               	movwf	controlChange@controllerNumber& (0+255),b
 37899  00443A  C066  F061         	movff	processPotentiometers@lowByte,controlChange@value
 37900  00443E  503E               	movf	_channel,w,c
 37901  004440  ECC7  F048         	call	_controlChange
 37902  004444  0012               	return	
 37903  004446                     __end_of_processPotentiometers:
 37904                           	opt stack 0
 37905                           tblptru	equ	0xFF8
 37906                           tblptrh	equ	0xFF7
 37907                           tblptrl	equ	0xFF6
 37908                           tablat	equ	0xFF5
 37909                           prodh	equ	0xFF4
 37910                           prodl	equ	0xFF3
 37911                           intcon	equ	0xFF2
 37912                           intcon2	equ	0xFF1
 37913                           indf0	equ	0xFEF
 37914                           postinc0	equ	0xFEE
 37915                           postdec0	equ	0xFED
 37916                           fsr0h	equ	0xFEA
 37917                           fsr0l	equ	0xFE9
 37918                           wreg	equ	0xFE8
 37919                           postinc1	equ	0xFE6
 37920                           postdec1	equ	0xFE5
 37921                           plusw1	equ	0xFE3
 37922                           fsr1h	equ	0xFE2
 37923                           fsr1l	equ	0xFE1
 37924                           indf2	equ	0xFDF
 37925                           postinc2	equ	0xFDE
 37926                           postdec2	equ	0xFDD
 37927                           plusw2	equ	0xFDB
 37928                           fsr2h	equ	0xFDA
 37929                           fsr2l	equ	0xFD9
 37930                           status	equ	0xFD8
 37931                           
 37932 ;; *************** function _pitchBend *****************
 37933 ;; Defined at:
 37934 ;;		line 206 in file "midi.c"
 37935 ;; Parameters:    Size  Location     Type
 37936 ;;  channel         1    wreg     unsigned char 
 37937 ;;  lowByte         1    0[BANK0 ] unsigned char 
 37938 ;;  highByte        1    1[BANK0 ] unsigned char 
 37939 ;; Auto vars:     Size  Location     Type
 37940 ;;  channel         1    2[BANK0 ] unsigned char 
 37941 ;; Return value:  Size  Location     Type
 37942 ;;                  1    wreg      void 
 37943 ;; Registers used:
 37944 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
 37945 ;; Tracked objects:
 37946 ;;		On entry : 0/0
 37947 ;;		On exit  : 0/0
 37948 ;;		Unchanged: 0/0
 37949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 37950 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37951 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37952 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37953 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37954 ;;Total ram usage:        3 bytes
 37955 ;; Hardware stack levels used:    1
 37956 ;; Hardware stack levels required when called:    8
 37957 ;; This function calls:
 37958 ;;		___lbmod
 37959 ;;		_key_press_release_note_off
 37960 ;;		_sendOut
 37961 ;;		_sendUSB
 37962 ;; This function is called by:
 37963 ;;		_processPotentiometers
 37964 ;; This function uses a non-reentrant model
 37965 ;;
 37966                           
 37967                           	psect	text106
 37968  009448                     __ptext106:
 37969                           	opt stack 0
 37970  009448                     _pitchBend:
 37971                           	opt stack 16
 37972                           
 37973                           ;incstack = 0
 37974                           ;pitchBend@channel stored from wreg
 37975  009448  0100               	movlb	0	; () banked
 37976  00944A  6F62               	movwf	pitchBend@channel& (0+255),b
 37977                           
 37978                           ;midi.c: 209: if((note_off_was_sent == 0) && ((TIMER_OVERFLOWS % NOTE_LENGTH_PULSES) == 
      +                          0)){
 37979  00944C  B002               	btfsc	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 37980  00944E  D00A               	goto	l500
 37981  009450  504D               	movf	_NOTE_LENGTH_PULSES,w,c
 37982  009452  6EE6               	movwf	postinc1,c
 37983  009454  502E               	movf	_TIMER_OVERFLOWS,w,c
 37984  009456  6EE6               	movwf	postinc1,c
 37985  009458  EC61  F041         	call	___lbmod	;wreg free
 37986  00945C  503F               	movf	btemp,w,c
 37987  00945E  B4D8               	btfsc	status,2,c
 37988                           
 37989                           ;midi.c: 211: key_press_release_note_off();
 37990  009460  EC8B  F02E         	call	_key_press_release_note_off	;wreg free
 37991  009464                     l500:
 37992                           
 37993                           ;midi.c: 212: }
 37994                           ;midi.c: 214: statusByte = channel | pitch_bend;
 37995  009464  0100               	movlb	0	; () banked
 37996  009466  5162               	movf	pitchBend@channel& (0+255),w,b
 37997  009468  09E0               	iorlw	224
 37998  00946A  6E3D               	movwf	_statusByte,c
 37999                           
 38000                           ; BSR set to: 0
 38001                           ;midi.c: 217: sendUSB(statusByte, lowByte, highByte);
 38002  00946C  5161               	movf	pitchBend@highByte& (0+255),w,b
 38003  00946E  6EE6               	movwf	postinc1,c
 38004  009470  5160               	movf	pitchBend@lowByte& (0+255),w,b
 38005  009472  6EE6               	movwf	postinc1,c
 38006  009474  503D               	movf	_statusByte,w,c
 38007  009476  6EE6               	movwf	postinc1,c
 38008  009478  ECDB  F036         	call	_sendUSB	;wreg free
 38009                           
 38010                           ;midi.c: 220: sendOut(statusByte, lowByte, highByte);
 38011  00947C  0100               	movlb	0	; () banked
 38012  00947E  5161               	movf	pitchBend@highByte& (0+255),w,b
 38013  009480  6EE6               	movwf	postinc1,c
 38014  009482  5160               	movf	pitchBend@lowByte& (0+255),w,b
 38015  009484  6EE6               	movwf	postinc1,c
 38016  009486  503D               	movf	_statusByte,w,c
 38017  009488  6EE6               	movwf	postinc1,c
 38018  00948A  EC64  F036         	call	_sendOut	;wreg free
 38019  00948E  0012               	return		;funcret
 38020  009490                     __end_of_pitchBend:
 38021                           	opt stack 0
 38022                           tblptru	equ	0xFF8
 38023                           tblptrh	equ	0xFF7
 38024                           tblptrl	equ	0xFF6
 38025                           tablat	equ	0xFF5
 38026                           prodh	equ	0xFF4
 38027                           prodl	equ	0xFF3
 38028                           intcon	equ	0xFF2
 38029                           intcon2	equ	0xFF1
 38030                           indf0	equ	0xFEF
 38031                           postinc0	equ	0xFEE
 38032                           postdec0	equ	0xFED
 38033                           fsr0h	equ	0xFEA
 38034                           fsr0l	equ	0xFE9
 38035                           wreg	equ	0xFE8
 38036                           postinc1	equ	0xFE6
 38037                           postdec1	equ	0xFE5
 38038                           plusw1	equ	0xFE3
 38039                           fsr1h	equ	0xFE2
 38040                           fsr1l	equ	0xFE1
 38041                           indf2	equ	0xFDF
 38042                           postinc2	equ	0xFDE
 38043                           postdec2	equ	0xFDD
 38044                           plusw2	equ	0xFDB
 38045                           fsr2h	equ	0xFDA
 38046                           fsr2l	equ	0xFD9
 38047                           status	equ	0xFD8
 38048                           
 38049 ;; *************** function _controlChange *****************
 38050 ;; Defined at:
 38051 ;;		line 179 in file "midi.c"
 38052 ;; Parameters:    Size  Location     Type
 38053 ;;  channel         1    wreg     unsigned char 
 38054 ;;  controllerNu    1    0[BANK0 ] unsigned char 
 38055 ;;  value           1    1[BANK0 ] unsigned char 
 38056 ;; Auto vars:     Size  Location     Type
 38057 ;;  channel         1    2[BANK0 ] unsigned char 
 38058 ;; Return value:  Size  Location     Type
 38059 ;;                  1    wreg      void 
 38060 ;; Registers used:
 38061 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
 38062 ;; Tracked objects:
 38063 ;;		On entry : 0/0
 38064 ;;		On exit  : 0/0
 38065 ;;		Unchanged: 0/0
 38066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38067 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38068 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38070 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38071 ;;Total ram usage:        3 bytes
 38072 ;; Hardware stack levels used:    1
 38073 ;; Hardware stack levels required when called:    8
 38074 ;; This function calls:
 38075 ;;		___lbmod
 38076 ;;		_key_press_release_note_off
 38077 ;;		_sendOut
 38078 ;;		_sendUSB
 38079 ;; This function is called by:
 38080 ;;		_processDrumpad
 38081 ;;		_processPotentiometers
 38082 ;;		_panic_button
 38083 ;; This function uses a non-reentrant model
 38084 ;;
 38085                           
 38086                           	psect	text107
 38087  00918E                     __ptext107:
 38088                           	opt stack 0
 38089  00918E                     _controlChange:
 38090                           	opt stack 21
 38091                           
 38092                           ;incstack = 0
 38093                           ;controlChange@channel stored from wreg
 38094  00918E  0100               	movlb	0	; () banked
 38095  009190  6F62               	movwf	controlChange@channel& (0+255),b
 38096                           
 38097                           ;midi.c: 182: if((note_off_was_sent == 0) && ((TIMER_OVERFLOWS % NOTE_LENGTH_PULSES) == 
      +                          0)){
 38098  009192  B002               	btfsc	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38099  009194  D00A               	goto	l496
 38100  009196  504D               	movf	_NOTE_LENGTH_PULSES,w,c
 38101  009198  6EE6               	movwf	postinc1,c
 38102  00919A  502E               	movf	_TIMER_OVERFLOWS,w,c
 38103  00919C  6EE6               	movwf	postinc1,c
 38104  00919E  EC61  F041         	call	___lbmod	;wreg free
 38105  0091A2  503F               	movf	btemp,w,c
 38106  0091A4  B4D8               	btfsc	status,2,c
 38107                           
 38108                           ;midi.c: 184: key_press_release_note_off();
 38109  0091A6  EC8B  F02E         	call	_key_press_release_note_off	;wreg free
 38110  0091AA                     l496:
 38111                           
 38112                           ;midi.c: 185: }
 38113                           ;midi.c: 187: statusByte = channel | control_change;
 38114  0091AA  0100               	movlb	0	; () banked
 38115  0091AC  5162               	movf	controlChange@channel& (0+255),w,b
 38116  0091AE  09B0               	iorlw	176
 38117  0091B0  6E3D               	movwf	_statusByte,c
 38118                           
 38119                           ; BSR set to: 0
 38120                           ;midi.c: 190: sendUSB(statusByte, controllerNumber, value);
 38121  0091B2  5161               	movf	controlChange@value& (0+255),w,b
 38122  0091B4  6EE6               	movwf	postinc1,c
 38123  0091B6  5160               	movf	controlChange@controllerNumber& (0+255),w,b
 38124  0091B8  6EE6               	movwf	postinc1,c
 38125  0091BA  503D               	movf	_statusByte,w,c
 38126  0091BC  6EE6               	movwf	postinc1,c
 38127  0091BE  ECDB  F036         	call	_sendUSB	;wreg free
 38128                           
 38129                           ;midi.c: 194: GLOBAL_STATUS_BYTE = statusByte;
 38130  0091C2  C03D  F181         	movff	_statusByte,_GLOBAL_STATUS_BYTE
 38131                           
 38132                           ;midi.c: 195: GLOBAL_CC_NUMBER = controllerNumber;
 38133  0091C6  C060  F0F4         	movff	controlChange@controllerNumber,_GLOBAL_CC_NUMBER
 38134                           
 38135                           ;midi.c: 196: GLOBAL_CC_VALUE = value;
 38136  0091CA  C061  F180         	movff	controlChange@value,_GLOBAL_CC_VALUE
 38137                           
 38138                           ;midi.c: 198: CONTROL_CHANGE_IS_BEING_SENT = 1;
 38139  0091CE  8206               	bsf	_CONTROL_CHANGE_IS_BEING_SENT/(0+8),_CONTROL_CHANGE_IS_BEING_SENT& (0+7),c
 38140                           
 38141                           ;midi.c: 199: sendOut(statusByte, controllerNumber, value);
 38142  0091D0  0100               	movlb	0	; () banked
 38143  0091D2  5161               	movf	controlChange@value& (0+255),w,b
 38144  0091D4  6EE6               	movwf	postinc1,c
 38145  0091D6  5160               	movf	controlChange@controllerNumber& (0+255),w,b
 38146  0091D8  6EE6               	movwf	postinc1,c
 38147  0091DA  503D               	movf	_statusByte,w,c
 38148  0091DC  6EE6               	movwf	postinc1,c
 38149  0091DE  EC64  F036         	call	_sendOut	;wreg free
 38150                           
 38151                           ;midi.c: 202: CONTROL_CHANGE_IS_BEING_SENT = 0;
 38152  0091E2  9206               	bcf	_CONTROL_CHANGE_IS_BEING_SENT/(0+8),_CONTROL_CHANGE_IS_BEING_SENT& (0+7),c
 38153  0091E4  0012               	return		;funcret
 38154  0091E6                     __end_of_controlChange:
 38155                           	opt stack 0
 38156                           tblptru	equ	0xFF8
 38157                           tblptrh	equ	0xFF7
 38158                           tblptrl	equ	0xFF6
 38159                           tablat	equ	0xFF5
 38160                           prodh	equ	0xFF4
 38161                           prodl	equ	0xFF3
 38162                           intcon	equ	0xFF2
 38163                           intcon2	equ	0xFF1
 38164                           indf0	equ	0xFEF
 38165                           postinc0	equ	0xFEE
 38166                           postdec0	equ	0xFED
 38167                           fsr0h	equ	0xFEA
 38168                           fsr0l	equ	0xFE9
 38169                           wreg	equ	0xFE8
 38170                           postinc1	equ	0xFE6
 38171                           postdec1	equ	0xFE5
 38172                           plusw1	equ	0xFE3
 38173                           fsr1h	equ	0xFE2
 38174                           fsr1l	equ	0xFE1
 38175                           indf2	equ	0xFDF
 38176                           postinc2	equ	0xFDE
 38177                           postdec2	equ	0xFDD
 38178                           plusw2	equ	0xFDB
 38179                           fsr2h	equ	0xFDA
 38180                           fsr2l	equ	0xFD9
 38181                           status	equ	0xFD8
 38182                           
 38183 ;; *************** function _key_press_release_note_off *****************
 38184 ;; Defined at:
 38185 ;;		line 110 in file "arpeggio.c"
 38186 ;; Parameters:    Size  Location     Type
 38187 ;;		None
 38188 ;; Auto vars:     Size  Location     Type
 38189 ;;		None
 38190 ;; Return value:  Size  Location     Type
 38191 ;;                  1    wreg      void 
 38192 ;; Registers used:
 38193 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh
 38194 ;; Tracked objects:
 38195 ;;		On entry : 0/0
 38196 ;;		On exit  : 0/0
 38197 ;;		Unchanged: 0/0
 38198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38203 ;;Total ram usage:        0 bytes
 38204 ;; Hardware stack levels used:    1
 38205 ;; Hardware stack levels required when called:    7
 38206 ;; This function calls:
 38207 ;;		_noteOff
 38208 ;; This function is called by:
 38209 ;;		_controlChange
 38210 ;;		_pitchBend
 38211 ;;		_programChange
 38212 ;;		_playThisNotePentatonic
 38213 ;;		_playTriad
 38214 ;;		_playSeventh
 38215 ;;		_playThisNote
 38216 ;;		_playThisNote8
 38217 ;;		_playDiatonicTriadMajor
 38218 ;;		_playDiatonicSeventhMajor
 38219 ;;		_playDiatonicTriadMinor
 38220 ;;		_playDiatonicSeventhMinor
 38221 ;;		_keyboardTranspose
 38222 ;;		_processOctave
 38223 ;; This function uses a non-reentrant model
 38224 ;;
 38225                           
 38226                           	psect	text108
 38227  005D16                     __ptext108:
 38228                           	opt stack 0
 38229  005D16                     _key_press_release_note_off:
 38230                           	opt stack 21
 38231                           
 38232                           ;arpeggio.c: 113: if((startingDirection == UP) && (ARPEGGIO_TYPE == DOWN_UP)){stored_oct
      +                          ave += (OCTAVES - 1);}
 38233                           
 38234                           ;incstack = 0
 38235  005D16  5034               	movf	_startingDirection,w,c
 38236  005D18  A4D8               	btfss	status,2,c
 38237  005D1A  D006               	goto	l5428
 38238  005D1C  0E03               	movlw	3
 38239  005D1E  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 38240  005D20  A4D8               	btfss	status,2,c
 38241  005D22  D002               	goto	l5428
 38242  005D24  044E               	decf	_OCTAVES,w,c
 38243  005D26  2631               	addwf	_stored_octave,f,c
 38244  005D28                     l5428:
 38245                           
 38246                           ;arpeggio.c: 115: if((startingDirection == DOWN) && (ARPEGGIO_TYPE == UP_DOWN)){stored_o
      +                          ctave -= (OCTAVES - 1);}
 38247  005D28  0434               	decf	_startingDirection,w,c
 38248  005D2A  A4D8               	btfss	status,2,c
 38249  005D2C  D006               	goto	l5429
 38250  005D2E  0E02               	movlw	2
 38251  005D30  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 38252  005D32  A4D8               	btfss	status,2,c
 38253  005D34  D002               	goto	l5429
 38254  005D36  044E               	decf	_OCTAVES,w,c
 38255  005D38  5E31               	subwf	_stored_octave,f,c
 38256  005D3A                     l5429:
 38257                           
 38258                           ;arpeggio.c: 118: TMR0ON = 0;
 38259  005D3A  9ED5               	bcf	4053,7,c	;volatile
 38260                           
 38261                           ;arpeggio.c: 122: static signed char temp;
 38262                           ;arpeggio.c: 123: temp = last_note;
 38263  005D3C  C0EC  F02C         	movff	_last_note,key_press_release_note_off@temp
 38264                           
 38265                           ;arpeggio.c: 126: if((last_note != 0)){
 38266  005D40  0100               	movlb	0	; () banked
 38267  005D42  51EC               	movf	_last_note& (0+255),w,b
 38268  005D44  B4D8               	btfsc	status,2,c
 38269  005D46  D077               	goto	l5432
 38270                           
 38271                           ; BSR set to: 0
 38272                           ;arpeggio.c: 127: if(stored_octave == -3){noteOff(channel, temp - ((OCTAVES - (OCTAVES -
      +                           3)) * 12), velocity);}
 38273  005D48  0EFD               	movlw	253
 38274  005D4A  1831               	xorwf	_stored_octave,w,c
 38275  005D4C  A4D8               	btfss	status,2,c
 38276  005D4E  D00F               	goto	l5433
 38277                           
 38278                           ; BSR set to: 0
 38279  005D50  5051               	movf	_velocity,w,c
 38280  005D52  6EE6               	movwf	postinc1,c
 38281  005D54  504E               	movf	_OCTAVES,w,c
 38282  005D56  0FFD               	addlw	253
 38283  005D58  0800               	sublw	0
 38284  005D5A  244E               	addwf	_OCTAVES,w,c
 38285  005D5C  0D0C               	mullw	12
 38286  005D5E  50F3               	movf	prodl,w,c
 38287  005D60  0800               	sublw	0
 38288  005D62  242C               	addwf	key_press_release_note_off@temp,w,c
 38289  005D64  6EE6               	movwf	postinc1,c
 38290  005D66  503E               	movf	_channel,w,c
 38291  005D68  6EE6               	movwf	postinc1,c
 38292  005D6A  EC48  F04A         	call	_noteOff	;wreg free
 38293  005D6E                     l5433:
 38294                           
 38295                           ;arpeggio.c: 128: if(stored_octave == -2){noteOff(channel, temp - ((OCTAVES - (OCTAVES -
      +                           2)) * 12), velocity);}
 38296  005D6E  0EFE               	movlw	254
 38297  005D70  1831               	xorwf	_stored_octave,w,c
 38298  005D72  A4D8               	btfss	status,2,c
 38299  005D74  D00F               	goto	l5434
 38300  005D76  5051               	movf	_velocity,w,c
 38301  005D78  6EE6               	movwf	postinc1,c
 38302  005D7A  504E               	movf	_OCTAVES,w,c
 38303  005D7C  0FFE               	addlw	254
 38304  005D7E  0800               	sublw	0
 38305  005D80  244E               	addwf	_OCTAVES,w,c
 38306  005D82  0D0C               	mullw	12
 38307  005D84  50F3               	movf	prodl,w,c
 38308  005D86  0800               	sublw	0
 38309  005D88  242C               	addwf	key_press_release_note_off@temp,w,c
 38310  005D8A  6EE6               	movwf	postinc1,c
 38311  005D8C  503E               	movf	_channel,w,c
 38312  005D8E  6EE6               	movwf	postinc1,c
 38313  005D90  EC48  F04A         	call	_noteOff	;wreg free
 38314  005D94                     l5434:
 38315                           
 38316                           ;arpeggio.c: 129: if(stored_octave == -1){noteOff(channel, temp - ((OCTAVES - (OCTAVES -
      +                           1)) * 12), velocity);}
 38317  005D94  2831               	incf	_stored_octave,w,c
 38318  005D96  A4D8               	btfss	status,2,c
 38319  005D98  D00E               	goto	l5435
 38320  005D9A  5051               	movf	_velocity,w,c
 38321  005D9C  6EE6               	movwf	postinc1,c
 38322  005D9E  044E               	decf	_OCTAVES,w,c
 38323  005DA0  0800               	sublw	0
 38324  005DA2  244E               	addwf	_OCTAVES,w,c
 38325  005DA4  0D0C               	mullw	12
 38326  005DA6  50F3               	movf	prodl,w,c
 38327  005DA8  0800               	sublw	0
 38328  005DAA  242C               	addwf	key_press_release_note_off@temp,w,c
 38329  005DAC  6EE6               	movwf	postinc1,c
 38330  005DAE  503E               	movf	_channel,w,c
 38331  005DB0  6EE6               	movwf	postinc1,c
 38332  005DB2  EC48  F04A         	call	_noteOff	;wreg free
 38333  005DB6                     l5435:
 38334                           
 38335                           ;arpeggio.c: 131: if(stored_octave == 0){
 38336  005DB6  5031               	movf	_stored_octave,w,c
 38337  005DB8  A4D8               	btfss	status,2,c
 38338  005DBA  D008               	goto	l5436
 38339                           
 38340                           ;arpeggio.c: 132: noteOff(channel, temp, velocity);
 38341  005DBC  5051               	movf	_velocity,w,c
 38342  005DBE  6EE6               	movwf	postinc1,c
 38343  005DC0  502C               	movf	key_press_release_note_off@temp,w,c
 38344  005DC2  6EE6               	movwf	postinc1,c
 38345  005DC4  503E               	movf	_channel,w,c
 38346  005DC6  6EE6               	movwf	postinc1,c
 38347  005DC8  EC48  F04A         	call	_noteOff	;wreg free
 38348  005DCC                     l5436:
 38349                           
 38350                           ;arpeggio.c: 133: }
 38351                           ;arpeggio.c: 135: if(stored_octave == 1){noteOff(channel, temp + ((OCTAVES - (OCTAVES - 
      +                          1)) * 12), velocity);}
 38352  005DCC  0431               	decf	_stored_octave,w,c
 38353  005DCE  A4D8               	btfss	status,2,c
 38354  005DD0  D00D               	goto	l5437
 38355  005DD2  5051               	movf	_velocity,w,c
 38356  005DD4  6EE6               	movwf	postinc1,c
 38357  005DD6  044E               	decf	_OCTAVES,w,c
 38358  005DD8  0800               	sublw	0
 38359  005DDA  244E               	addwf	_OCTAVES,w,c
 38360  005DDC  0D0C               	mullw	12
 38361  005DDE  50F3               	movf	prodl,w,c
 38362  005DE0  242C               	addwf	key_press_release_note_off@temp,w,c
 38363  005DE2  6EE6               	movwf	postinc1,c
 38364  005DE4  503E               	movf	_channel,w,c
 38365  005DE6  6EE6               	movwf	postinc1,c
 38366  005DE8  EC48  F04A         	call	_noteOff	;wreg free
 38367  005DEC                     l5437:
 38368                           
 38369                           ;arpeggio.c: 136: if(stored_octave == 2){noteOff(channel, temp + ((OCTAVES - (OCTAVES - 
      +                          2)) * 12), velocity);}
 38370  005DEC  0E02               	movlw	2
 38371  005DEE  1831               	xorwf	_stored_octave,w,c
 38372  005DF0  A4D8               	btfss	status,2,c
 38373  005DF2  D00E               	goto	l5438
 38374  005DF4  5051               	movf	_velocity,w,c
 38375  005DF6  6EE6               	movwf	postinc1,c
 38376  005DF8  504E               	movf	_OCTAVES,w,c
 38377  005DFA  0FFE               	addlw	254
 38378  005DFC  0800               	sublw	0
 38379  005DFE  244E               	addwf	_OCTAVES,w,c
 38380  005E00  0D0C               	mullw	12
 38381  005E02  50F3               	movf	prodl,w,c
 38382  005E04  242C               	addwf	key_press_release_note_off@temp,w,c
 38383  005E06  6EE6               	movwf	postinc1,c
 38384  005E08  503E               	movf	_channel,w,c
 38385  005E0A  6EE6               	movwf	postinc1,c
 38386  005E0C  EC48  F04A         	call	_noteOff	;wreg free
 38387  005E10                     l5438:
 38388                           
 38389                           ;arpeggio.c: 137: if(stored_octave == 3){noteOff(channel, temp + ((OCTAVES - (OCTAVES - 
      +                          3)) * 12), velocity);}
 38390  005E10  0E03               	movlw	3
 38391  005E12  1831               	xorwf	_stored_octave,w,c
 38392  005E14  A4D8               	btfss	status,2,c
 38393  005E16  D00E               	goto	l5439
 38394  005E18  5051               	movf	_velocity,w,c
 38395  005E1A  6EE6               	movwf	postinc1,c
 38396  005E1C  504E               	movf	_OCTAVES,w,c
 38397  005E1E  0FFD               	addlw	253
 38398  005E20  0800               	sublw	0
 38399  005E22  244E               	addwf	_OCTAVES,w,c
 38400  005E24  0D0C               	mullw	12
 38401  005E26  50F3               	movf	prodl,w,c
 38402  005E28  242C               	addwf	key_press_release_note_off@temp,w,c
 38403  005E2A  6EE6               	movwf	postinc1,c
 38404  005E2C  503E               	movf	_channel,w,c
 38405  005E2E  6EE6               	movwf	postinc1,c
 38406  005E30  EC48  F04A         	call	_noteOff	;wreg free
 38407  005E34                     l5439:
 38408                           
 38409                           ;arpeggio.c: 139: note_off_was_sent = 1;
 38410  005E34  8002               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38411  005E36                     l5432:
 38412                           
 38413                           ;arpeggio.c: 140: }
 38414                           ;arpeggio.c: 143: if((last_note == 0) && (note_off_was_sent == 0) && (keyboard.SW1 == 1)
      +                          ){noteOff(channel, stored_octave * 12, velocity);note_off_was_sent = 1;}
 38415  005E36  0100               	movlb	0	; () banked
 38416  005E38  51EC               	movf	_last_note& (0+255),w,b
 38417  005E3A  B4D8               	btfsc	status,2,c
 38418                           
 38419                           ; BSR set to: 0
 38420  005E3C  B002               	btfsc	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38421  005E3E  D00D               	goto	l5440
 38422                           
 38423                           ; BSR set to: 0
 38424  005E40  A1D0               	btfss	_keyboard& (0+255),0,b
 38425  005E42  D00B               	goto	l5440
 38426                           
 38427                           ; BSR set to: 0
 38428  005E44  5051               	movf	_velocity,w,c
 38429  005E46  6EE6               	movwf	postinc1,c
 38430  005E48  5031               	movf	_stored_octave,w,c
 38431  005E4A  0D0C               	mullw	12
 38432  005E4C  50F3               	movf	prodl,w,c
 38433  005E4E  6EE6               	movwf	postinc1,c
 38434  005E50  503E               	movf	_channel,w,c
 38435  005E52  6EE6               	movwf	postinc1,c
 38436  005E54  EC48  F04A         	call	_noteOff	;wreg free
 38437  005E58  8002               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38438  005E5A                     l5440:
 38439                           
 38440                           ;arpeggio.c: 144: if((last_note == 0) && (note_off_was_sent == 0)){noteOff(channel, stor
      +                          ed_octave * 12, velocity);note_off_was_sent = 1;}
 38441  005E5A  0100               	movlb	0	; () banked
 38442  005E5C  51EC               	movf	_last_note& (0+255),w,b
 38443  005E5E  B4D8               	btfsc	status,2,c
 38444                           
 38445                           ; BSR set to: 0
 38446  005E60  B002               	btfsc	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38447  005E62  D00B               	goto	l5441
 38448                           
 38449                           ; BSR set to: 0
 38450  005E64  5051               	movf	_velocity,w,c
 38451  005E66  6EE6               	movwf	postinc1,c
 38452  005E68  5031               	movf	_stored_octave,w,c
 38453  005E6A  0D0C               	mullw	12
 38454  005E6C  50F3               	movf	prodl,w,c
 38455  005E6E  6EE6               	movwf	postinc1,c
 38456  005E70  503E               	movf	_channel,w,c
 38457  005E72  6EE6               	movwf	postinc1,c
 38458  005E74  EC48  F04A         	call	_noteOff	;wreg free
 38459  005E78  8002               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38460  005E7A                     l5441:
 38461                           
 38462                           ;arpeggio.c: 146: TMR0ON = 1;
 38463  005E7A  8ED5               	bsf	4053,7,c	;volatile
 38464  005E7C  0012               	return		;funcret
 38465  005E7E                     __end_of_key_press_release_note_off:
 38466                           	opt stack 0
 38467                           tblptru	equ	0xFF8
 38468                           tblptrh	equ	0xFF7
 38469                           tblptrl	equ	0xFF6
 38470                           tablat	equ	0xFF5
 38471                           prodh	equ	0xFF4
 38472                           prodl	equ	0xFF3
 38473                           intcon	equ	0xFF2
 38474                           intcon2	equ	0xFF1
 38475                           indf0	equ	0xFEF
 38476                           postinc0	equ	0xFEE
 38477                           postdec0	equ	0xFED
 38478                           fsr0h	equ	0xFEA
 38479                           fsr0l	equ	0xFE9
 38480                           wreg	equ	0xFE8
 38481                           postinc1	equ	0xFE6
 38482                           postdec1	equ	0xFE5
 38483                           plusw1	equ	0xFE3
 38484                           fsr1h	equ	0xFE2
 38485                           fsr1l	equ	0xFE1
 38486                           indf2	equ	0xFDF
 38487                           postinc2	equ	0xFDE
 38488                           postdec2	equ	0xFDD
 38489                           plusw2	equ	0xFDB
 38490                           fsr2h	equ	0xFDA
 38491                           fsr2l	equ	0xFD9
 38492                           status	equ	0xFD8
 38493                           
 38494 ;; *************** function _noteOff *****************
 38495 ;; Defined at:
 38496 ;;		line 109 in file "midi.c"
 38497 ;; Parameters:    Size  Location     Type
 38498 ;;  channel         1  [STACK] unsigned char 
 38499 ;;  pitch           1  [STACK] unsigned char 
 38500 ;;  velocity        1  [STACK] unsigned char 
 38501 ;; Auto vars:     Size  Location     Type
 38502 ;;		None
 38503 ;; Return value:  Size  Location     Type
 38504 ;;                  1  [STACK] void 
 38505 ;; Registers used:
 38506 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh
 38507 ;; Tracked objects:
 38508 ;;		On entry : 0/0
 38509 ;;		On exit  : 0/0
 38510 ;;		Unchanged: 0/0
 38511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38516 ;;Total ram usage:        0 bytes
 38517 ;; Hardware stack levels used:    1
 38518 ;; Hardware stack levels required when called:    6
 38519 ;; This function calls:
 38520 ;;		_sendOut
 38521 ;;		_sendUSB
 38522 ;; This function is called by:
 38523 ;;		_noteOn
 38524 ;;		_noteOnDrum
 38525 ;;		_playThisNotePentatonic
 38526 ;;		_playTriad
 38527 ;;		_playSeventh
 38528 ;;		_playThisNote
 38529 ;;		_playThisNote8
 38530 ;;		_playDiatonicTriadMajor
 38531 ;;		_playDiatonicSeventhMajor
 38532 ;;		_playDiatonicTriadMinor
 38533 ;;		_playDiatonicSeventhMinor
 38534 ;;		_key_press_release_note_off
 38535 ;;		_playArpeggio
 38536 ;;		_keyboard_all_note
 38537 ;;		_keyboard_eight_note
 38538 ;; This function uses a reentrant model
 38539 ;;
 38540                           
 38541                           	psect	text109
 38542  009490                     __ptext109:
 38543                           	opt stack 0
 38544  009490                     _noteOff:
 38545                           	opt stack 6
 38546                           
 38547                           ;midi.c: 111: noteNumber = pitch + semitone + ((octave + 1)* 12);
 38548                           ;stkvar	noteOff@pitch @ sp[(0)+-2]
 38549                           
 38550                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
 38551                           ;incstack = 0
 38552  009490  0EFE               	movlw	-2
 38553  009492  CFE3 F04A          	movff	plusw1,btemp+11
 38554  009496  5050               	movf	_octave,w,c
 38555  009498  0D0C               	mullw	12
 38556  00949A  50F3               	movf	prodl,w,c
 38557  00949C  243B               	addwf	_semitone,w,c
 38558  00949E  244A               	addwf	btemp+11,w,c
 38559  0094A0  0F0C               	addlw	12
 38560  0094A2  6E3C               	movwf	_noteNumber,c
 38561                           
 38562                           ;midi.c: 112: statusByte = channel | note_off;
 38563                           ;stkvar	noteOff@channel @ sp[(0)+-1]
 38564  0094A4  0EFF               	movlw	-1
 38565  0094A6  50E3               	movf	plusw1,w,c
 38566  0094A8  0980               	iorlw	128
 38567  0094AA  6E3D               	movwf	_statusByte,c
 38568                           
 38569                           ;midi.c: 116: sendUSB(statusByte, noteNumber, velocity);
 38570                           ;stkvar	noteOff@velocity @ sp[(0)+-3]
 38571  0094AC  0EFD               	movlw	-3
 38572  0094AE  50E3               	movf	plusw1,w,c
 38573  0094B0  6EE6               	movwf	postinc1,c
 38574  0094B2  503C               	movf	_noteNumber,w,c
 38575  0094B4  6EE6               	movwf	postinc1,c
 38576  0094B6  503D               	movf	_statusByte,w,c
 38577  0094B8  6EE6               	movwf	postinc1,c
 38578  0094BA  ECDB  F036         	call	_sendUSB	;wreg free
 38579                           
 38580                           ;midi.c: 119: sendOut(statusByte, noteNumber, velocity);
 38581                           ;stkvar	noteOff@velocity @ sp[(0)+-3]
 38582  0094BE  0EFD               	movlw	-3
 38583  0094C0  50E3               	movf	plusw1,w,c
 38584  0094C2  6EE6               	movwf	postinc1,c
 38585  0094C4  503C               	movf	_noteNumber,w,c
 38586  0094C6  6EE6               	movwf	postinc1,c
 38587  0094C8  503D               	movf	_statusByte,w,c
 38588  0094CA  6EE6               	movwf	postinc1,c
 38589  0094CC  EC64  F036         	call	_sendOut	;wreg free
 38590                           
 38591                           ; _noteOff: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsi
      +                          ze = 3, vargsize = 0
 38592  0094D0  52E5               	movf	postdec1,f,c
 38593  0094D2  52E5               	movf	postdec1,f,c
 38594  0094D4  52E5               	movf	postdec1,f,c
 38595  0094D6  0012               	return		;funcret
 38596  0094D8                     __end_of_noteOff:
 38597                           	opt stack 0
 38598                           tblptru	equ	0xFF8
 38599                           tblptrh	equ	0xFF7
 38600                           tblptrl	equ	0xFF6
 38601                           tablat	equ	0xFF5
 38602                           prodh	equ	0xFF4
 38603                           prodl	equ	0xFF3
 38604                           intcon	equ	0xFF2
 38605                           intcon2	equ	0xFF1
 38606                           indf0	equ	0xFEF
 38607                           postinc0	equ	0xFEE
 38608                           postdec0	equ	0xFED
 38609                           fsr0h	equ	0xFEA
 38610                           fsr0l	equ	0xFE9
 38611                           wreg	equ	0xFE8
 38612                           postinc1	equ	0xFE6
 38613                           postdec1	equ	0xFE5
 38614                           plusw1	equ	0xFE3
 38615                           fsr1h	equ	0xFE2
 38616                           fsr1l	equ	0xFE1
 38617                           indf2	equ	0xFDF
 38618                           postinc2	equ	0xFDE
 38619                           postdec2	equ	0xFDD
 38620                           plusw2	equ	0xFDB
 38621                           fsr2h	equ	0xFDA
 38622                           fsr2l	equ	0xFD9
 38623                           status	equ	0xFD8
 38624                           
 38625 ;; *************** function _sendUSB *****************
 38626 ;; Defined at:
 38627 ;;		line 75 in file "midi.c"
 38628 ;; Parameters:    Size  Location     Type
 38629 ;;  message1        1  [STACK] unsigned char 
 38630 ;;  message2        1  [STACK] unsigned char 
 38631 ;;  message3        1  [STACK] unsigned char 
 38632 ;; Auto vars:     Size  Location     Type
 38633 ;;  ii              1  [STACK] unsigned char 
 38634 ;;  i               1  [STACK] unsigned char 
 38635 ;;  midiMessage     3  [STACK] unsigned char [3]
 38636 ;; Return value:  Size  Location     Type
 38637 ;;                  1  [STACK] void 
 38638 ;; Registers used:
 38639 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11
 38640 ;; Tracked objects:
 38641 ;;		On entry : 0/0
 38642 ;;		On exit  : 0/0
 38643 ;;		Unchanged: 0/0
 38644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38648 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38649 ;;Total ram usage:        0 bytes
 38650 ;; Hardware stack levels used:    1
 38651 ;; Hardware stack levels required when called:    5
 38652 ;; This function calls:
 38653 ;;		Nothing
 38654 ;; This function is called by:
 38655 ;;		_noteOff
 38656 ;;		_noteOn
 38657 ;;		_noteOffDrum
 38658 ;;		_noteOnDrum
 38659 ;;		_controlChange
 38660 ;;		_pitchBend
 38661 ;;		_programChange
 38662 ;; This function uses a reentrant model
 38663 ;;
 38664                           
 38665                           	psect	text110
 38666  006DB6                     __ptext110:
 38667                           	opt stack 0
 38668  006DB6                     _sendUSB:
 38669                           	opt stack 0
 38670                           
 38671                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
 38672  006DB6  0E05               	movlw	5
 38673  006DB8  26E1               	addwf	fsr1l,f,c
 38674  006DBA  0E00               	movlw	0
 38675  006DBC  22E2               	addwfc	fsr1h,f,c
 38676                           
 38677                           ;midi.c: 77: unsigned char midiMessage[3];
 38678                           ;midi.c: 79: midiMessage[0]=message1;
 38679                           ;stkvar	sendUSB@message1 @ sp[(-5)+-1]
 38680                           ;stkvar	sendUSB@midiMessage @ sp[(-5)+2]
 38681                           
 38682                           ;incstack = 0
 38683  006DBE  0EFA               	movlw	-6
 38684  006DC0  CFE3 F03F          	movff	plusw1,btemp
 38685  006DC4  0EFD               	movlw	-3
 38686  006DC6  C03F  FFE3         	movff	btemp,plusw1
 38687                           
 38688                           ;midi.c: 80: midiMessage[1]=message2;
 38689                           ;stkvar	sendUSB@message2 @ sp[(-5)+-2]
 38690                           ;stkvar	sendUSB@midiMessage @ sp[(-5)+2]
 38691  006DCA  0EFE               	movlw	254
 38692  006DCC  24E1               	addwf	fsr1l,w,c
 38693  006DCE  6ED9               	movwf	fsr2l,c
 38694  006DD0  0EFF               	movlw	255
 38695  006DD2  20E2               	addwfc	fsr1h,w,c
 38696  006DD4  6EDA               	movwf	fsr2h,c
 38697  006DD6  0EF9               	movlw	-7
 38698  006DD8  CFE3 FFDF          	movff	plusw1,indf2
 38699                           
 38700                           ;midi.c: 81: midiMessage[2]=message3;
 38701                           ;stkvar	sendUSB@message3 @ sp[(-5)+-3]
 38702                           ;stkvar	sendUSB@midiMessage @ sp[(-5)+2]
 38703  006DDC  0EFF               	movlw	255
 38704  006DDE  24E1               	addwf	fsr1l,w,c
 38705  006DE0  6ED9               	movwf	fsr2l,c
 38706  006DE2  0EFF               	movlw	255
 38707  006DE4  20E2               	addwfc	fsr1h,w,c
 38708  006DE6  6EDA               	movwf	fsr2h,c
 38709  006DE8  0EF8               	movlw	-8
 38710  006DEA  CFE3 FFDF          	movff	plusw1,indf2
 38711                           
 38712                           ;midi.c: 83: RA5 = 0;
 38713  006DEE  9A80               	bcf	3968,5,c	;volatile
 38714                           
 38715                           ;midi.c: 84: RB2 = 1;
 38716  006DF0  8481               	bsf	3969,2,c	;volatile
 38717                           
 38718                           ;midi.c: 85: _delay((unsigned long)((50)*(20000000/4000000.0)));
 38719  006DF2  0E53               	movlw	83
 38720  006DF4                     u67127:
 38721  006DF4  2EE8               	decfsz	wreg,f,c
 38722  006DF6  D7FE               	bra	u67127
 38723  006DF8  F000               	nop	
 38724                           
 38725                           ;midi.c: 87: for(unsigned char i=0;i<3;i++){
 38726                           ;stkvar	sendUSB@i @ sp[(-5)+1]
 38727  006DFA  0EFC               	movlw	-4
 38728  006DFC  6AE3               	clrf	plusw1,c
 38729  006DFE                     l31187:
 38730                           
 38731                           ;midi.c: 88: for(unsigned char ii=0;ii<8;ii++){
 38732                           ;stkvar	sendUSB@ii @ sp[(-5)+0]
 38733  006DFE  0EFB               	movlw	-5
 38734  006E00  6AE3               	clrf	plusw1,c
 38735  006E02                     l31193:
 38736                           
 38737                           ;midi.c: 91: RE2 = !!(midiMessage[i] & (1 << ii));
 38738                           ;stkvar	sendUSB@i @ sp[(-5)+1]
 38739  006E02  0EFC               	movlw	-4
 38740  006E04  CFE3 F04A          	movff	plusw1,btemp+11
 38741                           
 38742                           ;stkvar	sendUSB@midiMessage @ sp[(-5)+2]
 38743  006E08  0EFD               	movlw	253
 38744  006E0A  24E1               	addwf	fsr1l,w,c
 38745  006E0C  6E40               	movwf	btemp+1,c
 38746  006E0E  0EFF               	movlw	255
 38747  006E10  20E2               	addwfc	fsr1h,w,c
 38748  006E12  6E41               	movwf	btemp+2,c
 38749  006E14  504A               	movf	btemp+11,w,c
 38750  006E16  2440               	addwf	btemp+1,w,c
 38751  006E18  6ED9               	movwf	fsr2l,c
 38752  006E1A  0E00               	movlw	0
 38753  006E1C  2041               	addwfc	btemp+2,w,c
 38754  006E1E  6EDA               	movwf	fsr2h,c
 38755  006E20  50DF               	movf	indf2,w,c
 38756  006E22  6E4A               	movwf	btemp+11,c
 38757                           
 38758                           ;stkvar	sendUSB@ii @ sp[(-5)+0]
 38759  006E24  0EFB               	movlw	-5
 38760  006E26  CFE3 F049          	movff	plusw1,btemp+10
 38761  006E2A  0E01               	movlw	1
 38762  006E2C  6E48               	movwf	btemp+9,c
 38763  006E2E  2A49               	incf	btemp+10,f,c
 38764  006E30  D002               	goto	u56764
 38765  006E32                     u56765:
 38766  006E32  90D8               	bcf	status,0,c
 38767  006E34  3648               	rlcf	btemp+9,f,c
 38768  006E36                     u56764:
 38769  006E36  2E49               	decfsz	btemp+10,f,c
 38770  006E38  D7FC               	goto	u56765
 38771  006E3A  5048               	movf	btemp+9,w,c
 38772  006E3C  144A               	andwf	btemp+11,w,c
 38773  006E3E  0900               	iorlw	0
 38774  006E40  B4D8               	btfsc	status,2,c
 38775  006E42  D002               	goto	u56770
 38776  006E44  8484               	bsf	3972,2,c	;volatile
 38777  006E46  D001               	goto	u56785
 38778  006E48                     u56770:
 38779  006E48  9484               	bcf	3972,2,c	;volatile
 38780  006E4A                     u56785:
 38781                           
 38782                           ;midi.c: 93: _delay((unsigned long)((50)*(20000000/4000000.0)));
 38783  006E4A  0E53               	movlw	83
 38784  006E4C                     u67137:
 38785  006E4C  2EE8               	decfsz	wreg,f,c
 38786  006E4E  D7FE               	bra	u67137
 38787  006E50  F000               	nop	
 38788                           
 38789                           ;midi.c: 95: RA5 = 1;
 38790  006E52  8A80               	bsf	3968,5,c	;volatile
 38791                           
 38792                           ;midi.c: 96: _delay((unsigned long)((50)*(20000000/4000000.0)));
 38793  006E54  0E53               	movlw	83
 38794  006E56                     u67147:
 38795  006E56  2EE8               	decfsz	wreg,f,c
 38796  006E58  D7FE               	bra	u67147
 38797  006E5A  F000               	nop	
 38798                           
 38799                           ;midi.c: 98: RA5 = 0;
 38800  006E5C  9A80               	bcf	3968,5,c	;volatile
 38801                           
 38802                           ;midi.c: 99: _delay((unsigned long)((50)*(20000000/4000000.0)));
 38803  006E5E  0E53               	movlw	83
 38804  006E60                     u67157:
 38805  006E60  2EE8               	decfsz	wreg,f,c
 38806  006E62  D7FE               	bra	u67157
 38807  006E64  F000               	nop	
 38808                           
 38809                           ;stkvar	sendUSB@ii @ sp[(-5)+0]
 38810  006E66  0EFB               	movlw	-5
 38811  006E68  2AE3               	incf	plusw1,f,c
 38812                           
 38813                           ;stkvar	sendUSB@ii @ sp[(-5)+0]
 38814  006E6A  0EFB               	movlw	-5
 38815  006E6C  CFE3 F03F          	movff	plusw1,btemp
 38816  006E70  0E07               	movlw	7
 38817  006E72  643F               	cpfsgt	btemp,c
 38818  006E74  D7C6               	goto	l31193
 38819                           
 38820                           ;stkvar	sendUSB@i @ sp[(-5)+1]
 38821  006E76  0EFC               	movlw	-4
 38822  006E78  2AE3               	incf	plusw1,f,c
 38823                           
 38824                           ;stkvar	sendUSB@i @ sp[(-5)+1]
 38825  006E7A  0EFC               	movlw	-4
 38826  006E7C  CFE3 F03F          	movff	plusw1,btemp
 38827  006E80  0E02               	movlw	2
 38828  006E82  643F               	cpfsgt	btemp,c
 38829  006E84  D7BC               	goto	l31187
 38830                           
 38831                           ;midi.c: 100: }
 38832                           ;midi.c: 101: }
 38833                           ;midi.c: 103: RB2 = 0;
 38834  006E86  9481               	bcf	3969,2,c	;volatile
 38835                           
 38836                           ;midi.c: 104: _delay((unsigned long)((50)*(20000000/4000000.0)));
 38837  006E88  0E53               	movlw	83
 38838  006E8A                     u67167:
 38839  006E8A  2EE8               	decfsz	wreg,f,c
 38840  006E8C  D7FE               	bra	u67167
 38841  006E8E  F000               	nop	
 38842                           
 38843                           ; _sendUSB: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsi
      +                          ze = 3, vargsize = 0
 38844  006E90  0EF8               	movlw	248
 38845  006E92  26E1               	addwf	fsr1l,f,c
 38846  006E94  0EFF               	movlw	255
 38847  006E96  22E2               	addwfc	fsr1h,f,c
 38848  006E98  0012               	return		;funcret
 38849  006E9A                     __end_of_sendUSB:
 38850                           	opt stack 0
 38851                           tblptru	equ	0xFF8
 38852                           tblptrh	equ	0xFF7
 38853                           tblptrl	equ	0xFF6
 38854                           tablat	equ	0xFF5
 38855                           prodh	equ	0xFF4
 38856                           prodl	equ	0xFF3
 38857                           intcon	equ	0xFF2
 38858                           intcon2	equ	0xFF1
 38859                           indf0	equ	0xFEF
 38860                           postinc0	equ	0xFEE
 38861                           postdec0	equ	0xFED
 38862                           fsr0h	equ	0xFEA
 38863                           fsr0l	equ	0xFE9
 38864                           wreg	equ	0xFE8
 38865                           postinc1	equ	0xFE6
 38866                           postdec1	equ	0xFE5
 38867                           plusw1	equ	0xFE3
 38868                           fsr1h	equ	0xFE2
 38869                           fsr1l	equ	0xFE1
 38870                           indf2	equ	0xFDF
 38871                           postinc2	equ	0xFDE
 38872                           postdec2	equ	0xFDD
 38873                           plusw2	equ	0xFDB
 38874                           fsr2h	equ	0xFDA
 38875                           fsr2l	equ	0xFD9
 38876                           status	equ	0xFD8
 38877                           
 38878 ;; *************** function _sendOut *****************
 38879 ;; Defined at:
 38880 ;;		line 35 in file "midi.c"
 38881 ;; Parameters:    Size  Location     Type
 38882 ;;  message1        1  [STACK] unsigned char 
 38883 ;;  message2        1  [STACK] unsigned char 
 38884 ;;  message3        1  [STACK] unsigned char 
 38885 ;; Auto vars:     Size  Location     Type
 38886 ;;  i               1  [STACK] unsigned char 
 38887 ;;  midiMessage     3  [STACK] unsigned char [3]
 38888 ;;  number_of_mi    1  [STACK] unsigned char 
 38889 ;; Return value:  Size  Location     Type
 38890 ;;                  1  [STACK] void 
 38891 ;; Registers used:
 38892 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+11
 38893 ;; Tracked objects:
 38894 ;;		On entry : 0/0
 38895 ;;		On exit  : 0/0
 38896 ;;		Unchanged: 0/0
 38897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38899 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38900 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38901 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38902 ;;Total ram usage:        0 bytes
 38903 ;; Hardware stack levels used:    1
 38904 ;; Hardware stack levels required when called:    5
 38905 ;; This function calls:
 38906 ;;		Nothing
 38907 ;; This function is called by:
 38908 ;;		_noteOff
 38909 ;;		_noteOn
 38910 ;;		_noteOffDrum
 38911 ;;		_noteOnDrum
 38912 ;;		_controlChange
 38913 ;;		_pitchBend
 38914 ;;		_programChange
 38915 ;; This function uses a reentrant model
 38916 ;;
 38917                           
 38918                           	psect	text111
 38919  006CC8                     __ptext111:
 38920                           	opt stack 0
 38921  006CC8                     _sendOut:
 38922                           	opt stack 0
 38923                           
 38924                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
 38925  006CC8  0E05               	movlw	5
 38926  006CCA  26E1               	addwf	fsr1l,f,c
 38927  006CCC  0E00               	movlw	0
 38928  006CCE  22E2               	addwfc	fsr1h,f,c
 38929                           
 38930                           ;midi.c: 37: unsigned char midiMessage[3];
 38931                           ;midi.c: 38: unsigned char number_of_midi_message_bytes;
 38932                           ;midi.c: 40: midiMessage[0]=message1;
 38933                           ;stkvar	sendOut@message1 @ sp[(-5)+-1]
 38934                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 38935                           
 38936                           ;incstack = 0
 38937  006CD0  0EFA               	movlw	-6
 38938  006CD2  CFE3 F03F          	movff	plusw1,btemp
 38939  006CD6  0EFC               	movlw	-4
 38940  006CD8  C03F  FFE3         	movff	btemp,plusw1
 38941                           
 38942                           ;midi.c: 41: midiMessage[1]=message2;
 38943                           ;stkvar	sendOut@message2 @ sp[(-5)+-2]
 38944                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 38945  006CDC  0EFD               	movlw	253
 38946  006CDE  24E1               	addwf	fsr1l,w,c
 38947  006CE0  6ED9               	movwf	fsr2l,c
 38948  006CE2  0EFF               	movlw	255
 38949  006CE4  20E2               	addwfc	fsr1h,w,c
 38950  006CE6  6EDA               	movwf	fsr2h,c
 38951  006CE8  0EF9               	movlw	-7
 38952  006CEA  CFE3 FFDF          	movff	plusw1,indf2
 38953                           
 38954                           ;midi.c: 42: midiMessage[2]=message3;
 38955                           ;stkvar	sendOut@message3 @ sp[(-5)+-3]
 38956                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 38957  006CEE  0EFE               	movlw	254
 38958  006CF0  24E1               	addwf	fsr1l,w,c
 38959  006CF2  6ED9               	movwf	fsr2l,c
 38960  006CF4  0EFF               	movlw	255
 38961  006CF6  20E2               	addwfc	fsr1h,w,c
 38962  006CF8  6EDA               	movwf	fsr2h,c
 38963  006CFA  0EF8               	movlw	-8
 38964  006CFC  CFE3 FFDF          	movff	plusw1,indf2
 38965                           
 38966                           ;midi.c: 52: if(CONTROL_CHANGE_IS_BEING_SENT == 1) {
 38967  006D00  A206               	btfss	_CONTROL_CHANGE_IS_BEING_SENT/(0+8),_CONTROL_CHANGE_IS_BEING_SENT& (0+7),c
 38968  006D02  D018               	goto	l31153
 38969                           
 38970                           ;midi.c: 53: midiMessage[0] = channel | control_change;
 38971  006D04  C03E  F04A         	movff	_channel,btemp+11
 38972  006D08  0EB0               	movlw	176
 38973  006D0A  124A               	iorwf	btemp+11,f,c
 38974                           
 38975                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 38976  006D0C  0EFC               	movlw	-4
 38977  006D0E  C04A  FFE3         	movff	btemp+11,plusw1
 38978                           
 38979                           ;midi.c: 54: midiMessage[1] = GLOBAL_CC_NUMBER;
 38980                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 38981  006D12  0EFD               	movlw	253
 38982  006D14  24E1               	addwf	fsr1l,w,c
 38983  006D16  6ED9               	movwf	fsr2l,c
 38984  006D18  0EFF               	movlw	255
 38985  006D1A  20E2               	addwfc	fsr1h,w,c
 38986  006D1C  6EDA               	movwf	fsr2h,c
 38987  006D1E  C0F4  FFDF         	movff	_GLOBAL_CC_NUMBER,indf2
 38988                           
 38989                           ;midi.c: 55: midiMessage[2] = GLOBAL_CC_VALUE;
 38990                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 38991  006D22  0EFE               	movlw	254
 38992  006D24  24E1               	addwf	fsr1l,w,c
 38993  006D26  6ED9               	movwf	fsr2l,c
 38994  006D28  0EFF               	movlw	255
 38995  006D2A  20E2               	addwfc	fsr1h,w,c
 38996  006D2C  6EDA               	movwf	fsr2h,c
 38997  006D2E  C180  FFDF         	movff	_GLOBAL_CC_VALUE,indf2
 38998                           
 38999                           ;midi.c: 56: CONTROL_CHANGE_IS_BEING_SENT = 0;
 39000  006D32  9206               	bcf	_CONTROL_CHANGE_IS_BEING_SENT/(0+8),_CONTROL_CHANGE_IS_BEING_SENT& (0+7),c
 39001  006D34                     l31153:
 39002                           
 39003                           ;midi.c: 57: }
 39004                           ;midi.c: 60: if(midiMessage[0] == (channel | program_change)){number_of_midi_message_byt
      +                          es = 2;}
 39005                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 39006  006D34  C03E  F04A         	movff	_channel,btemp+11
 39007  006D38  0EC0               	movlw	192
 39008  006D3A  124A               	iorwf	btemp+11,f,c
 39009  006D3C  0EFC               	movlw	-4
 39010  006D3E  50E3               	movf	plusw1,w,c
 39011  006D40  184A               	xorwf	btemp+11,w,c
 39012  006D42  A4D8               	btfss	status,2,c
 39013  006D44  D003               	goto	l31157
 39014                           
 39015                           ;stkvar	sendOut@number_of_midi_message_bytes @ sp[(-5)+4]
 39016  006D46  0EFF               	movlw	-1
 39017  006D48  6AE3               	clrf	plusw1,c
 39018  006D4A  D003               	goto	L21
 39019  006D4C                     l31157:
 39020                           
 39021                           ;midi.c: 61: else{number_of_midi_message_bytes = 3;}
 39022                           ;stkvar	sendOut@number_of_midi_message_bytes @ sp[(-5)+4]
 39023  006D4C  0EFF               	movlw	-1
 39024  006D4E  6AE3               	clrf	plusw1,c
 39025  006D50  80E3               	bsf	plusw1,0,c
 39026  006D52                     L21:
 39027  006D52  82E3               	bsf	plusw1,1,c	;indir
 39028                           
 39029                           ;midi.c: 64: for(unsigned char i=0;i<number_of_midi_message_bytes;i++){
 39030                           ;stkvar	sendOut@i @ sp[(-5)+0]
 39031  006D54  0EFB               	movlw	-5
 39032  006D56  6AE3               	clrf	plusw1,c
 39033  006D58  D01D               	goto	l31167
 39034  006D5A                     l31161:
 39035                           
 39036                           ;midi.c: 65: TXREG = midiMessage[i];
 39037                           ;stkvar	sendOut@i @ sp[(-5)+0]
 39038  006D5A  0EFB               	movlw	-5
 39039  006D5C  CFE3 F04A          	movff	plusw1,btemp+11
 39040                           
 39041                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 39042  006D60  0EFC               	movlw	252
 39043  006D62  24E1               	addwf	fsr1l,w,c
 39044  006D64  6E40               	movwf	btemp+1,c
 39045  006D66  0EFF               	movlw	255
 39046  006D68  20E2               	addwfc	fsr1h,w,c
 39047  006D6A  6E41               	movwf	btemp+2,c
 39048  006D6C  504A               	movf	btemp+11,w,c
 39049  006D6E  2440               	addwf	btemp+1,w,c
 39050  006D70  6ED9               	movwf	fsr2l,c
 39051  006D72  0E00               	movlw	0
 39052  006D74  2041               	addwfc	btemp+2,w,c
 39053  006D76  6EDA               	movwf	fsr2h,c
 39054  006D78  50DF               	movf	indf2,w,c
 39055  006D7A  6EAD               	movwf	4013,c	;volatile
 39056  006D7C                     l466:
 39057  006D7C  A2AC               	btfss	4012,1,c	;volatile
 39058  006D7E  D7FE               	goto	l466
 39059                           
 39060                           ;midi.c: 68: TXIF = 0;
 39061  006D80  989E               	bcf	3998,4,c	;volatile
 39062                           
 39063                           ;midi.c: 69: _delay((unsigned long)((320)*(20000000/4000000.0)));
 39064  006D82  0EE4               	movlw	228
 39065  006D84                     u67177:
 39066  006D84  D000               	nop2	
 39067  006D86  D000               	nop2	
 39068  006D88  2EE8               	decfsz	wreg,f,c
 39069  006D8A  D7FC               	bra	u67177
 39070  006D8C  D000               	nop2	
 39071  006D8E  D000               	nop2	
 39072                           
 39073                           ;stkvar	sendOut@i @ sp[(-5)+0]
 39074  006D90  0EFB               	movlw	-5
 39075  006D92  2AE3               	incf	plusw1,f,c
 39076  006D94                     l31167:
 39077                           
 39078                           ;stkvar	sendOut@number_of_midi_message_bytes @ sp[(-5)+4]
 39079                           ;stkvar	sendOut@i @ sp[(-5)+0]
 39080  006D94  50E1               	movf	fsr1l,w,c
 39081  006D96  0FFB               	addlw	-5
 39082  006D98  6ED9               	movwf	fsr2l,c
 39083  006D9A  50E2               	movf	fsr1h,w,c
 39084  006D9C  6EDA               	movwf	fsr2h,c
 39085  006D9E  0EFF               	movlw	255
 39086  006DA0  22DA               	addwfc	fsr2h,f,c
 39087  006DA2  0EFF               	movlw	-1
 39088  006DA4  50E3               	movf	plusw1,w,c
 39089  006DA6  5CDE               	subwf	postinc2,w,c
 39090  006DA8  A0D8               	btfss	status,0,c
 39091  006DAA  D7D7               	goto	l31161
 39092                           
 39093                           ; _sendOut: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsi
      +                          ze = 3, vargsize = 0
 39094  006DAC  0EF8               	movlw	248
 39095  006DAE  26E1               	addwf	fsr1l,f,c
 39096  006DB0  0EFF               	movlw	255
 39097  006DB2  22E2               	addwfc	fsr1h,f,c
 39098  006DB4  0012               	return		;funcret
 39099  006DB6                     __end_of_sendOut:
 39100                           	opt stack 0
 39101                           tblptru	equ	0xFF8
 39102                           tblptrh	equ	0xFF7
 39103                           tblptrl	equ	0xFF6
 39104                           tablat	equ	0xFF5
 39105                           prodh	equ	0xFF4
 39106                           prodl	equ	0xFF3
 39107                           intcon	equ	0xFF2
 39108                           intcon2	equ	0xFF1
 39109                           indf0	equ	0xFEF
 39110                           postinc0	equ	0xFEE
 39111                           postdec0	equ	0xFED
 39112                           fsr0h	equ	0xFEA
 39113                           fsr0l	equ	0xFE9
 39114                           wreg	equ	0xFE8
 39115                           postinc1	equ	0xFE6
 39116                           postdec1	equ	0xFE5
 39117                           plusw1	equ	0xFE3
 39118                           fsr1h	equ	0xFE2
 39119                           fsr1l	equ	0xFE1
 39120                           indf2	equ	0xFDF
 39121                           postinc2	equ	0xFDE
 39122                           postdec2	equ	0xFDD
 39123                           plusw2	equ	0xFDB
 39124                           fsr2h	equ	0xFDA
 39125                           fsr2l	equ	0xFD9
 39126                           status	equ	0xFD8
 39127                           
 39128 ;; *************** function ___lbmod *****************
 39129 ;; Defined at:
 39130 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lbmod.c"
 39131 ;; Parameters:    Size  Location     Type
 39132 ;;  dividend        1  [STACK] unsigned char 
 39133 ;;  divisor         1  [STACK] unsigned char 
 39134 ;; Auto vars:     Size  Location     Type
 39135 ;;  rem             1  [STACK] unsigned char 
 39136 ;;  counter         1  [STACK] unsigned char 
 39137 ;; Return value:  Size  Location     Type
 39138 ;;                  1  [STACK] unsigned char 
 39139 ;; Registers used:
 39140 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11
 39141 ;; Tracked objects:
 39142 ;;		On entry : 0/1
 39143 ;;		On exit  : 0/0
 39144 ;;		Unchanged: 0/0
 39145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 39146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39149 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39150 ;;Total ram usage:        0 bytes
 39151 ;; Hardware stack levels used:    1
 39152 ;; Hardware stack levels required when called:    5
 39153 ;; This function calls:
 39154 ;;		Nothing
 39155 ;; This function is called by:
 39156 ;;		_controlChange
 39157 ;;		_pitchBend
 39158 ;;		_programChange
 39159 ;;		_menu_lcd
 39160 ;;		_Function_A_1
 39161 ;;		_Function_A_2
 39162 ;;		_Function_A_3
 39163 ;;		_Function_A
 39164 ;;		_Function_B
 39165 ;;		_Function_C_1
 39166 ;;		_Function_C_2
 39167 ;;		_Function_C_3
 39168 ;;		_Function_C
 39169 ;;		_Function_D_1
 39170 ;;		_Function_D_3
 39171 ;;		_Function_D_4
 39172 ;;		_Function_D_5
 39173 ;;		_Function_D
 39174 ;;		_Function_E
 39175 ;;		_Function_G_1
 39176 ;;		_Function_G_2
 39177 ;;		_Function_G_4
 39178 ;;		_Function_G
 39179 ;;		_Function_H
 39180 ;;		_Function_H_4
 39181 ;;		_Function_H_5
 39182 ;;		_Function_H_6
 39183 ;;		_Function_H_8
 39184 ;;		_Function_H_9_1
 39185 ;;		_Function_H_9_2
 39186 ;;		_Function_H_9_3
 39187 ;;		_Function_H_9_4
 39188 ;;		_Function_H_9
 39189 ;;		_ISR
 39190 ;; This function uses a reentrant model
 39191 ;;
 39192                           
 39193                           	psect	text112
 39194  0082C2                     __ptext112:
 39195                           	opt stack 0
 39196  0082C2                     ___lbmod:
 39197                           	opt stack 0
 39198                           
 39199                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
 39200  0082C2  52E6               	movf	postinc1,f,c
 39201  0082C4  52E6               	movf	postinc1,f,c
 39202                           
 39203                           ;stkvar	___lbmod@counter @ sp[(-2)+1]
 39204                           
 39205                           ;incstack = 0
 39206  0082C6  0EFF               	movlw	-1
 39207  0082C8  6AE3               	clrf	plusw1,c
 39208  0082CA  86E3               	bsf	plusw1,3,c
 39209                           
 39210                           ;stkvar	___lbmod@rem @ sp[(-2)+0]
 39211  0082CC  0EFE               	movlw	-2
 39212  0082CE  6AE3               	clrf	plusw1,c
 39213  0082D0                     l33675:
 39214                           
 39215                           ;stkvar	___lbmod@dividend @ sp[(-2)+-1]
 39216  0082D0  0EFD               	movlw	-3
 39217  0082D2  CFE3 F04A          	movff	plusw1,btemp+11
 39218                           
 39219                           ;stkvar	___lbmod@rem @ sp[(-2)+0]
 39220  0082D6  0EFE               	movlw	-2
 39221  0082D8  CFE3 F049          	movff	plusw1,btemp+10
 39222  0082DC  90D8               	bcf	status,0,c
 39223  0082DE  344A               	rlcf	btemp+11,w,c
 39224  0082E0  3449               	rlcf	btemp+10,w,c
 39225  0082E2  6E4A               	movwf	btemp+11,c
 39226                           
 39227                           ;stkvar	___lbmod@rem @ sp[(-2)+0]
 39228  0082E4  0EFE               	movlw	-2
 39229  0082E6  C04A  FFE3         	movff	btemp+11,plusw1
 39230                           
 39231                           ;stkvar	___lbmod@dividend @ sp[(-2)+-1]
 39232  0082EA  50E1               	movf	fsr1l,w,c
 39233  0082EC  0FFD               	addlw	-3
 39234  0082EE  6ED9               	movwf	fsr2l,c
 39235  0082F0  50E2               	movf	fsr1h,w,c
 39236  0082F2  6EDA               	movwf	fsr2h,c
 39237  0082F4  0EFF               	movlw	255
 39238  0082F6  22DA               	addwfc	fsr2h,f,c
 39239  0082F8  90D8               	bcf	status,0,c
 39240  0082FA  36DF               	rlcf	indf2,f,c
 39241                           
 39242                           ;stkvar	___lbmod@divisor @ sp[(-2)+-2]
 39243                           ;stkvar	___lbmod@rem @ sp[(-2)+0]
 39244  0082FC  50E1               	movf	fsr1l,w,c
 39245  0082FE  0FFE               	addlw	-2
 39246  008300  6ED9               	movwf	fsr2l,c
 39247  008302  50E2               	movf	fsr1h,w,c
 39248  008304  6EDA               	movwf	fsr2h,c
 39249  008306  0EFF               	movlw	255
 39250  008308  22DA               	addwfc	fsr2h,f,c
 39251  00830A  0EFC               	movlw	-4
 39252  00830C  50E3               	movf	plusw1,w,c
 39253  00830E  5CDE               	subwf	postinc2,w,c
 39254  008310  A0D8               	btfss	status,0,c
 39255  008312  D00C               	goto	l33683
 39256                           
 39257                           ;stkvar	___lbmod@divisor @ sp[(-2)+-2]
 39258  008314  0EFC               	movlw	-4
 39259  008316  CFE3 F04A          	movff	plusw1,btemp+11
 39260                           
 39261                           ;stkvar	___lbmod@rem @ sp[(-2)+0]
 39262  00831A  50E1               	movf	fsr1l,w,c
 39263  00831C  0FFE               	addlw	-2
 39264  00831E  6ED9               	movwf	fsr2l,c
 39265  008320  50E2               	movf	fsr1h,w,c
 39266  008322  6EDA               	movwf	fsr2h,c
 39267  008324  0EFF               	movlw	255
 39268  008326  22DA               	addwfc	fsr2h,f,c
 39269  008328  504A               	movf	btemp+11,w,c
 39270  00832A  5EDF               	subwf	indf2,f,c
 39271  00832C                     l33683:
 39272                           
 39273                           ;stkvar	___lbmod@counter @ sp[(-2)+1]
 39274  00832C  0EFF               	movlw	-1
 39275  00832E  50E3               	movf	plusw1,w,c
 39276  008330  6E3F               	movwf	btemp,c
 39277  008332  0E01               	movlw	1
 39278  008334  5E3F               	subwf	btemp,f,c
 39279  008336  0EFF               	movlw	-1
 39280  008338  C03F  FFE3         	movff	btemp,plusw1
 39281  00833C  A4D8               	btfss	status,2,c
 39282  00833E  D7C8               	goto	l33675
 39283                           
 39284                           ;stkvar	___lbmod@rem @ sp[(-2)+0]
 39285  008340  0EFE               	movlw	-2
 39286  008342  CFE3 F03F          	movff	plusw1,btemp
 39287                           
 39288                           ; ___lbmod: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsi
      +                          ze = 2, vargsize = 0
 39289  008346  52E5               	movf	postdec1,f,c
 39290  008348  52E5               	movf	postdec1,f,c
 39291  00834A  52E5               	movf	postdec1,f,c
 39292  00834C  52E5               	movf	postdec1,f,c
 39293  00834E  0012               	return		;funcret
 39294  008350                     __end_of___lbmod:
 39295                           	opt stack 0
 39296                           tblptru	equ	0xFF8
 39297                           tblptrh	equ	0xFF7
 39298                           tblptrl	equ	0xFF6
 39299                           tablat	equ	0xFF5
 39300                           prodh	equ	0xFF4
 39301                           prodl	equ	0xFF3
 39302                           intcon	equ	0xFF2
 39303                           intcon2	equ	0xFF1
 39304                           indf0	equ	0xFEF
 39305                           postinc0	equ	0xFEE
 39306                           postdec0	equ	0xFED
 39307                           fsr0h	equ	0xFEA
 39308                           fsr0l	equ	0xFE9
 39309                           wreg	equ	0xFE8
 39310                           postinc1	equ	0xFE6
 39311                           postdec1	equ	0xFE5
 39312                           plusw1	equ	0xFE3
 39313                           fsr1h	equ	0xFE2
 39314                           fsr1l	equ	0xFE1
 39315                           indf2	equ	0xFDF
 39316                           postinc2	equ	0xFDE
 39317                           postdec2	equ	0xFDD
 39318                           plusw2	equ	0xFDB
 39319                           fsr2h	equ	0xFDA
 39320                           fsr2l	equ	0xFD9
 39321                           status	equ	0xFD8
 39322                           
 39323 ;; *************** function _map *****************
 39324 ;; Defined at:
 39325 ;;		line 29 in file "potentiometers.c"
 39326 ;; Parameters:    Size  Location     Type
 39327 ;;  x               4   14[BANK0 ] long 
 39328 ;;  in_min          4   18[BANK0 ] long 
 39329 ;;  in_max          4   22[BANK0 ] long 
 39330 ;;  out_min         4   26[BANK0 ] long 
 39331 ;;  out_max         4   30[BANK0 ] long 
 39332 ;; Auto vars:     Size  Location     Type
 39333 ;;		None
 39334 ;; Return value:  Size  Location     Type
 39335 ;;                  4   14[BANK0 ] long 
 39336 ;; Registers used:
 39337 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, cstack
 39338 ;; Tracked objects:
 39339 ;;		On entry : 0/0
 39340 ;;		On exit  : 0/0
 39341 ;;		Unchanged: 0/0
 39342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 39343 ;;      Params:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39345 ;;      Temps:          0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39346 ;;      Totals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39347 ;;Total ram usage:       40 bytes
 39348 ;; Hardware stack levels used:    1
 39349 ;; Hardware stack levels required when called:    6
 39350 ;; This function calls:
 39351 ;;		___aldiv
 39352 ;;		___lmul
 39353 ;; This function is called by:
 39354 ;;		_readPotentiometers
 39355 ;; This function uses a non-reentrant model
 39356 ;;
 39357                           
 39358                           	psect	text113
 39359  0066DA                     __ptext113:
 39360                           	opt stack 0
 39361  0066DA                     _map:
 39362                           	opt stack 19
 39363                           
 39364                           ;potentiometers.c: 30: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + o
      +                          ut_min;
 39365                           
 39366                           ;incstack = 0
 39367  0066DA  C07A  F082         	movff	map@out_min,??_map
 39368  0066DE  C07B  F083         	movff	map@out_min+1,??_map+1
 39369  0066E2  C07C  F084         	movff	map@out_min+2,??_map+2
 39370  0066E6  C07D  F085         	movff	map@out_min+3,??_map+3
 39371  0066EA  0100               	movlb	0	; () banked
 39372  0066EC  1F82               	comf	??_map& (0+255),f,b
 39373  0066EE  1F83               	comf	(??_map+1)& (0+255),f,b
 39374  0066F0  1F84               	comf	(??_map+2)& (0+255),f,b
 39375  0066F2  1F85               	comf	(??_map+3)& (0+255),f,b
 39376  0066F4  2B82               	incf	??_map& (0+255),f,b
 39377  0066F6  0E00               	movlw	0
 39378  0066F8  2383               	addwfc	(??_map+1)& (0+255),f,b
 39379  0066FA  2384               	addwfc	(??_map+2)& (0+255),f,b
 39380  0066FC  2385               	addwfc	(??_map+3)& (0+255),f,b
 39381  0066FE  517E               	movf	map@out_max& (0+255),w,b
 39382  006700  2582               	addwf	??_map& (0+255),w,b
 39383  006702  6F86               	movwf	(??_map+4)& (0+255),b
 39384  006704  517F               	movf	(map@out_max+1)& (0+255),w,b
 39385  006706  2183               	addwfc	(??_map+1)& (0+255),w,b
 39386  006708  6F87               	movwf	(??_map+5)& (0+255),b
 39387  00670A  5180               	movf	(map@out_max+2)& (0+255),w,b
 39388  00670C  2184               	addwfc	(??_map+2)& (0+255),w,b
 39389  00670E  6F88               	movwf	(??_map+6)& (0+255),b
 39390  006710  5181               	movf	(map@out_max+3)& (0+255),w,b
 39391  006712  2185               	addwfc	(??_map+3)& (0+255),w,b
 39392  006714  6F89               	movwf	(??_map+7)& (0+255),b
 39393  006716  C086  FFE6         	movff	??_map+4,postinc1
 39394  00671A  C087  FFE6         	movff	??_map+5,postinc1
 39395  00671E  C088  FFE6         	movff	??_map+6,postinc1
 39396  006722  C089  FFE6         	movff	??_map+7,postinc1
 39397  006726  C072  F08A         	movff	map@in_min,??_map+8
 39398  00672A  C073  F08B         	movff	map@in_min+1,??_map+9
 39399  00672E  C074  F08C         	movff	map@in_min+2,??_map+10
 39400  006732  C075  F08D         	movff	map@in_min+3,??_map+11
 39401  006736  1F8A               	comf	(??_map+8)& (0+255),f,b
 39402  006738  1F8B               	comf	(??_map+9)& (0+255),f,b
 39403  00673A  1F8C               	comf	(??_map+10)& (0+255),f,b
 39404  00673C  1F8D               	comf	(??_map+11)& (0+255),f,b
 39405  00673E  2B8A               	incf	(??_map+8)& (0+255),f,b
 39406  006740  0E00               	movlw	0
 39407  006742  238B               	addwfc	(??_map+9)& (0+255),f,b
 39408  006744  238C               	addwfc	(??_map+10)& (0+255),f,b
 39409  006746  238D               	addwfc	(??_map+11)& (0+255),f,b
 39410  006748  516E               	movf	map@x& (0+255),w,b
 39411  00674A  258A               	addwf	(??_map+8)& (0+255),w,b
 39412  00674C  6F8E               	movwf	(??_map+12)& (0+255),b
 39413  00674E  516F               	movf	(map@x+1)& (0+255),w,b
 39414  006750  218B               	addwfc	(??_map+9)& (0+255),w,b
 39415  006752  6F8F               	movwf	(??_map+13)& (0+255),b
 39416  006754  5170               	movf	(map@x+2)& (0+255),w,b
 39417  006756  218C               	addwfc	(??_map+10)& (0+255),w,b
 39418  006758  6F90               	movwf	(??_map+14)& (0+255),b
 39419  00675A  5171               	movf	(map@x+3)& (0+255),w,b
 39420  00675C  218D               	addwfc	(??_map+11)& (0+255),w,b
 39421  00675E  6F91               	movwf	(??_map+15)& (0+255),b
 39422  006760  C08E  FFE6         	movff	??_map+12,postinc1
 39423  006764  C08F  FFE6         	movff	??_map+13,postinc1
 39424  006768  C090  FFE6         	movff	??_map+14,postinc1
 39425  00676C  C091  FFE6         	movff	??_map+15,postinc1
 39426  006770  ECA5  F03A         	call	___lmul	;wreg free
 39427  006774  C03F  F060         	movff	btemp,___aldiv@dividend
 39428  006778  C040  F061         	movff	btemp+1,___aldiv@dividend+1
 39429  00677C  C041  F062         	movff	btemp+2,___aldiv@dividend+2
 39430  006780  C042  F063         	movff	btemp+3,___aldiv@dividend+3
 39431  006784  C072  F092         	movff	map@in_min,??_map+16
 39432  006788  C073  F093         	movff	map@in_min+1,??_map+17
 39433  00678C  C074  F094         	movff	map@in_min+2,??_map+18
 39434  006790  C075  F095         	movff	map@in_min+3,??_map+19
 39435  006794  0100               	movlb	0	; () banked
 39436  006796  1F92               	comf	(??_map+16)& (0+255),f,b
 39437  006798  1F93               	comf	(??_map+17)& (0+255),f,b
 39438  00679A  1F94               	comf	(??_map+18)& (0+255),f,b
 39439  00679C  1F95               	comf	(??_map+19)& (0+255),f,b
 39440  00679E  2B92               	incf	(??_map+16)& (0+255),f,b
 39441  0067A0  0E00               	movlw	0
 39442  0067A2  2393               	addwfc	(??_map+17)& (0+255),f,b
 39443  0067A4  2394               	addwfc	(??_map+18)& (0+255),f,b
 39444  0067A6  2395               	addwfc	(??_map+19)& (0+255),f,b
 39445  0067A8  5176               	movf	map@in_max& (0+255),w,b
 39446  0067AA  2592               	addwf	(??_map+16)& (0+255),w,b
 39447  0067AC  6F64               	movwf	___aldiv@divisor& (0+255),b
 39448  0067AE  5177               	movf	(map@in_max+1)& (0+255),w,b
 39449  0067B0  2193               	addwfc	(??_map+17)& (0+255),w,b
 39450  0067B2  6F65               	movwf	(___aldiv@divisor+1)& (0+255),b
 39451  0067B4  5178               	movf	(map@in_max+2)& (0+255),w,b
 39452  0067B6  2194               	addwfc	(??_map+18)& (0+255),w,b
 39453  0067B8  6F66               	movwf	(___aldiv@divisor+2)& (0+255),b
 39454  0067BA  5179               	movf	(map@in_max+3)& (0+255),w,b
 39455  0067BC  2195               	addwfc	(??_map+19)& (0+255),w,b
 39456  0067BE  6F67               	movwf	(___aldiv@divisor+3)& (0+255),b
 39457  0067C0  EC3E  F03A         	call	___aldiv	;wreg free
 39458  0067C4  0100               	movlb	0	; () banked
 39459  0067C6  517A               	movf	map@out_min& (0+255),w,b
 39460  0067C8  2560               	addwf	?___aldiv& (0+255),w,b
 39461  0067CA  6F6E               	movwf	?_map& (0+255),b
 39462  0067CC  517B               	movf	(map@out_min+1)& (0+255),w,b
 39463  0067CE  2161               	addwfc	(?___aldiv+1)& (0+255),w,b
 39464  0067D0  6F6F               	movwf	(?_map+1)& (0+255),b
 39465  0067D2  517C               	movf	(map@out_min+2)& (0+255),w,b
 39466  0067D4  2162               	addwfc	(?___aldiv+2)& (0+255),w,b
 39467  0067D6  6F70               	movwf	(?_map+2)& (0+255),b
 39468  0067D8  517D               	movf	(map@out_min+3)& (0+255),w,b
 39469  0067DA  2163               	addwfc	(?___aldiv+3)& (0+255),w,b
 39470  0067DC  6F71               	movwf	(?_map+3)& (0+255),b
 39471  0067DE  0012               	return	
 39472  0067E0                     __end_of_map:
 39473                           	opt stack 0
 39474                           tblptru	equ	0xFF8
 39475                           tblptrh	equ	0xFF7
 39476                           tblptrl	equ	0xFF6
 39477                           tablat	equ	0xFF5
 39478                           prodh	equ	0xFF4
 39479                           prodl	equ	0xFF3
 39480                           intcon	equ	0xFF2
 39481                           intcon2	equ	0xFF1
 39482                           indf0	equ	0xFEF
 39483                           postinc0	equ	0xFEE
 39484                           postdec0	equ	0xFED
 39485                           fsr0h	equ	0xFEA
 39486                           fsr0l	equ	0xFE9
 39487                           wreg	equ	0xFE8
 39488                           postinc1	equ	0xFE6
 39489                           postdec1	equ	0xFE5
 39490                           plusw1	equ	0xFE3
 39491                           fsr1h	equ	0xFE2
 39492                           fsr1l	equ	0xFE1
 39493                           indf2	equ	0xFDF
 39494                           postinc2	equ	0xFDE
 39495                           postdec2	equ	0xFDD
 39496                           plusw2	equ	0xFDB
 39497                           fsr2h	equ	0xFDA
 39498                           fsr2l	equ	0xFD9
 39499                           status	equ	0xFD8
 39500                           
 39501 ;; *************** function ___lmul *****************
 39502 ;; Defined at:
 39503 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 39504 ;; Parameters:    Size  Location     Type
 39505 ;;  multiplier      4  [STACK] unsigned long 
 39506 ;;  multiplicand    4  [STACK] unsigned long 
 39507 ;; Auto vars:     Size  Location     Type
 39508 ;;  product         4  [STACK] unsigned long 
 39509 ;; Return value:  Size  Location     Type
 39510 ;;                  4  [STACK] unsigned long 
 39511 ;; Registers used:
 39512 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3
 39513 ;; Tracked objects:
 39514 ;;		On entry : 0/0
 39515 ;;		On exit  : 0/0
 39516 ;;		Unchanged: 0/0
 39517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 39518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39522 ;;Total ram usage:        0 bytes
 39523 ;; Hardware stack levels used:    1
 39524 ;; Hardware stack levels required when called:    5
 39525 ;; This function calls:
 39526 ;;		Nothing
 39527 ;; This function is called by:
 39528 ;;		_map
 39529 ;;		_rand
 39530 ;; This function uses a reentrant model
 39531 ;;
 39532                           
 39533                           	psect	text114
 39534  00754A                     __ptext114:
 39535                           	opt stack 0
 39536  00754A                     ___lmul:
 39537                           	opt stack 0
 39538                           
 39539                           ; BSR set to: 0
 39540                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 8, argsize = 8 var
      +                          gsize = 0, retsize = 0
 39541  00754A  52E6               	movf	postinc1,f,c
 39542  00754C  52E6               	movf	postinc1,f,c
 39543  00754E  52E6               	movf	postinc1,f,c
 39544  007550  52E6               	movf	postinc1,f,c
 39545                           
 39546                           ;stkvar	___lmul@product @ sp[(-4)+0]
 39547                           
 39548                           ;incstack = 0
 39549  007552  0EFC               	movlw	-4
 39550  007554  6AE3               	clrf	plusw1,c
 39551  007556  0EFD               	movlw	-3
 39552  007558  6AE3               	clrf	plusw1,c
 39553  00755A  0EFE               	movlw	-2
 39554  00755C  6AE3               	clrf	plusw1,c
 39555  00755E  0EFF               	movlw	-1
 39556  007560  6AE3               	clrf	plusw1,c
 39557  007562                     l5653:
 39558                           
 39559                           ;stkvar	___lmul@multiplier @ sp[(-4)+-4]
 39560  007562  0EF8               	movlw	-8
 39561  007564  A0E3               	btfss	plusw1,0,c
 39562  007566  D024               	goto	l31813
 39563                           
 39564                           ;stkvar	___lmul@multiplicand @ sp[(-4)+-8]
 39565                           ;stkvar	___lmul@product @ sp[(-4)+0]
 39566  007568  0EFC               	movlw	-4
 39567  00756A  50E3               	movf	plusw1,w,c
 39568  00756C  6E3F               	movwf	btemp,c
 39569  00756E  0EF4               	movlw	-12
 39570  007570  50E3               	movf	plusw1,w,c
 39571  007572  263F               	addwf	btemp,f,c
 39572  007574  0EFC               	movlw	-4
 39573  007576  C03F  FFE3         	movff	btemp,plusw1
 39574  00757A  0EFD               	movlw	-3
 39575  00757C  50E3               	movf	plusw1,w,c
 39576  00757E  6E3F               	movwf	btemp,c
 39577  007580  0EF5               	movlw	-11
 39578  007582  50E3               	movf	plusw1,w,c
 39579  007584  223F               	addwfc	btemp,f,c
 39580  007586  0EFD               	movlw	-3
 39581  007588  C03F  FFE3         	movff	btemp,plusw1
 39582  00758C  0EFE               	movlw	-2
 39583  00758E  50E3               	movf	plusw1,w,c
 39584  007590  6E3F               	movwf	btemp,c
 39585  007592  0EF6               	movlw	-10
 39586  007594  50E3               	movf	plusw1,w,c
 39587  007596  223F               	addwfc	btemp,f,c
 39588  007598  0EFE               	movlw	-2
 39589  00759A  C03F  FFE3         	movff	btemp,plusw1
 39590  00759E  0EFF               	movlw	-1
 39591  0075A0  50E3               	movf	plusw1,w,c
 39592  0075A2  6E3F               	movwf	btemp,c
 39593  0075A4  0EF7               	movlw	-9
 39594  0075A6  50E3               	movf	plusw1,w,c
 39595  0075A8  223F               	addwfc	btemp,f,c
 39596  0075AA  0EFF               	movlw	-1
 39597  0075AC  C03F  FFE3         	movff	btemp,plusw1
 39598  0075B0                     l31813:
 39599                           
 39600                           ;stkvar	___lmul@multiplicand @ sp[(-4)+-8]
 39601  0075B0  90D8               	bcf	status,0,c
 39602  0075B2  0EF4               	movlw	-12
 39603  0075B4  36E3               	rlcf	plusw1,f,c
 39604  0075B6  0EF5               	movlw	-11
 39605  0075B8  36E3               	rlcf	plusw1,f,c
 39606  0075BA  0EF6               	movlw	-10
 39607  0075BC  36E3               	rlcf	plusw1,f,c
 39608  0075BE  0EF7               	movlw	-9
 39609  0075C0  36E3               	rlcf	plusw1,f,c
 39610                           
 39611                           ;stkvar	___lmul@multiplier @ sp[(-4)+-4]
 39612  0075C2  90D8               	bcf	status,0,c
 39613  0075C4  0EFB               	movlw	-5
 39614  0075C6  32E3               	rrcf	plusw1,f,c
 39615  0075C8  0EFA               	movlw	-6
 39616  0075CA  32E3               	rrcf	plusw1,f,c
 39617  0075CC  0EF9               	movlw	-7
 39618  0075CE  32E3               	rrcf	plusw1,f,c
 39619  0075D0  0EF8               	movlw	-8
 39620  0075D2  32E3               	rrcf	plusw1,f,c
 39621                           
 39622                           ;stkvar	___lmul@multiplier @ sp[(-4)+-4]
 39623  0075D4  0EF8               	movlw	-8
 39624  0075D6  50E3               	movf	plusw1,w,c
 39625  0075D8  E1C4               	bnz	l5653
 39626  0075DA  0EF9               	movlw	-7
 39627  0075DC  50E3               	movf	plusw1,w,c
 39628  0075DE  E1C1               	bnz	l5653
 39629  0075E0  0EFA               	movlw	-6
 39630  0075E2  50E3               	movf	plusw1,w,c
 39631  0075E4  E1BE               	bnz	l5653
 39632  0075E6  0EFB               	movlw	-5
 39633  0075E8  50E3               	movf	plusw1,w,c
 39634  0075EA  A4D8               	btfss	status,2,c
 39635  0075EC  D7BA               	goto	l5653
 39636                           
 39637                           ;stkvar	___lmul@product @ sp[(-4)+0]
 39638  0075EE  0EFC               	movlw	-4
 39639  0075F0  CFE3 F03F          	movff	plusw1,btemp
 39640  0075F4  0EFD               	movlw	-3
 39641  0075F6  CFE3 F040          	movff	plusw1,btemp+1
 39642  0075FA  0EFE               	movlw	-2
 39643  0075FC  CFE3 F041          	movff	plusw1,btemp+2
 39644  007600  0EFF               	movlw	-1
 39645  007602  CFE3 F042          	movff	plusw1,btemp+3
 39646                           
 39647                           ; ___lmul: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 8, argsiz
      +                          e = 8, vargsize = 0
 39648  007606  0EF4               	movlw	244
 39649  007608  26E1               	addwf	fsr1l,f,c
 39650  00760A  0EFF               	movlw	255
 39651  00760C  22E2               	addwfc	fsr1h,f,c
 39652  00760E  0012               	return		;funcret
 39653  007610                     __end_of___lmul:
 39654                           	opt stack 0
 39655                           tblptru	equ	0xFF8
 39656                           tblptrh	equ	0xFF7
 39657                           tblptrl	equ	0xFF6
 39658                           tablat	equ	0xFF5
 39659                           prodh	equ	0xFF4
 39660                           prodl	equ	0xFF3
 39661                           intcon	equ	0xFF2
 39662                           intcon2	equ	0xFF1
 39663                           indf0	equ	0xFEF
 39664                           postinc0	equ	0xFEE
 39665                           postdec0	equ	0xFED
 39666                           fsr0h	equ	0xFEA
 39667                           fsr0l	equ	0xFE9
 39668                           wreg	equ	0xFE8
 39669                           postinc1	equ	0xFE6
 39670                           postdec1	equ	0xFE5
 39671                           plusw1	equ	0xFE3
 39672                           fsr1h	equ	0xFE2
 39673                           fsr1l	equ	0xFE1
 39674                           indf2	equ	0xFDF
 39675                           postinc2	equ	0xFDE
 39676                           postdec2	equ	0xFDD
 39677                           plusw2	equ	0xFDB
 39678                           fsr2h	equ	0xFDA
 39679                           fsr2l	equ	0xFD9
 39680                           status	equ	0xFD8
 39681                           
 39682 ;; *************** function ___aldiv *****************
 39683 ;; Defined at:
 39684 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
 39685 ;; Parameters:    Size  Location     Type
 39686 ;;  dividend        4    0[BANK0 ] long 
 39687 ;;  divisor         4    4[BANK0 ] long 
 39688 ;; Auto vars:     Size  Location     Type
 39689 ;;  quotient        4   10[BANK0 ] long 
 39690 ;;  sign            1    9[BANK0 ] unsigned char 
 39691 ;;  counter         1    8[BANK0 ] unsigned char 
 39692 ;; Return value:  Size  Location     Type
 39693 ;;                  4    0[BANK0 ] long 
 39694 ;; Registers used:
 39695 ;;		wreg, status,2, status,0
 39696 ;; Tracked objects:
 39697 ;;		On entry : 0/0
 39698 ;;		On exit  : 0/0
 39699 ;;		Unchanged: 0/0
 39700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 39701 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39702 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39704 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39705 ;;Total ram usage:       14 bytes
 39706 ;; Hardware stack levels used:    1
 39707 ;; Hardware stack levels required when called:    5
 39708 ;; This function calls:
 39709 ;;		Nothing
 39710 ;; This function is called by:
 39711 ;;		_map
 39712 ;; This function uses a non-reentrant model
 39713 ;;
 39714                           
 39715                           	psect	text115
 39716  00747C                     __ptext115:
 39717                           	opt stack 0
 39718  00747C                     ___aldiv:
 39719                           	opt stack 19
 39720                           
 39721                           ;incstack = 0
 39722  00747C  0E00               	movlw	0
 39723  00747E  0100               	movlb	0	; () banked
 39724  007480  6F69               	movwf	___aldiv@sign& (0+255),b
 39725                           
 39726                           ; BSR set to: 0
 39727  007482  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 39728  007484  D00A               	goto	l5697
 39729                           
 39730                           ; BSR set to: 0
 39731  007486  1F67               	comf	(___aldiv@divisor+3)& (0+255),f,b
 39732  007488  1F66               	comf	(___aldiv@divisor+2)& (0+255),f,b
 39733  00748A  1F65               	comf	(___aldiv@divisor+1)& (0+255),f,b
 39734  00748C  6D64               	negf	___aldiv@divisor& (0+255),b
 39735  00748E  0E00               	movlw	0
 39736  007490  2365               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
 39737  007492  2366               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
 39738  007494  2367               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
 39739                           
 39740                           ; BSR set to: 0
 39741  007496  0E01               	movlw	1
 39742  007498  6F69               	movwf	___aldiv@sign& (0+255),b
 39743  00749A                     l5697:
 39744                           
 39745                           ; BSR set to: 0
 39746                           
 39747                           ; BSR set to: 0
 39748  00749A  AF63               	btfss	(___aldiv@dividend+3)& (0+255),7,b
 39749  00749C  D00A               	goto	l5698
 39750                           
 39751                           ; BSR set to: 0
 39752  00749E  1F63               	comf	(___aldiv@dividend+3)& (0+255),f,b
 39753  0074A0  1F62               	comf	(___aldiv@dividend+2)& (0+255),f,b
 39754  0074A2  1F61               	comf	(___aldiv@dividend+1)& (0+255),f,b
 39755  0074A4  6D60               	negf	___aldiv@dividend& (0+255),b
 39756  0074A6  0E00               	movlw	0
 39757  0074A8  2361               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
 39758  0074AA  2362               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
 39759  0074AC  2363               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
 39760                           
 39761                           ; BSR set to: 0
 39762  0074AE  0E01               	movlw	1
 39763  0074B0  1B69               	xorwf	___aldiv@sign& (0+255),f,b
 39764  0074B2                     l5698:
 39765                           
 39766                           ; BSR set to: 0
 39767                           
 39768                           ; BSR set to: 0
 39769  0074B2  0E00               	movlw	0
 39770  0074B4  6F6A               	movwf	___aldiv@quotient& (0+255),b
 39771  0074B6  0E00               	movlw	0
 39772  0074B8  6F6B               	movwf	(___aldiv@quotient+1)& (0+255),b
 39773  0074BA  0E00               	movlw	0
 39774  0074BC  6F6C               	movwf	(___aldiv@quotient+2)& (0+255),b
 39775  0074BE  0E00               	movlw	0
 39776  0074C0  6F6D               	movwf	(___aldiv@quotient+3)& (0+255),b
 39777                           
 39778                           ; BSR set to: 0
 39779  0074C2  5164               	movf	___aldiv@divisor& (0+255),w,b
 39780  0074C4  1165               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
 39781  0074C6  1166               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
 39782  0074C8  1167               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
 39783  0074CA  B4D8               	btfsc	status,2,c
 39784  0074CC  D02A               	goto	l5705
 39785                           
 39786                           ; BSR set to: 0
 39787  0074CE  0E01               	movlw	1
 39788  0074D0  6F68               	movwf	___aldiv@counter& (0+255),b
 39789  0074D2  D006               	goto	l5700
 39790  0074D4                     
 39791                           ; BSR set to: 0
 39792                           
 39793                           ; BSR set to: 0
 39794  0074D4  90D8               	bcf	status,0,c
 39795  0074D6  3764               	rlcf	___aldiv@divisor& (0+255),f,b
 39796  0074D8  3765               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
 39797  0074DA  3766               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
 39798  0074DC  3767               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
 39799  0074DE  2B68               	incf	___aldiv@counter& (0+255),f,b
 39800  0074E0                     l5700:
 39801                           
 39802                           ; BSR set to: 0
 39803                           
 39804                           ; BSR set to: 0
 39805  0074E0  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 39806  0074E2  D7F8               	goto	l5701
 39807  0074E4                     u47900:
 39808                           
 39809                           ; BSR set to: 0
 39810                           
 39811                           ; BSR set to: 0
 39812                           
 39813                           ; BSR set to: 0
 39814  0074E4  90D8               	bcf	status,0,c
 39815  0074E6  376A               	rlcf	___aldiv@quotient& (0+255),f,b
 39816  0074E8  376B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
 39817  0074EA  376C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
 39818  0074EC  376D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
 39819                           
 39820                           ; BSR set to: 0
 39821  0074EE  5164               	movf	___aldiv@divisor& (0+255),w,b
 39822  0074F0  5D60               	subwf	___aldiv@dividend& (0+255),w,b
 39823  0074F2  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
 39824  0074F4  5961               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
 39825  0074F6  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
 39826  0074F8  5962               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
 39827  0074FA  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
 39828  0074FC  5963               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
 39829  0074FE  A0D8               	btfss	status,0,c
 39830  007500  D009               	goto	l5704
 39831                           
 39832                           ; BSR set to: 0
 39833  007502  5164               	movf	___aldiv@divisor& (0+255),w,b
 39834  007504  5F60               	subwf	___aldiv@dividend& (0+255),f,b
 39835  007506  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
 39836  007508  5B61               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
 39837  00750A  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
 39838  00750C  5B62               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
 39839  00750E  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
 39840  007510  5B63               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
 39841                           
 39842                           ; BSR set to: 0
 39843  007512  816A               	bsf	___aldiv@quotient& (0+255),0,b
 39844  007514                     l5704:
 39845                           
 39846                           ; BSR set to: 0
 39847                           
 39848                           ; BSR set to: 0
 39849  007514  90D8               	bcf	status,0,c
 39850  007516  3367               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
 39851  007518  3366               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
 39852  00751A  3365               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
 39853  00751C  3364               	rrcf	___aldiv@divisor& (0+255),f,b
 39854                           
 39855                           ; BSR set to: 0
 39856  00751E  2F68               	decfsz	___aldiv@counter& (0+255),f,b
 39857  007520  D7E1               	goto	u47900
 39858  007522                     l5705:
 39859                           
 39860                           ; BSR set to: 0
 39861                           
 39862                           ; BSR set to: 0
 39863                           
 39864                           ; BSR set to: 0
 39865  007522  5169               	movf	___aldiv@sign& (0+255),w,b
 39866  007524  B4D8               	btfsc	status,2,c
 39867  007526  D008               	goto	l5706
 39868                           
 39869                           ; BSR set to: 0
 39870  007528  1F6D               	comf	(___aldiv@quotient+3)& (0+255),f,b
 39871  00752A  1F6C               	comf	(___aldiv@quotient+2)& (0+255),f,b
 39872  00752C  1F6B               	comf	(___aldiv@quotient+1)& (0+255),f,b
 39873  00752E  6D6A               	negf	___aldiv@quotient& (0+255),b
 39874  007530  0E00               	movlw	0
 39875  007532  236B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
 39876  007534  236C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
 39877  007536  236D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
 39878  007538                     l5706:
 39879                           
 39880                           ; BSR set to: 0
 39881                           
 39882                           ; BSR set to: 0
 39883  007538  C06A  F060         	movff	___aldiv@quotient,?___aldiv
 39884  00753C  C06B  F061         	movff	___aldiv@quotient+1,?___aldiv+1
 39885  007540  C06C  F062         	movff	___aldiv@quotient+2,?___aldiv+2
 39886  007544  C06D  F063         	movff	___aldiv@quotient+3,?___aldiv+3
 39887  007548  0012               	return	
 39888  00754A                     __end_of___aldiv:
 39889                           	opt stack 0
 39890                           tblptru	equ	0xFF8
 39891                           tblptrh	equ	0xFF7
 39892                           tblptrl	equ	0xFF6
 39893                           tablat	equ	0xFF5
 39894                           prodh	equ	0xFF4
 39895                           prodl	equ	0xFF3
 39896                           intcon	equ	0xFF2
 39897                           intcon2	equ	0xFF1
 39898                           indf0	equ	0xFEF
 39899                           postinc0	equ	0xFEE
 39900                           postdec0	equ	0xFED
 39901                           fsr0h	equ	0xFEA
 39902                           fsr0l	equ	0xFE9
 39903                           wreg	equ	0xFE8
 39904                           postinc1	equ	0xFE6
 39905                           postdec1	equ	0xFE5
 39906                           plusw1	equ	0xFE3
 39907                           fsr1h	equ	0xFE2
 39908                           fsr1l	equ	0xFE1
 39909                           indf2	equ	0xFDF
 39910                           postinc2	equ	0xFDE
 39911                           postdec2	equ	0xFDD
 39912                           plusw2	equ	0xFDB
 39913                           fsr2h	equ	0xFDA
 39914                           fsr2l	equ	0xFD9
 39915                           status	equ	0xFD8
 39916                           
 39917 ;; *************** function ___xxtofl *****************
 39918 ;; Defined at:
 39919 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\xxtofl.c"
 39920 ;; Parameters:    Size  Location     Type
 39921 ;;  sign            1    wreg     unsigned char 
 39922 ;;  val             4    0[BANK0 ] long 
 39923 ;; Auto vars:     Size  Location     Type
 39924 ;;  sign            1    8[BANK0 ] unsigned char 
 39925 ;;  arg             4   10[BANK0 ] unsigned long 
 39926 ;;  exp             1    9[BANK0 ] unsigned char 
 39927 ;; Return value:  Size  Location     Type
 39928 ;;                  4    0[BANK0 ] unsigned char 
 39929 ;; Registers used:
 39930 ;;		wreg, status,2, status,0
 39931 ;; Tracked objects:
 39932 ;;		On entry : 0/0
 39933 ;;		On exit  : 0/0
 39934 ;;		Unchanged: 0/0
 39935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 39936 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39937 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39938 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39939 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39940 ;;Total ram usage:       14 bytes
 39941 ;; Hardware stack levels used:    1
 39942 ;; Hardware stack levels required when called:    5
 39943 ;; This function calls:
 39944 ;;		Nothing
 39945 ;; This function is called by:
 39946 ;;		_calculate_alpha
 39947 ;;		_readPotentiometers
 39948 ;;		_calculate_pulse_length
 39949 ;; This function uses a non-reentrant model
 39950 ;;
 39951                           
 39952                           	psect	text116
 39953  005FE4                     __ptext116:
 39954                           	opt stack 0
 39955  005FE4                     ___xxtofl:
 39956                           	opt stack 22
 39957                           
 39958                           ; BSR set to: 0
 39959                           ;incstack = 0
 39960                           ;___xxtofl@sign stored from wreg
 39961  005FE4  0100               	movlb	0	; () banked
 39962  005FE6  6F68               	movwf	___xxtofl@sign& (0+255),b
 39963  005FE8  0100               	movlb	0	; () banked
 39964  005FEA  5168               	movf	___xxtofl@sign& (0+255),w,b
 39965  005FEC  A4D8               	btfss	status,2,c
 39966                           
 39967                           ; BSR set to: 0
 39968  005FEE  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 39969  005FF0  D01A               	goto	l6203
 39970                           
 39971                           ; BSR set to: 0
 39972  005FF2  C060  F064         	movff	___xxtofl@val,??___xxtofl
 39973  005FF6  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 39974  005FFA  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 39975  005FFE  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 39976  006002  1F64               	comf	??___xxtofl& (0+255),f,b
 39977  006004  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 39978  006006  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 39979  006008  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 39980  00600A  2B64               	incf	??___xxtofl& (0+255),f,b
 39981  00600C  0E00               	movlw	0
 39982  00600E  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 39983  006010  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 39984  006012  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 39985  006014  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 39986  006018  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 39987  00601C  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 39988  006020  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 39989  006024  D008               	goto	l6204
 39990  006026                     l6203:
 39991                           
 39992                           ; BSR set to: 0
 39993  006026  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 39994  00602A  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 39995  00602E  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 39996  006032  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 39997  006036                     l6204:
 39998                           
 39999                           ; BSR set to: 0
 40000                           
 40001                           ; BSR set to: 0
 40002  006036  5160               	movf	___xxtofl@val& (0+255),w,b
 40003  006038  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 40004  00603A  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 40005  00603C  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 40006  00603E  A4D8               	btfss	status,2,c
 40007  006040  D009               	goto	l6205
 40008                           
 40009                           ; BSR set to: 0
 40010  006042  0E00               	movlw	0
 40011  006044  6F60               	movwf	?___xxtofl& (0+255),b
 40012  006046  0E00               	movlw	0
 40013  006048  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 40014  00604A  0E00               	movlw	0
 40015  00604C  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 40016  00604E  0E00               	movlw	0
 40017  006050  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 40018                           
 40019                           ; BSR set to: 0
 40020  006052  0012               	return	
 40021  006054                     l6205:
 40022                           
 40023                           ; BSR set to: 0
 40024                           
 40025                           ; BSR set to: 0
 40026  006054  0E96               	movlw	150
 40027  006056  6F69               	movwf	___xxtofl@exp& (0+255),b
 40028  006058  D006               	goto	l6207
 40029  00605A                     
 40030                           ; BSR set to: 0
 40031                           
 40032                           ; BSR set to: 0
 40033  00605A  2B69               	incf	___xxtofl@exp& (0+255),f,b
 40034  00605C  90D8               	bcf	status,0,c
 40035  00605E  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 40036  006060  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 40037  006062  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 40038  006064  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 40039  006066                     l6207:
 40040                           
 40041                           ; BSR set to: 0
 40042                           
 40043                           ; BSR set to: 0
 40044  006066  0E00               	movlw	0
 40045  006068  156A               	andwf	___xxtofl@arg& (0+255),w,b
 40046  00606A  6F64               	movwf	??___xxtofl& (0+255),b
 40047  00606C  0E00               	movlw	0
 40048  00606E  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 40049  006070  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 40050  006072  0E00               	movlw	0
 40051  006074  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 40052  006076  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 40053  006078  0EFE               	movlw	254
 40054  00607A  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 40055  00607C  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 40056  00607E  5164               	movf	??___xxtofl& (0+255),w,b
 40057  006080  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 40058  006082  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 40059  006084  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 40060  006086  B4D8               	btfsc	status,2,c
 40061  006088  D00D               	goto	l6210
 40062  00608A  D7E7               	goto	l6208
 40063  00608C                     
 40064                           ; BSR set to: 0
 40065                           
 40066                           ; BSR set to: 0
 40067  00608C  2B69               	incf	___xxtofl@exp& (0+255),f,b
 40068                           
 40069                           ; BSR set to: 0
 40070  00608E  0E01               	movlw	1
 40071  006090  276A               	addwf	___xxtofl@arg& (0+255),f,b
 40072  006092  0E00               	movlw	0
 40073  006094  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 40074  006096  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 40075  006098  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 40076                           
 40077                           ; BSR set to: 0
 40078  00609A  90D8               	bcf	status,0,c
 40079  00609C  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 40080  00609E  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 40081  0060A0  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 40082  0060A2  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 40083  0060A4                     l6210:
 40084                           
 40085                           ; BSR set to: 0
 40086  0060A4  0E00               	movlw	0
 40087  0060A6  156A               	andwf	___xxtofl@arg& (0+255),w,b
 40088  0060A8  6F64               	movwf	??___xxtofl& (0+255),b
 40089  0060AA  0E00               	movlw	0
 40090  0060AC  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 40091  0060AE  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 40092  0060B0  0E00               	movlw	0
 40093  0060B2  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 40094  0060B4  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 40095  0060B6  0EFF               	movlw	255
 40096  0060B8  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 40097  0060BA  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 40098  0060BC  5164               	movf	??___xxtofl& (0+255),w,b
 40099  0060BE  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 40100  0060C0  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 40101  0060C2  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 40102  0060C4  B4D8               	btfsc	status,2,c
 40103  0060C6  D007               	goto	l6213
 40104  0060C8  D7E1               	goto	l6211
 40105  0060CA                     
 40106                           ; BSR set to: 0
 40107                           
 40108                           ; BSR set to: 0
 40109  0060CA  0769               	decf	___xxtofl@exp& (0+255),f,b
 40110  0060CC  90D8               	bcf	status,0,c
 40111  0060CE  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 40112  0060D0  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 40113  0060D2  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 40114  0060D4  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 40115  0060D6                     l6213:
 40116                           
 40117                           ; BSR set to: 0
 40118                           
 40119                           ; BSR set to: 0
 40120  0060D6  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 40121  0060D8  D003               	goto	u52220
 40122                           
 40123                           ; BSR set to: 0
 40124  0060DA  0E02               	movlw	2
 40125  0060DC  6169               	cpfslt	___xxtofl@exp& (0+255),b
 40126  0060DE  D7F5               	goto	l6214
 40127  0060E0                     u52220:
 40128                           
 40129                           ; BSR set to: 0
 40130                           
 40131                           ; BSR set to: 0
 40132  0060E0  B169               	btfsc	___xxtofl@exp& (0+255),0,b
 40133  0060E2  D008               	goto	l6218
 40134                           
 40135                           ; BSR set to: 0
 40136  0060E4  0EFF               	movlw	255
 40137  0060E6  176A               	andwf	___xxtofl@arg& (0+255),f,b
 40138  0060E8  0EFF               	movlw	255
 40139  0060EA  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 40140  0060EC  0E7F               	movlw	127
 40141  0060EE  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 40142  0060F0  0EFF               	movlw	255
 40143  0060F2  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 40144  0060F4                     l6218:
 40145                           
 40146                           ; BSR set to: 0
 40147  0060F4  90D8               	bcf	status,0,c
 40148  0060F6  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 40149  0060F8  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 40150  0060FC  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 40151  0060FE  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 40152  006100  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 40153  006102  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 40154  006106  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 40155  006108  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 40156  00610A  6B64               	clrf	??___xxtofl& (0+255),b
 40157  00610C  5164               	movf	??___xxtofl& (0+255),w,b
 40158  00610E  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 40159  006110  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 40160  006112  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 40161  006114  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 40162  006116  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 40163  006118  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 40164  00611A  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 40165                           
 40166                           ; BSR set to: 0
 40167  00611C  5168               	movf	___xxtofl@sign& (0+255),w,b
 40168  00611E  A4D8               	btfss	status,2,c
 40169                           
 40170                           ; BSR set to: 0
 40171  006120  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 40172  006122  D001               	goto	l6219
 40173                           
 40174                           ; BSR set to: 0
 40175  006124  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 40176  006126                     l6219:
 40177                           
 40178                           ; BSR set to: 0
 40179                           
 40180                           ; BSR set to: 0
 40181  006126  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 40182  00612A  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 40183  00612E  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 40184  006132  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 40185  006136  0012               	return	
 40186  006138                     __end_of___xxtofl:
 40187                           	opt stack 0
 40188                           tblptru	equ	0xFF8
 40189                           tblptrh	equ	0xFF7
 40190                           tblptrl	equ	0xFF6
 40191                           tablat	equ	0xFF5
 40192                           prodh	equ	0xFF4
 40193                           prodl	equ	0xFF3
 40194                           intcon	equ	0xFF2
 40195                           intcon2	equ	0xFF1
 40196                           indf0	equ	0xFEF
 40197                           postinc0	equ	0xFEE
 40198                           postdec0	equ	0xFED
 40199                           fsr0h	equ	0xFEA
 40200                           fsr0l	equ	0xFE9
 40201                           wreg	equ	0xFE8
 40202                           postinc1	equ	0xFE6
 40203                           postdec1	equ	0xFE5
 40204                           plusw1	equ	0xFE3
 40205                           fsr1h	equ	0xFE2
 40206                           fsr1l	equ	0xFE1
 40207                           indf2	equ	0xFDF
 40208                           postinc2	equ	0xFDE
 40209                           postdec2	equ	0xFDD
 40210                           plusw2	equ	0xFDB
 40211                           fsr2h	equ	0xFDA
 40212                           fsr2l	equ	0xFD9
 40213                           status	equ	0xFD8
 40214                           
 40215 ;; *************** function ___fltol *****************
 40216 ;; Defined at:
 40217 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fltol.c"
 40218 ;; Parameters:    Size  Location     Type
 40219 ;;  f1              4   88[BANK0 ] unsigned char 
 40220 ;; Auto vars:     Size  Location     Type
 40221 ;;  exp1            1   97[BANK0 ] unsigned char 
 40222 ;;  sign1           1   96[BANK0 ] unsigned char 
 40223 ;; Return value:  Size  Location     Type
 40224 ;;                  4   88[BANK0 ] long 
 40225 ;; Registers used:
 40226 ;;		wreg, status,2, status,0
 40227 ;; Tracked objects:
 40228 ;;		On entry : 0/0
 40229 ;;		On exit  : 0/0
 40230 ;;		Unchanged: 0/0
 40231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40232 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40233 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40234 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40235 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40236 ;;Total ram usage:       10 bytes
 40237 ;; Hardware stack levels used:    1
 40238 ;; Hardware stack levels required when called:    5
 40239 ;; This function calls:
 40240 ;;		Nothing
 40241 ;; This function is called by:
 40242 ;;		_readPotentiometers
 40243 ;;		_calculate_pulse_length
 40244 ;; This function uses a non-reentrant model
 40245 ;;
 40246                           
 40247                           	psect	text117
 40248  006F78                     __ptext117:
 40249                           	opt stack 0
 40250  006F78                     ___fltol:
 40251                           	opt stack 22
 40252                           
 40253                           ; BSR set to: 0
 40254                           ;incstack = 0
 40255  006F78  0100               	movlb	0	; () banked
 40256  006F7A  35BA               	rlcf	(___fltol@f1+2)& (0+255),w,b
 40257  006F7C  35BB               	rlcf	(___fltol@f1+3)& (0+255),w,b
 40258  006F7E  6FC1               	movwf	___fltol@exp1& (0+255),b
 40259  006F80  51C1               	movf	___fltol@exp1& (0+255),w,b
 40260  006F82  A4D8               	btfss	status,2,c
 40261  006F84  D009               	goto	l5871
 40262                           
 40263                           ; BSR set to: 0
 40264  006F86  0E00               	movlw	0
 40265  006F88  6FB8               	movwf	?___fltol& (0+255),b
 40266  006F8A  0E00               	movlw	0
 40267  006F8C  6FB9               	movwf	(?___fltol+1)& (0+255),b
 40268  006F8E  0E00               	movlw	0
 40269  006F90  6FBA               	movwf	(?___fltol+2)& (0+255),b
 40270  006F92  0E00               	movlw	0
 40271  006F94  6FBB               	movwf	(?___fltol+3)& (0+255),b
 40272                           
 40273                           ; BSR set to: 0
 40274  006F96  0012               	return	
 40275  006F98                     l5871:
 40276                           
 40277                           ; BSR set to: 0
 40278                           
 40279                           ; BSR set to: 0
 40280  006F98  C0B8  F0BC         	movff	___fltol@f1,??___fltol
 40281  006F9C  C0B9  F0BD         	movff	___fltol@f1+1,??___fltol+1
 40282  006FA0  C0BA  F0BE         	movff	___fltol@f1+2,??___fltol+2
 40283  006FA4  C0BB  F0BF         	movff	___fltol@f1+3,??___fltol+3
 40284  006FA8  0E20               	movlw	32
 40285  006FAA  D005               	goto	u52100
 40286  006FAC                     u52105:
 40287  006FAC  90D8               	bcf	status,0,c
 40288  006FAE  33BF               	rrcf	(??___fltol+3)& (0+255),f,b
 40289  006FB0  33BE               	rrcf	(??___fltol+2)& (0+255),f,b
 40290  006FB2  33BD               	rrcf	(??___fltol+1)& (0+255),f,b
 40291  006FB4  33BC               	rrcf	??___fltol& (0+255),f,b
 40292  006FB6                     u52100:
 40293  006FB6  2EE8               	decfsz	wreg,f,c
 40294  006FB8  D7F9               	goto	u52105
 40295  006FBA  51BC               	movf	??___fltol& (0+255),w,b
 40296  006FBC  6FC0               	movwf	___fltol@sign1& (0+255),b
 40297                           
 40298                           ; BSR set to: 0
 40299  006FBE  8FBA               	bsf	(___fltol@f1+2)& (0+255),7,b
 40300                           
 40301                           ; BSR set to: 0
 40302  006FC0  0EFF               	movlw	255
 40303  006FC2  17B8               	andwf	___fltol@f1& (0+255),f,b
 40304  006FC4  0EFF               	movlw	255
 40305  006FC6  17B9               	andwf	(___fltol@f1+1)& (0+255),f,b
 40306  006FC8  0EFF               	movlw	255
 40307  006FCA  17BA               	andwf	(___fltol@f1+2)& (0+255),f,b
 40308  006FCC  0E00               	movlw	0
 40309  006FCE  17BB               	andwf	(___fltol@f1+3)& (0+255),f,b
 40310                           
 40311                           ; BSR set to: 0
 40312  006FD0  0E96               	movlw	150
 40313  006FD2  5FC1               	subwf	___fltol@exp1& (0+255),f,b
 40314                           
 40315                           ; BSR set to: 0
 40316  006FD4  AFC1               	btfss	___fltol@exp1& (0+255),7,b
 40317  006FD6  D016               	goto	l5873
 40318                           
 40319                           ; BSR set to: 0
 40320  006FD8  51C1               	movf	___fltol@exp1& (0+255),w,b
 40321  006FDA  0A80               	xorlw	128
 40322  006FDC  0F97               	addlw	151
 40323  006FDE  B0D8               	btfsc	status,0,c
 40324  006FE0  D009               	goto	l5874
 40325                           
 40326                           ; BSR set to: 0
 40327  006FE2  0E00               	movlw	0
 40328  006FE4  6FB8               	movwf	?___fltol& (0+255),b
 40329  006FE6  0E00               	movlw	0
 40330  006FE8  6FB9               	movwf	(?___fltol+1)& (0+255),b
 40331  006FEA  0E00               	movlw	0
 40332  006FEC  6FBA               	movwf	(?___fltol+2)& (0+255),b
 40333  006FEE  0E00               	movlw	0
 40334  006FF0  6FBB               	movwf	(?___fltol+3)& (0+255),b
 40335                           
 40336                           ; BSR set to: 0
 40337  006FF2  0012               	return	
 40338  006FF4                     l5874:
 40339                           
 40340                           ; BSR set to: 0
 40341                           
 40342                           ; BSR set to: 0
 40343                           
 40344                           ; BSR set to: 0
 40345  006FF4  90D8               	bcf	status,0,c
 40346  006FF6  33BB               	rrcf	(___fltol@f1+3)& (0+255),f,b
 40347  006FF8  33BA               	rrcf	(___fltol@f1+2)& (0+255),f,b
 40348  006FFA  33B9               	rrcf	(___fltol@f1+1)& (0+255),f,b
 40349  006FFC  33B8               	rrcf	___fltol@f1& (0+255),f,b
 40350                           
 40351                           ; BSR set to: 0
 40352  006FFE  3FC1               	incfsz	___fltol@exp1& (0+255),f,b
 40353  007000  D7F9               	goto	l5874
 40354                           
 40355                           ; BSR set to: 0
 40356  007002  D015               	goto	u52140
 40357  007004                     l5873:
 40358                           
 40359                           ; BSR set to: 0
 40360                           
 40361                           ; BSR set to: 0
 40362  007004  0E1F               	movlw	31
 40363  007006  65C1               	cpfsgt	___fltol@exp1& (0+255),b
 40364  007008  D00F               	goto	l5879
 40365                           
 40366                           ; BSR set to: 0
 40367  00700A  0E00               	movlw	0
 40368  00700C  6FB8               	movwf	?___fltol& (0+255),b
 40369  00700E  0E00               	movlw	0
 40370  007010  6FB9               	movwf	(?___fltol+1)& (0+255),b
 40371  007012  0E00               	movlw	0
 40372  007014  6FBA               	movwf	(?___fltol+2)& (0+255),b
 40373  007016  0E00               	movlw	0
 40374  007018  6FBB               	movwf	(?___fltol+3)& (0+255),b
 40375                           
 40376                           ; BSR set to: 0
 40377  00701A  0012               	return	
 40378  00701C                     
 40379                           ; BSR set to: 0
 40380                           
 40381                           ; BSR set to: 0
 40382  00701C  90D8               	bcf	status,0,c
 40383  00701E  37B8               	rlcf	___fltol@f1& (0+255),f,b
 40384  007020  37B9               	rlcf	(___fltol@f1+1)& (0+255),f,b
 40385  007022  37BA               	rlcf	(___fltol@f1+2)& (0+255),f,b
 40386  007024  37BB               	rlcf	(___fltol@f1+3)& (0+255),f,b
 40387  007026  07C1               	decf	___fltol@exp1& (0+255),f,b
 40388  007028                     l5879:
 40389                           
 40390                           ; BSR set to: 0
 40391                           
 40392                           ; BSR set to: 0
 40393  007028  51C1               	movf	___fltol@exp1& (0+255),w,b
 40394  00702A  A4D8               	btfss	status,2,c
 40395  00702C  D7F7               	goto	l5880
 40396  00702E                     u52140:
 40397                           
 40398                           ; BSR set to: 0
 40399                           
 40400                           ; BSR set to: 0
 40401                           
 40402                           ; BSR set to: 0
 40403  00702E  51C0               	movf	___fltol@sign1& (0+255),w,b
 40404  007030  B4D8               	btfsc	status,2,c
 40405  007032  D008               	goto	l5882
 40406                           
 40407                           ; BSR set to: 0
 40408  007034  1FBB               	comf	(___fltol@f1+3)& (0+255),f,b
 40409  007036  1FBA               	comf	(___fltol@f1+2)& (0+255),f,b
 40410  007038  1FB9               	comf	(___fltol@f1+1)& (0+255),f,b
 40411  00703A  6DB8               	negf	___fltol@f1& (0+255),b
 40412  00703C  0E00               	movlw	0
 40413  00703E  23B9               	addwfc	(___fltol@f1+1)& (0+255),f,b
 40414  007040  23BA               	addwfc	(___fltol@f1+2)& (0+255),f,b
 40415  007042  23BB               	addwfc	(___fltol@f1+3)& (0+255),f,b
 40416  007044                     l5882:
 40417                           
 40418                           ; BSR set to: 0
 40419                           
 40420                           ; BSR set to: 0
 40421  007044  C0B8  F0B8         	movff	___fltol@f1,?___fltol
 40422  007048  C0B9  F0B9         	movff	___fltol@f1+1,?___fltol+1
 40423  00704C  C0BA  F0BA         	movff	___fltol@f1+2,?___fltol+2
 40424  007050  C0BB  F0BB         	movff	___fltol@f1+3,?___fltol+3
 40425  007054  0012               	return	
 40426  007056                     __end_of___fltol:
 40427                           	opt stack 0
 40428                           tblptru	equ	0xFF8
 40429                           tblptrh	equ	0xFF7
 40430                           tblptrl	equ	0xFF6
 40431                           tablat	equ	0xFF5
 40432                           prodh	equ	0xFF4
 40433                           prodl	equ	0xFF3
 40434                           intcon	equ	0xFF2
 40435                           intcon2	equ	0xFF1
 40436                           indf0	equ	0xFEF
 40437                           postinc0	equ	0xFEE
 40438                           postdec0	equ	0xFED
 40439                           fsr0h	equ	0xFEA
 40440                           fsr0l	equ	0xFE9
 40441                           wreg	equ	0xFE8
 40442                           postinc1	equ	0xFE6
 40443                           postdec1	equ	0xFE5
 40444                           plusw1	equ	0xFE3
 40445                           fsr1h	equ	0xFE2
 40446                           fsr1l	equ	0xFE1
 40447                           indf2	equ	0xFDF
 40448                           postinc2	equ	0xFDE
 40449                           postdec2	equ	0xFDD
 40450                           plusw2	equ	0xFDB
 40451                           fsr2h	equ	0xFDA
 40452                           fsr2l	equ	0xFD9
 40453                           status	equ	0xFD8
 40454                           
 40455 ;; *************** function ___flneg *****************
 40456 ;; Defined at:
 40457 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flneg.c"
 40458 ;; Parameters:    Size  Location     Type
 40459 ;;  f1              4   64[BANK0 ] long 
 40460 ;; Auto vars:     Size  Location     Type
 40461 ;;		None
 40462 ;; Return value:  Size  Location     Type
 40463 ;;                  4   64[BANK0 ] long 
 40464 ;; Registers used:
 40465 ;;		wreg, status,2, status,0
 40466 ;; Tracked objects:
 40467 ;;		On entry : 0/0
 40468 ;;		On exit  : 0/0
 40469 ;;		Unchanged: 0/0
 40470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40471 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40474 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40475 ;;Total ram usage:        4 bytes
 40476 ;; Hardware stack levels used:    1
 40477 ;; Hardware stack levels required when called:    5
 40478 ;; This function calls:
 40479 ;;		Nothing
 40480 ;; This function is called by:
 40481 ;;		_readPotentiometers
 40482 ;;		_calculate_pulse_length
 40483 ;; This function uses a non-reentrant model
 40484 ;;
 40485                           
 40486                           	psect	text118
 40487  00974E                     __ptext118:
 40488                           	opt stack 0
 40489  00974E                     ___flneg:
 40490                           	opt stack 22
 40491                           
 40492                           ; BSR set to: 0
 40493                           ;incstack = 0
 40494  00974E  0100               	movlb	0	; () banked
 40495  009750  51A0               	movf	___flneg@f1& (0+255),w,b
 40496  009752  11A1               	iorwf	(___flneg@f1+1)& (0+255),w,b
 40497  009754  11A2               	iorwf	(___flneg@f1+2)& (0+255),w,b
 40498  009756  11A3               	iorwf	(___flneg@f1+3)& (0+255),w,b
 40499  009758  B4D8               	btfsc	status,2,c
 40500  00975A  D008               	goto	l5848
 40501                           
 40502                           ; BSR set to: 0
 40503  00975C  0E00               	movlw	0
 40504  00975E  1BA0               	xorwf	___flneg@f1& (0+255),f,b
 40505  009760  0E00               	movlw	0
 40506  009762  1BA1               	xorwf	(___flneg@f1+1)& (0+255),f,b
 40507  009764  0E00               	movlw	0
 40508  009766  1BA2               	xorwf	(___flneg@f1+2)& (0+255),f,b
 40509  009768  0E80               	movlw	128
 40510  00976A  1BA3               	xorwf	(___flneg@f1+3)& (0+255),f,b
 40511  00976C                     l5848:
 40512                           
 40513                           ; BSR set to: 0
 40514                           
 40515                           ; BSR set to: 0
 40516  00976C  C0A0  F0A0         	movff	___flneg@f1,?___flneg
 40517  009770  C0A1  F0A1         	movff	___flneg@f1+1,?___flneg+1
 40518  009774  C0A2  F0A2         	movff	___flneg@f1+2,?___flneg+2
 40519  009778  C0A3  F0A3         	movff	___flneg@f1+3,?___flneg+3
 40520  00977C  0012               	return	
 40521  00977E                     __end_of___flneg:
 40522                           	opt stack 0
 40523                           tblptru	equ	0xFF8
 40524                           tblptrh	equ	0xFF7
 40525                           tblptrl	equ	0xFF6
 40526                           tablat	equ	0xFF5
 40527                           prodh	equ	0xFF4
 40528                           prodl	equ	0xFF3
 40529                           intcon	equ	0xFF2
 40530                           intcon2	equ	0xFF1
 40531                           indf0	equ	0xFEF
 40532                           postinc0	equ	0xFEE
 40533                           postdec0	equ	0xFED
 40534                           fsr0h	equ	0xFEA
 40535                           fsr0l	equ	0xFE9
 40536                           wreg	equ	0xFE8
 40537                           postinc1	equ	0xFE6
 40538                           postdec1	equ	0xFE5
 40539                           plusw1	equ	0xFE3
 40540                           fsr1h	equ	0xFE2
 40541                           fsr1l	equ	0xFE1
 40542                           indf2	equ	0xFDF
 40543                           postinc2	equ	0xFDE
 40544                           postdec2	equ	0xFDD
 40545                           plusw2	equ	0xFDB
 40546                           fsr2h	equ	0xFDA
 40547                           fsr2l	equ	0xFD9
 40548                           status	equ	0xFD8
 40549                           
 40550 ;; *************** function ___flmul *****************
 40551 ;; Defined at:
 40552 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcmul.c"
 40553 ;; Parameters:    Size  Location     Type
 40554 ;;  b               4   14[BANK0 ] long 
 40555 ;;  a               4   18[BANK0 ] long 
 40556 ;; Auto vars:     Size  Location     Type
 40557 ;;  prod            4   33[BANK0 ] struct .
 40558 ;;  grs             4   28[BANK0 ] unsigned long 
 40559 ;;  temp            2   37[BANK0 ] struct .
 40560 ;;  bexp            1   32[BANK0 ] unsigned char 
 40561 ;;  aexp            1   27[BANK0 ] unsigned char 
 40562 ;;  sign            1   26[BANK0 ] unsigned char 
 40563 ;; Return value:  Size  Location     Type
 40564 ;;                  4   14[BANK0 ] unsigned char 
 40565 ;; Registers used:
 40566 ;;		wreg, status,2, status,0, prodl, prodh
 40567 ;; Tracked objects:
 40568 ;;		On entry : 0/0
 40569 ;;		On exit  : 0/0
 40570 ;;		Unchanged: 0/0
 40571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40572 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40573 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40574 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40575 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40576 ;;Total ram usage:       25 bytes
 40577 ;; Hardware stack levels used:    1
 40578 ;; Hardware stack levels required when called:    5
 40579 ;; This function calls:
 40580 ;;		Nothing
 40581 ;; This function is called by:
 40582 ;;		_readPotentiometers
 40583 ;;		_calculate_pulse_length
 40584 ;; This function uses a non-reentrant model
 40585 ;;
 40586                           
 40587                           	psect	text119
 40588  002FE4                     __ptext119:
 40589                           	opt stack 0
 40590  002FE4                     ___flmul:
 40591                           	opt stack 22
 40592                           
 40593                           ; BSR set to: 0
 40594                           ;incstack = 0
 40595  002FE4  0100               	movlb	0	; () banked
 40596  002FE6  5171               	movf	(___flmul@b+3)& (0+255),w,b
 40597  002FE8  0B80               	andlw	128
 40598  002FEA  6F7A               	movwf	___flmul@sign& (0+255),b
 40599  002FEC  5171               	movf	(___flmul@b+3)& (0+255),w,b
 40600  002FEE  2571               	addwf	(___flmul@b+3)& (0+255),w,b
 40601  002FF0  6F80               	movwf	___flmul@bexp& (0+255),b
 40602                           
 40603                           ; BSR set to: 0
 40604  002FF2  BF70               	btfsc	(___flmul@b+2)& (0+255),7,b
 40605                           
 40606                           ; BSR set to: 0
 40607  002FF4  8180               	bsf	___flmul@bexp& (0+255),0,b
 40608                           
 40609                           ; BSR set to: 0
 40610                           
 40611                           ; BSR set to: 0
 40612  002FF6  5180               	movf	___flmul@bexp& (0+255),w,b
 40613  002FF8  B4D8               	btfsc	status,2,c
 40614  002FFA  D00D               	goto	l6169
 40615                           
 40616                           ; BSR set to: 0
 40617  002FFC  2980               	incf	___flmul@bexp& (0+255),w,b
 40618  002FFE  A4D8               	btfss	status,2,c
 40619  003000  D008               	goto	l6170
 40620                           
 40621                           ; BSR set to: 0
 40622  003002  0E00               	movlw	0
 40623  003004  6F6E               	movwf	___flmul@b& (0+255),b
 40624  003006  0E00               	movlw	0
 40625  003008  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 40626  00300A  0E00               	movlw	0
 40627  00300C  6F70               	movwf	(___flmul@b+2)& (0+255),b
 40628  00300E  0E00               	movlw	0
 40629  003010  6F71               	movwf	(___flmul@b+3)& (0+255),b
 40630  003012                     l6170:
 40631                           
 40632                           ; BSR set to: 0
 40633                           
 40634                           ; BSR set to: 0
 40635  003012  8F70               	bsf	(___flmul@b+2)& (0+255),7,b
 40636  003014  D008               	goto	l6171
 40637  003016                     l6169:
 40638                           
 40639                           ; BSR set to: 0
 40640                           
 40641                           ; BSR set to: 0
 40642  003016  0E00               	movlw	0
 40643  003018  6F6E               	movwf	___flmul@b& (0+255),b
 40644  00301A  0E00               	movlw	0
 40645  00301C  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 40646  00301E  0E00               	movlw	0
 40647  003020  6F70               	movwf	(___flmul@b+2)& (0+255),b
 40648  003022  0E00               	movlw	0
 40649  003024  6F71               	movwf	(___flmul@b+3)& (0+255),b
 40650  003026                     l6171:
 40651                           
 40652                           ; BSR set to: 0
 40653                           
 40654                           ; BSR set to: 0
 40655  003026  5175               	movf	(___flmul@a+3)& (0+255),w,b
 40656  003028  0B80               	andlw	128
 40657  00302A  1B7A               	xorwf	___flmul@sign& (0+255),f,b
 40658                           
 40659                           ; BSR set to: 0
 40660  00302C  5175               	movf	(___flmul@a+3)& (0+255),w,b
 40661  00302E  2575               	addwf	(___flmul@a+3)& (0+255),w,b
 40662  003030  6F7B               	movwf	___flmul@aexp& (0+255),b
 40663                           
 40664                           ; BSR set to: 0
 40665  003032  BF74               	btfsc	(___flmul@a+2)& (0+255),7,b
 40666                           
 40667                           ; BSR set to: 0
 40668  003034  817B               	bsf	___flmul@aexp& (0+255),0,b
 40669                           
 40670                           ; BSR set to: 0
 40671                           
 40672                           ; BSR set to: 0
 40673  003036  517B               	movf	___flmul@aexp& (0+255),w,b
 40674  003038  B4D8               	btfsc	status,2,c
 40675  00303A  D00D               	goto	l6173
 40676                           
 40677                           ; BSR set to: 0
 40678  00303C  297B               	incf	___flmul@aexp& (0+255),w,b
 40679  00303E  A4D8               	btfss	status,2,c
 40680  003040  D008               	goto	l6174
 40681                           
 40682                           ; BSR set to: 0
 40683  003042  0E00               	movlw	0
 40684  003044  6F72               	movwf	___flmul@a& (0+255),b
 40685  003046  0E00               	movlw	0
 40686  003048  6F73               	movwf	(___flmul@a+1)& (0+255),b
 40687  00304A  0E00               	movlw	0
 40688  00304C  6F74               	movwf	(___flmul@a+2)& (0+255),b
 40689  00304E  0E00               	movlw	0
 40690  003050  6F75               	movwf	(___flmul@a+3)& (0+255),b
 40691  003052                     l6174:
 40692                           
 40693                           ; BSR set to: 0
 40694                           
 40695                           ; BSR set to: 0
 40696  003052  8F74               	bsf	(___flmul@a+2)& (0+255),7,b
 40697  003054  D008               	goto	l6175
 40698  003056                     l6173:
 40699                           
 40700                           ; BSR set to: 0
 40701                           
 40702                           ; BSR set to: 0
 40703  003056  0E00               	movlw	0
 40704  003058  6F72               	movwf	___flmul@a& (0+255),b
 40705  00305A  0E00               	movlw	0
 40706  00305C  6F73               	movwf	(___flmul@a+1)& (0+255),b
 40707  00305E  0E00               	movlw	0
 40708  003060  6F74               	movwf	(___flmul@a+2)& (0+255),b
 40709  003062  0E00               	movlw	0
 40710  003064  6F75               	movwf	(___flmul@a+3)& (0+255),b
 40711  003066                     l6175:
 40712                           
 40713                           ; BSR set to: 0
 40714  003066  517B               	movf	___flmul@aexp& (0+255),w,b
 40715  003068  B4D8               	btfsc	status,2,c
 40716  00306A  D003               	goto	u51960
 40717                           
 40718                           ; BSR set to: 0
 40719  00306C  5180               	movf	___flmul@bexp& (0+255),w,b
 40720  00306E  A4D8               	btfss	status,2,c
 40721  003070  D009               	goto	l6176
 40722  003072                     u51960:
 40723                           
 40724                           ; BSR set to: 0
 40725                           
 40726                           ; BSR set to: 0
 40727  003072  0E00               	movlw	0
 40728  003074  6F6E               	movwf	?___flmul& (0+255),b
 40729  003076  0E00               	movlw	0
 40730  003078  6F6F               	movwf	(?___flmul+1)& (0+255),b
 40731  00307A  0E00               	movlw	0
 40732  00307C  6F70               	movwf	(?___flmul+2)& (0+255),b
 40733  00307E  0E00               	movlw	0
 40734  003080  6F71               	movwf	(?___flmul+3)& (0+255),b
 40735                           
 40736                           ; BSR set to: 0
 40737  003082  0012               	return	
 40738  003084                     l6176:
 40739                           
 40740                           ; BSR set to: 0
 40741                           
 40742                           ; BSR set to: 0
 40743  003084  5174               	movf	(___flmul@a+2)& (0+255),w,b
 40744  003086  036E               	mulwf	___flmul@b& (0+255),b
 40745  003088  CFF3 F085          	movff	prodl,___flmul@temp
 40746  00308C  CFF4 F086          	movff	prodh,___flmul@temp+1
 40747                           
 40748                           ; BSR set to: 0
 40749  003090  5185               	movf	___flmul@temp& (0+255),w,b
 40750  003092  6F7C               	movwf	___flmul@grs& (0+255),b
 40751  003094  6B7D               	clrf	(___flmul@grs+1)& (0+255),b
 40752  003096  6B7E               	clrf	(___flmul@grs+2)& (0+255),b
 40753  003098  6B7F               	clrf	(___flmul@grs+3)& (0+255),b
 40754                           
 40755                           ; BSR set to: 0
 40756  00309A  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40757  00309C  6F81               	movwf	___flmul@prod& (0+255),b
 40758  00309E  6B82               	clrf	(___flmul@prod+1)& (0+255),b
 40759  0030A0  6B83               	clrf	(___flmul@prod+2)& (0+255),b
 40760  0030A2  6B84               	clrf	(___flmul@prod+3)& (0+255),b
 40761  0030A4  5173               	movf	(___flmul@a+1)& (0+255),w,b
 40762  0030A6  036F               	mulwf	(___flmul@b+1)& (0+255),b
 40763  0030A8  CFF3 F085          	movff	prodl,___flmul@temp
 40764  0030AC  CFF4 F086          	movff	prodh,___flmul@temp+1
 40765                           
 40766                           ; BSR set to: 0
 40767  0030B0  5185               	movf	___flmul@temp& (0+255),w,b
 40768  0030B2  277C               	addwf	___flmul@grs& (0+255),f,b
 40769  0030B4  0E00               	movlw	0
 40770  0030B6  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 40771  0030B8  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 40772  0030BA  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 40773                           
 40774                           ; BSR set to: 0
 40775  0030BC  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40776  0030BE  2781               	addwf	___flmul@prod& (0+255),f,b
 40777  0030C0  0E00               	movlw	0
 40778  0030C2  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 40779  0030C4  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 40780  0030C6  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 40781  0030C8  5172               	movf	___flmul@a& (0+255),w,b
 40782  0030CA  0370               	mulwf	(___flmul@b+2)& (0+255),b
 40783  0030CC  CFF3 F085          	movff	prodl,___flmul@temp
 40784  0030D0  CFF4 F086          	movff	prodh,___flmul@temp+1
 40785                           
 40786                           ; BSR set to: 0
 40787  0030D4  5185               	movf	___flmul@temp& (0+255),w,b
 40788  0030D6  277C               	addwf	___flmul@grs& (0+255),f,b
 40789  0030D8  0E00               	movlw	0
 40790  0030DA  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 40791  0030DC  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 40792  0030DE  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 40793                           
 40794                           ; BSR set to: 0
 40795  0030E0  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40796  0030E2  2781               	addwf	___flmul@prod& (0+255),f,b
 40797  0030E4  0E00               	movlw	0
 40798  0030E6  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 40799  0030E8  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 40800  0030EA  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 40801                           
 40802                           ; BSR set to: 0
 40803  0030EC  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 40804  0030F0  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 40805  0030F4  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 40806  0030F8  6B7C               	clrf	___flmul@grs& (0+255),b
 40807                           
 40808                           ; BSR set to: 0
 40809  0030FA  5172               	movf	___flmul@a& (0+255),w,b
 40810  0030FC  036F               	mulwf	(___flmul@b+1)& (0+255),b
 40811  0030FE  CFF3 F085          	movff	prodl,___flmul@temp
 40812  003102  CFF4 F086          	movff	prodh,___flmul@temp+1
 40813                           
 40814                           ; BSR set to: 0
 40815  003106  5185               	movf	___flmul@temp& (0+255),w,b
 40816  003108  277C               	addwf	___flmul@grs& (0+255),f,b
 40817  00310A  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40818  00310C  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 40819  00310E  0E00               	movlw	0
 40820  003110  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 40821  003112  0E00               	movlw	0
 40822  003114  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 40823                           
 40824                           ; BSR set to: 0
 40825  003116  5173               	movf	(___flmul@a+1)& (0+255),w,b
 40826  003118  036E               	mulwf	___flmul@b& (0+255),b
 40827  00311A  CFF3 F085          	movff	prodl,___flmul@temp
 40828  00311E  CFF4 F086          	movff	prodh,___flmul@temp+1
 40829                           
 40830                           ; BSR set to: 0
 40831  003122  5185               	movf	___flmul@temp& (0+255),w,b
 40832  003124  277C               	addwf	___flmul@grs& (0+255),f,b
 40833  003126  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40834  003128  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 40835  00312A  0E00               	movlw	0
 40836  00312C  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 40837  00312E  0E00               	movlw	0
 40838  003130  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 40839                           
 40840                           ; BSR set to: 0
 40841  003132  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 40842  003136  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 40843  00313A  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 40844  00313E  6B7C               	clrf	___flmul@grs& (0+255),b
 40845  003140  5172               	movf	___flmul@a& (0+255),w,b
 40846  003142  036E               	mulwf	___flmul@b& (0+255),b
 40847  003144  CFF3 F085          	movff	prodl,___flmul@temp
 40848  003148  CFF4 F086          	movff	prodh,___flmul@temp+1
 40849                           
 40850                           ; BSR set to: 0
 40851  00314C  5185               	movf	___flmul@temp& (0+255),w,b
 40852  00314E  277C               	addwf	___flmul@grs& (0+255),f,b
 40853  003150  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40854  003152  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 40855  003154  0E00               	movlw	0
 40856  003156  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 40857  003158  0E00               	movlw	0
 40858  00315A  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 40859                           
 40860                           ; BSR set to: 0
 40861  00315C  5174               	movf	(___flmul@a+2)& (0+255),w,b
 40862  00315E  036F               	mulwf	(___flmul@b+1)& (0+255),b
 40863  003160  CFF3 F085          	movff	prodl,___flmul@temp
 40864  003164  CFF4 F086          	movff	prodh,___flmul@temp+1
 40865  003168  5185               	movf	___flmul@temp& (0+255),w,b
 40866  00316A  2781               	addwf	___flmul@prod& (0+255),f,b
 40867  00316C  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40868  00316E  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 40869  003170  0E00               	movlw	0
 40870  003172  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 40871  003174  0E00               	movlw	0
 40872  003176  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 40873                           
 40874                           ; BSR set to: 0
 40875  003178  5173               	movf	(___flmul@a+1)& (0+255),w,b
 40876  00317A  0370               	mulwf	(___flmul@b+2)& (0+255),b
 40877  00317C  CFF3 F085          	movff	prodl,___flmul@temp
 40878  003180  CFF4 F086          	movff	prodh,___flmul@temp+1
 40879                           
 40880                           ; BSR set to: 0
 40881  003184  5185               	movf	___flmul@temp& (0+255),w,b
 40882  003186  2781               	addwf	___flmul@prod& (0+255),f,b
 40883  003188  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40884  00318A  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 40885  00318C  0E00               	movlw	0
 40886  00318E  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 40887  003190  0E00               	movlw	0
 40888  003192  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 40889  003194  5174               	movf	(___flmul@a+2)& (0+255),w,b
 40890  003196  0370               	mulwf	(___flmul@b+2)& (0+255),b
 40891  003198  CFF3 F085          	movff	prodl,___flmul@temp
 40892  00319C  CFF4 F086          	movff	prodh,___flmul@temp+1
 40893                           
 40894                           ; BSR set to: 0
 40895  0031A0  5185               	movf	___flmul@temp& (0+255),w,b
 40896  0031A2  6F76               	movwf	??___flmul& (0+255),b
 40897  0031A4  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40898  0031A6  6F77               	movwf	(??___flmul+1)& (0+255),b
 40899  0031A8  6B78               	clrf	(??___flmul+2)& (0+255),b
 40900  0031AA  6B79               	clrf	(??___flmul+3)& (0+255),b
 40901  0031AC  C078  F079         	movff	??___flmul+2,??___flmul+3
 40902  0031B0  C077  F078         	movff	??___flmul+1,??___flmul+2
 40903  0031B4  C076  F077         	movff	??___flmul,??___flmul+1
 40904  0031B8  6B76               	clrf	??___flmul& (0+255),b
 40905  0031BA  5176               	movf	??___flmul& (0+255),w,b
 40906  0031BC  2781               	addwf	___flmul@prod& (0+255),f,b
 40907  0031BE  5177               	movf	(??___flmul+1)& (0+255),w,b
 40908  0031C0  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 40909  0031C2  5178               	movf	(??___flmul+2)& (0+255),w,b
 40910  0031C4  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 40911  0031C6  5179               	movf	(??___flmul+3)& (0+255),w,b
 40912  0031C8  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 40913                           
 40914                           ; BSR set to: 0
 40915  0031CA  C07C  F076         	movff	___flmul@grs,??___flmul
 40916  0031CE  C07D  F077         	movff	___flmul@grs+1,??___flmul+1
 40917  0031D2  C07E  F078         	movff	___flmul@grs+2,??___flmul+2
 40918  0031D6  C07F  F079         	movff	___flmul@grs+3,??___flmul+3
 40919  0031DA  0E19               	movlw	25
 40920  0031DC  D005               	goto	u51970
 40921  0031DE                     u51975:
 40922  0031DE  90D8               	bcf	status,0,c
 40923  0031E0  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 40924  0031E2  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 40925  0031E4  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 40926  0031E6  3376               	rrcf	??___flmul& (0+255),f,b
 40927  0031E8                     u51970:
 40928  0031E8  2EE8               	decfsz	wreg,f,c
 40929  0031EA  D7F9               	goto	u51975
 40930  0031EC  5176               	movf	??___flmul& (0+255),w,b
 40931  0031EE  2781               	addwf	___flmul@prod& (0+255),f,b
 40932  0031F0  5177               	movf	(??___flmul+1)& (0+255),w,b
 40933  0031F2  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 40934  0031F4  5178               	movf	(??___flmul+2)& (0+255),w,b
 40935  0031F6  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 40936  0031F8  5179               	movf	(??___flmul+3)& (0+255),w,b
 40937  0031FA  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 40938                           
 40939                           ; BSR set to: 0
 40940  0031FC  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 40941  003200  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 40942  003204  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 40943  003208  6B7C               	clrf	___flmul@grs& (0+255),b
 40944                           
 40945                           ; BSR set to: 0
 40946  00320A  517B               	movf	___flmul@aexp& (0+255),w,b
 40947  00320C  C080  F076         	movff	___flmul@bexp,??___flmul
 40948  003210  6B77               	clrf	(??___flmul+1)& (0+255),b
 40949  003212  2776               	addwf	??___flmul& (0+255),f,b
 40950  003214  0E00               	movlw	0
 40951  003216  2377               	addwfc	(??___flmul+1)& (0+255),f,b
 40952  003218  0E82               	movlw	130
 40953  00321A  2576               	addwf	??___flmul& (0+255),w,b
 40954  00321C  6F85               	movwf	___flmul@temp& (0+255),b
 40955  00321E  0EFF               	movlw	255
 40956  003220  2177               	addwfc	(??___flmul+1)& (0+255),w,b
 40957  003222  6F86               	movwf	(___flmul@temp+1)& (0+255),b
 40958  003224  D00F               	goto	l6180
 40959  003226                     
 40960                           ; BSR set to: 0
 40961                           
 40962                           ; BSR set to: 0
 40963  003226  90D8               	bcf	status,0,c
 40964  003228  3781               	rlcf	___flmul@prod& (0+255),f,b
 40965  00322A  3782               	rlcf	(___flmul@prod+1)& (0+255),f,b
 40966  00322C  3783               	rlcf	(___flmul@prod+2)& (0+255),f,b
 40967  00322E  3784               	rlcf	(___flmul@prod+3)& (0+255),f,b
 40968                           
 40969                           ; BSR set to: 0
 40970  003230  BF7F               	btfsc	(___flmul@grs+3)& (0+255),7,b
 40971                           
 40972                           ; BSR set to: 0
 40973  003232  8181               	bsf	___flmul@prod& (0+255),0,b
 40974                           
 40975                           ; BSR set to: 0
 40976  003234  90D8               	bcf	status,0,c
 40977  003236  377C               	rlcf	___flmul@grs& (0+255),f,b
 40978  003238  377D               	rlcf	(___flmul@grs+1)& (0+255),f,b
 40979  00323A  377E               	rlcf	(___flmul@grs+2)& (0+255),f,b
 40980  00323C  377F               	rlcf	(___flmul@grs+3)& (0+255),f,b
 40981  00323E  0785               	decf	___flmul@temp& (0+255),f,b
 40982  003240  A0D8               	btfss	status,0,c
 40983  003242  0786               	decf	(___flmul@temp+1)& (0+255),f,b
 40984  003244                     l6180:
 40985                           
 40986                           ; BSR set to: 0
 40987                           
 40988                           ; BSR set to: 0
 40989  003244  AF83               	btfss	(___flmul@prod+2)& (0+255),7,b
 40990  003246  D7EF               	goto	l6181
 40991                           
 40992                           ; BSR set to: 0
 40993                           
 40994                           ; BSR set to: 0
 40995  003248  0E00               	movlw	0
 40996  00324A  6F7B               	movwf	___flmul@aexp& (0+255),b
 40997                           
 40998                           ; BSR set to: 0
 40999  00324C  AF7F               	btfss	(___flmul@grs+3)& (0+255),7,b
 41000  00324E  D016               	goto	l6187
 41001                           
 41002                           ; BSR set to: 0
 41003  003250  0EFF               	movlw	255
 41004  003252  157C               	andwf	___flmul@grs& (0+255),w,b
 41005  003254  6F76               	movwf	??___flmul& (0+255),b
 41006  003256  0EFF               	movlw	255
 41007  003258  157D               	andwf	(___flmul@grs+1)& (0+255),w,b
 41008  00325A  6F77               	movwf	(??___flmul+1)& (0+255),b
 41009  00325C  0EFF               	movlw	255
 41010  00325E  157E               	andwf	(___flmul@grs+2)& (0+255),w,b
 41011  003260  6F78               	movwf	(??___flmul+2)& (0+255),b
 41012  003262  0E7F               	movlw	127
 41013  003264  157F               	andwf	(___flmul@grs+3)& (0+255),w,b
 41014  003266  6F79               	movwf	(??___flmul+3)& (0+255),b
 41015  003268  5176               	movf	??___flmul& (0+255),w,b
 41016  00326A  1177               	iorwf	(??___flmul+1)& (0+255),w,b
 41017  00326C  1178               	iorwf	(??___flmul+2)& (0+255),w,b
 41018  00326E  1179               	iorwf	(??___flmul+3)& (0+255),w,b
 41019  003270  A4D8               	btfss	status,2,c
 41020  003272  D002               	goto	u52020
 41021                           
 41022                           ; BSR set to: 0
 41023                           
 41024                           ; BSR set to: 0
 41025  003274  A181               	btfss	___flmul@prod& (0+255),0,b
 41026  003276  D002               	goto	l6187
 41027  003278                     u52020:
 41028                           
 41029                           ; BSR set to: 0
 41030  003278  0E01               	movlw	1
 41031  00327A  6F7B               	movwf	___flmul@aexp& (0+255),b
 41032  00327C                     l6187:
 41033                           
 41034                           ; BSR set to: 0
 41035                           
 41036                           ; BSR set to: 0
 41037                           
 41038                           ; BSR set to: 0
 41039  00327C  517B               	movf	___flmul@aexp& (0+255),w,b
 41040  00327E  B4D8               	btfsc	status,2,c
 41041  003280  D01F               	goto	l6189
 41042                           
 41043                           ; BSR set to: 0
 41044  003282  0E01               	movlw	1
 41045  003284  2781               	addwf	___flmul@prod& (0+255),f,b
 41046  003286  0E00               	movlw	0
 41047  003288  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 41048  00328A  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 41049  00328C  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 41050                           
 41051                           ; BSR set to: 0
 41052  00328E  A184               	btfss	(___flmul@prod+3)& (0+255),0,b
 41053  003290  D017               	goto	l6189
 41054                           
 41055                           ; BSR set to: 0
 41056  003292  C081  F076         	movff	___flmul@prod,??___flmul
 41057  003296  C082  F077         	movff	___flmul@prod+1,??___flmul+1
 41058  00329A  C083  F078         	movff	___flmul@prod+2,??___flmul+2
 41059  00329E  C084  F079         	movff	___flmul@prod+3,??___flmul+3
 41060  0032A2  3579               	rlcf	(??___flmul+3)& (0+255),w,b
 41061  0032A4  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 41062  0032A6  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 41063  0032A8  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 41064  0032AA  3376               	rrcf	??___flmul& (0+255),f,b
 41065  0032AC  C076  F081         	movff	??___flmul,___flmul@prod
 41066  0032B0  C077  F082         	movff	??___flmul+1,___flmul@prod+1
 41067  0032B4  C078  F083         	movff	??___flmul+2,___flmul@prod+2
 41068  0032B8  C079  F084         	movff	??___flmul+3,___flmul@prod+3
 41069                           
 41070                           ; BSR set to: 0
 41071  0032BC  4B85               	infsnz	___flmul@temp& (0+255),f,b
 41072  0032BE  2B86               	incf	(___flmul@temp+1)& (0+255),f,b
 41073  0032C0                     l6189:
 41074                           
 41075                           ; BSR set to: 0
 41076                           
 41077                           ; BSR set to: 0
 41078                           
 41079                           ; BSR set to: 0
 41080  0032C0  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 41081  0032C2  D00D               	goto	l6190
 41082  0032C4  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 41083  0032C6  E103               	bnz	u52050
 41084  0032C8  2985               	incf	___flmul@temp& (0+255),w,b
 41085  0032CA  A0D8               	btfss	status,0,c
 41086  0032CC  D008               	goto	l6190
 41087  0032CE                     u52050:
 41088                           
 41089                           ; BSR set to: 0
 41090  0032CE  0E00               	movlw	0
 41091  0032D0  6F81               	movwf	___flmul@prod& (0+255),b
 41092  0032D2  0E00               	movlw	0
 41093  0032D4  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 41094  0032D6  0E80               	movlw	128
 41095  0032D8  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 41096  0032DA  0E7F               	movlw	127
 41097  0032DC  D020               	goto	L22
 41098  0032DE                     l6190:
 41099                           
 41100                           ; BSR set to: 0
 41101                           
 41102                           ; BSR set to: 0
 41103  0032DE  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 41104  0032E0  D005               	goto	u52060
 41105  0032E2  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 41106  0032E4  E10E               	bnz	l6192
 41107  0032E6  0585               	decf	___flmul@temp& (0+255),w,b
 41108  0032E8  B0D8               	btfsc	status,0,c
 41109  0032EA  D00B               	goto	l6192
 41110  0032EC                     u52060:
 41111                           
 41112                           ; BSR set to: 0
 41113  0032EC  0E00               	movlw	0
 41114  0032EE  6F81               	movwf	___flmul@prod& (0+255),b
 41115  0032F0  0E00               	movlw	0
 41116  0032F2  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 41117  0032F4  0E00               	movlw	0
 41118  0032F6  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 41119  0032F8  0E00               	movlw	0
 41120  0032FA  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 41121  0032FC  0E00               	movlw	0
 41122  0032FE  6F7A               	movwf	___flmul@sign& (0+255),b
 41123  003300  D00F               	goto	l6193
 41124  003302                     l6192:
 41125                           
 41126                           ; BSR set to: 0
 41127  003302  C085  F080         	movff	___flmul@temp,___flmul@bexp
 41128                           
 41129                           ; BSR set to: 0
 41130  003306  0EFF               	movlw	255
 41131  003308  1781               	andwf	___flmul@prod& (0+255),f,b
 41132  00330A  0EFF               	movlw	255
 41133  00330C  1782               	andwf	(___flmul@prod+1)& (0+255),f,b
 41134  00330E  0E7F               	movlw	127
 41135  003310  1783               	andwf	(___flmul@prod+2)& (0+255),f,b
 41136  003312  0E00               	movlw	0
 41137  003314  1784               	andwf	(___flmul@prod+3)& (0+255),f,b
 41138                           
 41139                           ; BSR set to: 0
 41140  003316  B180               	btfsc	___flmul@bexp& (0+255),0,b
 41141                           
 41142                           ; BSR set to: 0
 41143  003318  8F83               	bsf	(___flmul@prod+2)& (0+255),7,b
 41144                           
 41145                           ; BSR set to: 0
 41146                           
 41147                           ; BSR set to: 0
 41148  00331A  90D8               	bcf	status,0,c
 41149  00331C  3180               	rrcf	___flmul@bexp& (0+255),w,b
 41150  00331E                     L22:
 41151  00331E  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 41152  003320                     l6193:
 41153                           
 41154                           ; BSR set to: 0
 41155                           
 41156                           ; BSR set to: 0
 41157                           
 41158                           ; BSR set to: 0
 41159  003320  517A               	movf	___flmul@sign& (0+255),w,b
 41160  003322  1384               	iorwf	(___flmul@prod+3)& (0+255),f,b
 41161                           
 41162                           ; BSR set to: 0
 41163  003324  C081  F06E         	movff	___flmul@prod,?___flmul
 41164  003328  C082  F06F         	movff	___flmul@prod+1,?___flmul+1
 41165  00332C  C083  F070         	movff	___flmul@prod+2,?___flmul+2
 41166  003330  C084  F071         	movff	___flmul@prod+3,?___flmul+3
 41167  003334  0012               	return	
 41168  003336                     __end_of___flmul:
 41169                           	opt stack 0
 41170                           tblptru	equ	0xFF8
 41171                           tblptrh	equ	0xFF7
 41172                           tblptrl	equ	0xFF6
 41173                           tablat	equ	0xFF5
 41174                           prodh	equ	0xFF4
 41175                           prodl	equ	0xFF3
 41176                           intcon	equ	0xFF2
 41177                           intcon2	equ	0xFF1
 41178                           indf0	equ	0xFEF
 41179                           postinc0	equ	0xFEE
 41180                           postdec0	equ	0xFED
 41181                           fsr0h	equ	0xFEA
 41182                           fsr0l	equ	0xFE9
 41183                           wreg	equ	0xFE8
 41184                           postinc1	equ	0xFE6
 41185                           postdec1	equ	0xFE5
 41186                           plusw1	equ	0xFE3
 41187                           fsr1h	equ	0xFE2
 41188                           fsr1l	equ	0xFE1
 41189                           indf2	equ	0xFDF
 41190                           postinc2	equ	0xFDE
 41191                           postdec2	equ	0xFDD
 41192                           plusw2	equ	0xFDB
 41193                           fsr2h	equ	0xFDA
 41194                           fsr2l	equ	0xFD9
 41195                           status	equ	0xFD8
 41196                           
 41197 ;; *************** function ___fladd *****************
 41198 ;; Defined at:
 41199 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
 41200 ;; Parameters:    Size  Location     Type
 41201 ;;  b               4   68[BANK0 ] unsigned char 
 41202 ;;  a               4   72[BANK0 ] unsigned char 
 41203 ;; Auto vars:     Size  Location     Type
 41204 ;;  grs             1   87[BANK0 ] unsigned char 
 41205 ;;  bexp            1   86[BANK0 ] unsigned char 
 41206 ;;  aexp            1   85[BANK0 ] unsigned char 
 41207 ;;  signs           1   84[BANK0 ] unsigned char 
 41208 ;; Return value:  Size  Location     Type
 41209 ;;                  4   68[BANK0 ] unsigned char 
 41210 ;; Registers used:
 41211 ;;		wreg, status,2, status,0
 41212 ;; Tracked objects:
 41213 ;;		On entry : 0/0
 41214 ;;		On exit  : 0/0
 41215 ;;		Unchanged: 0/0
 41216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 41217 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41218 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41219 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41220 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41221 ;;Total ram usage:       20 bytes
 41222 ;; Hardware stack levels used:    1
 41223 ;; Hardware stack levels required when called:    5
 41224 ;; This function calls:
 41225 ;;		Nothing
 41226 ;; This function is called by:
 41227 ;;		_readPotentiometers
 41228 ;;		_calculate_pulse_length
 41229 ;; This function uses a non-reentrant model
 41230 ;;
 41231                           
 41232                           	psect	text120
 41233  003336                     __ptext120:
 41234                           	opt stack 0
 41235  003336                     ___fladd:
 41236                           	opt stack 22
 41237                           
 41238                           ; BSR set to: 0
 41239                           ;incstack = 0
 41240  003336  0100               	movlb	0	; () banked
 41241  003338  51A7               	movf	(___fladd@b+3)& (0+255),w,b
 41242  00333A  0B80               	andlw	128
 41243  00333C  6FB4               	movwf	___fladd@signs& (0+255),b
 41244  00333E  51A7               	movf	(___fladd@b+3)& (0+255),w,b
 41245  003340  25A7               	addwf	(___fladd@b+3)& (0+255),w,b
 41246  003342  6FB6               	movwf	___fladd@bexp& (0+255),b
 41247                           
 41248                           ; BSR set to: 0
 41249  003344  BFA6               	btfsc	(___fladd@b+2)& (0+255),7,b
 41250                           
 41251                           ; BSR set to: 0
 41252  003346  81B6               	bsf	___fladd@bexp& (0+255),0,b
 41253                           
 41254                           ; BSR set to: 0
 41255                           
 41256                           ; BSR set to: 0
 41257  003348  51B6               	movf	___fladd@bexp& (0+255),w,b
 41258  00334A  B4D8               	btfsc	status,2,c
 41259  00334C  D00D               	goto	l6078
 41260                           
 41261                           ; BSR set to: 0
 41262  00334E  29B6               	incf	___fladd@bexp& (0+255),w,b
 41263  003350  A4D8               	btfss	status,2,c
 41264  003352  D008               	goto	l6079
 41265                           
 41266                           ; BSR set to: 0
 41267  003354  0E00               	movlw	0
 41268  003356  6FA4               	movwf	___fladd@b& (0+255),b
 41269  003358  0E00               	movlw	0
 41270  00335A  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 41271  00335C  0E00               	movlw	0
 41272  00335E  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 41273  003360  0E00               	movlw	0
 41274  003362  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 41275  003364                     l6079:
 41276                           
 41277                           ; BSR set to: 0
 41278                           
 41279                           ; BSR set to: 0
 41280  003364  8FA6               	bsf	(___fladd@b+2)& (0+255),7,b
 41281  003366  D006               	goto	L23
 41282  003368                     l6078:
 41283                           
 41284                           ; BSR set to: 0
 41285                           
 41286                           ; BSR set to: 0
 41287  003368  0E00               	movlw	0
 41288  00336A  6FA4               	movwf	___fladd@b& (0+255),b
 41289  00336C  0E00               	movlw	0
 41290  00336E  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 41291  003370  0E00               	movlw	0
 41292  003372  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 41293  003374                     L23:
 41294  003374  0E00               	movlw	0
 41295  003376  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 41296                           
 41297                           ; BSR set to: 0
 41298                           
 41299                           ; BSR set to: 0
 41300  003378  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 41301  00337A  0B80               	andlw	128
 41302  00337C  6FB5               	movwf	___fladd@aexp& (0+255),b
 41303                           
 41304                           ; BSR set to: 0
 41305  00337E  51B4               	movf	___fladd@signs& (0+255),w,b
 41306  003380  19B5               	xorwf	___fladd@aexp& (0+255),w,b
 41307  003382  A4D8               	btfss	status,2,c
 41308                           
 41309                           ; BSR set to: 0
 41310  003384  8DB4               	bsf	___fladd@signs& (0+255),6,b
 41311                           
 41312                           ; BSR set to: 0
 41313                           
 41314                           ; BSR set to: 0
 41315  003386  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 41316  003388  25AB               	addwf	(___fladd@a+3)& (0+255),w,b
 41317  00338A  6FB5               	movwf	___fladd@aexp& (0+255),b
 41318                           
 41319                           ; BSR set to: 0
 41320  00338C  BFAA               	btfsc	(___fladd@a+2)& (0+255),7,b
 41321                           
 41322                           ; BSR set to: 0
 41323  00338E  81B5               	bsf	___fladd@aexp& (0+255),0,b
 41324                           
 41325                           ; BSR set to: 0
 41326                           
 41327                           ; BSR set to: 0
 41328  003390  51B5               	movf	___fladd@aexp& (0+255),w,b
 41329  003392  B4D8               	btfsc	status,2,c
 41330  003394  D00D               	goto	l6083
 41331                           
 41332                           ; BSR set to: 0
 41333  003396  29B5               	incf	___fladd@aexp& (0+255),w,b
 41334  003398  A4D8               	btfss	status,2,c
 41335  00339A  D008               	goto	l6084
 41336                           
 41337                           ; BSR set to: 0
 41338  00339C  0E00               	movlw	0
 41339  00339E  6FA8               	movwf	___fladd@a& (0+255),b
 41340  0033A0  0E00               	movlw	0
 41341  0033A2  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 41342  0033A4  0E00               	movlw	0
 41343  0033A6  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 41344  0033A8  0E00               	movlw	0
 41345  0033AA  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 41346  0033AC                     l6084:
 41347                           
 41348                           ; BSR set to: 0
 41349                           
 41350                           ; BSR set to: 0
 41351  0033AC  8FAA               	bsf	(___fladd@a+2)& (0+255),7,b
 41352  0033AE  D006               	goto	L24
 41353  0033B0                     l6083:
 41354                           
 41355                           ; BSR set to: 0
 41356                           
 41357                           ; BSR set to: 0
 41358  0033B0  0E00               	movlw	0
 41359  0033B2  6FA8               	movwf	___fladd@a& (0+255),b
 41360  0033B4  0E00               	movlw	0
 41361  0033B6  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 41362  0033B8  0E00               	movlw	0
 41363  0033BA  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 41364  0033BC                     L24:
 41365  0033BC  0E00               	movlw	0
 41366  0033BE  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 41367                           
 41368                           ; BSR set to: 0
 41369                           
 41370                           ; BSR set to: 0
 41371  0033C0  51B6               	movf	___fladd@bexp& (0+255),w,b
 41372  0033C2  5DB5               	subwf	___fladd@aexp& (0+255),w,b
 41373  0033C4  B0D8               	btfsc	status,0,c
 41374  0033C6  D022               	goto	l6086
 41375                           
 41376                           ; BSR set to: 0
 41377  0033C8  ADB4               	btfss	___fladd@signs& (0+255),6,b
 41378  0033CA  D002               	goto	l6087
 41379                           
 41380                           ; BSR set to: 0
 41381  0033CC  0E80               	movlw	128
 41382  0033CE  1BB4               	xorwf	___fladd@signs& (0+255),f,b
 41383  0033D0                     l6087:
 41384                           
 41385                           ; BSR set to: 0
 41386                           
 41387                           ; BSR set to: 0
 41388  0033D0  C0B6  F0B7         	movff	___fladd@bexp,___fladd@grs
 41389                           
 41390                           ; BSR set to: 0
 41391  0033D4  C0B5  F0B6         	movff	___fladd@aexp,___fladd@bexp
 41392                           
 41393                           ; BSR set to: 0
 41394  0033D8  C0B7  F0B5         	movff	___fladd@grs,___fladd@aexp
 41395                           
 41396                           ; BSR set to: 0
 41397  0033DC  C0A4  F0B7         	movff	___fladd@b,___fladd@grs
 41398                           
 41399                           ; BSR set to: 0
 41400  0033E0  C0A8  F0A4         	movff	___fladd@a,___fladd@b
 41401                           
 41402                           ; BSR set to: 0
 41403  0033E4  C0B7  F0A8         	movff	___fladd@grs,___fladd@a
 41404                           
 41405                           ; BSR set to: 0
 41406  0033E8  C0A5  F0B7         	movff	___fladd@b+1,___fladd@grs
 41407                           
 41408                           ; BSR set to: 0
 41409  0033EC  C0A9  F0A5         	movff	___fladd@a+1,___fladd@b+1
 41410                           
 41411                           ; BSR set to: 0
 41412  0033F0  C0B7  F0A9         	movff	___fladd@grs,___fladd@a+1
 41413                           
 41414                           ; BSR set to: 0
 41415  0033F4  C0A6  F0B7         	movff	___fladd@b+2,___fladd@grs
 41416                           
 41417                           ; BSR set to: 0
 41418  0033F8  C0AA  F0A6         	movff	___fladd@a+2,___fladd@b+2
 41419                           
 41420                           ; BSR set to: 0
 41421  0033FC  C0B7  F0AA         	movff	___fladd@grs,___fladd@a+2
 41422                           
 41423                           ; BSR set to: 0
 41424  003400  C0A7  F0B7         	movff	___fladd@b+3,___fladd@grs
 41425                           
 41426                           ; BSR set to: 0
 41427  003404  C0AB  F0A7         	movff	___fladd@a+3,___fladd@b+3
 41428                           
 41429                           ; BSR set to: 0
 41430  003408  C0B7  F0AB         	movff	___fladd@grs,___fladd@a+3
 41431  00340C                     l6086:
 41432                           
 41433                           ; BSR set to: 0
 41434                           
 41435                           ; BSR set to: 0
 41436  00340C  0E00               	movlw	0
 41437  00340E  6FB7               	movwf	___fladd@grs& (0+255),b
 41438                           
 41439                           ; BSR set to: 0
 41440  003410  51B6               	movf	___fladd@bexp& (0+255),w,b
 41441  003412  6FAC               	movwf	??___fladd& (0+255),b
 41442  003414  6BAD               	clrf	(??___fladd+1)& (0+255),b
 41443  003416  1FAC               	comf	??___fladd& (0+255),f,b
 41444  003418  1FAD               	comf	(??___fladd+1)& (0+255),f,b
 41445  00341A  4BAC               	infsnz	??___fladd& (0+255),f,b
 41446  00341C  2BAD               	incf	(??___fladd+1)& (0+255),f,b
 41447  00341E  51B5               	movf	___fladd@aexp& (0+255),w,b
 41448  003420  6FAE               	movwf	(??___fladd+2)& (0+255),b
 41449  003422  6BAF               	clrf	(??___fladd+3)& (0+255),b
 41450  003424  51AC               	movf	??___fladd& (0+255),w,b
 41451  003426  27AE               	addwf	(??___fladd+2)& (0+255),f,b
 41452  003428  51AD               	movf	(??___fladd+1)& (0+255),w,b
 41453  00342A  23AF               	addwfc	(??___fladd+3)& (0+255),f,b
 41454  00342C  BFAF               	btfsc	(??___fladd+3)& (0+255),7,b
 41455  00342E  D02C               	goto	l6090
 41456  003430  51AF               	movf	(??___fladd+3)& (0+255),w,b
 41457  003432  E104               	bnz	u51590
 41458  003434  0E1A               	movlw	26
 41459  003436  5DAE               	subwf	(??___fladd+2)& (0+255),w,b
 41460  003438  A0D8               	btfss	status,0,c
 41461  00343A  D026               	goto	l6090
 41462  00343C                     u51590:
 41463                           
 41464                           ; BSR set to: 0
 41465  00343C  51A4               	movf	___fladd@b& (0+255),w,b
 41466  00343E  11A5               	iorwf	(___fladd@b+1)& (0+255),w,b
 41467  003440  11A6               	iorwf	(___fladd@b+2)& (0+255),w,b
 41468  003442  11A7               	iorwf	(___fladd@b+3)& (0+255),w,b
 41469  003444  B4D8               	btfsc	status,2,c
 41470  003446  D002               	goto	u51600
 41471  003448  0E01               	movlw	1
 41472  00344A  D001               	goto	u51610
 41473  00344C                     u51600:
 41474  00344C  0E00               	movlw	0
 41475  00344E                     u51610:
 41476  00344E  6FB7               	movwf	___fladd@grs& (0+255),b
 41477                           
 41478                           ; BSR set to: 0
 41479  003450  0E00               	movlw	0
 41480  003452  6FA4               	movwf	___fladd@b& (0+255),b
 41481  003454  0E00               	movlw	0
 41482  003456  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 41483  003458  0E00               	movlw	0
 41484  00345A  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 41485  00345C  0E00               	movlw	0
 41486  00345E  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 41487                           
 41488                           ; BSR set to: 0
 41489  003460  C0B5  F0B6         	movff	___fladd@aexp,___fladd@bexp
 41490  003464  D015               	goto	u51640
 41491  003466                     l6091:
 41492                           
 41493                           ; BSR set to: 0
 41494  003466  A1B7               	btfss	___fladd@grs& (0+255),0,b
 41495  003468  D005               	goto	l6092
 41496                           
 41497                           ; BSR set to: 0
 41498  00346A  90D8               	bcf	status,0,c
 41499  00346C  31B7               	rrcf	___fladd@grs& (0+255),w,b
 41500  00346E  0901               	iorlw	1
 41501  003470  6FB7               	movwf	___fladd@grs& (0+255),b
 41502  003472  D002               	goto	l6093
 41503  003474                     l6092:
 41504                           
 41505                           ; BSR set to: 0
 41506                           
 41507                           ; BSR set to: 0
 41508  003474  90D8               	bcf	status,0,c
 41509  003476  33B7               	rrcf	___fladd@grs& (0+255),f,b
 41510  003478                     l6093:
 41511                           
 41512                           ; BSR set to: 0
 41513                           
 41514                           ; BSR set to: 0
 41515  003478  B1A4               	btfsc	___fladd@b& (0+255),0,b
 41516                           
 41517                           ; BSR set to: 0
 41518  00347A  8FB7               	bsf	___fladd@grs& (0+255),7,b
 41519                           
 41520                           ; BSR set to: 0
 41521                           
 41522                           ; BSR set to: 0
 41523  00347C  35A7               	rlcf	(___fladd@b+3)& (0+255),w,b
 41524  00347E  33A7               	rrcf	(___fladd@b+3)& (0+255),f,b
 41525  003480  33A6               	rrcf	(___fladd@b+2)& (0+255),f,b
 41526  003482  33A5               	rrcf	(___fladd@b+1)& (0+255),f,b
 41527  003484  33A4               	rrcf	___fladd@b& (0+255),f,b
 41528                           
 41529                           ; BSR set to: 0
 41530  003486  2BB6               	incf	___fladd@bexp& (0+255),f,b
 41531  003488                     l6090:
 41532                           
 41533                           ; BSR set to: 0
 41534  003488  51B5               	movf	___fladd@aexp& (0+255),w,b
 41535  00348A  5DB6               	subwf	___fladd@bexp& (0+255),w,b
 41536  00348C  A0D8               	btfss	status,0,c
 41537  00348E  D7EB               	goto	l6091
 41538  003490                     u51640:
 41539                           
 41540                           ; BSR set to: 0
 41541                           
 41542                           ; BSR set to: 0
 41543  003490  BDB4               	btfsc	___fladd@signs& (0+255),6,b
 41544  003492  D029               	goto	l6096
 41545                           
 41546                           ; BSR set to: 0
 41547  003494  51B6               	movf	___fladd@bexp& (0+255),w,b
 41548  003496  A4D8               	btfss	status,2,c
 41549  003498  D009               	goto	l6097
 41550                           
 41551                           ; BSR set to: 0
 41552  00349A  0E00               	movlw	0
 41553  00349C  6FA4               	movwf	?___fladd& (0+255),b
 41554  00349E  0E00               	movlw	0
 41555  0034A0  6FA5               	movwf	(?___fladd+1)& (0+255),b
 41556  0034A2  0E00               	movlw	0
 41557  0034A4  6FA6               	movwf	(?___fladd+2)& (0+255),b
 41558  0034A6  0E00               	movlw	0
 41559  0034A8  6FA7               	movwf	(?___fladd+3)& (0+255),b
 41560                           
 41561                           ; BSR set to: 0
 41562  0034AA  0012               	return	
 41563  0034AC                     l6097:
 41564                           
 41565                           ; BSR set to: 0
 41566                           
 41567                           ; BSR set to: 0
 41568  0034AC  51A8               	movf	___fladd@a& (0+255),w,b
 41569  0034AE  27A4               	addwf	___fladd@b& (0+255),f,b
 41570  0034B0  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 41571  0034B2  23A5               	addwfc	(___fladd@b+1)& (0+255),f,b
 41572  0034B4  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 41573  0034B6  23A6               	addwfc	(___fladd@b+2)& (0+255),f,b
 41574  0034B8  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 41575  0034BA  23A7               	addwfc	(___fladd@b+3)& (0+255),f,b
 41576                           
 41577                           ; BSR set to: 0
 41578  0034BC  A1A7               	btfss	(___fladd@b+3)& (0+255),0,b
 41579  0034BE  D083               	goto	u51770
 41580                           
 41581                           ; BSR set to: 0
 41582  0034C0  A1B7               	btfss	___fladd@grs& (0+255),0,b
 41583  0034C2  D006               	goto	l6100
 41584                           
 41585                           ; BSR set to: 0
 41586  0034C4  90D8               	bcf	status,0,c
 41587  0034C6  33B7               	rrcf	___fladd@grs& (0+255),f,b
 41588  0034C8  51B7               	movf	___fladd@grs& (0+255),w,b
 41589  0034CA  0901               	iorlw	1
 41590  0034CC  6FB7               	movwf	___fladd@grs& (0+255),b
 41591  0034CE  D002               	goto	l6101
 41592  0034D0                     l6100:
 41593                           
 41594                           ; BSR set to: 0
 41595                           
 41596                           ; BSR set to: 0
 41597  0034D0  90D8               	bcf	status,0,c
 41598  0034D2  33B7               	rrcf	___fladd@grs& (0+255),f,b
 41599  0034D4                     l6101:
 41600                           
 41601                           ; BSR set to: 0
 41602                           
 41603                           ; BSR set to: 0
 41604  0034D4  B1A4               	btfsc	___fladd@b& (0+255),0,b
 41605                           
 41606                           ; BSR set to: 0
 41607  0034D6  8FB7               	bsf	___fladd@grs& (0+255),7,b
 41608                           
 41609                           ; BSR set to: 0
 41610                           
 41611                           ; BSR set to: 0
 41612  0034D8  35A7               	rlcf	(___fladd@b+3)& (0+255),w,b
 41613  0034DA  33A7               	rrcf	(___fladd@b+3)& (0+255),f,b
 41614  0034DC  33A6               	rrcf	(___fladd@b+2)& (0+255),f,b
 41615  0034DE  33A5               	rrcf	(___fladd@b+1)& (0+255),f,b
 41616  0034E0  33A4               	rrcf	___fladd@b& (0+255),f,b
 41617                           
 41618                           ; BSR set to: 0
 41619  0034E2  2BB6               	incf	___fladd@bexp& (0+255),f,b
 41620                           
 41621                           ; BSR set to: 0
 41622  0034E4  D070               	goto	u51770
 41623  0034E6                     l6096:
 41624                           
 41625                           ; BSR set to: 0
 41626                           
 41627                           ; BSR set to: 0
 41628  0034E6  51A8               	movf	___fladd@a& (0+255),w,b
 41629  0034E8  5DA4               	subwf	___fladd@b& (0+255),w,b
 41630  0034EA  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 41631  0034EC  59A5               	subwfb	(___fladd@b+1)& (0+255),w,b
 41632  0034EE  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 41633  0034F0  59A6               	subwfb	(___fladd@b+2)& (0+255),w,b
 41634  0034F2  51A7               	movf	(___fladd@b+3)& (0+255),w,b
 41635  0034F4  0A80               	xorlw	128
 41636  0034F6  6FAC               	movwf	??___fladd& (0+255),b
 41637  0034F8  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 41638  0034FA  0A80               	xorlw	128
 41639  0034FC  59AC               	subwfb	??___fladd& (0+255),w,b
 41640  0034FE  B0D8               	btfsc	status,0,c
 41641  003500  D036               	goto	l6104
 41642                           
 41643                           ; BSR set to: 0
 41644  003502  C0A4  F0AC         	movff	___fladd@b,??___fladd
 41645  003506  C0A5  F0AD         	movff	___fladd@b+1,??___fladd+1
 41646  00350A  C0A6  F0AE         	movff	___fladd@b+2,??___fladd+2
 41647  00350E  C0A7  F0AF         	movff	___fladd@b+3,??___fladd+3
 41648  003512  1FAC               	comf	??___fladd& (0+255),f,b
 41649  003514  1FAD               	comf	(??___fladd+1)& (0+255),f,b
 41650  003516  1FAE               	comf	(??___fladd+2)& (0+255),f,b
 41651  003518  1FAF               	comf	(??___fladd+3)& (0+255),f,b
 41652  00351A  2BAC               	incf	??___fladd& (0+255),f,b
 41653  00351C  0E00               	movlw	0
 41654  00351E  23AD               	addwfc	(??___fladd+1)& (0+255),f,b
 41655  003520  23AE               	addwfc	(??___fladd+2)& (0+255),f,b
 41656  003522  23AF               	addwfc	(??___fladd+3)& (0+255),f,b
 41657  003524  51A8               	movf	___fladd@a& (0+255),w,b
 41658  003526  25AC               	addwf	??___fladd& (0+255),w,b
 41659  003528  6FB0               	movwf	(??___fladd+4)& (0+255),b
 41660  00352A  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 41661  00352C  21AD               	addwfc	(??___fladd+1)& (0+255),w,b
 41662  00352E  6FB1               	movwf	(??___fladd+5)& (0+255),b
 41663  003530  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 41664  003532  21AE               	addwfc	(??___fladd+2)& (0+255),w,b
 41665  003534  6FB2               	movwf	(??___fladd+6)& (0+255),b
 41666  003536  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 41667  003538  21AF               	addwfc	(??___fladd+3)& (0+255),w,b
 41668  00353A  6FB3               	movwf	(??___fladd+7)& (0+255),b
 41669  00353C  0EFF               	movlw	255
 41670  00353E  25B0               	addwf	(??___fladd+4)& (0+255),w,b
 41671  003540  6FA4               	movwf	___fladd@b& (0+255),b
 41672  003542  0EFF               	movlw	255
 41673  003544  21B1               	addwfc	(??___fladd+5)& (0+255),w,b
 41674  003546  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 41675  003548  0EFF               	movlw	255
 41676  00354A  21B2               	addwfc	(??___fladd+6)& (0+255),w,b
 41677  00354C  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 41678  00354E  0EFF               	movlw	255
 41679  003550  21B3               	addwfc	(??___fladd+7)& (0+255),w,b
 41680  003552  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 41681  003554  0E80               	movlw	128
 41682  003556  1BB4               	xorwf	___fladd@signs& (0+255),f,b
 41683                           
 41684                           ; BSR set to: 0
 41685  003558  6DB7               	negf	___fladd@grs& (0+255),b
 41686                           
 41687                           ; BSR set to: 0
 41688  00355A  51B7               	movf	___fladd@grs& (0+255),w,b
 41689  00355C  A4D8               	btfss	status,2,c
 41690  00355E  D00F               	goto	l6106
 41691                           
 41692                           ; BSR set to: 0
 41693  003560  0E01               	movlw	1
 41694  003562  27A4               	addwf	___fladd@b& (0+255),f,b
 41695  003564  0E00               	movlw	0
 41696  003566  23A5               	addwfc	(___fladd@b+1)& (0+255),f,b
 41697  003568  23A6               	addwfc	(___fladd@b+2)& (0+255),f,b
 41698  00356A  23A7               	addwfc	(___fladd@b+3)& (0+255),f,b
 41699                           
 41700                           ; BSR set to: 0
 41701  00356C  D008               	goto	l6106
 41702  00356E                     l6104:
 41703                           
 41704                           ; BSR set to: 0
 41705                           
 41706                           ; BSR set to: 0
 41707  00356E  51A8               	movf	___fladd@a& (0+255),w,b
 41708  003570  5FA4               	subwf	___fladd@b& (0+255),f,b
 41709  003572  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 41710  003574  5BA5               	subwfb	(___fladd@b+1)& (0+255),f,b
 41711  003576  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 41712  003578  5BA6               	subwfb	(___fladd@b+2)& (0+255),f,b
 41713  00357A  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 41714  00357C  5BA7               	subwfb	(___fladd@b+3)& (0+255),f,b
 41715  00357E                     l6106:
 41716                           
 41717                           ; BSR set to: 0
 41718  00357E  51A4               	movf	___fladd@b& (0+255),w,b
 41719  003580  11A5               	iorwf	(___fladd@b+1)& (0+255),w,b
 41720  003582  11A6               	iorwf	(___fladd@b+2)& (0+255),w,b
 41721  003584  11A7               	iorwf	(___fladd@b+3)& (0+255),w,b
 41722  003586  A4D8               	btfss	status,2,c
 41723  003588  D01C               	goto	l6113
 41724                           
 41725                           ; BSR set to: 0
 41726  00358A  51B7               	movf	___fladd@grs& (0+255),w,b
 41727  00358C  A4D8               	btfss	status,2,c
 41728  00358E  D019               	goto	l6113
 41729                           
 41730                           ; BSR set to: 0
 41731  003590  0E00               	movlw	0
 41732  003592  6FA4               	movwf	?___fladd& (0+255),b
 41733  003594  0E00               	movlw	0
 41734  003596  6FA5               	movwf	(?___fladd+1)& (0+255),b
 41735  003598  0E00               	movlw	0
 41736  00359A  6FA6               	movwf	(?___fladd+2)& (0+255),b
 41737  00359C  0E00               	movlw	0
 41738  00359E  6FA7               	movwf	(?___fladd+3)& (0+255),b
 41739                           
 41740                           ; BSR set to: 0
 41741  0035A0  0012               	return	
 41742  0035A2                     
 41743                           ; BSR set to: 0
 41744                           
 41745                           ; BSR set to: 0
 41746  0035A2  90D8               	bcf	status,0,c
 41747  0035A4  37A4               	rlcf	___fladd@b& (0+255),f,b
 41748  0035A6  37A5               	rlcf	(___fladd@b+1)& (0+255),f,b
 41749  0035A8  37A6               	rlcf	(___fladd@b+2)& (0+255),f,b
 41750  0035AA  37A7               	rlcf	(___fladd@b+3)& (0+255),f,b
 41751                           
 41752                           ; BSR set to: 0
 41753  0035AC  BFB7               	btfsc	___fladd@grs& (0+255),7,b
 41754                           
 41755                           ; BSR set to: 0
 41756  0035AE  81A4               	bsf	___fladd@b& (0+255),0,b
 41757                           
 41758                           ; BSR set to: 0
 41759                           
 41760                           ; BSR set to: 0
 41761  0035B0  A1B7               	btfss	___fladd@grs& (0+255),0,b
 41762  0035B2  D002               	goto	l6111
 41763                           
 41764                           ; BSR set to: 0
 41765  0035B4  80D8               	bsf	status,0,c
 41766  0035B6  D001               	goto	L25
 41767  0035B8                     l6111:
 41768                           
 41769                           ; BSR set to: 0
 41770                           
 41771                           ; BSR set to: 0
 41772  0035B8  90D8               	bcf	status,0,c
 41773  0035BA                     L25:
 41774  0035BA  37B7               	rlcf	___fladd@grs& (0+255),f,b
 41775                           
 41776                           ; BSR set to: 0
 41777                           
 41778                           ; BSR set to: 0
 41779  0035BC  51B6               	movf	___fladd@bexp& (0+255),w,b
 41780  0035BE  A4D8               	btfss	status,2,c
 41781                           
 41782                           ; BSR set to: 0
 41783  0035C0  07B6               	decf	___fladd@bexp& (0+255),f,b
 41784  0035C2                     l6113:
 41785                           
 41786                           ; BSR set to: 0
 41787                           
 41788                           ; BSR set to: 0
 41789                           
 41790                           ; BSR set to: 0
 41791  0035C2  AFA6               	btfss	(___fladd@b+2)& (0+255),7,b
 41792  0035C4  D7EE               	goto	l6109
 41793  0035C6                     u51770:
 41794                           
 41795                           ; BSR set to: 0
 41796                           
 41797                           ; BSR set to: 0
 41798                           
 41799                           ; BSR set to: 0
 41800  0035C6  0E00               	movlw	0
 41801  0035C8  6FB5               	movwf	___fladd@aexp& (0+255),b
 41802                           
 41803                           ; BSR set to: 0
 41804  0035CA  AFB7               	btfss	___fladd@grs& (0+255),7,b
 41805  0035CC  D00A               	goto	l6118
 41806                           
 41807                           ; BSR set to: 0
 41808  0035CE  C0B7  F0AC         	movff	___fladd@grs,??___fladd
 41809  0035D2  0E7F               	movlw	127
 41810  0035D4  17AC               	andwf	??___fladd& (0+255),f,b
 41811  0035D6  A4D8               	btfss	status,2,c
 41812  0035D8  D002               	goto	u51800
 41813                           
 41814                           ; BSR set to: 0
 41815                           
 41816                           ; BSR set to: 0
 41817  0035DA  A1A4               	btfss	___fladd@b& (0+255),0,b
 41818  0035DC  D002               	goto	l6118
 41819  0035DE                     u51800:
 41820                           
 41821                           ; BSR set to: 0
 41822  0035DE  0E01               	movlw	1
 41823  0035E0  6FB5               	movwf	___fladd@aexp& (0+255),b
 41824  0035E2                     l6118:
 41825                           
 41826                           ; BSR set to: 0
 41827                           
 41828                           ; BSR set to: 0
 41829                           
 41830                           ; BSR set to: 0
 41831  0035E2  51B5               	movf	___fladd@aexp& (0+255),w,b
 41832  0035E4  B4D8               	btfsc	status,2,c
 41833  0035E6  D020               	goto	l6121
 41834                           
 41835                           ; BSR set to: 0
 41836  0035E8  0E01               	movlw	1
 41837  0035EA  27A4               	addwf	___fladd@b& (0+255),f,b
 41838  0035EC  0E00               	movlw	0
 41839  0035EE  23A5               	addwfc	(___fladd@b+1)& (0+255),f,b
 41840  0035F0  23A6               	addwfc	(___fladd@b+2)& (0+255),f,b
 41841  0035F2  23A7               	addwfc	(___fladd@b+3)& (0+255),f,b
 41842                           
 41843                           ; BSR set to: 0
 41844  0035F4  A1A7               	btfss	(___fladd@b+3)& (0+255),0,b
 41845  0035F6  D018               	goto	l6121
 41846                           
 41847                           ; BSR set to: 0
 41848  0035F8  C0A4  F0AC         	movff	___fladd@b,??___fladd
 41849  0035FC  C0A5  F0AD         	movff	___fladd@b+1,??___fladd+1
 41850  003600  C0A6  F0AE         	movff	___fladd@b+2,??___fladd+2
 41851  003604  C0A7  F0AF         	movff	___fladd@b+3,??___fladd+3
 41852  003608  35AF               	rlcf	(??___fladd+3)& (0+255),w,b
 41853  00360A  33AF               	rrcf	(??___fladd+3)& (0+255),f,b
 41854  00360C  33AE               	rrcf	(??___fladd+2)& (0+255),f,b
 41855  00360E  33AD               	rrcf	(??___fladd+1)& (0+255),f,b
 41856  003610  33AC               	rrcf	??___fladd& (0+255),f,b
 41857  003612  C0AC  F0A4         	movff	??___fladd,___fladd@b
 41858  003616  C0AD  F0A5         	movff	??___fladd+1,___fladd@b+1
 41859  00361A  C0AE  F0A6         	movff	??___fladd+2,___fladd@b+2
 41860  00361E  C0AF  F0A7         	movff	??___fladd+3,___fladd@b+3
 41861  003622  29B6               	incf	___fladd@bexp& (0+255),w,b
 41862  003624  A4D8               	btfss	status,2,c
 41863                           
 41864                           ; BSR set to: 0
 41865  003626  2BB6               	incf	___fladd@bexp& (0+255),f,b
 41866  003628                     l6121:
 41867                           
 41868                           ; BSR set to: 0
 41869                           
 41870                           ; BSR set to: 0
 41871                           
 41872                           ; BSR set to: 0
 41873                           
 41874                           ; BSR set to: 0
 41875  003628  29B6               	incf	___fladd@bexp& (0+255),w,b
 41876  00362A  B4D8               	btfsc	status,2,c
 41877  00362C  D003               	goto	u51850
 41878                           
 41879                           ; BSR set to: 0
 41880  00362E  51B6               	movf	___fladd@bexp& (0+255),w,b
 41881  003630  A4D8               	btfss	status,2,c
 41882  003632  D00D               	goto	l6125
 41883  003634                     u51850:
 41884                           
 41885                           ; BSR set to: 0
 41886                           
 41887                           ; BSR set to: 0
 41888  003634  0E00               	movlw	0
 41889  003636  6FA4               	movwf	___fladd@b& (0+255),b
 41890  003638  0E00               	movlw	0
 41891  00363A  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 41892  00363C  0E00               	movlw	0
 41893  00363E  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 41894  003640  0E00               	movlw	0
 41895  003642  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 41896  003644  51B6               	movf	___fladd@bexp& (0+255),w,b
 41897  003646  A4D8               	btfss	status,2,c
 41898  003648  D002               	goto	l6125
 41899                           
 41900                           ; BSR set to: 0
 41901  00364A  0E00               	movlw	0
 41902  00364C  6FB4               	movwf	___fladd@signs& (0+255),b
 41903  00364E                     l6125:
 41904                           
 41905                           ; BSR set to: 0
 41906                           
 41907                           ; BSR set to: 0
 41908                           
 41909                           ; BSR set to: 0
 41910  00364E  A1B6               	btfss	___fladd@bexp& (0+255),0,b
 41911  003650  D002               	goto	l6126
 41912                           
 41913                           ; BSR set to: 0
 41914  003652  8FA6               	bsf	(___fladd@b+2)& (0+255),7,b
 41915  003654  D001               	goto	l6127
 41916  003656                     l6126:
 41917                           
 41918                           ; BSR set to: 0
 41919                           
 41920                           ; BSR set to: 0
 41921  003656  9FA6               	bcf	(___fladd@b+2)& (0+255),7,b
 41922  003658                     l6127:
 41923                           
 41924                           ; BSR set to: 0
 41925                           
 41926                           ; BSR set to: 0
 41927  003658  90D8               	bcf	status,0,c
 41928  00365A  31B6               	rrcf	___fladd@bexp& (0+255),w,b
 41929  00365C  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 41930                           
 41931                           ; BSR set to: 0
 41932  00365E  BFB4               	btfsc	___fladd@signs& (0+255),7,b
 41933                           
 41934                           ; BSR set to: 0
 41935  003660  8FA7               	bsf	(___fladd@b+3)& (0+255),7,b
 41936                           
 41937                           ; BSR set to: 0
 41938                           
 41939                           ; BSR set to: 0
 41940  003662  C0A4  F0A4         	movff	___fladd@b,?___fladd
 41941  003666  C0A5  F0A5         	movff	___fladd@b+1,?___fladd+1
 41942  00366A  C0A6  F0A6         	movff	___fladd@b+2,?___fladd+2
 41943  00366E  C0A7  F0A7         	movff	___fladd@b+3,?___fladd+3
 41944  003672  0012               	return	
 41945  003674                     __end_of___fladd:
 41946                           	opt stack 0
 41947                           tblptru	equ	0xFF8
 41948                           tblptrh	equ	0xFF7
 41949                           tblptrl	equ	0xFF6
 41950                           tablat	equ	0xFF5
 41951                           prodh	equ	0xFF4
 41952                           prodl	equ	0xFF3
 41953                           intcon	equ	0xFF2
 41954                           intcon2	equ	0xFF1
 41955                           indf0	equ	0xFEF
 41956                           postinc0	equ	0xFEE
 41957                           postdec0	equ	0xFED
 41958                           fsr0h	equ	0xFEA
 41959                           fsr0l	equ	0xFE9
 41960                           wreg	equ	0xFE8
 41961                           postinc1	equ	0xFE6
 41962                           postdec1	equ	0xFE5
 41963                           plusw1	equ	0xFE3
 41964                           fsr1h	equ	0xFE2
 41965                           fsr1l	equ	0xFE1
 41966                           indf2	equ	0xFDF
 41967                           postinc2	equ	0xFDE
 41968                           postdec2	equ	0xFDD
 41969                           plusw2	equ	0xFDB
 41970                           fsr2h	equ	0xFDA
 41971                           fsr2l	equ	0xFD9
 41972                           status	equ	0xFD8
 41973                           
 41974 ;; *************** function _ADC_Read *****************
 41975 ;; Defined at:
 41976 ;;		line 35 in file "adc.c"
 41977 ;; Parameters:    Size  Location     Type
 41978 ;;  adc_channel     1    wreg     unsigned char 
 41979 ;; Auto vars:     Size  Location     Type
 41980 ;;  adc_channel     1    4[BANK0 ] unsigned char 
 41981 ;; Return value:  Size  Location     Type
 41982 ;;                  2    0[BANK0 ] unsigned int 
 41983 ;; Registers used:
 41984 ;;		wreg, status,2, status,0
 41985 ;; Tracked objects:
 41986 ;;		On entry : 0/0
 41987 ;;		On exit  : 0/0
 41988 ;;		Unchanged: 0/0
 41989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 41990 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41991 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41992 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41993 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41994 ;;Total ram usage:        5 bytes
 41995 ;; Hardware stack levels used:    1
 41996 ;; Hardware stack levels required when called:    5
 41997 ;; This function calls:
 41998 ;;		Nothing
 41999 ;; This function is called by:
 42000 ;;		_readPotentiometers
 42001 ;; This function uses a non-reentrant model
 42002 ;;
 42003                           
 42004                           	psect	text121
 42005  00967C                     __ptext121:
 42006                           	opt stack 0
 42007  00967C                     _ADC_Read:
 42008                           	opt stack 20
 42009                           
 42010                           ; BSR set to: 0
 42011                           ;incstack = 0
 42012                           ;ADC_Read@adc_channel stored from wreg
 42013  00967C  0100               	movlb	0	; () banked
 42014  00967E  6F64               	movwf	ADC_Read@adc_channel& (0+255),b
 42015                           
 42016                           ;adc.c: 52: adc_channel &= 0x0F;
 42017  009680  0E0F               	movlw	15
 42018  009682  0100               	movlb	0	; () banked
 42019  009684  1764               	andwf	ADC_Read@adc_channel& (0+255),f,b
 42020                           
 42021                           ;adc.c: 53: ADCON0 &= 0x00000001;
 42022  009686  0E01               	movlw	1
 42023  009688  16C2               	andwf	4034,f,c	;volatile
 42024                           
 42025                           ;adc.c: 54: PORTA = (adc_channel << 1);
 42026  00968A  5164               	movf	ADC_Read@adc_channel& (0+255),w,b
 42027  00968C  2564               	addwf	ADC_Read@adc_channel& (0+255),w,b
 42028  00968E  6E80               	movwf	3968,c	;volatile
 42029                           
 42030                           ; BSR set to: 0
 42031                           ;adc.c: 56: _delay((unsigned long)((20)*(20000000/4000000.0)));
 42032  009690  0E21               	movlw	33
 42033  009692                     u67187:
 42034  009692  2EE8               	decfsz	wreg,f,c
 42035  009694  D7FE               	bra	u67187
 42036  009696  F000               	nop	
 42037                           
 42038                           ;adc.c: 57: GO_nDONE = 1;
 42039  009698  82C2               	bsf	4034,1,c	;volatile
 42040  00969A  B2C2               	btfsc	4034,1,c	;volatile
 42041  00969C  D7FE               	goto	l94
 42042                           
 42043                           ;adc.c: 59: return ((ADRESH<<8)+ADRESL);
 42044  00969E  50C4               	movf	4036,w,c	;volatile
 42045  0096A0  0100               	movlb	0	; () banked
 42046  0096A2  6F63               	movwf	(??_ADC_Read+1)& (0+255),b
 42047  0096A4  6B62               	clrf	??_ADC_Read& (0+255),b
 42048  0096A6  50C3               	movf	4035,w,c	;volatile
 42049  0096A8  2562               	addwf	??_ADC_Read& (0+255),w,b
 42050  0096AA  6F60               	movwf	?_ADC_Read& (0+255),b
 42051  0096AC  0E00               	movlw	0
 42052  0096AE  2163               	addwfc	(??_ADC_Read+1)& (0+255),w,b
 42053  0096B0  6F61               	movwf	(?_ADC_Read+1)& (0+255),b
 42054  0096B2  0012               	return	
 42055  0096B4                     __end_of_ADC_Read:
 42056                           	opt stack 0
 42057                           tblptru	equ	0xFF8
 42058                           tblptrh	equ	0xFF7
 42059                           tblptrl	equ	0xFF6
 42060                           tablat	equ	0xFF5
 42061                           prodh	equ	0xFF4
 42062                           prodl	equ	0xFF3
 42063                           intcon	equ	0xFF2
 42064                           intcon2	equ	0xFF1
 42065                           indf0	equ	0xFEF
 42066                           postinc0	equ	0xFEE
 42067                           postdec0	equ	0xFED
 42068                           fsr0h	equ	0xFEA
 42069                           fsr0l	equ	0xFE9
 42070                           wreg	equ	0xFE8
 42071                           postinc1	equ	0xFE6
 42072                           postdec1	equ	0xFE5
 42073                           plusw1	equ	0xFE3
 42074                           fsr1h	equ	0xFE2
 42075                           fsr1l	equ	0xFE1
 42076                           indf2	equ	0xFDF
 42077                           postinc2	equ	0xFDE
 42078                           postdec2	equ	0xFDD
 42079                           plusw2	equ	0xFDB
 42080                           fsr2h	equ	0xFDA
 42081                           fsr2l	equ	0xFD9
 42082                           status	equ	0xFD8
 42083                           
 42084 ;; *************** function _clear_row2 *****************
 42085 ;; Defined at:
 42086 ;;		line 79 in file "menu.c"
 42087 ;; Parameters:    Size  Location     Type
 42088 ;;		None
 42089 ;; Auto vars:     Size  Location     Type
 42090 ;;		None
 42091 ;; Return value:  Size  Location     Type
 42092 ;;                  1    wreg      void 
 42093 ;; Registers used:
 42094 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 42095 ;; Tracked objects:
 42096 ;;		On entry : 0/0
 42097 ;;		On exit  : 0/0
 42098 ;;		Unchanged: 0/0
 42099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42100 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42103 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42104 ;;Total ram usage:        0 bytes
 42105 ;; Hardware stack levels used:    1
 42106 ;; Hardware stack levels required when called:    8
 42107 ;; This function calls:
 42108 ;;		_Lcd_Print_String
 42109 ;;		_Lcd_Set_Cursor
 42110 ;; This function is called by:
 42111 ;;		_Function_A_1
 42112 ;;		_Function_A_2
 42113 ;;		_Function_A_3
 42114 ;;		_Function_A
 42115 ;;		_Function_B
 42116 ;;		_Function_C_1
 42117 ;;		_Function_C_2
 42118 ;;		_Function_C_3
 42119 ;;		_Function_C
 42120 ;;		_Function_D_1
 42121 ;;		_Function_D_3
 42122 ;;		_Function_D_4
 42123 ;;		_Function_D_5
 42124 ;;		_Function_D
 42125 ;;		_Function_E
 42126 ;;		_Function_F
 42127 ;;		_Function_G_1
 42128 ;;		_Function_G_2
 42129 ;;		_Function_G_3
 42130 ;;		_Function_G_4
 42131 ;;		_Function_G
 42132 ;;		_Function_H
 42133 ;;		_Function_H_1
 42134 ;;		_Function_H_2
 42135 ;;		_Function_H_3
 42136 ;;		_Function_H_4
 42137 ;;		_Function_H_5
 42138 ;;		_Function_H_6_1
 42139 ;;		_Function_H_6_2
 42140 ;;		_Function_H_6
 42141 ;;		_Function_H_7
 42142 ;;		_Function_H_8_1
 42143 ;;		_Function_H_8_2
 42144 ;;		_Function_H_8
 42145 ;;		_Function_H_9_1
 42146 ;;		_Function_H_9_2
 42147 ;;		_Function_H_9_3
 42148 ;;		_Function_H_9_4
 42149 ;;		_Function_H_9
 42150 ;; This function uses a non-reentrant model
 42151 ;;
 42152                           
 42153                           	psect	text122
 42154  009804                     __ptext122:
 42155                           	opt stack 0
 42156  009804                     _clear_row2:
 42157                           	opt stack 20
 42158                           
 42159                           ;menu.c: 80: Lcd_Set_Cursor(2,1);
 42160                           
 42161                           ; BSR set to: 0
 42162                           ;incstack = 0
 42163  009804  0E01               	movlw	1
 42164  009806  0100               	movlb	0	; () banked
 42165  009808  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 42166  00980A  0E02               	movlw	2
 42167  00980C  ECDD  F047         	call	_Lcd_Set_Cursor
 42168                           
 42169                           ;menu.c: 81: Lcd_Print_String("                ");
 42170  009810  0E64               	movlw	low STR_10
 42171  009812  0100               	movlb	0	; () banked
 42172  009814  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 42173  009816  0EFD               	movlw	high STR_10
 42174  009818  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 42175  00981A  EC74  F042         	call	_Lcd_Print_String	;wreg free
 42176                           
 42177                           ;menu.c: 82: Lcd_Set_Cursor(2,1);
 42178  00981E  0E01               	movlw	1
 42179  009820  0100               	movlb	0	; () banked
 42180  009822  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 42181  009824  0E02               	movlw	2
 42182  009826  ECDD  F047         	call	_Lcd_Set_Cursor
 42183  00982A  0012               	return		;funcret
 42184  00982C                     __end_of_clear_row2:
 42185                           	opt stack 0
 42186                           tblptru	equ	0xFF8
 42187                           tblptrh	equ	0xFF7
 42188                           tblptrl	equ	0xFF6
 42189                           tablat	equ	0xFF5
 42190                           prodh	equ	0xFF4
 42191                           prodl	equ	0xFF3
 42192                           intcon	equ	0xFF2
 42193                           intcon2	equ	0xFF1
 42194                           indf0	equ	0xFEF
 42195                           postinc0	equ	0xFEE
 42196                           postdec0	equ	0xFED
 42197                           fsr0h	equ	0xFEA
 42198                           fsr0l	equ	0xFE9
 42199                           wreg	equ	0xFE8
 42200                           postinc1	equ	0xFE6
 42201                           postdec1	equ	0xFE5
 42202                           plusw1	equ	0xFE3
 42203                           fsr1h	equ	0xFE2
 42204                           fsr1l	equ	0xFE1
 42205                           indf2	equ	0xFDF
 42206                           postinc2	equ	0xFDE
 42207                           postdec2	equ	0xFDD
 42208                           plusw2	equ	0xFDB
 42209                           fsr2h	equ	0xFDA
 42210                           fsr2l	equ	0xFD9
 42211                           status	equ	0xFD8
 42212                           
 42213 ;; *************** function _clear_row1 *****************
 42214 ;; Defined at:
 42215 ;;		line 72 in file "menu.c"
 42216 ;; Parameters:    Size  Location     Type
 42217 ;;		None
 42218 ;; Auto vars:     Size  Location     Type
 42219 ;;		None
 42220 ;; Return value:  Size  Location     Type
 42221 ;;                  1    wreg      void 
 42222 ;; Registers used:
 42223 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 42224 ;; Tracked objects:
 42225 ;;		On entry : 0/0
 42226 ;;		On exit  : 0/0
 42227 ;;		Unchanged: 0/0
 42228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42233 ;;Total ram usage:        0 bytes
 42234 ;; Hardware stack levels used:    1
 42235 ;; Hardware stack levels required when called:    8
 42236 ;; This function calls:
 42237 ;;		_Lcd_Print_String
 42238 ;;		_Lcd_Set_Cursor
 42239 ;; This function is called by:
 42240 ;;		_exitFunction
 42241 ;;		_exitSave
 42242 ;;		_exitLoad
 42243 ;;		_eepromExit
 42244 ;;		_Function_A_1
 42245 ;;		_Function_A_2
 42246 ;;		_Function_A_3
 42247 ;;		_Function_C_1
 42248 ;;		_Function_C_2
 42249 ;;		_Function_C_3
 42250 ;;		_Function_D_1
 42251 ;;		_Function_D_3
 42252 ;;		_Function_D_4
 42253 ;;		_Function_D_5
 42254 ;;		_Function_G_1
 42255 ;;		_Function_G_2
 42256 ;;		_Function_G_3
 42257 ;;		_Function_G_4
 42258 ;;		_Function_H_4
 42259 ;;		_Function_H_5
 42260 ;;		_Function_H_6_1
 42261 ;;		_Function_H_6_2
 42262 ;;		_Function_H_7
 42263 ;;		_Function_H_8_1
 42264 ;;		_Function_H_9_1
 42265 ;;		_Function_H_9_2
 42266 ;;		_Function_H_9_3
 42267 ;;		_Function_H_9_4
 42268 ;;		_Function_H_9
 42269 ;; This function uses a non-reentrant model
 42270 ;;
 42271                           
 42272                           	psect	text123
 42273  00982C                     __ptext123:
 42274                           	opt stack 0
 42275  00982C                     _clear_row1:
 42276                           	opt stack 20
 42277                           
 42278                           ;menu.c: 73: Lcd_Set_Cursor(1,1);
 42279                           
 42280                           ;incstack = 0
 42281  00982C  0E01               	movlw	1
 42282  00982E  0100               	movlb	0	; () banked
 42283  009830  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 42284  009832  0E01               	movlw	1
 42285  009834  ECDD  F047         	call	_Lcd_Set_Cursor
 42286                           
 42287                           ;menu.c: 74: Lcd_Print_String("                ");
 42288  009838  0E64               	movlw	low STR_10
 42289  00983A  0100               	movlb	0	; () banked
 42290  00983C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 42291  00983E  0EFD               	movlw	high STR_10
 42292  009840  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 42293  009842  EC74  F042         	call	_Lcd_Print_String	;wreg free
 42294                           
 42295                           ;menu.c: 75: Lcd_Set_Cursor(1,1);
 42296  009846  0E01               	movlw	1
 42297  009848  0100               	movlb	0	; () banked
 42298  00984A  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 42299  00984C  0E01               	movlw	1
 42300  00984E  ECDD  F047         	call	_Lcd_Set_Cursor
 42301  009852  0012               	return		;funcret
 42302  009854                     __end_of_clear_row1:
 42303                           	opt stack 0
 42304                           tblptru	equ	0xFF8
 42305                           tblptrh	equ	0xFF7
 42306                           tblptrl	equ	0xFF6
 42307                           tablat	equ	0xFF5
 42308                           prodh	equ	0xFF4
 42309                           prodl	equ	0xFF3
 42310                           intcon	equ	0xFF2
 42311                           intcon2	equ	0xFF1
 42312                           indf0	equ	0xFEF
 42313                           postinc0	equ	0xFEE
 42314                           postdec0	equ	0xFED
 42315                           fsr0h	equ	0xFEA
 42316                           fsr0l	equ	0xFE9
 42317                           wreg	equ	0xFE8
 42318                           postinc1	equ	0xFE6
 42319                           postdec1	equ	0xFE5
 42320                           plusw1	equ	0xFE3
 42321                           fsr1h	equ	0xFE2
 42322                           fsr1l	equ	0xFE1
 42323                           indf2	equ	0xFDF
 42324                           postinc2	equ	0xFDE
 42325                           postdec2	equ	0xFDD
 42326                           plusw2	equ	0xFDB
 42327                           fsr2h	equ	0xFDA
 42328                           fsr2l	equ	0xFD9
 42329                           status	equ	0xFD8
 42330                           
 42331 ;; *************** function _Lcd_Set_Cursor *****************
 42332 ;; Defined at:
 42333 ;;		line 66 in file "lcd.c"
 42334 ;; Parameters:    Size  Location     Type
 42335 ;;  a               1    wreg     unsigned char 
 42336 ;;  b               1    3[BANK0 ] unsigned char 
 42337 ;; Auto vars:     Size  Location     Type
 42338 ;;  a               1    4[BANK0 ] unsigned char 
 42339 ;;  temp            1    7[BANK0 ] unsigned char 
 42340 ;;  y               1    6[BANK0 ] unsigned char 
 42341 ;;  z               1    5[BANK0 ] unsigned char 
 42342 ;; Return value:  Size  Location     Type
 42343 ;;                  1    wreg      void 
 42344 ;; Registers used:
 42345 ;;		wreg, status,2, status,0, cstack
 42346 ;; Tracked objects:
 42347 ;;		On entry : 0/0
 42348 ;;		On exit  : 0/0
 42349 ;;		Unchanged: 0/0
 42350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42351 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42352 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42354 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42355 ;;Total ram usage:        5 bytes
 42356 ;; Hardware stack levels used:    1
 42357 ;; Hardware stack levels required when called:    7
 42358 ;; This function calls:
 42359 ;;		_Lcd_Cmd
 42360 ;; This function is called by:
 42361 ;;		_clear_row1
 42362 ;;		_clear_row2
 42363 ;;		_setControllerNumbers
 42364 ;;		_menu_lcd
 42365 ;;		_Function_C_2
 42366 ;;		_Function_C_3
 42367 ;;		_Function_D_2
 42368 ;;		_Function_E_1
 42369 ;;		_Function_E_2
 42370 ;;		_Function_F
 42371 ;;		_Function_H_2
 42372 ;;		_Function_H_3
 42373 ;; This function uses a non-reentrant model
 42374 ;;
 42375                           
 42376                           	psect	text124
 42377  008FBA                     __ptext124:
 42378                           	opt stack 0
 42379  008FBA                     _Lcd_Set_Cursor:
 42380                           	opt stack 20
 42381                           
 42382                           ;incstack = 0
 42383                           ;Lcd_Set_Cursor@a stored from wreg
 42384  008FBA  0100               	movlb	0	; () banked
 42385  008FBC  6F64               	movwf	Lcd_Set_Cursor@a& (0+255),b
 42386                           
 42387                           ;lcd.c: 69: TMR2ON = 0;
 42388  008FBE  94CA               	bcf	4042,2,c	;volatile
 42389                           
 42390                           ;lcd.c: 70: PORTC &= 0xF0;
 42391  008FC0  0EF0               	movlw	240
 42392  008FC2  1682               	andwf	3970,f,c	;volatile
 42393                           
 42394                           ;lcd.c: 72: char temp,z,y;
 42395                           ;lcd.c: 73: if(a== 1)
 42396  008FC4  0100               	movlb	0	; () banked
 42397  008FC6  0564               	decf	Lcd_Set_Cursor@a& (0+255),w,b
 42398  008FC8  A4D8               	btfss	status,2,c
 42399  008FCA  D011               	goto	l40
 42400                           
 42401                           ; BSR set to: 0
 42402                           ;lcd.c: 74: {
 42403                           ;lcd.c: 75: temp = 0x80 + b - 1;
 42404  008FCC  5163               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 42405  008FCE  0F7F               	addlw	127
 42406  008FD0  6F67               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 42407                           
 42408                           ;lcd.c: 76: z = temp>>4;
 42409  008FD2  3967               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 42410  008FD4  0B0F               	andlw	15
 42411  008FD6  6F65               	movwf	Lcd_Set_Cursor@z& (0+255),b
 42412                           
 42413                           ;lcd.c: 77: y = temp & 0x0F;
 42414  008FD8  5167               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 42415  008FDA  0B0F               	andlw	15
 42416  008FDC  6F66               	movwf	Lcd_Set_Cursor@y& (0+255),b
 42417                           
 42418                           ; BSR set to: 0
 42419                           ;lcd.c: 78: Lcd_Cmd(z);
 42420  008FDE  5165               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 42421  008FE0  EC3E  F04C         	call	_Lcd_Cmd
 42422                           
 42423                           ;lcd.c: 79: Lcd_Cmd(y);
 42424  008FE4  0100               	movlb	0	; () banked
 42425  008FE6  5166               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 42426  008FE8  EC3E  F04C         	call	_Lcd_Cmd
 42427                           
 42428                           ;lcd.c: 80: }
 42429  008FEC  D015               	goto	l42
 42430  008FEE                     l40:
 42431                           
 42432                           ;lcd.c: 81: else if(a== 2)
 42433  008FEE  0E02               	movlw	2
 42434  008FF0  0100               	movlb	0	; () banked
 42435  008FF2  1964               	xorwf	Lcd_Set_Cursor@a& (0+255),w,b
 42436  008FF4  A4D8               	btfss	status,2,c
 42437  008FF6  D010               	goto	l42
 42438                           
 42439                           ; BSR set to: 0
 42440                           ;lcd.c: 82: {
 42441                           ;lcd.c: 83: temp = 0xC0 + b - 1;
 42442  008FF8  5163               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 42443  008FFA  0FBF               	addlw	191
 42444  008FFC  6F67               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 42445                           
 42446                           ;lcd.c: 84: z = temp>>4;
 42447  008FFE  3967               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 42448  009000  0B0F               	andlw	15
 42449  009002  6F65               	movwf	Lcd_Set_Cursor@z& (0+255),b
 42450                           
 42451                           ;lcd.c: 85: y = temp & 0x0F;
 42452  009004  5167               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 42453  009006  0B0F               	andlw	15
 42454  009008  6F66               	movwf	Lcd_Set_Cursor@y& (0+255),b
 42455                           
 42456                           ; BSR set to: 0
 42457                           ;lcd.c: 86: Lcd_Cmd(z);
 42458  00900A  5165               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 42459  00900C  EC3E  F04C         	call	_Lcd_Cmd
 42460                           
 42461                           ;lcd.c: 87: Lcd_Cmd(y);
 42462  009010  0100               	movlb	0	; () banked
 42463  009012  5166               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 42464  009014  EC3E  F04C         	call	_Lcd_Cmd
 42465  009018                     l42:
 42466                           
 42467                           ;lcd.c: 88: }
 42468                           ;lcd.c: 91: TMR2ON = 1;
 42469  009018  84CA               	bsf	4042,2,c	;volatile
 42470  00901A  0012               	return		;funcret
 42471  00901C                     __end_of_Lcd_Set_Cursor:
 42472                           	opt stack 0
 42473                           tblptru	equ	0xFF8
 42474                           tblptrh	equ	0xFF7
 42475                           tblptrl	equ	0xFF6
 42476                           tablat	equ	0xFF5
 42477                           prodh	equ	0xFF4
 42478                           prodl	equ	0xFF3
 42479                           intcon	equ	0xFF2
 42480                           intcon2	equ	0xFF1
 42481                           indf0	equ	0xFEF
 42482                           postinc0	equ	0xFEE
 42483                           postdec0	equ	0xFED
 42484                           fsr0h	equ	0xFEA
 42485                           fsr0l	equ	0xFE9
 42486                           wreg	equ	0xFE8
 42487                           postinc1	equ	0xFE6
 42488                           postdec1	equ	0xFE5
 42489                           plusw1	equ	0xFE3
 42490                           fsr1h	equ	0xFE2
 42491                           fsr1l	equ	0xFE1
 42492                           indf2	equ	0xFDF
 42493                           postinc2	equ	0xFDE
 42494                           postdec2	equ	0xFDD
 42495                           plusw2	equ	0xFDB
 42496                           fsr2h	equ	0xFDA
 42497                           fsr2l	equ	0xFD9
 42498                           status	equ	0xFD8
 42499                           
 42500 ;; *************** function _Lcd_Print_String *****************
 42501 ;; Defined at:
 42502 ;;		line 128 in file "lcd.c"
 42503 ;; Parameters:    Size  Location     Type
 42504 ;;  a               2    8[BANK0 ] PTR unsigned char 
 42505 ;;		 -> STR_75(16), STR_74(12), STR_73(10), STR_72(12), 
 42506 ;;		 -> STR_71(10), STR_70(12), STR_69(10), STR_68(12), 
 42507 ;;		 -> STR_67(10), STR_66(12), STR_65(13), STR_64(15), 
 42508 ;;		 -> STR_63(15), STR_62(16), STR_60(14), STR_58(12), 
 42509 ;;		 -> STR_57(15), STR_55(14), STR_53(15), STR_52(17), 
 42510 ;;		 -> STR_51(9), STR_50(10), STR_49(13), STR_48(13), 
 42511 ;;		 -> STR_47(17), STR_46(14), STR_45(14), STR_42(15), 
 42512 ;;		 -> STR_40(16), STR_39(17), STR_38(13), STR_37(17), 
 42513 ;;		 -> STR_36(8), STR_35(8), STR_34(12), STR_33(17), 
 42514 ;;		 -> STR_32(15), STR_31(14), STR_30(17), STR_29(15), 
 42515 ;;		 -> STR_28(17), STR_27(14), STR_26(16), STR_25(14), 
 42516 ;;		 -> STR_24(12), LCD_STRINGS(2397), STR_23(13), STR_22(17), 
 42517 ;;		 -> STR_21(16), STR_20(5), STR_19(11), STR_18(11), 
 42518 ;;		 -> STR_17(11), STR_16(10), STR_15(11), STR_14(11), 
 42519 ;;		 -> STR_13(11), STR_12(10), string2display(5), STR_11(17), 
 42520 ;;		 -> STR_10(17), 
 42521 ;; Auto vars:     Size  Location     Type
 42522 ;;  i               2   12[BANK0 ] int 
 42523 ;; Return value:  Size  Location     Type
 42524 ;;                  1    wreg      void 
 42525 ;; Registers used:
 42526 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 42527 ;; Tracked objects:
 42528 ;;		On entry : 0/0
 42529 ;;		On exit  : 0/0
 42530 ;;		Unchanged: 0/0
 42531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42532 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42533 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42534 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42535 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42536 ;;Total ram usage:        6 bytes
 42537 ;; Hardware stack levels used:    1
 42538 ;; Hardware stack levels required when called:    7
 42539 ;; This function calls:
 42540 ;;		_Lcd_Print_Char
 42541 ;; This function is called by:
 42542 ;;		_clear_row1
 42543 ;;		_clear_row2
 42544 ;;		_setControllerNumbers
 42545 ;;		_exitFunction
 42546 ;;		_exitSave
 42547 ;;		_exitLoad
 42548 ;;		_eepromExit
 42549 ;;		_menu_lcd
 42550 ;;		_Function_A_1
 42551 ;;		_Function_A_2
 42552 ;;		_Function_A_3
 42553 ;;		_Function_A
 42554 ;;		_Function_B
 42555 ;;		_Function_C_1
 42556 ;;		_Function_C_2
 42557 ;;		_Function_C_3
 42558 ;;		_Function_C
 42559 ;;		_Function_D_1
 42560 ;;		_Function_D_2
 42561 ;;		_Function_D_3
 42562 ;;		_Function_D_4
 42563 ;;		_Function_D_5
 42564 ;;		_Function_D
 42565 ;;		_Function_E_1
 42566 ;;		_Function_E_2
 42567 ;;		_Function_E
 42568 ;;		_Function_F
 42569 ;;		_Function_G_1
 42570 ;;		_Function_G_2
 42571 ;;		_Function_G_3
 42572 ;;		_Function_G_4
 42573 ;;		_Function_G
 42574 ;;		_Function_H
 42575 ;;		_Function_H_1
 42576 ;;		_Function_H_2
 42577 ;;		_Function_H_3
 42578 ;;		_Function_H_4
 42579 ;;		_Function_H_5
 42580 ;;		_Function_H_6_1
 42581 ;;		_Function_H_6_2
 42582 ;;		_Function_H_6
 42583 ;;		_Function_H_7
 42584 ;;		_Function_H_8_1
 42585 ;;		_Function_H_8_2
 42586 ;;		_Function_H_8
 42587 ;;		_Function_H_9_1
 42588 ;;		_Function_H_9_2
 42589 ;;		_Function_H_9_3
 42590 ;;		_Function_H_9_4
 42591 ;;		_Function_H_9
 42592 ;; This function uses a non-reentrant model
 42593 ;;
 42594                           
 42595                           	psect	text125
 42596  0084E8                     __ptext125:
 42597                           	opt stack 0
 42598  0084E8                     _Lcd_Print_String:
 42599                           	opt stack 20
 42600                           
 42601                           ;lcd.c: 131: TMR2ON = 0;
 42602                           
 42603                           ;incstack = 0
 42604  0084E8  94CA               	bcf	4042,2,c	;volatile
 42605                           
 42606                           ;lcd.c: 132: PORTC &= 0xF0;
 42607  0084EA  0EF0               	movlw	240
 42608  0084EC  1682               	andwf	3970,f,c	;volatile
 42609                           
 42610                           ;lcd.c: 134: int i;
 42611                           ;lcd.c: 135: for(i=0;a[i]!='\0';i++)
 42612  0084EE  0E00               	movlw	0
 42613  0084F0  0100               	movlb	0	; () banked
 42614  0084F2  6F6D               	movwf	(Lcd_Print_String@i+1)& (0+255),b
 42615  0084F4  0E00               	movlw	0
 42616  0084F6  6F6C               	movwf	Lcd_Print_String@i& (0+255),b
 42617  0084F8  D01D               	goto	l58
 42618  0084FA                     
 42619                           ;lcd.c: 136: Lcd_Print_Char(a[i]);
 42620                           
 42621                           ; BSR set to: 0
 42622  0084FA  0100               	movlb	0	; () banked
 42623  0084FC  516C               	movf	Lcd_Print_String@i& (0+255),w,b
 42624  0084FE  2568               	addwf	Lcd_Print_String@a& (0+255),w,b
 42625  008500  6F6A               	movwf	??_Lcd_Print_String& (0+255),b
 42626  008502  516D               	movf	(Lcd_Print_String@i+1)& (0+255),w,b
 42627  008504  2169               	addwfc	(Lcd_Print_String@a+1)& (0+255),w,b
 42628  008506  6F6B               	movwf	(??_Lcd_Print_String+1)& (0+255),b
 42629  008508  C06A  FFF6         	movff	??_Lcd_Print_String,tblptrl
 42630  00850C  C06B  FFF7         	movff	??_Lcd_Print_String+1,tblptrh
 42631  008510  0E00               	movlw	low (__mediumconst shr (0+16))
 42632  008512  6EF8               	movwf	tblptru,c
 42633  008514  0E0C               	movlw	(high __ramtop+-1)
 42634  008516  64F7               	cpfsgt	tblptrh,c
 42635  008518  D003               	bra	u54887
 42636  00851A  0008               	tblrd		*
 42637  00851C  50F5               	movf	tablat,w,c
 42638  00851E  D005               	bra	u54880
 42639  008520                     u54887:
 42640  008520  CFF6 FFE9          	movff	tblptrl,fsr0l
 42641  008524  CFF7 FFEA          	movff	tblptrh,fsr0h
 42642  008528  50EF               	movf	indf0,w,c
 42643  00852A                     u54880:
 42644  00852A  ECB6  F042         	call	_Lcd_Print_Char
 42645  00852E  0100               	movlb	0	; () banked
 42646  008530  4B6C               	infsnz	Lcd_Print_String@i& (0+255),f,b
 42647  008532  2B6D               	incf	(Lcd_Print_String@i+1)& (0+255),f,b
 42648  008534                     l58:
 42649                           
 42650                           ; BSR set to: 0
 42651                           
 42652                           ; BSR set to: 0
 42653  008534  516C               	movf	Lcd_Print_String@i& (0+255),w,b
 42654  008536  2568               	addwf	Lcd_Print_String@a& (0+255),w,b
 42655  008538  6F6A               	movwf	??_Lcd_Print_String& (0+255),b
 42656  00853A  516D               	movf	(Lcd_Print_String@i+1)& (0+255),w,b
 42657  00853C  2169               	addwfc	(Lcd_Print_String@a+1)& (0+255),w,b
 42658  00853E  6F6B               	movwf	(??_Lcd_Print_String+1)& (0+255),b
 42659  008540  C06A  FFF6         	movff	??_Lcd_Print_String,tblptrl
 42660  008544  C06B  FFF7         	movff	??_Lcd_Print_String+1,tblptrh
 42661  008548  0E00               	movlw	low (__mediumconst shr (0+16))
 42662  00854A  6EF8               	movwf	tblptru,c
 42663  00854C  0E0C               	movlw	(high __ramtop+-1)
 42664  00854E  64F7               	cpfsgt	tblptrh,c
 42665  008550  D003               	bra	u54897
 42666  008552  0008               	tblrd		*
 42667  008554  50F5               	movf	tablat,w,c
 42668  008556  D005               	bra	u54890
 42669  008558                     u54897:
 42670  008558  CFF6 FFE9          	movff	tblptrl,fsr0l
 42671  00855C  CFF7 FFEA          	movff	tblptrh,fsr0h
 42672  008560  50EF               	movf	indf0,w,c
 42673  008562                     u54890:
 42674  008562  0900               	iorlw	0
 42675  008564  A4D8               	btfss	status,2,c
 42676  008566  D7C9               	goto	l59
 42677                           
 42678                           ;lcd.c: 139: TMR2ON = 1;
 42679  008568  84CA               	bsf	4042,2,c	;volatile
 42680  00856A  0012               	return		;funcret
 42681  00856C                     __end_of_Lcd_Print_String:
 42682                           	opt stack 0
 42683                           tblptru	equ	0xFF8
 42684                           tblptrh	equ	0xFF7
 42685                           tblptrl	equ	0xFF6
 42686                           tablat	equ	0xFF5
 42687                           prodh	equ	0xFF4
 42688                           prodl	equ	0xFF3
 42689                           intcon	equ	0xFF2
 42690                           intcon2	equ	0xFF1
 42691                           indf0	equ	0xFEF
 42692                           postinc0	equ	0xFEE
 42693                           postdec0	equ	0xFED
 42694                           fsr0h	equ	0xFEA
 42695                           fsr0l	equ	0xFE9
 42696                           wreg	equ	0xFE8
 42697                           postinc1	equ	0xFE6
 42698                           postdec1	equ	0xFE5
 42699                           plusw1	equ	0xFE3
 42700                           fsr1h	equ	0xFE2
 42701                           fsr1l	equ	0xFE1
 42702                           indf2	equ	0xFDF
 42703                           postinc2	equ	0xFDE
 42704                           postdec2	equ	0xFDD
 42705                           plusw2	equ	0xFDB
 42706                           fsr2h	equ	0xFDA
 42707                           fsr2l	equ	0xFD9
 42708                           status	equ	0xFD8
 42709                           
 42710 ;; *************** function _Lcd_Print_Char *****************
 42711 ;; Defined at:
 42712 ;;		line 112 in file "lcd.c"
 42713 ;; Parameters:    Size  Location     Type
 42714 ;;  data            1    wreg     unsigned char 
 42715 ;; Auto vars:     Size  Location     Type
 42716 ;;  data            1    3[BANK0 ] unsigned char 
 42717 ;;  i               2    6[BANK0 ] int 
 42718 ;;  i               2    4[BANK0 ] int 
 42719 ;;  Upper_Nibble    1    2[BANK0 ] unsigned char 
 42720 ;;  Lower_Nibble    1    1[BANK0 ] unsigned char 
 42721 ;; Return value:  Size  Location     Type
 42722 ;;                  1    wreg      void 
 42723 ;; Registers used:
 42724 ;;		wreg, status,2, status,0, cstack
 42725 ;; Tracked objects:
 42726 ;;		On entry : 0/0
 42727 ;;		On exit  : 0/0
 42728 ;;		Unchanged: 0/0
 42729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42730 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42731 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42733 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42734 ;;Total ram usage:        7 bytes
 42735 ;; Hardware stack levels used:    1
 42736 ;; Hardware stack levels required when called:    6
 42737 ;; This function calls:
 42738 ;;		_Lcd_SetBit
 42739 ;; This function is called by:
 42740 ;;		_Lcd_Print_String
 42741 ;; This function uses a non-reentrant model
 42742 ;;
 42743                           
 42744                           	psect	text126
 42745  00856C                     __ptext126:
 42746                           	opt stack 0
 42747  00856C                     _Lcd_Print_Char:
 42748                           	opt stack 20
 42749                           
 42750                           ;incstack = 0
 42751                           ;Lcd_Print_Char@data stored from wreg
 42752  00856C  0100               	movlb	0	; () banked
 42753  00856E  6F63               	movwf	Lcd_Print_Char@data& (0+255),b
 42754                           
 42755                           ;lcd.c: 114: char Lower_Nibble,Upper_Nibble;
 42756                           ;lcd.c: 115: Lower_Nibble = data&0x0F;
 42757  008570  0100               	movlb	0	; () banked
 42758  008572  5163               	movf	Lcd_Print_Char@data& (0+255),w,b
 42759  008574  0B0F               	andlw	15
 42760  008576  6F61               	movwf	Lcd_Print_Char@Lower_Nibble& (0+255),b
 42761                           
 42762                           ;lcd.c: 116: Upper_Nibble = data&0xF0;
 42763  008578  5163               	movf	Lcd_Print_Char@data& (0+255),w,b
 42764  00857A  0BF0               	andlw	240
 42765  00857C  6F62               	movwf	Lcd_Print_Char@Upper_Nibble& (0+255),b
 42766                           
 42767                           ; BSR set to: 0
 42768                           ;lcd.c: 117: RE0 = 1;
 42769  00857E  8084               	bsf	3972,0,c	;volatile
 42770                           
 42771                           ; BSR set to: 0
 42772                           ;lcd.c: 118: Lcd_SetBit(Upper_Nibble>>4);
 42773  008580  3962               	swapf	Lcd_Print_Char@Upper_Nibble& (0+255),w,b
 42774  008582  0B0F               	andlw	15
 42775  008584  ECBF  F04B         	call	_Lcd_SetBit
 42776                           
 42777                           ;lcd.c: 119: RE1 = 1;
 42778  008588  8284               	bsf	3972,1,c	;volatile
 42779                           
 42780                           ;lcd.c: 120: for(int i=2130483; i<=0; i--) __nop();
 42781  00858A  0E82               	movlw	130
 42782  00858C  0100               	movlb	0	; () banked
 42783  00858E  6F65               	movwf	(Lcd_Print_Char@i+1)& (0+255),b
 42784  008590  0E33               	movlw	51
 42785  008592  6F64               	movwf	Lcd_Print_Char@i& (0+255),b
 42786                           
 42787                           ; BSR set to: 0
 42788  008594  BF65               	btfsc	(Lcd_Print_Char@i+1)& (0+255),7,b
 42789  008596  D003               	goto	l51
 42790  008598  5165               	movf	(Lcd_Print_Char@i+1)& (0+255),w,b
 42791  00859A  E10D               	bnz	l52
 42792  00859C  D009               	goto	L26
 42793  00859E                     l51:
 42794                           
 42795                           ; BSR set to: 0
 42796  00859E  F000               	nop	
 42797  0085A0  0100               	movlb	0	; () banked
 42798  0085A2  0764               	decf	Lcd_Print_Char@i& (0+255),f,b
 42799  0085A4  A0D8               	btfss	status,0,c
 42800  0085A6  0765               	decf	(Lcd_Print_Char@i+1)& (0+255),f,b
 42801                           
 42802                           ; BSR set to: 0
 42803  0085A8  BF65               	btfsc	(Lcd_Print_Char@i+1)& (0+255),7,b
 42804  0085AA  D7F9               	goto	l51
 42805  0085AC  5165               	movf	(Lcd_Print_Char@i+1)& (0+255),w,b
 42806  0085AE  E103               	bnz	u52270
 42807  0085B0                     L26:
 42808  0085B0  0564               	decf	Lcd_Print_Char@i& (0+255),w,b
 42809  0085B2  A0D8               	btfss	status,0,c
 42810  0085B4  D7F4               	goto	l51
 42811  0085B6                     u52270:
 42812  0085B6                     l52:
 42813                           
 42814                           ; BSR set to: 0
 42815                           ;lcd.c: 121: RE1 = 0;
 42816  0085B6  9284               	bcf	3972,1,c	;volatile
 42817                           
 42818                           ; BSR set to: 0
 42819                           ;lcd.c: 122: Lcd_SetBit(Lower_Nibble);
 42820  0085B8  5161               	movf	Lcd_Print_Char@Lower_Nibble& (0+255),w,b
 42821  0085BA  ECBF  F04B         	call	_Lcd_SetBit
 42822                           
 42823                           ;lcd.c: 123: RE1 = 1;
 42824  0085BE  8284               	bsf	3972,1,c	;volatile
 42825                           
 42826                           ;lcd.c: 124: for(int i=2130483; i<=0; i--) __nop();
 42827  0085C0  0E82               	movlw	130
 42828  0085C2  0100               	movlb	0	; () banked
 42829  0085C4  6F67               	movwf	(Lcd_Print_Char@i_59+1)& (0+255),b
 42830  0085C6  0E33               	movlw	51
 42831  0085C8  6F66               	movwf	Lcd_Print_Char@i_59& (0+255),b
 42832                           
 42833                           ; BSR set to: 0
 42834  0085CA  BF67               	btfsc	(Lcd_Print_Char@i_59+1)& (0+255),7,b
 42835  0085CC  D003               	goto	l53
 42836  0085CE  5167               	movf	(Lcd_Print_Char@i_59+1)& (0+255),w,b
 42837  0085D0  E10D               	bnz	l54
 42838  0085D2  D009               	goto	L27
 42839  0085D4                     l53:
 42840                           
 42841                           ; BSR set to: 0
 42842  0085D4  F000               	nop	
 42843  0085D6  0100               	movlb	0	; () banked
 42844  0085D8  0766               	decf	Lcd_Print_Char@i_59& (0+255),f,b
 42845  0085DA  A0D8               	btfss	status,0,c
 42846  0085DC  0767               	decf	(Lcd_Print_Char@i_59+1)& (0+255),f,b
 42847                           
 42848                           ; BSR set to: 0
 42849  0085DE  BF67               	btfsc	(Lcd_Print_Char@i_59+1)& (0+255),7,b
 42850  0085E0  D7F9               	goto	l53
 42851  0085E2  5167               	movf	(Lcd_Print_Char@i_59+1)& (0+255),w,b
 42852  0085E4  E103               	bnz	u52290
 42853  0085E6                     L27:
 42854  0085E6  0566               	decf	Lcd_Print_Char@i_59& (0+255),w,b
 42855  0085E8  A0D8               	btfss	status,0,c
 42856  0085EA  D7F4               	goto	l53
 42857  0085EC                     u52290:
 42858  0085EC                     l54:
 42859                           
 42860                           ; BSR set to: 0
 42861                           ;lcd.c: 125: RE1 = 0;
 42862  0085EC  9284               	bcf	3972,1,c	;volatile
 42863                           
 42864                           ; BSR set to: 0
 42865  0085EE  0012               	return		;funcret
 42866  0085F0                     __end_of_Lcd_Print_Char:
 42867                           	opt stack 0
 42868                           tblptru	equ	0xFF8
 42869                           tblptrh	equ	0xFF7
 42870                           tblptrl	equ	0xFF6
 42871                           tablat	equ	0xFF5
 42872                           prodh	equ	0xFF4
 42873                           prodl	equ	0xFF3
 42874                           intcon	equ	0xFF2
 42875                           intcon2	equ	0xFF1
 42876                           indf0	equ	0xFEF
 42877                           postinc0	equ	0xFEE
 42878                           postdec0	equ	0xFED
 42879                           fsr0h	equ	0xFEA
 42880                           fsr0l	equ	0xFE9
 42881                           wreg	equ	0xFE8
 42882                           postinc1	equ	0xFE6
 42883                           postdec1	equ	0xFE5
 42884                           plusw1	equ	0xFE3
 42885                           fsr1h	equ	0xFE2
 42886                           fsr1l	equ	0xFE1
 42887                           indf2	equ	0xFDF
 42888                           postinc2	equ	0xFDE
 42889                           postdec2	equ	0xFDD
 42890                           plusw2	equ	0xFDB
 42891                           fsr2h	equ	0xFDA
 42892                           fsr2l	equ	0xFD9
 42893                           status	equ	0xFD8
 42894                           
 42895 ;; *************** function _initializeSaveSlotsOnce *****************
 42896 ;; Defined at:
 42897 ;;		line 28 in file "eeprom.c"
 42898 ;; Parameters:    Size  Location     Type
 42899 ;;		None
 42900 ;; Auto vars:     Size  Location     Type
 42901 ;;  initializeSl    1   84[BANK0 ] unsigned char 
 42902 ;; Return value:  Size  Location     Type
 42903 ;;                  1    wreg      void 
 42904 ;; Registers used:
 42905 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 42906 ;; Tracked objects:
 42907 ;;		On entry : 0/0
 42908 ;;		On exit  : 0/0
 42909 ;;		Unchanged: 0/0
 42910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42912 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42914 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42915 ;;Total ram usage:        1 bytes
 42916 ;; Hardware stack levels used:    1
 42917 ;; Hardware stack levels required when called:    7
 42918 ;; This function calls:
 42919 ;;		_Busy_eep
 42920 ;;		_Read_b_eep
 42921 ;;		_Write_b_eep
 42922 ;;		_saveToEEPROM
 42923 ;; This function is called by:
 42924 ;;		_main
 42925 ;; This function uses a non-reentrant model
 42926 ;;
 42927                           
 42928                           	psect	text127
 42929  00936E                     __ptext127:
 42930                           	opt stack 0
 42931  00936E                     _initializeSaveSlotsOnce:
 42932                           	opt stack 23
 42933                           
 42934                           ;eeprom.c: 30: unsigned char initializeSlotsOnce = Read_b_eep(0x01);
 42935                           
 42936                           ; BSR set to: 0
 42937                           ;incstack = 0
 42938  00936E  0E00               	movlw	0
 42939  009370  0100               	movlb	0	; () banked
 42940  009372  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
 42941  009374  0E01               	movlw	1
 42942  009376  6F60               	movwf	Read_b_eep@badd& (0+255),b
 42943  009378  EC91  F04C         	call	_Read_b_eep	;wreg free
 42944  00937C  0100               	movlb	0	; () banked
 42945  00937E  6FB4               	movwf	initializeSaveSlotsOnce@initializeSlotsOnce& (0+255),b
 42946                           
 42947                           ; BSR set to: 0
 42948                           ;eeprom.c: 32: if (initializeSlotsOnce == 0x24) {
 42949  009380  0E24               	movlw	36
 42950  009382  19B4               	xorwf	initializeSaveSlotsOnce@initializeSlotsOnce& (0+255),w,b
 42951  009384  A4D8               	btfss	status,2,c
 42952  009386  0012               	return	
 42953                           
 42954                           ; BSR set to: 0
 42955                           ;eeprom.c: 33: saveToEEPROM(SLOT1);
 42956  009388  0E01               	movlw	1
 42957  00938A  ECF4  F027         	call	_saveToEEPROM
 42958                           
 42959                           ;eeprom.c: 34: saveToEEPROM(SLOT2);
 42960  00938E  0E02               	movlw	2
 42961  009390  ECF4  F027         	call	_saveToEEPROM
 42962                           
 42963                           ;eeprom.c: 35: saveToEEPROM(SLOT3);
 42964  009394  0E03               	movlw	3
 42965  009396  ECF4  F027         	call	_saveToEEPROM
 42966                           
 42967                           ;eeprom.c: 36: saveToEEPROM(SLOT4);
 42968  00939A  0E04               	movlw	4
 42969  00939C  ECF4  F027         	call	_saveToEEPROM
 42970                           
 42971                           ;eeprom.c: 37: (Busy_eep(), Write_b_eep(0x01,0x48));
 42972  0093A0  ECFA  F04C         	call	_Busy_eep	;wreg free
 42973  0093A4  0E00               	movlw	0
 42974  0093A6  0100               	movlb	0	; () banked
 42975  0093A8  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 42976  0093AA  0E01               	movlw	1
 42977  0093AC  6F60               	movwf	Write_b_eep@badd& (0+255),b
 42978  0093AE  0E48               	movlw	72
 42979  0093B0  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 42980  0093B2  EC6C  F04A         	call	_Write_b_eep	;wreg free
 42981  0093B6  0012               	return	
 42982  0093B8                     __end_of_initializeSaveSlotsOnce:
 42983                           	opt stack 0
 42984                           tblptru	equ	0xFF8
 42985                           tblptrh	equ	0xFF7
 42986                           tblptrl	equ	0xFF6
 42987                           tablat	equ	0xFF5
 42988                           prodh	equ	0xFF4
 42989                           prodl	equ	0xFF3
 42990                           intcon	equ	0xFF2
 42991                           intcon2	equ	0xFF1
 42992                           indf0	equ	0xFEF
 42993                           postinc0	equ	0xFEE
 42994                           postdec0	equ	0xFED
 42995                           fsr0h	equ	0xFEA
 42996                           fsr0l	equ	0xFE9
 42997                           wreg	equ	0xFE8
 42998                           postinc1	equ	0xFE6
 42999                           postdec1	equ	0xFE5
 43000                           plusw1	equ	0xFE3
 43001                           fsr1h	equ	0xFE2
 43002                           fsr1l	equ	0xFE1
 43003                           indf2	equ	0xFDF
 43004                           postinc2	equ	0xFDE
 43005                           postdec2	equ	0xFDD
 43006                           plusw2	equ	0xFDB
 43007                           fsr2h	equ	0xFDA
 43008                           fsr2l	equ	0xFD9
 43009                           status	equ	0xFD8
 43010                           
 43011 ;; *************** function _saveToEEPROM *****************
 43012 ;; Defined at:
 43013 ;;		line 194 in file "eeprom.c"
 43014 ;; Parameters:    Size  Location     Type
 43015 ;;  slotNumber      1    wreg     unsigned char 
 43016 ;; Auto vars:     Size  Location     Type
 43017 ;;  slotNumber      1   81[BANK0 ] unsigned char 
 43018 ;;  byte_count      2   82[BANK0 ] unsigned int 
 43019 ;;  to_save        75    4[BANK0 ] unsigned char [75]
 43020 ;;  baseAddress     2   79[BANK0 ] unsigned int 
 43021 ;; Return value:  Size  Location     Type
 43022 ;;                  1    wreg      void 
 43023 ;; Registers used:
 43024 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 43025 ;; Tracked objects:
 43026 ;;		On entry : 0/0
 43027 ;;		On exit  : 0/0
 43028 ;;		Unchanged: 0/0
 43029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43031 ;;      Locals:         0      80       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43033 ;;      Totals:         0      80       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43034 ;;Total ram usage:       80 bytes
 43035 ;; Hardware stack levels used:    1
 43036 ;; Hardware stack levels required when called:    6
 43037 ;; This function calls:
 43038 ;;		_Busy_eep
 43039 ;;		_Write_b_eep
 43040 ;; This function is called by:
 43041 ;;		_Function_G_1
 43042 ;;		_initializeSaveSlotsOnce
 43043 ;; This function uses a non-reentrant model
 43044 ;;
 43045                           
 43046                           	psect	text128
 43047  004FE8                     __ptext128:
 43048                           	opt stack 0
 43049  004FE8                     _saveToEEPROM:
 43050                           	opt stack 21
 43051                           
 43052                           ;incstack = 0
 43053                           ;saveToEEPROM@slotNumber stored from wreg
 43054  004FE8  0100               	movlb	0	; () banked
 43055  004FEA  6FB1               	movwf	saveToEEPROM@slotNumber& (0+255),b
 43056                           
 43057                           ;eeprom.c: 196: unsigned int baseAddress = 0;
 43058  004FEC  0E00               	movlw	0
 43059  004FEE  0100               	movlb	0	; () banked
 43060  004FF0  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 43061  004FF2  0E00               	movlw	0
 43062  004FF4  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 43063                           
 43064                           ; BSR set to: 0
 43065                           ;eeprom.c: 199: if (slotNumber == SLOT1) {baseAddress = 128;}
 43066  004FF6  05B1               	decf	saveToEEPROM@slotNumber& (0+255),w,b
 43067  004FF8  A4D8               	btfss	status,2,c
 43068  004FFA  D004               	goto	l4460
 43069                           
 43070                           ; BSR set to: 0
 43071  004FFC  0E00               	movlw	0
 43072  004FFE  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 43073  005000  0E80               	movlw	128
 43074  005002  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 43075  005004                     l4460:
 43076                           
 43077                           ; BSR set to: 0
 43078                           ;eeprom.c: 200: if (slotNumber == SLOT2) {baseAddress = 256;}
 43079                           
 43080                           ; BSR set to: 0
 43081  005004  0E02               	movlw	2
 43082  005006  19B1               	xorwf	saveToEEPROM@slotNumber& (0+255),w,b
 43083  005008  A4D8               	btfss	status,2,c
 43084  00500A  D004               	goto	l4461
 43085                           
 43086                           ; BSR set to: 0
 43087  00500C  0E01               	movlw	1
 43088  00500E  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 43089  005010  0E00               	movlw	0
 43090  005012  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 43091  005014                     l4461:
 43092                           
 43093                           ; BSR set to: 0
 43094                           ;eeprom.c: 201: if (slotNumber == SLOT3) {baseAddress = 384;}
 43095                           
 43096                           ; BSR set to: 0
 43097  005014  0E03               	movlw	3
 43098  005016  19B1               	xorwf	saveToEEPROM@slotNumber& (0+255),w,b
 43099  005018  A4D8               	btfss	status,2,c
 43100  00501A  D004               	goto	l4462
 43101                           
 43102                           ; BSR set to: 0
 43103  00501C  0E01               	movlw	1
 43104  00501E  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 43105  005020  0E80               	movlw	128
 43106  005022  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 43107  005024                     l4462:
 43108                           
 43109                           ; BSR set to: 0
 43110                           ;eeprom.c: 202: if (slotNumber == SLOT4) {baseAddress = 512;}
 43111                           
 43112                           ; BSR set to: 0
 43113  005024  0E04               	movlw	4
 43114  005026  19B1               	xorwf	saveToEEPROM@slotNumber& (0+255),w,b
 43115  005028  A4D8               	btfss	status,2,c
 43116  00502A  D004               	goto	l4463
 43117                           
 43118                           ; BSR set to: 0
 43119  00502C  0E02               	movlw	2
 43120  00502E  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 43121  005030  0E00               	movlw	0
 43122  005032  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 43123  005034                     l4463:
 43124                           
 43125                           ; BSR set to: 0
 43126                           ;eeprom.c: 205: unsigned char to_save[75];
 43127                           ;eeprom.c: 210: to_save[0] = KEYBOARD_MODE;
 43128                           
 43129                           ; BSR set to: 0
 43130  005034  C0F2  F064         	movff	_KEYBOARD_MODE,saveToEEPROM@to_save
 43131                           
 43132                           ; BSR set to: 0
 43133                           ;eeprom.c: 211: to_save[1] = which_mode;
 43134  005038  C0F1  F065         	movff	_which_mode,saveToEEPROM@to_save+1
 43135                           
 43136                           ; BSR set to: 0
 43137                           ;eeprom.c: 212: to_save[2] = which_triad;
 43138  00503C  C0F0  F066         	movff	_which_triad,saveToEEPROM@to_save+2
 43139                           
 43140                           ; BSR set to: 0
 43141                           ;eeprom.c: 213: to_save[3] = which_seventh;
 43142  005040  C0EF  F067         	movff	_which_seventh,saveToEEPROM@to_save+3
 43143                           
 43144                           ;eeprom.c: 216: to_save[4] = TRANSPOSE_MODE;
 43145  005044  0E00               	movlw	0
 43146  005046  BA04               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 43147  005048  0E01               	movlw	1
 43148  00504A  6F68               	movwf	(saveToEEPROM@to_save+4)& (0+255),b
 43149                           
 43150                           ;eeprom.c: 219: to_save[5] = DRUM_MODE;
 43151  00504C  0E00               	movlw	0
 43152  00504E  B801               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 43153  005050  0E01               	movlw	1
 43154  005052  6F69               	movwf	(saveToEEPROM@to_save+5)& (0+255),b
 43155                           
 43156                           ;eeprom.c: 220: to_save[6] = CONTROL_MODE;
 43157  005054  0E00               	movlw	0
 43158  005056  B601               	btfsc	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 43159  005058  0E01               	movlw	1
 43160  00505A  6F6A               	movwf	(saveToEEPROM@to_save+6)& (0+255),b
 43161                           
 43162                           ; BSR set to: 0
 43163                           ;eeprom.c: 223: to_save[7] = DRUM_NOTE[0];
 43164  00505C  C1E7  F06B         	movff	_DRUM_NOTE,saveToEEPROM@to_save+7
 43165                           
 43166                           ; BSR set to: 0
 43167                           ;eeprom.c: 224: to_save[8] = DRUM_NOTE[1];
 43168  005060  C1E8  F06C         	movff	_DRUM_NOTE+1,saveToEEPROM@to_save+8
 43169                           
 43170                           ; BSR set to: 0
 43171                           ;eeprom.c: 225: to_save[9] = DRUM_NOTE[2];
 43172  005064  C1E9  F06D         	movff	_DRUM_NOTE+2,saveToEEPROM@to_save+9
 43173                           
 43174                           ; BSR set to: 0
 43175                           ;eeprom.c: 226: to_save[10] = DRUM_NOTE[3];
 43176  005068  C1EA  F06E         	movff	_DRUM_NOTE+3,saveToEEPROM@to_save+10
 43177                           
 43178                           ; BSR set to: 0
 43179                           ;eeprom.c: 227: to_save[11] = DRUM_NOTE[4];
 43180  00506C  C1EB  F06F         	movff	_DRUM_NOTE+4,saveToEEPROM@to_save+11
 43181                           
 43182                           ; BSR set to: 0
 43183                           ;eeprom.c: 228: to_save[12] = DRUM_NOTE[5];
 43184  005070  C1EC  F070         	movff	_DRUM_NOTE+5,saveToEEPROM@to_save+12
 43185                           
 43186                           ; BSR set to: 0
 43187                           ;eeprom.c: 229: to_save[13] = DRUM_NOTE[6];
 43188  005074  C1ED  F071         	movff	_DRUM_NOTE+6,saveToEEPROM@to_save+13
 43189                           
 43190                           ; BSR set to: 0
 43191                           ;eeprom.c: 230: to_save[14] = DRUM_NOTE[7];
 43192  005078  C1EE  F072         	movff	_DRUM_NOTE+7,saveToEEPROM@to_save+14
 43193                           
 43194                           ; BSR set to: 0
 43195                           ;eeprom.c: 233: to_save[15] = DRUM_CC[0];
 43196  00507C  C0F5  F073         	movff	_DRUM_CC,saveToEEPROM@to_save+15
 43197                           
 43198                           ; BSR set to: 0
 43199                           ;eeprom.c: 234: to_save[16] = DRUM_CC[1];
 43200  005080  C0F6  F074         	movff	_DRUM_CC+1,saveToEEPROM@to_save+16
 43201                           
 43202                           ; BSR set to: 0
 43203                           ;eeprom.c: 235: to_save[17] = DRUM_CC[2];
 43204  005084  C0F7  F075         	movff	_DRUM_CC+2,saveToEEPROM@to_save+17
 43205                           
 43206                           ; BSR set to: 0
 43207                           ;eeprom.c: 236: to_save[18] = DRUM_CC[3];
 43208  005088  C0F8  F076         	movff	_DRUM_CC+3,saveToEEPROM@to_save+18
 43209                           
 43210                           ; BSR set to: 0
 43211                           ;eeprom.c: 237: to_save[19] = DRUM_CC[4];
 43212  00508C  C0F9  F077         	movff	_DRUM_CC+4,saveToEEPROM@to_save+19
 43213                           
 43214                           ; BSR set to: 0
 43215                           ;eeprom.c: 238: to_save[20] = DRUM_CC[5];
 43216  005090  C0FA  F078         	movff	_DRUM_CC+5,saveToEEPROM@to_save+20
 43217                           
 43218                           ; BSR set to: 0
 43219                           ;eeprom.c: 239: to_save[21] = DRUM_CC[6];
 43220  005094  C0FB  F079         	movff	_DRUM_CC+6,saveToEEPROM@to_save+21
 43221                           
 43222                           ; BSR set to: 0
 43223                           ;eeprom.c: 240: to_save[22] = DRUM_CC[7];
 43224  005098  C0FC  F07A         	movff	_DRUM_CC+7,saveToEEPROM@to_save+22
 43225                           
 43226                           ;eeprom.c: 243: to_save[23] = POT_MODE;
 43227  00509C  0E00               	movlw	0
 43228  00509E  BA05               	btfsc	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 43229  0050A0  0E01               	movlw	1
 43230  0050A2  6F7B               	movwf	(saveToEEPROM@to_save+23)& (0+255),b
 43231                           
 43232                           ; BSR set to: 0
 43233                           ;eeprom.c: 246: to_save[24] = inputPotsArray[0].controller_number;
 43234  0050A4  C289  F07C         	movff	_inputPotsArray+1,saveToEEPROM@to_save+24
 43235                           
 43236                           ; BSR set to: 0
 43237                           ;eeprom.c: 247: to_save[25] = inputPotsArray[0].controller_number_two_byte;
 43238  0050A8  C28A  F07D         	movff	_inputPotsArray+2,saveToEEPROM@to_save+25
 43239                           
 43240                           ; BSR set to: 0
 43241                           ;eeprom.c: 249: to_save[26] = inputPotsArray[1].controller_number;
 43242  0050AC  C28C  F07E         	movff	_inputPotsArray+4,saveToEEPROM@to_save+26
 43243                           
 43244                           ; BSR set to: 0
 43245                           ;eeprom.c: 250: to_save[27] = inputPotsArray[1].controller_number_two_byte;
 43246  0050B0  C28D  F07F         	movff	_inputPotsArray+5,saveToEEPROM@to_save+27
 43247                           
 43248                           ; BSR set to: 0
 43249                           ;eeprom.c: 252: to_save[28] = inputPotsArray[2].controller_number;
 43250  0050B4  C28F  F080         	movff	_inputPotsArray+7,saveToEEPROM@to_save+28
 43251                           
 43252                           ; BSR set to: 0
 43253                           ;eeprom.c: 253: to_save[29] = inputPotsArray[2].controller_number_two_byte;
 43254  0050B8  C290  F081         	movff	_inputPotsArray+8,saveToEEPROM@to_save+29
 43255                           
 43256                           ; BSR set to: 0
 43257                           ;eeprom.c: 255: to_save[30] = inputPotsArray[3].controller_number;
 43258  0050BC  C292  F082         	movff	_inputPotsArray+10,saveToEEPROM@to_save+30
 43259                           
 43260                           ; BSR set to: 0
 43261                           ;eeprom.c: 256: to_save[31] = inputPotsArray[3].controller_number_two_byte;
 43262  0050C0  C293  F083         	movff	_inputPotsArray+11,saveToEEPROM@to_save+31
 43263                           
 43264                           ; BSR set to: 0
 43265                           ;eeprom.c: 258: to_save[32] = inputPotsArray[4].controller_number;
 43266  0050C4  C295  F084         	movff	_inputPotsArray+13,saveToEEPROM@to_save+32
 43267                           
 43268                           ; BSR set to: 0
 43269                           ;eeprom.c: 259: to_save[33] = inputPotsArray[4].controller_number_two_byte;
 43270  0050C8  C296  F085         	movff	_inputPotsArray+14,saveToEEPROM@to_save+33
 43271                           
 43272                           ; BSR set to: 0
 43273                           ;eeprom.c: 261: to_save[34] = inputPotsArray[5].controller_number;
 43274  0050CC  C298  F086         	movff	_inputPotsArray+16,saveToEEPROM@to_save+34
 43275                           
 43276                           ; BSR set to: 0
 43277                           ;eeprom.c: 262: to_save[35] = inputPotsArray[5].controller_number_two_byte;
 43278  0050D0  C299  F087         	movff	_inputPotsArray+17,saveToEEPROM@to_save+35
 43279                           
 43280                           ; BSR set to: 0
 43281                           ;eeprom.c: 264: to_save[36] = inputPotsArray[6].controller_number;
 43282  0050D4  C29B  F088         	movff	_inputPotsArray+19,saveToEEPROM@to_save+36
 43283                           
 43284                           ; BSR set to: 0
 43285                           ;eeprom.c: 265: to_save[37] = inputPotsArray[6].controller_number_two_byte;
 43286  0050D8  C29C  F089         	movff	_inputPotsArray+20,saveToEEPROM@to_save+37
 43287                           
 43288                           ; BSR set to: 0
 43289                           ;eeprom.c: 269: to_save[38] = inputPotsArray[7].controller_number;
 43290  0050DC  C29E  F08A         	movff	_inputPotsArray+22,saveToEEPROM@to_save+38
 43291                           
 43292                           ; BSR set to: 0
 43293                           ;eeprom.c: 270: to_save[39] = inputPotsArray[7].controller_number_two_byte;
 43294  0050E0  C29F  F08B         	movff	_inputPotsArray+23,saveToEEPROM@to_save+39
 43295                           
 43296                           ; BSR set to: 0
 43297                           ;eeprom.c: 272: to_save[40] = inputPotsArray[8].controller_number;
 43298  0050E4  C2A1  F08C         	movff	_inputPotsArray+25,saveToEEPROM@to_save+40
 43299                           
 43300                           ; BSR set to: 0
 43301                           ;eeprom.c: 273: to_save[41] = inputPotsArray[8].controller_number_two_byte;
 43302  0050E8  C2A2  F08D         	movff	_inputPotsArray+26,saveToEEPROM@to_save+41
 43303                           
 43304                           ; BSR set to: 0
 43305                           ;eeprom.c: 275: to_save[42] = inputPotsArray[9].controller_number;
 43306  0050EC  C2A4  F08E         	movff	_inputPotsArray+28,saveToEEPROM@to_save+42
 43307                           
 43308                           ; BSR set to: 0
 43309                           ;eeprom.c: 276: to_save[43] = inputPotsArray[9].controller_number_two_byte;
 43310  0050F0  C2A5  F08F         	movff	_inputPotsArray+29,saveToEEPROM@to_save+43
 43311                           
 43312                           ; BSR set to: 0
 43313                           ;eeprom.c: 278: to_save[44] = inputPotsArray[10].controller_number;
 43314  0050F4  C2A7  F090         	movff	_inputPotsArray+31,saveToEEPROM@to_save+44
 43315                           
 43316                           ; BSR set to: 0
 43317                           ;eeprom.c: 279: to_save[45] = inputPotsArray[10].controller_number_two_byte;
 43318  0050F8  C2A8  F091         	movff	_inputPotsArray+32,saveToEEPROM@to_save+45
 43319                           
 43320                           ; BSR set to: 0
 43321                           ;eeprom.c: 281: to_save[46] = inputPotsArray[11].controller_number;
 43322  0050FC  C2AA  F092         	movff	_inputPotsArray+34,saveToEEPROM@to_save+46
 43323                           
 43324                           ; BSR set to: 0
 43325                           ;eeprom.c: 282: to_save[47] = inputPotsArray[11].controller_number_two_byte;
 43326  005100  C2AB  F093         	movff	_inputPotsArray+35,saveToEEPROM@to_save+47
 43327                           
 43328                           ; BSR set to: 0
 43329                           ;eeprom.c: 284: to_save[48] = inputPotsArray[12].controller_number;
 43330  005104  C2AD  F094         	movff	_inputPotsArray+37,saveToEEPROM@to_save+48
 43331                           
 43332                           ; BSR set to: 0
 43333                           ;eeprom.c: 285: to_save[49] = inputPotsArray[12].controller_number_two_byte;
 43334  005108  C2AE  F095         	movff	_inputPotsArray+38,saveToEEPROM@to_save+49
 43335                           
 43336                           ; BSR set to: 0
 43337                           ;eeprom.c: 287: to_save[50] = inputPotsArray[13].controller_number;
 43338  00510C  C2B0  F096         	movff	_inputPotsArray+40,saveToEEPROM@to_save+50
 43339                           
 43340                           ; BSR set to: 0
 43341                           ;eeprom.c: 288: to_save[51] = inputPotsArray[13].controller_number_two_byte;
 43342  005110  C2B1  F097         	movff	_inputPotsArray+41,saveToEEPROM@to_save+51
 43343                           
 43344                           ; BSR set to: 0
 43345                           ;eeprom.c: 290: to_save[52] = inputPotsArray[14].controller_number;
 43346  005114  C2B3  F098         	movff	_inputPotsArray+43,saveToEEPROM@to_save+52
 43347                           
 43348                           ; BSR set to: 0
 43349                           ;eeprom.c: 291: to_save[53] = inputPotsArray[14].controller_number_two_byte;
 43350  005118  C2B4  F099         	movff	_inputPotsArray+44,saveToEEPROM@to_save+53
 43351                           
 43352                           ; BSR set to: 0
 43353                           ;eeprom.c: 293: to_save[54] = inputPotsArray[15].controller_number;
 43354  00511C  C2B6  F09A         	movff	_inputPotsArray+46,saveToEEPROM@to_save+54
 43355                           
 43356                           ; BSR set to: 0
 43357                           ;eeprom.c: 294: to_save[55] = inputPotsArray[15].controller_number_two_byte;
 43358  005120  C2B7  F09B         	movff	_inputPotsArray+47,saveToEEPROM@to_save+55
 43359                           
 43360                           ; BSR set to: 0
 43361                           ;eeprom.c: 298: to_save[56] = channel;
 43362  005124  C03E  F09C         	movff	_channel,saveToEEPROM@to_save+56
 43363                           
 43364                           ; BSR set to: 0
 43365                           ;eeprom.c: 299: to_save[57] = drumchannel;
 43366  005128  C052  F09D         	movff	_drumchannel,saveToEEPROM@to_save+57
 43367                           
 43368                           ; BSR set to: 0
 43369                           ;eeprom.c: 302: to_save[58] = octave;
 43370  00512C  C050  F09E         	movff	_octave,saveToEEPROM@to_save+58
 43371                           
 43372                           ; BSR set to: 0
 43373                           ;eeprom.c: 303: to_save[59] = semitone;
 43374  005130  C03B  F09F         	movff	_semitone,saveToEEPROM@to_save+59
 43375                           
 43376                           ; BSR set to: 0
 43377                           ;eeprom.c: 306: to_save[60] = patch_number;
 43378  005134  C0F3  F0A0         	movff	_patch_number,saveToEEPROM@to_save+60
 43379                           
 43380                           ;eeprom.c: 309: to_save[61] = ARPEGGIO_ON;
 43381  005138  0E00               	movlw	0
 43382  00513A  B604               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 43383  00513C  0E01               	movlw	1
 43384  00513E  6FA1               	movwf	(saveToEEPROM@to_save+61)& (0+255),b
 43385                           
 43386                           ; BSR set to: 0
 43387                           ;eeprom.c: 310: to_save[62] = BPM;
 43388  005140  C0FF  F0A2         	movff	_BPM,saveToEEPROM@to_save+62
 43389                           
 43390                           ; BSR set to: 0
 43391                           ;eeprom.c: 311: to_save[63] = OCTAVES;
 43392  005144  C04E  F0A3         	movff	_OCTAVES,saveToEEPROM@to_save+63
 43393                           
 43394                           ; BSR set to: 0
 43395                           ;eeprom.c: 312: to_save[64] = ARPEGGIO_TYPE;
 43396  005148  C035  F0A4         	movff	_ARPEGGIO_TYPE,saveToEEPROM@to_save+64
 43397                           
 43398                           ; BSR set to: 0
 43399                           ;eeprom.c: 313: to_save[65] = NOTE_LENGTH_PULSES;
 43400  00514C  C04D  F0A5         	movff	_NOTE_LENGTH_PULSES,saveToEEPROM@to_save+65
 43401                           
 43402                           ;eeprom.c: 314: to_save[66] = LATCH;
 43403  005150  0E00               	movlw	0
 43404  005152  B004               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 43405  005154  0E01               	movlw	1
 43406  005156  6FA6               	movwf	(saveToEEPROM@to_save+66)& (0+255),b
 43407                           
 43408                           ;eeprom.c: 315: to_save[67] = AUTO_LATCH;
 43409  005158  0E00               	movlw	0
 43410  00515A  BC03               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 43411  00515C  0E01               	movlw	1
 43412  00515E  6FA7               	movwf	(saveToEEPROM@to_save+67)& (0+255),b
 43413                           
 43414                           ;eeprom.c: 316: to_save[68] = UN_LATCH_MODE;
 43415  005160  0E00               	movlw	0
 43416  005162  BE03               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 43417  005164  0E01               	movlw	1
 43418  005166  6FA8               	movwf	(saveToEEPROM@to_save+68)& (0+255),b
 43419                           
 43420                           ;eeprom.c: 317: to_save[69] = AUTO_RANDOMIZE;
 43421  005168  0E00               	movlw	0
 43422  00516A  B803               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 43423  00516C  0E01               	movlw	1
 43424  00516E  6FA9               	movwf	(saveToEEPROM@to_save+69)& (0+255),b
 43425                           
 43426                           ;eeprom.c: 318: to_save[70] = skipFirstLast;
 43427  005170  0E00               	movlw	0
 43428  005172  B603               	btfsc	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 43429  005174  0E01               	movlw	1
 43430  005176  6FAA               	movwf	(saveToEEPROM@to_save+70)& (0+255),b
 43431                           
 43432                           ;eeprom.c: 319: to_save[71] = LAST_NOTE_MODE_KEY_PRESS;
 43433  005178  0E00               	movlw	0
 43434  00517A  B203               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 43435  00517C  0E01               	movlw	1
 43436  00517E  6FAB               	movwf	(saveToEEPROM@to_save+71)& (0+255),b
 43437                           
 43438                           ;eeprom.c: 320: to_save[72] = LAST_NOTE_MODE_KEY_RELEASE;
 43439  005180  0E00               	movlw	0
 43440  005182  B003               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 43441  005184  0E01               	movlw	1
 43442  005186  6FAC               	movwf	(saveToEEPROM@to_save+72)& (0+255),b
 43443                           
 43444                           ;eeprom.c: 321: to_save[73] = LAST_NOTE_MODE_TRANSPOSE;
 43445  005188  0E00               	movlw	0
 43446  00518A  BE02               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 43447  00518C  0E01               	movlw	1
 43448  00518E  6FAD               	movwf	(saveToEEPROM@to_save+73)& (0+255),b
 43449                           
 43450                           ;eeprom.c: 322: to_save[74] = LAST_NOTE_MODE_RESET;
 43451  005190  0E00               	movlw	0
 43452  005192  BC02               	btfsc	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 43453  005194  0E01               	movlw	1
 43454  005196  6FAE               	movwf	(saveToEEPROM@to_save+74)& (0+255),b
 43455                           
 43456                           ;eeprom.c: 325: for (unsigned int byte_count = 0; byte_count < 75; byte_count++){
 43457  005198  0E00               	movlw	0
 43458  00519A  6FB3               	movwf	(saveToEEPROM@byte_count+1)& (0+255),b
 43459  00519C  0E00               	movlw	0
 43460  00519E  6FB2               	movwf	saveToEEPROM@byte_count& (0+255),b
 43461  0051A0                     l31525:
 43462                           
 43463                           ; BSR set to: 0
 43464  0051A0  51B3               	movf	(saveToEEPROM@byte_count+1)& (0+255),w,b
 43465  0051A2  E11B               	bnz	l4466
 43466  0051A4  0E4B               	movlw	75
 43467  0051A6  5DB2               	subwf	saveToEEPROM@byte_count& (0+255),w,b
 43468  0051A8  B0D8               	btfsc	status,0,c
 43469  0051AA  0012               	return	
 43470                           
 43471                           ; BSR set to: 0
 43472                           ;eeprom.c: 326: (Busy_eep(), Write_b_eep((byte_count + baseAddress),to_save[byte_count])
      +                          );
 43473                           
 43474                           ; BSR set to: 0
 43475                           
 43476                           ; BSR set to: 0
 43477  0051AC  ECFA  F04C         	call	_Busy_eep	;wreg free
 43478  0051B0  0100               	movlb	0	; () banked
 43479  0051B2  51AF               	movf	saveToEEPROM@baseAddress& (0+255),w,b
 43480  0051B4  25B2               	addwf	saveToEEPROM@byte_count& (0+255),w,b
 43481  0051B6  6F60               	movwf	Write_b_eep@badd& (0+255),b
 43482  0051B8  51B0               	movf	(saveToEEPROM@baseAddress+1)& (0+255),w,b
 43483  0051BA  21B3               	addwfc	(saveToEEPROM@byte_count+1)& (0+255),w,b
 43484  0051BC  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 43485  0051BE  0E64               	movlw	low saveToEEPROM@to_save
 43486  0051C0  25B2               	addwf	saveToEEPROM@byte_count& (0+255),w,b
 43487  0051C2  6ED9               	movwf	fsr2l,c
 43488  0051C4  0E00               	movlw	high saveToEEPROM@to_save
 43489  0051C6  21B3               	addwfc	(saveToEEPROM@byte_count+1)& (0+255),w,b
 43490  0051C8  6EDA               	movwf	fsr2h,c
 43491  0051CA  50DF               	movf	indf2,w,c
 43492  0051CC  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 43493  0051CE  EC6C  F04A         	call	_Write_b_eep	;wreg free
 43494  0051D2  0100               	movlb	0	; () banked
 43495  0051D4  4BB2               	infsnz	saveToEEPROM@byte_count& (0+255),f,b
 43496  0051D6  2BB3               	incf	(saveToEEPROM@byte_count+1)& (0+255),f,b
 43497  0051D8  D7E3               	goto	l31525
 43498  0051DA                     l4466:
 43499                           
 43500                           ; BSR set to: 0
 43501  0051DA  0012               	return		;funcret
 43502  0051DC                     __end_of_saveToEEPROM:
 43503                           	opt stack 0
 43504                           tblptru	equ	0xFF8
 43505                           tblptrh	equ	0xFF7
 43506                           tblptrl	equ	0xFF6
 43507                           tablat	equ	0xFF5
 43508                           prodh	equ	0xFF4
 43509                           prodl	equ	0xFF3
 43510                           intcon	equ	0xFF2
 43511                           intcon2	equ	0xFF1
 43512                           indf0	equ	0xFEF
 43513                           postinc0	equ	0xFEE
 43514                           postdec0	equ	0xFED
 43515                           fsr0h	equ	0xFEA
 43516                           fsr0l	equ	0xFE9
 43517                           wreg	equ	0xFE8
 43518                           postinc1	equ	0xFE6
 43519                           postdec1	equ	0xFE5
 43520                           plusw1	equ	0xFE3
 43521                           fsr1h	equ	0xFE2
 43522                           fsr1l	equ	0xFE1
 43523                           indf2	equ	0xFDF
 43524                           postinc2	equ	0xFDE
 43525                           postdec2	equ	0xFDD
 43526                           plusw2	equ	0xFDB
 43527                           fsr2h	equ	0xFDA
 43528                           fsr2l	equ	0xFD9
 43529                           status	equ	0xFD8
 43530                           
 43531 ;; *************** function _Write_b_eep *****************
 43532 ;; Defined at:
 43533 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\EEP\write_B.c"
 43534 ;; Parameters:    Size  Location     Type
 43535 ;;  badd            2    0[BANK0 ] unsigned int 
 43536 ;;  bdat            1    2[BANK0 ] unsigned char 
 43537 ;; Auto vars:     Size  Location     Type
 43538 ;;  GIE_BIT_VAL     1    3[BANK0 ] unsigned char 
 43539 ;; Return value:  Size  Location     Type
 43540 ;;                  1    wreg      void 
 43541 ;; Registers used:
 43542 ;;		wreg, status,2, status,0
 43543 ;; Tracked objects:
 43544 ;;		On entry : 0/0
 43545 ;;		On exit  : 0/0
 43546 ;;		Unchanged: 0/0
 43547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43548 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43549 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43551 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43552 ;;Total ram usage:        4 bytes
 43553 ;; Hardware stack levels used:    1
 43554 ;; Hardware stack levels required when called:    5
 43555 ;; This function calls:
 43556 ;;		Nothing
 43557 ;; This function is called by:
 43558 ;;		_Function_D_2
 43559 ;;		_Function_G_1
 43560 ;;		_Function_G_2
 43561 ;;		_Function_G_3
 43562 ;;		_Function_G_4
 43563 ;;		_initializeSaveSlotsOnce
 43564 ;;		_saveToEEPROM
 43565 ;; This function uses a non-reentrant model
 43566 ;;
 43567                           
 43568                           	psect	text129
 43569  0094D8                     __ptext129:
 43570                           	opt stack 0
 43571  0094D8                     _Write_b_eep:
 43572                           	opt stack 22
 43573                           
 43574                           ; BSR set to: 0
 43575                           ;incstack = 0
 43576  0094D8  0E00               	movlw	0
 43577  0094DA  0100               	movlb	0	; () banked
 43578  0094DC  6F63               	movwf	Write_b_eep@GIE_BIT_VAL& (0+255),b
 43579                           
 43580                           ; BSR set to: 0
 43581  0094DE  5161               	movf	(Write_b_eep@badd+1)& (0+255),w,b
 43582  0094E0  0B03               	andlw	3
 43583  0094E2  6EAA               	movwf	4010,c	;volatile
 43584                           
 43585                           ; BSR set to: 0
 43586  0094E4  C060  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 43587                           
 43588                           ; BSR set to: 0
 43589  0094E8  C062  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 43590                           
 43591                           ; BSR set to: 0
 43592  0094EC  9EA6               	bcf	4006,7,c	;volsfr
 43593                           
 43594                           ; BSR set to: 0
 43595  0094EE  9CA6               	bcf	4006,6,c	;volsfr
 43596                           
 43597                           ; BSR set to: 0
 43598  0094F0  84A6               	bsf	4006,2,c	;volsfr
 43599                           
 43600                           ; BSR set to: 0
 43601  0094F2  0E00               	movlw	0
 43602  0094F4  BEF2               	btfsc	intcon,7,c	;volatile
 43603  0094F6  0E01               	movlw	1
 43604  0094F8  6F63               	movwf	Write_b_eep@GIE_BIT_VAL& (0+255),b
 43605                           
 43606                           ; BSR set to: 0
 43607  0094FA  9EF2               	bcf	intcon,7,c	;volatile
 43608                           
 43609                           ; BSR set to: 0
 43610  0094FC  0E55               	movlw	85
 43611  0094FE  6EA7               	movwf	4007,c	;volsfr
 43612                           
 43613                           ; BSR set to: 0
 43614  009500  0EAA               	movlw	170
 43615  009502  6EA7               	movwf	4007,c	;volsfr
 43616                           
 43617                           ; BSR set to: 0
 43618  009504  82A6               	bsf	4006,1,c	;volsfr
 43619  009506                     
 43620                           ; BSR set to: 0
 43621  009506  B2A6               	btfsc	4006,1,c	;volsfr
 43622  009508  D7FE               	goto	l5639
 43623  00950A  0100               	movlb	0	; () banked
 43624  00950C  B163               	btfsc	Write_b_eep@GIE_BIT_VAL& (0+255),0,b
 43625  00950E  D002               	bra	u56715
 43626  009510  9EF2               	bcf	intcon,7,c	;volatile
 43627  009512  D001               	bra	u56716
 43628  009514                     u56715:
 43629  009514  8EF2               	bsf	intcon,7,c	;volatile
 43630  009516                     u56716:
 43631  009516  94A6               	bcf	4006,2,c	;volsfr
 43632  009518  0012               	return		;funcret
 43633  00951A                     __end_of_Write_b_eep:
 43634                           	opt stack 0
 43635                           tblptru	equ	0xFF8
 43636                           tblptrh	equ	0xFF7
 43637                           tblptrl	equ	0xFF6
 43638                           tablat	equ	0xFF5
 43639                           prodh	equ	0xFF4
 43640                           prodl	equ	0xFF3
 43641                           intcon	equ	0xFF2
 43642                           intcon2	equ	0xFF1
 43643                           indf0	equ	0xFEF
 43644                           postinc0	equ	0xFEE
 43645                           postdec0	equ	0xFED
 43646                           fsr0h	equ	0xFEA
 43647                           fsr0l	equ	0xFE9
 43648                           wreg	equ	0xFE8
 43649                           postinc1	equ	0xFE6
 43650                           postdec1	equ	0xFE5
 43651                           plusw1	equ	0xFE3
 43652                           fsr1h	equ	0xFE2
 43653                           fsr1l	equ	0xFE1
 43654                           indf2	equ	0xFDF
 43655                           postinc2	equ	0xFDE
 43656                           postdec2	equ	0xFDD
 43657                           plusw2	equ	0xFDB
 43658                           fsr2h	equ	0xFDA
 43659                           fsr2l	equ	0xFD9
 43660                           status	equ	0xFD8
 43661                           
 43662 ;; *************** function _Busy_eep *****************
 43663 ;; Defined at:
 43664 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\EEP\busy_eep.c"
 43665 ;; Parameters:    Size  Location     Type
 43666 ;;		None
 43667 ;; Auto vars:     Size  Location     Type
 43668 ;;		None
 43669 ;; Return value:  Size  Location     Type
 43670 ;;                  1    wreg      void 
 43671 ;; Registers used:
 43672 ;;		None
 43673 ;; Tracked objects:
 43674 ;;		On entry : 0/0
 43675 ;;		On exit  : 0/0
 43676 ;;		Unchanged: 0/0
 43677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43682 ;;Total ram usage:        0 bytes
 43683 ;; Hardware stack levels used:    1
 43684 ;; Hardware stack levels required when called:    5
 43685 ;; This function calls:
 43686 ;;		Nothing
 43687 ;; This function is called by:
 43688 ;;		_Function_D_2
 43689 ;;		_Function_G_1
 43690 ;;		_Function_G_2
 43691 ;;		_Function_G_3
 43692 ;;		_Function_G_4
 43693 ;;		_initializeSaveSlotsOnce
 43694 ;;		_saveToEEPROM
 43695 ;; This function uses a non-reentrant model
 43696 ;;
 43697                           
 43698                           	psect	text130
 43699  0099F4                     __ptext130:
 43700                           	opt stack 0
 43701  0099F4                     _Busy_eep:
 43702                           	opt stack 22
 43703                           
 43704                           ;incstack = 0
 43705  0099F4  B2A6               	btfsc	4006,1,c	;volsfr
 43706  0099F6  D7FE               	goto	_Busy_eep
 43707  0099F8  0012               	return	
 43708  0099FA                     __end_of_Busy_eep:
 43709                           	opt stack 0
 43710                           tblptru	equ	0xFF8
 43711                           tblptrh	equ	0xFF7
 43712                           tblptrl	equ	0xFF6
 43713                           tablat	equ	0xFF5
 43714                           prodh	equ	0xFF4
 43715                           prodl	equ	0xFF3
 43716                           intcon	equ	0xFF2
 43717                           intcon2	equ	0xFF1
 43718                           indf0	equ	0xFEF
 43719                           postinc0	equ	0xFEE
 43720                           postdec0	equ	0xFED
 43721                           fsr0h	equ	0xFEA
 43722                           fsr0l	equ	0xFE9
 43723                           wreg	equ	0xFE8
 43724                           postinc1	equ	0xFE6
 43725                           postdec1	equ	0xFE5
 43726                           plusw1	equ	0xFE3
 43727                           fsr1h	equ	0xFE2
 43728                           fsr1l	equ	0xFE1
 43729                           indf2	equ	0xFDF
 43730                           postinc2	equ	0xFDE
 43731                           postdec2	equ	0xFDD
 43732                           plusw2	equ	0xFDB
 43733                           fsr2h	equ	0xFDA
 43734                           fsr2l	equ	0xFD9
 43735                           status	equ	0xFD8
 43736                           
 43737 ;; *************** function _Read_b_eep *****************
 43738 ;; Defined at:
 43739 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\EEP\read_B.c"
 43740 ;; Parameters:    Size  Location     Type
 43741 ;;  badd            2    0[BANK0 ] unsigned int 
 43742 ;; Auto vars:     Size  Location     Type
 43743 ;;		None
 43744 ;; Return value:  Size  Location     Type
 43745 ;;                  1    wreg      unsigned char 
 43746 ;; Registers used:
 43747 ;;		wreg, status,2, status,0
 43748 ;; Tracked objects:
 43749 ;;		On entry : 0/0
 43750 ;;		On exit  : 0/0
 43751 ;;		Unchanged: 0/0
 43752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43753 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43756 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43757 ;;Total ram usage:        2 bytes
 43758 ;; Hardware stack levels used:    1
 43759 ;; Hardware stack levels required when called:    5
 43760 ;; This function calls:
 43761 ;;		Nothing
 43762 ;; This function is called by:
 43763 ;;		_initializeSaveSlotsOnce
 43764 ;;		_selectSlotOnBoot
 43765 ;;		_loadFromEEPROM
 43766 ;;		_main
 43767 ;; This function uses a non-reentrant model
 43768 ;;
 43769                           
 43770                           	psect	text131
 43771  009922                     __ptext131:
 43772                           	opt stack 0
 43773  009922                     _Read_b_eep:
 43774                           	opt stack 23
 43775                           
 43776                           ;incstack = 0
 43777  009922  0100               	movlb	0	; () banked
 43778  009924  5161               	movf	(Read_b_eep@badd+1)& (0+255),w,b
 43779  009926  0B03               	andlw	3
 43780  009928  6EAA               	movwf	4010,c	;volatile
 43781                           
 43782                           ; BSR set to: 0
 43783  00992A  C060  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 43784                           
 43785                           ; BSR set to: 0
 43786  00992E  9CA6               	bcf	4006,6,c	;volsfr
 43787                           
 43788                           ; BSR set to: 0
 43789  009930  9EA6               	bcf	4006,7,c	;volsfr
 43790                           
 43791                           ; BSR set to: 0
 43792  009932  80A6               	bsf	4006,0,c	;volsfr
 43793                           
 43794                           ; BSR set to: 0
 43795  009934  F000               	nop	
 43796  009936  F000               	nop	
 43797  009938  50A8               	movf	4008,w,c	;volatile
 43798  00993A  0012               	return	
 43799  00993C                     __end_of_Read_b_eep:
 43800                           	opt stack 0
 43801                           tblptru	equ	0xFF8
 43802                           tblptrh	equ	0xFF7
 43803                           tblptrl	equ	0xFF6
 43804                           tablat	equ	0xFF5
 43805                           prodh	equ	0xFF4
 43806                           prodl	equ	0xFF3
 43807                           intcon	equ	0xFF2
 43808                           intcon2	equ	0xFF1
 43809                           indf0	equ	0xFEF
 43810                           postinc0	equ	0xFEE
 43811                           postdec0	equ	0xFED
 43812                           fsr0h	equ	0xFEA
 43813                           fsr0l	equ	0xFE9
 43814                           wreg	equ	0xFE8
 43815                           postinc1	equ	0xFE6
 43816                           postdec1	equ	0xFE5
 43817                           plusw1	equ	0xFE3
 43818                           fsr1h	equ	0xFE2
 43819                           fsr1l	equ	0xFE1
 43820                           indf2	equ	0xFDF
 43821                           postinc2	equ	0xFDE
 43822                           postdec2	equ	0xFDD
 43823                           plusw2	equ	0xFDB
 43824                           fsr2h	equ	0xFDA
 43825                           fsr2l	equ	0xFD9
 43826                           status	equ	0xFD8
 43827                           
 43828 ;; *************** function _initializeMenuArray *****************
 43829 ;; Defined at:
 43830 ;;		line 27 in file "menu.c"
 43831 ;; Parameters:    Size  Location     Type
 43832 ;;		None
 43833 ;; Auto vars:     Size  Location     Type
 43834 ;;  i               1    8[BANK0 ] unsigned char 
 43835 ;;  NumberOfElem    1    7[BANK0 ] unsigned char 
 43836 ;; Return value:  Size  Location     Type
 43837 ;;                  1    wreg      void 
 43838 ;; Registers used:
 43839 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 43840 ;; Tracked objects:
 43841 ;;		On entry : 0/0
 43842 ;;		On exit  : 0/0
 43843 ;;		Unchanged: 0/0
 43844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43846 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43847 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43848 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43849 ;;Total ram usage:        3 bytes
 43850 ;; Hardware stack levels used:    1
 43851 ;; Hardware stack levels required when called:    6
 43852 ;; This function calls:
 43853 ;;		___wmul
 43854 ;; This function is called by:
 43855 ;;		_main
 43856 ;; This function uses a non-reentrant model
 43857 ;;
 43858                           
 43859                           	psect	text132
 43860  004DE6                     __ptext132:
 43861                           	opt stack 0
 43862  004DE6                     _initializeMenuArray:
 43863                           	opt stack 24
 43864                           
 43865                           ;menu.c: 30: unsigned char NumberOfElements = sizeof(menuArray)/sizeof(menuArray[0]);
 43866                           
 43867                           ;incstack = 0
 43868  004DE6  0E23               	movlw	35
 43869  004DE8  0100               	movlb	0	; () banked
 43870  004DEA  6F67               	movwf	initializeMenuArray@NumberOfElements& (0+255),b
 43871                           
 43872                           ;menu.c: 33: for(unsigned char i = 1;i<NumberOfElements;i++) {
 43873  004DEC  0E01               	movlw	1
 43874  004DEE  6F68               	movwf	initializeMenuArray@i& (0+255),b
 43875  004DF0  D03C               	goto	l3449
 43876  004DF2                     
 43877                           ; BSR set to: 0
 43878                           ;menu.c: 34: menuArray[i].address = menuArray[i-1].address + menuArray[i-1].number;
 43879                           
 43880                           ; BSR set to: 0
 43881  004DF2  5168               	movf	initializeMenuArray@i& (0+255),w,b
 43882  004DF4  0D03               	mullw	3
 43883  004DF6  0E01               	movlw	1
 43884  004DF8  26F3               	addwf	prodl,f,c
 43885  004DFA  0E00               	movlw	0
 43886  004DFC  22F4               	addwfc	prodh,f,c
 43887  004DFE  0E00               	movlw	low _menuArray
 43888  004E00  24F3               	addwf	prodl,w,c
 43889  004E02  6ED9               	movwf	fsr2l,c
 43890  004E04  0E03               	movlw	high _menuArray
 43891  004E06  20F4               	addwfc	prodh,w,c
 43892  004E08  6EDA               	movwf	fsr2h,c
 43893  004E0A  0EFF               	movlw	255
 43894  004E0C  2568               	addwf	initializeMenuArray@i& (0+255),w,b
 43895  004E0E  6F60               	movwf	___wmul@multiplier& (0+255),b
 43896  004E10  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 43897  004E12  0EFF               	movlw	255
 43898  004E14  2361               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
 43899  004E16  0E00               	movlw	0
 43900  004E18  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 43901  004E1A  0E03               	movlw	3
 43902  004E1C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 43903  004E1E  EC2A  F04C         	call	___wmul	;wreg free
 43904  004E22  0E00               	movlw	low _menuArray
 43905  004E24  0100               	movlb	0	; () banked
 43906  004E26  2560               	addwf	?___wmul& (0+255),w,b
 43907  004E28  6EE9               	movwf	fsr0l,c
 43908  004E2A  0E03               	movlw	high _menuArray
 43909  004E2C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 43910  004E2E  6EEA               	movwf	fsr0h,c
 43911  004E30  50EF               	movf	indf0,w,c
 43912  004E32  6F66               	movwf	??_initializeMenuArray& (0+255),b
 43913  004E34  0EFF               	movlw	255
 43914  004E36  2568               	addwf	initializeMenuArray@i& (0+255),w,b
 43915  004E38  6F60               	movwf	___wmul@multiplier& (0+255),b
 43916  004E3A  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 43917  004E3C  0EFF               	movlw	255
 43918  004E3E  2361               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
 43919  004E40  0E00               	movlw	0
 43920  004E42  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 43921  004E44  0E03               	movlw	3
 43922  004E46  6F62               	movwf	___wmul@multiplicand& (0+255),b
 43923  004E48  EC2A  F04C         	call	___wmul	;wreg free
 43924  004E4C  0E01               	movlw	1
 43925  004E4E  0100               	movlb	0	; () banked
 43926  004E50  2760               	addwf	?___wmul& (0+255),f,b
 43927  004E52  0E00               	movlw	0
 43928  004E54  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 43929  004E56  0E00               	movlw	low _menuArray
 43930  004E58  2560               	addwf	?___wmul& (0+255),w,b
 43931  004E5A  6EE9               	movwf	fsr0l,c
 43932  004E5C  0E03               	movlw	high _menuArray
 43933  004E5E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 43934  004E60  6EEA               	movwf	fsr0h,c
 43935  004E62  50EF               	movf	indf0,w,c
 43936  004E64  2566               	addwf	??_initializeMenuArray& (0+255),w,b
 43937  004E66  6EDF               	movwf	indf2,c
 43938                           
 43939                           ; BSR set to: 0
 43940  004E68  2B68               	incf	initializeMenuArray@i& (0+255),f,b
 43941  004E6A                     l3449:
 43942                           
 43943                           ; BSR set to: 0
 43944                           
 43945                           ; BSR set to: 0
 43946  004E6A  5167               	movf	initializeMenuArray@NumberOfElements& (0+255),w,b
 43947  004E6C  5D68               	subwf	initializeMenuArray@i& (0+255),w,b
 43948  004E6E  A0D8               	btfss	status,0,c
 43949  004E70  D7C0               	goto	l3450
 43950                           
 43951                           ; BSR set to: 0
 43952                           ;menu.c: 35: }
 43953                           ;menu.c: 38: mainMenu = menuArray[0];
 43954  004E72  C300  F174         	movff	_menuArray,_mainMenu
 43955  004E76  C301  F175         	movff	_menuArray+1,_mainMenu+1
 43956  004E7A  C302  F176         	movff	_menuArray+2,_mainMenu+2
 43957                           
 43958                           ;menu.c: 39: keyboardMenu = menuArray[1];
 43959  004E7E  C303  F0E5         	movff	_menuArray+3,_keyboardMenu
 43960  004E82  C304  F0E6         	movff	_menuArray+4,_keyboardMenu+1
 43961  004E86  C305  F0E7         	movff	_menuArray+5,_keyboardMenu+2
 43962                           
 43963                           ;menu.c: 40: modeMenu = menuArray[2];
 43964  004E8A  C306  F171         	movff	_menuArray+6,_modeMenu
 43965  004E8E  C307  F172         	movff	_menuArray+7,_modeMenu+1
 43966  004E92  C308  F173         	movff	_menuArray+8,_modeMenu+2
 43967                           
 43968                           ;menu.c: 41: triadMenu = menuArray[3];
 43969  004E96  C309  F16E         	movff	_menuArray+9,_triadMenu
 43970  004E9A  C30A  F16F         	movff	_menuArray+10,_triadMenu+1
 43971  004E9E  C30B  F170         	movff	_menuArray+11,_triadMenu+2
 43972                           
 43973                           ;menu.c: 42: seventhMenu = menuArray[4];
 43974  004EA2  C30C  F16B         	movff	_menuArray+12,_seventhMenu
 43975  004EA6  C30D  F16C         	movff	_menuArray+13,_seventhMenu+1
 43976  004EAA  C30E  F16D         	movff	_menuArray+14,_seventhMenu+2
 43977                           
 43978                           ;menu.c: 43: transposeMenu = menuArray[5];
 43979  004EAE  C30F  F168         	movff	_menuArray+15,_transposeMenu
 43980  004EB2  C310  F169         	movff	_menuArray+16,_transposeMenu+1
 43981  004EB6  C311  F16A         	movff	_menuArray+17,_transposeMenu+2
 43982                           
 43983                           ;menu.c: 44: drumMenu = menuArray[6];
 43984  004EBA  C312  F165         	movff	_menuArray+18,_drumMenu
 43985  004EBE  C313  F166         	movff	_menuArray+19,_drumMenu+1
 43986  004EC2  C314  F167         	movff	_menuArray+20,_drumMenu+2
 43987                           
 43988                           ;menu.c: 45: drumCCTypeMenu = menuArray[7];
 43989  004EC6  C315  F162         	movff	_menuArray+21,_drumCCTypeMenu
 43990  004ECA  C316  F163         	movff	_menuArray+22,_drumCCTypeMenu+1
 43991  004ECE  C317  F164         	movff	_menuArray+23,_drumCCTypeMenu+2
 43992                           
 43993                           ;menu.c: 46: drumNNMenu = menuArray[8];
 43994  004ED2  C318  F15F         	movff	_menuArray+24,_drumNNMenu
 43995  004ED6  C319  F160         	movff	_menuArray+25,_drumNNMenu+1
 43996  004EDA  C31A  F161         	movff	_menuArray+26,_drumNNMenu+2
 43997                           
 43998                           ;menu.c: 47: drumCCMenu = menuArray[9];
 43999  004EDE  C31B  F15C         	movff	_menuArray+27,_drumCCMenu
 44000  004EE2  C31C  F15D         	movff	_menuArray+28,_drumCCMenu+1
 44001  004EE6  C31D  F15E         	movff	_menuArray+29,_drumCCMenu+2
 44002                           
 44003                           ;menu.c: 48: potsMenu = menuArray[10];
 44004  004EEA  C31E  F159         	movff	_menuArray+30,_potsMenu
 44005  004EEE  C31F  F15A         	movff	_menuArray+31,_potsMenu+1
 44006  004EF2  C320  F15B         	movff	_menuArray+32,_potsMenu+2
 44007                           
 44008                           ;menu.c: 49: potsResoMenu = menuArray[11];
 44009  004EF6  C321  F156         	movff	_menuArray+33,_potsResoMenu
 44010  004EFA  C322  F157         	movff	_menuArray+34,_potsResoMenu+1
 44011  004EFE  C323  F158         	movff	_menuArray+35,_potsResoMenu+2
 44012                           
 44013                           ;menu.c: 50: potsCCMenu = menuArray[12];
 44014  004F02  C324  F150         	movff	_menuArray+36,_potsCCMenu
 44015  004F06  C325  F151         	movff	_menuArray+37,_potsCCMenu+1
 44016  004F0A  C326  F152         	movff	_menuArray+38,_potsCCMenu+2
 44017                           
 44018                           ;menu.c: 51: slidepotsCCMenu = menuArray[13];
 44019  004F0E  C327  F14D         	movff	_menuArray+39,_slidepotsCCMenu
 44020  004F12  C328  F14E         	movff	_menuArray+40,_slidepotsCCMenu+1
 44021  004F16  C329  F14F         	movff	_menuArray+41,_slidepotsCCMenu+2
 44022                           
 44023                           ;menu.c: 52: joystickCCMenu = menuArray[14];
 44024  004F1A  C32A  F14A         	movff	_menuArray+42,_joystickCCMenu
 44025  004F1E  C32B  F14B         	movff	_menuArray+43,_joystickCCMenu+1
 44026  004F22  C32C  F14C         	movff	_menuArray+44,_joystickCCMenu+2
 44027                           
 44028                           ;menu.c: 53: midiChannelMenu = menuArray[15];
 44029  004F26  C32D  F147         	movff	_menuArray+45,_midiChannelMenu
 44030  004F2A  C32E  F148         	movff	_menuArray+46,_midiChannelMenu+1
 44031  004F2E  C32F  F149         	movff	_menuArray+47,_midiChannelMenu+2
 44032                           
 44033                           ;menu.c: 54: eepromMenu = menuArray[16];
 44034  004F32  C330  F13B         	movff	_menuArray+48,_eepromMenu
 44035  004F36  C331  F13C         	movff	_menuArray+49,_eepromMenu+1
 44036  004F3A  C332  F13D         	movff	_menuArray+50,_eepromMenu+2
 44037                           
 44038                           ;menu.c: 55: savesMenu = menuArray[17];
 44039  004F3E  C333  F0E2         	movff	_menuArray+51,_savesMenu
 44040  004F42  C334  F0E3         	movff	_menuArray+52,_savesMenu+1
 44041  004F46  C335  F0E4         	movff	_menuArray+53,_savesMenu+2
 44042                           
 44043                           ;menu.c: 56: encoderPolarityMenu = menuArray[18];
 44044  004F4A  C336  F138         	movff	_menuArray+54,_encoderPolarityMenu
 44045  004F4E  C337  F139         	movff	_menuArray+55,_encoderPolarityMenu+1
 44046  004F52  C338  F13A         	movff	_menuArray+56,_encoderPolarityMenu+2
 44047                           
 44048                           ;menu.c: 57: arpeggiatorMenu = menuArray[19];
 44049  004F56  C339  F0DF         	movff	_menuArray+57,_arpeggiatorMenu
 44050  004F5A  C33A  F0E0         	movff	_menuArray+58,_arpeggiatorMenu+1
 44051  004F5E  C33B  F0E1         	movff	_menuArray+59,_arpeggiatorMenu+2
 44052                           
 44053                           ;menu.c: 58: arpeggiatorOnOffMenu = menuArray[20];
 44054  004F62  C33C  F135         	movff	_menuArray+60,_arpeggiatorOnOffMenu
 44055  004F66  C33D  F136         	movff	_menuArray+61,_arpeggiatorOnOffMenu+1
 44056  004F6A  C33E  F137         	movff	_menuArray+62,_arpeggiatorOnOffMenu+2
 44057                           
 44058                           ;menu.c: 59: arpeggiatorTypeMenu = menuArray[21];
 44059  004F6E  C33F  F12C         	movff	_menuArray+63,_arpeggiatorTypeMenu
 44060  004F72  C340  F12D         	movff	_menuArray+64,_arpeggiatorTypeMenu+1
 44061  004F76  C341  F12E         	movff	_menuArray+65,_arpeggiatorTypeMenu+2
 44062                           
 44063                           ;menu.c: 60: arpeggiatorNoteLengthMenu = menuArray[22];
 44064  004F7A  C342  F129         	movff	_menuArray+66,_arpeggiatorNoteLengthMenu
 44065  004F7E  C343  F12A         	movff	_menuArray+67,_arpeggiatorNoteLengthMenu+1
 44066  004F82  C344  F12B         	movff	_menuArray+68,_arpeggiatorNoteLengthMenu+2
 44067                           
 44068                           ;menu.c: 61: arpeggiatorLatchMenu = menuArray[23];
 44069  004F86  C345  F126         	movff	_menuArray+69,_arpeggiatorLatchMenu
 44070  004F8A  C346  F127         	movff	_menuArray+70,_arpeggiatorLatchMenu+1
 44071  004F8E  C347  F128         	movff	_menuArray+71,_arpeggiatorLatchMenu+2
 44072                           
 44073                           ;menu.c: 62: arpeggiatorLatchOnOffMenu = menuArray[24];
 44074  004F92  C348  F123         	movff	_menuArray+72,_arpeggiatorLatchOnOffMenu
 44075  004F96  C349  F124         	movff	_menuArray+73,_arpeggiatorLatchOnOffMenu+1
 44076  004F9A  C34A  F125         	movff	_menuArray+74,_arpeggiatorLatchOnOffMenu+2
 44077                           
 44078                           ;menu.c: 63: arpeggiatorAutoLatchOnOffMenu = menuArray[25];
 44079  004F9E  C34B  F120         	movff	_menuArray+75,_arpeggiatorAutoLatchOnOffMenu
 44080  004FA2  C34C  F121         	movff	_menuArray+76,_arpeggiatorAutoLatchOnOffMenu+1
 44081  004FA6  C34D  F122         	movff	_menuArray+77,_arpeggiatorAutoLatchOnOffMenu+2
 44082                           
 44083                           ;menu.c: 64: arpeggiatorUnLatchModeMenu = menuArray[26];
 44084  004FAA  C34E  F11D         	movff	_menuArray+78,_arpeggiatorUnLatchModeMenu
 44085  004FAE  C34F  F11E         	movff	_menuArray+79,_arpeggiatorUnLatchModeMenu+1
 44086  004FB2  C350  F11F         	movff	_menuArray+80,_arpeggiatorUnLatchModeMenu+2
 44087                           
 44088                           ;menu.c: 65: arpeggiatorRandomizeSkipMenu = menuArray[27];
 44089  004FB6  C351  F11A         	movff	_menuArray+81,_arpeggiatorRandomizeSkipMenu
 44090  004FBA  C352  F11B         	movff	_menuArray+82,_arpeggiatorRandomizeSkipMenu+1
 44091  004FBE  C353  F11C         	movff	_menuArray+83,_arpeggiatorRandomizeSkipMenu+2
 44092                           
 44093                           ;menu.c: 66: arpeggiatorRandomizeTypeMenu = menuArray[28];
 44094  004FC2  C354  F117         	movff	_menuArray+84,_arpeggiatorRandomizeTypeMenu
 44095  004FC6  C355  F118         	movff	_menuArray+85,_arpeggiatorRandomizeTypeMenu+1
 44096  004FCA  C356  F119         	movff	_menuArray+86,_arpeggiatorRandomizeTypeMenu+2
 44097                           
 44098                           ;menu.c: 67: arpeggiatorSkipFirstLastMenu = menuArray[29];
 44099  004FCE  C357  F114         	movff	_menuArray+87,_arpeggiatorSkipFirstLastMenu
 44100  004FD2  C358  F115         	movff	_menuArray+88,_arpeggiatorSkipFirstLastMenu+1
 44101  004FD6  C359  F116         	movff	_menuArray+89,_arpeggiatorSkipFirstLastMenu+2
 44102                           
 44103                           ;menu.c: 68: arpeggiatorLastNoteModeMenu = menuArray[30];
 44104  004FDA  C35A  F0DC         	movff	_menuArray+90,_arpeggiatorLastNoteModeMenu
 44105  004FDE  C35B  F0DD         	movff	_menuArray+91,_arpeggiatorLastNoteModeMenu+1
 44106  004FE2  C35C  F0DE         	movff	_menuArray+92,_arpeggiatorLastNoteModeMenu+2
 44107                           
 44108                           ; BSR set to: 0
 44109  004FE6  0012               	return		;funcret
 44110  004FE8                     __end_of_initializeMenuArray:
 44111                           	opt stack 0
 44112                           tblptru	equ	0xFF8
 44113                           tblptrh	equ	0xFF7
 44114                           tblptrl	equ	0xFF6
 44115                           tablat	equ	0xFF5
 44116                           prodh	equ	0xFF4
 44117                           prodl	equ	0xFF3
 44118                           intcon	equ	0xFF2
 44119                           intcon2	equ	0xFF1
 44120                           indf0	equ	0xFEF
 44121                           postinc0	equ	0xFEE
 44122                           postdec0	equ	0xFED
 44123                           fsr0h	equ	0xFEA
 44124                           fsr0l	equ	0xFE9
 44125                           wreg	equ	0xFE8
 44126                           postinc1	equ	0xFE6
 44127                           postdec1	equ	0xFE5
 44128                           plusw1	equ	0xFE3
 44129                           fsr1h	equ	0xFE2
 44130                           fsr1l	equ	0xFE1
 44131                           indf2	equ	0xFDF
 44132                           postinc2	equ	0xFDE
 44133                           postdec2	equ	0xFDD
 44134                           plusw2	equ	0xFDB
 44135                           fsr2h	equ	0xFDA
 44136                           fsr2l	equ	0xFD9
 44137                           status	equ	0xFD8
 44138                           
 44139 ;; *************** function ___wmul *****************
 44140 ;; Defined at:
 44141 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 44142 ;; Parameters:    Size  Location     Type
 44143 ;;  multiplier      2    0[BANK0 ] unsigned int 
 44144 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 44145 ;; Auto vars:     Size  Location     Type
 44146 ;;  product         2    4[BANK0 ] unsigned int 
 44147 ;; Return value:  Size  Location     Type
 44148 ;;                  2    0[BANK0 ] unsigned int 
 44149 ;; Registers used:
 44150 ;;		wreg, status,2, status,0, prodl, prodh
 44151 ;; Tracked objects:
 44152 ;;		On entry : 0/0
 44153 ;;		On exit  : 0/0
 44154 ;;		Unchanged: 0/0
 44155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44156 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44157 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44159 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44160 ;;Total ram usage:        6 bytes
 44161 ;; Hardware stack levels used:    1
 44162 ;; Hardware stack levels required when called:    5
 44163 ;; This function calls:
 44164 ;;		Nothing
 44165 ;; This function is called by:
 44166 ;;		_processOctave
 44167 ;;		_initializeMenuArray
 44168 ;;		_menu_lcd
 44169 ;;		_Function_A_1
 44170 ;;		_Function_A_2
 44171 ;;		_Function_A_3
 44172 ;;		_Function_A
 44173 ;;		_Function_B
 44174 ;;		_Function_C_1
 44175 ;;		_Function_C_2
 44176 ;;		_Function_C_3
 44177 ;;		_Function_C
 44178 ;;		_Function_D_1
 44179 ;;		_Function_D_3
 44180 ;;		_Function_D_4
 44181 ;;		_Function_D_5
 44182 ;;		_Function_D
 44183 ;;		_Function_E
 44184 ;;		_Function_G_1
 44185 ;;		_Function_G_2
 44186 ;;		_Function_G_4
 44187 ;;		_Function_G
 44188 ;;		_Function_H
 44189 ;;		_Function_H_4
 44190 ;;		_Function_H_5
 44191 ;;		_Function_H_6
 44192 ;;		_Function_H_8
 44193 ;;		_Function_H_9_1
 44194 ;;		_Function_H_9_2
 44195 ;;		_Function_H_9_3
 44196 ;;		_Function_H_9_4
 44197 ;;		_Function_H_9
 44198 ;; This function uses a non-reentrant model
 44199 ;;
 44200                           
 44201                           	psect	text133
 44202  009854                     __ptext133:
 44203                           	opt stack 0
 44204  009854                     ___wmul:
 44205                           	opt stack 24
 44206                           
 44207                           ; BSR set to: 0
 44208                           ;incstack = 0
 44209  009854  0100               	movlb	0	; () banked
 44210  009856  5160               	movf	___wmul@multiplier& (0+255),w,b
 44211  009858  0362               	mulwf	___wmul@multiplicand& (0+255),b
 44212  00985A  CFF3 F064          	movff	prodl,___wmul@product
 44213  00985E  CFF4 F065          	movff	prodh,___wmul@product+1
 44214  009862  5160               	movf	___wmul@multiplier& (0+255),w,b
 44215  009864  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 44216  009866  50F3               	movf	prodl,w,c
 44217  009868  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 44218  00986A  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 44219  00986C  0362               	mulwf	___wmul@multiplicand& (0+255),b
 44220  00986E  50F3               	movf	prodl,w,c
 44221  009870  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 44222                           
 44223                           ; BSR set to: 0
 44224  009872  C064  F060         	movff	___wmul@product,?___wmul
 44225  009876  C065  F061         	movff	___wmul@product+1,?___wmul+1
 44226  00987A  0012               	return	
 44227  00987C                     __end_of___wmul:
 44228                           	opt stack 0
 44229                           tblptru	equ	0xFF8
 44230                           tblptrh	equ	0xFF7
 44231                           tblptrl	equ	0xFF6
 44232                           tablat	equ	0xFF5
 44233                           prodh	equ	0xFF4
 44234                           prodl	equ	0xFF3
 44235                           intcon	equ	0xFF2
 44236                           intcon2	equ	0xFF1
 44237                           indf0	equ	0xFEF
 44238                           postinc0	equ	0xFEE
 44239                           postdec0	equ	0xFED
 44240                           fsr0h	equ	0xFEA
 44241                           fsr0l	equ	0xFE9
 44242                           wreg	equ	0xFE8
 44243                           postinc1	equ	0xFE6
 44244                           postdec1	equ	0xFE5
 44245                           plusw1	equ	0xFE3
 44246                           fsr1h	equ	0xFE2
 44247                           fsr1l	equ	0xFE1
 44248                           indf2	equ	0xFDF
 44249                           postinc2	equ	0xFDE
 44250                           postdec2	equ	0xFDD
 44251                           plusw2	equ	0xFDB
 44252                           fsr2h	equ	0xFDA
 44253                           fsr2l	equ	0xFD9
 44254                           status	equ	0xFD8
 44255                           
 44256 ;; *************** function _displayTest *****************
 44257 ;; Defined at:
 44258 ;;		line 32 in file "segment.c"
 44259 ;; Parameters:    Size  Location     Type
 44260 ;;		None
 44261 ;; Auto vars:     Size  Location     Type
 44262 ;;		None
 44263 ;; Return value:  Size  Location     Type
 44264 ;;                  1    wreg      void 
 44265 ;; Registers used:
 44266 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 44267 ;; Tracked objects:
 44268 ;;		On entry : 0/0
 44269 ;;		On exit  : 0/0
 44270 ;;		Unchanged: 0/0
 44271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44274 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44275 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44276 ;;Total ram usage:        2 bytes
 44277 ;; Hardware stack levels used:    1
 44278 ;; Hardware stack levels required when called:    6
 44279 ;; This function calls:
 44280 ;;		_strcpy
 44281 ;; This function is called by:
 44282 ;;		_main
 44283 ;; This function uses a non-reentrant model
 44284 ;;
 44285                           
 44286                           	psect	text134
 44287  0085F0                     __ptext134:
 44288                           	opt stack 0
 44289  0085F0                     _displayTest:
 44290                           	opt stack 24
 44291                           
 44292                           ;segment.c: 38: DISPLAY_MODE = 1;
 44293                           
 44294                           ; BSR set to: 0
 44295                           ;incstack = 0
 44296  0085F0  0E01               	movlw	1
 44297  0085F2  0100               	movlb	0	; () banked
 44298  0085F4  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 44299                           
 44300                           ; BSR set to: 0
 44301                           ;segment.c: 39: strcpy(string_to_display,"tESt");
 44302  0085F6  0EF8               	movlw	low _string_to_display
 44303  0085F8  6F60               	movwf	strcpy@to& (0+255),b
 44304  0085FA  0E01               	movlw	high _string_to_display
 44305  0085FC  6F61               	movwf	(strcpy@to+1)& (0+255),b
 44306  0085FE  0ED7               	movlw	low STR_8
 44307  008600  6F62               	movwf	strcpy@from& (0+255),b
 44308  008602  0EFF               	movlw	high STR_8
 44309  008604  6F63               	movwf	(strcpy@from+1)& (0+255),b
 44310  008606  EC8E  F04B         	call	_strcpy	;wreg free
 44311                           
 44312                           ;segment.c: 41: _delay((unsigned long)((500)*(20000000/4000.0)));
 44313  00860A  0E0D               	movlw	13
 44314  00860C  0100               	movlb	0	; () banked
 44315  00860E  6F67               	movwf	(??_displayTest+1)& (0+255),b
 44316  008610  0EAF               	movlw	175
 44317  008612  6F66               	movwf	??_displayTest& (0+255),b
 44318  008614  0EB6               	movlw	182
 44319  008616                     u67197:
 44320  008616  2EE8               	decfsz	wreg,f,c
 44321  008618  D7FE               	bra	u67197
 44322  00861A  2F66               	decfsz	??_displayTest& (0+255),f,b
 44323  00861C  D7FC               	bra	u67197
 44324  00861E  2F67               	decfsz	(??_displayTest+1)& (0+255),f,b
 44325  008620  D7FA               	bra	u67197
 44326  008622  F000               	nop	
 44327                           
 44328                           ;segment.c: 43: DISPLAY_MODE = 0;
 44329  008624  0E00               	movlw	0
 44330  008626  0100               	movlb	0	; () banked
 44331  008628  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 44332                           
 44333                           ; BSR set to: 0
 44334                           ;segment.c: 44: DIGIT_MODE = 0;
 44335  00862A  0E00               	movlw	0
 44336  00862C  6E3A               	movwf	_DIGIT_MODE,c
 44337                           
 44338                           ; BSR set to: 0
 44339                           ;segment.c: 45: number_to_display = 8888;
 44340  00862E  0E22               	movlw	34
 44341  008630  6E4C               	movwf	_number_to_display+1,c
 44342  008632  0EB8               	movlw	184
 44343  008634  6E4B               	movwf	_number_to_display,c
 44344                           
 44345                           ; BSR set to: 0
 44346                           ;segment.c: 46: light_decimal_points = 1;
 44347  008636  8006               	bsf	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 44348                           
 44349                           ; BSR set to: 0
 44350                           ;segment.c: 47: _delay((unsigned long)((1000)*(20000000/4000.0)));
 44351  008638  0E1A               	movlw	26
 44352  00863A  0100               	movlb	0	; () banked
 44353  00863C  6F67               	movwf	(??_displayTest+1)& (0+255),b
 44354  00863E  0E5E               	movlw	94
 44355  008640  6F66               	movwf	??_displayTest& (0+255),b
 44356  008642  0E6E               	movlw	110
 44357  008644                     u67207:
 44358  008644  2EE8               	decfsz	wreg,f,c
 44359  008646  D7FE               	bra	u67207
 44360  008648  2F66               	decfsz	??_displayTest& (0+255),f,b
 44361  00864A  D7FC               	bra	u67207
 44362  00864C  2F67               	decfsz	(??_displayTest+1)& (0+255),f,b
 44363  00864E  D7FA               	bra	u67207
 44364  008650  F000               	nop	
 44365                           
 44366                           ;segment.c: 48: light_decimal_points = 0;
 44367  008652  9006               	bcf	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 44368                           
 44369                           ;segment.c: 50: DISPLAY_MODE = 1;
 44370  008654  0E01               	movlw	1
 44371  008656  0100               	movlb	0	; () banked
 44372  008658  6FEE               	movwf	_DISPLAY_MODE& (0+255),b
 44373                           
 44374                           ; BSR set to: 0
 44375                           ;segment.c: 51: strcpy(string_to_display,"    ");
 44376  00865A  0EF8               	movlw	low _string_to_display
 44377  00865C  6F60               	movwf	strcpy@to& (0+255),b
 44378  00865E  0E01               	movlw	high _string_to_display
 44379  008660  6F61               	movwf	(strcpy@to+1)& (0+255),b
 44380  008662  0E70               	movlw	low (STR_10+12)
 44381  008664  6F62               	movwf	strcpy@from& (0+255),b
 44382  008666  0EFD               	movlw	high (STR_10+12)
 44383  008668  6F63               	movwf	(strcpy@from+1)& (0+255),b
 44384  00866A  EC8E  F04B         	call	_strcpy	;wreg free
 44385  00866E  0012               	return		;funcret
 44386  008670                     __end_of_displayTest:
 44387                           	opt stack 0
 44388                           tblptru	equ	0xFF8
 44389                           tblptrh	equ	0xFF7
 44390                           tblptrl	equ	0xFF6
 44391                           tablat	equ	0xFF5
 44392                           prodh	equ	0xFF4
 44393                           prodl	equ	0xFF3
 44394                           intcon	equ	0xFF2
 44395                           intcon2	equ	0xFF1
 44396                           indf0	equ	0xFEF
 44397                           postinc0	equ	0xFEE
 44398                           postdec0	equ	0xFED
 44399                           fsr0h	equ	0xFEA
 44400                           fsr0l	equ	0xFE9
 44401                           wreg	equ	0xFE8
 44402                           postinc1	equ	0xFE6
 44403                           postdec1	equ	0xFE5
 44404                           plusw1	equ	0xFE3
 44405                           fsr1h	equ	0xFE2
 44406                           fsr1l	equ	0xFE1
 44407                           indf2	equ	0xFDF
 44408                           postinc2	equ	0xFDE
 44409                           postdec2	equ	0xFDD
 44410                           plusw2	equ	0xFDB
 44411                           fsr2h	equ	0xFDA
 44412                           fsr2l	equ	0xFD9
 44413                           status	equ	0xFD8
 44414                           
 44415 ;; *************** function _strcpy *****************
 44416 ;; Defined at:
 44417 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
 44418 ;; Parameters:    Size  Location     Type
 44419 ;;  to              2    0[BANK0 ] PTR unsigned char 
 44420 ;;		 -> string_to_display(5), 
 44421 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 44422 ;;		 -> STR_61(5), STR_59(5), STR_56(5), STR_54(5), 
 44423 ;;		 -> STR_44(5), STR_43(5), STR_41(5), STR_9(5), 
 44424 ;;		 -> STR_8(5), STR_7(5), STR_6(5), STR_5(5), 
 44425 ;;		 -> STR_4(5), STR_3(5), STR_2(5), STR_1(5), 
 44426 ;; Auto vars:     Size  Location     Type
 44427 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 44428 ;;		 -> string_to_display(5), 
 44429 ;; Return value:  Size  Location     Type
 44430 ;;                  2    0[BANK0 ] PTR unsigned char 
 44431 ;; Registers used:
 44432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 44433 ;; Tracked objects:
 44434 ;;		On entry : 0/0
 44435 ;;		On exit  : 0/0
 44436 ;;		Unchanged: 0/0
 44437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44438 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44439 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44441 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44442 ;;Total ram usage:        6 bytes
 44443 ;; Hardware stack levels used:    1
 44444 ;; Hardware stack levels required when called:    5
 44445 ;; This function calls:
 44446 ;;		Nothing
 44447 ;; This function is called by:
 44448 ;;		_doTheLatch
 44449 ;;		_doTheUnLatch
 44450 ;;		_processOctave
 44451 ;;		_displayTest
 44452 ;;		_Function_H_1
 44453 ;;		_Function_H_6_2
 44454 ;;		_Function_H_7
 44455 ;; This function uses a non-reentrant model
 44456 ;;
 44457                           
 44458                           	psect	text135
 44459  00971C                     __ptext135:
 44460                           	opt stack 0
 44461  00971C                     _strcpy:
 44462                           	opt stack 20
 44463                           
 44464                           ;incstack = 0
 44465  00971C  C060  F064         	movff	strcpy@to,strcpy@cp
 44466  009720  C061  F065         	movff	strcpy@to+1,strcpy@cp+1
 44467  009724  D005               	goto	l6197
 44468  009726  0100               	movlb	0	; () banked
 44469  009728  4B64               	infsnz	strcpy@cp& (0+255),f,b
 44470  00972A  2B65               	incf	(strcpy@cp+1)& (0+255),f,b
 44471  00972C  4B62               	infsnz	strcpy@from& (0+255),f,b
 44472  00972E  2B63               	incf	(strcpy@from+1)& (0+255),f,b
 44473  009730                     l6197:
 44474                           
 44475                           ; BSR set to: 0
 44476  009730  C062  FFF6         	movff	strcpy@from,tblptrl
 44477  009734  C063  FFF7         	movff	strcpy@from+1,tblptrh
 44478  009738                     	if	0	;tblptru may be non-zero
 44479  009738                     	endif
 44480  009738                     	if	0	;tblptru may be non-zero
 44481  009738                     	endif
 44482  009738  C064  FFD9         	movff	strcpy@cp,fsr2l
 44483  00973C  C065  FFDA         	movff	strcpy@cp+1,fsr2h
 44484  009740  0008               	tblrd		*
 44485  009742  CFF5 FFDF          	movff	tablat,indf2
 44486  009746  50DF               	movf	indf2,w,c
 44487  009748  B4D8               	btfsc	status,2,c
 44488  00974A  0012               	return	
 44489  00974C  D7EC               	goto	l6198
 44490  00974E                     __end_of_strcpy:
 44491                           	opt stack 0
 44492                           tblptru	equ	0xFF8
 44493                           tblptrh	equ	0xFF7
 44494                           tblptrl	equ	0xFF6
 44495                           tablat	equ	0xFF5
 44496                           prodh	equ	0xFF4
 44497                           prodl	equ	0xFF3
 44498                           intcon	equ	0xFF2
 44499                           intcon2	equ	0xFF1
 44500                           indf0	equ	0xFEF
 44501                           postinc0	equ	0xFEE
 44502                           postdec0	equ	0xFED
 44503                           fsr0h	equ	0xFEA
 44504                           fsr0l	equ	0xFE9
 44505                           wreg	equ	0xFE8
 44506                           postinc1	equ	0xFE6
 44507                           postdec1	equ	0xFE5
 44508                           plusw1	equ	0xFE3
 44509                           fsr1h	equ	0xFE2
 44510                           fsr1l	equ	0xFE1
 44511                           indf2	equ	0xFDF
 44512                           postinc2	equ	0xFDE
 44513                           postdec2	equ	0xFDD
 44514                           plusw2	equ	0xFDB
 44515                           fsr2h	equ	0xFDA
 44516                           fsr2l	equ	0xFD9
 44517                           status	equ	0xFD8
 44518                           
 44519 ;; *************** function _Lcd_Start *****************
 44520 ;; Defined at:
 44521 ;;		line 94 in file "lcd.c"
 44522 ;; Parameters:    Size  Location     Type
 44523 ;;		None
 44524 ;; Auto vars:     Size  Location     Type
 44525 ;;  i               2    4[BANK0 ] int 
 44526 ;; Return value:  Size  Location     Type
 44527 ;;                  1    wreg      void 
 44528 ;; Registers used:
 44529 ;;		wreg, status,2, status,0, cstack
 44530 ;; Tracked objects:
 44531 ;;		On entry : 0/0
 44532 ;;		On exit  : 0/0
 44533 ;;		Unchanged: 0/0
 44534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44536 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44537 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44538 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44539 ;;Total ram usage:        3 bytes
 44540 ;; Hardware stack levels used:    1
 44541 ;; Hardware stack levels required when called:    7
 44542 ;; This function calls:
 44543 ;;		_Lcd_Cmd
 44544 ;;		_Lcd_SetBit
 44545 ;; This function is called by:
 44546 ;;		_main
 44547 ;; This function uses a non-reentrant model
 44548 ;;
 44549                           
 44550                           	psect	text136
 44551  008350                     __ptext136:
 44552                           	opt stack 0
 44553  008350                     _Lcd_Start:
 44554                           	opt stack 23
 44555                           
 44556                           ;lcd.c: 96: Lcd_SetBit(0x00);
 44557                           
 44558                           ;incstack = 0
 44559  008350  0E00               	movlw	0
 44560  008352  ECBF  F04B         	call	_Lcd_SetBit
 44561                           
 44562                           ;lcd.c: 97: for(int i=1065244; i<=0; i--) __nop();
 44563  008356  0E41               	movlw	65
 44564  008358  0100               	movlb	0	; () banked
 44565  00835A  6F65               	movwf	(Lcd_Start@i+1)& (0+255),b
 44566  00835C  0E1C               	movlw	28
 44567  00835E  6F64               	movwf	Lcd_Start@i& (0+255),b
 44568  008360                     l33155:
 44569                           
 44570                           ; BSR set to: 0
 44571  008360  BF65               	btfsc	(Lcd_Start@i+1)& (0+255),7,b
 44572  008362  D005               	goto	l46
 44573  008364  5165               	movf	(Lcd_Start@i+1)& (0+255),w,b
 44574  008366  E109               	bnz	l33163
 44575  008368  0564               	decf	Lcd_Start@i& (0+255),w,b
 44576  00836A  B0D8               	btfsc	status,0,c
 44577  00836C  D006               	goto	u60230
 44578  00836E                     l46:
 44579                           
 44580                           ; BSR set to: 0
 44581  00836E  F000               	nop	
 44582  008370  0100               	movlb	0	; () banked
 44583  008372  0764               	decf	Lcd_Start@i& (0+255),f,b
 44584  008374  A0D8               	btfss	status,0,c
 44585  008376  0765               	decf	(Lcd_Start@i+1)& (0+255),f,b
 44586  008378  D7F3               	goto	l33155
 44587  00837A                     u60230:
 44588  00837A                     l33163:
 44589                           
 44590                           ; BSR set to: 0
 44591                           ;lcd.c: 98: Lcd_Cmd(0x03);
 44592  00837A  0E03               	movlw	3
 44593  00837C  EC3E  F04C         	call	_Lcd_Cmd
 44594                           
 44595                           ;lcd.c: 99: _delay((unsigned long)((5)*(20000000/4000.0)));
 44596  008380  0E21               	movlw	33
 44597  008382  0100               	movlb	0	; () banked
 44598  008384  6F63               	movwf	??_Lcd_Start& (0+255),b
 44599  008386  0E76               	movlw	118
 44600  008388                     u67217:
 44601  008388  2EE8               	decfsz	wreg,f,c
 44602  00838A  D7FE               	bra	u67217
 44603  00838C  2F63               	decfsz	??_Lcd_Start& (0+255),f,b
 44604  00838E  D7FC               	bra	u67217
 44605  008390  F000               	nop	
 44606                           
 44607                           ;lcd.c: 100: Lcd_Cmd(0x03);
 44608  008392  0E03               	movlw	3
 44609  008394  EC3E  F04C         	call	_Lcd_Cmd
 44610                           
 44611                           ;lcd.c: 101: _delay((unsigned long)((11)*(20000000/4000.0)));
 44612  008398  0E48               	movlw	72
 44613  00839A  0100               	movlb	0	; () banked
 44614  00839C  6F63               	movwf	??_Lcd_Start& (0+255),b
 44615  00839E  0E6C               	movlw	108
 44616  0083A0                     u67227:
 44617  0083A0  2EE8               	decfsz	wreg,f,c
 44618  0083A2  D7FE               	bra	u67227
 44619  0083A4  2F63               	decfsz	??_Lcd_Start& (0+255),f,b
 44620  0083A6  D7FC               	bra	u67227
 44621  0083A8  F000               	nop	
 44622                           
 44623                           ;lcd.c: 102: Lcd_Cmd(0x03);
 44624  0083AA  0E03               	movlw	3
 44625  0083AC  EC3E  F04C         	call	_Lcd_Cmd
 44626                           
 44627                           ;lcd.c: 103: Lcd_Cmd(0x02);
 44628  0083B0  0E02               	movlw	2
 44629  0083B2  EC3E  F04C         	call	_Lcd_Cmd
 44630                           
 44631                           ;lcd.c: 104: Lcd_Cmd(0x02);
 44632  0083B6  0E02               	movlw	2
 44633  0083B8  EC3E  F04C         	call	_Lcd_Cmd
 44634                           
 44635                           ;lcd.c: 105: Lcd_Cmd(0x08);
 44636  0083BC  0E08               	movlw	8
 44637  0083BE  EC3E  F04C         	call	_Lcd_Cmd
 44638                           
 44639                           ;lcd.c: 106: Lcd_Cmd(0x00);
 44640  0083C2  0E00               	movlw	0
 44641  0083C4  EC3E  F04C         	call	_Lcd_Cmd
 44642                           
 44643                           ;lcd.c: 107: Lcd_Cmd(0x0C);
 44644  0083C8  0E0C               	movlw	12
 44645  0083CA  EC3E  F04C         	call	_Lcd_Cmd
 44646                           
 44647                           ;lcd.c: 108: Lcd_Cmd(0x00);
 44648  0083CE  0E00               	movlw	0
 44649  0083D0  EC3E  F04C         	call	_Lcd_Cmd
 44650                           
 44651                           ;lcd.c: 109: Lcd_Cmd(0x06);
 44652  0083D4  0E06               	movlw	6
 44653  0083D6  EC3E  F04C         	call	_Lcd_Cmd
 44654  0083DA  0012               	return		;funcret
 44655  0083DC                     __end_of_Lcd_Start:
 44656                           	opt stack 0
 44657                           tblptru	equ	0xFF8
 44658                           tblptrh	equ	0xFF7
 44659                           tblptrl	equ	0xFF6
 44660                           tablat	equ	0xFF5
 44661                           prodh	equ	0xFF4
 44662                           prodl	equ	0xFF3
 44663                           intcon	equ	0xFF2
 44664                           intcon2	equ	0xFF1
 44665                           indf0	equ	0xFEF
 44666                           postinc0	equ	0xFEE
 44667                           postdec0	equ	0xFED
 44668                           fsr0h	equ	0xFEA
 44669                           fsr0l	equ	0xFE9
 44670                           wreg	equ	0xFE8
 44671                           postinc1	equ	0xFE6
 44672                           postdec1	equ	0xFE5
 44673                           plusw1	equ	0xFE3
 44674                           fsr1h	equ	0xFE2
 44675                           fsr1l	equ	0xFE1
 44676                           indf2	equ	0xFDF
 44677                           postinc2	equ	0xFDE
 44678                           postdec2	equ	0xFDD
 44679                           plusw2	equ	0xFDB
 44680                           fsr2h	equ	0xFDA
 44681                           fsr2l	equ	0xFD9
 44682                           status	equ	0xFD8
 44683                           
 44684 ;; *************** function _Lcd_Cmd *****************
 44685 ;; Defined at:
 44686 ;;		line 44 in file "lcd.c"
 44687 ;; Parameters:    Size  Location     Type
 44688 ;;  a               1    wreg     unsigned char 
 44689 ;; Auto vars:     Size  Location     Type
 44690 ;;  a               1    2[BANK0 ] unsigned char 
 44691 ;; Return value:  Size  Location     Type
 44692 ;;                  1    wreg      void 
 44693 ;; Registers used:
 44694 ;;		wreg, status,2, cstack
 44695 ;; Tracked objects:
 44696 ;;		On entry : 0/0
 44697 ;;		On exit  : 0/0
 44698 ;;		Unchanged: 0/0
 44699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44701 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44702 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44703 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44704 ;;Total ram usage:        2 bytes
 44705 ;; Hardware stack levels used:    1
 44706 ;; Hardware stack levels required when called:    6
 44707 ;; This function calls:
 44708 ;;		_Lcd_SetBit
 44709 ;; This function is called by:
 44710 ;;		_Lcd_Clear
 44711 ;;		_Lcd_Set_Cursor
 44712 ;;		_Lcd_Start
 44713 ;; This function uses a non-reentrant model
 44714 ;;
 44715                           
 44716                           	psect	text137
 44717  00987C                     __ptext137:
 44718                           	opt stack 0
 44719  00987C                     _Lcd_Cmd:
 44720                           	opt stack 20
 44721                           
 44722                           ;incstack = 0
 44723                           ;Lcd_Cmd@a stored from wreg
 44724  00987C  0100               	movlb	0	; () banked
 44725  00987E  6F62               	movwf	Lcd_Cmd@a& (0+255),b
 44726                           
 44727                           ;lcd.c: 46: RE0 = 0;
 44728  009880  9084               	bcf	3972,0,c	;volatile
 44729                           
 44730                           ;lcd.c: 47: Lcd_SetBit(a);
 44731  009882  0100               	movlb	0	; () banked
 44732  009884  5162               	movf	Lcd_Cmd@a& (0+255),w,b
 44733  009886  ECBF  F04B         	call	_Lcd_SetBit
 44734                           
 44735                           ;lcd.c: 48: RE1 = 1;
 44736  00988A  8284               	bsf	3972,1,c	;volatile
 44737                           
 44738                           ;lcd.c: 49: _delay((unsigned long)((4)*(20000000/4000.0)));
 44739  00988C  0E1A               	movlw	26
 44740  00988E  0100               	movlb	0	; () banked
 44741  009890  6F61               	movwf	??_Lcd_Cmd& (0+255),b
 44742  009892  0EF8               	movlw	248
 44743  009894                     u67237:
 44744  009894  2EE8               	decfsz	wreg,f,c
 44745  009896  D7FE               	bra	u67237
 44746  009898  2F61               	decfsz	??_Lcd_Cmd& (0+255),f,b
 44747  00989A  D7FC               	bra	u67237
 44748  00989C  F000               	nop	
 44749                           
 44750                           ;lcd.c: 50: RE1 = 0;
 44751  00989E  9284               	bcf	3972,1,c	;volatile
 44752  0098A0  0012               	return		;funcret
 44753  0098A2                     __end_of_Lcd_Cmd:
 44754                           	opt stack 0
 44755                           tblptru	equ	0xFF8
 44756                           tblptrh	equ	0xFF7
 44757                           tblptrl	equ	0xFF6
 44758                           tablat	equ	0xFF5
 44759                           prodh	equ	0xFF4
 44760                           prodl	equ	0xFF3
 44761                           intcon	equ	0xFF2
 44762                           intcon2	equ	0xFF1
 44763                           indf0	equ	0xFEF
 44764                           postinc0	equ	0xFEE
 44765                           postdec0	equ	0xFED
 44766                           fsr0h	equ	0xFEA
 44767                           fsr0l	equ	0xFE9
 44768                           wreg	equ	0xFE8
 44769                           postinc1	equ	0xFE6
 44770                           postdec1	equ	0xFE5
 44771                           plusw1	equ	0xFE3
 44772                           fsr1h	equ	0xFE2
 44773                           fsr1l	equ	0xFE1
 44774                           indf2	equ	0xFDF
 44775                           postinc2	equ	0xFDE
 44776                           postdec2	equ	0xFDD
 44777                           plusw2	equ	0xFDB
 44778                           fsr2h	equ	0xFDA
 44779                           fsr2l	equ	0xFD9
 44780                           status	equ	0xFD8
 44781                           
 44782 ;; *************** function _Lcd_SetBit *****************
 44783 ;; Defined at:
 44784 ;;		line 21 in file "lcd.c"
 44785 ;; Parameters:    Size  Location     Type
 44786 ;;  data_bit        1    wreg     unsigned char 
 44787 ;; Auto vars:     Size  Location     Type
 44788 ;;  data_bit        1    0[BANK0 ] unsigned char 
 44789 ;; Return value:  Size  Location     Type
 44790 ;;                  1    wreg      void 
 44791 ;; Registers used:
 44792 ;;		wreg
 44793 ;; Tracked objects:
 44794 ;;		On entry : 0/0
 44795 ;;		On exit  : 0/0
 44796 ;;		Unchanged: 0/0
 44797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44799 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44801 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44802 ;;Total ram usage:        1 bytes
 44803 ;; Hardware stack levels used:    1
 44804 ;; Hardware stack levels required when called:    5
 44805 ;; This function calls:
 44806 ;;		Nothing
 44807 ;; This function is called by:
 44808 ;;		_Lcd_Cmd
 44809 ;;		_Lcd_Start
 44810 ;;		_Lcd_Print_Char
 44811 ;; This function uses a non-reentrant model
 44812 ;;
 44813                           
 44814                           	psect	text138
 44815  00977E                     __ptext138:
 44816                           	opt stack 0
 44817  00977E                     _Lcd_SetBit:
 44818                           	opt stack 20
 44819                           
 44820                           ;incstack = 0
 44821                           ;Lcd_SetBit@data_bit stored from wreg
 44822  00977E  0100               	movlb	0	; () banked
 44823  009780  6F60               	movwf	Lcd_SetBit@data_bit& (0+255),b
 44824                           
 44825                           ;lcd.c: 23: if(data_bit& 1)
 44826  009782  0100               	movlb	0	; () banked
 44827  009784  A160               	btfss	Lcd_SetBit@data_bit& (0+255),0,b
 44828  009786  D002               	goto	l23
 44829                           
 44830                           ; BSR set to: 0
 44831                           ;lcd.c: 24: RD4 = 1;
 44832  009788  8883               	bsf	3971,4,c	;volatile
 44833  00978A  D001               	goto	l24
 44834  00978C                     l23:
 44835                           
 44836                           ; BSR set to: 0
 44837                           ;lcd.c: 25: else
 44838                           ;lcd.c: 26: RD4 = 0;
 44839  00978C  9883               	bcf	3971,4,c	;volatile
 44840  00978E                     l24:
 44841                           
 44842                           ; BSR set to: 0
 44843                           ;lcd.c: 28: if(data_bit& 2)
 44844                           
 44845                           ; BSR set to: 0
 44846  00978E  A360               	btfss	Lcd_SetBit@data_bit& (0+255),1,b
 44847  009790  D002               	goto	l25
 44848                           
 44849                           ; BSR set to: 0
 44850                           ;lcd.c: 29: RD5 = 1;
 44851  009792  8A83               	bsf	3971,5,c	;volatile
 44852  009794  D001               	goto	l26
 44853  009796                     l25:
 44854                           
 44855                           ; BSR set to: 0
 44856                           ;lcd.c: 30: else
 44857                           ;lcd.c: 31: RD5 = 0;
 44858  009796  9A83               	bcf	3971,5,c	;volatile
 44859  009798                     l26:
 44860                           
 44861                           ; BSR set to: 0
 44862                           ;lcd.c: 33: if(data_bit& 4)
 44863                           
 44864                           ; BSR set to: 0
 44865  009798  A560               	btfss	Lcd_SetBit@data_bit& (0+255),2,b
 44866  00979A  D002               	goto	l27
 44867                           
 44868                           ; BSR set to: 0
 44869                           ;lcd.c: 34: RD6 = 1;
 44870  00979C  8C83               	bsf	3971,6,c	;volatile
 44871  00979E  D001               	goto	l28
 44872  0097A0                     l27:
 44873                           
 44874                           ; BSR set to: 0
 44875                           ;lcd.c: 35: else
 44876                           ;lcd.c: 36: RD6 = 0;
 44877  0097A0  9C83               	bcf	3971,6,c	;volatile
 44878  0097A2                     l28:
 44879                           
 44880                           ; BSR set to: 0
 44881                           ;lcd.c: 38: if(data_bit& 8)
 44882                           
 44883                           ; BSR set to: 0
 44884  0097A2  A760               	btfss	Lcd_SetBit@data_bit& (0+255),3,b
 44885  0097A4  D002               	goto	l29
 44886                           
 44887                           ; BSR set to: 0
 44888                           ;lcd.c: 39: RD7 = 1;
 44889  0097A6  8E83               	bsf	3971,7,c	;volatile
 44890  0097A8  0012               	return	
 44891  0097AA                     l29:
 44892                           
 44893                           ; BSR set to: 0
 44894                           ;lcd.c: 40: else
 44895                           ;lcd.c: 41: RD7 = 0;
 44896  0097AA  9E83               	bcf	3971,7,c	;volatile
 44897  0097AC  0012               	return	
 44898  0097AE                     __end_of_Lcd_SetBit:
 44899                           	opt stack 0
 44900                           tblptru	equ	0xFF8
 44901                           tblptrh	equ	0xFF7
 44902                           tblptrl	equ	0xFF6
 44903                           tablat	equ	0xFF5
 44904                           prodh	equ	0xFF4
 44905                           prodl	equ	0xFF3
 44906                           intcon	equ	0xFF2
 44907                           intcon2	equ	0xFF1
 44908                           indf0	equ	0xFEF
 44909                           postinc0	equ	0xFEE
 44910                           postdec0	equ	0xFED
 44911                           fsr0h	equ	0xFEA
 44912                           fsr0l	equ	0xFE9
 44913                           wreg	equ	0xFE8
 44914                           postinc1	equ	0xFE6
 44915                           postdec1	equ	0xFE5
 44916                           plusw1	equ	0xFE3
 44917                           fsr1h	equ	0xFE2
 44918                           fsr1l	equ	0xFE1
 44919                           indf2	equ	0xFDF
 44920                           postinc2	equ	0xFDE
 44921                           postdec2	equ	0xFDD
 44922                           plusw2	equ	0xFDB
 44923                           fsr2h	equ	0xFDA
 44924                           fsr2l	equ	0xFD9
 44925                           status	equ	0xFD8
 44926                           
 44927 ;; *************** function _ADC_Initialize *****************
 44928 ;; Defined at:
 44929 ;;		line 22 in file "adc.c"
 44930 ;; Parameters:    Size  Location     Type
 44931 ;;		None
 44932 ;; Auto vars:     Size  Location     Type
 44933 ;;		None
 44934 ;; Return value:  Size  Location     Type
 44935 ;;                  1    wreg      void 
 44936 ;; Registers used:
 44937 ;;		wreg, status,2
 44938 ;; Tracked objects:
 44939 ;;		On entry : 0/0
 44940 ;;		On exit  : 0/0
 44941 ;;		Unchanged: 0/0
 44942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44947 ;;Total ram usage:        0 bytes
 44948 ;; Hardware stack levels used:    1
 44949 ;; Hardware stack levels required when called:    5
 44950 ;; This function calls:
 44951 ;;		Nothing
 44952 ;; This function is called by:
 44953 ;;		_main
 44954 ;; This function uses a non-reentrant model
 44955 ;;
 44956                           
 44957                           	psect	text139
 44958  0099B0                     __ptext139:
 44959                           	opt stack 0
 44960  0099B0                     _ADC_Initialize:
 44961                           	opt stack 25
 44962                           
 44963                           ;adc.c: 24: CMCON = 0x7;
 44964                           
 44965                           ; BSR set to: 0
 44966                           ;incstack = 0
 44967  0099B0  0E07               	movlw	7
 44968  0099B2  6EB4               	movwf	4020,c	;volatile
 44969                           
 44970                           ;adc.c: 25: ADCON0 = 0b00000000;
 44971  0099B4  0E00               	movlw	0
 44972  0099B6  6EC2               	movwf	4034,c	;volatile
 44973                           
 44974                           ;adc.c: 26: ADCON1 = 0b00001110;
 44975  0099B8  0E0E               	movlw	14
 44976  0099BA  6EC1               	movwf	4033,c	;volatile
 44977                           
 44978                           ;adc.c: 27: ADCON2 = 0b10000010;
 44979  0099BC  0E82               	movlw	130
 44980  0099BE  6EC0               	movwf	4032,c	;volatile
 44981                           
 44982                           ;adc.c: 31: ADON = 1;
 44983  0099C0  80C2               	bsf	4034,0,c	;volatile
 44984  0099C2  0012               	return		;funcret
 44985  0099C4                     __end_of_ADC_Initialize:
 44986                           	opt stack 0
 44987                           tblptru	equ	0xFF8
 44988                           tblptrh	equ	0xFF7
 44989                           tblptrl	equ	0xFF6
 44990                           tablat	equ	0xFF5
 44991                           prodh	equ	0xFF4
 44992                           prodl	equ	0xFF3
 44993                           intcon	equ	0xFF2
 44994                           intcon2	equ	0xFF1
 44995                           indf0	equ	0xFEF
 44996                           postinc0	equ	0xFEE
 44997                           postdec0	equ	0xFED
 44998                           fsr0h	equ	0xFEA
 44999                           fsr0l	equ	0xFE9
 45000                           wreg	equ	0xFE8
 45001                           postinc1	equ	0xFE6
 45002                           postdec1	equ	0xFE5
 45003                           plusw1	equ	0xFE3
 45004                           fsr1h	equ	0xFE2
 45005                           fsr1l	equ	0xFE1
 45006                           indf2	equ	0xFDF
 45007                           postinc2	equ	0xFDE
 45008                           postdec2	equ	0xFDD
 45009                           plusw2	equ	0xFDB
 45010                           fsr2h	equ	0xFDA
 45011                           fsr2l	equ	0xFD9
 45012                           status	equ	0xFD8
 45013                           
 45014 ;; *************** function _ISR *****************
 45015 ;; Defined at:
 45016 ;;		line 380 in file "main.c"
 45017 ;; Parameters:    Size  Location     Type
 45018 ;;		None
 45019 ;; Auto vars:     Size  Location     Type
 45020 ;;		None
 45021 ;; Return value:  Size  Location     Type
 45022 ;;                  1    wreg      void 
 45023 ;; Registers used:
 45024 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 45025 ;; Tracked objects:
 45026 ;;		On entry : 0/0
 45027 ;;		On exit  : 0/0
 45028 ;;		Unchanged: 0/0
 45029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 45030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45032 ;;      Temps:         24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45033 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45034 ;;Total ram usage:       24 bytes
 45035 ;; Hardware stack levels used:    1
 45036 ;; Hardware stack levels required when called:    4
 45037 ;; This function calls:
 45038 ;;		___lbmod
 45039 ;;		_display
 45040 ;;		_encoderInputsBuxton
 45041 ;;		_playArpeggio
 45042 ;; This function is called by:
 45043 ;;		Interrupt level 2
 45044 ;; This function uses a non-reentrant model
 45045 ;;
 45046                           
 45047                           	psect	intcode
 45048  000008                     __pintcode:
 45049                           	opt stack 0
 45050  000008                     _ISR:
 45051                           	opt stack 11
 45052                           
 45053                           ;incstack = 0
 45054  000008  EDCD  F029         	call	int_func,f	;refresh shadow registers
 45055                           tblptru	equ	0xFF8
 45056                           tblptrh	equ	0xFF7
 45057                           tblptrl	equ	0xFF6
 45058                           tablat	equ	0xFF5
 45059                           prodh	equ	0xFF4
 45060                           prodl	equ	0xFF3
 45061                           intcon	equ	0xFF2
 45062                           intcon2	equ	0xFF1
 45063                           indf0	equ	0xFEF
 45064                           postinc0	equ	0xFEE
 45065                           postdec0	equ	0xFED
 45066                           fsr0h	equ	0xFEA
 45067                           fsr0l	equ	0xFE9
 45068                           wreg	equ	0xFE8
 45069                           postinc1	equ	0xFE6
 45070                           postdec1	equ	0xFE5
 45071                           plusw1	equ	0xFE3
 45072                           fsr1h	equ	0xFE2
 45073                           fsr1l	equ	0xFE1
 45074                           indf2	equ	0xFDF
 45075                           postinc2	equ	0xFDE
 45076                           postdec2	equ	0xFDD
 45077                           plusw2	equ	0xFDB
 45078                           fsr2h	equ	0xFDA
 45079                           fsr2l	equ	0xFD9
 45080                           status	equ	0xFD8
 45081                           
 45082                           	psect	intcode_body
 45083  00539A                     __pintcode_body:
 45084                           	opt stack 11
 45085  00539A                     int_func:
 45086                           	opt stack 11
 45087  00539A  0006               	pop		; remove dummy address from shadow register refresh
 45088  00539C  CFE9 F013          	movff	fsr0l,??_ISR+1
 45089  0053A0  CFEA F014          	movff	fsr0h,??_ISR+2
 45090  0053A4  CFE1 F015          	movff	fsr1l,??_ISR+3
 45091  0053A8  CFE2 F016          	movff	fsr1h,??_ISR+4
 45092  0053AC  CFD9 F017          	movff	fsr2l,??_ISR+5
 45093  0053B0  CFDA F018          	movff	fsr2h,??_ISR+6
 45094  0053B4  CFF3 F019          	movff	prodl,??_ISR+7
 45095  0053B8  CFF4 F01A          	movff	prodh,??_ISR+8
 45096  0053BC  CFF6 F01B          	movff	tblptrl,??_ISR+9
 45097  0053C0  CFF7 F01C          	movff	tblptrh,??_ISR+10
 45098  0053C4  CFF8 F01D          	movff	tblptru,??_ISR+11
 45099  0053C8  CFF5 F01E          	movff	tablat,??_ISR+12
 45100  0053CC  C03F  F01F         	movff	btemp,??_ISR+13
 45101  0053D0  C040  F020         	movff	btemp+1,??_ISR+14
 45102  0053D4  C041  F021         	movff	btemp+2,??_ISR+15
 45103  0053D8  C042  F022         	movff	btemp+3,??_ISR+16
 45104  0053DC  C043  F023         	movff	btemp+4,??_ISR+17
 45105  0053E0  C044  F024         	movff	btemp+5,??_ISR+18
 45106  0053E4  C045  F025         	movff	btemp+6,??_ISR+19
 45107  0053E8  C046  F026         	movff	btemp+7,??_ISR+20
 45108  0053EC  C048  F027         	movff	btemp+9,??_ISR+21
 45109  0053F0  C049  F028         	movff	btemp+10,??_ISR+22
 45110  0053F4  C04A  F029         	movff	btemp+11,??_ISR+23
 45111  0053F8  EE16  F0B2         	lfsr	1,___inthi_sp
 45112                           
 45113                           ;main.c: 383: if(TMR2IF==1){
 45114  0053FC  A29E               	btfss	3998,1,c	;volatile
 45115  0053FE  D005               	goto	i2l4994
 45116                           
 45117                           ;main.c: 384: display();
 45118  005400  ECB7  F04C         	call	_display	;wreg free
 45119                           
 45120                           ;main.c: 386: TMR2 = 0x83;
 45121  005404  0E83               	movlw	131
 45122  005406  6ECC               	movwf	4044,c	;volatile
 45123                           
 45124                           ;main.c: 387: TMR2IF = 0;
 45125  005408  929E               	bcf	3998,1,c	;volatile
 45126  00540A                     i2l4994:
 45127                           
 45128                           ;main.c: 388: }
 45129                           ;main.c: 391: if(TMR1IF==1){
 45130  00540A  A09E               	btfss	3998,0,c	;volatile
 45131  00540C  D00C               	goto	i2l4995
 45132                           
 45133                           ;main.c: 392: count_ISR++;
 45134  00540E  0E01               	movlw	1
 45135  005410  0102               	movlb	2	; () banked
 45136  005412  2764               	addwf	_count_ISR& (0+255),f,b
 45137  005414  0E00               	movlw	0
 45138  005416  2365               	addwfc	(_count_ISR+1)& (0+255),f,b
 45139  005418  2366               	addwfc	(_count_ISR+2)& (0+255),f,b
 45140  00541A  2367               	addwfc	(_count_ISR+3)& (0+255),f,b
 45141                           
 45142                           ; BSR set to: 2
 45143                           ;main.c: 393: TMR1 = 0xEC78;
 45144  00541C  0EEC               	movlw	236
 45145  00541E  6ECF               	movwf	4047,c	;volatile
 45146  005420  0E78               	movlw	120
 45147  005422  6ECE               	movwf	4046,c	;volatile
 45148                           
 45149                           ; BSR set to: 2
 45150                           ;main.c: 394: TMR1IF = 0;
 45151  005424  909E               	bcf	3998,0,c	;volatile
 45152  005426                     i2l4995:
 45153                           
 45154                           ;main.c: 395: }
 45155                           ;main.c: 398: if(INT0IF==1) {
 45156                           
 45157                           ; BSR set to: 2
 45158  005426  A2F2               	btfss	intcon,1,c	;volatile
 45159  005428  D00B               	goto	i2l4996
 45160                           
 45161                           ;main.c: 399: _delay((unsigned long)((10)*(20000000/4000.0)));
 45162  00542A  0E41               	movlw	65
 45163  00542C  6E12               	movwf	??_ISR& (0+255),c
 45164  00542E  0EEE               	movlw	238
 45165  005430                     i2u6724_47:
 45166  005430  2EE8               	decfsz	wreg,f,c
 45167  005432  D7FE               	bra	i2u6724_47
 45168  005434  2E12               	decfsz	??_ISR& (0+255),f,c
 45169  005436  D7FC               	bra	i2u6724_47
 45170  005438  D000               	nop2	
 45171                           
 45172                           ;main.c: 400: if(RB0 == 0){encoder_click = 1;}
 45173  00543A  A081               	btfss	3969,0,c	;volatile
 45174  00543C  8205               	bsf	_encoder_click/(0+8),_encoder_click& (0+7),c
 45175                           
 45176                           ;main.c: 401: INT0IF = 0;
 45177  00543E  92F2               	bcf	intcon,1,c	;volatile
 45178  005440                     i2l4996:
 45179                           
 45180                           ;main.c: 402: }
 45181                           ;main.c: 405: if(RBIF==1) {
 45182  005440  A0F2               	btfss	intcon,0,c	;volatile
 45183  005442  D003               	goto	i2l4998
 45184                           
 45185                           ;main.c: 406: encoderInputsBuxton();
 45186  005444  EC38  F043         	call	_encoderInputsBuxton	;wreg free
 45187                           
 45188                           ;main.c: 408: RBIF = 0;
 45189  005448  90F2               	bcf	intcon,0,c	;volatile
 45190  00544A                     i2l4998:
 45191                           
 45192                           ;main.c: 409: }
 45193                           ;main.c: 413: if(TMR0IF==1) {
 45194  00544A  A4F2               	btfss	intcon,2,c	;volatile
 45195  00544C  D04C               	goto	i2l4999
 45196                           
 45197                           ;main.c: 415: TMR0IE = 0;
 45198  00544E  9AF2               	bcf	intcon,5,c	;volatile
 45199                           
 45200                           ;main.c: 418: if((finishLastNote == 0) && ((TIMER_OVERFLOWS % NOTE_LENGTH_PULSES) == 0))
      +                          {
 45201  005450  BA02               	btfsc	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 45202  005452  D02D               	goto	i2l5004
 45203  005454  504D               	movf	_NOTE_LENGTH_PULSES,w,c
 45204  005456  6EE6               	movwf	postinc1,c
 45205  005458  502E               	movf	_TIMER_OVERFLOWS,w,c
 45206  00545A  6EE6               	movwf	postinc1,c
 45207  00545C  EC61  F041         	call	___lbmod	;wreg free
 45208  005460  503F               	movf	btemp,w,c
 45209  005462  A4D8               	btfss	status,2,c
 45210  005464  D024               	goto	i2l5004
 45211                           
 45212                           ;main.c: 421: if((ARPEGGIO_TYPE == AS_PRESSED) || (ARPEGGIO_TYPE == UP) || (ARPEGGIO_TYP
      +                          E == DOWN) || (ARPEGGIO_TYPE == UP_DOWN) || (ARPEGGIO_TYPE == DOWN_UP)){
 45213  005466  0E06               	movlw	6
 45214  005468  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45215  00546A  B4D8               	btfsc	status,2,c
 45216  00546C  D00D               	goto	i2u6689_40
 45217  00546E  5035               	movf	_ARPEGGIO_TYPE,w,c
 45218  005470  B4D8               	btfsc	status,2,c
 45219  005472  D00A               	goto	i2u6689_40
 45220  005474  0435               	decf	_ARPEGGIO_TYPE,w,c
 45221  005476  B4D8               	btfsc	status,2,c
 45222  005478  D007               	goto	i2u6689_40
 45223  00547A  0E02               	movlw	2
 45224  00547C  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45225  00547E  B4D8               	btfsc	status,2,c
 45226  005480  D003               	goto	i2u6689_40
 45227  005482  0E03               	movlw	3
 45228  005484  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45229  005486  B4D8               	btfsc	status,2,c
 45230  005488                     i2u6689_40:
 45231                           
 45232                           ;main.c: 422: stored_octave = which_octave;
 45233  005488  C032  F031         	movff	_which_octave,_stored_octave
 45234                           
 45235                           ;main.c: 423: }
 45236                           ;main.c: 444: ARPEGGIO_IS_PLAYING = 1;
 45237  00548C  8406               	bsf	_ARPEGGIO_IS_PLAYING/(0+8),_ARPEGGIO_IS_PLAYING& (0+7),c
 45238                           
 45239                           ;main.c: 445: playArpeggio();
 45240  00548E  ECCC  F008         	call	_playArpeggio	;wreg free
 45241                           
 45242                           ;main.c: 446: ARPEGGIO_IS_PLAYING = 0;
 45243  005492  9406               	bcf	_ARPEGGIO_IS_PLAYING/(0+8),_ARPEGGIO_IS_PLAYING& (0+7),c
 45244                           
 45245                           ;main.c: 449: suppress_note_on = 0;
 45246  005494  9802               	bcf	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 45247                           
 45248                           ;main.c: 450: suppress_note_off = 0;
 45249  005496  9602               	bcf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45250                           
 45251                           ;main.c: 451: flag1 = 0;
 45252  005498  9E01               	bcf	_flag1/(0+8),_flag1& (0+7),c
 45253                           
 45254                           ;main.c: 452: flag2 = 0;
 45255  00549A  9C01               	bcf	_flag2/(0+8),_flag2& (0+7),c
 45256                           
 45257                           ;main.c: 455: if((ARPEGGIO_TYPE == RANDOM) || (ARPEGGIO_TYPE == RANDOM_NON_REPEATING)) {
 45258  00549C  0E05               	movlw	5
 45259  00549E  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45260  0054A0  B4D8               	btfsc	status,2,c
 45261  0054A2  D003               	goto	i2u6691_40
 45262  0054A4  0E04               	movlw	4
 45263  0054A6  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45264  0054A8  B4D8               	btfsc	status,2,c
 45265  0054AA                     i2u6691_40:
 45266                           
 45267                           ;main.c: 456: stored_octave = which_octave;
 45268  0054AA  C032  F031         	movff	_which_octave,_stored_octave
 45269  0054AE                     i2l5004:
 45270                           
 45271                           ;main.c: 457: }
 45272                           ;main.c: 458: }
 45273                           ;main.c: 479: if(lastNoteMode == 1){
 45274  0054AE  B403               	btfsc	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 45275                           
 45276                           ;main.c: 480: if((finishLastNote == 1) && ((TIMER_OVERFLOWS % NOTE_LENGTH_PULSES) == 0))
      +                          {
 45277  0054B0  AA02               	btfss	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 45278  0054B2  D00C               	goto	i2l5008
 45279  0054B4  504D               	movf	_NOTE_LENGTH_PULSES,w,c
 45280  0054B6  6EE6               	movwf	postinc1,c
 45281  0054B8  502E               	movf	_TIMER_OVERFLOWS,w,c
 45282  0054BA  6EE6               	movwf	postinc1,c
 45283  0054BC  EC61  F041         	call	___lbmod	;wreg free
 45284  0054C0  503F               	movf	btemp,w,c
 45285  0054C2  A4D8               	btfss	status,2,c
 45286  0054C4  D003               	goto	i2l5008
 45287                           
 45288                           ;main.c: 489: finishLastNote = 0;
 45289  0054C6  9A02               	bcf	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 45290                           
 45291                           ;main.c: 492: TIMER_OVERFLOWS = NOTE_LENGTH_PULSES;
 45292  0054C8  C04D  F02E         	movff	_NOTE_LENGTH_PULSES,_TIMER_OVERFLOWS
 45293  0054CC                     i2l5008:
 45294                           
 45295                           ;main.c: 493: }
 45296                           ;main.c: 494: }
 45297                           ;main.c: 496: TIMER_OVERFLOWS++;
 45298  0054CC  2A2E               	incf	_TIMER_OVERFLOWS,f,c
 45299                           
 45300                           ;main.c: 498: if(TIMER_OVERFLOWS >= (NOTE_LENGTH_PULSES)){TIMER_OVERFLOWS = 0;}
 45301  0054CE  504D               	movf	_NOTE_LENGTH_PULSES,w,c
 45302  0054D0  5C2E               	subwf	_TIMER_OVERFLOWS,w,c
 45303  0054D2  A0D8               	btfss	status,0,c
 45304  0054D4  D002               	goto	i2l5009
 45305  0054D6  0E00               	movlw	0
 45306  0054D8  6E2E               	movwf	_TIMER_OVERFLOWS,c
 45307  0054DA                     i2l5009:
 45308                           
 45309                           ;main.c: 500: TMR0 = TIMER_PRELOAD;
 45310  0054DA  C17B  FFD6         	movff	_TIMER_PRELOAD,4054	;volatile
 45311  0054DE  C17C  FFD7         	movff	_TIMER_PRELOAD+1,4055	;volatile
 45312                           
 45313                           ;main.c: 501: TMR0IF = 0;
 45314  0054E2  94F2               	bcf	intcon,2,c	;volatile
 45315                           
 45316                           ;main.c: 502: TMR0IE = 1;
 45317  0054E4  8AF2               	bsf	intcon,5,c	;volatile
 45318  0054E6                     i2l4999:
 45319  0054E6  C029  F04A         	movff	??_ISR+23,btemp+11
 45320  0054EA  C028  F049         	movff	??_ISR+22,btemp+10
 45321  0054EE  C027  F048         	movff	??_ISR+21,btemp+9
 45322  0054F2  C026  F046         	movff	??_ISR+20,btemp+7
 45323  0054F6  C025  F045         	movff	??_ISR+19,btemp+6
 45324  0054FA  C024  F044         	movff	??_ISR+18,btemp+5
 45325  0054FE  C023  F043         	movff	??_ISR+17,btemp+4
 45326  005502  C022  F042         	movff	??_ISR+16,btemp+3
 45327  005506  C021  F041         	movff	??_ISR+15,btemp+2
 45328  00550A  C020  F040         	movff	??_ISR+14,btemp+1
 45329  00550E  C01F  F03F         	movff	??_ISR+13,btemp
 45330  005512  C01E  FFF5         	movff	??_ISR+12,tablat
 45331  005516  C01D  FFF8         	movff	??_ISR+11,tblptru
 45332  00551A  C01C  FFF7         	movff	??_ISR+10,tblptrh
 45333  00551E  C01B  FFF6         	movff	??_ISR+9,tblptrl
 45334  005522  C01A  FFF4         	movff	??_ISR+8,prodh
 45335  005526  C019  FFF3         	movff	??_ISR+7,prodl
 45336  00552A  C018  FFDA         	movff	??_ISR+6,fsr2h
 45337  00552E  C017  FFD9         	movff	??_ISR+5,fsr2l
 45338  005532  C016  FFE2         	movff	??_ISR+4,fsr1h
 45339  005536  C015  FFE1         	movff	??_ISR+3,fsr1l
 45340  00553A  C014  FFEA         	movff	??_ISR+2,fsr0h
 45341  00553E  C013  FFE9         	movff	??_ISR+1,fsr0l
 45342  005542  0011               	retfie		f
 45343  005544                     __end_of_ISR:
 45344                           	opt stack 0
 45345                           tblptru	equ	0xFF8
 45346                           tblptrh	equ	0xFF7
 45347                           tblptrl	equ	0xFF6
 45348                           tablat	equ	0xFF5
 45349                           prodh	equ	0xFF4
 45350                           prodl	equ	0xFF3
 45351                           intcon	equ	0xFF2
 45352                           intcon2	equ	0xFF1
 45353                           indf0	equ	0xFEF
 45354                           postinc0	equ	0xFEE
 45355                           postdec0	equ	0xFED
 45356                           fsr0h	equ	0xFEA
 45357                           fsr0l	equ	0xFE9
 45358                           wreg	equ	0xFE8
 45359                           postinc1	equ	0xFE6
 45360                           postdec1	equ	0xFE5
 45361                           plusw1	equ	0xFE3
 45362                           fsr1h	equ	0xFE2
 45363                           fsr1l	equ	0xFE1
 45364                           indf2	equ	0xFDF
 45365                           postinc2	equ	0xFDE
 45366                           postdec2	equ	0xFDD
 45367                           plusw2	equ	0xFDB
 45368                           fsr2h	equ	0xFDA
 45369                           fsr2l	equ	0xFD9
 45370                           status	equ	0xFD8
 45371                           
 45372 ;; *************** function _playArpeggio *****************
 45373 ;; Defined at:
 45374 ;;		line 277 in file "arpeggio.c"
 45375 ;; Parameters:    Size  Location     Type
 45376 ;;		None
 45377 ;; Auto vars:     Size  Location     Type
 45378 ;;		None
 45379 ;; Return value:  Size  Location     Type
 45380 ;;                  1    wreg      void 
 45381 ;; Registers used:
 45382 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, prodl, prodh, cstack
 45383 ;; Tracked objects:
 45384 ;;		On entry : 0/0
 45385 ;;		On exit  : 0/0
 45386 ;;		Unchanged: 0/0
 45387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 45388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45389 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45390 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45391 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45392 ;;Total ram usage:        6 bytes
 45393 ;; Hardware stack levels used:    1
 45394 ;; Hardware stack levels required when called:    3
 45395 ;; This function calls:
 45396 ;;		___awmod
 45397 ;;		_noteOff
 45398 ;;		_noteOn
 45399 ;;		_rand
 45400 ;;		_random_pitches
 45401 ;;		_random_pitches_non_repeating
 45402 ;;		_sort_pitches
 45403 ;; This function is called by:
 45404 ;;		_ISR
 45405 ;; This function uses a non-reentrant model
 45406 ;;
 45407                           
 45408                           	psect	text141
 45409  001198                     __ptext141:
 45410                           	opt stack 0
 45411  001198                     _playArpeggio:
 45412                           	opt stack 11
 45413                           
 45414                           ;arpeggio.c: 280: if(NUM_NOTES_PRESSED == 0){return;}
 45415                           
 45416                           ;incstack = 0
 45417  001198  502F               	movf	_NUM_NOTES_PRESSED,w,c
 45418  00119A  B4D8               	btfsc	status,2,c
 45419  00119C  0012               	return	
 45420                           
 45421                           ;arpeggio.c: 288: if(ARPEGGIO_TYPE == UP | ARPEGGIO_TYPE == UP_DOWN | ARPEGGIO_TYPE == A
      +                          S_PRESSED) {
 45422  00119E  5035               	movf	_ARPEGGIO_TYPE,w,c
 45423  0011A0  B4D8               	btfsc	status,2,c
 45424  0011A2  D008               	goto	i2u6034_40
 45425  0011A4  0E02               	movlw	2
 45426  0011A6  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45427  0011A8  B4D8               	btfsc	status,2,c
 45428  0011AA  D004               	goto	i2u6034_40
 45429  0011AC  0E06               	movlw	6
 45430  0011AE  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45431  0011B0  A4D8               	btfss	status,2,c
 45432  0011B2  D0B7               	goto	i2l5521
 45433  0011B4                     i2u6034_40:
 45434                           
 45435                           ;arpeggio.c: 290: if(startingDirection == UP){
 45436  0011B4  5034               	movf	_startingDirection,w,c
 45437  0011B6  B4D8               	btfsc	status,2,c
 45438                           
 45439                           ;arpeggio.c: 292: if((overflow == 1) && (which_octave > 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 45440  0011B8  A402               	btfss	_overflow/(0+8),_overflow& (0+7),c
 45441  0011BA  D027               	goto	i2l5510
 45442  0011BC  5032               	movf	_which_octave,w,c
 45443  0011BE  0A80               	xorlw	128
 45444  0011C0  0F7F               	addlw	-129
 45445  0011C2  B0D8               	btfsc	status,0,c
 45446  0011C4  B202               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45447  0011C6  D021               	goto	i2l5510
 45448  0011C8  BE01               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 45449  0011CA  D01F               	goto	i2l5510
 45450                           
 45451                           ;arpeggio.c: 295: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((which_oct
      +                          ave - 1) * 12),velocity);
 45452  0011CC  5051               	movf	_velocity,w,c
 45453  0011CE  6EE6               	movwf	postinc1,c
 45454  0011D0  0EFF               	movlw	255
 45455  0011D2  6E0C               	movwf	??_playArpeggio& (0+255),c
 45456  0011D4  0EFF               	movlw	255
 45457  0011D6  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45458  0011D8  502F               	movf	_NUM_NOTES_PRESSED,w,c
 45459  0011DA  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45460  0011DC  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45461  0011DE  500C               	movf	??_playArpeggio,w,c
 45462  0011E0  260E               	addwf	??_playArpeggio+2,f,c
 45463  0011E2  500D               	movf	??_playArpeggio+1,w,c
 45464  0011E4  220F               	addwfc	??_playArpeggio+3,f,c
 45465  0011E6  500E               	movf	??_playArpeggio+2,w,c
 45466  0011E8  242A               	addwf	_arpeggioPtr,w,c
 45467  0011EA  6ED9               	movwf	fsr2l,c
 45468  0011EC  500F               	movf	??_playArpeggio+3,w,c
 45469  0011EE  202B               	addwfc	_arpeggioPtr+1,w,c
 45470  0011F0  6EDA               	movwf	fsr2h,c
 45471  0011F2  50DF               	movf	indf2,w,c
 45472  0011F4  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 45473  0011F6  0432               	decf	_which_octave,w,c
 45474  0011F8  0D0C               	mullw	12
 45475  0011FA  50F3               	movf	prodl,w,c
 45476  0011FC  2410               	addwf	??_playArpeggio+4,w,c
 45477  0011FE  6EE6               	movwf	postinc1,c
 45478  001200  503E               	movf	_channel,w,c
 45479  001202  6EE6               	movwf	postinc1,c
 45480  001204  EC48  F04A         	call	_noteOff	;wreg free
 45481                           
 45482                           ;arpeggio.c: 296: overflow = 0;
 45483  001208  9402               	bcf	_overflow/(0+8),_overflow& (0+7),c
 45484  00120A                     i2l5510:
 45485                           
 45486                           ;arpeggio.c: 297: }
 45487                           ;arpeggio.c: 298: }
 45488                           ;arpeggio.c: 300: if(startingDirection == DOWN){
 45489  00120A  0434               	decf	_startingDirection,w,c
 45490  00120C  B4D8               	btfsc	status,2,c
 45491                           
 45492                           ;arpeggio.c: 302: if((overflow == 1) && (which_octave > 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 45493  00120E  A402               	btfss	_overflow/(0+8),_overflow& (0+7),c
 45494  001210  D029               	goto	i2l5512
 45495  001212  5032               	movf	_which_octave,w,c
 45496  001214  0A80               	xorlw	128
 45497  001216  0F7F               	addlw	-129
 45498  001218  B0D8               	btfsc	status,0,c
 45499  00121A  B202               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45500  00121C  D023               	goto	i2l5512
 45501  00121E  BE01               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 45502  001220  D021               	goto	i2l5512
 45503                           
 45504                           ;arpeggio.c: 303: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((which_oct
      +                          ave - OCTAVES) * 12),velocity);
 45505  001222  5051               	movf	_velocity,w,c
 45506  001224  6EE6               	movwf	postinc1,c
 45507  001226  0EFF               	movlw	255
 45508  001228  6E0C               	movwf	??_playArpeggio& (0+255),c
 45509  00122A  0EFF               	movlw	255
 45510  00122C  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45511  00122E  502F               	movf	_NUM_NOTES_PRESSED,w,c
 45512  001230  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45513  001232  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45514  001234  500C               	movf	??_playArpeggio,w,c
 45515  001236  260E               	addwf	??_playArpeggio+2,f,c
 45516  001238  500D               	movf	??_playArpeggio+1,w,c
 45517  00123A  220F               	addwfc	??_playArpeggio+3,f,c
 45518  00123C  500E               	movf	??_playArpeggio+2,w,c
 45519  00123E  242A               	addwf	_arpeggioPtr,w,c
 45520  001240  6ED9               	movwf	fsr2l,c
 45521  001242  500F               	movf	??_playArpeggio+3,w,c
 45522  001244  202B               	addwfc	_arpeggioPtr+1,w,c
 45523  001246  6EDA               	movwf	fsr2h,c
 45524  001248  50DF               	movf	indf2,w,c
 45525  00124A  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 45526  00124C  504E               	movf	_OCTAVES,w,c
 45527  00124E  0800               	sublw	0
 45528  001250  2432               	addwf	_which_octave,w,c
 45529  001252  0D0C               	mullw	12
 45530  001254  50F3               	movf	prodl,w,c
 45531  001256  2410               	addwf	??_playArpeggio+4,w,c
 45532  001258  6EE6               	movwf	postinc1,c
 45533  00125A  503E               	movf	_channel,w,c
 45534  00125C  6EE6               	movwf	postinc1,c
 45535  00125E  EC48  F04A         	call	_noteOff	;wreg free
 45536                           
 45537                           ;arpeggio.c: 304: overflow = 0;
 45538  001262  9402               	bcf	_overflow/(0+8),_overflow& (0+7),c
 45539  001264                     i2l5512:
 45540                           
 45541                           ;arpeggio.c: 305: }
 45542                           ;arpeggio.c: 306: }
 45543                           ;arpeggio.c: 308: if(octave_overflow == 1){
 45544  001264  A202               	btfss	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45545  001266  D05D               	goto	i2l5521
 45546                           
 45547                           ;arpeggio.c: 309: if(startingDirection == UP) {
 45548  001268  5034               	movf	_startingDirection,w,c
 45549  00126A  A4D8               	btfss	status,2,c
 45550  00126C  D021               	goto	i2l5514
 45551                           
 45552                           ;arpeggio.c: 311: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )) + ((OCTAVES - 1) * 12),velocity);}
 45553  00126E  BC01               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 45554  001270  D01E               	goto	i2l5515
 45555  001272  5051               	movf	_velocity,w,c
 45556  001274  6EE6               	movwf	postinc1,c
 45557  001276  0EFF               	movlw	255
 45558  001278  6E0C               	movwf	??_playArpeggio& (0+255),c
 45559  00127A  0EFF               	movlw	255
 45560  00127C  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45561  00127E  502F               	movf	_NUM_NOTES_PRESSED,w,c
 45562  001280  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45563  001282  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45564  001284  500C               	movf	??_playArpeggio,w,c
 45565  001286  260E               	addwf	??_playArpeggio+2,f,c
 45566  001288  500D               	movf	??_playArpeggio+1,w,c
 45567  00128A  220F               	addwfc	??_playArpeggio+3,f,c
 45568  00128C  500E               	movf	??_playArpeggio+2,w,c
 45569  00128E  242A               	addwf	_arpeggioPtr,w,c
 45570  001290  6ED9               	movwf	fsr2l,c
 45571  001292  500F               	movf	??_playArpeggio+3,w,c
 45572  001294  202B               	addwfc	_arpeggioPtr+1,w,c
 45573  001296  6EDA               	movwf	fsr2h,c
 45574  001298  50DF               	movf	indf2,w,c
 45575  00129A  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 45576  00129C  044E               	decf	_OCTAVES,w,c
 45577  00129E  0D0C               	mullw	12
 45578  0012A0  50F3               	movf	prodl,w,c
 45579  0012A2  2410               	addwf	??_playArpeggio+4,w,c
 45580  0012A4  6EE6               	movwf	postinc1,c
 45581  0012A6  503E               	movf	_channel,w,c
 45582  0012A8  6EE6               	movwf	postinc1,c
 45583  0012AA  EC48  F04A         	call	_noteOff	;wreg free
 45584  0012AE                     i2l5515:
 45585                           
 45586                           ;arpeggio.c: 312: octave_overflow = 0;
 45587  0012AE  9202               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45588  0012B0                     i2l5514:
 45589                           
 45590                           ;arpeggio.c: 313: }
 45591                           ;arpeggio.c: 315: if(startingDirection == DOWN){
 45592  0012B0  0434               	decf	_startingDirection,w,c
 45593  0012B2  A4D8               	btfss	status,2,c
 45594  0012B4  D01C               	goto	i2l5516
 45595                           
 45596                           ;arpeggio.c: 317: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )),velocity);}
 45597  0012B6  BC01               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 45598  0012B8  D019               	goto	i2l5517
 45599  0012BA  5051               	movf	_velocity,w,c
 45600  0012BC  6EE6               	movwf	postinc1,c
 45601  0012BE  0EFF               	movlw	255
 45602  0012C0  6E0C               	movwf	??_playArpeggio& (0+255),c
 45603  0012C2  0EFF               	movlw	255
 45604  0012C4  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45605  0012C6  502F               	movf	_NUM_NOTES_PRESSED,w,c
 45606  0012C8  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45607  0012CA  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45608  0012CC  500C               	movf	??_playArpeggio,w,c
 45609  0012CE  260E               	addwf	??_playArpeggio+2,f,c
 45610  0012D0  500D               	movf	??_playArpeggio+1,w,c
 45611  0012D2  220F               	addwfc	??_playArpeggio+3,f,c
 45612  0012D4  500E               	movf	??_playArpeggio+2,w,c
 45613  0012D6  242A               	addwf	_arpeggioPtr,w,c
 45614  0012D8  6ED9               	movwf	fsr2l,c
 45615  0012DA  500F               	movf	??_playArpeggio+3,w,c
 45616  0012DC  202B               	addwfc	_arpeggioPtr+1,w,c
 45617  0012DE  6EDA               	movwf	fsr2h,c
 45618  0012E0  50DF               	movf	indf2,w,c
 45619  0012E2  6EE6               	movwf	postinc1,c
 45620  0012E4  503E               	movf	_channel,w,c
 45621  0012E6  6EE6               	movwf	postinc1,c
 45622  0012E8  EC48  F04A         	call	_noteOff	;wreg free
 45623  0012EC                     i2l5517:
 45624                           
 45625                           ;arpeggio.c: 318: octave_overflow = 0;
 45626  0012EC  9202               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45627  0012EE                     i2l5516:
 45628                           
 45629                           ;arpeggio.c: 319: }
 45630                           ;arpeggio.c: 323: if(skipFirstLast == 1){
 45631  0012EE  A603               	btfss	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 45632  0012F0  D012               	goto	i2l5520
 45633                           
 45634                           ;arpeggio.c: 324: if(NUM_NOTES_PRESSED > 1){
 45635  0012F2  0E01               	movlw	1
 45636  0012F4  642F               	cpfsgt	_NUM_NOTES_PRESSED,c
 45637  0012F6  D003               	goto	i2l5519
 45638                           
 45639                           ;arpeggio.c: 325: which_note = 1;
 45640  0012F8  0E01               	movlw	1
 45641  0012FA  6E33               	movwf	_which_note,c
 45642                           
 45643                           ;arpeggio.c: 326: suppress_note_off = 1;
 45644  0012FC  8602               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45645  0012FE                     i2l5519:
 45646                           
 45647                           ;arpeggio.c: 327: }
 45648                           ;arpeggio.c: 331: if((NUM_NOTES_PRESSED == 1) && (OCTAVES > 1)){
 45649  0012FE  042F               	decf	_NUM_NOTES_PRESSED,w,c
 45650  001300  A4D8               	btfss	status,2,c
 45651  001302  D009               	goto	i2l5520
 45652  001304  0E01               	movlw	1
 45653  001306  644E               	cpfsgt	_OCTAVES,c
 45654  001308  D006               	goto	i2l5520
 45655                           
 45656                           ;arpeggio.c: 332: flag1 = 1;
 45657  00130A  8E01               	bsf	_flag1/(0+8),_flag1& (0+7),c
 45658                           
 45659                           ;arpeggio.c: 334: which_note = 0;
 45660  00130C  0E00               	movlw	0
 45661  00130E  6E33               	movwf	_which_note,c
 45662                           
 45663                           ;arpeggio.c: 335: which_octave--;
 45664  001310  0632               	decf	_which_octave,f,c
 45665                           
 45666                           ;arpeggio.c: 336: stored_octave = which_octave;
 45667  001312  C032  F031         	movff	_which_octave,_stored_octave
 45668  001316                     i2l5520:
 45669                           
 45670                           ;arpeggio.c: 337: }
 45671                           ;arpeggio.c: 338: }
 45672                           ;arpeggio.c: 341: if(ARPEGGIO_TYPE == UP_DOWN) {ARPEGGIO_TYPE = DOWN_UP;}
 45673  001316  0E02               	movlw	2
 45674  001318  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45675  00131A  A4D8               	btfss	status,2,c
 45676  00131C  D002               	goto	i2l5521
 45677  00131E  0E03               	movlw	3
 45678  001320  6E35               	movwf	_ARPEGGIO_TYPE,c
 45679  001322                     i2l5521:
 45680                           
 45681                           ;arpeggio.c: 342: }
 45682                           ;arpeggio.c: 343: }
 45683                           ;arpeggio.c: 346: if(ARPEGGIO_TYPE == DOWN | ARPEGGIO_TYPE == DOWN_UP) {
 45684  001322  0435               	decf	_ARPEGGIO_TYPE,w,c
 45685  001324  B4D8               	btfsc	status,2,c
 45686  001326  D004               	goto	i2u6056_40
 45687  001328  0E03               	movlw	3
 45688  00132A  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45689  00132C  A4D8               	btfss	status,2,c
 45690  00132E  D0BE               	goto	i2l5537
 45691  001330                     i2u6056_40:
 45692                           
 45693                           ;arpeggio.c: 348: if(startingDirection == UP){
 45694  001330  5034               	movf	_startingDirection,w,c
 45695  001332  B4D8               	btfsc	status,2,c
 45696                           
 45697                           ;arpeggio.c: 350: if((overflow == 1) && (which_octave < 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 45698  001334  A402               	btfss	_overflow/(0+8),_overflow& (0+7),c
 45699  001336  D025               	goto	i2l5526
 45700  001338  BE32               	btfsc	_which_octave,7,c
 45701  00133A  B202               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45702  00133C  D022               	goto	i2l5526
 45703  00133E  BE01               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 45704  001340  D020               	goto	i2l5526
 45705                           
 45706                           ;arpeggio.c: 351: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((OCTAVES +
      +                           which_octave) * 12),velocity);
 45707  001342  5051               	movf	_velocity,w,c
 45708  001344  6EE6               	movwf	postinc1,c
 45709  001346  0EFF               	movlw	255
 45710  001348  6E0C               	movwf	??_playArpeggio& (0+255),c
 45711  00134A  0EFF               	movlw	255
 45712  00134C  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45713  00134E  502F               	movf	_NUM_NOTES_PRESSED,w,c
 45714  001350  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45715  001352  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45716  001354  500C               	movf	??_playArpeggio,w,c
 45717  001356  260E               	addwf	??_playArpeggio+2,f,c
 45718  001358  500D               	movf	??_playArpeggio+1,w,c
 45719  00135A  220F               	addwfc	??_playArpeggio+3,f,c
 45720  00135C  500E               	movf	??_playArpeggio+2,w,c
 45721  00135E  242A               	addwf	_arpeggioPtr,w,c
 45722  001360  6ED9               	movwf	fsr2l,c
 45723  001362  500F               	movf	??_playArpeggio+3,w,c
 45724  001364  202B               	addwfc	_arpeggioPtr+1,w,c
 45725  001366  6EDA               	movwf	fsr2h,c
 45726  001368  50DF               	movf	indf2,w,c
 45727  00136A  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 45728  00136C  5032               	movf	_which_octave,w,c
 45729  00136E  244E               	addwf	_OCTAVES,w,c
 45730  001370  0D0C               	mullw	12
 45731  001372  50F3               	movf	prodl,w,c
 45732  001374  2410               	addwf	??_playArpeggio+4,w,c
 45733  001376  6EE6               	movwf	postinc1,c
 45734  001378  503E               	movf	_channel,w,c
 45735  00137A  6EE6               	movwf	postinc1,c
 45736  00137C  EC48  F04A         	call	_noteOff	;wreg free
 45737                           
 45738                           ;arpeggio.c: 352: overflow = 0;
 45739  001380  9402               	bcf	_overflow/(0+8),_overflow& (0+7),c
 45740  001382                     i2l5526:
 45741                           
 45742                           ;arpeggio.c: 353: }
 45743                           ;arpeggio.c: 354: }
 45744                           ;arpeggio.c: 356: if(startingDirection == DOWN) {
 45745  001382  0434               	decf	_startingDirection,w,c
 45746  001384  B4D8               	btfsc	status,2,c
 45747                           
 45748                           ;arpeggio.c: 358: if((overflow == 1) && (which_octave < 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 45749  001386  A402               	btfss	_overflow/(0+8),_overflow& (0+7),c
 45750  001388  D024               	goto	i2l5528
 45751  00138A  BE32               	btfsc	_which_octave,7,c
 45752  00138C  B202               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45753  00138E  D021               	goto	i2l5528
 45754  001390  BE01               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 45755  001392  D01F               	goto	i2l5528
 45756                           
 45757                           ;arpeggio.c: 359: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((which_oct
      +                          ave + 1) * 12),velocity);
 45758  001394  5051               	movf	_velocity,w,c
 45759  001396  6EE6               	movwf	postinc1,c
 45760  001398  0EFF               	movlw	255
 45761  00139A  6E0C               	movwf	??_playArpeggio& (0+255),c
 45762  00139C  0EFF               	movlw	255
 45763  00139E  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45764  0013A0  502F               	movf	_NUM_NOTES_PRESSED,w,c
 45765  0013A2  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45766  0013A4  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45767  0013A6  500C               	movf	??_playArpeggio,w,c
 45768  0013A8  260E               	addwf	??_playArpeggio+2,f,c
 45769  0013AA  500D               	movf	??_playArpeggio+1,w,c
 45770  0013AC  220F               	addwfc	??_playArpeggio+3,f,c
 45771  0013AE  500E               	movf	??_playArpeggio+2,w,c
 45772  0013B0  242A               	addwf	_arpeggioPtr,w,c
 45773  0013B2  6ED9               	movwf	fsr2l,c
 45774  0013B4  500F               	movf	??_playArpeggio+3,w,c
 45775  0013B6  202B               	addwfc	_arpeggioPtr+1,w,c
 45776  0013B8  6EDA               	movwf	fsr2h,c
 45777  0013BA  50DF               	movf	indf2,w,c
 45778  0013BC  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 45779  0013BE  2832               	incf	_which_octave,w,c
 45780  0013C0  0D0C               	mullw	12
 45781  0013C2  50F3               	movf	prodl,w,c
 45782  0013C4  2410               	addwf	??_playArpeggio+4,w,c
 45783  0013C6  6EE6               	movwf	postinc1,c
 45784  0013C8  503E               	movf	_channel,w,c
 45785  0013CA  6EE6               	movwf	postinc1,c
 45786  0013CC  EC48  F04A         	call	_noteOff	;wreg free
 45787                           
 45788                           ;arpeggio.c: 360: overflow = 0;
 45789  0013D0  9402               	bcf	_overflow/(0+8),_overflow& (0+7),c
 45790  0013D2                     i2l5528:
 45791                           
 45792                           ;arpeggio.c: 361: }
 45793                           ;arpeggio.c: 362: }
 45794                           ;arpeggio.c: 364: if(octave_overflow == 1){
 45795  0013D2  A202               	btfss	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45796  0013D4  D06B               	goto	i2l5537
 45797                           
 45798                           ;arpeggio.c: 366: if(startingDirection == UP){
 45799  0013D6  5034               	movf	_startingDirection,w,c
 45800  0013D8  A4D8               	btfss	status,2,c
 45801  0013DA  D025               	goto	i2l5530
 45802                           
 45803                           ;arpeggio.c: 368: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )) + (((OCTAVES * - 1) + OCTAVES) * 12),velocity);}
 45804  0013DC  BC01               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 45805  0013DE  D022               	goto	i2l5531
 45806  0013E0  5051               	movf	_velocity,w,c
 45807  0013E2  6EE6               	movwf	postinc1,c
 45808  0013E4  0EFF               	movlw	255
 45809  0013E6  6E0C               	movwf	??_playArpeggio& (0+255),c
 45810  0013E8  0EFF               	movlw	255
 45811  0013EA  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45812  0013EC  502F               	movf	_NUM_NOTES_PRESSED,w,c
 45813  0013EE  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45814  0013F0  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45815  0013F2  500C               	movf	??_playArpeggio,w,c
 45816  0013F4  260E               	addwf	??_playArpeggio+2,f,c
 45817  0013F6  500D               	movf	??_playArpeggio+1,w,c
 45818  0013F8  220F               	addwfc	??_playArpeggio+3,f,c
 45819  0013FA  500E               	movf	??_playArpeggio+2,w,c
 45820  0013FC  242A               	addwf	_arpeggioPtr,w,c
 45821  0013FE  6ED9               	movwf	fsr2l,c
 45822  001400  500F               	movf	??_playArpeggio+3,w,c
 45823  001402  202B               	addwfc	_arpeggioPtr+1,w,c
 45824  001404  6EDA               	movwf	fsr2h,c
 45825  001406  50DF               	movf	indf2,w,c
 45826  001408  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 45827  00140A  504E               	movf	_OCTAVES,w,c
 45828  00140C  0D01               	mullw	1
 45829  00140E  50F3               	movf	prodl,w,c
 45830  001410  0800               	sublw	0
 45831  001412  244E               	addwf	_OCTAVES,w,c
 45832  001414  0D0C               	mullw	12
 45833  001416  50F3               	movf	prodl,w,c
 45834  001418  2410               	addwf	??_playArpeggio+4,w,c
 45835  00141A  6EE6               	movwf	postinc1,c
 45836  00141C  503E               	movf	_channel,w,c
 45837  00141E  6EE6               	movwf	postinc1,c
 45838  001420  EC48  F04A         	call	_noteOff	;wreg free
 45839  001424                     i2l5531:
 45840                           
 45841                           ;arpeggio.c: 369: octave_overflow = 0;
 45842  001424  9202               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45843  001426                     i2l5530:
 45844                           
 45845                           ;arpeggio.c: 370: }
 45846                           ;arpeggio.c: 372: if(startingDirection == DOWN){
 45847  001426  0434               	decf	_startingDirection,w,c
 45848  001428  A4D8               	btfss	status,2,c
 45849  00142A  D026               	goto	i2l5532
 45850                           
 45851                           ;arpeggio.c: 374: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )) + (((OCTAVES * - 1) + 1) * 12),velocity);}
 45852  00142C  BC01               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 45853  00142E  D023               	goto	i2l5533
 45854  001430  5051               	movf	_velocity,w,c
 45855  001432  6EE6               	movwf	postinc1,c
 45856  001434  0EFF               	movlw	255
 45857  001436  6E0C               	movwf	??_playArpeggio& (0+255),c
 45858  001438  0EFF               	movlw	255
 45859  00143A  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45860  00143C  502F               	movf	_NUM_NOTES_PRESSED,w,c
 45861  00143E  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45862  001440  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45863  001442  500C               	movf	??_playArpeggio,w,c
 45864  001444  260E               	addwf	??_playArpeggio+2,f,c
 45865  001446  500D               	movf	??_playArpeggio+1,w,c
 45866  001448  220F               	addwfc	??_playArpeggio+3,f,c
 45867  00144A  500E               	movf	??_playArpeggio+2,w,c
 45868  00144C  242A               	addwf	_arpeggioPtr,w,c
 45869  00144E  6ED9               	movwf	fsr2l,c
 45870  001450  500F               	movf	??_playArpeggio+3,w,c
 45871  001452  202B               	addwfc	_arpeggioPtr+1,w,c
 45872  001454  6EDA               	movwf	fsr2h,c
 45873  001456  50DF               	movf	indf2,w,c
 45874  001458  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 45875  00145A  504E               	movf	_OCTAVES,w,c
 45876  00145C  0D01               	mullw	1
 45877  00145E  50F3               	movf	prodl,w,c
 45878  001460  0800               	sublw	0
 45879  001462  6E11               	movwf	(??_playArpeggio+5)& (0+255),c
 45880  001464  2811               	incf	??_playArpeggio+5,w,c
 45881  001466  0D0C               	mullw	12
 45882  001468  50F3               	movf	prodl,w,c
 45883  00146A  2410               	addwf	??_playArpeggio+4,w,c
 45884  00146C  6EE6               	movwf	postinc1,c
 45885  00146E  503E               	movf	_channel,w,c
 45886  001470  6EE6               	movwf	postinc1,c
 45887  001472  EC48  F04A         	call	_noteOff	;wreg free
 45888  001476                     i2l5533:
 45889                           
 45890                           ;arpeggio.c: 375: octave_overflow = 0;
 45891  001476  9202               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45892  001478                     i2l5532:
 45893                           
 45894                           ;arpeggio.c: 376: }
 45895                           ;arpeggio.c: 380: if(skipFirstLast == 1){
 45896  001478  A603               	btfss	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 45897  00147A  D012               	goto	i2l5536
 45898                           
 45899                           ;arpeggio.c: 381: if(NUM_NOTES_PRESSED > 1){
 45900  00147C  0E01               	movlw	1
 45901  00147E  642F               	cpfsgt	_NUM_NOTES_PRESSED,c
 45902  001480  D003               	goto	i2l5535
 45903                           
 45904                           ;arpeggio.c: 382: which_note = 1;
 45905  001482  0E01               	movlw	1
 45906  001484  6E33               	movwf	_which_note,c
 45907                           
 45908                           ;arpeggio.c: 383: suppress_note_off = 1;
 45909  001486  8602               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45910  001488                     i2l5535:
 45911                           
 45912                           ;arpeggio.c: 384: }
 45913                           ;arpeggio.c: 388: if((NUM_NOTES_PRESSED == 1) && (OCTAVES > 1)){
 45914  001488  042F               	decf	_NUM_NOTES_PRESSED,w,c
 45915  00148A  A4D8               	btfss	status,2,c
 45916  00148C  D009               	goto	i2l5536
 45917  00148E  0E01               	movlw	1
 45918  001490  644E               	cpfsgt	_OCTAVES,c
 45919  001492  D006               	goto	i2l5536
 45920                           
 45921                           ;arpeggio.c: 389: flag1 = 1;
 45922  001494  8E01               	bsf	_flag1/(0+8),_flag1& (0+7),c
 45923                           
 45924                           ;arpeggio.c: 391: which_note = 0;
 45925  001496  0E00               	movlw	0
 45926  001498  6E33               	movwf	_which_note,c
 45927                           
 45928                           ;arpeggio.c: 392: which_octave++;
 45929  00149A  2A32               	incf	_which_octave,f,c
 45930                           
 45931                           ;arpeggio.c: 393: stored_octave = which_octave;
 45932  00149C  C032  F031         	movff	_which_octave,_stored_octave
 45933  0014A0                     i2l5536:
 45934                           
 45935                           ;arpeggio.c: 394: }
 45936                           ;arpeggio.c: 395: }
 45937                           ;arpeggio.c: 397: if(ARPEGGIO_TYPE == DOWN_UP) {ARPEGGIO_TYPE = UP_DOWN;}
 45938  0014A0  0E03               	movlw	3
 45939  0014A2  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45940  0014A4  A4D8               	btfss	status,2,c
 45941  0014A6  D002               	goto	i2l5537
 45942  0014A8  0E02               	movlw	2
 45943  0014AA  6E35               	movwf	_ARPEGGIO_TYPE,c
 45944  0014AC                     i2l5537:
 45945                           
 45946                           ;arpeggio.c: 398: }
 45947                           ;arpeggio.c: 399: }
 45948                           ;arpeggio.c: 402: if(ARPEGGIO_TYPE == RANDOM | ARPEGGIO_TYPE == RANDOM_NON_REPEATING){
 45949  0014AC  0E05               	movlw	5
 45950  0014AE  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45951  0014B0  B4D8               	btfsc	status,2,c
 45952  0014B2  D004               	goto	i2u6078_40
 45953  0014B4  0E04               	movlw	4
 45954  0014B6  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 45955  0014B8  A4D8               	btfss	status,2,c
 45956  0014BA  D05A               	goto	i2l5543
 45957  0014BC                     i2u6078_40:
 45958                           
 45959                           ;arpeggio.c: 404: last_octave = which_octave;
 45960  0014BC  C032  F17D         	movff	_which_octave,_last_octave
 45961                           
 45962                           ;arpeggio.c: 406: if((overflow == 1) && (flag1 == 0)){
 45963  0014C0  B402               	btfsc	_overflow/(0+8),_overflow& (0+7),c
 45964  0014C2  BE01               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 45965  0014C4  D00E               	goto	i2l5541
 45966                           
 45967                           ;arpeggio.c: 407: noteOff(channel,last_note + (last_octave * 12),velocity);
 45968  0014C6  5051               	movf	_velocity,w,c
 45969  0014C8  6EE6               	movwf	postinc1,c
 45970  0014CA  0101               	movlb	1	; () banked
 45971  0014CC  517D               	movf	_last_octave& (0+255),w,b
 45972  0014CE  0D0C               	mullw	12
 45973  0014D0  50F3               	movf	prodl,w,c
 45974  0014D2  0100               	movlb	0	; () banked
 45975  0014D4  25EC               	addwf	_last_note& (0+255),w,b
 45976  0014D6  6EE6               	movwf	postinc1,c
 45977  0014D8  503E               	movf	_channel,w,c
 45978  0014DA  6EE6               	movwf	postinc1,c
 45979  0014DC  EC48  F04A         	call	_noteOff	;wreg free
 45980                           
 45981                           ;arpeggio.c: 408: overflow = 0;
 45982  0014E0  9402               	bcf	_overflow/(0+8),_overflow& (0+7),c
 45983  0014E2                     i2l5541:
 45984                           
 45985                           ;arpeggio.c: 409: }
 45986                           ;arpeggio.c: 411: if((which_note > 0) && (suppress_note_off == 0)){noteOff(channel,*(arp
      +                          eggioPtr + (which_note - 1)) + (which_octave * 12),velocity);}
 45987  0014E2  5033               	movf	_which_note,w,c
 45988  0014E4  A4D8               	btfss	status,2,c
 45989  0014E6  B602               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45990  0014E8  D01E               	goto	i2l5542
 45991  0014EA  5051               	movf	_velocity,w,c
 45992  0014EC  6EE6               	movwf	postinc1,c
 45993  0014EE  0EFF               	movlw	255
 45994  0014F0  6E0C               	movwf	??_playArpeggio& (0+255),c
 45995  0014F2  0EFF               	movlw	255
 45996  0014F4  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45997  0014F6  5033               	movf	_which_note,w,c
 45998  0014F8  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45999  0014FA  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 46000  0014FC  500C               	movf	??_playArpeggio,w,c
 46001  0014FE  260E               	addwf	??_playArpeggio+2,f,c
 46002  001500  500D               	movf	??_playArpeggio+1,w,c
 46003  001502  220F               	addwfc	??_playArpeggio+3,f,c
 46004  001504  500E               	movf	??_playArpeggio+2,w,c
 46005  001506  242A               	addwf	_arpeggioPtr,w,c
 46006  001508  6ED9               	movwf	fsr2l,c
 46007  00150A  500F               	movf	??_playArpeggio+3,w,c
 46008  00150C  202B               	addwfc	_arpeggioPtr+1,w,c
 46009  00150E  6EDA               	movwf	fsr2h,c
 46010  001510  50DF               	movf	indf2,w,c
 46011  001512  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 46012  001514  5032               	movf	_which_octave,w,c
 46013  001516  0D0C               	mullw	12
 46014  001518  50F3               	movf	prodl,w,c
 46015  00151A  2410               	addwf	??_playArpeggio+4,w,c
 46016  00151C  6EE6               	movwf	postinc1,c
 46017  00151E  503E               	movf	_channel,w,c
 46018  001520  6EE6               	movwf	postinc1,c
 46019  001522  EC48  F04A         	call	_noteOff	;wreg free
 46020  001526                     i2l5542:
 46021                           
 46022                           ;arpeggio.c: 412: which_octave = rand() % OCTAVES;
 46023  001526  504E               	movf	_OCTAVES,w,c
 46024  001528  6EE6               	movwf	postinc1,c
 46025  00152A  0E00               	movlw	0
 46026  00152C  6EE6               	movwf	postinc1,c
 46027  00152E  ECEE  F041         	call	_rand	;wreg free
 46028  001532  C03F  FFE6         	movff	btemp,postinc1
 46029  001536  C040  FFE6         	movff	btemp+1,postinc1
 46030  00153A  EC72  F034         	call	___awmod	;wreg free
 46031  00153E  503F               	movf	btemp,w,c
 46032  001540  6E32               	movwf	_which_octave,c
 46033                           
 46034                           ;arpeggio.c: 413: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           (which_octave * 12),velocity);}
 46035  001542  B802               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 46036  001544  D015               	goto	i2l5543
 46037  001546  5051               	movf	_velocity,w,c
 46038  001548  6EE6               	movwf	postinc1,c
 46039  00154A  5033               	movf	_which_note,w,c
 46040  00154C  0D01               	mullw	1
 46041  00154E  50F3               	movf	prodl,w,c
 46042  001550  242A               	addwf	_arpeggioPtr,w,c
 46043  001552  6ED9               	movwf	fsr2l,c
 46044  001554  50F4               	movf	prodh,w,c
 46045  001556  202B               	addwfc	_arpeggioPtr+1,w,c
 46046  001558  6EDA               	movwf	fsr2h,c
 46047  00155A  50DF               	movf	indf2,w,c
 46048  00155C  6E0C               	movwf	??_playArpeggio& (0+255),c
 46049  00155E  5032               	movf	_which_octave,w,c
 46050  001560  0D0C               	mullw	12
 46051  001562  50F3               	movf	prodl,w,c
 46052  001564  240C               	addwf	??_playArpeggio,w,c
 46053  001566  6EE6               	movwf	postinc1,c
 46054  001568  503E               	movf	_channel,w,c
 46055  00156A  6EE6               	movwf	postinc1,c
 46056  00156C  EC93  F045         	call	_noteOn	;wreg free
 46057  001570                     i2l5543:
 46058                           
 46059                           ;arpeggio.c: 414: }
 46060                           ;arpeggio.c: 416: if((ARPEGGIO_TYPE == UP) | (ARPEGGIO_TYPE == UP_DOWN | ARPEGGIO_TYPE =
      +                          = AS_PRESSED)) {
 46061  001570  5035               	movf	_ARPEGGIO_TYPE,w,c
 46062  001572  B4D8               	btfsc	status,2,c
 46063  001574  D008               	goto	i2u6086_40
 46064  001576  0E02               	movlw	2
 46065  001578  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46066  00157A  B4D8               	btfsc	status,2,c
 46067  00157C  D004               	goto	i2u6086_40
 46068  00157E  0E06               	movlw	6
 46069  001580  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46070  001582  A4D8               	btfss	status,2,c
 46071  001584  D07F               	goto	i2l5554
 46072  001586                     i2u6086_40:
 46073                           
 46074                           ;arpeggio.c: 418: SORT_DIRECTION = 0;
 46075  001586  9804               	bcf	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 46076                           
 46077                           ;arpeggio.c: 419: sort_pitches();
 46078  001588  EC5B  F032         	call	_sort_pitches	;wreg free
 46079                           
 46080                           ;arpeggio.c: 421: if(startingDirection == UP){
 46081  00158C  5034               	movf	_startingDirection,w,c
 46082  00158E  A4D8               	btfss	status,2,c
 46083  001590  D039               	goto	i2l5551
 46084                           
 46085                           ;arpeggio.c: 423: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + (which_octave * 12),velocity);}
 46086  001592  5033               	movf	_which_note,w,c
 46087  001594  A4D8               	btfss	status,2,c
 46088  001596  B602               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 46089  001598  D01E               	goto	i2l5550
 46090  00159A  5051               	movf	_velocity,w,c
 46091  00159C  6EE6               	movwf	postinc1,c
 46092  00159E  0EFF               	movlw	255
 46093  0015A0  6E0C               	movwf	??_playArpeggio& (0+255),c
 46094  0015A2  0EFF               	movlw	255
 46095  0015A4  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 46096  0015A6  5033               	movf	_which_note,w,c
 46097  0015A8  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 46098  0015AA  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 46099  0015AC  500C               	movf	??_playArpeggio,w,c
 46100  0015AE  260E               	addwf	??_playArpeggio+2,f,c
 46101  0015B0  500D               	movf	??_playArpeggio+1,w,c
 46102  0015B2  220F               	addwfc	??_playArpeggio+3,f,c
 46103  0015B4  500E               	movf	??_playArpeggio+2,w,c
 46104  0015B6  242A               	addwf	_arpeggioPtr,w,c
 46105  0015B8  6ED9               	movwf	fsr2l,c
 46106  0015BA  500F               	movf	??_playArpeggio+3,w,c
 46107  0015BC  202B               	addwfc	_arpeggioPtr+1,w,c
 46108  0015BE  6EDA               	movwf	fsr2h,c
 46109  0015C0  50DF               	movf	indf2,w,c
 46110  0015C2  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 46111  0015C4  5032               	movf	_which_octave,w,c
 46112  0015C6  0D0C               	mullw	12
 46113  0015C8  50F3               	movf	prodl,w,c
 46114  0015CA  2410               	addwf	??_playArpeggio+4,w,c
 46115  0015CC  6EE6               	movwf	postinc1,c
 46116  0015CE  503E               	movf	_channel,w,c
 46117  0015D0  6EE6               	movwf	postinc1,c
 46118  0015D2  EC48  F04A         	call	_noteOff	;wreg free
 46119  0015D6                     i2l5550:
 46120                           
 46121                           ;arpeggio.c: 424: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           (which_octave * 12),velocity);}
 46122  0015D6  B802               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 46123  0015D8  D015               	goto	i2l5551
 46124  0015DA  5051               	movf	_velocity,w,c
 46125  0015DC  6EE6               	movwf	postinc1,c
 46126  0015DE  5033               	movf	_which_note,w,c
 46127  0015E0  0D01               	mullw	1
 46128  0015E2  50F3               	movf	prodl,w,c
 46129  0015E4  242A               	addwf	_arpeggioPtr,w,c
 46130  0015E6  6ED9               	movwf	fsr2l,c
 46131  0015E8  50F4               	movf	prodh,w,c
 46132  0015EA  202B               	addwfc	_arpeggioPtr+1,w,c
 46133  0015EC  6EDA               	movwf	fsr2h,c
 46134  0015EE  50DF               	movf	indf2,w,c
 46135  0015F0  6E0C               	movwf	??_playArpeggio& (0+255),c
 46136  0015F2  5032               	movf	_which_octave,w,c
 46137  0015F4  0D0C               	mullw	12
 46138  0015F6  50F3               	movf	prodl,w,c
 46139  0015F8  240C               	addwf	??_playArpeggio,w,c
 46140  0015FA  6EE6               	movwf	postinc1,c
 46141  0015FC  503E               	movf	_channel,w,c
 46142  0015FE  6EE6               	movwf	postinc1,c
 46143  001600  EC93  F045         	call	_noteOn	;wreg free
 46144  001604                     i2l5551:
 46145                           
 46146                           ;arpeggio.c: 425: }
 46147                           ;arpeggio.c: 427: if(startingDirection == DOWN) {
 46148  001604  0434               	decf	_startingDirection,w,c
 46149  001606  A4D8               	btfss	status,2,c
 46150  001608  D03D               	goto	i2l5554
 46151                           
 46152                           ;arpeggio.c: 429: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + ((which_octave - (OCTAVES - 1)) * 12),velocity);}
 46153  00160A  5033               	movf	_which_note,w,c
 46154  00160C  A4D8               	btfss	status,2,c
 46155  00160E  B602               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 46156  001610  D020               	goto	i2l5553
 46157  001612  5051               	movf	_velocity,w,c
 46158  001614  6EE6               	movwf	postinc1,c
 46159  001616  0EFF               	movlw	255
 46160  001618  6E0C               	movwf	??_playArpeggio& (0+255),c
 46161  00161A  0EFF               	movlw	255
 46162  00161C  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 46163  00161E  5033               	movf	_which_note,w,c
 46164  001620  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 46165  001622  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 46166  001624  500C               	movf	??_playArpeggio,w,c
 46167  001626  260E               	addwf	??_playArpeggio+2,f,c
 46168  001628  500D               	movf	??_playArpeggio+1,w,c
 46169  00162A  220F               	addwfc	??_playArpeggio+3,f,c
 46170  00162C  500E               	movf	??_playArpeggio+2,w,c
 46171  00162E  242A               	addwf	_arpeggioPtr,w,c
 46172  001630  6ED9               	movwf	fsr2l,c
 46173  001632  500F               	movf	??_playArpeggio+3,w,c
 46174  001634  202B               	addwfc	_arpeggioPtr+1,w,c
 46175  001636  6EDA               	movwf	fsr2h,c
 46176  001638  50DF               	movf	indf2,w,c
 46177  00163A  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 46178  00163C  044E               	decf	_OCTAVES,w,c
 46179  00163E  0800               	sublw	0
 46180  001640  2432               	addwf	_which_octave,w,c
 46181  001642  0D0C               	mullw	12
 46182  001644  50F3               	movf	prodl,w,c
 46183  001646  2410               	addwf	??_playArpeggio+4,w,c
 46184  001648  6EE6               	movwf	postinc1,c
 46185  00164A  503E               	movf	_channel,w,c
 46186  00164C  6EE6               	movwf	postinc1,c
 46187  00164E  EC48  F04A         	call	_noteOff	;wreg free
 46188  001652                     i2l5553:
 46189                           
 46190                           ;arpeggio.c: 430: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           ((which_octave - (OCTAVES - 1)) * 12),velocity);}
 46191  001652  B802               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 46192  001654  D017               	goto	i2l5554
 46193  001656  5051               	movf	_velocity,w,c
 46194  001658  6EE6               	movwf	postinc1,c
 46195  00165A  5033               	movf	_which_note,w,c
 46196  00165C  0D01               	mullw	1
 46197  00165E  50F3               	movf	prodl,w,c
 46198  001660  242A               	addwf	_arpeggioPtr,w,c
 46199  001662  6ED9               	movwf	fsr2l,c
 46200  001664  50F4               	movf	prodh,w,c
 46201  001666  202B               	addwfc	_arpeggioPtr+1,w,c
 46202  001668  6EDA               	movwf	fsr2h,c
 46203  00166A  50DF               	movf	indf2,w,c
 46204  00166C  6E0C               	movwf	??_playArpeggio& (0+255),c
 46205  00166E  044E               	decf	_OCTAVES,w,c
 46206  001670  0800               	sublw	0
 46207  001672  2432               	addwf	_which_octave,w,c
 46208  001674  0D0C               	mullw	12
 46209  001676  50F3               	movf	prodl,w,c
 46210  001678  240C               	addwf	??_playArpeggio,w,c
 46211  00167A  6EE6               	movwf	postinc1,c
 46212  00167C  503E               	movf	_channel,w,c
 46213  00167E  6EE6               	movwf	postinc1,c
 46214  001680  EC93  F045         	call	_noteOn	;wreg free
 46215  001684                     i2l5554:
 46216                           
 46217                           ;arpeggio.c: 431: }
 46218                           ;arpeggio.c: 432: }
 46219                           ;arpeggio.c: 434: if((ARPEGGIO_TYPE == DOWN) | (ARPEGGIO_TYPE == DOWN_UP)) {
 46220  001684  0435               	decf	_ARPEGGIO_TYPE,w,c
 46221  001686  B4D8               	btfsc	status,2,c
 46222  001688  D004               	goto	i2u6096_40
 46223  00168A  0E03               	movlw	3
 46224  00168C  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46225  00168E  A4D8               	btfss	status,2,c
 46226  001690  D082               	goto	i2l5563
 46227  001692                     i2u6096_40:
 46228                           
 46229                           ;arpeggio.c: 436: SORT_DIRECTION = 1;
 46230  001692  8804               	bsf	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 46231                           
 46232                           ;arpeggio.c: 437: sort_pitches();
 46233  001694  EC5B  F032         	call	_sort_pitches	;wreg free
 46234                           
 46235                           ;arpeggio.c: 439: suppress_note_on = 0;
 46236  001698  9802               	bcf	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 46237                           
 46238                           ;arpeggio.c: 441: if(startingDirection == UP){
 46239  00169A  5034               	movf	_startingDirection,w,c
 46240  00169C  A4D8               	btfss	status,2,c
 46241  00169E  D03F               	goto	i2l5560
 46242                           
 46243                           ;arpeggio.c: 443: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + ((which_octave + (OCTAVES - 1)) * 12),velocity);}
 46244  0016A0  5033               	movf	_which_note,w,c
 46245  0016A2  A4D8               	btfss	status,2,c
 46246  0016A4  B602               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 46247  0016A6  D021               	goto	i2l5559
 46248  0016A8  5051               	movf	_velocity,w,c
 46249  0016AA  6EE6               	movwf	postinc1,c
 46250  0016AC  0EFF               	movlw	255
 46251  0016AE  6E0C               	movwf	??_playArpeggio& (0+255),c
 46252  0016B0  0EFF               	movlw	255
 46253  0016B2  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 46254  0016B4  5033               	movf	_which_note,w,c
 46255  0016B6  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 46256  0016B8  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 46257  0016BA  500C               	movf	??_playArpeggio,w,c
 46258  0016BC  260E               	addwf	??_playArpeggio+2,f,c
 46259  0016BE  500D               	movf	??_playArpeggio+1,w,c
 46260  0016C0  220F               	addwfc	??_playArpeggio+3,f,c
 46261  0016C2  500E               	movf	??_playArpeggio+2,w,c
 46262  0016C4  242A               	addwf	_arpeggioPtr,w,c
 46263  0016C6  6ED9               	movwf	fsr2l,c
 46264  0016C8  500F               	movf	??_playArpeggio+3,w,c
 46265  0016CA  202B               	addwfc	_arpeggioPtr+1,w,c
 46266  0016CC  6EDA               	movwf	fsr2h,c
 46267  0016CE  50DF               	movf	indf2,w,c
 46268  0016D0  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 46269  0016D2  504E               	movf	_OCTAVES,w,c
 46270  0016D4  2432               	addwf	_which_octave,w,c
 46271  0016D6  6E11               	movwf	(??_playArpeggio+5)& (0+255),c
 46272  0016D8  0411               	decf	??_playArpeggio+5,w,c
 46273  0016DA  0D0C               	mullw	12
 46274  0016DC  50F3               	movf	prodl,w,c
 46275  0016DE  2410               	addwf	??_playArpeggio+4,w,c
 46276  0016E0  6EE6               	movwf	postinc1,c
 46277  0016E2  503E               	movf	_channel,w,c
 46278  0016E4  6EE6               	movwf	postinc1,c
 46279  0016E6  EC48  F04A         	call	_noteOff	;wreg free
 46280  0016EA                     i2l5559:
 46281                           
 46282                           ;arpeggio.c: 444: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           ((which_octave + (OCTAVES - 1)) * 12),velocity);}
 46283  0016EA  B802               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 46284  0016EC  D018               	goto	i2l5560
 46285  0016EE  5051               	movf	_velocity,w,c
 46286  0016F0  6EE6               	movwf	postinc1,c
 46287  0016F2  5033               	movf	_which_note,w,c
 46288  0016F4  0D01               	mullw	1
 46289  0016F6  50F3               	movf	prodl,w,c
 46290  0016F8  242A               	addwf	_arpeggioPtr,w,c
 46291  0016FA  6ED9               	movwf	fsr2l,c
 46292  0016FC  50F4               	movf	prodh,w,c
 46293  0016FE  202B               	addwfc	_arpeggioPtr+1,w,c
 46294  001700  6EDA               	movwf	fsr2h,c
 46295  001702  50DF               	movf	indf2,w,c
 46296  001704  6E0C               	movwf	??_playArpeggio& (0+255),c
 46297  001706  504E               	movf	_OCTAVES,w,c
 46298  001708  2432               	addwf	_which_octave,w,c
 46299  00170A  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 46300  00170C  040D               	decf	??_playArpeggio+1,w,c
 46301  00170E  0D0C               	mullw	12
 46302  001710  50F3               	movf	prodl,w,c
 46303  001712  240C               	addwf	??_playArpeggio,w,c
 46304  001714  6EE6               	movwf	postinc1,c
 46305  001716  503E               	movf	_channel,w,c
 46306  001718  6EE6               	movwf	postinc1,c
 46307  00171A  EC93  F045         	call	_noteOn	;wreg free
 46308  00171E                     i2l5560:
 46309                           
 46310                           ;arpeggio.c: 445: }
 46311                           ;arpeggio.c: 447: if(startingDirection == DOWN){
 46312  00171E  0434               	decf	_startingDirection,w,c
 46313  001720  A4D8               	btfss	status,2,c
 46314  001722  D039               	goto	i2l5563
 46315                           
 46316                           ;arpeggio.c: 449: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + ((which_octave) * 12),velocity);}
 46317  001724  5033               	movf	_which_note,w,c
 46318  001726  A4D8               	btfss	status,2,c
 46319  001728  B602               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 46320  00172A  D01E               	goto	i2l5562
 46321  00172C  5051               	movf	_velocity,w,c
 46322  00172E  6EE6               	movwf	postinc1,c
 46323  001730  0EFF               	movlw	255
 46324  001732  6E0C               	movwf	??_playArpeggio& (0+255),c
 46325  001734  0EFF               	movlw	255
 46326  001736  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 46327  001738  5033               	movf	_which_note,w,c
 46328  00173A  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 46329  00173C  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 46330  00173E  500C               	movf	??_playArpeggio,w,c
 46331  001740  260E               	addwf	??_playArpeggio+2,f,c
 46332  001742  500D               	movf	??_playArpeggio+1,w,c
 46333  001744  220F               	addwfc	??_playArpeggio+3,f,c
 46334  001746  500E               	movf	??_playArpeggio+2,w,c
 46335  001748  242A               	addwf	_arpeggioPtr,w,c
 46336  00174A  6ED9               	movwf	fsr2l,c
 46337  00174C  500F               	movf	??_playArpeggio+3,w,c
 46338  00174E  202B               	addwfc	_arpeggioPtr+1,w,c
 46339  001750  6EDA               	movwf	fsr2h,c
 46340  001752  50DF               	movf	indf2,w,c
 46341  001754  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 46342  001756  5032               	movf	_which_octave,w,c
 46343  001758  0D0C               	mullw	12
 46344  00175A  50F3               	movf	prodl,w,c
 46345  00175C  2410               	addwf	??_playArpeggio+4,w,c
 46346  00175E  6EE6               	movwf	postinc1,c
 46347  001760  503E               	movf	_channel,w,c
 46348  001762  6EE6               	movwf	postinc1,c
 46349  001764  EC48  F04A         	call	_noteOff	;wreg free
 46350  001768                     i2l5562:
 46351                           
 46352                           ;arpeggio.c: 450: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           (which_octave * 12),velocity);}
 46353  001768  B802               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 46354  00176A  D015               	goto	i2l5563
 46355  00176C  5051               	movf	_velocity,w,c
 46356  00176E  6EE6               	movwf	postinc1,c
 46357  001770  5033               	movf	_which_note,w,c
 46358  001772  0D01               	mullw	1
 46359  001774  50F3               	movf	prodl,w,c
 46360  001776  242A               	addwf	_arpeggioPtr,w,c
 46361  001778  6ED9               	movwf	fsr2l,c
 46362  00177A  50F4               	movf	prodh,w,c
 46363  00177C  202B               	addwfc	_arpeggioPtr+1,w,c
 46364  00177E  6EDA               	movwf	fsr2h,c
 46365  001780  50DF               	movf	indf2,w,c
 46366  001782  6E0C               	movwf	??_playArpeggio& (0+255),c
 46367  001784  5032               	movf	_which_octave,w,c
 46368  001786  0D0C               	mullw	12
 46369  001788  50F3               	movf	prodl,w,c
 46370  00178A  240C               	addwf	??_playArpeggio,w,c
 46371  00178C  6EE6               	movwf	postinc1,c
 46372  00178E  503E               	movf	_channel,w,c
 46373  001790  6EE6               	movwf	postinc1,c
 46374  001792  EC93  F045         	call	_noteOn	;wreg free
 46375  001796                     i2l5563:
 46376                           
 46377                           ;arpeggio.c: 451: }
 46378                           ;arpeggio.c: 452: }
 46379                           ;arpeggio.c: 454: last_note = *(arpeggioPtr + which_note);
 46380  001796  5033               	movf	_which_note,w,c
 46381  001798  0D01               	mullw	1
 46382  00179A  50F3               	movf	prodl,w,c
 46383  00179C  242A               	addwf	_arpeggioPtr,w,c
 46384  00179E  6ED9               	movwf	fsr2l,c
 46385  0017A0  50F4               	movf	prodh,w,c
 46386  0017A2  202B               	addwfc	_arpeggioPtr+1,w,c
 46387  0017A4  6EDA               	movwf	fsr2h,c
 46388  0017A6  50DF               	movf	indf2,w,c
 46389  0017A8  0100               	movlb	0	; () banked
 46390  0017AA  6FEC               	movwf	_last_note& (0+255),b
 46391                           
 46392                           ; BSR set to: 0
 46393                           ;arpeggio.c: 455: which_note++;
 46394  0017AC  2A33               	incf	_which_note,f,c
 46395                           
 46396                           ; BSR set to: 0
 46397                           ;arpeggio.c: 456: suppress_note_off = 0;
 46398  0017AE  9602               	bcf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 46399                           
 46400                           ; BSR set to: 0
 46401                           ;arpeggio.c: 468: if((ARPEGGIO_TYPE == UP) | (ARPEGGIO_TYPE == UP_DOWN) | (ARPEGGIO_TYPE
      +                           == RANDOM) | (ARPEGGIO_TYPE == RANDOM_NON_REPEATING) | ARPEGGIO_TYPE == AS_PRESSED) {
 46402  0017B0  5035               	movf	_ARPEGGIO_TYPE,w,c
 46403  0017B2  B4D8               	btfsc	status,2,c
 46404  0017B4  D010               	goto	i2u6109_40
 46405                           
 46406                           ; BSR set to: 0
 46407  0017B6  0E02               	movlw	2
 46408  0017B8  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46409  0017BA  B4D8               	btfsc	status,2,c
 46410  0017BC  D00C               	goto	i2u6109_40
 46411                           
 46412                           ; BSR set to: 0
 46413  0017BE  0E05               	movlw	5
 46414  0017C0  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46415  0017C2  B4D8               	btfsc	status,2,c
 46416  0017C4  D008               	goto	i2u6109_40
 46417                           
 46418                           ; BSR set to: 0
 46419  0017C6  0E04               	movlw	4
 46420  0017C8  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46421  0017CA  B4D8               	btfsc	status,2,c
 46422  0017CC  D004               	goto	i2u6109_40
 46423                           
 46424                           ; BSR set to: 0
 46425  0017CE  0E06               	movlw	6
 46426  0017D0  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46427  0017D2  A4D8               	btfss	status,2,c
 46428  0017D4  D037               	goto	i2l5575
 46429  0017D6                     i2u6109_40:
 46430                           
 46431                           ; BSR set to: 0
 46432                           ;arpeggio.c: 470: if(which_note >= (NUM_NOTES_PRESSED)){
 46433                           
 46434                           ; BSR set to: 0
 46435  0017D6  502F               	movf	_NUM_NOTES_PRESSED,w,c
 46436  0017D8  5C33               	subwf	_which_note,w,c
 46437  0017DA  A0D8               	btfss	status,0,c
 46438  0017DC  D01D               	goto	i2l5574
 46439                           
 46440                           ; BSR set to: 0
 46441                           ;arpeggio.c: 472: which_note = 0;
 46442  0017DE  0E00               	movlw	0
 46443  0017E0  6E33               	movwf	_which_note,c
 46444                           
 46445                           ;arpeggio.c: 475: if((ARPEGGIO_TYPE == UP) | (ARPEGGIO_TYPE == UP_DOWN) | ARPEGGIO_TYPE 
      +                          == AS_PRESSED) {
 46446  0017E2  5035               	movf	_ARPEGGIO_TYPE,w,c
 46447  0017E4  B4D8               	btfsc	status,2,c
 46448  0017E6  D007               	goto	i2u6113_40
 46449                           
 46450                           ; BSR set to: 0
 46451  0017E8  0E02               	movlw	2
 46452  0017EA  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46453  0017EC  B4D8               	btfsc	status,2,c
 46454  0017EE  D003               	goto	i2u6113_40
 46455                           
 46456                           ; BSR set to: 0
 46457  0017F0  0E06               	movlw	6
 46458  0017F2  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46459  0017F4  B4D8               	btfsc	status,2,c
 46460  0017F6                     i2u6113_40:
 46461                           
 46462                           ; BSR set to: 0
 46463                           ;arpeggio.c: 476: which_octave++;
 46464                           
 46465                           ; BSR set to: 0
 46466  0017F6  2A32               	incf	_which_octave,f,c
 46467                           
 46468                           ; BSR set to: 0
 46469                           ;arpeggio.c: 477: }
 46470                           ;arpeggio.c: 479: overflow = 1;
 46471                           
 46472                           ; BSR set to: 0
 46473  0017F8  8402               	bsf	_overflow/(0+8),_overflow& (0+7),c
 46474                           
 46475                           ; BSR set to: 0
 46476                           ;arpeggio.c: 480: flag1 = 0;
 46477  0017FA  9E01               	bcf	_flag1/(0+8),_flag1& (0+7),c
 46478                           
 46479                           ; BSR set to: 0
 46480                           ;arpeggio.c: 483: if(ARPEGGIO_TYPE == RANDOM) {
 46481  0017FC  0E05               	movlw	5
 46482  0017FE  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46483  001800  B4D8               	btfsc	status,2,c
 46484                           
 46485                           ; BSR set to: 0
 46486                           ;arpeggio.c: 484: if(AUTO_RANDOMIZE == 0) {random_pitches();}
 46487  001802  B803               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 46488  001804  D002               	goto	i2l5572
 46489                           
 46490                           ; BSR set to: 0
 46491  001806  ECCC  F045         	call	_random_pitches	;wreg free
 46492  00180A                     i2l5572:
 46493                           
 46494                           ;arpeggio.c: 485: }
 46495                           ;arpeggio.c: 486: if(ARPEGGIO_TYPE == RANDOM_NON_REPEATING) {
 46496  00180A  0E04               	movlw	4
 46497  00180C  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46498  00180E  B4D8               	btfsc	status,2,c
 46499                           
 46500                           ;arpeggio.c: 487: if(AUTO_RANDOMIZE == 0) {random_pitches_non_repeating();}
 46501  001810  B803               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 46502  001812  D002               	goto	i2l5574
 46503  001814  EC7A  F03C         	call	_random_pitches_non_repeating	;wreg free
 46504  001818                     i2l5574:
 46505                           
 46506                           ;arpeggio.c: 488: }
 46507                           ;arpeggio.c: 489: }
 46508                           ;arpeggio.c: 491: if(which_octave>=OCTAVES) {
 46509  001818  504E               	movf	_OCTAVES,w,c
 46510  00181A  6E0C               	movwf	??_playArpeggio& (0+255),c
 46511  00181C  6A0D               	clrf	(??_playArpeggio+1)& (0+255),c
 46512  00181E  C032  F00E         	movff	_which_octave,??_playArpeggio+2
 46513  001822  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 46514  001824  BE0E               	btfsc	(??_playArpeggio+2)& (0+255),7,c
 46515  001826  060F               	decf	(??_playArpeggio+3)& (0+255),f,c
 46516  001828  500C               	movf	??_playArpeggio,w,c
 46517  00182A  5C0E               	subwf	??_playArpeggio+2,w,c
 46518  00182C  500F               	movf	??_playArpeggio+3,w,c
 46519  00182E  0A80               	xorlw	128
 46520  001830  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 46521  001832  500D               	movf	??_playArpeggio+1,w,c
 46522  001834  0A80               	xorlw	128
 46523  001836  5810               	subwfb	(??_playArpeggio+4)& (0+255),w,c
 46524  001838  A0D8               	btfss	status,0,c
 46525  00183A  D004               	goto	i2l5575
 46526                           
 46527                           ;arpeggio.c: 492: which_octave = 0;
 46528  00183C  0E00               	movlw	0
 46529  00183E  6E32               	movwf	_which_octave,c
 46530                           
 46531                           ;arpeggio.c: 493: octave_overflow = 1;
 46532  001840  8202               	bsf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 46533                           
 46534                           ;arpeggio.c: 494: flag2 = 0;
 46535  001842  9C01               	bcf	_flag2/(0+8),_flag2& (0+7),c
 46536  001844                     i2l5575:
 46537                           
 46538                           ;arpeggio.c: 495: }
 46539                           ;arpeggio.c: 496: }
 46540                           ;arpeggio.c: 499: if((ARPEGGIO_TYPE == DOWN) | (ARPEGGIO_TYPE == DOWN_UP)) {
 46541  001844  0435               	decf	_ARPEGGIO_TYPE,w,c
 46542  001846  B4D8               	btfsc	status,2,c
 46543  001848  D004               	goto	i2u6120_40
 46544  00184A  0E03               	movlw	3
 46545  00184C  1835               	xorwf	_ARPEGGIO_TYPE,w,c
 46546  00184E  A4D8               	btfss	status,2,c
 46547  001850  0012               	return	
 46548  001852                     i2u6120_40:
 46549                           
 46550                           ;arpeggio.c: 501: if(which_note>=(NUM_NOTES_PRESSED)){
 46551  001852  502F               	movf	_NUM_NOTES_PRESSED,w,c
 46552  001854  5C33               	subwf	_which_note,w,c
 46553  001856  A0D8               	btfss	status,0,c
 46554  001858  D005               	goto	i2l5579
 46555                           
 46556                           ;arpeggio.c: 502: which_note = 0;
 46557  00185A  0E00               	movlw	0
 46558  00185C  6E33               	movwf	_which_note,c
 46559                           
 46560                           ;arpeggio.c: 503: which_octave--;
 46561  00185E  0632               	decf	_which_octave,f,c
 46562                           
 46563                           ;arpeggio.c: 504: overflow = 1;
 46564  001860  8402               	bsf	_overflow/(0+8),_overflow& (0+7),c
 46565                           
 46566                           ;arpeggio.c: 505: flag1 = 0;
 46567  001862  9E01               	bcf	_flag1/(0+8),_flag1& (0+7),c
 46568  001864                     i2l5579:
 46569                           
 46570                           ;arpeggio.c: 506: }
 46571                           ;arpeggio.c: 507: if(which_octave <= (OCTAVES * -1)) {
 46572  001864  C032  F00C         	movff	_which_octave,??_playArpeggio
 46573  001868  6A0D               	clrf	(??_playArpeggio+1)& (0+255),c
 46574  00186A  BE0C               	btfsc	??_playArpeggio& (0+255),7,c
 46575  00186C  060D               	decf	(??_playArpeggio+1)& (0+255),f,c
 46576  00186E  504E               	movf	_OCTAVES,w,c
 46577  001870  0D01               	mullw	1
 46578  001872  1EF3               	comf	prodl,f,c
 46579  001874  1EF4               	comf	prodh,f,c
 46580  001876  4AF3               	infsnz	prodl,f,c
 46581  001878  2AF4               	incf	prodh,f,c
 46582  00187A  500C               	movf	??_playArpeggio,w,c
 46583  00187C  5CF3               	subwf	prodl,w,c
 46584  00187E  50F4               	movf	prodh,w,c
 46585  001880  0A80               	xorlw	128
 46586  001882  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 46587  001884  500D               	movf	??_playArpeggio+1,w,c
 46588  001886  0A80               	xorlw	128
 46589  001888  580E               	subwfb	(??_playArpeggio+2)& (0+255),w,c
 46590  00188A  A0D8               	btfss	status,0,c
 46591  00188C  0012               	return	
 46592                           
 46593                           ;arpeggio.c: 508: which_octave = 0;
 46594  00188E  0E00               	movlw	0
 46595  001890  6E32               	movwf	_which_octave,c
 46596                           
 46597                           ;arpeggio.c: 509: octave_overflow = 1;
 46598  001892  8202               	bsf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 46599                           
 46600                           ;arpeggio.c: 510: flag2 = 0;
 46601  001894  9C01               	bcf	_flag2/(0+8),_flag2& (0+7),c
 46602  001896  0012               	return	
 46603  001898                     __end_of_playArpeggio:
 46604                           	opt stack 0
 46605                           tblptru	equ	0xFF8
 46606                           tblptrh	equ	0xFF7
 46607                           tblptrl	equ	0xFF6
 46608                           tablat	equ	0xFF5
 46609                           prodh	equ	0xFF4
 46610                           prodl	equ	0xFF3
 46611                           intcon	equ	0xFF2
 46612                           intcon2	equ	0xFF1
 46613                           indf0	equ	0xFEF
 46614                           postinc0	equ	0xFEE
 46615                           postdec0	equ	0xFED
 46616                           fsr0h	equ	0xFEA
 46617                           fsr0l	equ	0xFE9
 46618                           wreg	equ	0xFE8
 46619                           postinc1	equ	0xFE6
 46620                           postdec1	equ	0xFE5
 46621                           plusw1	equ	0xFE3
 46622                           fsr1h	equ	0xFE2
 46623                           fsr1l	equ	0xFE1
 46624                           indf2	equ	0xFDF
 46625                           postinc2	equ	0xFDE
 46626                           postdec2	equ	0xFDD
 46627                           plusw2	equ	0xFDB
 46628                           fsr2h	equ	0xFDA
 46629                           fsr2l	equ	0xFD9
 46630                           status	equ	0xFD8
 46631                           
 46632 ;; *************** function _sort_pitches *****************
 46633 ;; Defined at:
 46634 ;;		line 222 in file "arpeggio.c"
 46635 ;; Parameters:    Size  Location     Type
 46636 ;;		None
 46637 ;; Auto vars:     Size  Location     Type
 46638 ;;  j               1    3[COMRAM] unsigned char 
 46639 ;;  i               1    4[COMRAM] unsigned char 
 46640 ;;  a               1    2[COMRAM] unsigned char 
 46641 ;; Return value:  Size  Location     Type
 46642 ;;                  1    wreg      void 
 46643 ;; Registers used:
 46644 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 46645 ;; Tracked objects:
 46646 ;;		On entry : 0/0
 46647 ;;		On exit  : 0/0
 46648 ;;		Unchanged: 0/0
 46649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46651 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46652 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46653 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46654 ;;Total ram usage:        5 bytes
 46655 ;; Hardware stack levels used:    1
 46656 ;; This function calls:
 46657 ;;		Nothing
 46658 ;; This function is called by:
 46659 ;;		_playArpeggio
 46660 ;; This function uses a non-reentrant model
 46661 ;;
 46662                           
 46663                           	psect	text142
 46664  0064B6                     __ptext142:
 46665                           	opt stack 0
 46666  0064B6                     _sort_pitches:
 46667                           	opt stack 13
 46668                           
 46669                           ;arpeggio.c: 224: if(NUM_NOTES_PRESSED == 0){return;}
 46670                           
 46671                           ;incstack = 0
 46672  0064B6  502F               	movf	_NUM_NOTES_PRESSED,w,c
 46673  0064B8  B4D8               	btfsc	status,2,c
 46674  0064BA  0012               	return	
 46675                           
 46676                           ;arpeggio.c: 226: unsigned char a;
 46677                           ;arpeggio.c: 227: for(unsigned char i = 0; i < NUM_NOTES_PRESSED; ++i){
 46678  0064BC  0E00               	movlw	0
 46679  0064BE  6E0B               	movwf	sort_pitches@i,c
 46680  0064C0  D081               	goto	i2l5478
 46681  0064C2                     
 46682                           ;arpeggio.c: 228: for(unsigned char j = i + 1; j < NUM_NOTES_PRESSED; ++j){
 46683  0064C2  280B               	incf	sort_pitches@i,w,c
 46684  0064C4  6E0A               	movwf	sort_pitches@j,c
 46685  0064C6  D079               	goto	i2l5480
 46686  0064C8                     i2l5481:
 46687                           
 46688                           ;arpeggio.c: 234: if(SORT_DIRECTION == 0) {
 46689  0064C8  B804               	btfsc	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 46690  0064CA  D03A               	goto	i2l5483
 46691                           
 46692                           ;arpeggio.c: 235: if(ARPEGGIO_SORTED[i] > ARPEGGIO_SORTED[j]){
 46693  0064CC  500B               	movf	sort_pitches@i,w,c
 46694  0064CE  0D01               	mullw	1
 46695  0064D0  0E78               	movlw	low _ARPEGGIO_SORTED
 46696  0064D2  24F3               	addwf	prodl,w,c
 46697  0064D4  6ED9               	movwf	fsr2l,c
 46698  0064D6  0E02               	movlw	high _ARPEGGIO_SORTED
 46699  0064D8  20F4               	addwfc	prodh,w,c
 46700  0064DA  6EDA               	movwf	fsr2h,c
 46701  0064DC  500A               	movf	sort_pitches@j,w,c
 46702  0064DE  0D01               	mullw	1
 46703  0064E0  0E78               	movlw	low _ARPEGGIO_SORTED
 46704  0064E2  24F3               	addwf	prodl,w,c
 46705  0064E4  6EE9               	movwf	fsr0l,c
 46706  0064E6  0E02               	movlw	high _ARPEGGIO_SORTED
 46707  0064E8  20F4               	addwfc	prodh,w,c
 46708  0064EA  6EEA               	movwf	fsr0h,c
 46709  0064EC  50DE               	movf	postinc2,w,c
 46710  0064EE  5CEE               	subwf	postinc0,w,c
 46711  0064F0  B0D8               	btfsc	status,0,c
 46712  0064F2  D026               	goto	i2l5483
 46713                           
 46714                           ;arpeggio.c: 236: a = ARPEGGIO_SORTED[i];
 46715  0064F4  500B               	movf	sort_pitches@i,w,c
 46716  0064F6  0D01               	mullw	1
 46717  0064F8  0E78               	movlw	low _ARPEGGIO_SORTED
 46718  0064FA  24F3               	addwf	prodl,w,c
 46719  0064FC  6ED9               	movwf	fsr2l,c
 46720  0064FE  0E02               	movlw	high _ARPEGGIO_SORTED
 46721  006500  20F4               	addwfc	prodh,w,c
 46722  006502  6EDA               	movwf	fsr2h,c
 46723  006504  50DF               	movf	indf2,w,c
 46724  006506  6E09               	movwf	sort_pitches@a,c
 46725                           
 46726                           ;arpeggio.c: 237: ARPEGGIO_SORTED[i] = ARPEGGIO_SORTED[j];
 46727  006508  500A               	movf	sort_pitches@j,w,c
 46728  00650A  0D01               	mullw	1
 46729  00650C  0E78               	movlw	low _ARPEGGIO_SORTED
 46730  00650E  24F3               	addwf	prodl,w,c
 46731  006510  6ED9               	movwf	fsr2l,c
 46732  006512  0E02               	movlw	high _ARPEGGIO_SORTED
 46733  006514  20F4               	addwfc	prodh,w,c
 46734  006516  6EDA               	movwf	fsr2h,c
 46735  006518  500B               	movf	sort_pitches@i,w,c
 46736  00651A  0D01               	mullw	1
 46737  00651C  0E78               	movlw	low _ARPEGGIO_SORTED
 46738  00651E  24F3               	addwf	prodl,w,c
 46739  006520  6EE9               	movwf	fsr0l,c
 46740  006522  0E02               	movlw	high _ARPEGGIO_SORTED
 46741  006524  20F4               	addwfc	prodh,w,c
 46742  006526  6EEA               	movwf	fsr0h,c
 46743  006528  CFDF FFEF          	movff	indf2,indf0
 46744                           
 46745                           ;arpeggio.c: 238: ARPEGGIO_SORTED[j] = a;
 46746  00652C  500A               	movf	sort_pitches@j,w,c
 46747  00652E  0D01               	mullw	1
 46748  006530  0E78               	movlw	low _ARPEGGIO_SORTED
 46749  006532  24F3               	addwf	prodl,w,c
 46750  006534  6ED9               	movwf	fsr2l,c
 46751  006536  0E02               	movlw	high _ARPEGGIO_SORTED
 46752  006538  20F4               	addwfc	prodh,w,c
 46753  00653A  6EDA               	movwf	fsr2h,c
 46754  00653C  C009  FFDF         	movff	sort_pitches@a,indf2
 46755  006540                     i2l5483:
 46756                           
 46757                           ;arpeggio.c: 239: }
 46758                           ;arpeggio.c: 240: }
 46759                           ;arpeggio.c: 242: if(SORT_DIRECTION == 1) {
 46760  006540  A804               	btfss	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 46761  006542  D03A               	goto	i2l5485
 46762                           
 46763                           ;arpeggio.c: 243: if(ARPEGGIO_SORTED[i] < ARPEGGIO_SORTED[j]){
 46764  006544  500A               	movf	sort_pitches@j,w,c
 46765  006546  0D01               	mullw	1
 46766  006548  0E78               	movlw	low _ARPEGGIO_SORTED
 46767  00654A  24F3               	addwf	prodl,w,c
 46768  00654C  6ED9               	movwf	fsr2l,c
 46769  00654E  0E02               	movlw	high _ARPEGGIO_SORTED
 46770  006550  20F4               	addwfc	prodh,w,c
 46771  006552  6EDA               	movwf	fsr2h,c
 46772  006554  500B               	movf	sort_pitches@i,w,c
 46773  006556  0D01               	mullw	1
 46774  006558  0E78               	movlw	low _ARPEGGIO_SORTED
 46775  00655A  24F3               	addwf	prodl,w,c
 46776  00655C  6EE9               	movwf	fsr0l,c
 46777  00655E  0E02               	movlw	high _ARPEGGIO_SORTED
 46778  006560  20F4               	addwfc	prodh,w,c
 46779  006562  6EEA               	movwf	fsr0h,c
 46780  006564  50DE               	movf	postinc2,w,c
 46781  006566  5CEE               	subwf	postinc0,w,c
 46782  006568  B0D8               	btfsc	status,0,c
 46783  00656A  D026               	goto	i2l5485
 46784                           
 46785                           ;arpeggio.c: 244: a = ARPEGGIO_SORTED[i];
 46786  00656C  500B               	movf	sort_pitches@i,w,c
 46787  00656E  0D01               	mullw	1
 46788  006570  0E78               	movlw	low _ARPEGGIO_SORTED
 46789  006572  24F3               	addwf	prodl,w,c
 46790  006574  6ED9               	movwf	fsr2l,c
 46791  006576  0E02               	movlw	high _ARPEGGIO_SORTED
 46792  006578  20F4               	addwfc	prodh,w,c
 46793  00657A  6EDA               	movwf	fsr2h,c
 46794  00657C  50DF               	movf	indf2,w,c
 46795  00657E  6E09               	movwf	sort_pitches@a,c
 46796                           
 46797                           ;arpeggio.c: 245: ARPEGGIO_SORTED[i] = ARPEGGIO_SORTED[j];
 46798  006580  500A               	movf	sort_pitches@j,w,c
 46799  006582  0D01               	mullw	1
 46800  006584  0E78               	movlw	low _ARPEGGIO_SORTED
 46801  006586  24F3               	addwf	prodl,w,c
 46802  006588  6ED9               	movwf	fsr2l,c
 46803  00658A  0E02               	movlw	high _ARPEGGIO_SORTED
 46804  00658C  20F4               	addwfc	prodh,w,c
 46805  00658E  6EDA               	movwf	fsr2h,c
 46806  006590  500B               	movf	sort_pitches@i,w,c
 46807  006592  0D01               	mullw	1
 46808  006594  0E78               	movlw	low _ARPEGGIO_SORTED
 46809  006596  24F3               	addwf	prodl,w,c
 46810  006598  6EE9               	movwf	fsr0l,c
 46811  00659A  0E02               	movlw	high _ARPEGGIO_SORTED
 46812  00659C  20F4               	addwfc	prodh,w,c
 46813  00659E  6EEA               	movwf	fsr0h,c
 46814  0065A0  CFDF FFEF          	movff	indf2,indf0
 46815                           
 46816                           ;arpeggio.c: 246: ARPEGGIO_SORTED[j] = a;
 46817  0065A4  500A               	movf	sort_pitches@j,w,c
 46818  0065A6  0D01               	mullw	1
 46819  0065A8  0E78               	movlw	low _ARPEGGIO_SORTED
 46820  0065AA  24F3               	addwf	prodl,w,c
 46821  0065AC  6ED9               	movwf	fsr2l,c
 46822  0065AE  0E02               	movlw	high _ARPEGGIO_SORTED
 46823  0065B0  20F4               	addwfc	prodh,w,c
 46824  0065B2  6EDA               	movwf	fsr2h,c
 46825  0065B4  C009  FFDF         	movff	sort_pitches@a,indf2
 46826  0065B8                     i2l5485:
 46827  0065B8  2A0A               	incf	sort_pitches@j,f,c
 46828  0065BA                     i2l5480:
 46829  0065BA  502F               	movf	_NUM_NOTES_PRESSED,w,c
 46830  0065BC  5C0A               	subwf	sort_pitches@j,w,c
 46831  0065BE  A0D8               	btfss	status,0,c
 46832  0065C0  D783               	goto	i2l5481
 46833  0065C2  2A0B               	incf	sort_pitches@i,f,c
 46834  0065C4                     i2l5478:
 46835  0065C4  502F               	movf	_NUM_NOTES_PRESSED,w,c
 46836  0065C6  5C0B               	subwf	sort_pitches@i,w,c
 46837  0065C8  B0D8               	btfsc	status,0,c
 46838  0065CA  0012               	return	
 46839  0065CC  D77A               	goto	i2l5479
 46840  0065CE                     __end_of_sort_pitches:
 46841                           	opt stack 0
 46842                           tblptru	equ	0xFF8
 46843                           tblptrh	equ	0xFF7
 46844                           tblptrl	equ	0xFF6
 46845                           tablat	equ	0xFF5
 46846                           prodh	equ	0xFF4
 46847                           prodl	equ	0xFF3
 46848                           intcon	equ	0xFF2
 46849                           intcon2	equ	0xFF1
 46850                           indf0	equ	0xFEF
 46851                           postinc0	equ	0xFEE
 46852                           postdec0	equ	0xFED
 46853                           fsr0h	equ	0xFEA
 46854                           fsr0l	equ	0xFE9
 46855                           wreg	equ	0xFE8
 46856                           postinc1	equ	0xFE6
 46857                           postdec1	equ	0xFE5
 46858                           plusw1	equ	0xFE3
 46859                           fsr1h	equ	0xFE2
 46860                           fsr1l	equ	0xFE1
 46861                           indf2	equ	0xFDF
 46862                           postinc2	equ	0xFDE
 46863                           postdec2	equ	0xFDD
 46864                           plusw2	equ	0xFDB
 46865                           fsr2h	equ	0xFDA
 46866                           fsr2l	equ	0xFD9
 46867                           status	equ	0xFD8
 46868                           
 46869 ;; *************** function _encoderInputsBuxton *****************
 46870 ;; Defined at:
 46871 ;;		line 27 in file "encoder.c"
 46872 ;; Parameters:    Size  Location     Type
 46873 ;;		None
 46874 ;; Auto vars:     Size  Location     Type
 46875 ;;  pinstate        1    5[COMRAM] unsigned char 
 46876 ;;  tempB           1    4[COMRAM] unsigned char 
 46877 ;;  tempA           1    3[COMRAM] unsigned char 
 46878 ;; Return value:  Size  Location     Type
 46879 ;;                  1    wreg      void 
 46880 ;; Registers used:
 46881 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 46882 ;; Tracked objects:
 46883 ;;		On entry : 0/0
 46884 ;;		On exit  : 0/0
 46885 ;;		Unchanged: 0/0
 46886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46888 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46889 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46890 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46891 ;;Total ram usage:        6 bytes
 46892 ;; Hardware stack levels used:    1
 46893 ;; This function calls:
 46894 ;;		Nothing
 46895 ;; This function is called by:
 46896 ;;		_ISR
 46897 ;; This function uses a non-reentrant model
 46898 ;;
 46899                           
 46900                           	psect	text143
 46901  008670                     __ptext143:
 46902                           	opt stack 0
 46903  008670                     _encoderInputsBuxton:
 46904                           	opt stack 14
 46905                           
 46906                           ;encoder.c: 30: if(encoderPolarity == 0){
 46907                           
 46908                           ;incstack = 0
 46909  008670  B405               	btfsc	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 46910  008672  D006               	goto	i2l858
 46911                           
 46912                           ;encoder.c: 31: encoderA = RB5;
 46913  008674  8805               	bsf	_encoderA/(0+8),_encoderA& (0+7),c
 46914  008676  AA81               	btfss	3969,5,c	;volatile
 46915  008678  9805               	bcf	_encoderA/(0+8),_encoderA& (0+7),c
 46916                           
 46917                           ;encoder.c: 32: encoderB = RB4;
 46918  00867A  8605               	bsf	_encoderB/(0+8),_encoderB& (0+7),c
 46919  00867C  A881               	btfss	3969,4,c	;volatile
 46920  00867E  9605               	bcf	_encoderB/(0+8),_encoderB& (0+7),c
 46921  008680                     i2l858:
 46922                           
 46923                           ;encoder.c: 33: }
 46924                           ;encoder.c: 36: if(encoderPolarity == 1){
 46925  008680  A405               	btfss	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 46926  008682  D006               	goto	i2l859
 46927                           
 46928                           ;encoder.c: 37: encoderA = RB4;
 46929  008684  8805               	bsf	_encoderA/(0+8),_encoderA& (0+7),c
 46930  008686  A881               	btfss	3969,4,c	;volatile
 46931  008688  9805               	bcf	_encoderA/(0+8),_encoderA& (0+7),c
 46932                           
 46933                           ;encoder.c: 38: encoderB = RB5;
 46934  00868A  8605               	bsf	_encoderB/(0+8),_encoderB& (0+7),c
 46935  00868C  AA81               	btfss	3969,5,c	;volatile
 46936  00868E  9605               	bcf	_encoderB/(0+8),_encoderB& (0+7),c
 46937  008690                     i2l859:
 46938                           
 46939                           ;encoder.c: 39: }
 46940                           ;encoder.c: 42: unsigned char tempA = encoderA << 1;
 46941  008690  A805               	btfss	_encoderA/(0+8),_encoderA& (0+7),c
 46942  008692  D003               	goto	i2u3797_40
 46943  008694  6A07               	clrf	??_encoderInputsBuxton& (0+255),c
 46944  008696  2A07               	incf	??_encoderInputsBuxton& (0+255),f,c
 46945  008698  D001               	goto	i2u3798_48
 46946  00869A                     i2u3797_40:
 46947  00869A  6A07               	clrf	??_encoderInputsBuxton& (0+255),c
 46948  00869C                     i2u3798_48:
 46949  00869C  90D8               	bcf	status,0,c
 46950  00869E  3407               	rlcf	??_encoderInputsBuxton,w,c
 46951  0086A0  6E0A               	movwf	encoderInputsBuxton@tempA,c
 46952                           
 46953                           ;encoder.c: 43: unsigned char tempB = encoderB;
 46954  0086A2  0E00               	movlw	0
 46955  0086A4  B605               	btfsc	_encoderB/(0+8),_encoderB& (0+7),c
 46956  0086A6  0E01               	movlw	1
 46957  0086A8  6E0B               	movwf	encoderInputsBuxton@tempB,c
 46958                           
 46959                           ;encoder.c: 44: unsigned char pinstate = tempA | tempB;
 46960  0086AA  500A               	movf	encoderInputsBuxton@tempA,w,c
 46961  0086AC  100B               	iorwf	encoderInputsBuxton@tempB,w,c
 46962  0086AE  6E0C               	movwf	encoderInputsBuxton@pinstate,c
 46963                           
 46964                           ;encoder.c: 46: state = ttable[state & 0xf][pinstate];
 46965  0086B0  C0ED  F007         	movff	_state,??_encoderInputsBuxton
 46966  0086B4  0E0F               	movlw	15
 46967  0086B6  1607               	andwf	??_encoderInputsBuxton,f,c
 46968  0086B8  5007               	movf	??_encoderInputsBuxton,w,c
 46969  0086BA  0D04               	mullw	4
 46970  0086BC  0E3D               	movlw	low _ttable
 46971  0086BE  6E08               	movwf	(??_encoderInputsBuxton+1)& (0+255),c
 46972  0086C0  0EF3               	movlw	high _ttable
 46973  0086C2  6E09               	movwf	(??_encoderInputsBuxton+2)& (0+255),c
 46974  0086C4  50F3               	movf	prodl,w,c
 46975  0086C6  2608               	addwf	??_encoderInputsBuxton+1,f,c
 46976  0086C8  50F4               	movf	prodh,w,c
 46977  0086CA  2209               	addwfc	??_encoderInputsBuxton+2,f,c
 46978  0086CC  500C               	movf	encoderInputsBuxton@pinstate,w,c
 46979  0086CE  0D01               	mullw	1
 46980  0086D0  50F3               	movf	prodl,w,c
 46981  0086D2  2608               	addwf	??_encoderInputsBuxton+1,f,c
 46982  0086D4  50F4               	movf	prodh,w,c
 46983  0086D6  2209               	addwfc	??_encoderInputsBuxton+2,f,c
 46984  0086D8  C008  FFF6         	movff	??_encoderInputsBuxton+1,tblptrl
 46985  0086DC  C009  FFF7         	movff	??_encoderInputsBuxton+2,tblptrh
 46986  0086E0                     	if	0	;tblptru may be non-zero
 46987  0086E0                     	endif
 46988  0086E0                     	if	0	;tblptru may be non-zero
 46989  0086E0                     	endif
 46990  0086E0  0008               	tblrd		*
 46991  0086E2  CFF5 F0ED          	movff	tablat,_state
 46992                           
 46993                           ;encoder.c: 47: encoder_direction = state & 0x30;
 46994  0086E6  0100               	movlb	0	; () banked
 46995  0086E8  51ED               	movf	_state& (0+255),w,b
 46996  0086EA  0B30               	andlw	48
 46997  0086EC  6E36               	movwf	_encoder_direction,c
 46998                           
 46999                           ; BSR set to: 0
 47000  0086EE  0012               	return		;funcret
 47001  0086F0                     __end_of_encoderInputsBuxton:
 47002                           	opt stack 0
 47003                           tblptru	equ	0xFF8
 47004                           tblptrh	equ	0xFF7
 47005                           tblptrl	equ	0xFF6
 47006                           tablat	equ	0xFF5
 47007                           prodh	equ	0xFF4
 47008                           prodl	equ	0xFF3
 47009                           intcon	equ	0xFF2
 47010                           intcon2	equ	0xFF1
 47011                           indf0	equ	0xFEF
 47012                           postinc0	equ	0xFEE
 47013                           postdec0	equ	0xFED
 47014                           fsr0h	equ	0xFEA
 47015                           fsr0l	equ	0xFE9
 47016                           wreg	equ	0xFE8
 47017                           postinc1	equ	0xFE6
 47018                           postdec1	equ	0xFE5
 47019                           plusw1	equ	0xFE3
 47020                           fsr1h	equ	0xFE2
 47021                           fsr1l	equ	0xFE1
 47022                           indf2	equ	0xFDF
 47023                           postinc2	equ	0xFDE
 47024                           postdec2	equ	0xFDD
 47025                           plusw2	equ	0xFDB
 47026                           fsr2h	equ	0xFDA
 47027                           fsr2l	equ	0xFD9
 47028                           status	equ	0xFD8
 47029                           
 47030 ;; *************** function _display *****************
 47031 ;; Defined at:
 47032 ;;		line 22 in file "segment.c"
 47033 ;; Parameters:    Size  Location     Type
 47034 ;;		None
 47035 ;; Auto vars:     Size  Location     Type
 47036 ;;		None
 47037 ;; Return value:  Size  Location     Type
 47038 ;;                  1    wreg      void 
 47039 ;; Registers used:
 47040 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh, cstack
 47041 ;; Tracked objects:
 47042 ;;		On entry : 0/0
 47043 ;;		On exit  : 0/0
 47044 ;;		Unchanged: 0/0
 47045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 47046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47050 ;;Total ram usage:        0 bytes
 47051 ;; Hardware stack levels used:    1
 47052 ;; Hardware stack levels required when called:    2
 47053 ;; This function calls:
 47054 ;;		_displayDigits
 47055 ;;		_displayString
 47056 ;; This function is called by:
 47057 ;;		_ISR
 47058 ;; This function uses a non-reentrant model
 47059 ;;
 47060                           
 47061                           	psect	text144
 47062  00996E                     __ptext144:
 47063                           	opt stack 0
 47064  00996E                     _display:
 47065                           	opt stack 12
 47066                           
 47067                           ;segment.c: 23: if (DISPLAY_MODE == 0) {displayDigits();}
 47068                           
 47069                           ; BSR set to: 0
 47070                           ;incstack = 0
 47071  00996E  0100               	movlb	0	; () banked
 47072  009970  51EE               	movf	_DISPLAY_MODE& (0+255),w,b
 47073  009972  B4D8               	btfsc	status,2,c
 47074                           
 47075                           ; BSR set to: 0
 47076  009974  ECC1  F01C         	call	_displayDigits	;wreg free
 47077                           
 47078                           ;segment.c: 24: if (DISPLAY_MODE == 1) {displayString();}
 47079  009978  0100               	movlb	0	; () banked
 47080  00997A  05EE               	decf	_DISPLAY_MODE& (0+255),w,b
 47081  00997C  A4D8               	btfss	status,2,c
 47082  00997E  0012               	return	
 47083                           
 47084                           ; BSR set to: 0
 47085  009980  ECE7  F032         	call	_displayString	;wreg free
 47086  009984  0012               	return	
 47087  009986                     __end_of_display:
 47088                           	opt stack 0
 47089                           tblptru	equ	0xFF8
 47090                           tblptrh	equ	0xFF7
 47091                           tblptrl	equ	0xFF6
 47092                           tablat	equ	0xFF5
 47093                           prodh	equ	0xFF4
 47094                           prodl	equ	0xFF3
 47095                           intcon	equ	0xFF2
 47096                           intcon2	equ	0xFF1
 47097                           indf0	equ	0xFEF
 47098                           postinc0	equ	0xFEE
 47099                           postdec0	equ	0xFED
 47100                           fsr0h	equ	0xFEA
 47101                           fsr0l	equ	0xFE9
 47102                           wreg	equ	0xFE8
 47103                           postinc1	equ	0xFE6
 47104                           postdec1	equ	0xFE5
 47105                           plusw1	equ	0xFE3
 47106                           fsr1h	equ	0xFE2
 47107                           fsr1l	equ	0xFE1
 47108                           indf2	equ	0xFDF
 47109                           postinc2	equ	0xFDE
 47110                           postdec2	equ	0xFDD
 47111                           plusw2	equ	0xFDB
 47112                           fsr2h	equ	0xFDA
 47113                           fsr2l	equ	0xFD9
 47114                           status	equ	0xFD8
 47115                           
 47116 ;; *************** function _displayString *****************
 47117 ;; Defined at:
 47118 ;;		line 174 in file "segment.c"
 47119 ;; Parameters:    Size  Location     Type
 47120 ;;		None
 47121 ;; Auto vars:     Size  Location     Type
 47122 ;;  i               1    1[COMRAM] unsigned char 
 47123 ;; Return value:  Size  Location     Type
 47124 ;;                  1    wreg      void 
 47125 ;; Registers used:
 47126 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 47127 ;; Tracked objects:
 47128 ;;		On entry : 0/0
 47129 ;;		On exit  : 0/0
 47130 ;;		Unchanged: 0/0
 47131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 47132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47133 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47134 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47135 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47136 ;;Total ram usage:        2 bytes
 47137 ;; Hardware stack levels used:    1
 47138 ;; This function calls:
 47139 ;;		Nothing
 47140 ;; This function is called by:
 47141 ;;		_display
 47142 ;; This function uses a non-reentrant model
 47143 ;;
 47144                           
 47145                           	psect	text145
 47146  0065CE                     __ptext145:
 47147                           	opt stack 0
 47148  0065CE                     _displayString:
 47149                           	opt stack 13
 47150                           
 47151                           ;segment.c: 176: static unsigned char letter[4];
 47152                           ;segment.c: 177: static unsigned char letter_counter;
 47153                           ;segment.c: 180: for(unsigned char i=0;i<4;i++) {
 47154                           
 47155                           ;incstack = 0
 47156  0065CE  0E00               	movlw	0
 47157  0065D0  6E08               	movwf	displayString@i,c
 47158  0065D2                     i2l22947:
 47159  0065D2  0E03               	movlw	3
 47160  0065D4  6408               	cpfsgt	displayString@i,c
 47161  0065D6  D001               	goto	i2l3009
 47162  0065D8  D02A               	goto	i2u3731_40
 47163  0065DA                     i2l3009:
 47164                           
 47165                           ;segment.c: 181: if(string_to_display[i] > (unsigned char) 'z') {letter[i] = 'z';}
 47166  0065DA  5008               	movf	displayString@i,w,c
 47167  0065DC  0D01               	mullw	1
 47168  0065DE  0EF8               	movlw	low _string_to_display
 47169  0065E0  24F3               	addwf	prodl,w,c
 47170  0065E2  6ED9               	movwf	fsr2l,c
 47171  0065E4  0E01               	movlw	high _string_to_display
 47172  0065E6  20F4               	addwfc	prodh,w,c
 47173  0065E8  6EDA               	movwf	fsr2h,c
 47174  0065EA  0E7A               	movlw	122
 47175  0065EC  64DF               	cpfsgt	indf2,c
 47176  0065EE  D00A               	goto	i2l3011
 47177  0065F0  5008               	movf	displayString@i,w,c
 47178  0065F2  0D01               	mullw	1
 47179  0065F4  0E00               	movlw	low displayString@letter
 47180  0065F6  24F3               	addwf	prodl,w,c
 47181  0065F8  6ED9               	movwf	fsr2l,c
 47182  0065FA  0E01               	movlw	high displayString@letter
 47183  0065FC  20F4               	addwfc	prodh,w,c
 47184  0065FE  6EDA               	movwf	fsr2h,c
 47185  006600  0E7A               	movlw	122
 47186  006602  D012               	goto	L28
 47187  006604                     i2l3011:
 47188                           
 47189                           ;segment.c: 182: else letter[i] = string_to_display[i] - '0';
 47190  006604  5008               	movf	displayString@i,w,c
 47191  006606  0D01               	mullw	1
 47192  006608  0E00               	movlw	low displayString@letter
 47193  00660A  24F3               	addwf	prodl,w,c
 47194  00660C  6ED9               	movwf	fsr2l,c
 47195  00660E  0E01               	movlw	high displayString@letter
 47196  006610  20F4               	addwfc	prodh,w,c
 47197  006612  6EDA               	movwf	fsr2h,c
 47198  006614  5008               	movf	displayString@i,w,c
 47199  006616  0D01               	mullw	1
 47200  006618  0EF8               	movlw	low _string_to_display
 47201  00661A  24F3               	addwf	prodl,w,c
 47202  00661C  6EE9               	movwf	fsr0l,c
 47203  00661E  0E01               	movlw	high _string_to_display
 47204  006620  20F4               	addwfc	prodh,w,c
 47205  006622  6EEA               	movwf	fsr0h,c
 47206  006624  50EF               	movf	indf0,w,c
 47207  006626  0FD0               	addlw	208
 47208  006628                     L28:
 47209  006628  6EDF               	movwf	indf2,c
 47210  00662A  2A08               	incf	displayString@i,f,c
 47211  00662C  D7D2               	goto	i2l22947
 47212  00662E                     i2u3731_40:
 47213                           
 47214                           ;segment.c: 183: }
 47215                           ;segment.c: 185: if(letter_counter == 0){
 47216  00662E  0100               	movlb	0	; () banked
 47217  006630  51E8               	movf	displayString@letter_counter& (0+255),w,b
 47218  006632  A4D8               	btfss	status,2,c
 47219  006634  D00F               	goto	i2l3013
 47220                           
 47221                           ; BSR set to: 0
 47222                           ;segment.c: 187: PORTC &= 0xF0;
 47223  006636  0EF0               	movlw	240
 47224  006638  1682               	andwf	3970,f,c	;volatile
 47225                           
 47226                           ; BSR set to: 0
 47227                           ;segment.c: 190: PORTD = seg_ascii[letter[0]];
 47228  00663A  0101               	movlb	1	; () banked
 47229  00663C  5100               	movf	displayString@letter& (0+255),w,b
 47230  00663E  0D01               	mullw	1
 47231  006640  0E20               	movlw	low _seg_ascii
 47232  006642  24F3               	addwf	prodl,w,c
 47233  006644  6EF6               	movwf	tblptrl,c
 47234  006646  0EF2               	movlw	high _seg_ascii
 47235  006648  20F4               	addwfc	prodh,w,c
 47236  00664A  6EF7               	movwf	tblptrh,c
 47237  00664C                     	if	0	;There are less than 3 active tblptr bytes
 47238  00664C                     	endif
 47239  00664C  0008               	tblrd		*
 47240  00664E  CFF5 FF83          	movff	tablat,3971	;volatile
 47241                           
 47242                           ; BSR set to: 1
 47243                           ;segment.c: 192: PORTC |= 0x1;
 47244  006652  8082               	bsf	3970,0,c	;volatile
 47245  006654                     i2l3013:
 47246                           
 47247                           ;segment.c: 193: }
 47248                           ;segment.c: 194: if(letter_counter == 1){
 47249                           
 47250                           ; BSR set to: 1
 47251  006654  0100               	movlb	0	; () banked
 47252  006656  05E8               	decf	displayString@letter_counter& (0+255),w,b
 47253  006658  A4D8               	btfss	status,2,c
 47254  00665A  D00F               	goto	i2l3014
 47255                           
 47256                           ; BSR set to: 0
 47257                           ;segment.c: 196: PORTC &= 0xF0;
 47258  00665C  0EF0               	movlw	240
 47259  00665E  1682               	andwf	3970,f,c	;volatile
 47260                           
 47261                           ; BSR set to: 0
 47262                           ;segment.c: 198: PORTD = seg_ascii[letter[1]];
 47263  006660  0101               	movlb	1	; () banked
 47264  006662  5101               	movf	(displayString@letter+1)& (0+255),w,b
 47265  006664  0D01               	mullw	1
 47266  006666  0E20               	movlw	low _seg_ascii
 47267  006668  24F3               	addwf	prodl,w,c
 47268  00666A  6EF6               	movwf	tblptrl,c
 47269  00666C  0EF2               	movlw	high _seg_ascii
 47270  00666E  20F4               	addwfc	prodh,w,c
 47271  006670  6EF7               	movwf	tblptrh,c
 47272  006672                     	if	0	;There are less than 3 active tblptr bytes
 47273  006672                     	endif
 47274  006672  0008               	tblrd		*
 47275  006674  CFF5 FF83          	movff	tablat,3971	;volatile
 47276                           
 47277                           ; BSR set to: 1
 47278                           ;segment.c: 200: PORTC |= 0x2;
 47279  006678  8282               	bsf	3970,1,c	;volatile
 47280  00667A                     i2l3014:
 47281                           
 47282                           ;segment.c: 201: }
 47283                           ;segment.c: 202: if(letter_counter == 2){
 47284                           
 47285                           ; BSR set to: 1
 47286  00667A  0E02               	movlw	2
 47287  00667C  0100               	movlb	0	; () banked
 47288  00667E  19E8               	xorwf	displayString@letter_counter& (0+255),w,b
 47289  006680  A4D8               	btfss	status,2,c
 47290  006682  D00F               	goto	i2l3015
 47291                           
 47292                           ; BSR set to: 0
 47293                           ;segment.c: 204: PORTC &= 0xF0;
 47294  006684  0EF0               	movlw	240
 47295  006686  1682               	andwf	3970,f,c	;volatile
 47296                           
 47297                           ; BSR set to: 0
 47298                           ;segment.c: 206: PORTD = seg_ascii[letter[2]];
 47299  006688  0101               	movlb	1	; () banked
 47300  00668A  5102               	movf	(displayString@letter+2)& (0+255),w,b
 47301  00668C  0D01               	mullw	1
 47302  00668E  0E20               	movlw	low _seg_ascii
 47303  006690  24F3               	addwf	prodl,w,c
 47304  006692  6EF6               	movwf	tblptrl,c
 47305  006694  0EF2               	movlw	high _seg_ascii
 47306  006696  20F4               	addwfc	prodh,w,c
 47307  006698  6EF7               	movwf	tblptrh,c
 47308  00669A                     	if	0	;There are less than 3 active tblptr bytes
 47309  00669A                     	endif
 47310  00669A  0008               	tblrd		*
 47311  00669C  CFF5 FF83          	movff	tablat,3971	;volatile
 47312                           
 47313                           ; BSR set to: 1
 47314                           ;segment.c: 208: PORTC |= 0x4;
 47315  0066A0  8482               	bsf	3970,2,c	;volatile
 47316  0066A2                     i2l3015:
 47317                           
 47318                           ;segment.c: 209: }
 47319                           ;segment.c: 210: if(letter_counter == 3){
 47320                           
 47321                           ; BSR set to: 1
 47322  0066A2  0E03               	movlw	3
 47323  0066A4  0100               	movlb	0	; () banked
 47324  0066A6  19E8               	xorwf	displayString@letter_counter& (0+255),w,b
 47325  0066A8  A4D8               	btfss	status,2,c
 47326  0066AA  D00F               	goto	i2l3016
 47327                           
 47328                           ; BSR set to: 0
 47329                           ;segment.c: 212: PORTC &= 0xF0;
 47330  0066AC  0EF0               	movlw	240
 47331  0066AE  1682               	andwf	3970,f,c	;volatile
 47332                           
 47333                           ; BSR set to: 0
 47334                           ;segment.c: 214: PORTD = seg_ascii[letter[3]];
 47335  0066B0  0101               	movlb	1	; () banked
 47336  0066B2  5103               	movf	(displayString@letter+3)& (0+255),w,b
 47337  0066B4  0D01               	mullw	1
 47338  0066B6  0E20               	movlw	low _seg_ascii
 47339  0066B8  24F3               	addwf	prodl,w,c
 47340  0066BA  6EF6               	movwf	tblptrl,c
 47341  0066BC  0EF2               	movlw	high _seg_ascii
 47342  0066BE  20F4               	addwfc	prodh,w,c
 47343  0066C0  6EF7               	movwf	tblptrh,c
 47344  0066C2                     	if	0	;There are less than 3 active tblptr bytes
 47345  0066C2                     	endif
 47346  0066C2  0008               	tblrd		*
 47347  0066C4  CFF5 FF83          	movff	tablat,3971	;volatile
 47348                           
 47349                           ; BSR set to: 1
 47350                           ;segment.c: 216: PORTC |= 0x8;
 47351  0066C8  8682               	bsf	3970,3,c	;volatile
 47352  0066CA                     i2l3016:
 47353                           
 47354                           ;segment.c: 217: }
 47355                           ;segment.c: 220: letter_counter++;
 47356                           
 47357                           ; BSR set to: 1
 47358  0066CA  0100               	movlb	0	; () banked
 47359  0066CC  2BE8               	incf	displayString@letter_counter& (0+255),f,b
 47360                           
 47361                           ; BSR set to: 0
 47362                           ;segment.c: 222: if(letter_counter > 3){letter_counter = 0;}
 47363  0066CE  0E03               	movlw	3
 47364  0066D0  65E8               	cpfsgt	displayString@letter_counter& (0+255),b
 47365  0066D2  0012               	return	
 47366                           
 47367                           ; BSR set to: 0
 47368  0066D4  0E00               	movlw	0
 47369  0066D6  6FE8               	movwf	displayString@letter_counter& (0+255),b
 47370  0066D8  0012               	return	
 47371  0066DA                     __end_of_displayString:
 47372                           	opt stack 0
 47373                           tblptru	equ	0xFF8
 47374                           tblptrh	equ	0xFF7
 47375                           tblptrl	equ	0xFF6
 47376                           tablat	equ	0xFF5
 47377                           prodh	equ	0xFF4
 47378                           prodl	equ	0xFF3
 47379                           intcon	equ	0xFF2
 47380                           intcon2	equ	0xFF1
 47381                           indf0	equ	0xFEF
 47382                           postinc0	equ	0xFEE
 47383                           postdec0	equ	0xFED
 47384                           fsr0h	equ	0xFEA
 47385                           fsr0l	equ	0xFE9
 47386                           wreg	equ	0xFE8
 47387                           postinc1	equ	0xFE6
 47388                           postdec1	equ	0xFE5
 47389                           plusw1	equ	0xFE3
 47390                           fsr1h	equ	0xFE2
 47391                           fsr1l	equ	0xFE1
 47392                           indf2	equ	0xFDF
 47393                           postinc2	equ	0xFDE
 47394                           postdec2	equ	0xFDD
 47395                           plusw2	equ	0xFDB
 47396                           fsr2h	equ	0xFDA
 47397                           fsr2l	equ	0xFD9
 47398                           status	equ	0xFD8
 47399                           
 47400 ;; *************** function _displayDigits *****************
 47401 ;; Defined at:
 47402 ;;		line 55 in file "segment.c"
 47403 ;; Parameters:    Size  Location     Type
 47404 ;;		None
 47405 ;; Auto vars:     Size  Location     Type
 47406 ;;  highByte        1    4[COMRAM] unsigned char 
 47407 ;;  lowByte         1    3[COMRAM] unsigned char 
 47408 ;; Return value:  Size  Location     Type
 47409 ;;                  1    wreg      void 
 47410 ;; Registers used:
 47411 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prod
      +l, prodh
 47412 ;; Tracked objects:
 47413 ;;		On entry : 0/0
 47414 ;;		On exit  : 0/0
 47415 ;;		Unchanged: 0/0
 47416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 47417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47418 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47419 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47420 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47421 ;;Total ram usage:        5 bytes
 47422 ;; Hardware stack levels used:    1
 47423 ;; Hardware stack levels required when called:    1
 47424 ;; This function calls:
 47425 ;;		___awdiv
 47426 ;;		___awmod
 47427 ;; This function is called by:
 47428 ;;		_display
 47429 ;; This function uses a non-reentrant model
 47430 ;;
 47431                           
 47432                           	psect	text146
 47433  003982                     __ptext146:
 47434                           	opt stack 0
 47435  003982                     _displayDigits:
 47436                           	opt stack 12
 47437                           
 47438                           ;segment.c: 61: static unsigned char digit[4];
 47439                           ;segment.c: 62: static unsigned char digit_counter;
 47440                           ;segment.c: 63: static signed int number_to_display_last;
 47441                           ;segment.c: 64: static signed int number_to_display_temp;
 47442                           ;segment.c: 67: if(number_to_display != number_to_display_last){
 47443                           
 47444                           ; BSR set to: 0
 47445                           ;incstack = 0
 47446  003982  0101               	movlb	1	; () banked
 47447  003984  5179               	movf	displayDigits@number_to_display_last& (0+255),w,b
 47448  003986  184B               	xorwf	_number_to_display,w,c
 47449  003988  E104               	bnz	i2u5934_40
 47450  00398A  517A               	movf	(displayDigits@number_to_display_last+1)& (0+255),w,b
 47451  00398C  184C               	xorwf	_number_to_display+1,w,c
 47452  00398E  B4D8               	btfsc	status,2,c
 47453  003990  D0B7               	goto	i2l2970
 47454  003992                     i2u5934_40:
 47455                           
 47456                           ; BSR set to: 1
 47457                           ;segment.c: 69: if(DIGIT_MODE == 0) {
 47458  003992  503A               	movf	_DIGIT_MODE,w,c
 47459  003994  A4D8               	btfss	status,2,c
 47460  003996  D066               	goto	i2l2971
 47461                           
 47462                           ; BSR set to: 1
 47463                           ;segment.c: 71: if(number_to_display >= 0){number_to_display_temp = number_to_display;}
 47464  003998  BE4C               	btfsc	_number_to_display+1,7,c
 47465  00399A  D004               	goto	i2l2972
 47466                           
 47467                           ; BSR set to: 1
 47468  00399C  C04B  F177         	movff	_number_to_display,displayDigits@number_to_display_temp
 47469  0039A0  C04C  F178         	movff	_number_to_display+1,displayDigits@number_to_display_temp+1
 47470  0039A4                     i2l2972:
 47471                           
 47472                           ; BSR set to: 1
 47473                           ;segment.c: 72: if(number_to_display < 0){number_to_display_temp = 0 - number_to_display
      +                          ;}
 47474                           
 47475                           ; BSR set to: 1
 47476  0039A4  AE4C               	btfss	_number_to_display+1,7,c
 47477  0039A6  D00C               	goto	i2l2973
 47478                           
 47479                           ; BSR set to: 1
 47480  0039A8  C04B  F007         	movff	_number_to_display,??_displayDigits
 47481  0039AC  C04C  F008         	movff	_number_to_display+1,??_displayDigits+1
 47482  0039B0  1E07               	comf	??_displayDigits,f,c
 47483  0039B2  1E08               	comf	??_displayDigits+1,f,c
 47484  0039B4  4A07               	infsnz	??_displayDigits,f,c
 47485  0039B6  2A08               	incf	??_displayDigits+1,f,c
 47486  0039B8  C007  F177         	movff	??_displayDigits,displayDigits@number_to_display_temp
 47487  0039BC  C008  F178         	movff	??_displayDigits+1,displayDigits@number_to_display_temp+1
 47488  0039C0                     i2l2973:
 47489                           
 47490                           ; BSR set to: 1
 47491                           ;segment.c: 74: digit[0] = (number_to_display_temp / 1000) % 10;
 47492                           
 47493                           ; BSR set to: 1
 47494  0039C0  0E0A               	movlw	10
 47495  0039C2  6EE6               	movwf	postinc1,c
 47496  0039C4  0E00               	movlw	0
 47497  0039C6  6EE6               	movwf	postinc1,c
 47498  0039C8  0EE8               	movlw	232
 47499  0039CA  6EE6               	movwf	postinc1,c
 47500  0039CC  0E03               	movlw	3
 47501  0039CE  6EE6               	movwf	postinc1,c
 47502  0039D0  C177  FFE6         	movff	displayDigits@number_to_display_temp,postinc1
 47503  0039D4  C178  FFE6         	movff	displayDigits@number_to_display_temp+1,postinc1
 47504  0039D8  EC9C  F030         	call	___awdiv	;wreg free
 47505  0039DC  C03F  FFE6         	movff	btemp,postinc1
 47506  0039E0  C040  FFE6         	movff	btemp+1,postinc1
 47507  0039E4  EC72  F034         	call	___awmod	;wreg free
 47508  0039E8  503F               	movf	btemp,w,c
 47509  0039EA  0100               	movlb	0	; () banked
 47510  0039EC  6FCC               	movwf	displayDigits@digit& (0+255),b
 47511                           
 47512                           ;segment.c: 75: digit[1] = (number_to_display_temp / 100) % 10;
 47513  0039EE  0E0A               	movlw	10
 47514  0039F0  6EE6               	movwf	postinc1,c
 47515  0039F2  0E00               	movlw	0
 47516  0039F4  6EE6               	movwf	postinc1,c
 47517  0039F6  0E64               	movlw	100
 47518  0039F8  6EE6               	movwf	postinc1,c
 47519  0039FA  0E00               	movlw	0
 47520  0039FC  6EE6               	movwf	postinc1,c
 47521  0039FE  C177  FFE6         	movff	displayDigits@number_to_display_temp,postinc1
 47522  003A02  C178  FFE6         	movff	displayDigits@number_to_display_temp+1,postinc1
 47523  003A06  EC9C  F030         	call	___awdiv	;wreg free
 47524  003A0A  C03F  FFE6         	movff	btemp,postinc1
 47525  003A0E  C040  FFE6         	movff	btemp+1,postinc1
 47526  003A12  EC72  F034         	call	___awmod	;wreg free
 47527  003A16  503F               	movf	btemp,w,c
 47528  003A18  0100               	movlb	0	; () banked
 47529  003A1A  6FCD               	movwf	(displayDigits@digit+1)& (0+255),b
 47530                           
 47531                           ;segment.c: 76: digit[2] = (number_to_display_temp / 10) % 10;
 47532  003A1C  0E0A               	movlw	10
 47533  003A1E  6EE6               	movwf	postinc1,c
 47534  003A20  0E00               	movlw	0
 47535  003A22  6EE6               	movwf	postinc1,c
 47536  003A24  0E0A               	movlw	10
 47537  003A26  6EE6               	movwf	postinc1,c
 47538  003A28  0E00               	movlw	0
 47539  003A2A  6EE6               	movwf	postinc1,c
 47540  003A2C  C177  FFE6         	movff	displayDigits@number_to_display_temp,postinc1
 47541  003A30  C178  FFE6         	movff	displayDigits@number_to_display_temp+1,postinc1
 47542  003A34  EC9C  F030         	call	___awdiv	;wreg free
 47543  003A38  C03F  FFE6         	movff	btemp,postinc1
 47544  003A3C  C040  FFE6         	movff	btemp+1,postinc1
 47545  003A40  EC72  F034         	call	___awmod	;wreg free
 47546  003A44  503F               	movf	btemp,w,c
 47547  003A46  0100               	movlb	0	; () banked
 47548  003A48  6FCE               	movwf	(displayDigits@digit+2)& (0+255),b
 47549                           
 47550                           ;segment.c: 77: digit[3] = number_to_display_temp % 10;
 47551  003A4A  0E0A               	movlw	10
 47552  003A4C  6EE6               	movwf	postinc1,c
 47553  003A4E  0E00               	movlw	0
 47554  003A50  6EE6               	movwf	postinc1,c
 47555  003A52  C177  FFE6         	movff	displayDigits@number_to_display_temp,postinc1
 47556  003A56  C178  FFE6         	movff	displayDigits@number_to_display_temp+1,postinc1
 47557  003A5A  EC72  F034         	call	___awmod	;wreg free
 47558  003A5E  503F               	movf	btemp,w,c
 47559  003A60  0100               	movlb	0	; () banked
 47560  003A62  6FCF               	movwf	(displayDigits@digit+3)& (0+255),b
 47561  003A64                     i2l2971:
 47562                           
 47563                           ;segment.c: 78: }
 47564                           ;segment.c: 80: if(DIGIT_MODE == 1) {
 47565                           
 47566                           ; BSR set to: 0
 47567  003A64  043A               	decf	_DIGIT_MODE,w,c
 47568  003A66  A4D8               	btfss	status,2,c
 47569  003A68  D023               	goto	i2l2974
 47570                           
 47571                           ;segment.c: 81: digit[0] = (number_to_display >> 12) % 16;
 47572  003A6A  C04B  F007         	movff	_number_to_display,??_displayDigits
 47573  003A6E  C04C  F008         	movff	_number_to_display+1,??_displayDigits+1
 47574  003A72  0E0C               	movlw	12
 47575  003A74  6E09               	movwf	(??_displayDigits+2)& (0+255),c
 47576  003A76                     i2u5939_45:
 47577  003A76  3408               	rlcf	??_displayDigits+1,w,c
 47578  003A78  3208               	rrcf	??_displayDigits+1,f,c
 47579  003A7A  3207               	rrcf	??_displayDigits,f,c
 47580  003A7C  2E09               	decfsz	(??_displayDigits+2)& (0+255),f,c
 47581  003A7E  D7FB               	goto	i2u5939_45
 47582  003A80  5007               	movf	??_displayDigits,w,c
 47583  003A82  0B0F               	andlw	15
 47584  003A84  0100               	movlb	0	; () banked
 47585  003A86  6FCC               	movwf	displayDigits@digit& (0+255),b
 47586                           
 47587                           ;segment.c: 82: digit[1] = (number_to_display >> 8) % 16;
 47588  003A88  504C               	movf	_number_to_display+1,w,c
 47589  003A8A  0B0F               	andlw	15
 47590  003A8C  6FCD               	movwf	(displayDigits@digit+1)& (0+255),b
 47591                           
 47592                           ;segment.c: 83: digit[2] = (number_to_display >> 4) % 16;
 47593  003A8E  C04B  F007         	movff	_number_to_display,??_displayDigits
 47594  003A92  C04C  F008         	movff	_number_to_display+1,??_displayDigits+1
 47595  003A96  0E04               	movlw	4
 47596  003A98  6E09               	movwf	(??_displayDigits+2)& (0+255),c
 47597  003A9A                     i2u5940_45:
 47598  003A9A  3408               	rlcf	??_displayDigits+1,w,c
 47599  003A9C  3208               	rrcf	??_displayDigits+1,f,c
 47600  003A9E  3207               	rrcf	??_displayDigits,f,c
 47601  003AA0  2E09               	decfsz	(??_displayDigits+2)& (0+255),f,c
 47602  003AA2  D7FB               	goto	i2u5940_45
 47603  003AA4  5007               	movf	??_displayDigits,w,c
 47604  003AA6  0B0F               	andlw	15
 47605  003AA8  6FCE               	movwf	(displayDigits@digit+2)& (0+255),b
 47606                           
 47607                           ;segment.c: 84: digit[3] = number_to_display % 16;
 47608  003AAA  504B               	movf	_number_to_display,w,c
 47609  003AAC  0B0F               	andlw	15
 47610  003AAE  6FCF               	movwf	(displayDigits@digit+3)& (0+255),b
 47611  003AB0                     i2l2974:
 47612                           
 47613                           ;segment.c: 85: }
 47614                           ;segment.c: 87: if(DIGIT_MODE == 2) {
 47615  003AB0  0E02               	movlw	2
 47616  003AB2  183A               	xorwf	_DIGIT_MODE,w,c
 47617  003AB4  A4D8               	btfss	status,2,c
 47618  003AB6  D020               	goto	i2l2975
 47619                           
 47620                           ;segment.c: 89: unsigned char lowByte = number_to_display & 0x7F;
 47621  003AB8  504B               	movf	_number_to_display,w,c
 47622  003ABA  0B7F               	andlw	127
 47623  003ABC  6E0A               	movwf	displayDigits@lowByte,c
 47624                           
 47625                           ;segment.c: 90: unsigned char highByte = (number_to_display >> 7) & 0x7F;
 47626  003ABE  C04B  F007         	movff	_number_to_display,??_displayDigits
 47627  003AC2  C04C  F008         	movff	_number_to_display+1,??_displayDigits+1
 47628  003AC6  0E07               	movlw	7
 47629  003AC8  6E09               	movwf	(??_displayDigits+2)& (0+255),c
 47630  003ACA                     i2u5942_45:
 47631  003ACA  3408               	rlcf	??_displayDigits+1,w,c
 47632  003ACC  3208               	rrcf	??_displayDigits+1,f,c
 47633  003ACE  3207               	rrcf	??_displayDigits,f,c
 47634  003AD0  2E09               	decfsz	(??_displayDigits+2)& (0+255),f,c
 47635  003AD2  D7FB               	goto	i2u5942_45
 47636  003AD4  5007               	movf	??_displayDigits,w,c
 47637  003AD6  0B7F               	andlw	127
 47638  003AD8  6E0B               	movwf	displayDigits@highByte,c
 47639                           
 47640                           ;segment.c: 92: digit[0] = (highByte >> 4) % 0x8;
 47641  003ADA  380B               	swapf	displayDigits@highByte,w,c
 47642  003ADC  0B0F               	andlw	15
 47643  003ADE  0B07               	andlw	7
 47644  003AE0  0100               	movlb	0	; () banked
 47645  003AE2  6FCC               	movwf	displayDigits@digit& (0+255),b
 47646                           
 47647                           ;segment.c: 93: digit[1] = highByte % 16;
 47648  003AE4  500B               	movf	displayDigits@highByte,w,c
 47649  003AE6  0B0F               	andlw	15
 47650  003AE8  6FCD               	movwf	(displayDigits@digit+1)& (0+255),b
 47651                           
 47652                           ;segment.c: 94: digit[2] = (lowByte >> 4) % 0x8;
 47653  003AEA  380A               	swapf	displayDigits@lowByte,w,c
 47654  003AEC  0B0F               	andlw	15
 47655  003AEE  0B07               	andlw	7
 47656  003AF0  6FCE               	movwf	(displayDigits@digit+2)& (0+255),b
 47657                           
 47658                           ;segment.c: 95: digit[3] = lowByte % 16;
 47659  003AF2  500A               	movf	displayDigits@lowByte,w,c
 47660  003AF4  0B0F               	andlw	15
 47661  003AF6  6FCF               	movwf	(displayDigits@digit+3)& (0+255),b
 47662  003AF8                     i2l2975:
 47663                           
 47664                           ;segment.c: 97: }
 47665                           ;segment.c: 100: number_to_display_last = number_to_display;
 47666                           
 47667                           ; BSR set to: 0
 47668  003AF8  C04B  F179         	movff	_number_to_display,displayDigits@number_to_display_last
 47669  003AFC  C04C  F17A         	movff	_number_to_display+1,displayDigits@number_to_display_last+1
 47670  003B00                     i2l2970:
 47671                           
 47672                           ;segment.c: 101: }
 47673                           ;segment.c: 106: if (DIGIT_MODE == 0 || DIGIT_MODE == 1 || DIGIT_MODE == 2) {
 47674  003B00  503A               	movf	_DIGIT_MODE,w,c
 47675  003B02  B4D8               	btfsc	status,2,c
 47676  003B04  D007               	goto	i2u5945_40
 47677  003B06  043A               	decf	_DIGIT_MODE,w,c
 47678  003B08  B4D8               	btfsc	status,2,c
 47679  003B0A  D004               	goto	i2u5945_40
 47680  003B0C  0E02               	movlw	2
 47681  003B0E  183A               	xorwf	_DIGIT_MODE,w,c
 47682  003B10  A4D8               	btfss	status,2,c
 47683  003B12  D08B               	goto	i2l2999
 47684  003B14                     i2u5945_40:
 47685                           
 47686                           ;segment.c: 111: if(digit_counter == 0){
 47687  003B14  0100               	movlb	0	; () banked
 47688  003B16  51E9               	movf	displayDigits@digit_counter& (0+255),w,b
 47689  003B18  A4D8               	btfss	status,2,c
 47690  003B1A  D022               	goto	i2l2986
 47691                           
 47692                           ; BSR set to: 0
 47693                           ;segment.c: 112: RC3 = 0;
 47694  003B1C  9682               	bcf	3970,3,c	;volatile
 47695                           
 47696                           ; BSR set to: 0
 47697                           ;segment.c: 116: if(DIGIT_MODE == 0 && number_to_display < 0){
 47698  003B1E  503A               	movf	_DIGIT_MODE,w,c
 47699  003B20  B4D8               	btfsc	status,2,c
 47700                           
 47701                           ; BSR set to: 0
 47702  003B22  AE4C               	btfss	_number_to_display+1,7,c
 47703  003B24  D00A               	goto	i2l2980
 47704                           
 47705                           ; BSR set to: 0
 47706                           ;segment.c: 119: if(digit[1] > 0){PORTD = 0x40; RC0 = 1;}
 47707  003B26  51CD               	movf	(displayDigits@digit+1)& (0+255),w,b
 47708  003B28  B4D8               	btfsc	status,2,c
 47709  003B2A  D003               	goto	i2l2981
 47710                           
 47711                           ; BSR set to: 0
 47712  003B2C  0E40               	movlw	64
 47713  003B2E  6E83               	movwf	3971,c	;volatile
 47714                           
 47715                           ; BSR set to: 0
 47716  003B30  8082               	bsf	3970,0,c	;volatile
 47717  003B32                     i2l2981:
 47718                           
 47719                           ; BSR set to: 0
 47720                           ;segment.c: 120: if(light_decimal_points == 1){PORTD |= 0x80;}
 47721                           
 47722                           ; BSR set to: 0
 47723  003B32  A006               	btfss	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 47724  003B34  D015               	goto	i2l2986
 47725                           
 47726                           ; BSR set to: 0
 47727  003B36  8E83               	bsf	3971,7,c	;volatile
 47728                           
 47729                           ; BSR set to: 0
 47730                           ;segment.c: 121: }
 47731  003B38  D013               	goto	i2l2986
 47732  003B3A                     i2l2980:
 47733                           
 47734                           ; BSR set to: 0
 47735                           ;segment.c: 123: else {
 47736                           ;segment.c: 124: PORTD = seg_bcd_hex[digit[0]];
 47737                           
 47738                           ; BSR set to: 0
 47739  003B3A  51CC               	movf	displayDigits@digit& (0+255),w,b
 47740  003B3C  0D01               	mullw	1
 47741  003B3E  0E59               	movlw	low _seg_bcd_hex
 47742  003B40  24F3               	addwf	prodl,w,c
 47743  003B42  6EF6               	movwf	tblptrl,c
 47744  003B44  0EF3               	movlw	high _seg_bcd_hex
 47745  003B46  20F4               	addwfc	prodh,w,c
 47746  003B48  6EF7               	movwf	tblptrh,c
 47747  003B4A                     	if	0	;There are less than 3 active tblptr bytes
 47748  003B4A                     	endif
 47749  003B4A  0008               	tblrd		*
 47750  003B4C  CFF5 FF83          	movff	tablat,3971	;volatile
 47751                           
 47752                           ; BSR set to: 0
 47753                           ;segment.c: 125: if(light_decimal_points == 1){PORTD |= 0x80;}
 47754  003B50  B006               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 47755                           
 47756                           ; BSR set to: 0
 47757  003B52  8E83               	bsf	3971,7,c	;volatile
 47758                           
 47759                           ; BSR set to: 0
 47760                           ;segment.c: 126: if(digit[0] == 0){RC0 = 0;}
 47761                           
 47762                           ; BSR set to: 0
 47763  003B54  51CC               	movf	displayDigits@digit& (0+255),w,b
 47764  003B56  A4D8               	btfss	status,2,c
 47765  003B58  D002               	goto	i2l2985
 47766                           
 47767                           ; BSR set to: 0
 47768  003B5A  9082               	bcf	3970,0,c	;volatile
 47769  003B5C  D001               	goto	i2l2986
 47770  003B5E                     i2l2985:
 47771                           
 47772                           ; BSR set to: 0
 47773                           ;segment.c: 127: else{RC0 = 1;}
 47774  003B5E  8082               	bsf	3970,0,c	;volatile
 47775  003B60                     i2l2986:
 47776                           
 47777                           ; BSR set to: 0
 47778                           ;segment.c: 128: }
 47779                           ;segment.c: 129: }
 47780                           ;segment.c: 130: if(digit_counter == 1){
 47781                           
 47782                           ; BSR set to: 0
 47783                           
 47784                           ; BSR set to: 0
 47785                           
 47786                           ; BSR set to: 0
 47787  003B60  05E9               	decf	displayDigits@digit_counter& (0+255),w,b
 47788  003B62  A4D8               	btfss	status,2,c
 47789  003B64  D024               	goto	i2l2992
 47790                           
 47791                           ; BSR set to: 0
 47792                           ;segment.c: 131: RC0 = 0;
 47793  003B66  9082               	bcf	3970,0,c	;volatile
 47794                           
 47795                           ; BSR set to: 0
 47796                           ;segment.c: 134: PORTD = seg_bcd_hex[digit[1]];
 47797  003B68  51CD               	movf	(displayDigits@digit+1)& (0+255),w,b
 47798  003B6A  0D01               	mullw	1
 47799  003B6C  0E59               	movlw	low _seg_bcd_hex
 47800  003B6E  24F3               	addwf	prodl,w,c
 47801  003B70  6EF6               	movwf	tblptrl,c
 47802  003B72  0EF3               	movlw	high _seg_bcd_hex
 47803  003B74  20F4               	addwfc	prodh,w,c
 47804  003B76  6EF7               	movwf	tblptrh,c
 47805  003B78                     	if	0	;There are less than 3 active tblptr bytes
 47806  003B78                     	endif
 47807  003B78  0008               	tblrd		*
 47808  003B7A  CFF5 FF83          	movff	tablat,3971	;volatile
 47809                           
 47810                           ; BSR set to: 0
 47811                           ;segment.c: 135: if(light_decimal_points == 1){PORTD |= 0x80;}
 47812  003B7E  B006               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 47813                           
 47814                           ; BSR set to: 0
 47815  003B80  8E83               	bsf	3971,7,c	;volatile
 47816                           
 47817                           ; BSR set to: 0
 47818                           ;segment.c: 136: if(digit[0] == 0 && digit[1] == 0){RC1 = 0;}
 47819                           
 47820                           ; BSR set to: 0
 47821  003B82  51CC               	movf	displayDigits@digit& (0+255),w,b
 47822  003B84  A4D8               	btfss	status,2,c
 47823  003B86  D005               	goto	i2l2989
 47824                           
 47825                           ; BSR set to: 0
 47826  003B88  51CD               	movf	(displayDigits@digit+1)& (0+255),w,b
 47827  003B8A  A4D8               	btfss	status,2,c
 47828  003B8C  D002               	goto	i2l2989
 47829                           
 47830                           ; BSR set to: 0
 47831  003B8E  9282               	bcf	3970,1,c	;volatile
 47832  003B90  D001               	goto	i2l2990
 47833  003B92                     i2l2989:
 47834                           
 47835                           ; BSR set to: 0
 47836                           ;segment.c: 137: else{RC1 = 1;}
 47837  003B92  8282               	bsf	3970,1,c	;volatile
 47838  003B94                     i2l2990:
 47839                           
 47840                           ; BSR set to: 0
 47841                           ;segment.c: 139: if(DIGIT_MODE == 0 && number_to_display < 0){
 47842                           
 47843                           ; BSR set to: 0
 47844  003B94  503A               	movf	_DIGIT_MODE,w,c
 47845  003B96  B4D8               	btfsc	status,2,c
 47846                           
 47847                           ; BSR set to: 0
 47848  003B98  AE4C               	btfss	_number_to_display+1,7,c
 47849  003B9A  D009               	goto	i2l2992
 47850                           
 47851                           ; BSR set to: 0
 47852                           ;segment.c: 141: if(digit[2] > 0 && digit[1] == 0){PORTD = 0x40; RC1 = 1;}
 47853  003B9C  51CE               	movf	(displayDigits@digit+2)& (0+255),w,b
 47854  003B9E  B4D8               	btfsc	status,2,c
 47855  003BA0  D006               	goto	i2l2992
 47856                           
 47857                           ; BSR set to: 0
 47858  003BA2  51CD               	movf	(displayDigits@digit+1)& (0+255),w,b
 47859  003BA4  A4D8               	btfss	status,2,c
 47860  003BA6  D003               	goto	i2l2992
 47861                           
 47862                           ; BSR set to: 0
 47863  003BA8  0E40               	movlw	64
 47864  003BAA  6E83               	movwf	3971,c	;volatile
 47865                           
 47866                           ; BSR set to: 0
 47867  003BAC  8282               	bsf	3970,1,c	;volatile
 47868  003BAE                     i2l2992:
 47869                           
 47870                           ; BSR set to: 0
 47871                           ;segment.c: 142: }
 47872                           ;segment.c: 143: }
 47873                           ;segment.c: 144: if(digit_counter == 2){
 47874                           
 47875                           ; BSR set to: 0
 47876                           
 47877                           ; BSR set to: 0
 47878                           
 47879                           ; BSR set to: 0
 47880  003BAE  0E02               	movlw	2
 47881  003BB0  19E9               	xorwf	displayDigits@digit_counter& (0+255),w,b
 47882  003BB2  A4D8               	btfss	status,2,c
 47883  003BB4  D027               	goto	i2l2998
 47884                           
 47885                           ; BSR set to: 0
 47886                           ;segment.c: 145: RC1 = 0;
 47887  003BB6  9282               	bcf	3970,1,c	;volatile
 47888                           
 47889                           ; BSR set to: 0
 47890                           ;segment.c: 148: PORTD = seg_bcd_hex[digit[2]];
 47891  003BB8  51CE               	movf	(displayDigits@digit+2)& (0+255),w,b
 47892  003BBA  0D01               	mullw	1
 47893  003BBC  0E59               	movlw	low _seg_bcd_hex
 47894  003BBE  24F3               	addwf	prodl,w,c
 47895  003BC0  6EF6               	movwf	tblptrl,c
 47896  003BC2  0EF3               	movlw	high _seg_bcd_hex
 47897  003BC4  20F4               	addwfc	prodh,w,c
 47898  003BC6  6EF7               	movwf	tblptrh,c
 47899  003BC8                     	if	0	;There are less than 3 active tblptr bytes
 47900  003BC8                     	endif
 47901  003BC8  0008               	tblrd		*
 47902  003BCA  CFF5 FF83          	movff	tablat,3971	;volatile
 47903                           
 47904                           ; BSR set to: 0
 47905                           ;segment.c: 149: if(light_decimal_points == 1){PORTD |= 0x80;}
 47906  003BCE  B006               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 47907                           
 47908                           ; BSR set to: 0
 47909  003BD0  8E83               	bsf	3971,7,c	;volatile
 47910                           
 47911                           ; BSR set to: 0
 47912                           ;segment.c: 150: if(digit[0] == 0 && digit[1] == 0 && digit[2] == 0){RC2 = 0;}
 47913                           
 47914                           ; BSR set to: 0
 47915  003BD2  51CC               	movf	displayDigits@digit& (0+255),w,b
 47916  003BD4  A4D8               	btfss	status,2,c
 47917  003BD6  D008               	goto	i2l2995
 47918                           
 47919                           ; BSR set to: 0
 47920  003BD8  51CD               	movf	(displayDigits@digit+1)& (0+255),w,b
 47921  003BDA  A4D8               	btfss	status,2,c
 47922  003BDC  D005               	goto	i2l2995
 47923                           
 47924                           ; BSR set to: 0
 47925  003BDE  51CE               	movf	(displayDigits@digit+2)& (0+255),w,b
 47926  003BE0  A4D8               	btfss	status,2,c
 47927  003BE2  D002               	goto	i2l2995
 47928                           
 47929                           ; BSR set to: 0
 47930  003BE4  9482               	bcf	3970,2,c	;volatile
 47931  003BE6  D001               	goto	i2l2996
 47932  003BE8                     i2l2995:
 47933                           
 47934                           ; BSR set to: 0
 47935                           ;segment.c: 151: else{RC2 = 1;}
 47936  003BE8  8482               	bsf	3970,2,c	;volatile
 47937  003BEA                     i2l2996:
 47938                           
 47939                           ; BSR set to: 0
 47940                           ;segment.c: 153: if(DIGIT_MODE == 0 && number_to_display < 0){
 47941                           
 47942                           ; BSR set to: 0
 47943  003BEA  503A               	movf	_DIGIT_MODE,w,c
 47944  003BEC  B4D8               	btfsc	status,2,c
 47945                           
 47946                           ; BSR set to: 0
 47947  003BEE  AE4C               	btfss	_number_to_display+1,7,c
 47948  003BF0  D009               	goto	i2l2998
 47949                           
 47950                           ; BSR set to: 0
 47951                           ;segment.c: 154: if(digit[3] > 0 && digit[2] == 0){PORTD = 0x40; RC2 = 1;}
 47952  003BF2  51CF               	movf	(displayDigits@digit+3)& (0+255),w,b
 47953  003BF4  B4D8               	btfsc	status,2,c
 47954  003BF6  D006               	goto	i2l2998
 47955                           
 47956                           ; BSR set to: 0
 47957  003BF8  51CE               	movf	(displayDigits@digit+2)& (0+255),w,b
 47958  003BFA  A4D8               	btfss	status,2,c
 47959  003BFC  D003               	goto	i2l2998
 47960                           
 47961                           ; BSR set to: 0
 47962  003BFE  0E40               	movlw	64
 47963  003C00  6E83               	movwf	3971,c	;volatile
 47964                           
 47965                           ; BSR set to: 0
 47966  003C02  8482               	bsf	3970,2,c	;volatile
 47967  003C04                     i2l2998:
 47968                           
 47969                           ; BSR set to: 0
 47970                           ;segment.c: 155: }
 47971                           ;segment.c: 156: }
 47972                           ;segment.c: 157: if(digit_counter == 3){
 47973                           
 47974                           ; BSR set to: 0
 47975                           
 47976                           ; BSR set to: 0
 47977                           
 47978                           ; BSR set to: 0
 47979  003C04  0E03               	movlw	3
 47980  003C06  19E9               	xorwf	displayDigits@digit_counter& (0+255),w,b
 47981  003C08  A4D8               	btfss	status,2,c
 47982  003C0A  D00F               	goto	i2l2999
 47983                           
 47984                           ; BSR set to: 0
 47985                           ;segment.c: 158: RC2 = 0;
 47986  003C0C  9482               	bcf	3970,2,c	;volatile
 47987                           
 47988                           ; BSR set to: 0
 47989                           ;segment.c: 161: PORTD = seg_bcd_hex[digit[3]];
 47990  003C0E  51CF               	movf	(displayDigits@digit+3)& (0+255),w,b
 47991  003C10  0D01               	mullw	1
 47992  003C12  0E59               	movlw	low _seg_bcd_hex
 47993  003C14  24F3               	addwf	prodl,w,c
 47994  003C16  6EF6               	movwf	tblptrl,c
 47995  003C18  0EF3               	movlw	high _seg_bcd_hex
 47996  003C1A  20F4               	addwfc	prodh,w,c
 47997  003C1C  6EF7               	movwf	tblptrh,c
 47998  003C1E                     	if	0	;There are less than 3 active tblptr bytes
 47999  003C1E                     	endif
 48000  003C1E  0008               	tblrd		*
 48001  003C20  CFF5 FF83          	movff	tablat,3971	;volatile
 48002                           
 48003                           ; BSR set to: 0
 48004                           ;segment.c: 162: if(light_decimal_points == 1){PORTD |= 0x80;}
 48005  003C24  B006               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 48006                           
 48007                           ; BSR set to: 0
 48008  003C26  8E83               	bsf	3971,7,c	;volatile
 48009                           
 48010                           ; BSR set to: 0
 48011                           ;segment.c: 163: RC3 = 1;
 48012                           
 48013                           ; BSR set to: 0
 48014  003C28  8682               	bsf	3970,3,c	;volatile
 48015  003C2A                     i2l2999:
 48016                           
 48017                           ;segment.c: 164: }
 48018                           ;segment.c: 165: }
 48019                           ;segment.c: 168: digit_counter++;
 48020                           
 48021                           ; BSR set to: 0
 48022  003C2A  0100               	movlb	0	; () banked
 48023  003C2C  2BE9               	incf	displayDigits@digit_counter& (0+255),f,b
 48024                           
 48025                           ; BSR set to: 0
 48026                           ;segment.c: 169: if(digit_counter > 3){digit_counter = 0;}
 48027  003C2E  0E03               	movlw	3
 48028  003C30  65E9               	cpfsgt	displayDigits@digit_counter& (0+255),b
 48029  003C32  0012               	return	
 48030                           
 48031                           ; BSR set to: 0
 48032  003C34  0E00               	movlw	0
 48033  003C36  6FE9               	movwf	displayDigits@digit_counter& (0+255),b
 48034  003C38  0012               	return	
 48035  003C3A                     __end_of_displayDigits:
 48036                           	opt stack 0
 48037                           tblptru	equ	0xFF8
 48038                           tblptrh	equ	0xFF7
 48039                           tblptrl	equ	0xFF6
 48040                           tablat	equ	0xFF5
 48041                           prodh	equ	0xFF4
 48042                           prodl	equ	0xFF3
 48043                           intcon	equ	0xFF2
 48044                           intcon2	equ	0xFF1
 48045                           indf0	equ	0xFEF
 48046                           postinc0	equ	0xFEE
 48047                           postdec0	equ	0xFED
 48048                           fsr0h	equ	0xFEA
 48049                           fsr0l	equ	0xFE9
 48050                           wreg	equ	0xFE8
 48051                           postinc1	equ	0xFE6
 48052                           postdec1	equ	0xFE5
 48053                           plusw1	equ	0xFE3
 48054                           fsr1h	equ	0xFE2
 48055                           fsr1l	equ	0xFE1
 48056                           indf2	equ	0xFDF
 48057                           postinc2	equ	0xFDE
 48058                           postdec2	equ	0xFDD
 48059                           plusw2	equ	0xFDB
 48060                           fsr2h	equ	0xFDA
 48061                           fsr2l	equ	0xFD9
 48062                           status	equ	0xFD8
 48063                           tblptru	equ	0xFF8
 48064                           tblptrh	equ	0xFF7
 48065                           tblptrl	equ	0xFF6
 48066                           tablat	equ	0xFF5
 48067                           prodh	equ	0xFF4
 48068                           prodl	equ	0xFF3
 48069                           intcon	equ	0xFF2
 48070                           intcon2	equ	0xFF1
 48071                           indf0	equ	0xFEF
 48072                           postinc0	equ	0xFEE
 48073                           postdec0	equ	0xFED
 48074                           fsr0h	equ	0xFEA
 48075                           fsr0l	equ	0xFE9
 48076                           wreg	equ	0xFE8
 48077                           postinc1	equ	0xFE6
 48078                           postdec1	equ	0xFE5
 48079                           plusw1	equ	0xFE3
 48080                           fsr1h	equ	0xFE2
 48081                           fsr1l	equ	0xFE1
 48082                           indf2	equ	0xFDF
 48083                           postinc2	equ	0xFDE
 48084                           postdec2	equ	0xFDD
 48085                           plusw2	equ	0xFDB
 48086                           fsr2h	equ	0xFDA
 48087                           fsr2l	equ	0xFD9
 48088                           status	equ	0xFD8
 48089                           
 48090                           	psect	rparam
 48091  0000                     tblptru	equ	0xFF8
 48092                           tblptrh	equ	0xFF7
 48093                           tblptrl	equ	0xFF6
 48094                           tablat	equ	0xFF5
 48095                           prodh	equ	0xFF4
 48096                           prodl	equ	0xFF3
 48097                           intcon	equ	0xFF2
 48098                           intcon2	equ	0xFF1
 48099                           indf0	equ	0xFEF
 48100                           postinc0	equ	0xFEE
 48101                           postdec0	equ	0xFED
 48102                           fsr0h	equ	0xFEA
 48103                           fsr0l	equ	0xFE9
 48104                           wreg	equ	0xFE8
 48105                           postinc1	equ	0xFE6
 48106                           postdec1	equ	0xFE5
 48107                           plusw1	equ	0xFE3
 48108                           fsr1h	equ	0xFE2
 48109                           fsr1l	equ	0xFE1
 48110                           indf2	equ	0xFDF
 48111                           postinc2	equ	0xFDE
 48112                           postdec2	equ	0xFDD
 48113                           plusw2	equ	0xFDB
 48114                           fsr2h	equ	0xFDA
 48115                           fsr2l	equ	0xFD9
 48116                           status	equ	0xFD8
 48117                           
 48118                           	psect	temp
 48119  00003F                     btemp:
 48120                           	opt stack 0
 48121  00003F                     	ds	12
 48122  0000                     wtemp0	set	btemp
 48123  0000                     wtemp1	set	btemp+2
 48124  0000                     wtemp2	set	btemp+4
 48125  0000                     wtemp3	set	btemp+6
 48126  0000                     wtemp4	set	btemp+8
 48127  0000                     wtemp5	set	btemp+10
 48128  0000                     wtemp6	set	btemp+1
 48129  0000                     ttemp0	set	btemp
 48130  0000                     ttemp1	set	btemp+3
 48131  0000                     ttemp2	set	btemp+6
 48132  0000                     ttemp3	set	btemp+9
 48133  0000                     ltemp0	set	btemp
 48134  0000                     ltemp1	set	btemp+4
 48135  0000                     ltemp2	set	btemp+8
 48136                           tblptru	equ	0xFF8
 48137                           tblptrh	equ	0xFF7
 48138                           tblptrl	equ	0xFF6
 48139                           tablat	equ	0xFF5
 48140                           prodh	equ	0xFF4
 48141                           prodl	equ	0xFF3
 48142                           intcon	equ	0xFF2
 48143                           intcon2	equ	0xFF1
 48144                           indf0	equ	0xFEF
 48145                           postinc0	equ	0xFEE
 48146                           postdec0	equ	0xFED
 48147                           fsr0h	equ	0xFEA
 48148                           fsr0l	equ	0xFE9
 48149                           wreg	equ	0xFE8
 48150                           postinc1	equ	0xFE6
 48151                           postdec1	equ	0xFE5
 48152                           plusw1	equ	0xFE3
 48153                           fsr1h	equ	0xFE2
 48154                           fsr1l	equ	0xFE1
 48155                           indf2	equ	0xFDF
 48156                           postinc2	equ	0xFDE
 48157                           postdec2	equ	0xFDD
 48158                           plusw2	equ	0xFDB
 48159                           fsr2h	equ	0xFDA
 48160                           fsr2l	equ	0xFD9
 48161                           status	equ	0xFD8


Data Sizes:
    Strings     667
    Constant    5281
    Data        242
    BSS         381
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           83     35      70
    BANK0           160    108     160
    BANK1           256     80     256
    BANK2           256      2     231
    BANK3           256      0     137
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_61(CODE[5]), STR_59(CODE[5]), STR_56(CODE[5]), STR_54(CODE[5]), 
		 -> STR_44(CODE[5]), STR_43(CODE[5]), STR_41(CODE[5]), STR_9(CODE[5]), 
		 -> STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[5]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 5
		 -> string_to_display(BANK1[5]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 5
		 -> string_to_display(BANK1[5]), 

    arpeggioPtr	PTR unsigned char  size(2) Largest target is 16
		 -> NULL(NULL[0]), ARPEGGIO_RANDOM(BANK2[16]), ARPEGGIO_SORTED(BANK2[16]), ARPEGGIO(BANK1[16]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 5
		 -> string_to_display(BANK1[5]), 

    playThisNote8@mode_p	PTR unsigned char  size(2) Largest target is 15
		 -> locrian_key(CODE[15]), aeolian_key(CODE[15]), mixolydian_key(CODE[15]), lydian_key(CODE[15]), 
		 -> phrygian_key(CODE[15]), dorian_key(CODE[15]), ionian_key(CODE[15]), 

    playSeventh@seventh_p	PTR unsigned char  size(2) Largest target is 4
		 -> diminished_7th(BANK2[4]), half_diminished_7th(BANK2[4]), minor_7th(BANK2[4]), major_7th(BANK2[4]), 
		 -> dominant_7th(BANK2[4]), 

    playTriad@triad_p	PTR unsigned char  size(2) Largest target is 3
		 -> diminished_triad(BANK2[3]), augmented_triad(BANK2[3]), minor_triad(BANK2[3]), major_triad(BANK1[3]), 

    Lcd_Print_String@a	PTR unsigned char  size(2) Largest target is 2397
		 -> STR_75(CODE[16]), STR_74(CODE[12]), STR_73(CODE[10]), STR_72(CODE[12]), 
		 -> STR_71(CODE[10]), STR_70(CODE[12]), STR_69(CODE[10]), STR_68(CODE[12]), 
		 -> STR_67(CODE[10]), STR_66(CODE[12]), STR_65(CODE[13]), STR_64(CODE[15]), 
		 -> STR_63(CODE[15]), STR_62(CODE[16]), STR_60(CODE[14]), STR_58(CODE[12]), 
		 -> STR_57(CODE[15]), STR_55(CODE[14]), STR_53(CODE[15]), STR_52(CODE[17]), 
		 -> STR_51(CODE[9]), STR_50(CODE[10]), STR_49(CODE[13]), STR_48(CODE[13]), 
		 -> STR_47(CODE[17]), STR_46(CODE[14]), STR_45(CODE[14]), STR_42(CODE[15]), 
		 -> STR_40(CODE[16]), STR_39(CODE[17]), STR_38(CODE[13]), STR_37(CODE[17]), 
		 -> STR_36(CODE[8]), STR_35(CODE[8]), STR_34(CODE[12]), STR_33(CODE[17]), 
		 -> STR_32(CODE[15]), STR_31(CODE[14]), STR_30(CODE[17]), STR_29(CODE[15]), 
		 -> STR_28(CODE[17]), STR_27(CODE[14]), STR_26(CODE[16]), STR_25(CODE[14]), 
		 -> STR_24(CODE[12]), LCD_STRINGS(CODE[2397]), STR_23(CODE[13]), STR_22(CODE[17]), 
		 -> STR_21(CODE[16]), STR_20(CODE[5]), STR_19(CODE[11]), STR_18(CODE[11]), 
		 -> STR_17(CODE[11]), STR_16(CODE[10]), STR_15(CODE[11]), STR_14(CODE[11]), 
		 -> STR_13(CODE[11]), STR_12(CODE[10]), string2display(BANK1[5]), STR_11(CODE[17]), 
		 -> STR_10(CODE[17]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_playArpeggio
    _playArpeggio->_sort_pitches
    _display->_displayDigits

Critical Paths under _main in BANK0

    _main->_calculate_pulse_length
    _panic_button->_controlChange
    _Lcd_Clear->_Lcd_Cmd
    _Function_H_6->_Function_H_6_1
    _Function_H_2->_calculate_pulse_length
    _exitFunction->_Lcd_Print_String
    _Function_G_3->_Lcd_Print_String
    _loadFromEEPROM->_calculate_pulse_length
    _calculate_pulse_length->___fltol
    _exitLoad->_Lcd_Print_String
    _exitSave->_Lcd_Print_String
    _eepromExit->_Lcd_Print_String
    _Function_D->_Function_D_3
    _Function_D->_Function_D_4
    _Function_D->_Function_D_5
    _setControllerNumbers->_Lcd_Print_String
    _calculate_alpha->___fldiv
    ___fldiv->___flmul
    _Function_C->_Function_C_2
    _Function_C->_Function_C_3
    _digitalInputs->_processOctave
    _processOctave->_doTheUnLatch
    _doTheUnLatch->_playThisNote8
    _doTheLatch->_strcpy
    _processKeyboard->_keyboard_eight_note_efficient
    _keyboard_sharps_only_efficient->_playThisNotePentatonic
    _playThisNotePentatonic->_add_notes_to_arpeggio
    _keyboard_eight_note_efficient->_playThisNote8
    _playThisNote8->_add_notes_to_arpeggio
    _playDiatonicTriadMinor->_wait_one_pulse
    _playDiatonicTriadMajor->_wait_one_pulse
    _playDiatonicSeventhMinor->_wait_one_pulse
    _playDiatonicSeventhMajor->_wait_one_pulse
    _keyboard_all_note_efficient->_playThisNote
    _playThisNote->_add_notes_to_arpeggio
    _playTriad->_wait_one_pulse
    _playSeventh->_wait_one_pulse
    _setupArpeggio->_copy_array
    _delete_notes_from_arpeggio->_rotateArrayLeft
    _add_notes_to_arpeggio->_rotateArrayLeft
    _processDrumpad->_controlChange
    _processDrumpad->_noteOffDrum
    _processDrumpad->_noteOnDrum
    _keyboardTranspose->_printThisNumber
    _analogInputs->_readPotentiometers
    _readPotentiometers->___fltol
    _processPotentiometers->_controlChange
    _processPotentiometers->_pitchBend
    _map->___aldiv
    ___fltol->___fladd
    ___flneg->___fldiv
    ___flmul->___xxtofl
    ___fladd->___flneg
    _clear_row2->_Lcd_Print_String
    _clear_row1->_Lcd_Print_String
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Print_String->_Lcd_Print_Char
    _Lcd_Print_Char->_Lcd_SetBit
    _initializeSaveSlotsOnce->_saveToEEPROM
    _saveToEEPROM->_Write_b_eep
    _initializeMenuArray->___wmul
    _displayTest->_strcpy
    _Lcd_Start->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_SetBit

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _selectSlotOnBoot->_loadFromEEPROM
    _Function_G_2->_loadFromEEPROM
    _un_block_code->_analogInputs
    _analogInputs->_readPotentiometers

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_selectSlotOnBoot

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0 53486963
                                              1 BANK2      1     1      0
                     _ADC_Initialize
                          _Lcd_Start
                         _Read_b_eep
                       _analogInputs
                    _calculate_alpha
             _calculate_pulse_length
                      _digitalInputs
                        _displayTest
                _initializeMenuArray
            _initializeSaveSlotsOnce
                           _menu_lcd
                       _panic_button
               _processEncoderBuxton
                   _selectSlotOnBoot
                              _setup
                              _srand
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _selectSlotOnBoot                                     1     1      0   15019
                                              0 BANK2      1     1      0
                         _Read_b_eep
                     _loadFromEEPROM
 ---------------------------------------------------------------------------------
 (1) _panic_button                                         0     0      0   23217
                      _controlChange
 ---------------------------------------------------------------------------------
 (1) _menu_lcd                                             0     0      0 52212139
                         _Function_A
                         _Function_B
                         _Function_C
                         _Function_D
                         _Function_E
                         _Function_F
                         _Function_G
                         _Function_H
                          _Lcd_Clear
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                            ___lbmod
                             ___wmul
                       _exitFunction
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     155
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Function_H                                           0     0      0 23390808
                       _Function_H_1
                       _Function_H_2
                       _Function_H_3
                       _Function_H_4
                       _Function_H_5
                       _Function_H_6
                       _Function_H_7
                       _Function_H_8
                       _Function_H_9
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_9                                         0     0      0 6235055
                     _Function_H_9_1
                     _Function_H_9_2
                     _Function_H_9_3
                     _Function_H_9_4
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_4                                       0     0      0 1247011
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_3                                       0     0      0 1247011
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_2                                       0     0      0 1247011
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_1                                       0     0      0 1247011
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_8                                         0     0      0 3699751
                     _Function_H_8_1
                     _Function_H_8_2
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_8_2                                       0     0      0 1226370
                   _Lcd_Print_String
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_8_1                                       0     0      0 1238775
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_7                                         0     0      0 1241764
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
                             _strcpy
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_6                                         0     0      0 4249015
                     _Function_H_6_1
                     _Function_H_6_2
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_6_2                                       0     0      0 1241764
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
                             _strcpy
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_6_1                                       1     1      0 1772645
                                            103 BANK0      1     1      0
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
                         _doTheLatch
                       _doTheUnLatch
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_5                                         2     2      0 1247141
                                            103 BANK0      2     2      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_4                                         0     0      0 1249390
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _setupArpeggio
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_3                                         0     0      0 1231400
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _clear_row2
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_2                                         0     0      0 1242446
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
             _calculate_pulse_length
                         _clear_row2
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_1                                         1     1      0 1760240
                                            103 BANK0      1     1      0
                   _Lcd_Print_String
                         _clear_row2
                       _doTheUnLatch
                             _strcpy
                      _un_block_code
 ---------------------------------------------------------------------------------
 (2) _Function_G                                           0     0      0 5167876
                       _Function_G_1
                       _Function_G_2
                       _Function_G_3
                       _Function_G_4
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                         _eepromExit
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_G_4                                         0     0      0 1270596
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                       _exitFunction
                      _un_block_code
 ---------------------------------------------------------------------------------
 (2) _exitFunction                                         2     2      0   22195
                                             14 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (3) _Function_G_3                                         2     2      0   35990
                                             14 BANK0      2     2      0
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                         _clear_row1
                         _clear_row2
 ---------------------------------------------------------------------------------
 (3) _Function_G_2                                         0     0      0 1307233
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                         _eepromExit
                           _exitLoad
                     _loadFromEEPROM
                      _un_block_code
 ---------------------------------------------------------------------------------
 (2) _loadFromEEPROM                                      80    80      0   14442
                                              0 BANK1     80    80      0
                         _Read_b_eep
             _calculate_pulse_length
 ---------------------------------------------------------------------------------
 (3) _calculate_pulse_length                              10     8      2   11046
                                             98 BANK0     10     8      2
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) _exitLoad                                             2     2      0   22195
                                             14 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (3) _Function_G_1                                         0     0      0 1297256
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                         _eepromExit
                           _exitSave
                       _saveToEEPROM
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _exitSave                                             2     2      0   22195
                                             14 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (3) _eepromExit                                           2     2      0   22195
                                             14 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (2) _Function_F                                           0     0      0 1247535
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _clear_row2
                         _int2string
                      _programChange
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _programChange                                        3     1      2   16135
                                              0 BANK0      3     1      2
                            ___lbmod
         _key_press_release_note_off
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (2) _Function_E                                           0     0      0 3672596
                       _Function_E_1
                       _Function_E_2
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_E_2                                         0     0      0 1218995
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_E_1                                         0     0      0 1218995
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (2) _Function_D                                           0     0      0 7494073
                       _Function_D_1
                       _Function_D_2
                       _Function_D_3
                       _Function_D_4
                       _Function_D_5
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_D_5                                         1     1      0 1262857
                                            103 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _setControllerNumbers
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_D_4                                         1     1      0 1262857
                                            103 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _setControllerNumbers
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_D_3                                         1     1      0 1262857
                                            103 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _setControllerNumbers
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _setControllerNumbers                                 2     2      0   15812
                                             14 BANK0      2     2      0
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _int2string
 ---------------------------------------------------------------------------------
 (3) _Function_D_2                                         0     0      0 1223786
                           _Busy_eep
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                        _Write_b_eep
                    _calculate_alpha
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _calculate_alpha                                      0     0      0    3401
                            ___fldiv
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) ___fldiv                                             25    17      8    2475
                                             39 BANK0     25    17      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) _Function_D_1                                         0     0      0 1247110
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
            _setControllerResolution
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _setControllerResolution                              1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Function_C                                           0     0      0 4986015
                       _Function_C_1
                       _Function_C_2
                       _Function_C_3
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_C_3                                         2     2      0 1252199
                                            103 BANK0      2     2      0
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_C_2                                         2     2      0 1252199
                                            103 BANK0      2     2      0
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _int2string                                           6     4      2    2415
                                              0 BANK0      6     4      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (19) ___awdiv                                             8     4      4     575
 ---------------------------------------------------------------------------------
 (3) _Function_C_1                                         0     0      0 1247011
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (2) _Function_B                                           0     0      0 1234606
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (2) _Function_A                                           0     0      0 4975639
                       _Function_A_1
                       _Function_A_2
                       _Function_A_3
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_A_3                                         0     0      0 1247011
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_A_2                                         0     0      0 1247011
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_A_1                                         0     0      0 1247011
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _un_block_code                                        0     0      0 1204175
                       _analogInputs
                      _digitalInputs
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (1) _processEncoderBuxton                                 7     7      0       0
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (4) _digitalInputs                                        0     0      0 1151643
                 _buttonInputsSerial
                  _keyboardTranspose
                     _processDrumpad
                    _processKeyboard
                      _processOctave
 ---------------------------------------------------------------------------------
 (5) _processOctave                                        2     2      0  561545
                                             30 BANK0      2     2      0
                            ___awmod
                             ___wmul
                         _doTheLatch
                       _doTheUnLatch
         _key_press_release_note_off
                    _printThisNumber
                     _random_pitches
       _random_pitches_non_repeating
                      _resetArpeggio
                             _strcpy
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (6) _doTheUnLatch                                         4     4      0  530847
                                             26 BANK0      4     4      0
                       _playThisNote
                      _playThisNote8
             _playThisNotePentatonic
                             _strcpy
 ---------------------------------------------------------------------------------
 (6) _doTheLatch                                           0     0      0    2989
                             _strcpy
 ---------------------------------------------------------------------------------
 (5) _processKeyboard                                      0     0      0  532958
        _keyboard_all_note_efficient
      _keyboard_eight_note_efficient
     _keyboard_sharps_only_efficient
 ---------------------------------------------------------------------------------
 (6) _keyboard_sharps_only_efficient                       2     2      0   61473
                                             23 BANK0      2     2      0
             _playThisNotePentatonic
 ---------------------------------------------------------------------------------
 (7) _playThisNotePentatonic                               7     6      1   60113
                                             17 BANK0      6     5      1
              _add_notes_to_arpeggio
         _delete_notes_from_arpeggio
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (6) _keyboard_eight_note_efficient                        2     2      0  295993
                                             26 BANK0      2     2      0
                      _playThisNote8
 ---------------------------------------------------------------------------------
 (7) _playThisNote8                                        9     8      1  293953
                                             17 BANK0      9     8      1
              _add_notes_to_arpeggio
         _delete_notes_from_arpeggio
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
           _playDiatonicSeventhMajor
           _playDiatonicSeventhMinor
             _playDiatonicTriadMajor
             _playDiatonicTriadMinor
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (8) _playDiatonicTriadMinor                               8     7      1   58143
                                              1 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (8) _playDiatonicTriadMajor                               8     7      1   57895
                                              1 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (8) _playDiatonicSeventhMinor                             8     7      1   58143
                                              1 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (8) _playDiatonicSeventhMajor                             8     7      1   57895
                                              1 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (6) _keyboard_all_note_efficient                          1     1      0  175492
                                             22 BANK0      1     1      0
                       _playThisNote
 ---------------------------------------------------------------------------------
 (7) _playThisNote                                         5     5      0  173792
                                             17 BANK0      5     5      0
              _add_notes_to_arpeggio
         _delete_notes_from_arpeggio
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                        _playSeventh
                          _playTriad
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (8) _playTriad                                            9     9      0   57817
                                              1 BANK0      9     9      0
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (8) _playSeventh                                          9     9      0   57820
                                              1 BANK0      9     9      0
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (18) _noteOn                                              3     0      3   27261
                            _noteOff
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (8) _finish_arpeggio_setup                                0     0      0    2379
                      _resetArpeggio
                      _setupArpeggio
 ---------------------------------------------------------------------------------
 (9) _setupArpeggio                                        0     0      0    2379
                         _copy_array
                     _random_pitches
       _random_pitches_non_repeating
 ---------------------------------------------------------------------------------
 (18) _random_pitches_non_repeating                        3     3      0    1157
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (18) _random_pitches                                      2     2      0    1061
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (19) _rand                                                0     0      0     214
                             ___lmul
 ---------------------------------------------------------------------------------
 (19) ___awmod                                             6     2      4     745
 ---------------------------------------------------------------------------------
 (10) _copy_array                                          1     1      0     161
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _resetArpeggio                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _delete_notes_from_arpeggio                           2     2      0     387
                                              9 BANK0      2     2      0
                     _findArrayIndex
                    _rotateArrayLeft
 ---------------------------------------------------------------------------------
 (9) _findArrayIndex                                       3     3      0     161
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (8) _add_notes_to_arpeggio                                8     8      0     223
                                              9 BANK0      8     8      0
                    _rotateArrayLeft
 ---------------------------------------------------------------------------------
 (9) _rotateArrayLeft                                      9     9      0     161
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (5) _processDrumpad                                       0     0      0   42679
                      _controlChange
                        _noteOffDrum
                         _noteOnDrum
 ---------------------------------------------------------------------------------
 (6) _noteOnDrum                                           3     1      2   16715
                                              0 BANK0      3     1      2
                            _noteOff
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (6) _noteOffDrum                                          3     1      2    2747
                                              0 BANK0      3     1      2
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (5) _keyboardTranspose                                    0     0      0   14325
         _key_press_release_note_off
                    _printThisNumber
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (6) _wait_one_pulse                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _printThisNumber                                      2     0      2     481
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _buttonInputsSerial                                   6     6      0     136
                                              0 BANK0      6     6      0
                              _clock
                               _load
 ---------------------------------------------------------------------------------
 (6) _load                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _clock                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _analogInputs                                         7     7      0   52532
                                              7 BANK1      7     7      0
                 _readPotentiometers
 ---------------------------------------------------------------------------------
 (5) _readPotentiometers                                  12    12      0   52532
                                             98 BANK0      5     5      0
                                              0 BANK1      7     7      0
                           _ADC_Read
                            ___fladd
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _map
              _processPotentiometers
 ---------------------------------------------------------------------------------
 (6) _processPotentiometers                                6     6      0   40375
                                              3 BANK0      6     6      0
                      _controlChange
                          _pitchBend
 ---------------------------------------------------------------------------------
 (7) _pitchBend                                            3     1      2   16315
                                              0 BANK0      3     1      2
                            ___lbmod
         _key_press_release_note_off
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (2) _controlChange                                        3     1      2   23217
                                              0 BANK0      3     1      2
                            ___lbmod
         _key_press_release_note_off
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (3) _key_press_release_note_off                           0     0      0   13813
                            _noteOff
 ---------------------------------------------------------------------------------
 (19) _noteOff                                             3     0      3   13813
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (19) _sendUSB                                             8     5      3     584
 ---------------------------------------------------------------------------------
 (19) _sendOut                                             8     5      3     599
 ---------------------------------------------------------------------------------
 (17) ___lbmod                                             4     2      2     804
 ---------------------------------------------------------------------------------
 (6) _map                                                 40    20     20    1956
                                             14 BANK0     40    20     20
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (20) ___lmul                                             12     4      8     214
 ---------------------------------------------------------------------------------
 (7) ___aldiv                                             14     6      8     625
                                              0 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4     926
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     517
                                             88 BANK0     10     6      4
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flneg                                              4     0      4     245
                                             64 BANK0      4     0      4
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             25    17      8    3053
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             20    12      8    3762
                                             68 BANK0     20    12      8
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) _ADC_Read                                             5     3      2      34
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) _clear_row2                                           0     0      0   12405
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
 ---------------------------------------------------------------------------------
 (3) _clear_row1                                           0     0      0   12405
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
 ---------------------------------------------------------------------------------
 (4) _Lcd_Set_Cursor                                       5     4      1    2615
                                              3 BANK0      5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (4) _Lcd_Print_String                                     6     4      2    9790
                                              8 BANK0      6     4      2
                     _Lcd_Print_Char
                            ___lbmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _Lcd_Print_Char                                       7     7      0     390
                                              1 BANK0      7     7      0
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (1) _initializeSaveSlotsOnce                              1     1      0    6401
                                             84 BANK0      1     1      0
                           _Busy_eep
                         _Read_b_eep
                        _Write_b_eep
                       _saveToEEPROM
 ---------------------------------------------------------------------------------
 (4) _saveToEEPROM                                        80    80      0    4465
                                              4 BANK0     80    80      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (4) _Write_b_eep                                          4     1      3    1390
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (4) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2     512
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initializeMenuArray                                  3     3      0    7596
                                              6 BANK0      3     3      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    7432
                                              0 BANK0      6     2      4
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _displayTest                                          2     2      0    2989
                                              6 BANK0      2     2      0
                             _strcpy
 ---------------------------------------------------------------------------------
 (6) _strcpy                                               6     2      4    2989
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Start                                            3     3      0     347
                                              3 BANK0      3     3      0
                            _Lcd_Cmd
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (5) _Lcd_Cmd                                              2     2      0     155
                                              1 BANK0      2     2      0
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (6) _Lcd_SetBit                                           1     1      0     124
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _ISR                                                24    24      0   47088
                                             11 COMRAM    24    24      0
                            ___lbmod
                            _display
                _encoderInputsBuxton
                       _playArpeggio
 ---------------------------------------------------------------------------------
 (17) _playArpeggio                                        6     6      0   44631
                                              5 COMRAM     6     6      0
                            ___awmod
                            _noteOff
                             _noteOn
                               _rand
                     _random_pitches
       _random_pitches_non_repeating
                       _sort_pitches
 ---------------------------------------------------------------------------------
 (18) _sort_pitches                                        5     5      0     380
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (18) _random_pitches_non_repeating                        3     3      0    1157
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (18) _random_pitches                                      2     2      0    1061
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (19) _rand                                                0     0      0     214
                             ___lmul
 ---------------------------------------------------------------------------------
 (20) ___lmul                                             12     4      8     214
 ---------------------------------------------------------------------------------
 (18) _noteOn                                              3     0      3   27261
                            _noteOff
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (19) _noteOff                                             3     0      3   13813
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (19) _sendUSB                                             8     5      3     584
 ---------------------------------------------------------------------------------
 (19) _sendOut                                             8     5      3     599
 ---------------------------------------------------------------------------------
 (17) _encoderInputsBuxton                                 6     6      0      69
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (17) _display                                             0     0      0    1584
                      _displayDigits
                      _displayString
 ---------------------------------------------------------------------------------
 (18) _displayString                                       2     2      0     134
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (18) _displayDigits                                       5     5      0    1450
                                              0 COMRAM     5     5      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (19) ___awmod                                             6     2      4     745
 ---------------------------------------------------------------------------------
 (19) ___awdiv                                             8     4      4     575
 ---------------------------------------------------------------------------------
 (17) ___lbmod                                             4     2      2     804
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 20
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _Lcd_Start
     _Lcd_Cmd
       _Lcd_SetBit
     _Lcd_SetBit
   _Read_b_eep
   _analogInputs
     _readPotentiometers
       _ADC_Read
       ___fladd
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul
         ___xxtofl (ARG)
       ___flneg
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _map
         ___aldiv
           ___lmul (ARG)
         ___lmul
       _processPotentiometers
         _controlChange
           ___lbmod
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _sendOut
           _sendUSB
         _pitchBend
           ___lbmod
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _sendOut
           _sendUSB
   _calculate_alpha
     ___fldiv
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___xxtofl
   _calculate_pulse_length
     ___fladd
       ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___flneg (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___fldiv
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___flmul
       ___xxtofl (ARG)
     ___flneg
       ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___fltol
       ___fladd (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___flneg (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___xxtofl
   _digitalInputs
     _buttonInputsSerial
       _clock
       _load
     _keyboardTranspose
       _key_press_release_note_off
         _noteOff
           _sendOut
           _sendUSB
       _printThisNumber
       _wait_one_pulse
     _processDrumpad
       _controlChange
         ___lbmod
         _key_press_release_note_off
           _noteOff
             _sendOut
             _sendUSB
         _sendOut
         _sendUSB
       _noteOffDrum
         _sendOut
         _sendUSB
       _noteOnDrum
         _noteOff
           _sendOut
           _sendUSB
         _sendOut
         _sendUSB
     _processKeyboard
       _keyboard_all_note_efficient
         _playThisNote
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _playSeventh
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playTriad
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _wait_one_pulse
       _keyboard_eight_note_efficient
         _playThisNote8
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _playDiatonicSeventhMajor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicSeventhMinor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicTriadMajor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicTriadMinor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _wait_one_pulse
       _keyboard_sharps_only_efficient
         _playThisNotePentatonic
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _wait_one_pulse
     _processOctave
       ___awmod
       ___wmul
         ___lbmod (ARG)
       _doTheLatch
         _strcpy
       _doTheUnLatch
         _playThisNote
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _playSeventh
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playTriad
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _wait_one_pulse
         _playThisNote8
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _playDiatonicSeventhMajor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicSeventhMinor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicTriadMajor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicTriadMinor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _wait_one_pulse
         _playThisNotePentatonic
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _wait_one_pulse
         _strcpy
       _key_press_release_note_off
         _noteOff
           _sendOut
           _sendUSB
       _printThisNumber
       _random_pitches
         ___awmod
         _rand
           ___lmul
       _random_pitches_non_repeating
         ___awmod
         _rand
           ___lmul
       _resetArpeggio
       _strcpy
       _wait_one_pulse
   _displayTest
     _strcpy
   _initializeMenuArray
     ___wmul
       ___lbmod (ARG)
   _initializeSaveSlotsOnce
     _Busy_eep
     _Read_b_eep
     _Write_b_eep
     _saveToEEPROM
       _Busy_eep
       _Write_b_eep
   _menu_lcd
     _Function_A
       _Function_A_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_A_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_A_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_B
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_C
       _Function_C_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_C_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_C_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_D
       _Function_D_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _setControllerResolution
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_D_2
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _Write_b_eep
         _calculate_alpha
           ___fldiv
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_D_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _setControllerNumbers
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
           _int2string
             ___awdiv
             ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_D_4
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _setControllerNumbers
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
           _int2string
             ___awdiv
             ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_D_5
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _setControllerNumbers
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
           _int2string
             ___awdiv
             ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_E
       _Function_E_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_E_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_F
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       _Lcd_Set_Cursor
         _Lcd_Cmd
           _Lcd_SetBit
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _int2string
         ___awdiv
         ___awmod
       _programChange
         ___lbmod
         _key_press_release_note_off
           _noteOff
             _sendOut
             _sendUSB
         _sendOut
         _sendUSB
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_G
       _Function_G_1
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _eepromExit
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _exitSave
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _saveToEEPROM
           _Busy_eep
           _Write_b_eep
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_G_2
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _eepromExit
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _exitLoad
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _loadFromEEPROM
           _Read_b_eep
           _calculate_pulse_length
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fldiv
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_G_3
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
       _Function_G_4
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _exitFunction
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _eepromExit
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_H
       _Function_H_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _doTheUnLatch
           _playThisNote
             _add_notes_to_arpeggio
               _rotateArrayLeft
             _delete_notes_from_arpeggio
               _findArrayIndex
               _rotateArrayLeft
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _playSeventh
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _playTriad
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _wait_one_pulse
           _playThisNote8
             _add_notes_to_arpeggio
               _rotateArrayLeft
             _delete_notes_from_arpeggio
               _findArrayIndex
               _rotateArrayLeft
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _playDiatonicSeventhMajor
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _playDiatonicSeventhMinor
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _playDiatonicTriadMajor
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _playDiatonicTriadMinor
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _wait_one_pulse
           _playThisNotePentatonic
             _add_notes_to_arpeggio
               _rotateArrayLeft
             _delete_notes_from_arpeggio
               _findArrayIndex
               _rotateArrayLeft
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _strcpy
         _strcpy
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _calculate_pulse_length
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___fldiv
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul
             ___xxtofl (ARG)
           ___flneg
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_4
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _setupArpeggio
           _copy_array
           _random_pitches
             ___awmod
             _rand
               ___lmul
           _random_pitches_non_repeating
             ___awmod
             _rand
               ___lmul
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_5
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_6
         _Function_H_6_1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _doTheLatch
             _strcpy
           _doTheUnLatch
             _playThisNote
               _add_notes_to_arpeggio
                 _rotateArrayLeft
               _delete_notes_from_arpeggio
                 _findArrayIndex
                 _rotateArrayLeft
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _playSeventh
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _playTriad
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _wait_one_pulse
             _playThisNote8
               _add_notes_to_arpeggio
                 _rotateArrayLeft
               _delete_notes_from_arpeggio
                 _findArrayIndex
                 _rotateArrayLeft
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _playDiatonicSeventhMajor
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _playDiatonicSeventhMinor
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _playDiatonicTriadMajor
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _playDiatonicTriadMinor
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _wait_one_pulse
             _playThisNotePentatonic
               _add_notes_to_arpeggio
                 _rotateArrayLeft
               _delete_notes_from_arpeggio
                 _findArrayIndex
                 _rotateArrayLeft
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _strcpy
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Function_H_6_2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _strcpy
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_7
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _strcpy
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_8
         _Function_H_8_1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Function_H_8_2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_9
         _Function_H_9_1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Function_H_9_2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Function_H_9_3
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Function_H_9_4
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_SetBit
     _Lcd_Print_String
       _Lcd_Print_Char
         _Lcd_SetBit
       ___lbmod (ARG)
       ___wmul (ARG)
         ___lbmod (ARG)
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_SetBit
     ___lbmod
     ___wmul
       ___lbmod (ARG)
     _exitFunction
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       _clear_row1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
   _panic_button
     _controlChange
       ___lbmod
       _key_press_release_note_off
         _noteOff
           _sendOut
           _sendUSB
       _sendOut
       _sendUSB
   _processEncoderBuxton
   _selectSlotOnBoot
     _Read_b_eep
     _loadFromEEPROM
       _Read_b_eep
       _calculate_pulse_length
         ___fladd
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fldiv
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul
           ___xxtofl (ARG)
         ___flneg
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl
   _setup
   _srand

 _ISR (ROOT)
   ___lbmod
   _display
     _displayDigits
       ___awdiv
       ___awmod
     _displayString
   _encoderInputsBuxton
   _playArpeggio
     ___awmod
     _noteOff
       _sendOut
       _sendUSB
     _noteOn
       _noteOff
         _sendOut
         _sendUSB
       _sendOut
       _sendUSB
     _rand
       ___lmul
     _random_pitches
       ___awmod
       _rand
         ___lmul
     _random_pitches_non_repeating
       ___awmod
       _rand
         ___lmul
     _sort_pitches

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             CFF      0       0      31        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      89      11       53.5%
BITBANK2           100      0       0       8        0.0%
BANK2              100      2      E7       9       90.2%
BITBANK1           100      0       0       6        0.0%
BANK1              100     50     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6C      A0       5      100.0%
BITCOMRAM           53      0       6       0        7.2%
COMRAM              53     23      46       1       84.3%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0      25       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     356      20        0.0%
DATA                 0      0     37B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Jan 29 19:50:08 2024

                   _arpeggiatorAutoLatchOnOffMenu 0120                           playThisNote8@temp_pitch 0077  
                       ?_playDiatonicSeventhMinor 0061                           _readPotentiometers$5907 0197  
                                    ___fldiv@aexp 009F                                      ___fldiv@bexp 009E  
                              _RESET_ON_KEY_PRESS 0022                                      ___fldiv@sign 0093  
                                    ?_displayTest 0007                                                l23 978C  
                                              l24 978E                                                l40 8FEE  
                                              l25 9796                                                l26 9798  
                                              l42 9018                                                l27 97A0  
                                              l51 859E                                                l28 97A2  
                                              l52 85B6                                                l29 97AA  
                                              l53 85D4                                                l46 836E  
                                              l54 85EC                                                l58 8534  
                                              l59 84FA                                                l94 969A  
                   __size_of_processEncoderBuxton 0A1C                               ___wmul@multiplicand 0062  
                                     __CFG_BORV$3 000000                                    ?_programChange 0060  
                                 _GLOBAL_CC_VALUE 0180                   __size_of_playDiatonicTriadMajor 0190  
                                    __CFG_CP0$OFF 000000                                      __CFG_CP1$OFF 000000  
                                    __CFG_CP2$OFF 000000                                      __CFG_CP3$OFF 000000  
                                     __CFG_OSC$HS 000000                   __size_of_playDiatonicTriadMinor 0262  
                        _LAST_NOTE_MODE_KEY_PRESS 0019                           playDiatonicTriadMajor@i 0066  
                            __end_of_doTheUnLatch 539A                                               l500 9464  
                                             l504 93D4                                               l466 6D7C  
                                             l491 920E                                               l484 8B90  
                                             l901 046E                                               l911 0558  
                                             l903 0480                                               l496 91AA  
                                             l920 060A                                               l913 0592  
                                             l905 0492                                               l930 0714  
                                             l922 0650                                               l914 05A0  
                                             l931 0722                                               l907 04D8  
                                             l940 07B0                                               l924 0696  
                                             l916 05B2                                               l933 075C  
                                             l925 06A4                                               l909 051E  
                                             l950 0800                                               l942 07C0  
                                             l934 076A                                               l926 06B2  
                                             l918 05C4                                               l935 0778  
                                             l927 06C0                                               l871 00EC  
                                             l960 0850                                               l952 0810  
                                             l944 07D0                                               l936 0786  
                                             l937 0794                                               l929 0706  
                                             l881 024A                                               l873 0132  
                                             l970 08A4                                               l962 0860  
                                             l954 0820                                               l946 07E0  
                                             l891 03A8                                               l883 0290  
                                             l875 0178                                               l867 006C  
                                             l980 08EC                                               l972 08B0  
                                             l964 0870                                               l956 0830  
                                             l948 07F0                                               l893 03BC  
                                             l885 02D6                                               l877 01BE  
                                             l869 00A6                                               l982 08FC  
                                             l974 08C0                                               l966 0884  
                                             l958 0840                                               l991 094E  
                                             l895 03D0                                               l887 031C  
                                             l879 0204                                               l984 090C  
                                             l976 08D0                                               l968 0898  
                                             l993 095E                                               l897 0416  
                                             l889 0362                                               l986 091C  
                                             l978 08E0                                               l995 096E  
                                             l987 092A                                               l899 045C  
                                             _GIE 007F97                              _RESET_ON_KEY_RELEASE 0021  
                                             l997 097E                                               l989 093C  
                                             _BPM 00FF                                               l998 098C  
                                             l999 099A                                      __CFG_CPB$OFF 000000  
                                             _RB0 007C08                                               _RB1 007C09  
                                             _RB2 007C0A                                               _RC0 007C10  
                                             _RA5 007C05                                               _RC1 007C11  
                                             _RB4 007C0C                                               _RC2 007C12  
                                             _RB5 007C0D                                               _RC3 007C13  
                                             _RE0 007C20                                               _RC4 007C14  
                                             _RE1 007C21                                               _RC5 007C15  
                                             _RD4 007C1C                                               _RE2 007C22  
                                             _RD5 007C1D                                               _RD6 007C1E  
                                             _RD7 007C1F                                      __CFG_CPD$OFF 000000  
                                             _ISR 0008                                               _PSA 007EAB  
                                             _map 66DA                           playDiatonicTriadMinor@i 0067  
                            __size_of_Write_b_eep 0042                                               prod 000FF3  
                                             wreg 000FE8                                    ?_displayDigits 0007  
                                _GLOBAL_CC_NUMBER 00F4                                  ??_wait_one_pulse 0060  
                                    ___flmul@aexp 007B                                      ___flmul@bexp 0080  
                  __end_of_playThisNotePentatonic 56DE                                      ___flmul@sign 007A  
                                    ___flmul@temp 0085                                      ___flmul@prod 0081  
                        loadFromEEPROM@slotNumber 01E4                                      __CFG_LVP$OFF 000000  
                                            ?_ISR 0007                       _potentiometer_filtered_last 0200  
                                    ___fltol@exp1 00C1                                      __CFG_WDT$OFF 000000  
                                            l1000 09A8                                              l1010 0A1C  
                                            l1002 09B8                                              l1011 0A2A  
                                            l1003 09C6                                    ?_displayString 0007  
                                            l1004 09D4                                              l1006 09E4  
                                            l1007 09F2                                              l1008 0A00  
                                            l1009 0A0E                                              l1410 561C  
                                            l1411 563A                                              l1500 59BA  
                                            l1420 56C8                                              l1412 5670  
                                            l1404 5578                                              l1421 56D6  
                                            l1413 565E                                              l1405 55A0  
                                            l1502 59DE                                              l1430 3FBE  
                                            l1503 59E6                                              l1511 6804  
                                            l1407 55D0                                              l1431 3FE0  
                                            l2400 1FEE                                              l1504 59FA  
                                            l1520 6878                                              l1512 681A  
                                            l1408 55F8                                              l1440 4112  
                                            l1432 4002                                              l2401 2004  
                                            l1601 2910                                              l1417 5694  
                                            l1441 4134                                              l1433 4024  
                                            l1425 3F14                                              l2410 20C6  
                                            l2402 201E                                              l1450 5BD8  
                                            l1522 68A4                                              l1514 6856  
                                            l1530 18CE                                              l1610 2A42  
                                            l1602 2944                                              l1442 4156  
                                            l1434 4046                                              l1426 3F36  
                                            l2411 20DC                                              l2403 2038  
                                            l1451 5BA2                                              l1523 68AC  
                                            l1515 6842                                              l1531 18E8  
                                            l1611 2A7A                                              l1419 56C0  
                                            l1443 4178                                              l1435 4068  
                                            l1427 3F58                                              l2412 20F6  
                                            l2404 20A6                                              l1452 5BAA  
                                            l1524 68BA                                              l1540 19D2  
                                            l1532 1902                                              l1620 2AE8  
                                            l1612 2AC6                                              l1604 298E  
                                            l1436 408A                                              l1428 3F7A  
                                            l2421 2198                                              l2413 2110  
                                            l2405 205A                                              l1461 5CAC  
                                            l1453 5BB2                                              l1525 68D2  
                                            l1541 19EC                                              l1533 191C  
                                            l1701 4848                                              l1613 2A9E  
                                            l1605 29D2                                              l1437 40AC  
                                            l1429 3F9C                                              l4030 0A3E  
                                            l2430 2234                                              l2422 21AE  
                                            l2406 2070                                              l1462 5C64  
                                            l1550 1AD6                                              l1542 1A06  
                                            l1534 1936                                              l1710 492A  
                                            l1630 2B8A                                              l1622 2B06  
                                            l1438 40CE                                              l2431 224A  
                                            l2415 2130                                              l2407 208A  
                                            l1471 5CF2                                              l1519 68C2  
                                            l1551 1AF0                                              l1543 1A20  
                                            l1535 1950                                              l1711 4932  
                                            l1703 4874                                              l1615 2ABC  
                                            l1607 29F4                                              l1439 40F0  
                                            l4040 116A                                              l4032 0A8E  
                                            l2424 21CC                                              l2416 2146  
                                            l2408 20A4                                              l1480 58C4  
                                            l1472 5CFA                                              l1464 5C72  
                                            l1456 5BE8                                              l1448 5BBC  
                                            l1560 1BDA                                              l1552 1B0A  
                                            l1544 1A3A                                              l1536 196A  
                                            l1712 4946                                              l1704 48D0  
                                            l1608 2A12                                              l4033 0AA0  
                                            l2433 2268                                              l2425 21E2  
                                            l2409 2112                                              l1481 5880  
                                            l1473 5D0E                                              l1449 5B98  
                                            l1561 1BF4                                              l1553 1B24  
                                            l1545 1A54                                              l1537 1984  
                                            l1529 18B4                                              l1721 4990  
                                            l1625 2B2A                                              l2434 227E  
                                            l2418 2164                                              l1490 5922  
                                            l1482 5888                                              l1458 5C0E  
                                            l1570 1CDE                                              l1562 1C0E  
                                            l1554 1B3E                                              l1546 1A6E  
                                            l1538 199E                                              l1730 4AAA  
                                            l1722 49B8                                              l1626 2B32  
                                            l4051 0FA4                                              l4043 0D1E  
                                            l4035 0BEE                                              l2427 2200  
                                            l2419 217A                                              l1483 5890  
                                            l1459 5C36                                              l1571 1CF8  
                                            l1563 1C28                                              l1555 1B58  
                                            l1547 1A88                                              l1539 19B8  
                                            l1651 5AD6                                              l1643 5A18  
                                            l1635 2BA4                                              l1619 2B90  
                                            l1627 2B56                                              l4052 0FE0  
                                            l2436 229E                                              l2428 2216  
                                            l2380 1E3E                                              l1492 5998  
                                            l1484 5898                                              l1572 1D12  
                                            l1564 1C42                                              l1556 1B72  
                                            l1548 1AA2                                              l1740 4BA6  
                                            l1732 4AD6                                              l1724 4A16  
                                            l1708 4906                                              l1636 2BB8  
                                            l2381 1E54                                              l1493 5950  
                                            l1469 5CCE                                              l1573 1D2C  
                                            l1565 1C5C                                              l1557 1B8C  
                                            l1549 1ABC                                              l1733 4B32  
                                            l1725 4A6E                                              l1645 5A58  
                                            l1637 2BCC                                              l3501 2734  
                                            l4062 4230                                              l4054 10F4  
                                            l2390 1F16                                              l2382 1E6E  
                                            l2374 1E1E                                              l1478 58A2  
                                            l1574 1D46                                              l1566 1C76  
                                            l1558 1BA6                                              l1718 4964  
                                            l1646 5A9A                                              l1582 27F0  
                                            l1590 27E6                                              l1750 2C8E  
                                            l3502 276E                                              l4063 4264  
                                            l4055 112C                                              l4047 0DBA  
                                            l4039 0C2A                                              l2391 1F2C  
                                            l2383 1E88                                              l2375 1DD2  
                                            l1495 595E                                              l1487 58D4  
                                            l1479 5876                                              l1575 1D60  
                                            l1567 1C90                                              l1559 1BC0  
                                            l1671 5806                                              l1727 4B44  
                                            l1655 5B4A                                              l1583 27B4  
                                            l1751 2CB0                                              l3503 27A8  
                                            l5023 6BAC                                              l4064 42A2  
                                            l4056 1140                                              l4048 0E54  
                                            l2392 1F46                                              l2384 1EF6  
                                            l2376 1DE8                                              l1576 1D7A  
                                            l1568 1CAA                                              l1672 57A4  
                                            l1736 4B66                                              l1728 4A9C  
                                            l1648 5B28                                              l1584 281E  
                                            l1760 2DE2                                              l1752 2CD2  
                                            l3600 88D4                                              l4065 42E2  
                                            l4057 118E                                              l2393 1F60  
                                            l2385 1EAA                                              l2377 1E02  
                                            l1489 58FA                                              l1577 1D94  
                                            l1569 1CC4                                              l1681 584C  
                                            l1657 5B6E                                              l1649 5AC8  
                                            l1585 27BE                                              l1761 2E04  
                                            l1753 2CF4                                              l3601 8872  
                                            l3450 4DF2                                              l2394 1FCE  
                                            l2386 1EC0                                              l2378 1E1C  
                                            l1682 5854                                              l1674 57B2  
                                            l1666 56F4                                              l1738 4B8A  
                                            l1658 5B76                                              l1594 284E  
                                            l1586 27C6                                              l1770 2F36  
                                            l1762 2E26                                              l1754 2D16  
                                            l1746 2C06                                              l5026 6BBE  
                                            l4067 43B4                                              l2395 1F82  
                                            l2387 1EDA                                              l2379 1E8A  
                                            l1683 5868                                              l1739 4B92  
                                            l1659 5B8A                                              l1595 2876  
                                            l1587 27CE                                              l1771 2F58  
                                            l1763 2E48                                              l1755 2D38  
                                            l1747 2C28                                              l6100 34D0  
                                            l2820 451C                                              l2812 445E  
                                            l2396 1F98                                              l2388 1EF4  
                                            l1668 5734                                              l1692 472E  
                                            l1588 27D6                                              l1772 2F7A  
                                            l1764 2E6A                                              l1756 2D5A  
                                            l1748 2C4A                                              l3620 64B0  
                                            l3540 6F1E                                              l3532 6EEE  
                                            l6101 34D4                                              l4069 4404  
                                            l2821 4534                                              l2813 4476  
                                            l2397 1FB2                                              l2389 1F62  
                                            l1669 5776                                              l1693 4756  
                                            l1597 28A6                                              l1589 27DE  
                                            l1773 2F9C                                              l1765 2E8C  
                                            l1757 2D7C                                              l1749 2C6C  
                                            l3621 6440                                              l3541 6F28  
                                            l5029 6BC4                                              l2830 4608  
                                            l2822 454C                                              l2814 448E  
                                            l2398 1FCC                                              l1598 28CE  
                                            l1774 2FBE                                              l1766 2EAE  
                                            l1758 2D9E                                              l2910 3970  
                                            l2902 388C                                              l3622 643C  
                                            l3614 63F4                                              l3630 6274  
                                            l3470 97BC                                              l3702 931A  
                                            l3534 6F42                                              l3542 6F32  
                                            l6111 35B8                                              l2831 4620  
                                            l2823 4562                                              l2815 44A6  
                                            l2399 203A                                              l1679 5828  
                                            l1695 47B4                                              l1767 2ED0  
                                            l1759 2DC0                                              l2903 38B8  
                                            l3607 82A2                                              l3463 763A  
                                            l3623 6476                                              l3615 639A  
                                            l3631 62CC                                              l3703 92E6  
                                            l3543 6F3C                                              l3535 6EF6  
                                            l6104 356E                                              l2840 46C8  
                                            l2832 4638                                              l2824 457A  
                                            l2816 44BE                                              l1696 480C  
                                            l1768 2EF2                                              l3608 8248  
                                            l3464 7644                                              l3624 6472  
                                            l3616 63F2                                              l3800 8E36  
                                            l3449 4E6A                                              l6121 3628  
                                            l6113 35C2                                              l2841 46D6  
                                            l2833 4650                                              l2825 4592  
                                            l2817 44D6                                              l1689 4702  
                                            l1769 2F14                                              l3553 73A8  
                                            l3609 82A0                                              l3465 764C  
                                            l3481 2362                                              l3801 8E50  
                                            l3537 6F00                                              l6106 357E  
                                            l6210 60A4                                              l2834 4668  
                                            l2826 45AA                                              l2818 44EE  
                                            l1698 48E4                                              l2906 3930  
                                            l3554 72EC                                              l3634 62E0  
                                            l3714 8D36                                              l3730 7E78  
                                            l3538 6F0A                                              l6211 608C  
                                            l6203 6026                                              l5403 97F6  
                                            l2835 4680                                              l2827 45C2  
                                            l2819 4506                                              l5411 6A6E  
                                            l1699 483A                                              l3619 6406  
                                            l3635 638A                                              l3491 2524  
                                            l3483 23B8                                              l3715 8CEE  
                                            l3723 8EDC                                              l3731 7E20  
                                            l4451 4BCA                                              l3539 6F14  
                                            l4460 5004                                              l6204 6036  
                                            l2836 4694                                              l2828 45D8  
                                            l5412 6ABE                                              l2860 527C  
                                            l3564 72D2                                              l3580 71E2  
                                            l3636 631A                                              l3644 80DC  
                                            l6140 3CA8                                              l3484 2528  
                                            l3476 22C6                                              l3708 92CE  
                                            l3716 8D34                                              l3724 8E9A  
                                            l3732 7E76                                              l4452 4BDA  
                                            l3740 7D80                                              l3820 7840  
                                            l4461 5014                                              l6125 364E  
                                            l6109 35A2                                              l6213 60D6  
                                            l6205 6054                                              l2829 45F0  
                                            l2909 3944                                              l3557 7346  
                                            l3565 7216                                              l3637 6316  
                                            l3629 62CE                                              l3645 8094  
                                            l3493 25BC                                              l3709 929A  
                                            l3725 8EB4                                              l4453 4BEA  
                                            l3741 7DD6                                              l3813 77FC  
                                            l3901 7D64                                              l4462 5024  
                                            l6126 3656                                              l6118 35E2  
                                            l6214 60CA                                              l2838 46B8  
                                            l2870 532E                                              l2854 5226  
                                            l3558 738E                                              l3590 7400  
                                            l3638 6350                                              l3646 80DA  
                                            l6142 3CF2                                              l3486 241A  
                                            l3478 23BC                                              l3670 89D2  
                                            l3734 7E8C                                              l4454 4BFA  
                                            l3806 9184                                              l3814 77A2  
                                            l3830 7A80                                              l3902 7CEA  
                                            l3910 7CC4                                   ??_un_block_code 00C7  
                                            ?_map 006E                                              l4463 5034  
                                            l6127 3658                                              l6207 6066  
                                            l5407 97FE                                              l5423 990E  
                                            l2871 5364                                              l2863 52C2  
                                            l3575 71FC                                              l3591 7446  
                                            l3639 634C                                              l6135 3C6C  
                                            l3663 9056                                              l3495 25F4  
                                            l3487 2456                                              l3671 8A2A  
                                            l3735 7EAE                                              l4455 4C08  
                                            l3743 7DEC                                              l3807 9142  
                                            l3815 77FA                                              l3831 7AD8  
                                            l3911 7C4A                                              l6208 605A  
                                            l5440 5E5A                                              l5432 5E36  
                                            l5424 9918                                              l2848 52E4  
                                            l3568 7270                                              l3576 7140  
                                            l3656 84D2                                              l6152 3DFC  
                                            l6144 3D1A                                              l6136 3C68  
                                            l3664 902A                                              l3496 262E  
                                            l3488 2492                                              l4456 4C3E  
                                            l3744 7E0E                                              l3808 915C  
                                            l3840 7F18                                              l3904 7D48  
                                            l3920 7BAA                                              l5441 5E7A  
                                            l5433 5D6E                                              l2857 5240  
                                            l2881 3684                                              l3569 72B8  
                                            l3657 8478                                              l6161 3E78  
                                            l6153 3DDE                                              l6145 3DC8  
                                            l3497 2668                                              l3489 24CE  
                                            l3761 8164                                              l3817 782E  
                                            l3905 7D62                                              l3913 7CA8  
                                            l4466 51DA                                              l6090 3488  
                                            l6170 3012                                              l6218 60F4  
                                            l5434 5D94                                              l5418 96DC  
                                            l2866 52E2                                              l2882 3690  
                                            l3586 7450                                              l3658 84D0  
                                            l6162 3E9C                                              l6146 3D78  
                                            l3690 81F4                                              l3754 7FC0  
                                            l3762 811C                                              l3826 7A62  
                                            l3850 7A04                                              l3914 7CC2  
                                            l3922 7C08                                              l6091 3466  
                                            l6083 33B0                                              l6171 3026  
                                            l6219 6126                                              l5435 5DB6  
                                            l2891 377A                                              l2883 36C6  
                                            l3579 719A                                              l3587 73BA  
                                            l6163 3EC6                                              l6147 3DA0  
                                            l6139 3CAC                                              l3499 26FC  
                                            l3683 87D0                                              l3691 81AC  
                                            l3739 7DD8                                              l3755 7F66  
                                            l3763 8162                                              l3851 7A38  
                                            l3923 7C22                                              l3931 7B68  
                                            l6092 3474                                              l6084 33AC  
                                            l6180 3244                                              l5700 74E0  
                                            l5436 5DCC                                              l5428 5D28  
                                            l6164 3ED2                                              l3676 884A  
                                            l3684 8776                                              l3692 81F2  
                                            l3756 7FBE                                              l3836 7F1A  
                                            l3932 7B82                                              l6093 3478  
                                            l6181 3226                                              l6173 3056  
                                            l5701 74D4                                              l5437 5DEC  
                                            l5429 5D3A                                              l5461 8B0C  
                                            l2869 530A                                              l2893 380E  
                                            l6165 3ED4                                              l6149 3DC6  
                                            l3669 8A2C                                              l3677 87F0  
                                            l3685 87CE                                              l3829 7ADA  
                                            l3837 7ECA                                              l3773 7724  
                                            l6086 340C                                              l6078 3368  
                                            l6190 32DE                                              l6174 3052  
                                            l5438 5E10                                              l2894 37F4  
                                            l2886 3700                                              l3678 8848  
                                            l3790 706A                                              l3774 76DE  
                                            l6087 33D0                                              l6079 3364  
                                            l6175 3066                                              l5439 5E34  
                                            l5471 8FB0                                              l6159 3E34  
                                            l3839 7EFE                                              l3847 7A3A  
                                            l3919 7C24                                              l3775 7722  
                                            l6096 34E6                                              l6192 3302  
                                            l6176 3084                                              l5704 7514  
                                            l5448 9544                                              l5472 8F66  
                                            l2896 37FE                                              l2888 378A  
                                            l3792 70A6                                              l3848 79B6  
                                            l3856 8CCA                                              l3928 7B84  
                                            l6097 34AC                                              l6193 3320  
                                            l6169 3016                                              l5705 7522  
                                            l5457 8AE0                                              l2889 376A  
                                            l3793 70DA                                              l3857 8C82  
                                            l3865 78E2                                              l3929 7B0A  
                                            l3937 804E                                              l5706 7538  
                                            l5458 8AF6                                              l2898 38C8  
                                            l3858 8CC8                                              l3866 785A  
                                            l3874 89B6                                              l3938 7FF6  
                                            l6187 327C                                              l2899 3878  
                                            l3795 711E                                              l3875 8966  
                                            l3883 8F46                                              l3939 804C  
                                            l3868 78AC                                              l3884 8F08  
                                            l3892 8C5C                                              l6197 9730  
                                            l6189 32C0                                              l5653 7562  
                                            l3789 70DC                                              l3869 78E0  
                                            l3877 899A                                              l3893 8C14  
                                            l6198 9726                                              l3878 89B4  
                                            l3886 8F2A                                              l3894 8C5A  
                                            l5639 9506                                              l3799 8E78  
                                            l3887 8F44                                              l4974 8718  
                                            l5871 6F98                                              l5848 976C  
                                            l5880 701C                                              l4976 8736  
                                            l5873 7004                                              l5697 749A  
                                            l5882 7044                                              l5874 6FF4  
                                            l5698 74B2                                              l4987 9276  
                                            l5879 7028                                              _ADON 007E10  
                           __size_of_sort_pitches 0118                                              STR_1 FFE6  
                                            STR_2 FFE1                                              STR_3 FFFA  
                                            STR_4 FFF0                                              STR_5 FFDC  
                                            STR_6 FFEB                                              STR_7 FFF5  
                                            STR_8 FFD7                                              STR_9 FD70  
                                            _BRGH 007D62                            __end_of_random_pitches 8C0A  
                                            _CREN 007D5C                                              _T0CS 007EAD  
                                            _IPEN 007E87                                              _PEIE 007F96  
                                            _RBIE 007F93                                              _RBIF 007F90  
                                            _TMR0 000FD6                                              _TMR1 000FCE  
                                            _TMR2 000FCC                                              _SPEN 007D5F  
                                            _PPQN 01F6                                              _TRMT 007D61  
                                            _TXIF 007CF4                                              _TXEN 007D65  
                                            _SYNC 007D64                          _LAST_NOTE_MODE_TRANSPOSE 0017  
                                            _main 6AE2                                              _drum 0037  
                                            _load 99E8                                              _rand 83DC  
                                            fsr0h 000FEA                                              fsr1h 000FE2  
                                            indf0 000FEF                                              fsr2h 000FDA  
                                            fsr0l 000FE9                                              indf2 000FDF  
                                            fsr1l 000FE1                                              map@x 006E  
                                            fsr2l 000FD9                                              btemp 003F  
                                __end_of_ADC_Read 96B4                      ??_key_press_release_note_off 0060  
                                            prodh 000FF4                                              prodl 000FF3  
              keyboard_eight_note_efficient@index 007B                                   ??_setupArpeggio 0061  
                                            start 000C                                Lcd_Print_Char@i_59 0066  
              keyboard_eight_note_efficient@pitch 007A                                     __CFG_IESO$OFF 000000  
                                 ___fldiv@new_exp 0098                                Lcd_Print_Char@data 0063  
                            __end_of_analogInputs 9448                                    _drumCCTypeMenu 0162  
                                 __end_of_Lcd_Cmd 98A2                                     __CFG_MCLRE$ON 000000  
                                 _rotateArrayLeft 88DA                                      ___param_bank 000000  
                                           ??_ISR 0012                                             ??_map 0082  
                 __end_of_setControllerResolution 97DA                         _arpeggiatorLatchOnOffMenu 0123  
                                      _Lcd_SetBit 977E                                             l30001 454C  
                                           l30011 457A                                             l30005 4562  
                                           l30023 45AA                                             l30041 45F0  
                                           l30017 4592                                             l30035 45D8  
                                           l30053 4620                                             l30029 45C2  
                                           l30071 4668                                             l30047 4608  
                            programChange@channel 0062                                             l30305 0A98  
                                           l30065 4650                                             l30411 872E  
                                           l30059 4638                                             l31027 3EC6  
                                           l30317 0BE6                                             l30077 4680  
                                           l30253 38C8                                             l30191 378A  
                                           l31161 6D5A                                             l31153 6D34  
                                           l31217 97B4                                             l31157 6D4C  
                                           l31167 6D94                                             l31193 6E02  
                                           l30289 0A36                                             l31187 6DFE  
                                           l31525 51A0                                             l30397 8710  
                                           l33163 837A                                             l33155 8360  
                                           l31813 75B0                                             l32631 6190  
                                           l26313 9562                                             l32721 8B8E  
                                           l32625 6172                                             l26323 9590  
                                           l32715 8B62                                             l32619 615C  
                                           l32459 7A5A                                             l27141 68A4  
                                           l32653 6254                                             l32645 6222  
                                           l32735 8BF6                                             l32743 7906  
                                           l26511 5956                                             l32673 692C  
                                           l32665 6904                                             l32729 8BA8  
                                           l32753 798C                                             l26409 5C6A  
                                           l27305 2B2A                                             l32691 69CE  
                                           l32683 699C                                             l27067 56C0  
                                           l32669 6916                                             l26447 5CF2  
                                           l26481 58CC                                             l33683 832C  
                                           l33675 82D0                                             l26379 5BE0  
                                           l26549 59DE                                             l26637 5B6E  
                                           l26831 584C                                             l26743 492A  
                                           l26655 46FA                                             l26569 5A10  
                                           l26763 56EC                                             l26851 495C  
                                           l26599 5ACE                                     ___fltol@sign1 00C0  
                                           l26793 57AA                                   __end_of___aldiv 754A  
                                           l26939 4B8A                                             l26699 4840  
                                           l26895 4AA2                                             l29941 445E  
                                           l29953 448E                                             l29971 44D6  
                                           l29947 4476                                             l29965 44BE  
                                           l29983 4506                                             l29959 44A6  
                                           l29977 44EE                                             l29995 4534  
                                           l29989 451C                                   __end_of___fladd 3674  
                                           ?_main 0007                                             ?_load 0007  
                                 __end_of___fldiv 3EF0                                   __end_of___awdiv 626A  
                                ?_calculate_alpha 0007                                   __end_of___flneg 977E  
                                           _EEADR 000FA9                                             STR_10 FD64  
                                           STR_11 FD64                                             STR_12 FD6B  
                                           STR_20 FFC3                                             STR_13 FF9E  
                                           STR_21 FDFD                                             STR_14 FF88  
                                           STR_30 FDA8                                             STR_22 FD75  
                                           STR_15 FF93                                             STR_23 FF18  
                                           STR_31 FEC4                                             STR_16 FD6B  
                                           STR_24 FF58                                             STR_32 FE4D  
                                           STR_40 FE3D                                             STR_17 FF9E  
                                           STR_41 FFCD                                             STR_25 FED2  
                                           STR_33 FD97                                             STR_18 FF88  
                                           STR_50 FE8E                                             STR_34 FF4C  
                                           STR_42 FE98                                             STR_26 FE2D  
                                           STR_19 FF93                                             STR_51 FF0F  
                                           STR_43 FFD2                                             STR_35 FFBB  
                                           STR_27 FEE0                                             STR_44 FFCD  
                                           STR_36 FFB3                                             STR_60 FEFC  
                                           STR_52 FDDB                                             STR_28 FDCA  
                                 __end_of___awmod 69E4                                             STR_61 FFC8  
                                           STR_45 FEB6                                             STR_53 FE89  
                                           STR_29 FE6B                                             STR_37 FD86  
                                           STR_54 FFDC                                             STR_70 FF7C  
                                           STR_38 FF25                                             STR_46 FEEE  
                                           STR_62 FE1D                                             STR_71 FFA9  
                                           STR_55 FF0A                                             STR_63 FEA7  
                                           STR_39 FDEC                                             STR_47 FDB9  
                                           STR_72 FF7C                                             STR_56 FFF0  
                                           STR_48 FF32                                             STR_64 FE7A  
                                           STR_73 FFA9                                             STR_49 FDDF  
                                           STR_65 FF3F                                             STR_57 FE5C  
                                           STR_74 FF7C                                             STR_66 FF70  
                                           STR_58 FF64                                             STR_59 FF6B  
                                           STR_67 FFA9                                             STR_75 FE0D  
                                           STR_68 FF7C                                   __end_of___lbmod 8350  
                                           STR_69 FFA9                                   __end_of___flmul 3336  
                                 __end_of___fltol 7056                                             _CMCON 000FB4  
                                           _T0CON 000FD5                                             _T1CON 000FCD  
                                           _T2CON 000FCA                                             _LATCH 0020  
                                           u51100 5236                                             u51030 5202  
                                           u51210 52B6                                             u51130 5250  
                                           u52020 3278                                             u52100 6FB6  
                                           u51070 521C                                             u45000 8AEE  
                                           u51240 52D6                                             u52105 6FAC  
                                           u52050 32CE                                             u51330 533C  
                                           u52060 32EC                                             u52140 702E  
                                           u52220 60E0                                             u45020 8B04  
                                           u60230 837A                                             u51600 344C  
                                           u45040 8B1C                                             u52320 8D68  
                                           u51610 344E                                             u52410 8DB8  
                                           u51370 5370                                             u45220 97E8  
                                           u52270 85B6                                             u51455 4336  
                                           u51800 35DE                                             u51640 3490  
                                           u52290 85EC                                             u45235 97EA  
                                           u46060 5B7E                                             u51590 343C  
                                           u52390 8DA2                                             u45520 5C9C  
                                           u46400 577C                                             u46240 48D4  
                                           u46160 4812                                             u51850 3634  
                                           u51770 35C6                                             u54410 3858  
                                           u45620 5D02                                             u45460 5C3C  
                                           u46340 493A                                             u54350 37D4  
                                           u51960 3072                                             u54600 0BE2  
                                           u51970 31E8                                             u54290 374A  
                                           u45740 5988                                             u46460 57F6  
                                           u45900 5AA0                                             u51975 31DE  
                                           u54640 0CEA                                             u45840 59EE  
                                           u45680 5928                                             u46560 585C  
                                           u54730 0FC8                                             u54810 872A  
                                           u54490 3910                                             u54660 0CFC  
                                           u54580 0A94                                             u46740 4B36  
                                           u46660 4A74                                             u57300 4C6E  
                                           u54830 8750                                             u54680 0D7C  
                                           u54840 8752                                             u46840 4B9A  
                                           u45960 5B1A                                             u47800 2B7E  
                                           u47720 2B48                                             u56360 925A  
                                           u57400 4D9A                                             u57320 4CBA  
                                           u58040 7B92                                             u54690 0E0E  
                                           u57250 4C3E                                             u59010 78F0  
                                           u57315 4C70                                             u47900 74E4  
                                           u47660 2B00                                             u47580 2AB6  
                                           u56620 3E86                                             u57500 4DD6  
                                           u57420 4DA6                                             u57340 4D5A  
                                           u57260 4C56                             _processPotentiometers 419E  
                                           u54790 1194                                             u56630 3EAA  
                                           u57415 4D9C                                             u57335 4CBC  
                                           u54880 852A                                             u58240 82BE  
                                           u57520 4DE2                                             u57440 4DB2  
                                           u57360 4D82                                             u57280 4C62  
                                           u67040 6BA8                                             u54890 8562  
                                           u56715 9514                                             u67107 962A  
                                           u57515 4DD8                                             u57435 4DA8  
                                           u57355 4D5C                                             u57275 4C58  
                                           u56716 9516                                             u47780 2B76  
                                           u57460 4DBE                                             u57380 4D8E  
                                           u57620 7F4E                                             u67060 6BBA  
                                           u67117 9664                                             u59310 8C04  
                                           u56590 3E30                                             u67207 8644  
                                           u54887 8520                                             u67127 6DF4  
                                           u59135 8436                                             u57455 4DB4  
                                           u57375 4D84                                             u57295 4C64  
                                           u59240 6954                                             u59136 843C  
                                           u58440 84E0                                             u57480 4DCA  
                                           u57800 8F54                                             u67217 8388  
                                           u54897 8558                                             u67137 6E4C  
                                           u59137 844A                                             u56770 6E48  
                                           u59330 799A                                             u59170 61B8  
                                           u67227 83A0                                             u67147 6E56  
                                           u57475 4DC0                                             u57395 4D90  
                                           u56764 6E36                                             u59260 69BA  
                                           u57580 7F28                                             u57740 89C4  
                                           u67237 9894                                             u67157 6E60  
                                           u56765 6E32                                             u67077 95B6  
                                           u59190 6240                                             u58710 7102  
                                           u67167 6E8A                                             u58455 84E2  
                                           u57495 4DCC                                             u67087 9122  
                                           u58640 7FCE                                             u57680 7A48  
                                           u57920 7CD2                                             u67177 6D84  
                                           u56785 6E4A                                             u67097 95F0  
                                           i2l858 8680                                             u58730 7128  
                                           i2l859 8690                                             u67187 9692  
                                           u57595 7F2A                                             u57860 7D72  
                                           u67197 8616                                             u58725 7104  
                                           u58655 7FD0                                             u58850 782A  
                                           u57980 7C32                                             u58870 783C  
                                           u59920 88D0                                             u66980 6B30  
                                   _controlChange 918E                                             u59935 88D2  
                                           u66995 6B32                                             _SPBRG 000FAF  
                                           _PORTA 000F80                                             _PORTB 000F81  
                                           _PORTC 000F82                                             _PORTD 000F83  
                                           _PORTE 000F84                                      _sort_pitches 64B6  
                         __size_of_Lcd_Set_Cursor 0062                                             _TRISA 000F92  
                                           _TRISB 000F93                                             _TRISC 000F94  
                                           _TRISD 000F95                                             _TRISE 000F96  
                                           _TXREG 000FAD                    ?_keyboard_eight_note_efficient 0007  
                                   __CFG_PWRT$OFF 000000                             __end_of_playThisNote8 2BE2  
                                   __CFG_WRT0$OFF 000000                                     __CFG_WRT1$OFF 000000  
                      __size_of_keyboardTranspose 02A6                                     __CFG_WRT2$OFF 000000  
                                   __CFG_WRT3$OFF 000000                       encoderInputsBuxton@pinstate 000C  
                                  __CFG_EBTR0$OFF 000000                                    __CFG_FCMEN$OFF 000000  
                                  __CFG_EBTR1$OFF 000000                                    __CFG_EBTR2$OFF 000000  
                                  __CFG_EBTR3$OFF 000000                                     __CFG_WRTB$OFF 000000  
                                 __end_of_display 9986                                     __CFG_WRTC$OFF 000000  
                                   __CFG_WRTD$OFF 000000                                    Read_b_eep@badd 0060  
                                 ??_processOctave 007E                                    __CFG_EBTRB$OFF 000000  
                                           _flag1 000F                                             _flag2 000E  
                                   _transposeMenu 0168                                             _clock 99EE  
                 ?_keyboard_sharps_only_efficient 0007                  ??_keyboard_sharps_only_efficient 0077  
             __size_of_key_press_release_note_off 0168                            Write_b_eep@GIE_BIT_VAL 0063  
                                           _randx 01EF                                             _setup 8A3E  
                                           _srand 99C4                                             _state 00ED  
                                 __end_of_sendUSB 6E9A                                       copy_array@i 0060  
                                 __end_of_sendOut 6DB6                                    __pbitbssCOMRAM 0008  
                                 __end_of_noteOff 94D8                                    __CFG_BOREN$OFF 000000  
                                           tablat 000FF5                                             ltemp0 003F  
                                           ltemp1 0043                                             ltemp2 0047  
                          _playDiatonicTriadMajor 5A02                                  _suppress_note_on 0014  
                  __size_of_finish_arpeggio_setup 001E                            _playDiatonicTriadMinor 46EC  
                                           plusw1 000FE3                                             plusw2 000FDB  
                   __end_of_finish_arpeggio_setup 9922                         __size_of_Lcd_Print_String 0084  
              __end_of_delete_notes_from_arpeggio 96E8                        _delete_notes_from_arpeggio 96B4  
                                           ttemp0 003F                                             ttemp1 0042  
                                           ttemp2 0045                                             ttemp3 0048  
                  keyboardTranspose@semitone_temp 00EA                                             status 000FD8  
                                   _UN_LATCH_MODE 001F                                             wtemp0 003F  
                                           wtemp1 0041                                             wtemp2 0043  
                                           wtemp3 0045                                             wtemp4 0047  
                                           wtemp5 0049                                             wtemp6 0040  
                              _encoder_state_last 017E                              _LAST_NOTE_MODE_RESET 0016  
                         __size_of_Lcd_Print_Char 0084                       __size_of_buttonInputsSerial 007C  
                                   ?_Function_A_1 0007                                     ?_Function_A_2 0007  
                                   ?_Function_A_3 0007                                     ?_Function_C_1 0007  
                                   ?_Function_C_2 0007                                     ?_Function_C_3 0007  
                                   ?_Function_D_1 0007                                     ?_Function_D_2 0007  
                                   ?_Function_D_3 0007                                     ?_Function_D_4 0007  
                                   ?_Function_E_1 0007                                     ?_Function_D_5 0007  
                                   ?_Function_E_2 0007                                     ?_Function_G_1 0007  
                                   ?_Function_G_2 0007                                     ?_Function_G_3 0007  
                                   ?_Function_G_4 0007                                     ?_Function_H_1 0007  
                                   ?_Function_H_2 0007                                     ?_Function_H_3 0007  
                                   ?_Function_H_4 0007                                     ?_Function_H_5 0007  
                                   ?_Function_H_6 0007                                     ?_Function_H_7 0007  
                                   ?_Function_H_8 0007                                     ?_Function_H_9 0007  
                                 __initialization 6BD6                                      __end_of_main 6BD6  
                                    __end_of_load 99EE                                      __end_of_rand 8464  
                                 ??_programChange 0062                                        _Read_b_eep 9922  
                                __end_of_Busy_eep 99FA                               _half_diminished_7th 02CC  
                         _initializeSaveSlotsOnce 936E                                        _Function_A 73AE  
                                      _Function_B 8860                                        _Function_C 8082  
                                      _Function_D 81A4                                        _Function_E 8CE6  
                                      _Function_F 8E8E                                        _Function_G 8114  
                                      _Function_H 76D4                           __size_of_loadFromEEPROM 0238  
                                          ??_main 02E6                            _arpeggiatorOctavesMenu 012F  
                                          ??_load 0060                               _ARPEGGIO_IS_PLAYING 0032  
                                  ?_controlChange 0060                                __size_of_Lcd_Clear 0016  
                                   __activetblptr 000002                                   ??_displayDigits 0007  
                                    ?_playSeventh 0007                                __size_of_Lcd_Start 008C  
                      rotateArrayLeft@array_index 0067                              displayDigits@lowByte 000A  
                                 ??_displayString 0007                                            ?_clock 0007  
                                          _ADCON0 000FC2                                            _ADCON1 000FC1  
                                          _ADCON2 000FC0                                            _ADRESH 000FC4  
                                          _EEADRH 000FAA                                            _ADRESL 000FC3  
                                          _EEDATA 000FA8                                            _EECON2 000FA7  
                                          _T08BIT 007EAE                                            ?_setup 0007  
                                          ?_srand 0060                      calculate_pulse_length@s_tick 00C4  
                                 __CFG_BBSIZ$1024 000000                                      ?_noteOffDrum 0060  
                   _which_functions_are_unblocked 0028                               saveToEEPROM@to_save 0064  
                                          _INT0IE 007F94                                            _INT0IF 007F91  
                                   ?_exitFunction 0007                                            i2l3011 6604  
                                          i2l3013 6654                                            i2l3014 667A  
                                          i2l3015 66A2                                            i2l3016 66CA  
                                          i2l3009 65DA                                            i2l5004 54AE  
                                          i2l5008 54CC                                            i2l5009 54DA  
                                          i2l5510 120A                                            i2l5520 1316  
                                          i2l5512 1264                                            i2l5521 1322  
                                          i2l2970 3B00                                            i2l5530 1426  
                                          i2l5514 12B0                                            i2l2971 3A64  
                                          i2l5531 1424                                            i2l5515 12AE  
                                          i2l2980 3B3A                                            i2l2972 39A4  
                                          i2l5532 1478                                            i2l5516 12EE  
                                          i2l2981 3B32                                            i2l2973 39C0  
                                          i2l5541 14E2                                            i2l5533 1476  
                                          i2l5517 12EC                                            i2l2990 3B94  
                                          i2l2974 3AB0                                            i2l5550 15D6  
                                          i2l5542 1526                                            i2l5526 1382  
                                          i2l2975 3AF8                                            i2l5551 1604  
                                          i2l5543 1570                                            i2l5535 1488  
                                          i2l5519 12FE                                            i2l2992 3BAE  
                                          i2l5480 65BA                                            i2l5560 171E  
                                          i2l5536 14A0                                            i2l5528 13D2  
                                          i2l2985 3B5E                                            i2l5481 64C8  
                                          i2l5553 1652                                            i2l5537 14AC  
                                          i2l2986 3B60                                            i2l5562 1768  
                                          i2l5554 1684                                            i2l2995 3BE8  
                                          i2l5483 6540                                            i2l5563 1796  
                                          i2l2996 3BEA                                            i2l5572 180A  
                                          i2l2989 3B92                                            i2l5485 65B8  
                                          i2l2998 3C04                                            i2l5478 65C4  
                                          i2l5574 1818                                            i2l2999 3C2A  
                                          i2l5479 64C2                                            i2l5575 1844  
                                          i2l5559 16EA                                            i2l5579 1864  
                                          i2l4994 540A                                            i2l4995 5426  
                                          i2l4996 5440                                            i2l4998 544A  
                                          i2l4999 54E6                                         ??_Lcd_Cmd 0061  
                                          _TMR0IE 007F95                                            _TMR0IF 007F92  
                                          _TMR1IE 007CE8                                            _TMR1IF 007CF0  
                                          _TMR2IE 007CE9                                            _TMR2IF 007CF1  
                                          _TMR0ON 007EAF                                            _TMR1ON 007E68  
                                          _TMR2ON 007E52                           __end_of_rotateArrayLeft 8952  
                                          _ON_OFF 002F                                  __end_of___xxtofl 6138  
                    __size_of_initializeMenuArray 0202                          __end_of_selectSlotOnBoot 98E4  
                                  ??_Function_A_1 00C7                                    ??_Function_A_2 00C7  
                                  ??_Function_A_3 00C7                                    ??_Function_C_1 00C7  
                                  ??_Function_C_2 00C7                                    ??_Function_C_3 00C7  
                                  ??_Function_D_1 00C7                                    ??_Function_D_2 00C7  
                                  ??_Function_D_3 00C7                                    ??_Function_D_4 00C7  
                                  ??_Function_E_1 00C7                                    ??_Function_D_5 00C7  
                                  ??_Function_E_2 00C7                                    ??_Function_G_1 00C7  
                                  ??_Function_G_2 00CC                                    ??_Function_G_3 006E  
                                  ??_Function_G_4 00C7                                    ??_Function_H_1 00C7  
                                  ??_Function_H_2 00CC                                    ??_Function_H_3 00C7  
                                  ??_Function_H_4 00C7                                    ??_Function_H_5 00C7  
                                  ??_Function_H_6 00C8                                    ??_Function_H_7 00C7  
                                  ??_Function_H_8 00C7                                    ??_Function_H_9 00C7  
                                   ?_panic_button 0007                             __end_of_resetArpeggio 9558  
                                  __CFG_XINST$OFF 000000                           __size_of_Function_H_6_1 009C  
                         __size_of_Function_H_6_2 00AA                           __size_of_Function_H_8_1 0076  
                         __size_of_Function_H_8_2 0064                           __size_of_Function_H_9_1 00A0  
                         __size_of_Function_H_9_2 00A0                           __size_of_Function_H_9_3 00A0  
                         __size_of_Function_H_9_4 00A0                                  ??_processDrumpad 0063  
                        readPotentiometers@i_3434 019B                          readPotentiometers@i_3435 019D  
                                          ___lmul 754A                                  ascii@LCD_STRINGS E8C3  
                                       ??___aldiv 0068                                         ??___fladd 00AC  
                                          ___wmul 9854                                         ??___fldiv 008F  
                                       ??___flneg 00A4                                         ??___flmul 0076  
                                       ??___fltol 00BC                             __size_of_doTheUnLatch 01BE  
                         ??_add_notes_to_arpeggio 0069                                       ?_Lcd_SetBit 0007  
                                __end_of_exitLoad 9608                                  __end_of_exitSave 9642  
                                          _octave 0050                                            clear_0 6C7C  
                                          clear_1 6C88                                            clear_2 6C94  
                                          clear_3 6CA0                                            clear_4 6CB8  
                                __end_of_menu_lcd 6F78                                            _noteOn 8B26  
                          ?_processPotentiometers 0007                                            _ttable F33D  
                            __size_of_displayTest 0080                                            _strcpy 971C  
                                       ??_display 000C                         _arpeggiatorNoteLengthMenu 0129  
                               _programChangeMenu 0144                                 _latch_was_pressed 001D  
                                    __pdataCOMRAM 004B                                         ?_ADC_Read 0060  
                        __size_of_printThisNumber 0014                                 _suppress_note_off 0013  
                                    __mediumconst E8C2                  keyboard_all_note_efficient@pitch 0076  
                                          tblptrh 000FF7                                            tblptrl 000FF6  
                                          tblptru 000FF8                                            srand@x 0060  
                                  ??_exitFunction 006E                                   Lcd_Set_Cursor@a 0064  
                                 Lcd_Set_Cursor@b 0063                                   Lcd_Set_Cursor@y 0066  
                                 Lcd_Set_Cursor@z 0065                      __size_of_encoderInputsBuxton 0080  
                                 noteOnDrum@pitch 0060                         loadFromEEPROM@baseAddress 01E2  
                                    ___xxtofl@arg 006A                                      ___xxtofl@exp 0069  
                            selectSlotOnBoot@slot 02E5                             __size_of_analogInputs 0048  
                                    ___xxtofl@val 0060                        _LAST_NOTE_MODE_KEY_RELEASE 0018  
                                      __accesstop 0060                           __end_of__initialization 6CBE  
                                 __CFG_PBADEN$OFF 000000                                        ___flneg@f1 00A0  
              __end_of_key_press_release_note_off 5E7E                        _key_press_release_note_off 5D16  
                                   _MAX_NUM_NOTES F39D                                      _doTheUnLatch 51DC  
                               __end_of_Lcd_Clear 999C                          __size_of_processKeyboard 006C  
                                   ___rparam_used 000001                                    ??_panic_button 0063  
                               _button_state_last 00D4                                        ___fltol@f1 00B8  
                           __end_of_digitalInputs 928C                                 __end_of_Lcd_Start 83DC  
                   processPotentiometers@highByte 0067                     __size_of_setControllerNumbers 04F6  
                                  __pcstackCOMRAM 0007                                        ___inthi_sp 06B2  
                          _diatonic_seventh_major F2A7                         ??_initializeSaveSlotsOnce 00B4  
                    ?_keyboard_all_note_efficient 0007                              initializeMenuArray@i 0068  
                                    __pidataBANK0 99D4                                      __pidataBANK1 993C  
                                    __pidataBANK2 907A                                      __pidataBANK3 8DBE  
                          _diatonic_seventh_minor F26B                               buttonInputsSerial@i 0064  
                                   __end_of_clock 99F4                                       ?_Read_b_eep 0060  
                                   _stored_octave 0031                                     __end_of_setup 8AB2  
                                   __end_of_srand 99D4                                   ??_controlChange 0062  
                                     ?_Function_A 0007                                       ?_Function_B 0007  
                                     ?_Function_C 0007                                       ?_Function_D 0007  
                                     ?_Function_E 0007                                       ?_Function_F 0007  
                                     ?_Function_G 0007                                       ?_Function_H 0007  
                     _arpeggiatorLastNoteModeMenu 00DC                      _CONTROL_CHANGE_IS_BEING_SENT 0031  
                             ADC_Read@adc_channel 0064                           Function_C_2@array_index 00C8  
                                   ?_playArpeggio 0007                              _number_of_interrupts 02C4  
                                  _Lcd_Set_Cursor 8FBA                                        ??_ADC_Read 0062  
                                   ?_saveToEEPROM 0007                                      _analogInputs 9400  
                    __end_of_pentatonic_major_key F39D                                   _slidepotsCCMenu 014D  
                      add_notes_to_arpeggio@pitch 0070                                  playSeventh@pitch 0069  
delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT 006A                        __end_of_readPotentiometers 1198  
                                         ??_clock 0060                                   findArrayIndex@i 0062  
                    __end_of_processEncoderBuxton 0A30                                           ??_setup 0060  
                                         ??_srand 0062                             displayDigits@highByte 000B  
                                      __pbssBANK0 00CC                                        __pbssBANK1 0100  
                                      __pbssBANK2 0200                                        __pbssBANK3 0369  
                                      _doTheLatch 98E4                                     ?_playThisNote 0007  
                                _Lcd_Print_String 84E8                         keyboardTranspose@keyPress 000A  
                             __size_of_Lcd_SetBit 0030                                         ?_Busy_eep 0007  
                    __end_of_pentatonic_minor_key F392                                  ?_rotateArrayLeft 0007  
                          _drum_button_state_last 0038                                    _Lcd_Print_Char 856C  
                        ??_calculate_pulse_length 00C4                      ??_delete_notes_from_arpeggio 0069  
                                    _DISPLAY_MODE 00EE                                        _clear_row1 982C  
                                      _clear_row2 9804                                           ?___wmul 0060  
                          saveToEEPROM@byte_count 00B2                      playDiatonicTriadMajor@i_1713 0067  
                              __size_of_playTriad 0184                                __size_of_pitchBend 0048  
                   ??_keyboard_all_note_efficient 0076                                Lcd_SetBit@data_bit 0060  
                                  _loadFromEEPROM 4BAE                            __end_of_Lcd_Set_Cursor 901C  
                                   ??_Write_b_eep 0063                                    ??_playArpeggio 000C  
                         __size_of_ADC_Initialize 0014                                           ?_strcpy 0060  
                         Function_C_3@array_index 00C8                                  Function_H_1@temp 00C7  
                               _number_to_display 004B                                        _eepromMenu 013B  
                                      _eepromExit 9642                           __size_of_findArrayIndex 003C  
                                  ??_saveToEEPROM 0064                                           i2l22947 65D2  
                                         _INTEDG0 007F8E                                           _DRUM_CC 00F5  
                                       ?___xxtofl 0060                                           _OCTAVES 004E  
              findArrayIndex@pitch_of_key_release 0061                              __end_of_Function_A_1 73AE  
                int2string@number_to_display_temp 0064                              __end_of_Function_A_2 72D8  
                            __end_of_Function_A_3 7202                              __end_of_Function_C_1 82C2  
                            __end_of_Function_C_2 64B6                              __end_of_Function_C_3 6390  
                            __end_of_Function_D_1 84E8                              __end_of_Function_D_2 907A  
                            __end_of_Function_D_3 8A3E                              __end_of_Function_D_4 8860  
                            __end_of_Function_D_5 87E6                              __end_of_Function_E_1 9324  
                            __end_of_Function_E_2 92D8                              __end_of_Function_G_1 7EB6  
                            __end_of_Function_G_2 7E16                              __end_of_Function_G_3 9134  
                            __end_of_Function_G_4 7FEC                              __end_of_Function_H_1 712C  
                            __end_of_Function_H_2 8E8E                              __end_of_Function_H_3 918E  
                            __end_of_Function_H_4 7846                              __end_of_Function_H_5 7AF6  
                            __end_of_Function_H_6 8CE6                              __end_of_Function_H_7 78F4  
                            __end_of_Function_H_8 8C78                              __end_of_Function_H_9 8082  
                        ?_setControllerResolution 0007                              __size_of_playSeventh 0192  
                 __end_of_initializeSaveSlotsOnce 93B8                           ?_playDiatonicTriadMajor 0061  
                         ?_playDiatonicTriadMinor 0061                                        _drumCCMenu 015C  
                                  ??_playThisNote 0071               _arpeggiatorLastNoteModeKeyPressMenu 0111  
                               ??_printThisNumber 0062                               __size_of_Read_b_eep 001A  
                                doTheUnLatch@once 0009                                        _int2string 7610  
                                 _ARPEGGIO_RANDOM 0268                                   Lcd_Print_Char@i 0064  
                           __end_of_un_block_code 996E                                        _dorian_key FD46  
                                      ??_Busy_eep 0060                                           _Lcd_Cmd 987C  
                          __end_of_Lcd_Print_Char 85F0                                        _drumNNMenu 015F  
                                       ?_exitLoad 0007                              __size_of_noteOffDrum 0034  
                                      _copy_array 8F58                                         ?_exitSave 0007  
                     ?_delete_notes_from_arpeggio 0007                                   _ARPEGGIO_SORTED 0278  
                             __size_of_Function_A 00CE                               __size_of_Function_B 007A  
                             __size_of_Function_C 0092                               __size_of_Function_D 0090  
                             __size_of_Function_E 006C                               __size_of_Function_F 0066  
                             __size_of_Function_G 0090                               __size_of_Function_H 00C0  
                                       ?_menu_lcd 0007                          _playDiatonicSeventhMajor 56DE  
                 ??_keyboard_eight_note_efficient 007A                          _playDiatonicSeventhMinor 494E  
                                         __Hparam 0000                                      _CONTROL_MODE 000B  
                       playDiatonicSeventhMajor@i 0066                                    _mixolydian_key FD19  
                                         __Lparam 0000                                 _potentiometer_raw 0369  
                           __end_of_setupArpeggio 8B26                                    _Function_H_6_1 7EB6  
                                  _Function_H_6_2 79A2                                    _Function_H_8_1 8952  
                                  _Function_H_8_2 8EF4                                    _Function_H_9_1 7CD6  
                                  _Function_H_9_2 7C36                                    _Function_H_9_3 7B96  
                                  _Function_H_9_4 7AF6            __end_of_keyboard_sharps_only_efficient 419E  
         __size_of_keyboard_sharps_only_efficient 02AE                    _keyboard_sharps_only_efficient 3EF0  
                       playDiatonicSeventhMinor@i 0067                                           ___aldiv 747C  
                                         ___fladd 3336                                   _midiChannelMenu 0147  
                                         ___fldiv 3C3A                                           ___awdiv 6138  
                                         ___flneg 974E                                   __size_of___lmul 00C6  
                                         ___awmod 68E4                                           ___lbmod 82C2  
                                         ___flmul 2FE4                            __end_of_loadFromEEPROM 4DE6  
                                         ___fltol 6F78                                   __size_of___wmul 0028  
                               ??_processKeyboard 007C                              __end_of_exitFunction 95CE  
                                 __CFG_STVREN$OFF 000000                                           _channel 003E  
                                         __pcinit 6BD6                                           __ramtop 0D00  
                                 ?_Lcd_Set_Cursor 0063                                        _ionian_key FD55  
                                 __size_of_noteOn 0072                                           _ema_sum 0240  
                               __end_of_major_key F387                                           __ptext0 6AE2  
                                         __ptext1 99C4                                           __ptext2 8A3E  
                                         __ptext3 98C4                                           __ptext4 98A2  
                                         __ptext5 6E9A                                           __ptext6 9986  
                                         __ptext7 76D4                                           __ptext8 7FEC  
                                         __ptext9 7AF6                                           _command 01F7  
                              _NOTE_LENGTH_PULSES 004D                                           _display 996E  
                                 __size_of_strcpy 0032                                      __size_of_ISR 553C  
                             _initializeMenuArray 4DE6                                      __size_of_map 0106  
                                      ??___xxtofl 0064                            saveToEEPROM@slotNumber 00B1  
                            __end_of_panic_button 98C4                                Function_H_6_1@temp 00C7  
                                         _sendUSB 6DB6                                  ___aldiv@dividend 0060  
                  __end_of_playDiatonicTriadMajor 5B92                                           _sendOut 6CC8  
                  __end_of_playDiatonicTriadMinor 494E                                  rotateArrayLeft@i 0068  
                                         _noteOff 9490                                _GLOBAL_STATUS_BYTE 0181  
                                noteOffDrum@pitch 0060                               __end_of_Write_b_eep 951A  
           _arpeggiatorLastNoteModeKeyReleaseMenu 010E                                  playTriad@triad_p 0065  
                               __end_of_seg_ascii F26B                           saveToEEPROM@baseAddress 00AF  
                        __end_ofascii@LCD_STRINGS F220              __size_of_keyboard_all_note_efficient 051A  
                               __end_of_minor_key F378                          __size_of_calculate_alpha 004A  
                 setControllerNumbers@array_index 006F                                         _DRUM_MODE 000C  
                                       _DRUM_NOTE 01E7                                    __pintcode_body 539A  
            __end_of_random_pitches_non_repeating 79A2             __size_of_random_pitches_non_repeating 00AE  
                           __end_of_processOctave 3982                      _random_pitches_non_repeating 78F4  
                            end_of_initialization 6CBE                                 __end_of_playTriad 5D16  
                                     ?_doTheLatch 0007                                 __end_of_pitchBend 9490  
                                 ?_Lcd_Print_Char 0007                                        ??_exitLoad 006E  
                                   __Lmediumconst E8C2                              _light_decimal_points 0030  
                                         int_func 539A                                        ??_exitSave 006E  
                                      ??_menu_lcd 00CC                        __end_of_buttonInputsSerial 876C  
                                      _noteOnDrum 91E6                                    displayString@i 0008  
                          __end_of_mixolydian_key FD28                           __size_of_wait_one_pulse 002A  
                            ?_initializeMenuArray 0007                            __end_of_Function_H_6_1 7F52  
                          __end_of_Function_H_6_2 7A4C                            __end_of_Function_H_8_1 89C8  
                          __end_of_Function_H_8_2 8F58                            __end_of_Function_H_9_1 7D76  
                          __end_of_Function_H_9_2 7CD6                            __end_of_Function_H_9_3 7C36  
                          __end_of_Function_H_9_4 7B96                             _finish_arpeggio_setup 9904  
                                       i2u6120_40 1852                                         i2u6113_40 17F6  
                                      _noteNumber 003C                                         i2u6034_40 11B4  
                                       i2u3731_40 662E                                         i2u6109_40 17D6  
                                       i2u6056_40 1330                                         i2u6086_40 1586  
                                       i2u6078_40 14BC                                 ?_selectSlotOnBoot 0007  
                                       i2u6096_40 1692                                         i2u3797_40 869A  
                               pitchBend@highByte 0061                                         i2u3798_48 869C  
                                      _lydian_key FD28                                         i2u5940_45 3A9A  
                                       i2u6724_47 5430                                         i2u5934_40 3992  
                                       i2u5942_45 3ACA                                         i2u5945_40 3B14  
                                       i2u6691_40 54AA                                         i2u5939_45 3A76  
                 __size_of_calculate_pulse_length 0166                                         i2u6689_40 5488  
                                     ?_clear_row1 0007                                       ?_clear_row2 0007  
                                  _diatonic_major F310                                    _diatonic_minor F2E3  
                          __size_of_playThisNote8 0434                              _pentatonic_major_key F392  
                                  _joystickCCMenu 014A                                         _PRESCALER 01F5  
                                      _potsCCMenu 0150                                  ___aldiv@quotient 006A  
                              ??_selectSlotOnBoot 00CC                                           postdec0 000FED  
                                         postdec1 000FE5                                           postdec2 000FDD  
                                         postinc0 000FEE                                           postinc1 000FE6  
                                         postinc2 000FDE                           ??_processPotentiometers 0063  
                                 _drumChannelMenu 013E                                   ?_loadFromEEPROM 0007  
                             noteOffDrum@velocity 0061                                controlChange@value 0061  
                             _encoderInputsBuxton 8670                                      ??_Lcd_SetBit 0060  
                            _processEncoderBuxton 0014                             __end_of_programChange 9400  
                               playThisNote@pitch 0075                    __size_of_add_notes_to_arpeggio 00FE  
                        ??_playThisNotePentatonic 0072                     __end_of_add_notes_to_arpeggio 6AE2  
                                  _string2display 0192                                 _encoder_direction 0036  
                            _pentatonic_minor_key F387                                        _which_mode 00F1  
                                      _which_note 0033                                       ?_eepromExit 0007  
                                     ___fladd@grs 00B7                             __end_of_displayDigits 3C3A  
                                   ___xxtofl@sign 0068                             loadFromEEPROM@to_load 0197  
                                     ___fldiv@grs 009A                                       ___fldiv@rem 0094  
                               __size_of_ADC_Read 0038                             __end_of_displayString 66DA  
                            ?_encoderInputsBuxton 0007                      playDiatonicTriadMinor@i_1723 0068  
                                 _TIMER_OVERFLOWS 002E                                      _dominant_7th 02D8  
                             __end_of_aeolian_key FD19                                        map@out_max 007E  
                                      map@out_min 007A                                       ?_int2string 0060  
                            _arpeggiatorLatchMenu 0126                                        _statusByte 003D  
                                     ___flmul@grs 007C                              _arpeggiatorOnOffMenu 0135  
                                     ?_copy_array 0007                                programChange@data1 0060  
                              programChange@data2 0061                        _potentiometer_filtered_now 0220  
                              __end_of_Lcd_SetBit 97AE                             ??_initializeMenuArray 0066  
                     ?_key_press_release_note_off 0007                              __end_of_playArpeggio 1898  
                      _arpeggiatorUnLatchModeMenu 011D                            __end_of_diatonic_major F33D  
                                 ?_Function_H_6_1 0007                                   ?_Function_H_6_2 0007  
                                 ?_Function_H_8_1 0007                                   ?_Function_H_8_2 0007  
                                 ?_Function_H_9_1 0007                                   ?_Function_H_9_2 0007  
                                 ?_Function_H_9_3 0007                                   ?_Function_H_9_4 0007  
                          __end_of_diatonic_minor F310                              __end_of_saveToEEPROM 51DC  
                                _print_row_2_once 0026                                         _Lcd_Clear 9986  
           __end_of_keyboard_eight_note_efficient 2FE4            __size_of_keyboard_eight_note_efficient 0402  
                   _keyboard_eight_note_efficient 2BE2                                displayDigits@digit 00CC  
                     _calculate_pulse_length$5908 00C8                                     ??_displayTest 0066  
                                    ??_Read_b_eep 0062                                         _Lcd_Start 8350  
                           ?_processEncoderBuxton 0007                                    __end_of___lmul 7610  
                                  __end_of___wmul 987C                                     __pidataCOMRAM 99DF  
                            __end_of_playThisNote 68E4                                      ??_Function_A 00C7  
                                    ??_Function_B 00C7                                      ??_Function_C 00C9  
                                    ??_Function_D 00C8                                      ??_Function_E 00C7  
                                    ??_Function_F 00C7                                      ??_Function_G 00CC  
                                    ??_Function_H 00CC                             __size_of_Function_A_1 00D6  
                           __size_of_Function_A_2 00D6                               __size_of_doTheLatch 0020  
                           __size_of_Function_A_3 00D6                             __size_of_Function_C_1 008E  
                           __size_of_Function_C_2 0126                             __size_of_Function_C_3 0126  
                           __size_of_Function_D_1 0084                             __size_of_Function_D_2 005E  
                           __size_of_Function_D_3 0076                             __size_of_Function_D_4 007A  
                           __size_of_Function_D_5 007A                             __size_of_Function_E_1 004C  
                           __size_of_Function_E_2 004C                             __size_of_Function_G_1 00A0  
                           __size_of_Function_G_2 00A0                             __size_of_Function_G_3 005C  
                           __size_of_Function_G_4 009A                             __size_of_Function_H_1 00D6  
                           __size_of_Function_H_2 0066                             __size_of_Function_H_3 005A  
                           __size_of_Function_H_4 00B2                             __size_of_Function_H_5 00AA  
                           __size_of_Function_H_6 006E                             __size_of_Function_H_7 00AE  
                           __size_of_Function_H_8 006E                             __size_of_Function_H_9 0096  
                                  _ADC_Initialize 99B0                          __end_of_Lcd_Print_String 856C  
                        setControllerResolution@i 0060                                       _Write_b_eep 94D8  
                     playThisNotePentatonic@index 0071                                    __end_of_noteOn 8B98  
                                  _TRANSPOSE_MODE 0025                       playThisNotePentatonic@pitch 0007  
                                  _findArrayIndex 9558                                    __end_of_ttable F359  
                            _arpeggiatorTempoMenu 0132                                    __end_of_strcpy 974E  
                    __end_of_setControllerNumbers 27AE                               start_initialization 6BD6  
                          _calculate_pulse_length 5E7E                                 _encoder_state_now 017F  
                                     __end_of_ISR 5544                                     _playThisNote8 27AE  
                          __size_of_resetArpeggio 003E                                       __end_of_map 67E0  
                             __size_of_clear_row1 0028                               __size_of_clear_row2 0028  
                              wait_one_pulse@mode 0060                             ??_encoderInputsBuxton 0007  
                               playSeventh@i_1696 0068                  playThisNotePentatonic@temp_pitch 0076  
                              __end_of_Read_b_eep 993C                    __end_of_diatonic_seventh_major F2E3  
                          ?_finish_arpeggio_setup 0007                    __end_of_diatonic_seventh_minor F2A7  
                                     ?_noteOnDrum 0060                                 Lcd_Print_String@a 0068  
                               Lcd_Print_String@i 006C                                      _lastNoteMode 001A  
                               ??_calculate_alpha 00A0                                __end_of_Function_A 747C  
                              __end_of_Function_B 88DA                                __end_of_Function_C 8114  
                              __end_of_Function_D 8234                                __end_of_Function_E 8D52  
                              __end_of_Function_F 8EF4                                __end_of_Function_G 81A4  
                              __end_of_Function_H 7794                                 __size_of_Busy_eep 0006  
                              _readPotentiometers 0A30                               __size_of_eepromExit 003A  
                                   _ARPEGGIO_TYPE 0035                             __size_of_exitFunction 003A  
                                    _Function_A_1 72D8                                      _Function_A_2 7202  
                                    _Function_A_3 712C                                      _Function_C_1 8234  
                                    _Function_C_2 6390                                      _Function_C_3 626A  
                                    _Function_D_1 8464                                      _Function_D_2 901C  
                                    _Function_D_3 89C8                                      _Function_D_4 87E6  
                                    _Function_D_5 876C                                      _Function_E_1 92D8  
                                    _Function_E_2 928C                                      _Function_G_1 7E16  
                                    _Function_G_2 7D76                                      _Function_G_3 90D8  
                                    _Function_G_4 7F52                                      _Function_H_1 7056  
                                    _Function_H_2 8E28                                      _Function_H_3 9134  
                                    _Function_H_4 7794                                      _Function_H_5 7A4C  
                                    _Function_H_6 8C78                                      _Function_H_7 7846  
                                    _Function_H_8 8C0A                                      _Function_H_9 7FEC  
                                 _encoderPolarity 002A                                        ?_Lcd_Clear 0007  
                             displayString@letter 0100                                          ??___wmul 0064  
                                      ?_Lcd_Start 0007                            __end_of_ADC_Initialize 99C4  
                         readPotentiometers@count 0260                               ?_readPotentiometers 0007  
                                     __pdataBANK0 00F5                                       __pdataBANK1 01E7  
                                     __pdataBANK2 0288                                       __pdataBANK3 0300  
                                __CFG_LPT1OSC$OFF 000000                               __end_of_LCD_STRINGS FCFB  
                           __size_of_panic_button 0022                        Lcd_Print_Char@Lower_Nibble 0061  
                          __end_of_findArrayIndex 9594                               __size_of_int2string 00C4  
                             _encoderPolarityMenu 0138                             __end_of_controlChange 91E6  
                                        ??_strcpy 0064                   __size_of_playThisNotePentatonic 019A  
                                       ___fladd@a 00A8                                         ___fladd@b 00A4  
                             __size_of_copy_array 0062                                   _printThisNumber 999C  
                                   ?_sort_pitches 0007                                         ___fldiv@a 008B  
                                       ___fldiv@b 0087                                     _TIMER_PRELOAD 017B  
                             __end_of_displayTest 8670                           Function_D_3@array_index 00C7  
                         __size_of_processDrumpad 0506                                         ___flmul@a 0072  
                                       ___flmul@b 006E                                       __pbssCOMRAM 002A  
                                     _aeolian_key FD0A                                  _button_state_now 00D8  
                      displayDigits@digit_counter 00E9                                    ?_playThisNote8 0071  
                                   __pcstackBANK0 0060                                     __pcstackBANK1 0197  
                                   __pcstackBANK2 02E5                            __size_of_digitalInputs 0052  
                      ??_playDiatonicSeventhMajor 0062                  _arpeggiatorLastNoteModeResetMenu 0108  
                      ??_playDiatonicSeventhMinor 0062                                 __size_of___xxtofl 0154  
                                   sort_pitches@a 0009                       displayString@letter_counter 00E8  
                                   sort_pitches@i 000B                                     sort_pitches@j 000A  
                            ??_readPotentiometers 00C2                            processPotentiometers@i 0068  
                                    _exitFunction 9594                                       _ARPEGGIO_ON 0023  
                                        ?_Lcd_Cmd 0007                                      _keyboardMenu 00E5  
                                 _processKeyboard 8D52                                    _wait_one_pulse 97DA  
                                printThisNumber@n 0060                          ?_initializeSaveSlotsOnce 0007  
                           _drum_button_state_now 0039                  __size_of_setControllerResolution 002C  
                               __size_of_exitLoad 003A                              __end_of_phrygian_key FD46  
                               __size_of_exitSave 003A                               readPotentiometers@i 019C  
                               __size_of_menu_lcd 00DE                                      _panic_button 98A2  
                                   _resetArpeggio 951A                                  ??_Lcd_Set_Cursor 0064  
                                       _ema_alpha 0104                                     Function_H_5@i 00C8  
                                       __pintcode 0008                                     __pmediumconst E8C2  
                          ??_processEncoderBuxton 0060                                          ?___aldiv 0060  
                                        ?___fladd 00A4                                   _arpeggiatorMenu 00DF  
                                        ?___fldiv 0087                          __size_of_rotateArrayLeft 0078  
                                       __ptext100 86F0                                         __ptext101 99E8  
                                       __ptext110 6DB6                                         __ptext102 99EE  
                                        ?___flneg 00A0                                         __ptext111 6CC8  
                                       __ptext103 9400                                         __ptext120 3336  
                                       __ptext112 82C2                                         __ptext104 0A30  
                                       __ptext121 967C                                         __ptext113 66DA  
                                       __ptext105 419E                                         __ptext130 99F4  
                                       __ptext122 9804                                         __ptext114 754A  
                                       __ptext106 9448                                         __ptext131 9922  
                                       __ptext123 982C                                         __ptext115 747C  
                                       __ptext107 918E                                         __ptext132 4DE6  
                                       __ptext124 8FBA                                         __ptext116 5FE4  
                                       __ptext108 5D16                                         __ptext141 1198  
                                       __ptext133 9854                                         __ptext125 84E8  
                                       __ptext117 6F78                                         __ptext109 9490  
                                       __ptext142 64B6                                         __ptext134 85F0  
                                       __ptext126 856C                                         __ptext118 974E  
                                       __ptext143 8670                                         __ptext135 971C  
                                       __ptext127 936E                                         __ptext119 2FE4  
                                       __ptext144 996E                                         __ptext136 8350  
                                       __ptext128 4FE8                                         __ptext145 65CE  
                                       __ptext137 987C                                         __ptext129 94D8  
                                       __ptext146 3982                                         __ptext138 977E  
                                       __ptext139 99B0                                          ?___flmul 006E  
                                        ?___fltol 00B8                                   ?_ADC_Initialize 0007  
                                      playTriad@i 0067                                       _ARRAY_INDEX 00EB  
            _arpeggiatorLastNoteModeTransposeMenu 010B                                    _diminished_7th 02C8  
                                 ?_findArrayIndex 0007                                       _ema_integer 00FE  
                                  ??_sort_pitches 0007                                          ?_display 0007  
                                   ??_playSeventh 0061                    playDiatonicSeventhMajor@i_1718 0067  
                             __size_of_noteOnDrum 0054                                         _count_ISR 0264  
                   controlChange@controllerNumber 0060                          encoderInputsBuxton@tempA 000A  
                        encoderInputsBuxton@tempB 000B                           Function_D_4@array_index 00C7  
                                       _major_7th 02D4                                   playTriad@i_1691 0068  
                                        _ADC_Read 967C                                         _major_key F378  
                                       _last_note 00EC                                  ??_Lcd_Print_Char 0061  
                                       _menuArray 0300                                      _patch_number 00F3  
                                  __size_of_clock 0006                                      playSeventh@i 0067  
                                        _ARPEGGIO 0182                             __size_of_playArpeggio 0700  
                                   ??_noteOffDrum 0062                                    __size_of_setup 0074  
                                  __size_of_srand 0010                                      ??_doTheLatch 0066  
                          __end_of_wait_one_pulse 9804                             __size_of_saveToEEPROM 01F4  
                                       _minor_7th 02D0                                   ___aldiv@divisor 0064  
                              noteOffDrum@channel 0062                                         _seg_ascii F220  
                                 ___aldiv@counter 0068                            _playThisNotePentatonic 5544  
                                       _minor_key F369                                    ___wmul@product 0064  
                                       _playTriad 5B92                              int2string@isNegative 0008  
                                       _pitchBend 9448                                  ??_loadFromEEPROM 00CC  
                                pitchBend@channel 0062                                         _savesMenu 00E2  
                                     _arpeggioPtr 002A                                    ?_resetArpeggio 0007  
                                   _digitalInputs 923A                                          Lcd_Cmd@a 0062  
                                    ??_clear_row1 006E                                      ??_clear_row2 006E  
                            _setControllerNumbers 22B8                                       _LCD_STRINGS F39E  
                           __size_of_playThisNote 0104                                          _GO_nDONE 007E11  
             __end_of_keyboard_all_note_efficient 1DB2                       _keyboard_all_note_efficient 1898  
                                     ??_Lcd_Clear 0063                                  __CFG_WDTPS$32768 000000  
      initializeSaveSlotsOnce@initializeSlotsOnce 00B4                                          _HYST_VAL 01F3  
                                _diminished_triad 02DC                           __end_of_printThisNumber 99B0  
                                     ??_Lcd_Start 0063                                  pitchBend@lowByte 0060  
                                     _displayTest 85F0                               __end_of_locrian_key FD0A  
                                        _POT_MODE 002D                               __end_of_seg_bcd_hex F369  
                  key_press_release_note_off@temp 002C                    __size_of_processPotentiometers 02A8  
                              _buttonInputsSerial 86F0                     __end_of_processPotentiometers 4446  
                                       map@in_max 0076                                         map@in_min 0072  
                                       _triadMenu 016E                                __end_of_doTheLatch 9904  
                        buttonInputsSerial@i_4479 0065                                 ___wmul@multiplier 0060  
                                   _skipFirstLast 001B                            __size_of_un_block_code 0018  
                                 ??_playThisNote8 0072                                      _playArpeggio 1198  
                                 Write_b_eep@badd 0060                                   Write_b_eep@bdat 0062  
                                    ??_eepromExit 006E                      _arpeggiatorSkipFirstLastMenu 0114  
                       __size_of_selectSlotOnBoot 0020                      _arpeggiatorRandomizeSkipMenu 011A  
                         Function_D_5@array_index 00C7                               ?_buttonInputsSerial 0007  
                                    _saveToEEPROM 4FE8                           __end_of_processKeyboard 8DBE  
                          __size_of_setupArpeggio 0074                                 _string_to_display 01F8  
                              __end_of_clear_row1 9854                                __end_of_clear_row2 982C  
                             __end_of_playSeventh 5A02                                         copy_data0 6BEA  
                                       copy_data1 6C0A                                         copy_data2 6C2A  
                                       copy_data3 6C4A                                         copy_data4 6C6A  
                                ??_Function_H_6_1 00C7                                  ??_Function_H_6_2 00C7  
                                ??_Function_H_8_1 00C7                                  ??_Function_H_8_2 00C7  
                                ??_Function_H_9_1 00C7                                  ??_Function_H_9_2 00C7  
                                ??_Function_H_9_3 00C7                                  ??_Function_H_9_4 00C7  
             displayDigits@number_to_display_last 0179                      _arpeggiatorRandomizeTypeMenu 0117  
                                    ??_int2string 0062                                   ?_wait_one_pulse 0007  
             displayDigits@number_to_display_temp 0177                                      _playThisNote 67E0  
                                        _Busy_eep 99F4                                      ??_copy_array 0060  
                           __end_of_MAX_NUM_NOTES F39E                                 _NUM_NOTES_PRESSED 002F  
                         __size_of_random_pitches 0072                                     ?_doTheUnLatch 0007  
                                __size_of_Lcd_Cmd 0026                                        ?_playTriad 0007  
                                      _EECON1bits 000FA6                                        ?_pitchBend 0060  
                             __end_of_noteOffDrum 971C                                   _octave_overflow 0011  
                                  ?_digitalInputs 0007                              ??_buttonInputsSerial 0060  
                                     _major_triad 01FD                                          __Hrparam 0000  
                           ?_setControllerNumbers 0007                               _arpeggiatorTypeMenu 012C  
                                        __Lrparam 0000                                   _augmented_triad 02DF  
                              __end_of_eepromExit 967C                                        _DIGIT_MODE 003A  
                                __size_of___aldiv 00CE                                  __size_of___fladd 033E  
                                __size_of___fldiv 02B6                                  __size_of___awdiv 0132  
                                __size_of___flneg 0030                                       _last_octave 017D  
                                __size_of___awmod 0100                                  __size_of___lbmod 008E  
                                __size_of___flmul 0352                                  __size_of___fltol 00DE  
                                     _drumchannel 0052                            __size_of_processOctave 030E  
                            playSeventh@seventh_p 0065                                      ?_Write_b_eep 0060  
                         ?_calculate_pulse_length 00C2                                 ?_Lcd_Print_String 0068  
                              __end_of_int2string 76D4                                 ??_rotateArrayLeft 0060  
                              __end_of_dorian_key FD55                                    _processDrumpad 1DB2  
                                __size_of_display 0018                                __end_of_copy_array 8FBA  
                                        ___xxtofl 5FE4                             _add_notes_to_arpeggio 69E4  
                              ??_Lcd_Print_String 006A                                     ?_analogInputs 0007  
                                 _mainChannelMenu 0141                  __end_of_playDiatonicSeventhMajor 5870  
                __end_of_playDiatonicSeventhMinor 4BAE                                  __size_of_sendUSB 00E4  
                                 _calculate_alpha 9324                                  __size_of_sendOut 00EE  
                                __size_of_noteOff 0048                                          __ptext10 7B96  
                                        __ptext11 7C36                                          __ptext20 7A4C  
                                        __ptext12 7CD6                                          __ptext21 7794  
                                        __ptext13 8C0A                                          __ptext30 4BAE  
                                        __ptext22 9134                                          __ptext14 8EF4  
                                        __ptext31 5E7E                                          __ptext23 8E28  
                                        __ptext15 8952                                          __ptext40 92D8  
                                        __ptext32 95CE                                          __ptext24 7056  
                                        __ptext16 7846                                          __ptext41 81A4  
                                        __ptext33 7E16                                          __ptext25 8114  
                                        __ptext17 8C78                                          __ptext50 97AE  
                                        __ptext42 876C                                          __ptext34 9608  
                                        __ptext26 7F52                                          __ptext18 79A2  
                                        __ptext51 8082                                          __ptext43 87E6  
                                        __ptext35 9642                                          __ptext27 9594  
                                        __ptext19 7EB6                                          __ptext60 7202  
                                        __ptext52 626A                                          __ptext44 89C8  
                                        __ptext36 8E8E                                          __ptext28 90D8  
                                        __ptext61 72D8                                          __ptext53 6390  
                                        __ptext45 22B8                                          __ptext37 93B8  
                                        __ptext29 7D76                                          __ptext70 5544  
                                        __ptext62 9956                                          __ptext54 7610  
                                        __ptext46 901C                                          __ptext38 8CE6  
                                        __ptext71 2BE2                                          __ptext63 0014  
                                        __ptext55 6138                                          __ptext47 9324  
                                        __ptext39 928C                                          __ptext80 5870  
                                        __ptext72 27AE                                          __ptext64 923A  
                                        __ptext56 8234                                          __ptext48 3C3A  
                                        __ptext81 8B26                                          __ptext73 46EC  
                                        __ptext65 3674                                          __ptext57 8860  
                                        __ptext49 8464                                          __ptext90 96B4  
                                        __ptext82 9904                                          __ptext74 5A02  
                                        __ptext66 51DC                                          __ptext58 73AE  
                                        __ptext91 9558                                          __ptext83 8AB2  
                                        __ptext75 494E                                          __ptext67 98E4  
                                        __ptext59 712C                                          __ptext92 69E4  
                                        __ptext84 78F4                                          __ptext76 56DE  
                                        __ptext68 8D52                                          __ptext93 88DA  
                                        __ptext85 8B98                                          __ptext77 1898  
                                        __ptext69 3EF0                                          __ptext94 1DB2  
                                        __ptext86 83DC                                          __ptext78 67E0  
                                        __ptext95 91E6                                          __ptext87 68E4  
                                        __ptext79 5B92                                          __ptext96 96E8  
                                        __ptext88 8F58                                          __ptext97 4446  
                                        __ptext89 951A                                          __ptext98 97DA  
                                        __ptext99 999C                       __end_of_initializeMenuArray 4FE8  
                                        _encoderA 002C                                          _encoderB 002B  
                         ??_finish_arpeggio_setup 0061                                          _mainMenu 0174  
                    processPotentiometers@lowByte 0066                               _DISPLAY_STEP_NUMBER 000D  
                                      strcpy@from 0062                                          _drumMenu 0165  
                                  ??_doTheUnLatch 007A                            __size_of_programChange 0048  
                                        _exitLoad 95CE                                          _keyboard 00D0  
                                   __size_of_main 00F4                                          _exitSave 9608  
                               _startingDirection 0034                                          _modeMenu 0171  
                                   __size_of_load 0006                                     __size_of_rand 0088  
                                   _un_block_code 9956                                      ??_noteOnDrum 0062  
                   playDiatonicSeventhMajor@index 0061                                          _menu_lcd 6E9A  
                                        _parallel 0030                                   ??_resetArpeggio 0060  
                   playDiatonicSeventhMajor@pitch 0068                           _setControllerResolution 97AE  
                            __end_of_sort_pitches 65CE                                    playTriad@pitch 0069  
                              __end_of_ionian_key FD64                                       _locrian_key FCFB  
                  playDiatonicSeventhMinor@i_1728 0068                                       _seg_bcd_hex F359  
                                        _semitone 003B                            __size_of_displayDigits 02B8  
                                      _AUTO_LATCH 001E                                     _potsAlphaMenu 0153  
                                   _setupArpeggio 8AB2                               playThisNote8@mode_p 0078  
                                        _potsMenu 0159                                          _velocity 0051  
                                        _overflow 0012                                  ?_printThisNumber 0060  
                      Lcd_Print_Char@Upper_Nibble 0062                    __end_of_calculate_pulse_length 5FE4  
                                     _minor_triad 02E2                            __size_of_displayString 010C  
                        ??_playDiatonicTriadMajor 0062                          ??_playDiatonicTriadMinor 0062  
                                   _FIRST_READING 002E                                 _note_off_was_sent 0010  
                     playDiatonicTriadMajor@index 0061                            __end_of_processDrumpad 22B8  
                     playDiatonicTriadMajor@pitch 0068                              controlChange@channel 0062  
                     __end_of_encoderInputsBuxton 86F0                                    ??_analogInputs 019E  
                                     _playSeventh 5870                                        _INTCONbits 000FF2  
                              __end_of_noteOnDrum 923A                                      _phrygian_key FD37  
                                ?_processKeyboard 0007                                     _encoder_click 0029  
                              __end_of_lydian_key FD37                                 _keyboardTranspose 4446  
                                     _noteOffDrum 96E8                                          intlevel2 0000  
                              ?_keyboardTranspose 0007                                     _processOctave 3674  
                                  ?_un_block_code 0007                                    _AUTO_RANDOMIZE 001C  
                                 ??_digitalInputs 0080                   delete_notes_from_arpeggio@pitch 0069  
                                     ??_playTriad 0061                            ??_setControllerNumbers 006E  
                                     ??_pitchBend 0062                                    _SORT_DIRECTION 0024  
                                  _iterator_focus 00FD                                  int2string@number 0060  
             initializeMenuArray@NumberOfElements 0067                                  ??_ADC_Initialize 0060  
                             ??_keyboardTranspose 0062                          _NOTE_LENGTH_PULSES_ARRAY 02B8  
                                  ?_setupArpeggio 0007                                     _which_seventh 00EF  
                                ??_findArrayIndex 0060                                playThisNote8@index 0071  
                                  _lcd_print_once 0027                                playThisNote8@pitch 0076  
                   playDiatonicSeventhMinor@index 0061                     playDiatonicSeventhMinor@pitch 0066  
             keyboard_sharps_only_efficient@index 0078                                    _finishLastNote 0015  
                              Lcd_Set_Cursor@temp 0067               keyboard_sharps_only_efficient@pitch 0077  
                        loadFromEEPROM@byte_count 01E5                                     _programChange 93B8  
                                      Lcd_Start@i 0064                           __end_of_calculate_alpha 936E  
                                 ?_processDrumpad 0007                  __size_of_initializeSaveSlotsOnce 004A  
                                  _inputPotsArray 0288                            ?_add_notes_to_arpeggio 0007  
                                _selectSlotOnBoot 98C4                                       _seventhMenu 016B  
                                        strcpy@cp 0064                                          strcpy@to 0060  
                               noteOnDrum@channel 0062                                      _which_octave 0032  
                       __end_of_keyboardTranspose 46EC                                      _which_screen 004F  
                                    ___aldiv@sign 0069                                      _potsResoMenu 0156  
                                   _displayDigits 3982                       playDiatonicTriadMinor@index 0061  
                              noteOnDrum@velocity 0061                       playDiatonicTriadMinor@pitch 0066  
             __size_of_delete_notes_from_arpeggio 0034                                     ___fladd@signs 00B4  
                         ?_playThisNotePentatonic 0071                                    ?_processOctave 0007  
                     __size_of_readPotentiometers 0768                                     _displayString 65CE  
                       ??_setControllerResolution 0060                                       _which_triad 00F0  
                                   _KEYBOARD_MODE 00F2                                      ___fladd@aexp 00B5  
                                    ___fladd@bexp 00B6                                    _random_pitches 8B98  
                                    _toggle_state 002D                            __size_of_controlChange 0058  
               __size_of_playDiatonicSeventhMajor 0192                 __size_of_playDiatonicSeventhMinor 0260  
                       ?_playDiatonicSeventhMajor 0061  

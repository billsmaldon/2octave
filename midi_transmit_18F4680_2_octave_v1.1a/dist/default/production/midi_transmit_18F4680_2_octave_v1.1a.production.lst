

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Feb 24 19:21:02 2024

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4680
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	eeprom_data,global,class=EEDATA,delta=1,noexec
     6                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     9                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
    10                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
    11                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
    12                           	psect	bitnvCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    14                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    18                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    20                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    22                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    23                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    24                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    25                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    26                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    27                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    28                           	psect	text0,global,reloc=2,class=CODE,delta=1
    29                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    30                           	psect	text2,global,reloc=2,class=CODE,delta=1
    31                           	psect	text3,global,reloc=2,class=CODE,delta=1
    32                           	psect	text4,global,reloc=2,class=CODE,delta=1
    33                           	psect	text5,global,reloc=2,class=CODE,delta=1
    34                           	psect	text6,global,reloc=2,class=CODE,delta=1
    35                           	psect	text7,global,reloc=2,class=CODE,delta=1
    36                           	psect	text8,global,reloc=2,class=CODE,delta=1
    37                           	psect	text9,global,reloc=2,class=CODE,delta=1
    38                           	psect	text10,global,reloc=2,class=CODE,delta=1
    39                           	psect	text11,global,reloc=2,class=CODE,delta=1
    40                           	psect	text12,global,reloc=2,class=CODE,delta=1
    41                           	psect	text13,global,reloc=2,class=CODE,delta=1
    42                           	psect	text14,global,reloc=2,class=CODE,delta=1
    43                           	psect	text15,global,reloc=2,class=CODE,delta=1
    44                           	psect	text16,global,reloc=2,class=CODE,delta=1
    45                           	psect	text17,global,reloc=2,class=CODE,delta=1
    46                           	psect	text18,global,reloc=2,class=CODE,delta=1
    47                           	psect	text19,global,reloc=2,class=CODE,delta=1
    48                           	psect	text20,global,reloc=2,class=CODE,delta=1
    49                           	psect	text21,global,reloc=2,class=CODE,delta=1
    50                           	psect	text22,global,reloc=2,class=CODE,delta=1
    51                           	psect	text23,global,reloc=2,class=CODE,delta=1
    52                           	psect	text24,global,reloc=2,class=CODE,delta=1
    53                           	psect	text25,global,reloc=2,class=CODE,delta=1
    54                           	psect	text26,global,reloc=2,class=CODE,delta=1
    55                           	psect	text27,global,reloc=2,class=CODE,delta=1
    56                           	psect	text28,global,reloc=2,class=CODE,delta=1
    57                           	psect	text29,global,reloc=2,class=CODE,delta=1
    58                           	psect	text30,global,reloc=2,class=CODE,delta=1
    59                           	psect	text31,global,reloc=2,class=CODE,delta=1
    60                           	psect	text32,global,reloc=2,class=CODE,delta=1
    61                           	psect	text33,global,reloc=2,class=CODE,delta=1
    62                           	psect	text34,global,reloc=2,class=CODE,delta=1
    63                           	psect	text35,global,reloc=2,class=CODE,delta=1
    64                           	psect	text36,global,reloc=2,class=CODE,delta=1
    65                           	psect	text37,global,reloc=2,class=CODE,delta=1
    66                           	psect	text38,global,reloc=2,class=CODE,delta=1
    67                           	psect	text39,global,reloc=2,class=CODE,delta=1
    68                           	psect	text40,global,reloc=2,class=CODE,delta=1
    69                           	psect	text41,global,reloc=2,class=CODE,delta=1
    70                           	psect	text42,global,reloc=2,class=CODE,delta=1
    71                           	psect	text43,global,reloc=2,class=CODE,delta=1
    72                           	psect	text44,global,reloc=2,class=CODE,delta=1
    73                           	psect	text45,global,reloc=2,class=CODE,delta=1
    74                           	psect	text46,global,reloc=2,class=CODE,delta=1
    75                           	psect	text47,global,reloc=2,class=CODE,delta=1
    76                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=2
    77                           	psect	text49,global,reloc=2,class=CODE,delta=1
    78                           	psect	text50,global,reloc=2,class=CODE,delta=1
    79                           	psect	text51,global,reloc=2,class=CODE,delta=1
    80                           	psect	text52,global,reloc=2,class=CODE,delta=1
    81                           	psect	text53,global,reloc=2,class=CODE,delta=1
    82                           	psect	text54,global,reloc=2,class=CODE,delta=1
    83                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=2
    84                           	psect	text56,global,reloc=2,class=CODE,delta=1
    85                           	psect	text57,global,reloc=2,class=CODE,delta=1
    86                           	psect	text58,global,reloc=2,class=CODE,delta=1
    87                           	psect	text59,global,reloc=2,class=CODE,delta=1
    88                           	psect	text60,global,reloc=2,class=CODE,delta=1
    89                           	psect	text61,global,reloc=2,class=CODE,delta=1
    90                           	psect	text62,global,reloc=2,class=CODE,delta=1
    91                           	psect	text63,global,reloc=2,class=CODE,delta=1
    92                           	psect	text64,global,reloc=2,class=CODE,delta=1
    93                           	psect	text65,global,reloc=2,class=CODE,delta=1
    94                           	psect	text66,global,reloc=2,class=CODE,delta=1
    95                           	psect	text67,global,reloc=2,class=CODE,delta=1
    96                           	psect	text68,global,reloc=2,class=CODE,delta=1
    97                           	psect	text69,global,reloc=2,class=CODE,delta=1
    98                           	psect	text70,global,reloc=2,class=CODE,delta=1
    99                           	psect	text71,global,reloc=2,class=CODE,delta=1
   100                           	psect	text72,global,reloc=2,class=CODE,delta=1
   101                           	psect	text73,global,reloc=2,class=CODE,delta=1
   102                           	psect	text74,global,reloc=2,class=CODE,delta=1
   103                           	psect	text75,global,reloc=2,class=CODE,delta=1
   104                           	psect	text76,global,reloc=2,class=CODE,delta=1
   105                           	psect	text77,global,reloc=2,class=CODE,delta=1
   106                           	psect	text78,global,reloc=2,class=CODE,delta=1
   107                           	psect	text79,global,reloc=2,class=CODE,delta=1
   108                           	psect	text80,global,reloc=2,class=CODE,delta=1
   109                           	psect	text81,global,reloc=2,class=CODE,delta=1
   110                           	psect	text82,global,reloc=2,class=CODE,delta=1
   111                           	psect	text83,global,reloc=2,class=CODE,delta=1
   112                           	psect	text84,global,reloc=2,class=CODE,delta=1
   113                           	psect	text85,global,reloc=2,class=CODE,delta=1
   114                           	psect	text86,global,reloc=2,class=CODE,delta=1,group=2
   115                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=2
   116                           	psect	text88,global,reloc=2,class=CODE,delta=1
   117                           	psect	text89,global,reloc=2,class=CODE,delta=1
   118                           	psect	text90,global,reloc=2,class=CODE,delta=1
   119                           	psect	text91,global,reloc=2,class=CODE,delta=1
   120                           	psect	text92,global,reloc=2,class=CODE,delta=1
   121                           	psect	text93,global,reloc=2,class=CODE,delta=1
   122                           	psect	text94,global,reloc=2,class=CODE,delta=1
   123                           	psect	text95,global,reloc=2,class=CODE,delta=1
   124                           	psect	text96,global,reloc=2,class=CODE,delta=1
   125                           	psect	text97,global,reloc=2,class=CODE,delta=1
   126                           	psect	text98,global,reloc=2,class=CODE,delta=1
   127                           	psect	text99,global,reloc=2,class=CODE,delta=1
   128                           	psect	text100,global,reloc=2,class=CODE,delta=1
   129                           	psect	text101,global,reloc=2,class=CODE,delta=1
   130                           	psect	text102,global,reloc=2,class=CODE,delta=1
   131                           	psect	text103,global,reloc=2,class=CODE,delta=1
   132                           	psect	text104,global,reloc=2,class=CODE,delta=1
   133                           	psect	text105,global,reloc=2,class=CODE,delta=1
   134                           	psect	text106,global,reloc=2,class=CODE,delta=1
   135                           	psect	text107,global,reloc=2,class=CODE,delta=1
   136                           	psect	text108,global,reloc=2,class=CODE,delta=1
   137                           	psect	text109,global,reloc=2,class=CODE,delta=1
   138                           	psect	text110,global,reloc=2,class=CODE,delta=1
   139                           	psect	text111,global,reloc=2,class=CODE,delta=1
   140                           	psect	text112,global,reloc=2,class=CODE,delta=1,group=2
   141                           	psect	text113,global,reloc=2,class=CODE,delta=1
   142                           	psect	text114,global,reloc=2,class=CODE,delta=1,group=2
   143                           	psect	text115,global,reloc=2,class=CODE,delta=1,group=2
   144                           	psect	text116,global,reloc=2,class=CODE,delta=1,group=2
   145                           	psect	text117,global,reloc=2,class=CODE,delta=1,group=2
   146                           	psect	text118,global,reloc=2,class=CODE,delta=1,group=2
   147                           	psect	text119,global,reloc=2,class=CODE,delta=1,group=2
   148                           	psect	text120,global,reloc=2,class=CODE,delta=1,group=2
   149                           	psect	text121,global,reloc=2,class=CODE,delta=1
   150                           	psect	text122,global,reloc=2,class=CODE,delta=1
   151                           	psect	text123,global,reloc=2,class=CODE,delta=1
   152                           	psect	text124,global,reloc=2,class=CODE,delta=1
   153                           	psect	text125,global,reloc=2,class=CODE,delta=1
   154                           	psect	text126,global,reloc=2,class=CODE,delta=1
   155                           	psect	text127,global,reloc=2,class=CODE,delta=1
   156                           	psect	text128,global,reloc=2,class=CODE,delta=1
   157                           	psect	text129,global,reloc=2,class=CODE,delta=1,group=1
   158                           	psect	text130,global,reloc=2,class=CODE,delta=1,group=1
   159                           	psect	text131,global,reloc=2,class=CODE,delta=1,group=1
   160                           	psect	text132,global,reloc=2,class=CODE,delta=1
   161                           	psect	text133,global,reloc=2,class=CODE,delta=1,group=2
   162                           	psect	text134,global,reloc=2,class=CODE,delta=1
   163                           	psect	text135,global,reloc=2,class=CODE,delta=1,group=2
   164                           	psect	text136,global,reloc=2,class=CODE,delta=1
   165                           	psect	text137,global,reloc=2,class=CODE,delta=1
   166                           	psect	text138,global,reloc=2,class=CODE,delta=1
   167                           	psect	text139,global,reloc=2,class=CODE,delta=1
   168                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   169                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   170                           	psect	text141,global,reloc=2,class=CODE,delta=1
   171                           	psect	text142,global,reloc=2,class=CODE,delta=1
   172                           	psect	text143,global,reloc=2,class=CODE,delta=1
   173                           	psect	text144,global,reloc=2,class=CODE,delta=1
   174                           	psect	text145,global,reloc=2,class=CODE,delta=1
   175                           	psect	text146,global,reloc=2,class=CODE,delta=1
   176                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   177                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   178                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   179  0000                     
   180                           ; Version 1.45
   181                           ; Generated 16/11/2017 GMT
   182                           ; 
   183                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   184                           ; All rights reserved.
   185                           ; 
   186                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   187                           ; 
   188                           ; Redistribution and use in source and binary forms, with or without modification, are
   189                           ; permitted provided that the following conditions are met:
   190                           ; 
   191                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   192                           ;        conditions and the following disclaimer.
   193                           ; 
   194                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   195                           ;        of conditions and the following disclaimer in the documentation and/or other
   196                           ;        materials provided with the distribution.
   197                           ; 
   198                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   199                           ;        software without specific prior written permission.
   200                           ; 
   201                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   202                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   203                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   204                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   205                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   206                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   207                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   208                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   209                           ; 
   210                           ; 
   211                           ; Code-generator required, PIC18F4680 Definitions
   212                           ; 
   213                           ; SFR Addresses
   214  0000                     
   215                           	psect	eeprom_data
   216  F00000  00 24 00 32 FF FF FF FF 	db	0,36,0,50,255,255,255,255	;# 
   217  0000                     
   218 ;;___awdiv@quotient	offset	0
   219 ;;___awdiv@sign	offset	2
   220 ;;___awdiv@counter	offset	3
   221 ;;___awdiv@dividend	offset=-2 (param)
   222 ;;___awdiv@divisor	offset=-4 (param)
   223 ;;noteOn@channel	offset=-1 (param)
   224 ;;noteOn@pitch	offset=-2 (param)
   225 ;;noteOn@velocity	offset=-3 (param)
   226 ;;random_pitches_non_repeating@randomIndex	offset	0
   227 ;;random_pitches_non_repeating@temp	offset	1
   228 ;;random_pitches_non_repeating@i	offset	2
   229 ;;random_pitches@random_array_index	offset	0
   230 ;;random_pitches@i	offset	1
   231 ;;___awmod@sign	offset	0
   232 ;;___awmod@counter	offset	1
   233 ;;___awmod@dividend	offset=-2 (param)
   234 ;;___awmod@divisor	offset=-4 (param)
   235 ;;noteOff@channel	offset=-1 (param)
   236 ;;noteOff@pitch	offset=-2 (param)
   237 ;;noteOff@velocity	offset=-3 (param)
   238 ;;sendUSB@ii	offset	0
   239 ;;sendUSB@i	offset	1
   240 ;;sendUSB@midiMessage	offset	2
   241 ;;sendUSB@message1	offset=-1 (param)
   242 ;;sendUSB@message2	offset=-2 (param)
   243 ;;sendUSB@message3	offset=-3 (param)
   244 ;;sendOut@i	offset	0
   245 ;;sendOut@midiMessage	offset	1
   246 ;;sendOut@number_of_midi_message_bytes	offset	4
   247 ;;sendOut@message1	offset=-1 (param)
   248 ;;sendOut@message2	offset=-2 (param)
   249 ;;sendOut@message3	offset=-3 (param)
   250 ;;___lbmod@rem	offset	0
   251 ;;___lbmod@counter	offset	1
   252 ;;___lbmod@dividend	offset=-1 (param)
   253 ;;___lbmod@divisor	offset=-2 (param)
   254 ;;___lmul@product	offset	0
   255 ;;___lmul@multiplier	offset=-4 (param)
   256 ;;___lmul@multiplicand	offset=-8 (param)
   257 ;;random_pitches_non_repeating@randomIndex	offset	0
   258 ;;random_pitches_non_repeating@temp	offset	1
   259 ;;random_pitches_non_repeating@i	offset	2
   260 ;;random_pitches@random_array_index	offset	0
   261 ;;random_pitches@i	offset	1
   262 ;;___lmul@product	offset	0
   263 ;;___lmul@multiplier	offset=-4 (param)
   264 ;;___lmul@multiplicand	offset=-8 (param)
   265 ;;noteOn@channel	offset=-1 (param)
   266 ;;noteOn@pitch	offset=-2 (param)
   267 ;;noteOn@velocity	offset=-3 (param)
   268 ;;noteOff@channel	offset=-1 (param)
   269 ;;noteOff@pitch	offset=-2 (param)
   270 ;;noteOff@velocity	offset=-3 (param)
   271 ;;sendUSB@ii	offset	0
   272 ;;sendUSB@i	offset	1
   273 ;;sendUSB@midiMessage	offset	2
   274 ;;sendUSB@message1	offset=-1 (param)
   275 ;;sendUSB@message2	offset=-2 (param)
   276 ;;sendUSB@message3	offset=-3 (param)
   277 ;;sendOut@i	offset	0
   278 ;;sendOut@midiMessage	offset	1
   279 ;;sendOut@number_of_midi_message_bytes	offset	4
   280 ;;sendOut@message1	offset=-1 (param)
   281 ;;sendOut@message2	offset=-2 (param)
   282 ;;sendOut@message3	offset=-3 (param)
   283 ;;___awmod@sign	offset	0
   284 ;;___awmod@counter	offset	1
   285 ;;___awmod@dividend	offset=-2 (param)
   286 ;;___awmod@divisor	offset=-4 (param)
   287 ;;___awdiv@quotient	offset	0
   288 ;;___awdiv@sign	offset	2
   289 ;;___awdiv@counter	offset	3
   290 ;;___awdiv@dividend	offset=-2 (param)
   291 ;;___awdiv@divisor	offset=-4 (param)
   292 ;;___lbmod@rem	offset	0
   293 ;;___lbmod@counter	offset	1
   294 ;;___lbmod@dividend	offset=-1 (param)
   295 ;;___lbmod@divisor	offset=-2 (param)
   296                           
   297                           	psect	idataCOMRAM
   298  009A87                     __pidataCOMRAM:
   299                           	opt stack 0
   300                           
   301                           ;initializer for _number_to_display
   302  009A87  FF80               	dw	65408
   303                           
   304                           ;initializer for _NOTE_LENGTH_PULSES
   305  009A89  0C                 	db	12
   306                           
   307                           ;initializer for _OCTAVES
   308  009A8A  03                 	db	3
   309                           
   310                           ;initializer for _which_screen
   311  009A8B  02                 	db	2
   312                           
   313                           ;initializer for _octave
   314  009A8C  04                 	db	4
   315                           
   316                           ;initializer for _velocity
   317  009A8D  7F                 	db	127
   318                           
   319                           ;initializer for _drumchannel
   320  009A8E  09                 	db	9
   321                           
   322                           	psect	idataBANK0
   323  009A7C                     __pidataBANK0:
   324                           	opt stack 0
   325                           
   326                           ;initializer for _DRUM_CC
   327  009A7C  50                 	db	80
   328  009A7D  51                 	db	81
   329  009A7E  52                 	db	82
   330  009A7F  53                 	db	83
   331  009A80  55                 	db	85
   332  009A81  56                 	db	86
   333  009A82  57                 	db	87
   334  009A83  58                 	db	88
   335                           
   336                           ;initializer for _iterator_focus
   337  009A84  FF                 	db	255
   338                           
   339                           ;initializer for _ema_integer
   340  009A85  32                 	db	50
   341                           
   342                           ;initializer for _BPM
   343  009A86  78                 	db	120
   344                           
   345                           	psect	idataBANK1
   346  009A18                     __pidataBANK1:
   347                           	opt stack 0
   348                           
   349                           ;initializer for _DRUM_NOTE
   350  009A18  24                 	db	36
   351  009A19  26                 	db	38
   352  009A1A  27                 	db	39
   353  009A1B  28                 	db	40
   354  009A1C  2A                 	db	42
   355  009A1D  2E                 	db	46
   356  009A1E  31                 	db	49
   357  009A1F  36                 	db	54
   358                           
   359                           ;initializer for _randx
   360  009A20  0001               	dw	1
   361  009A22  0000               	dw	0
   362                           
   363                           ;initializer for _HYST_VAL
   364  009A24  0020               	dw	32
   365                           
   366                           ;initializer for _PRESCALER
   367  009A26  04                 	db	4
   368                           
   369                           ;initializer for _PPQN
   370  009A27  30                 	db	48
   371                           
   372                           ;initializer for _command
   373  009A28  80                 	db	128
   374                           
   375                           ;initializer for _string_to_display
   376  009A29  74                 	db	116
   377  009A2A  45                 	db	69
   378  009A2B  53                 	db	83
   379  009A2C  74                 	db	116
   380  009A2D  00                 	db	0
   381                           
   382                           	psect	idataBANK2
   383  009176                     __pidataBANK2:
   384                           	opt stack 0
   385                           
   386                           ;initializer for _inputPotsArray
   387  009176  00                 	db	0
   388  009177  46                 	db	70
   389  009178  10                 	db	16
   390  009179  00                 	db	0
   391  00917A  47                 	db	71
   392  00917B  11                 	db	17
   393  00917C  00                 	db	0
   394  00917D  48                 	db	72
   395  00917E  12                 	db	18
   396  00917F  00                 	db	0
   397  009180  49                 	db	73
   398  009181  13                 	db	19
   399  009182  00                 	db	0
   400  009183  4A                 	db	74
   401  009184  14                 	db	20
   402  009185  00                 	db	0
   403  009186  4B                 	db	75
   404  009187  15                 	db	21
   405  009188  00                 	db	0
   406  009189  4C                 	db	76
   407  00918A  16                 	db	22
   408  00918B  00                 	db	0
   409  00918C  66                 	db	102
   410  00918D  17                 	db	23
   411  00918E  00                 	db	0
   412  00918F  67                 	db	103
   413  009190  18                 	db	24
   414  009191  00                 	db	0
   415  009192  68                 	db	104
   416  009193  19                 	db	25
   417  009194  00                 	db	0
   418  009195  6A                 	db	106
   419  009196  1A                 	db	26
   420  009197  00                 	db	0
   421  009198  6B                 	db	107
   422  009199  1B                 	db	27
   423  00919A  00                 	db	0
   424  00919B  6C                 	db	108
   425  00919C  1C                 	db	28
   426  00919D  00                 	db	0
   427  00919E  6D                 	db	109
   428  00919F  1D                 	db	29
   429  0091A0  00                 	db	0
   430  0091A1  FD                 	db	253
   431  0091A2  FD                 	db	253
   432  0091A3  00                 	db	0
   433  0091A4  FE                 	db	254
   434  0091A5  FE                 	db	254
   435                           
   436                           ;initializer for _NOTE_LENGTH_PULSES_ARRAY
   437  0091A6  30                 	db	48
   438  0091A7  48                 	db	72
   439  0091A8  20                 	db	32
   440  0091A9  18                 	db	24
   441  0091AA  24                 	db	36
   442  0091AB  10                 	db	16
   443  0091AC  0C                 	db	12
   444  0091AD  12                 	db	18
   445  0091AE  08                 	db	8
   446  0091AF  06                 	db	6
   447  0091B0  09                 	db	9
   448  0091B1  04                 	db	4
   449                           
   450                           ;initializer for _number_of_interrupts
   451  0091B2  00FA               	dw	250
   452  0091B4  0000               	dw	0
   453                           
   454                           ;initializer for _diminished_7th
   455  0091B6  00                 	db	0
   456  0091B7  03                 	db	3
   457  0091B8  06                 	db	6
   458  0091B9  09                 	db	9
   459                           
   460                           ;initializer for _half_diminished_7th
   461  0091BA  00                 	db	0
   462  0091BB  03                 	db	3
   463  0091BC  06                 	db	6
   464  0091BD  0A                 	db	10
   465                           
   466                           ;initializer for _minor_7th
   467  0091BE  00                 	db	0
   468  0091BF  03                 	db	3
   469  0091C0  07                 	db	7
   470  0091C1  0A                 	db	10
   471                           
   472                           ;initializer for _major_7th
   473  0091C2  00                 	db	0
   474  0091C3  04                 	db	4
   475  0091C4  07                 	db	7
   476  0091C5  0B                 	db	11
   477                           
   478                           ;initializer for _dominant_7th
   479  0091C6  00                 	db	0
   480  0091C7  04                 	db	4
   481  0091C8  07                 	db	7
   482  0091C9  0A                 	db	10
   483                           
   484                           ;initializer for _diminished_triad
   485  0091CA  00                 	db	0
   486  0091CB  03                 	db	3
   487  0091CC  06                 	db	6
   488                           
   489                           ;initializer for _augmented_triad
   490  0091CD  00                 	db	0
   491  0091CE  04                 	db	4
   492  0091CF  08                 	db	8
   493                           
   494                           ;initializer for _minor_triad
   495  0091D0  00                 	db	0
   496  0091D1  03                 	db	3
   497  0091D2  07                 	db	7
   498                           
   499                           ;initializer for _major_triad
   500  0091D3  00                 	db	0
   501  0091D4  04                 	db	4
   502  0091D5  07                 	db	7
   503                           
   504                           	psect	idataBANK3
   505  008F20                     __pidataBANK3:
   506                           	opt stack 0
   507                           
   508                           ;initializer for _menuArray
   509  008F20  08                 	db	8
   510  008F21  00                 	db	0
   511  008F22  00                 	db	0
   512  008F23  0C                 	db	12
   513  008F24  00                 	db	0
   514  008F25  00                 	db	0
   515  008F26  07                 	db	7
   516  008F27  00                 	db	0
   517  008F28  00                 	db	0
   518  008F29  04                 	db	4
   519  008F2A  00                 	db	0
   520  008F2B  00                 	db	0
   521  008F2C  05                 	db	5
   522  008F2D  00                 	db	0
   523  008F2E  00                 	db	0
   524  008F2F  02                 	db	2
   525  008F30  00                 	db	0
   526  008F31  00                 	db	0
   527  008F32  05                 	db	5
   528  008F33  00                 	db	0
   529  008F34  00                 	db	0
   530  008F35  02                 	db	2
   531  008F36  00                 	db	0
   532  008F37  00                 	db	0
   533  008F38  08                 	db	8
   534  008F39  00                 	db	0
   535  008F3A  00                 	db	0
   536  008F3B  08                 	db	8
   537  008F3C  00                 	db	0
   538  008F3D  00                 	db	0
   539  008F3E  05                 	db	5
   540  008F3F  00                 	db	0
   541  008F40  00                 	db	0
   542  008F41  02                 	db	2
   543  008F42  00                 	db	0
   544  008F43  00                 	db	0
   545  008F44  07                 	db	7
   546  008F45  00                 	db	0
   547  008F46  00                 	db	0
   548  008F47  07                 	db	7
   549  008F48  00                 	db	0
   550  008F49  00                 	db	0
   551  008F4A  02                 	db	2
   552  008F4B  00                 	db	0
   553  008F4C  00                 	db	0
   554  008F4D  02                 	db	2
   555  008F4E  00                 	db	0
   556  008F4F  00                 	db	0
   557  008F50  05                 	db	5
   558  008F51  00                 	db	0
   559  008F52  00                 	db	0
   560  008F53  05                 	db	5
   561  008F54  00                 	db	0
   562  008F55  00                 	db	0
   563  008F56  02                 	db	2
   564  008F57  00                 	db	0
   565  008F58  00                 	db	0
   566  008F59  09                 	db	9
   567  008F5A  00                 	db	0
   568  008F5B  00                 	db	0
   569  008F5C  02                 	db	2
   570  008F5D  00                 	db	0
   571  008F5E  00                 	db	0
   572  008F5F  07                 	db	7
   573  008F60  00                 	db	0
   574  008F61  00                 	db	0
   575  008F62  0C                 	db	12
   576  008F63  00                 	db	0
   577  008F64  00                 	db	0
   578  008F65  02                 	db	2
   579  008F66  00                 	db	0
   580  008F67  00                 	db	0
   581  008F68  01                 	db	1
   582  008F69  00                 	db	0
   583  008F6A  00                 	db	0
   584  008F6B  01                 	db	1
   585  008F6C  00                 	db	0
   586  008F6D  00                 	db	0
   587  008F6E  01                 	db	1
   588  008F6F  00                 	db	0
   589  008F70  00                 	db	0
   590  008F71  02                 	db	2
   591  008F72  00                 	db	0
   592  008F73  00                 	db	0
   593  008F74  01                 	db	1
   594  008F75  00                 	db	0
   595  008F76  00                 	db	0
   596  008F77  01                 	db	1
   597  008F78  00                 	db	0
   598  008F79  00                 	db	0
   599  008F7A  04                 	db	4
   600  008F7B  00                 	db	0
   601  008F7C  00                 	db	0
   602  008F7D  01                 	db	1
   603  008F7E  00                 	db	0
   604  008F7F  00                 	db	0
   605  008F80  01                 	db	1
   606  008F81  00                 	db	0
   607  008F82  00                 	db	0
   608  008F83  01                 	db	1
   609  008F84  00                 	db	0
   610  008F85  00                 	db	0
   611  008F86  01                 	db	1
   612  008F87  00                 	db	0
   613  008F88  00                 	db	0
   614                           
   615                           	psect	mediumconst
   616  00E8C2                     __pmediumconst:
   617                           	opt stack 0
   618  00E8C2  00                 	db	0
   619  00E8C3  4B                 	db	75
   620  00E8C4  45                 	db	69
   621  00E8C5  59                 	db	89
   622  00E8C6  42                 	db	66
   623  00E8C7  4F                 	db	79
   624  00E8C8  41                 	db	65
   625  00E8C9  52                 	db	82
   626  00E8CA  44                 	db	68
   627  00E8CB  20                 	db	32
   628  00E8CC  4D                 	db	77
   629  00E8CD  4F                 	db	79
   630  00E8CE  44                 	db	68
   631  00E8CF  45                 	db	69
   632  00E8D0  3A                 	db	58
   633  00E8D1  00                 	db	0
   634  00E8D2  00                 	db	0
   635  00E8D3  00                 	db	0
   636  00E8D4  41                 	db	65
   637  00E8D5  52                 	db	82
   638  00E8D6  50                 	db	80
   639  00E8D7  45                 	db	69
   640  00E8D8  47                 	db	71
   641  00E8D9  47                 	db	71
   642  00E8DA  49                 	db	73
   643  00E8DB  4F                 	db	79
   644  00E8DC  20                 	db	32
   645  00E8DD  4D                 	db	77
   646  00E8DE  45                 	db	69
   647  00E8DF  4E                 	db	78
   648  00E8E0  55                 	db	85
   649  00E8E1  3A                 	db	58
   650  00E8E2  00                 	db	0
   651  00E8E3  00                 	db	0
   652  00E8E4  00                 	db	0
   653  00E8E5  54                 	db	84
   654  00E8E6  52                 	db	82
   655  00E8E7  41                 	db	65
   656  00E8E8  4E                 	db	78
   657  00E8E9  53                 	db	83
   658  00E8EA  50                 	db	80
   659  00E8EB  4F                 	db	79
   660  00E8EC  53                 	db	83
   661  00E8ED  45                 	db	69
   662  00E8EE  20                 	db	32
   663  00E8EF  4D                 	db	77
   664  00E8F0  4F                 	db	79
   665  00E8F1  44                 	db	68
   666  00E8F2  45                 	db	69
   667  00E8F3  3A                 	db	58
   668  00E8F4  00                 	db	0
   669  00E8F5  00                 	db	0
   670  00E8F6  44                 	db	68
   671  00E8F7  52                 	db	82
   672  00E8F8  55                 	db	85
   673  00E8F9  4D                 	db	77
   674  00E8FA  20                 	db	32
   675  00E8FB  4D                 	db	77
   676  00E8FC  4F                 	db	79
   677  00E8FD  44                 	db	68
   678  00E8FE  45                 	db	69
   679  00E8FF  3A                 	db	58
   680  00E900  00                 	db	0
   681  00E901  00                 	db	0
   682  00E902  00                 	db	0
   683  00E903  00                 	db	0
   684  00E904  00                 	db	0
   685  00E905  00                 	db	0
   686  00E906  00                 	db	0
   687  00E907  50                 	db	80
   688  00E908  4F                 	db	79
   689  00E909  54                 	db	84
   690  00E90A  53                 	db	83
   691  00E90B  20                 	db	32
   692  00E90C  4D                 	db	77
   693  00E90D  4F                 	db	79
   694  00E90E  44                 	db	68
   695  00E90F  45                 	db	69
   696  00E910  3A                 	db	58
   697  00E911  00                 	db	0
   698  00E912  00                 	db	0
   699  00E913  00                 	db	0
   700  00E914  00                 	db	0
   701  00E915  00                 	db	0
   702  00E916  00                 	db	0
   703  00E917  00                 	db	0
   704  00E918  4D                 	db	77
   705  00E919  49                 	db	73
   706  00E91A  44                 	db	68
   707  00E91B  49                 	db	73
   708  00E91C  20                 	db	32
   709  00E91D  43                 	db	67
   710  00E91E  48                 	db	72
   711  00E91F  41                 	db	65
   712  00E920  4E                 	db	78
   713  00E921  4E                 	db	78
   714  00E922  45                 	db	69
   715  00E923  4C                 	db	76
   716  00E924  53                 	db	83
   717  00E925  3A                 	db	58
   718  00E926  00                 	db	0
   719  00E927  00                 	db	0
   720  00E928  00                 	db	0
   721  00E929  50                 	db	80
   722  00E92A  52                 	db	82
   723  00E92B  4F                 	db	79
   724  00E92C  47                 	db	71
   725  00E92D  52                 	db	82
   726  00E92E  41                 	db	65
   727  00E92F  4D                 	db	77
   728  00E930  20                 	db	32
   729  00E931  43                 	db	67
   730  00E932  48                 	db	72
   731  00E933  41                 	db	65
   732  00E934  4E                 	db	78
   733  00E935  47                 	db	71
   734  00E936  45                 	db	69
   735  00E937  3A                 	db	58
   736  00E938  00                 	db	0
   737  00E939  00                 	db	0
   738  00E93A  45                 	db	69
   739  00E93B  45                 	db	69
   740  00E93C  50                 	db	80
   741  00E93D  52                 	db	82
   742  00E93E  4F                 	db	79
   743  00E93F  4D                 	db	77
   744  00E940  20                 	db	32
   745  00E941  4D                 	db	77
   746  00E942  45                 	db	69
   747  00E943  4E                 	db	78
   748  00E944  55                 	db	85
   749  00E945  3A                 	db	58
   750  00E946  00                 	db	0
   751  00E947  00                 	db	0
   752  00E948  00                 	db	0
   753  00E949  00                 	db	0
   754  00E94A  00                 	db	0
   755  00E94B  43                 	db	67
   756  00E94C  48                 	db	72
   757  00E94D  52                 	db	82
   758  00E94E  4F                 	db	79
   759  00E94F  4D                 	db	77
   760  00E950  41                 	db	65
   761  00E951  54                 	db	84
   762  00E952  49                 	db	73
   763  00E953  43                 	db	67
   764  00E954  00                 	db	0
   765  00E955  00                 	db	0
   766  00E956  00                 	db	0
   767  00E957  00                 	db	0
   768  00E958  00                 	db	0
   769  00E959  00                 	db	0
   770  00E95A  00                 	db	0
   771  00E95B  00                 	db	0
   772  00E95C  4D                 	db	77
   773  00E95D  41                 	db	65
   774  00E95E  4A                 	db	74
   775  00E95F  4F                 	db	79
   776  00E960  52                 	db	82
   777  00E961  00                 	db	0
   778  00E962  00                 	db	0
   779  00E963  00                 	db	0
   780  00E964  00                 	db	0
   781  00E965  00                 	db	0
   782  00E966  00                 	db	0
   783  00E967  00                 	db	0
   784  00E968  00                 	db	0
   785  00E969  00                 	db	0
   786  00E96A  00                 	db	0
   787  00E96B  00                 	db	0
   788  00E96C  00                 	db	0
   789  00E96D  4D                 	db	77
   790  00E96E  49                 	db	73
   791  00E96F  4E                 	db	78
   792  00E970  4F                 	db	79
   793  00E971  52                 	db	82
   794  00E972  00                 	db	0
   795  00E973  00                 	db	0
   796  00E974  00                 	db	0
   797  00E975  00                 	db	0
   798  00E976  00                 	db	0
   799  00E977  00                 	db	0
   800  00E978  00                 	db	0
   801  00E979  00                 	db	0
   802  00E97A  00                 	db	0
   803  00E97B  00                 	db	0
   804  00E97C  00                 	db	0
   805  00E97D  00                 	db	0
   806  00E97E  4D                 	db	77
   807  00E97F  4F                 	db	79
   808  00E980  44                 	db	68
   809  00E981  45                 	db	69
   810  00E982  53                 	db	83
   811  00E983  00                 	db	0
   812  00E984  00                 	db	0
   813  00E985  00                 	db	0
   814  00E986  00                 	db	0
   815  00E987  00                 	db	0
   816  00E988  00                 	db	0
   817  00E989  00                 	db	0
   818  00E98A  00                 	db	0
   819  00E98B  00                 	db	0
   820  00E98C  00                 	db	0
   821  00E98D  00                 	db	0
   822  00E98E  00                 	db	0
   823  00E98F  50                 	db	80
   824  00E990  45                 	db	69
   825  00E991  4E                 	db	78
   826  00E992  54                 	db	84
   827  00E993  41                 	db	65
   828  00E994  54                 	db	84
   829  00E995  4F                 	db	79
   830  00E996  4E                 	db	78
   831  00E997  49                 	db	73
   832  00E998  43                 	db	67
   833  00E999  20                 	db	32
   834  00E99A  4D                 	db	77
   835  00E99B  41                 	db	65
   836  00E99C  4A                 	db	74
   837  00E99D  4F                 	db	79
   838  00E99E  52                 	db	82
   839  00E99F  00                 	db	0
   840  00E9A0  50                 	db	80
   841  00E9A1  45                 	db	69
   842  00E9A2  4E                 	db	78
   843  00E9A3  54                 	db	84
   844  00E9A4  41                 	db	65
   845  00E9A5  54                 	db	84
   846  00E9A6  4F                 	db	79
   847  00E9A7  4E                 	db	78
   848  00E9A8  49                 	db	73
   849  00E9A9  43                 	db	67
   850  00E9AA  20                 	db	32
   851  00E9AB  4D                 	db	77
   852  00E9AC  49                 	db	73
   853  00E9AD  4E                 	db	78
   854  00E9AE  4F                 	db	79
   855  00E9AF  52                 	db	82
   856  00E9B0  00                 	db	0
   857  00E9B1  54                 	db	84
   858  00E9B2  52                 	db	82
   859  00E9B3  49                 	db	73
   860  00E9B4  41                 	db	65
   861  00E9B5  44                 	db	68
   862  00E9B6  00                 	db	0
   863  00E9B7  00                 	db	0
   864  00E9B8  00                 	db	0
   865  00E9B9  00                 	db	0
   866  00E9BA  00                 	db	0
   867  00E9BB  00                 	db	0
   868  00E9BC  00                 	db	0
   869  00E9BD  00                 	db	0
   870  00E9BE  00                 	db	0
   871  00E9BF  00                 	db	0
   872  00E9C0  00                 	db	0
   873  00E9C1  00                 	db	0
   874  00E9C2  44                 	db	68
   875  00E9C3  49                 	db	73
   876  00E9C4  41                 	db	65
   877  00E9C5  54                 	db	84
   878  00E9C6  4F                 	db	79
   879  00E9C7  4E                 	db	78
   880  00E9C8  49                 	db	73
   881  00E9C9  43                 	db	67
   882  00E9CA  20                 	db	32
   883  00E9CB  54                 	db	84
   884  00E9CC  20                 	db	32
   885  00E9CD  4D                 	db	77
   886  00E9CE  41                 	db	65
   887  00E9CF  4A                 	db	74
   888  00E9D0  4F                 	db	79
   889  00E9D1  52                 	db	82
   890  00E9D2  00                 	db	0
   891  00E9D3  44                 	db	68
   892  00E9D4  49                 	db	73
   893  00E9D5  41                 	db	65
   894  00E9D6  54                 	db	84
   895  00E9D7  4F                 	db	79
   896  00E9D8  4E                 	db	78
   897  00E9D9  49                 	db	73
   898  00E9DA  43                 	db	67
   899  00E9DB  20                 	db	32
   900  00E9DC  54                 	db	84
   901  00E9DD  20                 	db	32
   902  00E9DE  4D                 	db	77
   903  00E9DF  49                 	db	73
   904  00E9E0  4E                 	db	78
   905  00E9E1  4F                 	db	79
   906  00E9E2  52                 	db	82
   907  00E9E3  00                 	db	0
   908  00E9E4  53                 	db	83
   909  00E9E5  45                 	db	69
   910  00E9E6  56                 	db	86
   911  00E9E7  45                 	db	69
   912  00E9E8  4E                 	db	78
   913  00E9E9  54                 	db	84
   914  00E9EA  48                 	db	72
   915  00E9EB  00                 	db	0
   916  00E9EC  00                 	db	0
   917  00E9ED  00                 	db	0
   918  00E9EE  00                 	db	0
   919  00E9EF  00                 	db	0
   920  00E9F0  00                 	db	0
   921  00E9F1  00                 	db	0
   922  00E9F2  00                 	db	0
   923  00E9F3  00                 	db	0
   924  00E9F4  00                 	db	0
   925  00E9F5  44                 	db	68
   926  00E9F6  49                 	db	73
   927  00E9F7  41                 	db	65
   928  00E9F8  54                 	db	84
   929  00E9F9  4F                 	db	79
   930  00E9FA  4E                 	db	78
   931  00E9FB  49                 	db	73
   932  00E9FC  43                 	db	67
   933  00E9FD  20                 	db	32
   934  00E9FE  37                 	db	55
   935  00E9FF  20                 	db	32
   936  00EA00  4D                 	db	77
   937  00EA01  41                 	db	65
   938  00EA02  4A                 	db	74
   939  00EA03  4F                 	db	79
   940  00EA04  52                 	db	82
   941  00EA05  00                 	db	0
   942  00EA06  44                 	db	68
   943  00EA07  49                 	db	73
   944  00EA08  41                 	db	65
   945  00EA09  54                 	db	84
   946  00EA0A  4F                 	db	79
   947  00EA0B  4E                 	db	78
   948  00EA0C  49                 	db	73
   949  00EA0D  43                 	db	67
   950  00EA0E  20                 	db	32
   951  00EA0F  37                 	db	55
   952  00EA10  20                 	db	32
   953  00EA11  4D                 	db	77
   954  00EA12  49                 	db	73
   955  00EA13  4E                 	db	78
   956  00EA14  4F                 	db	79
   957  00EA15  52                 	db	82
   958  00EA16  00                 	db	0
   959  00EA17  69                 	db	105
   960  00EA18  6F                 	db	111
   961  00EA19  6E                 	db	110
   962  00EA1A  69                 	db	105
   963  00EA1B  61                 	db	97
   964  00EA1C  6E                 	db	110
   965  00EA1D  00                 	db	0
   966  00EA1E  00                 	db	0
   967  00EA1F  00                 	db	0
   968  00EA20  00                 	db	0
   969  00EA21  00                 	db	0
   970  00EA22  00                 	db	0
   971  00EA23  00                 	db	0
   972  00EA24  00                 	db	0
   973  00EA25  00                 	db	0
   974  00EA26  00                 	db	0
   975  00EA27  00                 	db	0
   976  00EA28  64                 	db	100
   977  00EA29  6F                 	db	111
   978  00EA2A  72                 	db	114
   979  00EA2B  69                 	db	105
   980  00EA2C  61                 	db	97
   981  00EA2D  6E                 	db	110
   982  00EA2E  00                 	db	0
   983  00EA2F  00                 	db	0
   984  00EA30  00                 	db	0
   985  00EA31  00                 	db	0
   986  00EA32  00                 	db	0
   987  00EA33  00                 	db	0
   988  00EA34  00                 	db	0
   989  00EA35  00                 	db	0
   990  00EA36  00                 	db	0
   991  00EA37  00                 	db	0
   992  00EA38  00                 	db	0
   993  00EA39  70                 	db	112
   994  00EA3A  68                 	db	104
   995  00EA3B  72                 	db	114
   996  00EA3C  79                 	db	121
   997  00EA3D  67                 	db	103
   998  00EA3E  69                 	db	105
   999  00EA3F  61                 	db	97
  1000  00EA40  6E                 	db	110
  1001  00EA41  00                 	db	0
  1002  00EA42  00                 	db	0
  1003  00EA43  00                 	db	0
  1004  00EA44  00                 	db	0
  1005  00EA45  00                 	db	0
  1006  00EA46  00                 	db	0
  1007  00EA47  00                 	db	0
  1008  00EA48  00                 	db	0
  1009  00EA49  00                 	db	0
  1010  00EA4A  6C                 	db	108
  1011  00EA4B  79                 	db	121
  1012  00EA4C  64                 	db	100
  1013  00EA4D  69                 	db	105
  1014  00EA4E  61                 	db	97
  1015  00EA4F  6E                 	db	110
  1016  00EA50  00                 	db	0
  1017  00EA51  00                 	db	0
  1018  00EA52  00                 	db	0
  1019  00EA53  00                 	db	0
  1020  00EA54  00                 	db	0
  1021  00EA55  00                 	db	0
  1022  00EA56  00                 	db	0
  1023  00EA57  00                 	db	0
  1024  00EA58  00                 	db	0
  1025  00EA59  00                 	db	0
  1026  00EA5A  00                 	db	0
  1027  00EA5B  6D                 	db	109
  1028  00EA5C  69                 	db	105
  1029  00EA5D  78                 	db	120
  1030  00EA5E  6F                 	db	111
  1031  00EA5F  6C                 	db	108
  1032  00EA60  79                 	db	121
  1033  00EA61  64                 	db	100
  1034  00EA62  69                 	db	105
  1035  00EA63  61                 	db	97
  1036  00EA64  6E                 	db	110
  1037  00EA65  00                 	db	0
  1038  00EA66  00                 	db	0
  1039  00EA67  00                 	db	0
  1040  00EA68  00                 	db	0
  1041  00EA69  00                 	db	0
  1042  00EA6A  00                 	db	0
  1043  00EA6B  00                 	db	0
  1044  00EA6C  61                 	db	97
  1045  00EA6D  65                 	db	101
  1046  00EA6E  6F                 	db	111
  1047  00EA6F  6C                 	db	108
  1048  00EA70  69                 	db	105
  1049  00EA71  61                 	db	97
  1050  00EA72  6E                 	db	110
  1051  00EA73  00                 	db	0
  1052  00EA74  00                 	db	0
  1053  00EA75  00                 	db	0
  1054  00EA76  00                 	db	0
  1055  00EA77  00                 	db	0
  1056  00EA78  00                 	db	0
  1057  00EA79  00                 	db	0
  1058  00EA7A  00                 	db	0
  1059  00EA7B  00                 	db	0
  1060  00EA7C  00                 	db	0
  1061  00EA7D  6C                 	db	108
  1062  00EA7E  6F                 	db	111
  1063  00EA7F  63                 	db	99
  1064  00EA80  72                 	db	114
  1065  00EA81  69                 	db	105
  1066  00EA82  61                 	db	97
  1067  00EA83  6E                 	db	110
  1068  00EA84  00                 	db	0
  1069  00EA85  00                 	db	0
  1070  00EA86  00                 	db	0
  1071  00EA87  00                 	db	0
  1072  00EA88  00                 	db	0
  1073  00EA89  00                 	db	0
  1074  00EA8A  00                 	db	0
  1075  00EA8B  00                 	db	0
  1076  00EA8C  00                 	db	0
  1077  00EA8D  00                 	db	0
  1078  00EA8E  6D                 	db	109
  1079  00EA8F  61                 	db	97
  1080  00EA90  6A                 	db	106
  1081  00EA91  6F                 	db	111
  1082  00EA92  72                 	db	114
  1083  00EA93  20                 	db	32
  1084  00EA94  74                 	db	116
  1085  00EA95  72                 	db	114
  1086  00EA96  69                 	db	105
  1087  00EA97  61                 	db	97
  1088  00EA98  64                 	db	100
  1089  00EA99  00                 	db	0
  1090  00EA9A  00                 	db	0
  1091  00EA9B  00                 	db	0
  1092  00EA9C  00                 	db	0
  1093  00EA9D  00                 	db	0
  1094  00EA9E  00                 	db	0
  1095  00EA9F  6D                 	db	109
  1096  00EAA0  69                 	db	105
  1097  00EAA1  6E                 	db	110
  1098  00EAA2  6F                 	db	111
  1099  00EAA3  72                 	db	114
  1100  00EAA4  20                 	db	32
  1101  00EAA5  74                 	db	116
  1102  00EAA6  72                 	db	114
  1103  00EAA7  69                 	db	105
  1104  00EAA8  61                 	db	97
  1105  00EAA9  64                 	db	100
  1106  00EAAA  00                 	db	0
  1107  00EAAB  00                 	db	0
  1108  00EAAC  00                 	db	0
  1109  00EAAD  00                 	db	0
  1110  00EAAE  00                 	db	0
  1111  00EAAF  00                 	db	0
  1112  00EAB0  61                 	db	97
  1113  00EAB1  75                 	db	117
  1114  00EAB2  67                 	db	103
  1115  00EAB3  6D                 	db	109
  1116  00EAB4  65                 	db	101
  1117  00EAB5  6E                 	db	110
  1118  00EAB6  74                 	db	116
  1119  00EAB7  65                 	db	101
  1120  00EAB8  64                 	db	100
  1121  00EAB9  20                 	db	32
  1122  00EABA  74                 	db	116
  1123  00EABB  72                 	db	114
  1124  00EABC  69                 	db	105
  1125  00EABD  61                 	db	97
  1126  00EABE  64                 	db	100
  1127  00EABF  00                 	db	0
  1128  00EAC0  00                 	db	0
  1129  00EAC1  64                 	db	100
  1130  00EAC2  69                 	db	105
  1131  00EAC3  6D                 	db	109
  1132  00EAC4  69                 	db	105
  1133  00EAC5  6E                 	db	110
  1134  00EAC6  69                 	db	105
  1135  00EAC7  73                 	db	115
  1136  00EAC8  68                 	db	104
  1137  00EAC9  65                 	db	101
  1138  00EACA  64                 	db	100
  1139  00EACB  20                 	db	32
  1140  00EACC  74                 	db	116
  1141  00EACD  72                 	db	114
  1142  00EACE  69                 	db	105
  1143  00EACF  61                 	db	97
  1144  00EAD0  64                 	db	100
  1145  00EAD1  00                 	db	0
  1146  00EAD2  64                 	db	100
  1147  00EAD3  6F                 	db	111
  1148  00EAD4  6D                 	db	109
  1149  00EAD5  69                 	db	105
  1150  00EAD6  6E                 	db	110
  1151  00EAD7  61                 	db	97
  1152  00EAD8  6E                 	db	110
  1153  00EAD9  74                 	db	116
  1154  00EADA  20                 	db	32
  1155  00EADB  37                 	db	55
  1156  00EADC  74                 	db	116
  1157  00EADD  68                 	db	104
  1158  00EADE  00                 	db	0
  1159  00EADF  00                 	db	0
  1160  00EAE0  00                 	db	0
  1161  00EAE1  00                 	db	0
  1162  00EAE2  00                 	db	0
  1163  00EAE3  6D                 	db	109
  1164  00EAE4  61                 	db	97
  1165  00EAE5  6A                 	db	106
  1166  00EAE6  6F                 	db	111
  1167  00EAE7  72                 	db	114
  1168  00EAE8  20                 	db	32
  1169  00EAE9  37                 	db	55
  1170  00EAEA  74                 	db	116
  1171  00EAEB  68                 	db	104
  1172  00EAEC  00                 	db	0
  1173  00EAED  00                 	db	0
  1174  00EAEE  00                 	db	0
  1175  00EAEF  00                 	db	0
  1176  00EAF0  00                 	db	0
  1177  00EAF1  00                 	db	0
  1178  00EAF2  00                 	db	0
  1179  00EAF3  00                 	db	0
  1180  00EAF4  6D                 	db	109
  1181  00EAF5  69                 	db	105
  1182  00EAF6  6E                 	db	110
  1183  00EAF7  6F                 	db	111
  1184  00EAF8  72                 	db	114
  1185  00EAF9  20                 	db	32
  1186  00EAFA  37                 	db	55
  1187  00EAFB  74                 	db	116
  1188  00EAFC  68                 	db	104
  1189  00EAFD  00                 	db	0
  1190  00EAFE  00                 	db	0
  1191  00EAFF  00                 	db	0
  1192  00EB00  00                 	db	0
  1193  00EB01  00                 	db	0
  1194  00EB02  00                 	db	0
  1195  00EB03  00                 	db	0
  1196  00EB04  00                 	db	0
  1197  00EB05  68                 	db	104
  1198  00EB06  61                 	db	97
  1199  00EB07  6C                 	db	108
  1200  00EB08  66                 	db	102
  1201  00EB09  20                 	db	32
  1202  00EB0A  64                 	db	100
  1203  00EB0B  69                 	db	105
  1204  00EB0C  6D                 	db	109
  1205  00EB0D  69                 	db	105
  1206  00EB0E  6E                 	db	110
  1207  00EB0F  69                 	db	105
  1208  00EB10  73                 	db	115
  1209  00EB11  68                 	db	104
  1210  00EB12  65                 	db	101
  1211  00EB13  64                 	db	100
  1212  00EB14  00                 	db	0
  1213  00EB15  00                 	db	0
  1214  00EB16  64                 	db	100
  1215  00EB17  69                 	db	105
  1216  00EB18  6D                 	db	109
  1217  00EB19  69                 	db	105
  1218  00EB1A  6E                 	db	110
  1219  00EB1B  69                 	db	105
  1220  00EB1C  73                 	db	115
  1221  00EB1D  68                 	db	104
  1222  00EB1E  65                 	db	101
  1223  00EB1F  64                 	db	100
  1224  00EB20  20                 	db	32
  1225  00EB21  37                 	db	55
  1226  00EB22  74                 	db	116
  1227  00EB23  68                 	db	104
  1228  00EB24  00                 	db	0
  1229  00EB25  00                 	db	0
  1230  00EB26  00                 	db	0
  1231  00EB27  48                 	db	72
  1232  00EB28  41                 	db	65
  1233  00EB29  4C                 	db	76
  1234  00EB2A  46                 	db	70
  1235  00EB2B  20                 	db	32
  1236  00EB2C  53                 	db	83
  1237  00EB2D  54                 	db	84
  1238  00EB2E  45                 	db	69
  1239  00EB2F  50                 	db	80
  1240  00EB30  00                 	db	0
  1241  00EB31  00                 	db	0
  1242  00EB32  00                 	db	0
  1243  00EB33  00                 	db	0
  1244  00EB34  00                 	db	0
  1245  00EB35  00                 	db	0
  1246  00EB36  00                 	db	0
  1247  00EB37  00                 	db	0
  1248  00EB38  43                 	db	67
  1249  00EB39  49                 	db	73
  1250  00EB3A  52                 	db	82
  1251  00EB3B  43                 	db	67
  1252  00EB3C  4C                 	db	76
  1253  00EB3D  45                 	db	69
  1254  00EB3E  20                 	db	32
  1255  00EB3F  4F                 	db	79
  1256  00EB40  46                 	db	70
  1257  00EB41  20                 	db	32
  1258  00EB42  46                 	db	70
  1259  00EB43  49                 	db	73
  1260  00EB44  46                 	db	70
  1261  00EB45  54                 	db	84
  1262  00EB46  48                 	db	72
  1263  00EB47  53                 	db	83
  1264  00EB48  00                 	db	0
  1265  00EB49  44                 	db	68
  1266  00EB4A  52                 	db	82
  1267  00EB4B  55                 	db	85
  1268  00EB4C  4D                 	db	77
  1269  00EB4D  20                 	db	32
  1270  00EB4E  49                 	db	73
  1271  00EB4F  53                 	db	83
  1272  00EB50  20                 	db	32
  1273  00EB51  4E                 	db	78
  1274  00EB52  4F                 	db	79
  1275  00EB53  54                 	db	84
  1276  00EB54  45                 	db	69
  1277  00EB55  20                 	db	32
  1278  00EB56  4F                 	db	79
  1279  00EB57  4E                 	db	78
  1280  00EB58  00                 	db	0
  1281  00EB59  00                 	db	0
  1282  00EB5A  44                 	db	68
  1283  00EB5B  52                 	db	82
  1284  00EB5C  55                 	db	85
  1285  00EB5D  4D                 	db	77
  1286  00EB5E  20                 	db	32
  1287  00EB5F  49                 	db	73
  1288  00EB60  53                 	db	83
  1289  00EB61  20                 	db	32
  1290  00EB62  43                 	db	67
  1291  00EB63  43                 	db	67
  1292  00EB64  00                 	db	0
  1293  00EB65  00                 	db	0
  1294  00EB66  00                 	db	0
  1295  00EB67  00                 	db	0
  1296  00EB68  00                 	db	0
  1297  00EB69  00                 	db	0
  1298  00EB6A  00                 	db	0
  1299  00EB6B  44                 	db	68
  1300  00EB6C  52                 	db	82
  1301  00EB6D  55                 	db	85
  1302  00EB6E  4D                 	db	77
  1303  00EB6F  20                 	db	32
  1304  00EB70  43                 	db	67
  1305  00EB71  43                 	db	67
  1306  00EB72  20                 	db	32
  1307  00EB73  54                 	db	84
  1308  00EB74  59                 	db	89
  1309  00EB75  50                 	db	80
  1310  00EB76  45                 	db	69
  1311  00EB77  00                 	db	0
  1312  00EB78  00                 	db	0
  1313  00EB79  00                 	db	0
  1314  00EB7A  00                 	db	0
  1315  00EB7B  00                 	db	0
  1316  00EB7C  44                 	db	68
  1317  00EB7D  52                 	db	82
  1318  00EB7E  55                 	db	85
  1319  00EB7F  4D                 	db	77
  1320  00EB80  20                 	db	32
  1321  00EB81  53                 	db	83
  1322  00EB82  45                 	db	69
  1323  00EB83  54                 	db	84
  1324  00EB84  20                 	db	32
  1325  00EB85  4E                 	db	78
  1326  00EB86  4E                 	db	78
  1327  00EB87  23                 	db	35
  1328  00EB88  00                 	db	0
  1329  00EB89  00                 	db	0
  1330  00EB8A  00                 	db	0
  1331  00EB8B  00                 	db	0
  1332  00EB8C  00                 	db	0
  1333  00EB8D  44                 	db	68
  1334  00EB8E  52                 	db	82
  1335  00EB8F  55                 	db	85
  1336  00EB90  4D                 	db	77
  1337  00EB91  20                 	db	32
  1338  00EB92  53                 	db	83
  1339  00EB93  45                 	db	69
  1340  00EB94  54                 	db	84
  1341  00EB95  20                 	db	32
  1342  00EB96  43                 	db	67
  1343  00EB97  43                 	db	67
  1344  00EB98  23                 	db	35
  1345  00EB99  00                 	db	0
  1346  00EB9A  00                 	db	0
  1347  00EB9B  00                 	db	0
  1348  00EB9C  00                 	db	0
  1349  00EB9D  00                 	db	0
  1350  00EB9E  44                 	db	68
  1351  00EB9F  52                 	db	82
  1352  00EBA0  55                 	db	85
  1353  00EBA1  4D                 	db	77
  1354  00EBA2  20                 	db	32
  1355  00EBA3  43                 	db	67
  1356  00EBA4  43                 	db	67
  1357  00EBA5  20                 	db	32
  1358  00EBA6  54                 	db	84
  1359  00EBA7  52                 	db	82
  1360  00EBA8  49                 	db	73
  1361  00EBA9  47                 	db	71
  1362  00EBAA  47                 	db	71
  1363  00EBAB  45                 	db	69
  1364  00EBAC  52                 	db	82
  1365  00EBAD  00                 	db	0
  1366  00EBAE  00                 	db	0
  1367  00EBAF  44                 	db	68
  1368  00EBB0  52                 	db	82
  1369  00EBB1  55                 	db	85
  1370  00EBB2  4D                 	db	77
  1371  00EBB3  20                 	db	32
  1372  00EBB4  43                 	db	67
  1373  00EBB5  43                 	db	67
  1374  00EBB6  20                 	db	32
  1375  00EBB7  54                 	db	84
  1376  00EBB8  4F                 	db	79
  1377  00EBB9  47                 	db	71
  1378  00EBBA  47                 	db	71
  1379  00EBBB  4C                 	db	76
  1380  00EBBC  45                 	db	69
  1381  00EBBD  00                 	db	0
  1382  00EBBE  00                 	db	0
  1383  00EBBF  00                 	db	0
  1384  00EBC0  44                 	db	68
  1385  00EBC1  52                 	db	82
  1386  00EBC2  55                 	db	85
  1387  00EBC3  4D                 	db	77
  1388  00EBC4  20                 	db	32
  1389  00EBC5  31                 	db	49
  1390  00EBC6  20                 	db	32
  1391  00EBC7  4E                 	db	78
  1392  00EBC8  4E                 	db	78
  1393  00EBC9  3A                 	db	58
  1394  00EBCA  20                 	db	32
  1395  00EBCB  00                 	db	0
  1396  00EBCC  00                 	db	0
  1397  00EBCD  00                 	db	0
  1398  00EBCE  00                 	db	0
  1399  00EBCF  00                 	db	0
  1400  00EBD0  00                 	db	0
  1401  00EBD1  44                 	db	68
  1402  00EBD2  52                 	db	82
  1403  00EBD3  55                 	db	85
  1404  00EBD4  4D                 	db	77
  1405  00EBD5  20                 	db	32
  1406  00EBD6  32                 	db	50
  1407  00EBD7  20                 	db	32
  1408  00EBD8  4E                 	db	78
  1409  00EBD9  4E                 	db	78
  1410  00EBDA  3A                 	db	58
  1411  00EBDB  20                 	db	32
  1412  00EBDC  00                 	db	0
  1413  00EBDD  00                 	db	0
  1414  00EBDE  00                 	db	0
  1415  00EBDF  00                 	db	0
  1416  00EBE0  00                 	db	0
  1417  00EBE1  00                 	db	0
  1418  00EBE2  44                 	db	68
  1419  00EBE3  52                 	db	82
  1420  00EBE4  55                 	db	85
  1421  00EBE5  4D                 	db	77
  1422  00EBE6  20                 	db	32
  1423  00EBE7  33                 	db	51
  1424  00EBE8  20                 	db	32
  1425  00EBE9  4E                 	db	78
  1426  00EBEA  4E                 	db	78
  1427  00EBEB  3A                 	db	58
  1428  00EBEC  20                 	db	32
  1429  00EBED  00                 	db	0
  1430  00EBEE  00                 	db	0
  1431  00EBEF  00                 	db	0
  1432  00EBF0  00                 	db	0
  1433  00EBF1  00                 	db	0
  1434  00EBF2  00                 	db	0
  1435  00EBF3  44                 	db	68
  1436  00EBF4  52                 	db	82
  1437  00EBF5  55                 	db	85
  1438  00EBF6  4D                 	db	77
  1439  00EBF7  20                 	db	32
  1440  00EBF8  34                 	db	52
  1441  00EBF9  20                 	db	32
  1442  00EBFA  4E                 	db	78
  1443  00EBFB  4E                 	db	78
  1444  00EBFC  3A                 	db	58
  1445  00EBFD  20                 	db	32
  1446  00EBFE  00                 	db	0
  1447  00EBFF  00                 	db	0
  1448  00EC00  00                 	db	0
  1449  00EC01  00                 	db	0
  1450  00EC02  00                 	db	0
  1451  00EC03  00                 	db	0
  1452  00EC04  44                 	db	68
  1453  00EC05  52                 	db	82
  1454  00EC06  55                 	db	85
  1455  00EC07  4D                 	db	77
  1456  00EC08  20                 	db	32
  1457  00EC09  35                 	db	53
  1458  00EC0A  20                 	db	32
  1459  00EC0B  4E                 	db	78
  1460  00EC0C  4E                 	db	78
  1461  00EC0D  3A                 	db	58
  1462  00EC0E  20                 	db	32
  1463  00EC0F  00                 	db	0
  1464  00EC10  00                 	db	0
  1465  00EC11  00                 	db	0
  1466  00EC12  00                 	db	0
  1467  00EC13  00                 	db	0
  1468  00EC14  00                 	db	0
  1469  00EC15  44                 	db	68
  1470  00EC16  52                 	db	82
  1471  00EC17  55                 	db	85
  1472  00EC18  4D                 	db	77
  1473  00EC19  20                 	db	32
  1474  00EC1A  36                 	db	54
  1475  00EC1B  20                 	db	32
  1476  00EC1C  4E                 	db	78
  1477  00EC1D  4E                 	db	78
  1478  00EC1E  3A                 	db	58
  1479  00EC1F  20                 	db	32
  1480  00EC20  00                 	db	0
  1481  00EC21  00                 	db	0
  1482  00EC22  00                 	db	0
  1483  00EC23  00                 	db	0
  1484  00EC24  00                 	db	0
  1485  00EC25  00                 	db	0
  1486  00EC26  44                 	db	68
  1487  00EC27  52                 	db	82
  1488  00EC28  55                 	db	85
  1489  00EC29  4D                 	db	77
  1490  00EC2A  20                 	db	32
  1491  00EC2B  37                 	db	55
  1492  00EC2C  20                 	db	32
  1493  00EC2D  4E                 	db	78
  1494  00EC2E  4E                 	db	78
  1495  00EC2F  3A                 	db	58
  1496  00EC30  20                 	db	32
  1497  00EC31  00                 	db	0
  1498  00EC32  00                 	db	0
  1499  00EC33  00                 	db	0
  1500  00EC34  00                 	db	0
  1501  00EC35  00                 	db	0
  1502  00EC36  00                 	db	0
  1503  00EC37  44                 	db	68
  1504  00EC38  52                 	db	82
  1505  00EC39  55                 	db	85
  1506  00EC3A  4D                 	db	77
  1507  00EC3B  20                 	db	32
  1508  00EC3C  38                 	db	56
  1509  00EC3D  20                 	db	32
  1510  00EC3E  4E                 	db	78
  1511  00EC3F  4E                 	db	78
  1512  00EC40  3A                 	db	58
  1513  00EC41  20                 	db	32
  1514  00EC42  00                 	db	0
  1515  00EC43  00                 	db	0
  1516  00EC44  00                 	db	0
  1517  00EC45  00                 	db	0
  1518  00EC46  00                 	db	0
  1519  00EC47  00                 	db	0
  1520  00EC48  44                 	db	68
  1521  00EC49  52                 	db	82
  1522  00EC4A  55                 	db	85
  1523  00EC4B  4D                 	db	77
  1524  00EC4C  20                 	db	32
  1525  00EC4D  31                 	db	49
  1526  00EC4E  20                 	db	32
  1527  00EC4F  43                 	db	67
  1528  00EC50  43                 	db	67
  1529  00EC51  3A                 	db	58
  1530  00EC52  20                 	db	32
  1531  00EC53  00                 	db	0
  1532  00EC54  00                 	db	0
  1533  00EC55  00                 	db	0
  1534  00EC56  00                 	db	0
  1535  00EC57  00                 	db	0
  1536  00EC58  00                 	db	0
  1537  00EC59  44                 	db	68
  1538  00EC5A  52                 	db	82
  1539  00EC5B  55                 	db	85
  1540  00EC5C  4D                 	db	77
  1541  00EC5D  20                 	db	32
  1542  00EC5E  32                 	db	50
  1543  00EC5F  20                 	db	32
  1544  00EC60  43                 	db	67
  1545  00EC61  43                 	db	67
  1546  00EC62  3A                 	db	58
  1547  00EC63  20                 	db	32
  1548  00EC64  00                 	db	0
  1549  00EC65  00                 	db	0
  1550  00EC66  00                 	db	0
  1551  00EC67  00                 	db	0
  1552  00EC68  00                 	db	0
  1553  00EC69  00                 	db	0
  1554  00EC6A  44                 	db	68
  1555  00EC6B  52                 	db	82
  1556  00EC6C  55                 	db	85
  1557  00EC6D  4D                 	db	77
  1558  00EC6E  20                 	db	32
  1559  00EC6F  33                 	db	51
  1560  00EC70  20                 	db	32
  1561  00EC71  43                 	db	67
  1562  00EC72  43                 	db	67
  1563  00EC73  3A                 	db	58
  1564  00EC74  20                 	db	32
  1565  00EC75  00                 	db	0
  1566  00EC76  00                 	db	0
  1567  00EC77  00                 	db	0
  1568  00EC78  00                 	db	0
  1569  00EC79  00                 	db	0
  1570  00EC7A  00                 	db	0
  1571  00EC7B  44                 	db	68
  1572  00EC7C  52                 	db	82
  1573  00EC7D  55                 	db	85
  1574  00EC7E  4D                 	db	77
  1575  00EC7F  20                 	db	32
  1576  00EC80  34                 	db	52
  1577  00EC81  20                 	db	32
  1578  00EC82  43                 	db	67
  1579  00EC83  43                 	db	67
  1580  00EC84  3A                 	db	58
  1581  00EC85  20                 	db	32
  1582  00EC86  00                 	db	0
  1583  00EC87  00                 	db	0
  1584  00EC88  00                 	db	0
  1585  00EC89  00                 	db	0
  1586  00EC8A  00                 	db	0
  1587  00EC8B  00                 	db	0
  1588  00EC8C  44                 	db	68
  1589  00EC8D  52                 	db	82
  1590  00EC8E  55                 	db	85
  1591  00EC8F  4D                 	db	77
  1592  00EC90  20                 	db	32
  1593  00EC91  35                 	db	53
  1594  00EC92  20                 	db	32
  1595  00EC93  43                 	db	67
  1596  00EC94  43                 	db	67
  1597  00EC95  3A                 	db	58
  1598  00EC96  20                 	db	32
  1599  00EC97  00                 	db	0
  1600  00EC98  00                 	db	0
  1601  00EC99  00                 	db	0
  1602  00EC9A  00                 	db	0
  1603  00EC9B  00                 	db	0
  1604  00EC9C  00                 	db	0
  1605  00EC9D  44                 	db	68
  1606  00EC9E  52                 	db	82
  1607  00EC9F  55                 	db	85
  1608  00ECA0  4D                 	db	77
  1609  00ECA1  20                 	db	32
  1610  00ECA2  36                 	db	54
  1611  00ECA3  20                 	db	32
  1612  00ECA4  43                 	db	67
  1613  00ECA5  43                 	db	67
  1614  00ECA6  3A                 	db	58
  1615  00ECA7  20                 	db	32
  1616  00ECA8  00                 	db	0
  1617  00ECA9  00                 	db	0
  1618  00ECAA  00                 	db	0
  1619  00ECAB  00                 	db	0
  1620  00ECAC  00                 	db	0
  1621  00ECAD  00                 	db	0
  1622  00ECAE  44                 	db	68
  1623  00ECAF  52                 	db	82
  1624  00ECB0  55                 	db	85
  1625  00ECB1  4D                 	db	77
  1626  00ECB2  20                 	db	32
  1627  00ECB3  37                 	db	55
  1628  00ECB4  20                 	db	32
  1629  00ECB5  43                 	db	67
  1630  00ECB6  43                 	db	67
  1631  00ECB7  3A                 	db	58
  1632  00ECB8  20                 	db	32
  1633  00ECB9  00                 	db	0
  1634  00ECBA  00                 	db	0
  1635  00ECBB  00                 	db	0
  1636  00ECBC  00                 	db	0
  1637  00ECBD  00                 	db	0
  1638  00ECBE  00                 	db	0
  1639  00ECBF  44                 	db	68
  1640  00ECC0  52                 	db	82
  1641  00ECC1  55                 	db	85
  1642  00ECC2  4D                 	db	77
  1643  00ECC3  20                 	db	32
  1644  00ECC4  38                 	db	56
  1645  00ECC5  20                 	db	32
  1646  00ECC6  43                 	db	67
  1647  00ECC7  43                 	db	67
  1648  00ECC8  3A                 	db	58
  1649  00ECC9  20                 	db	32
  1650  00ECCA  00                 	db	0
  1651  00ECCB  00                 	db	0
  1652  00ECCC  00                 	db	0
  1653  00ECCD  00                 	db	0
  1654  00ECCE  00                 	db	0
  1655  00ECCF  00                 	db	0
  1656  00ECD0  50                 	db	80
  1657  00ECD1  4F                 	db	79
  1658  00ECD2  54                 	db	84
  1659  00ECD3  53                 	db	83
  1660  00ECD4  20                 	db	32
  1661  00ECD5  52                 	db	82
  1662  00ECD6  45                 	db	69
  1663  00ECD7  53                 	db	83
  1664  00ECD8  4F                 	db	79
  1665  00ECD9  4C                 	db	76
  1666  00ECDA  55                 	db	85
  1667  00ECDB  54                 	db	84
  1668  00ECDC  49                 	db	73
  1669  00ECDD  4F                 	db	79
  1670  00ECDE  4E                 	db	78
  1671  00ECDF  00                 	db	0
  1672  00ECE0  00                 	db	0
  1673  00ECE1  50                 	db	80
  1674  00ECE2  4F                 	db	79
  1675  00ECE3  54                 	db	84
  1676  00ECE4  53                 	db	83
  1677  00ECE5  20                 	db	32
  1678  00ECE6  41                 	db	65
  1679  00ECE7  4C                 	db	76
  1680  00ECE8  50                 	db	80
  1681  00ECE9  48                 	db	72
  1682  00ECEA  41                 	db	65
  1683  00ECEB  00                 	db	0
  1684  00ECEC  00                 	db	0
  1685  00ECED  00                 	db	0
  1686  00ECEE  00                 	db	0
  1687  00ECEF  00                 	db	0
  1688  00ECF0  00                 	db	0
  1689  00ECF1  00                 	db	0
  1690  00ECF2  50                 	db	80
  1691  00ECF3  4F                 	db	79
  1692  00ECF4  54                 	db	84
  1693  00ECF5  53                 	db	83
  1694  00ECF6  20                 	db	32
  1695  00ECF7  53                 	db	83
  1696  00ECF8  45                 	db	69
  1697  00ECF9  54                 	db	84
  1698  00ECFA  20                 	db	32
  1699  00ECFB  43                 	db	67
  1700  00ECFC  43                 	db	67
  1701  00ECFD  23                 	db	35
  1702  00ECFE  00                 	db	0
  1703  00ECFF  00                 	db	0
  1704  00ED00  00                 	db	0
  1705  00ED01  00                 	db	0
  1706  00ED02  00                 	db	0
  1707  00ED03  53                 	db	83
  1708  00ED04  4C                 	db	76
  1709  00ED05  49                 	db	73
  1710  00ED06  44                 	db	68
  1711  00ED07  45                 	db	69
  1712  00ED08  50                 	db	80
  1713  00ED09  4F                 	db	79
  1714  00ED0A  54                 	db	84
  1715  00ED0B  20                 	db	32
  1716  00ED0C  53                 	db	83
  1717  00ED0D  45                 	db	69
  1718  00ED0E  54                 	db	84
  1719  00ED0F  20                 	db	32
  1720  00ED10  43                 	db	67
  1721  00ED11  43                 	db	67
  1722  00ED12  23                 	db	35
  1723  00ED13  00                 	db	0
  1724  00ED14  4A                 	db	74
  1725  00ED15  4F                 	db	79
  1726  00ED16  59                 	db	89
  1727  00ED17  53                 	db	83
  1728  00ED18  54                 	db	84
  1729  00ED19  49                 	db	73
  1730  00ED1A  43                 	db	67
  1731  00ED1B  4B                 	db	75
  1732  00ED1C  20                 	db	32
  1733  00ED1D  53                 	db	83
  1734  00ED1E  45                 	db	69
  1735  00ED1F  54                 	db	84
  1736  00ED20  20                 	db	32
  1737  00ED21  43                 	db	67
  1738  00ED22  43                 	db	67
  1739  00ED23  23                 	db	35
  1740  00ED24  00                 	db	0
  1741  00ED25  50                 	db	80
  1742  00ED26  4F                 	db	79
  1743  00ED27  54                 	db	84
  1744  00ED28  53                 	db	83
  1745  00ED29  20                 	db	32
  1746  00ED2A  4C                 	db	76
  1747  00ED2B  4F                 	db	79
  1748  00ED2C  20                 	db	32
  1749  00ED2D  52                 	db	82
  1750  00ED2E  45                 	db	69
  1751  00ED2F  53                 	db	83
  1752  00ED30  00                 	db	0
  1753  00ED31  00                 	db	0
  1754  00ED32  00                 	db	0
  1755  00ED33  00                 	db	0
  1756  00ED34  00                 	db	0
  1757  00ED35  00                 	db	0
  1758  00ED36  50                 	db	80
  1759  00ED37  4F                 	db	79
  1760  00ED38  54                 	db	84
  1761  00ED39  53                 	db	83
  1762  00ED3A  20                 	db	32
  1763  00ED3B  48                 	db	72
  1764  00ED3C  49                 	db	73
  1765  00ED3D  20                 	db	32
  1766  00ED3E  52                 	db	82
  1767  00ED3F  45                 	db	69
  1768  00ED40  53                 	db	83
  1769  00ED41  00                 	db	0
  1770  00ED42  00                 	db	0
  1771  00ED43  00                 	db	0
  1772  00ED44  00                 	db	0
  1773  00ED45  00                 	db	0
  1774  00ED46  00                 	db	0
  1775  00ED47  50                 	db	80
  1776  00ED48  31                 	db	49
  1777  00ED49  20                 	db	32
  1778  00ED4A  43                 	db	67
  1779  00ED4B  43                 	db	67
  1780  00ED4C  3A                 	db	58
  1781  00ED4D  00                 	db	0
  1782  00ED4E  00                 	db	0
  1783  00ED4F  00                 	db	0
  1784  00ED50  00                 	db	0
  1785  00ED51  00                 	db	0
  1786  00ED52  00                 	db	0
  1787  00ED53  00                 	db	0
  1788  00ED54  00                 	db	0
  1789  00ED55  00                 	db	0
  1790  00ED56  00                 	db	0
  1791  00ED57  00                 	db	0
  1792  00ED58  50                 	db	80
  1793  00ED59  32                 	db	50
  1794  00ED5A  20                 	db	32
  1795  00ED5B  43                 	db	67
  1796  00ED5C  43                 	db	67
  1797  00ED5D  3A                 	db	58
  1798  00ED5E  00                 	db	0
  1799  00ED5F  00                 	db	0
  1800  00ED60  00                 	db	0
  1801  00ED61  00                 	db	0
  1802  00ED62  00                 	db	0
  1803  00ED63  00                 	db	0
  1804  00ED64  00                 	db	0
  1805  00ED65  00                 	db	0
  1806  00ED66  00                 	db	0
  1807  00ED67  00                 	db	0
  1808  00ED68  00                 	db	0
  1809  00ED69  50                 	db	80
  1810  00ED6A  33                 	db	51
  1811  00ED6B  20                 	db	32
  1812  00ED6C  43                 	db	67
  1813  00ED6D  43                 	db	67
  1814  00ED6E  3A                 	db	58
  1815  00ED6F  00                 	db	0
  1816  00ED70  00                 	db	0
  1817  00ED71  00                 	db	0
  1818  00ED72  00                 	db	0
  1819  00ED73  00                 	db	0
  1820  00ED74  00                 	db	0
  1821  00ED75  00                 	db	0
  1822  00ED76  00                 	db	0
  1823  00ED77  00                 	db	0
  1824  00ED78  00                 	db	0
  1825  00ED79  00                 	db	0
  1826  00ED7A  50                 	db	80
  1827  00ED7B  34                 	db	52
  1828  00ED7C  20                 	db	32
  1829  00ED7D  43                 	db	67
  1830  00ED7E  43                 	db	67
  1831  00ED7F  3A                 	db	58
  1832  00ED80  00                 	db	0
  1833  00ED81  00                 	db	0
  1834  00ED82  00                 	db	0
  1835  00ED83  00                 	db	0
  1836  00ED84  00                 	db	0
  1837  00ED85  00                 	db	0
  1838  00ED86  00                 	db	0
  1839  00ED87  00                 	db	0
  1840  00ED88  00                 	db	0
  1841  00ED89  00                 	db	0
  1842  00ED8A  00                 	db	0
  1843  00ED8B  50                 	db	80
  1844  00ED8C  35                 	db	53
  1845  00ED8D  20                 	db	32
  1846  00ED8E  43                 	db	67
  1847  00ED8F  43                 	db	67
  1848  00ED90  3A                 	db	58
  1849  00ED91  00                 	db	0
  1850  00ED92  00                 	db	0
  1851  00ED93  00                 	db	0
  1852  00ED94  00                 	db	0
  1853  00ED95  00                 	db	0
  1854  00ED96  00                 	db	0
  1855  00ED97  00                 	db	0
  1856  00ED98  00                 	db	0
  1857  00ED99  00                 	db	0
  1858  00ED9A  00                 	db	0
  1859  00ED9B  00                 	db	0
  1860  00ED9C  50                 	db	80
  1861  00ED9D  36                 	db	54
  1862  00ED9E  20                 	db	32
  1863  00ED9F  43                 	db	67
  1864  00EDA0  43                 	db	67
  1865  00EDA1  3A                 	db	58
  1866  00EDA2  00                 	db	0
  1867  00EDA3  00                 	db	0
  1868  00EDA4  00                 	db	0
  1869  00EDA5  00                 	db	0
  1870  00EDA6  00                 	db	0
  1871  00EDA7  00                 	db	0
  1872  00EDA8  00                 	db	0
  1873  00EDA9  00                 	db	0
  1874  00EDAA  00                 	db	0
  1875  00EDAB  00                 	db	0
  1876  00EDAC  00                 	db	0
  1877  00EDAD  50                 	db	80
  1878  00EDAE  37                 	db	55
  1879  00EDAF  20                 	db	32
  1880  00EDB0  43                 	db	67
  1881  00EDB1  43                 	db	67
  1882  00EDB2  3A                 	db	58
  1883  00EDB3  00                 	db	0
  1884  00EDB4  00                 	db	0
  1885  00EDB5  00                 	db	0
  1886  00EDB6  00                 	db	0
  1887  00EDB7  00                 	db	0
  1888  00EDB8  00                 	db	0
  1889  00EDB9  00                 	db	0
  1890  00EDBA  00                 	db	0
  1891  00EDBB  00                 	db	0
  1892  00EDBC  00                 	db	0
  1893  00EDBD  00                 	db	0
  1894  00EDBE  53                 	db	83
  1895  00EDBF  31                 	db	49
  1896  00EDC0  20                 	db	32
  1897  00EDC1  43                 	db	67
  1898  00EDC2  43                 	db	67
  1899  00EDC3  3A                 	db	58
  1900  00EDC4  20                 	db	32
  1901  00EDC5  00                 	db	0
  1902  00EDC6  00                 	db	0
  1903  00EDC7  00                 	db	0
  1904  00EDC8  00                 	db	0
  1905  00EDC9  00                 	db	0
  1906  00EDCA  00                 	db	0
  1907  00EDCB  00                 	db	0
  1908  00EDCC  00                 	db	0
  1909  00EDCD  00                 	db	0
  1910  00EDCE  00                 	db	0
  1911  00EDCF  53                 	db	83
  1912  00EDD0  32                 	db	50
  1913  00EDD1  20                 	db	32
  1914  00EDD2  43                 	db	67
  1915  00EDD3  43                 	db	67
  1916  00EDD4  3A                 	db	58
  1917  00EDD5  20                 	db	32
  1918  00EDD6  00                 	db	0
  1919  00EDD7  00                 	db	0
  1920  00EDD8  00                 	db	0
  1921  00EDD9  00                 	db	0
  1922  00EDDA  00                 	db	0
  1923  00EDDB  00                 	db	0
  1924  00EDDC  00                 	db	0
  1925  00EDDD  00                 	db	0
  1926  00EDDE  00                 	db	0
  1927  00EDDF  00                 	db	0
  1928  00EDE0  53                 	db	83
  1929  00EDE1  33                 	db	51
  1930  00EDE2  20                 	db	32
  1931  00EDE3  43                 	db	67
  1932  00EDE4  43                 	db	67
  1933  00EDE5  3A                 	db	58
  1934  00EDE6  20                 	db	32
  1935  00EDE7  00                 	db	0
  1936  00EDE8  00                 	db	0
  1937  00EDE9  00                 	db	0
  1938  00EDEA  00                 	db	0
  1939  00EDEB  00                 	db	0
  1940  00EDEC  00                 	db	0
  1941  00EDED  00                 	db	0
  1942  00EDEE  00                 	db	0
  1943  00EDEF  00                 	db	0
  1944  00EDF0  00                 	db	0
  1945  00EDF1  53                 	db	83
  1946  00EDF2  34                 	db	52
  1947  00EDF3  20                 	db	32
  1948  00EDF4  43                 	db	67
  1949  00EDF5  43                 	db	67
  1950  00EDF6  3A                 	db	58
  1951  00EDF7  20                 	db	32
  1952  00EDF8  00                 	db	0
  1953  00EDF9  00                 	db	0
  1954  00EDFA  00                 	db	0
  1955  00EDFB  00                 	db	0
  1956  00EDFC  00                 	db	0
  1957  00EDFD  00                 	db	0
  1958  00EDFE  00                 	db	0
  1959  00EDFF  00                 	db	0
  1960  00EE00  00                 	db	0
  1961  00EE01  00                 	db	0
  1962  00EE02  53                 	db	83
  1963  00EE03  35                 	db	53
  1964  00EE04  20                 	db	32
  1965  00EE05  43                 	db	67
  1966  00EE06  43                 	db	67
  1967  00EE07  3A                 	db	58
  1968  00EE08  20                 	db	32
  1969  00EE09  00                 	db	0
  1970  00EE0A  00                 	db	0
  1971  00EE0B  00                 	db	0
  1972  00EE0C  00                 	db	0
  1973  00EE0D  00                 	db	0
  1974  00EE0E  00                 	db	0
  1975  00EE0F  00                 	db	0
  1976  00EE10  00                 	db	0
  1977  00EE11  00                 	db	0
  1978  00EE12  00                 	db	0
  1979  00EE13  53                 	db	83
  1980  00EE14  36                 	db	54
  1981  00EE15  20                 	db	32
  1982  00EE16  43                 	db	67
  1983  00EE17  43                 	db	67
  1984  00EE18  3A                 	db	58
  1985  00EE19  20                 	db	32
  1986  00EE1A  00                 	db	0
  1987  00EE1B  00                 	db	0
  1988  00EE1C  00                 	db	0
  1989  00EE1D  00                 	db	0
  1990  00EE1E  00                 	db	0
  1991  00EE1F  00                 	db	0
  1992  00EE20  00                 	db	0
  1993  00EE21  00                 	db	0
  1994  00EE22  00                 	db	0
  1995  00EE23  00                 	db	0
  1996  00EE24  53                 	db	83
  1997  00EE25  37                 	db	55
  1998  00EE26  20                 	db	32
  1999  00EE27  43                 	db	67
  2000  00EE28  43                 	db	67
  2001  00EE29  3A                 	db	58
  2002  00EE2A  20                 	db	32
  2003  00EE2B  00                 	db	0
  2004  00EE2C  00                 	db	0
  2005  00EE2D  00                 	db	0
  2006  00EE2E  00                 	db	0
  2007  00EE2F  00                 	db	0
  2008  00EE30  00                 	db	0
  2009  00EE31  00                 	db	0
  2010  00EE32  00                 	db	0
  2011  00EE33  00                 	db	0
  2012  00EE34  00                 	db	0
  2013  00EE35  4A                 	db	74
  2014  00EE36  58                 	db	88
  2015  00EE37  20                 	db	32
  2016  00EE38  43                 	db	67
  2017  00EE39  43                 	db	67
  2018  00EE3A  3A                 	db	58
  2019  00EE3B  20                 	db	32
  2020  00EE3C  00                 	db	0
  2021  00EE3D  00                 	db	0
  2022  00EE3E  00                 	db	0
  2023  00EE3F  00                 	db	0
  2024  00EE40  00                 	db	0
  2025  00EE41  00                 	db	0
  2026  00EE42  00                 	db	0
  2027  00EE43  00                 	db	0
  2028  00EE44  00                 	db	0
  2029  00EE45  00                 	db	0
  2030  00EE46  4A                 	db	74
  2031  00EE47  59                 	db	89
  2032  00EE48  20                 	db	32
  2033  00EE49  43                 	db	67
  2034  00EE4A  43                 	db	67
  2035  00EE4B  3A                 	db	58
  2036  00EE4C  20                 	db	32
  2037  00EE4D  00                 	db	0
  2038  00EE4E  00                 	db	0
  2039  00EE4F  00                 	db	0
  2040  00EE50  00                 	db	0
  2041  00EE51  00                 	db	0
  2042  00EE52  00                 	db	0
  2043  00EE53  00                 	db	0
  2044  00EE54  00                 	db	0
  2045  00EE55  00                 	db	0
  2046  00EE56  00                 	db	0
  2047  00EE57  4D                 	db	77
  2048  00EE58  61                 	db	97
  2049  00EE59  69                 	db	105
  2050  00EE5A  6E                 	db	110
  2051  00EE5B  20                 	db	32
  2052  00EE5C  63                 	db	99
  2053  00EE5D  68                 	db	104
  2054  00EE5E  61                 	db	97
  2055  00EE5F  6E                 	db	110
  2056  00EE60  6E                 	db	110
  2057  00EE61  65                 	db	101
  2058  00EE62  6C                 	db	108
  2059  00EE63  00                 	db	0
  2060  00EE64  00                 	db	0
  2061  00EE65  00                 	db	0
  2062  00EE66  00                 	db	0
  2063  00EE67  00                 	db	0
  2064  00EE68  44                 	db	68
  2065  00EE69  72                 	db	114
  2066  00EE6A  75                 	db	117
  2067  00EE6B  6D                 	db	109
  2068  00EE6C  20                 	db	32
  2069  00EE6D  63                 	db	99
  2070  00EE6E  68                 	db	104
  2071  00EE6F  61                 	db	97
  2072  00EE70  6E                 	db	110
  2073  00EE71  6E                 	db	110
  2074  00EE72  65                 	db	101
  2075  00EE73  6C                 	db	108
  2076  00EE74  00                 	db	0
  2077  00EE75  00                 	db	0
  2078  00EE76  00                 	db	0
  2079  00EE77  00                 	db	0
  2080  00EE78  00                 	db	0
  2081  00EE79  53                 	db	83
  2082  00EE7A  61                 	db	97
  2083  00EE7B  76                 	db	118
  2084  00EE7C  65                 	db	101
  2085  00EE7D  20                 	db	32
  2086  00EE7E  73                 	db	115
  2087  00EE7F  65                 	db	101
  2088  00EE80  74                 	db	116
  2089  00EE81  74                 	db	116
  2090  00EE82  69                 	db	105
  2091  00EE83  6E                 	db	110
  2092  00EE84  67                 	db	103
  2093  00EE85  73                 	db	115
  2094  00EE86  00                 	db	0
  2095  00EE87  00                 	db	0
  2096  00EE88  00                 	db	0
  2097  00EE89  00                 	db	0
  2098  00EE8A  4C                 	db	76
  2099  00EE8B  6F                 	db	111
  2100  00EE8C  61                 	db	97
  2101  00EE8D  64                 	db	100
  2102  00EE8E  20                 	db	32
  2103  00EE8F  73                 	db	115
  2104  00EE90  65                 	db	101
  2105  00EE91  74                 	db	116
  2106  00EE92  74                 	db	116
  2107  00EE93  69                 	db	105
  2108  00EE94  6E                 	db	110
  2109  00EE95  67                 	db	103
  2110  00EE96  73                 	db	115
  2111  00EE97  00                 	db	0
  2112  00EE98  00                 	db	0
  2113  00EE99  00                 	db	0
  2114  00EE9A  00                 	db	0
  2115  00EE9B  52                 	db	82
  2116  00EE9C  65                 	db	101
  2117  00EE9D  73                 	db	115
  2118  00EE9E  74                 	db	116
  2119  00EE9F  6F                 	db	111
  2120  00EEA0  72                 	db	114
  2121  00EEA1  65                 	db	101
  2122  00EEA2  20                 	db	32
  2123  00EEA3  64                 	db	100
  2124  00EEA4  65                 	db	101
  2125  00EEA5  66                 	db	102
  2126  00EEA6  61                 	db	97
  2127  00EEA7  75                 	db	117
  2128  00EEA8  6C                 	db	108
  2129  00EEA9  74                 	db	116
  2130  00EEAA  73                 	db	115
  2131  00EEAB  00                 	db	0
  2132  00EEAC  45                 	db	69
  2133  00EEAD  6E                 	db	110
  2134  00EEAE  63                 	db	99
  2135  00EEAF  6F                 	db	111
  2136  00EEB0  64                 	db	100
  2137  00EEB1  65                 	db	101
  2138  00EEB2  72                 	db	114
  2139  00EEB3  20                 	db	32
  2140  00EEB4  50                 	db	80
  2141  00EEB5  6F                 	db	111
  2142  00EEB6  6C                 	db	108
  2143  00EEB7  61                 	db	97
  2144  00EEB8  72                 	db	114
  2145  00EEB9  69                 	db	105
  2146  00EEBA  74                 	db	116
  2147  00EEBB  79                 	db	121
  2148  00EEBC  00                 	db	0
  2149  00EEBD  45                 	db	69
  2150  00EEBE  78                 	db	120
  2151  00EEBF  69                 	db	105
  2152  00EEC0  74                 	db	116
  2153  00EEC1  00                 	db	0
  2154  00EEC2  00                 	db	0
  2155  00EEC3  00                 	db	0
  2156  00EEC4  00                 	db	0
  2157  00EEC5  00                 	db	0
  2158  00EEC6  00                 	db	0
  2159  00EEC7  00                 	db	0
  2160  00EEC8  00                 	db	0
  2161  00EEC9  00                 	db	0
  2162  00EECA  00                 	db	0
  2163  00EECB  00                 	db	0
  2164  00EECC  00                 	db	0
  2165  00EECD  00                 	db	0
  2166  00EECE  53                 	db	83
  2167  00EECF  6C                 	db	108
  2168  00EED0  6F                 	db	111
  2169  00EED1  74                 	db	116
  2170  00EED2  20                 	db	32
  2171  00EED3  31                 	db	49
  2172  00EED4  00                 	db	0
  2173  00EED5  00                 	db	0
  2174  00EED6  00                 	db	0
  2175  00EED7  00                 	db	0
  2176  00EED8  00                 	db	0
  2177  00EED9  00                 	db	0
  2178  00EEDA  00                 	db	0
  2179  00EEDB  00                 	db	0
  2180  00EEDC  00                 	db	0
  2181  00EEDD  00                 	db	0
  2182  00EEDE  00                 	db	0
  2183  00EEDF  53                 	db	83
  2184  00EEE0  6C                 	db	108
  2185  00EEE1  6F                 	db	111
  2186  00EEE2  74                 	db	116
  2187  00EEE3  20                 	db	32
  2188  00EEE4  32                 	db	50
  2189  00EEE5  00                 	db	0
  2190  00EEE6  00                 	db	0
  2191  00EEE7  00                 	db	0
  2192  00EEE8  00                 	db	0
  2193  00EEE9  00                 	db	0
  2194  00EEEA  00                 	db	0
  2195  00EEEB  00                 	db	0
  2196  00EEEC  00                 	db	0
  2197  00EEED  00                 	db	0
  2198  00EEEE  00                 	db	0
  2199  00EEEF  00                 	db	0
  2200  00EEF0  53                 	db	83
  2201  00EEF1  6C                 	db	108
  2202  00EEF2  6F                 	db	111
  2203  00EEF3  74                 	db	116
  2204  00EEF4  20                 	db	32
  2205  00EEF5  33                 	db	51
  2206  00EEF6  00                 	db	0
  2207  00EEF7  00                 	db	0
  2208  00EEF8  00                 	db	0
  2209  00EEF9  00                 	db	0
  2210  00EEFA  00                 	db	0
  2211  00EEFB  00                 	db	0
  2212  00EEFC  00                 	db	0
  2213  00EEFD  00                 	db	0
  2214  00EEFE  00                 	db	0
  2215  00EEFF  00                 	db	0
  2216  00EF00  00                 	db	0
  2217  00EF01  53                 	db	83
  2218  00EF02  6C                 	db	108
  2219  00EF03  6F                 	db	111
  2220  00EF04  74                 	db	116
  2221  00EF05  20                 	db	32
  2222  00EF06  34                 	db	52
  2223  00EF07  00                 	db	0
  2224  00EF08  00                 	db	0
  2225  00EF09  00                 	db	0
  2226  00EF0A  00                 	db	0
  2227  00EF0B  00                 	db	0
  2228  00EF0C  00                 	db	0
  2229  00EF0D  00                 	db	0
  2230  00EF0E  00                 	db	0
  2231  00EF0F  00                 	db	0
  2232  00EF10  00                 	db	0
  2233  00EF11  00                 	db	0
  2234  00EF12  45                 	db	69
  2235  00EF13  78                 	db	120
  2236  00EF14  69                 	db	105
  2237  00EF15  74                 	db	116
  2238  00EF16  00                 	db	0
  2239  00EF17  00                 	db	0
  2240  00EF18  00                 	db	0
  2241  00EF19  00                 	db	0
  2242  00EF1A  00                 	db	0
  2243  00EF1B  00                 	db	0
  2244  00EF1C  00                 	db	0
  2245  00EF1D  00                 	db	0
  2246  00EF1E  00                 	db	0
  2247  00EF1F  00                 	db	0
  2248  00EF20  00                 	db	0
  2249  00EF21  00                 	db	0
  2250  00EF22  00                 	db	0
  2251  00EF23  43                 	db	67
  2252  00EF24  57                 	db	87
  2253  00EF25  20                 	db	32
  2254  00EF26  49                 	db	73
  2255  00EF27  53                 	db	83
  2256  00EF28  20                 	db	32
  2257  00EF29  49                 	db	73
  2258  00EF2A  4E                 	db	78
  2259  00EF2B  43                 	db	67
  2260  00EF2C  52                 	db	82
  2261  00EF2D  45                 	db	69
  2262  00EF2E  41                 	db	65
  2263  00EF2F  53                 	db	83
  2264  00EF30  45                 	db	69
  2265  00EF31  00                 	db	0
  2266  00EF32  00                 	db	0
  2267  00EF33  00                 	db	0
  2268  00EF34  43                 	db	67
  2269  00EF35  43                 	db	67
  2270  00EF36  57                 	db	87
  2271  00EF37  20                 	db	32
  2272  00EF38  49                 	db	73
  2273  00EF39  53                 	db	83
  2274  00EF3A  20                 	db	32
  2275  00EF3B  49                 	db	73
  2276  00EF3C  4E                 	db	78
  2277  00EF3D  43                 	db	67
  2278  00EF3E  52                 	db	82
  2279  00EF3F  45                 	db	69
  2280  00EF40  41                 	db	65
  2281  00EF41  53                 	db	83
  2282  00EF42  45                 	db	69
  2283  00EF43  00                 	db	0
  2284  00EF44  00                 	db	0
  2285  00EF45  41                 	db	65
  2286  00EF46  72                 	db	114
  2287  00EF47  70                 	db	112
  2288  00EF48  65                 	db	101
  2289  00EF49  67                 	db	103
  2290  00EF4A  67                 	db	103
  2291  00EF4B  69                 	db	105
  2292  00EF4C  6F                 	db	111
  2293  00EF4D  20                 	db	32
  2294  00EF4E  4F                 	db	79
  2295  00EF4F  46                 	db	70
  2296  00EF50  46                 	db	70
  2297  00EF51  2F                 	db	47
  2298  00EF52  4F                 	db	79
  2299  00EF53  4E                 	db	78
  2300  00EF54  00                 	db	0
  2301  00EF55  00                 	db	0
  2302  00EF56  54                 	db	84
  2303  00EF57  65                 	db	101
  2304  00EF58  6D                 	db	109
  2305  00EF59  70                 	db	112
  2306  00EF5A  6F                 	db	111
  2307  00EF5B  00                 	db	0
  2308  00EF5C  00                 	db	0
  2309  00EF5D  00                 	db	0
  2310  00EF5E  00                 	db	0
  2311  00EF5F  00                 	db	0
  2312  00EF60  00                 	db	0
  2313  00EF61  00                 	db	0
  2314  00EF62  00                 	db	0
  2315  00EF63  00                 	db	0
  2316  00EF64  00                 	db	0
  2317  00EF65  00                 	db	0
  2318  00EF66  00                 	db	0
  2319  00EF67  4F                 	db	79
  2320  00EF68  63                 	db	99
  2321  00EF69  74                 	db	116
  2322  00EF6A  61                 	db	97
  2323  00EF6B  76                 	db	118
  2324  00EF6C  65                 	db	101
  2325  00EF6D  20                 	db	32
  2326  00EF6E  52                 	db	82
  2327  00EF6F  61                 	db	97
  2328  00EF70  6E                 	db	110
  2329  00EF71  67                 	db	103
  2330  00EF72  65                 	db	101
  2331  00EF73  00                 	db	0
  2332  00EF74  00                 	db	0
  2333  00EF75  00                 	db	0
  2334  00EF76  00                 	db	0
  2335  00EF77  00                 	db	0
  2336  00EF78  41                 	db	65
  2337  00EF79  72                 	db	114
  2338  00EF7A  70                 	db	112
  2339  00EF7B  65                 	db	101
  2340  00EF7C  67                 	db	103
  2341  00EF7D  67                 	db	103
  2342  00EF7E  69                 	db	105
  2343  00EF7F  6F                 	db	111
  2344  00EF80  20                 	db	32
  2345  00EF81  54                 	db	84
  2346  00EF82  79                 	db	121
  2347  00EF83  70                 	db	112
  2348  00EF84  65                 	db	101
  2349  00EF85  00                 	db	0
  2350  00EF86  00                 	db	0
  2351  00EF87  00                 	db	0
  2352  00EF88  00                 	db	0
  2353  00EF89  4E                 	db	78
  2354  00EF8A  6F                 	db	111
  2355  00EF8B  74                 	db	116
  2356  00EF8C  65                 	db	101
  2357  00EF8D  20                 	db	32
  2358  00EF8E  4C                 	db	76
  2359  00EF8F  65                 	db	101
  2360  00EF90  6E                 	db	110
  2361  00EF91  67                 	db	103
  2362  00EF92  74                 	db	116
  2363  00EF93  68                 	db	104
  2364  00EF94  00                 	db	0
  2365  00EF95  00                 	db	0
  2366  00EF96  00                 	db	0
  2367  00EF97  00                 	db	0
  2368  00EF98  00                 	db	0
  2369  00EF99  00                 	db	0
  2370  00EF9A  4C                 	db	76
  2371  00EF9B  61                 	db	97
  2372  00EF9C  74                 	db	116
  2373  00EF9D  63                 	db	99
  2374  00EF9E  68                 	db	104
  2375  00EF9F  2F                 	db	47
  2376  00EFA0  41                 	db	65
  2377  00EFA1  75                 	db	117
  2378  00EFA2  74                 	db	116
  2379  00EFA3  6F                 	db	111
  2380  00EFA4  20                 	db	32
  2381  00EFA5  4C                 	db	76
  2382  00EFA6  61                 	db	97
  2383  00EFA7  74                 	db	116
  2384  00EFA8  63                 	db	99
  2385  00EFA9  68                 	db	104
  2386  00EFAA  00                 	db	0
  2387  00EFAB  55                 	db	85
  2388  00EFAC  6E                 	db	110
  2389  00EFAD  2D                 	db	45
  2390  00EFAE  6C                 	db	108
  2391  00EFAF  61                 	db	97
  2392  00EFB0  74                 	db	116
  2393  00EFB1  63                 	db	99
  2394  00EFB2  68                 	db	104
  2395  00EFB3  20                 	db	32
  2396  00EFB4  4D                 	db	77
  2397  00EFB5  6F                 	db	111
  2398  00EFB6  64                 	db	100
  2399  00EFB7  65                 	db	101
  2400  00EFB8  00                 	db	0
  2401  00EFB9  00                 	db	0
  2402  00EFBA  00                 	db	0
  2403  00EFBB  00                 	db	0
  2404  00EFBC  52                 	db	82
  2405  00EFBD  61                 	db	97
  2406  00EFBE  6E                 	db	110
  2407  00EFBF  64                 	db	100
  2408  00EFC0  6F                 	db	111
  2409  00EFC1  6D                 	db	109
  2410  00EFC2  69                 	db	105
  2411  00EFC3  7A                 	db	122
  2412  00EFC4  65                 	db	101
  2413  00EFC5  2F                 	db	47
  2414  00EFC6  53                 	db	83
  2415  00EFC7  6B                 	db	107
  2416  00EFC8  69                 	db	105
  2417  00EFC9  70                 	db	112
  2418  00EFCA  00                 	db	0
  2419  00EFCB  00                 	db	0
  2420  00EFCC  00                 	db	0
  2421  00EFCD  4C                 	db	76
  2422  00EFCE  61                 	db	97
  2423  00EFCF  73                 	db	115
  2424  00EFD0  74                 	db	116
  2425  00EFD1  20                 	db	32
  2426  00EFD2  4E                 	db	78
  2427  00EFD3  6F                 	db	111
  2428  00EFD4  74                 	db	116
  2429  00EFD5  65                 	db	101
  2430  00EFD6  20                 	db	32
  2431  00EFD7  4D                 	db	77
  2432  00EFD8  6F                 	db	111
  2433  00EFD9  64                 	db	100
  2434  00EFDA  65                 	db	101
  2435  00EFDB  00                 	db	0
  2436  00EFDC  00                 	db	0
  2437  00EFDD  00                 	db	0
  2438  00EFDE  41                 	db	65
  2439  00EFDF  52                 	db	82
  2440  00EFE0  50                 	db	80
  2441  00EFE1  45                 	db	69
  2442  00EFE2  47                 	db	71
  2443  00EFE3  47                 	db	71
  2444  00EFE4  49                 	db	73
  2445  00EFE5  41                 	db	65
  2446  00EFE6  54                 	db	84
  2447  00EFE7  4F                 	db	79
  2448  00EFE8  52                 	db	82
  2449  00EFE9  20                 	db	32
  2450  00EFEA  4F                 	db	79
  2451  00EFEB  46                 	db	70
  2452  00EFEC  46                 	db	70
  2453  00EFED  00                 	db	0
  2454  00EFEE  00                 	db	0
  2455  00EFEF  41                 	db	65
  2456  00EFF0  52                 	db	82
  2457  00EFF1  50                 	db	80
  2458  00EFF2  45                 	db	69
  2459  00EFF3  47                 	db	71
  2460  00EFF4  47                 	db	71
  2461  00EFF5  49                 	db	73
  2462  00EFF6  41                 	db	65
  2463  00EFF7  54                 	db	84
  2464  00EFF8  4F                 	db	79
  2465  00EFF9  52                 	db	82
  2466  00EFFA  20                 	db	32
  2467  00EFFB  4F                 	db	79
  2468  00EFFC  4E                 	db	78
  2469  00EFFD  00                 	db	0
  2470  00EFFE  00                 	db	0
  2471  00EFFF  00                 	db	0
  2472  00F000  55                 	db	85
  2473  00F001  50                 	db	80
  2474  00F002  00                 	db	0
  2475  00F003  00                 	db	0
  2476  00F004  00                 	db	0
  2477  00F005  00                 	db	0
  2478  00F006  00                 	db	0
  2479  00F007  00                 	db	0
  2480  00F008  00                 	db	0
  2481  00F009  00                 	db	0
  2482  00F00A  00                 	db	0
  2483  00F00B  00                 	db	0
  2484  00F00C  00                 	db	0
  2485  00F00D  00                 	db	0
  2486  00F00E  00                 	db	0
  2487  00F00F  00                 	db	0
  2488  00F010  00                 	db	0
  2489  00F011  44                 	db	68
  2490  00F012  4F                 	db	79
  2491  00F013  57                 	db	87
  2492  00F014  4E                 	db	78
  2493  00F015  00                 	db	0
  2494  00F016  00                 	db	0
  2495  00F017  00                 	db	0
  2496  00F018  00                 	db	0
  2497  00F019  00                 	db	0
  2498  00F01A  00                 	db	0
  2499  00F01B  00                 	db	0
  2500  00F01C  00                 	db	0
  2501  00F01D  00                 	db	0
  2502  00F01E  00                 	db	0
  2503  00F01F  00                 	db	0
  2504  00F020  00                 	db	0
  2505  00F021  00                 	db	0
  2506  00F022  55                 	db	85
  2507  00F023  50                 	db	80
  2508  00F024  2F                 	db	47
  2509  00F025  44                 	db	68
  2510  00F026  4F                 	db	79
  2511  00F027  57                 	db	87
  2512  00F028  4E                 	db	78
  2513  00F029  00                 	db	0
  2514  00F02A  00                 	db	0
  2515  00F02B  00                 	db	0
  2516  00F02C  00                 	db	0
  2517  00F02D  00                 	db	0
  2518  00F02E  00                 	db	0
  2519  00F02F  00                 	db	0
  2520  00F030  00                 	db	0
  2521  00F031  00                 	db	0
  2522  00F032  00                 	db	0
  2523  00F033  44                 	db	68
  2524  00F034  4F                 	db	79
  2525  00F035  57                 	db	87
  2526  00F036  4E                 	db	78
  2527  00F037  2F                 	db	47
  2528  00F038  55                 	db	85
  2529  00F039  50                 	db	80
  2530  00F03A  00                 	db	0
  2531  00F03B  00                 	db	0
  2532  00F03C  00                 	db	0
  2533  00F03D  00                 	db	0
  2534  00F03E  00                 	db	0
  2535  00F03F  00                 	db	0
  2536  00F040  00                 	db	0
  2537  00F041  00                 	db	0
  2538  00F042  00                 	db	0
  2539  00F043  00                 	db	0
  2540  00F044  53                 	db	83
  2541  00F045  48                 	db	72
  2542  00F046  55                 	db	85
  2543  00F047  46                 	db	70
  2544  00F048  46                 	db	70
  2545  00F049  4C                 	db	76
  2546  00F04A  45                 	db	69
  2547  00F04B  00                 	db	0
  2548  00F04C  00                 	db	0
  2549  00F04D  00                 	db	0
  2550  00F04E  00                 	db	0
  2551  00F04F  00                 	db	0
  2552  00F050  00                 	db	0
  2553  00F051  00                 	db	0
  2554  00F052  00                 	db	0
  2555  00F053  00                 	db	0
  2556  00F054  00                 	db	0
  2557  00F055  52                 	db	82
  2558  00F056  41                 	db	65
  2559  00F057  4E                 	db	78
  2560  00F058  44                 	db	68
  2561  00F059  4F                 	db	79
  2562  00F05A  4D                 	db	77
  2563  00F05B  00                 	db	0
  2564  00F05C  00                 	db	0
  2565  00F05D  00                 	db	0
  2566  00F05E  00                 	db	0
  2567  00F05F  00                 	db	0
  2568  00F060  00                 	db	0
  2569  00F061  00                 	db	0
  2570  00F062  00                 	db	0
  2571  00F063  00                 	db	0
  2572  00F064  00                 	db	0
  2573  00F065  00                 	db	0
  2574  00F066  41                 	db	65
  2575  00F067  53                 	db	83
  2576  00F068  20                 	db	32
  2577  00F069  50                 	db	80
  2578  00F06A  52                 	db	82
  2579  00F06B  45                 	db	69
  2580  00F06C  53                 	db	83
  2581  00F06D  53                 	db	83
  2582  00F06E  45                 	db	69
  2583  00F06F  44                 	db	68
  2584  00F070  00                 	db	0
  2585  00F071  00                 	db	0
  2586  00F072  00                 	db	0
  2587  00F073  00                 	db	0
  2588  00F074  00                 	db	0
  2589  00F075  00                 	db	0
  2590  00F076  00                 	db	0
  2591  00F077  31                 	db	49
  2592  00F078  2F                 	db	47
  2593  00F079  34                 	db	52
  2594  00F07A  00                 	db	0
  2595  00F07B  00                 	db	0
  2596  00F07C  00                 	db	0
  2597  00F07D  00                 	db	0
  2598  00F07E  00                 	db	0
  2599  00F07F  00                 	db	0
  2600  00F080  00                 	db	0
  2601  00F081  00                 	db	0
  2602  00F082  00                 	db	0
  2603  00F083  00                 	db	0
  2604  00F084  00                 	db	0
  2605  00F085  00                 	db	0
  2606  00F086  00                 	db	0
  2607  00F087  00                 	db	0
  2608  00F088  31                 	db	49
  2609  00F089  2F                 	db	47
  2610  00F08A  34                 	db	52
  2611  00F08B  20                 	db	32
  2612  00F08C  44                 	db	68
  2613  00F08D  4F                 	db	79
  2614  00F08E  54                 	db	84
  2615  00F08F  54                 	db	84
  2616  00F090  45                 	db	69
  2617  00F091  44                 	db	68
  2618  00F092  00                 	db	0
  2619  00F093  00                 	db	0
  2620  00F094  00                 	db	0
  2621  00F095  00                 	db	0
  2622  00F096  00                 	db	0
  2623  00F097  00                 	db	0
  2624  00F098  00                 	db	0
  2625  00F099  31                 	db	49
  2626  00F09A  2F                 	db	47
  2627  00F09B  34                 	db	52
  2628  00F09C  20                 	db	32
  2629  00F09D  54                 	db	84
  2630  00F09E  52                 	db	82
  2631  00F09F  49                 	db	73
  2632  00F0A0  50                 	db	80
  2633  00F0A1  4C                 	db	76
  2634  00F0A2  45                 	db	69
  2635  00F0A3  54                 	db	84
  2636  00F0A4  00                 	db	0
  2637  00F0A5  00                 	db	0
  2638  00F0A6  00                 	db	0
  2639  00F0A7  00                 	db	0
  2640  00F0A8  00                 	db	0
  2641  00F0A9  00                 	db	0
  2642  00F0AA  31                 	db	49
  2643  00F0AB  2F                 	db	47
  2644  00F0AC  38                 	db	56
  2645  00F0AD  00                 	db	0
  2646  00F0AE  00                 	db	0
  2647  00F0AF  00                 	db	0
  2648  00F0B0  00                 	db	0
  2649  00F0B1  00                 	db	0
  2650  00F0B2  00                 	db	0
  2651  00F0B3  00                 	db	0
  2652  00F0B4  00                 	db	0
  2653  00F0B5  00                 	db	0
  2654  00F0B6  00                 	db	0
  2655  00F0B7  00                 	db	0
  2656  00F0B8  00                 	db	0
  2657  00F0B9  00                 	db	0
  2658  00F0BA  00                 	db	0
  2659  00F0BB  31                 	db	49
  2660  00F0BC  2F                 	db	47
  2661  00F0BD  38                 	db	56
  2662  00F0BE  20                 	db	32
  2663  00F0BF  44                 	db	68
  2664  00F0C0  4F                 	db	79
  2665  00F0C1  54                 	db	84
  2666  00F0C2  54                 	db	84
  2667  00F0C3  45                 	db	69
  2668  00F0C4  44                 	db	68
  2669  00F0C5  00                 	db	0
  2670  00F0C6  00                 	db	0
  2671  00F0C7  00                 	db	0
  2672  00F0C8  00                 	db	0
  2673  00F0C9  00                 	db	0
  2674  00F0CA  00                 	db	0
  2675  00F0CB  00                 	db	0
  2676  00F0CC  31                 	db	49
  2677  00F0CD  2F                 	db	47
  2678  00F0CE  38                 	db	56
  2679  00F0CF  20                 	db	32
  2680  00F0D0  54                 	db	84
  2681  00F0D1  52                 	db	82
  2682  00F0D2  49                 	db	73
  2683  00F0D3  50                 	db	80
  2684  00F0D4  4C                 	db	76
  2685  00F0D5  45                 	db	69
  2686  00F0D6  54                 	db	84
  2687  00F0D7  00                 	db	0
  2688  00F0D8  00                 	db	0
  2689  00F0D9  00                 	db	0
  2690  00F0DA  00                 	db	0
  2691  00F0DB  00                 	db	0
  2692  00F0DC  00                 	db	0
  2693  00F0DD  31                 	db	49
  2694  00F0DE  2F                 	db	47
  2695  00F0DF  31                 	db	49
  2696  00F0E0  36                 	db	54
  2697  00F0E1  00                 	db	0
  2698  00F0E2  00                 	db	0
  2699  00F0E3  00                 	db	0
  2700  00F0E4  00                 	db	0
  2701  00F0E5  00                 	db	0
  2702  00F0E6  00                 	db	0
  2703  00F0E7  00                 	db	0
  2704  00F0E8  00                 	db	0
  2705  00F0E9  00                 	db	0
  2706  00F0EA  00                 	db	0
  2707  00F0EB  00                 	db	0
  2708  00F0EC  00                 	db	0
  2709  00F0ED  00                 	db	0
  2710  00F0EE  31                 	db	49
  2711  00F0EF  2F                 	db	47
  2712  00F0F0  31                 	db	49
  2713  00F0F1  36                 	db	54
  2714  00F0F2  20                 	db	32
  2715  00F0F3  44                 	db	68
  2716  00F0F4  4F                 	db	79
  2717  00F0F5  54                 	db	84
  2718  00F0F6  54                 	db	84
  2719  00F0F7  45                 	db	69
  2720  00F0F8  44                 	db	68
  2721  00F0F9  00                 	db	0
  2722  00F0FA  00                 	db	0
  2723  00F0FB  00                 	db	0
  2724  00F0FC  00                 	db	0
  2725  00F0FD  00                 	db	0
  2726  00F0FE  00                 	db	0
  2727  00F0FF  31                 	db	49
  2728  00F100  2F                 	db	47
  2729  00F101  31                 	db	49
  2730  00F102  36                 	db	54
  2731  00F103  20                 	db	32
  2732  00F104  54                 	db	84
  2733  00F105  52                 	db	82
  2734  00F106  49                 	db	73
  2735  00F107  50                 	db	80
  2736  00F108  4C                 	db	76
  2737  00F109  45                 	db	69
  2738  00F10A  54                 	db	84
  2739  00F10B  00                 	db	0
  2740  00F10C  00                 	db	0
  2741  00F10D  00                 	db	0
  2742  00F10E  00                 	db	0
  2743  00F10F  00                 	db	0
  2744  00F110  31                 	db	49
  2745  00F111  2F                 	db	47
  2746  00F112  33                 	db	51
  2747  00F113  32                 	db	50
  2748  00F114  00                 	db	0
  2749  00F115  00                 	db	0
  2750  00F116  00                 	db	0
  2751  00F117  00                 	db	0
  2752  00F118  00                 	db	0
  2753  00F119  00                 	db	0
  2754  00F11A  00                 	db	0
  2755  00F11B  00                 	db	0
  2756  00F11C  00                 	db	0
  2757  00F11D  00                 	db	0
  2758  00F11E  00                 	db	0
  2759  00F11F  00                 	db	0
  2760  00F120  00                 	db	0
  2761  00F121  31                 	db	49
  2762  00F122  2F                 	db	47
  2763  00F123  33                 	db	51
  2764  00F124  32                 	db	50
  2765  00F125  20                 	db	32
  2766  00F126  44                 	db	68
  2767  00F127  4F                 	db	79
  2768  00F128  54                 	db	84
  2769  00F129  54                 	db	84
  2770  00F12A  45                 	db	69
  2771  00F12B  44                 	db	68
  2772  00F12C  00                 	db	0
  2773  00F12D  00                 	db	0
  2774  00F12E  00                 	db	0
  2775  00F12F  00                 	db	0
  2776  00F130  00                 	db	0
  2777  00F131  00                 	db	0
  2778  00F132  31                 	db	49
  2779  00F133  2F                 	db	47
  2780  00F134  33                 	db	51
  2781  00F135  32                 	db	50
  2782  00F136  20                 	db	32
  2783  00F137  54                 	db	84
  2784  00F138  52                 	db	82
  2785  00F139  49                 	db	73
  2786  00F13A  50                 	db	80
  2787  00F13B  4C                 	db	76
  2788  00F13C  45                 	db	69
  2789  00F13D  54                 	db	84
  2790  00F13E  00                 	db	0
  2791  00F13F  00                 	db	0
  2792  00F140  00                 	db	0
  2793  00F141  00                 	db	0
  2794  00F142  00                 	db	0
  2795  00F143  53                 	db	83
  2796  00F144  45                 	db	69
  2797  00F145  54                 	db	84
  2798  00F146  2F                 	db	47
  2799  00F147  43                 	db	67
  2800  00F148  4C                 	db	76
  2801  00F149  45                 	db	69
  2802  00F14A  41                 	db	65
  2803  00F14B  52                 	db	82
  2804  00F14C  20                 	db	32
  2805  00F14D  4C                 	db	76
  2806  00F14E  41                 	db	65
  2807  00F14F  54                 	db	84
  2808  00F150  43                 	db	67
  2809  00F151  48                 	db	72
  2810  00F152  00                 	db	0
  2811  00F153  00                 	db	0
  2812  00F154  41                 	db	65
  2813  00F155  55                 	db	85
  2814  00F156  54                 	db	84
  2815  00F157  4F                 	db	79
  2816  00F158  20                 	db	32
  2817  00F159  4C                 	db	76
  2818  00F15A  41                 	db	65
  2819  00F15B  54                 	db	84
  2820  00F15C  43                 	db	67
  2821  00F15D  48                 	db	72
  2822  00F15E  00                 	db	0
  2823  00F15F  00                 	db	0
  2824  00F160  00                 	db	0
  2825  00F161  00                 	db	0
  2826  00F162  00                 	db	0
  2827  00F163  00                 	db	0
  2828  00F164  00                 	db	0
  2829  00F165  55                 	db	85
  2830  00F166  6E                 	db	110
  2831  00F167  2D                 	db	45
  2832  00F168  4C                 	db	76
  2833  00F169  61                 	db	97
  2834  00F16A  74                 	db	116
  2835  00F16B  63                 	db	99
  2836  00F16C  68                 	db	104
  2837  00F16D  20                 	db	32
  2838  00F16E  4D                 	db	77
  2839  00F16F  6F                 	db	111
  2840  00F170  64                 	db	100
  2841  00F171  65                 	db	101
  2842  00F172  00                 	db	0
  2843  00F173  00                 	db	0
  2844  00F174  00                 	db	0
  2845  00F175  00                 	db	0
  2846  00F176  55                 	db	85
  2847  00F177  4E                 	db	78
  2848  00F178  4C                 	db	76
  2849  00F179  41                 	db	65
  2850  00F17A  54                 	db	84
  2851  00F17B  43                 	db	67
  2852  00F17C  48                 	db	72
  2853  00F17D  20                 	db	32
  2854  00F17E  41                 	db	65
  2855  00F17F  4C                 	db	76
  2856  00F180  4C                 	db	76
  2857  00F181  00                 	db	0
  2858  00F182  00                 	db	0
  2859  00F183  00                 	db	0
  2860  00F184  00                 	db	0
  2861  00F185  00                 	db	0
  2862  00F186  00                 	db	0
  2863  00F187  4F                 	db	79
  2864  00F188  4E                 	db	78
  2865  00F189  45                 	db	69
  2866  00F18A  20                 	db	32
  2867  00F18B  41                 	db	65
  2868  00F18C  54                 	db	84
  2869  00F18D  20                 	db	32
  2870  00F18E  41                 	db	65
  2871  00F18F  20                 	db	32
  2872  00F190  54                 	db	84
  2873  00F191  49                 	db	73
  2874  00F192  4D                 	db	77
  2875  00F193  45                 	db	69
  2876  00F194  00                 	db	0
  2877  00F195  00                 	db	0
  2878  00F196  00                 	db	0
  2879  00F197  00                 	db	0
  2880  00F198  52                 	db	82
  2881  00F199  61                 	db	97
  2882  00F19A  6E                 	db	110
  2883  00F19B  64                 	db	100
  2884  00F19C  6F                 	db	111
  2885  00F19D  6D                 	db	109
  2886  00F19E  69                 	db	105
  2887  00F19F  7A                 	db	122
  2888  00F1A0  65                 	db	101
  2889  00F1A1  00                 	db	0
  2890  00F1A2  00                 	db	0
  2891  00F1A3  00                 	db	0
  2892  00F1A4  00                 	db	0
  2893  00F1A5  00                 	db	0
  2894  00F1A6  00                 	db	0
  2895  00F1A7  00                 	db	0
  2896  00F1A8  00                 	db	0
  2897  00F1A9  53                 	db	83
  2898  00F1AA  6B                 	db	107
  2899  00F1AB  69                 	db	105
  2900  00F1AC  70                 	db	112
  2901  00F1AD  20                 	db	32
  2902  00F1AE  46                 	db	70
  2903  00F1AF  69                 	db	105
  2904  00F1B0  72                 	db	114
  2905  00F1B1  73                 	db	115
  2906  00F1B2  74                 	db	116
  2907  00F1B3  2F                 	db	47
  2908  00F1B4  4C                 	db	76
  2909  00F1B5  61                 	db	97
  2910  00F1B6  73                 	db	115
  2911  00F1B7  74                 	db	116
  2912  00F1B8  00                 	db	0
  2913  00F1B9  00                 	db	0
  2914  00F1BA  52                 	db	82
  2915  00F1BB  41                 	db	65
  2916  00F1BC  4E                 	db	78
  2917  00F1BD  44                 	db	68
  2918  00F1BE  4F                 	db	79
  2919  00F1BF  4D                 	db	77
  2920  00F1C0  49                 	db	73
  2921  00F1C1  5A                 	db	90
  2922  00F1C2  45                 	db	69
  2923  00F1C3  20                 	db	32
  2924  00F1C4  41                 	db	65
  2925  00F1C5  55                 	db	85
  2926  00F1C6  54                 	db	84
  2927  00F1C7  4F                 	db	79
  2928  00F1C8  00                 	db	0
  2929  00F1C9  00                 	db	0
  2930  00F1CA  00                 	db	0
  2931  00F1CB  52                 	db	82
  2932  00F1CC  41                 	db	65
  2933  00F1CD  4E                 	db	78
  2934  00F1CE  44                 	db	68
  2935  00F1CF  4F                 	db	79
  2936  00F1D0  4D                 	db	77
  2937  00F1D1  49                 	db	73
  2938  00F1D2  5A                 	db	90
  2939  00F1D3  45                 	db	69
  2940  00F1D4  20                 	db	32
  2941  00F1D5  4F                 	db	79
  2942  00F1D6  4E                 	db	78
  2943  00F1D7  43                 	db	67
  2944  00F1D8  45                 	db	69
  2945  00F1D9  00                 	db	0
  2946  00F1DA  00                 	db	0
  2947  00F1DB  00                 	db	0
  2948  00F1DC  4B                 	db	75
  2949  00F1DD  65                 	db	101
  2950  00F1DE  79                 	db	121
  2951  00F1DF  20                 	db	32
  2952  00F1E0  70                 	db	112
  2953  00F1E1  72                 	db	114
  2954  00F1E2  65                 	db	101
  2955  00F1E3  73                 	db	115
  2956  00F1E4  73                 	db	115
  2957  00F1E5  00                 	db	0
  2958  00F1E6  00                 	db	0
  2959  00F1E7  00                 	db	0
  2960  00F1E8  00                 	db	0
  2961  00F1E9  00                 	db	0
  2962  00F1EA  00                 	db	0
  2963  00F1EB  00                 	db	0
  2964  00F1EC  00                 	db	0
  2965  00F1ED  4B                 	db	75
  2966  00F1EE  65                 	db	101
  2967  00F1EF  79                 	db	121
  2968  00F1F0  20                 	db	32
  2969  00F1F1  72                 	db	114
  2970  00F1F2  65                 	db	101
  2971  00F1F3  6C                 	db	108
  2972  00F1F4  65                 	db	101
  2973  00F1F5  61                 	db	97
  2974  00F1F6  73                 	db	115
  2975  00F1F7  65                 	db	101
  2976  00F1F8  00                 	db	0
  2977  00F1F9  00                 	db	0
  2978  00F1FA  00                 	db	0
  2979  00F1FB  00                 	db	0
  2980  00F1FC  00                 	db	0
  2981  00F1FD  00                 	db	0
  2982  00F1FE  54                 	db	84
  2983  00F1FF  72                 	db	114
  2984  00F200  61                 	db	97
  2985  00F201  6E                 	db	110
  2986  00F202  73                 	db	115
  2987  00F203  70                 	db	112
  2988  00F204  6F                 	db	111
  2989  00F205  73                 	db	115
  2990  00F206  65                 	db	101
  2991  00F207  00                 	db	0
  2992  00F208  00                 	db	0
  2993  00F209  00                 	db	0
  2994  00F20A  00                 	db	0
  2995  00F20B  00                 	db	0
  2996  00F20C  00                 	db	0
  2997  00F20D  00                 	db	0
  2998  00F20E  00                 	db	0
  2999  00F20F  52                 	db	82
  3000  00F210  65                 	db	101
  3001  00F211  73                 	db	115
  3002  00F212  65                 	db	101
  3003  00F213  74                 	db	116
  3004  00F214  00                 	db	0
  3005  00F215  00                 	db	0
  3006  00F216  00                 	db	0
  3007  00F217  00                 	db	0
  3008  00F218  00                 	db	0
  3009  00F219  00                 	db	0
  3010  00F21A  00                 	db	0
  3011  00F21B  00                 	db	0
  3012  00F21C  00                 	db	0
  3013  00F21D  00                 	db	0
  3014  00F21E  00                 	db	0
  3015  00F21F  00                 	db	0
  3016  00F220                     __end_ofascii@LCD_STRINGS:
  3017                           	opt stack 0
  3018  00F220                     _seg_ascii:
  3019                           	opt stack 0
  3020  00F220  3F                 	db	63
  3021  00F221  06                 	db	6
  3022  00F222  5B                 	db	91
  3023  00F223  4F                 	db	79
  3024  00F224  66                 	db	102
  3025  00F225  6D                 	db	109
  3026  00F226  7D                 	db	125
  3027  00F227  07                 	db	7
  3028  00F228  7F                 	db	127
  3029  00F229  6F                 	db	111
  3030  00F22A  00                 	db	0
  3031  00F22B  00                 	db	0
  3032  00F22C  00                 	db	0
  3033  00F22D  00                 	db	0
  3034  00F22E  00                 	db	0
  3035  00F22F  00                 	db	0
  3036  00F230  00                 	db	0
  3037  00F231  77                 	db	119
  3038  00F232  00                 	db	0
  3039  00F233  39                 	db	57
  3040  00F234  00                 	db	0
  3041  00F235  79                 	db	121
  3042  00F236  71                 	db	113
  3043  00F237  3D                 	db	61
  3044  00F238  76                 	db	118
  3045  00F239  30                 	db	48
  3046  00F23A  1E                 	db	30
  3047  00F23B  00                 	db	0
  3048  00F23C  38                 	db	56
  3049  00F23D  00                 	db	0
  3050  00F23E  00                 	db	0
  3051  00F23F  3F                 	db	63
  3052  00F240  73                 	db	115
  3053  00F241  00                 	db	0
  3054  00F242  00                 	db	0
  3055  00F243  6D                 	db	109
  3056  00F244  00                 	db	0
  3057  00F245  3E                 	db	62
  3058  00F246  00                 	db	0
  3059  00F247  00                 	db	0
  3060  00F248  00                 	db	0
  3061  00F249  00                 	db	0
  3062  00F24A  00                 	db	0
  3063  00F24B  00                 	db	0
  3064  00F24C  00                 	db	0
  3065  00F24D  00                 	db	0
  3066  00F24E  00                 	db	0
  3067  00F24F  00                 	db	0
  3068  00F250  00                 	db	0
  3069  00F251  5F                 	db	95
  3070  00F252  7C                 	db	124
  3071  00F253  58                 	db	88
  3072  00F254  5E                 	db	94
  3073  00F255  00                 	db	0
  3074  00F256  00                 	db	0
  3075  00F257  00                 	db	0
  3076  00F258  74                 	db	116
  3077  00F259  00                 	db	0
  3078  00F25A  00                 	db	0
  3079  00F25B  00                 	db	0
  3080  00F25C  00                 	db	0
  3081  00F25D  00                 	db	0
  3082  00F25E  54                 	db	84
  3083  00F25F  5C                 	db	92
  3084  00F260  00                 	db	0
  3085  00F261  67                 	db	103
  3086  00F262  50                 	db	80
  3087  00F263  00                 	db	0
  3088  00F264  78                 	db	120
  3089  00F265  1C                 	db	28
  3090  00F266  00                 	db	0
  3091  00F267  00                 	db	0
  3092  00F268  00                 	db	0
  3093  00F269  6E                 	db	110
  3094  00F26A  00                 	db	0
  3095  00F26B                     __end_of_seg_ascii:
  3096                           	opt stack 0
  3097  00F26B                     _diatonic_seventh_minor:
  3098                           	opt stack 0
  3099  00F26B  00                 	db	0
  3100  00F26C  03                 	db	3
  3101  00F26D  07                 	db	7
  3102  00F26E  0A                 	db	10
  3103  00F26F  02                 	db	2
  3104  00F270  03                 	db	3
  3105  00F271  06                 	db	6
  3106  00F272  0A                 	db	10
  3107  00F273  03                 	db	3
  3108  00F274  04                 	db	4
  3109  00F275  07                 	db	7
  3110  00F276  0B                 	db	11
  3111  00F277  05                 	db	5
  3112  00F278  03                 	db	3
  3113  00F279  07                 	db	7
  3114  00F27A  0A                 	db	10
  3115  00F27B  07                 	db	7
  3116  00F27C  03                 	db	3
  3117  00F27D  07                 	db	7
  3118  00F27E  0A                 	db	10
  3119  00F27F  08                 	db	8
  3120  00F280  04                 	db	4
  3121  00F281  07                 	db	7
  3122  00F282  0B                 	db	11
  3123  00F283  0A                 	db	10
  3124  00F284  04                 	db	4
  3125  00F285  07                 	db	7
  3126  00F286  0A                 	db	10
  3127  00F287  0C                 	db	12
  3128  00F288  03                 	db	3
  3129  00F289  07                 	db	7
  3130  00F28A  0A                 	db	10
  3131  00F28B  0E                 	db	14
  3132  00F28C  03                 	db	3
  3133  00F28D  06                 	db	6
  3134  00F28E  0A                 	db	10
  3135  00F28F  0F                 	db	15
  3136  00F290  04                 	db	4
  3137  00F291  07                 	db	7
  3138  00F292  0B                 	db	11
  3139  00F293  11                 	db	17
  3140  00F294  03                 	db	3
  3141  00F295  07                 	db	7
  3142  00F296  0A                 	db	10
  3143  00F297  13                 	db	19
  3144  00F298  03                 	db	3
  3145  00F299  07                 	db	7
  3146  00F29A  0A                 	db	10
  3147  00F29B  14                 	db	20
  3148  00F29C  04                 	db	4
  3149  00F29D  07                 	db	7
  3150  00F29E  0B                 	db	11
  3151  00F29F  16                 	db	22
  3152  00F2A0  04                 	db	4
  3153  00F2A1  07                 	db	7
  3154  00F2A2  0A                 	db	10
  3155  00F2A3  18                 	db	24
  3156  00F2A4  03                 	db	3
  3157  00F2A5  07                 	db	7
  3158  00F2A6  0A                 	db	10
  3159  00F2A7                     __end_of_diatonic_seventh_minor:
  3160                           	opt stack 0
  3161  00F2A7                     _diatonic_seventh_major:
  3162                           	opt stack 0
  3163  00F2A7  00                 	db	0
  3164  00F2A8  04                 	db	4
  3165  00F2A9  07                 	db	7
  3166  00F2AA  0B                 	db	11
  3167  00F2AB  00                 	db	0
  3168  00F2AC  03                 	db	3
  3169  00F2AD  07                 	db	7
  3170  00F2AE  0A                 	db	10
  3171  00F2AF  00                 	db	0
  3172  00F2B0  03                 	db	3
  3173  00F2B1  07                 	db	7
  3174  00F2B2  0A                 	db	10
  3175  00F2B3  00                 	db	0
  3176  00F2B4  04                 	db	4
  3177  00F2B5  07                 	db	7
  3178  00F2B6  0B                 	db	11
  3179  00F2B7  00                 	db	0
  3180  00F2B8  04                 	db	4
  3181  00F2B9  07                 	db	7
  3182  00F2BA  0A                 	db	10
  3183  00F2BB  00                 	db	0
  3184  00F2BC  03                 	db	3
  3185  00F2BD  07                 	db	7
  3186  00F2BE  0A                 	db	10
  3187  00F2BF  00                 	db	0
  3188  00F2C0  03                 	db	3
  3189  00F2C1  06                 	db	6
  3190  00F2C2  0A                 	db	10
  3191  00F2C3  00                 	db	0
  3192  00F2C4  04                 	db	4
  3193  00F2C5  07                 	db	7
  3194  00F2C6  0B                 	db	11
  3195  00F2C7  00                 	db	0
  3196  00F2C8  03                 	db	3
  3197  00F2C9  07                 	db	7
  3198  00F2CA  0A                 	db	10
  3199  00F2CB  00                 	db	0
  3200  00F2CC  03                 	db	3
  3201  00F2CD  07                 	db	7
  3202  00F2CE  0A                 	db	10
  3203  00F2CF  00                 	db	0
  3204  00F2D0  04                 	db	4
  3205  00F2D1  07                 	db	7
  3206  00F2D2  0B                 	db	11
  3207  00F2D3  00                 	db	0
  3208  00F2D4  04                 	db	4
  3209  00F2D5  07                 	db	7
  3210  00F2D6  0A                 	db	10
  3211  00F2D7  00                 	db	0
  3212  00F2D8  03                 	db	3
  3213  00F2D9  07                 	db	7
  3214  00F2DA  0A                 	db	10
  3215  00F2DB  00                 	db	0
  3216  00F2DC  03                 	db	3
  3217  00F2DD  06                 	db	6
  3218  00F2DE  0A                 	db	10
  3219  00F2DF  00                 	db	0
  3220  00F2E0  04                 	db	4
  3221  00F2E1  07                 	db	7
  3222  00F2E2  0B                 	db	11
  3223  00F2E3                     __end_of_diatonic_seventh_major:
  3224                           	opt stack 0
  3225  00F2E3                     _diatonic_minor:
  3226                           	opt stack 0
  3227  00F2E3  00                 	db	0
  3228  00F2E4  03                 	db	3
  3229  00F2E5  07                 	db	7
  3230  00F2E6  02                 	db	2
  3231  00F2E7  03                 	db	3
  3232  00F2E8  06                 	db	6
  3233  00F2E9  03                 	db	3
  3234  00F2EA  04                 	db	4
  3235  00F2EB  07                 	db	7
  3236  00F2EC  05                 	db	5
  3237  00F2ED  03                 	db	3
  3238  00F2EE  07                 	db	7
  3239  00F2EF  07                 	db	7
  3240  00F2F0  03                 	db	3
  3241  00F2F1  07                 	db	7
  3242  00F2F2  08                 	db	8
  3243  00F2F3  04                 	db	4
  3244  00F2F4  07                 	db	7
  3245  00F2F5  0A                 	db	10
  3246  00F2F6  04                 	db	4
  3247  00F2F7  07                 	db	7
  3248  00F2F8  0C                 	db	12
  3249  00F2F9  03                 	db	3
  3250  00F2FA  07                 	db	7
  3251  00F2FB  0E                 	db	14
  3252  00F2FC  03                 	db	3
  3253  00F2FD  06                 	db	6
  3254  00F2FE  0F                 	db	15
  3255  00F2FF  04                 	db	4
  3256  00F300  07                 	db	7
  3257  00F301  11                 	db	17
  3258  00F302  03                 	db	3
  3259  00F303  07                 	db	7
  3260  00F304  13                 	db	19
  3261  00F305  03                 	db	3
  3262  00F306  07                 	db	7
  3263  00F307  14                 	db	20
  3264  00F308  04                 	db	4
  3265  00F309  07                 	db	7
  3266  00F30A  16                 	db	22
  3267  00F30B  04                 	db	4
  3268  00F30C  07                 	db	7
  3269  00F30D  18                 	db	24
  3270  00F30E  03                 	db	3
  3271  00F30F  07                 	db	7
  3272  00F310                     __end_of_diatonic_minor:
  3273                           	opt stack 0
  3274  00F310                     _diatonic_major:
  3275                           	opt stack 0
  3276  00F310  00                 	db	0
  3277  00F311  04                 	db	4
  3278  00F312  07                 	db	7
  3279  00F313  00                 	db	0
  3280  00F314  03                 	db	3
  3281  00F315  07                 	db	7
  3282  00F316  00                 	db	0
  3283  00F317  03                 	db	3
  3284  00F318  07                 	db	7
  3285  00F319  00                 	db	0
  3286  00F31A  04                 	db	4
  3287  00F31B  07                 	db	7
  3288  00F31C  00                 	db	0
  3289  00F31D  04                 	db	4
  3290  00F31E  07                 	db	7
  3291  00F31F  00                 	db	0
  3292  00F320  03                 	db	3
  3293  00F321  07                 	db	7
  3294  00F322  00                 	db	0
  3295  00F323  03                 	db	3
  3296  00F324  06                 	db	6
  3297  00F325  00                 	db	0
  3298  00F326  04                 	db	4
  3299  00F327  07                 	db	7
  3300  00F328  00                 	db	0
  3301  00F329  03                 	db	3
  3302  00F32A  07                 	db	7
  3303  00F32B  00                 	db	0
  3304  00F32C  03                 	db	3
  3305  00F32D  07                 	db	7
  3306  00F32E  00                 	db	0
  3307  00F32F  04                 	db	4
  3308  00F330  07                 	db	7
  3309  00F331  00                 	db	0
  3310  00F332  04                 	db	4
  3311  00F333  07                 	db	7
  3312  00F334  00                 	db	0
  3313  00F335  03                 	db	3
  3314  00F336  07                 	db	7
  3315  00F337  00                 	db	0
  3316  00F338  03                 	db	3
  3317  00F339  06                 	db	6
  3318  00F33A  00                 	db	0
  3319  00F33B  04                 	db	4
  3320  00F33C  07                 	db	7
  3321  00F33D                     __end_of_diatonic_major:
  3322                           	opt stack 0
  3323  00F33D                     _ttable:
  3324                           	opt stack 0
  3325  00F33D  00                 	db	0
  3326  00F33E  02                 	db	2
  3327  00F33F  04                 	db	4
  3328  00F340  00                 	db	0
  3329  00F341  03                 	db	3
  3330  00F342  00                 	db	0
  3331  00F343  01                 	db	1
  3332  00F344  10                 	db	16
  3333  00F345  03                 	db	3
  3334  00F346  02                 	db	2
  3335  00F347  00                 	db	0
  3336  00F348  00                 	db	0
  3337  00F349  03                 	db	3
  3338  00F34A  02                 	db	2
  3339  00F34B  01                 	db	1
  3340  00F34C  00                 	db	0
  3341  00F34D  06                 	db	6
  3342  00F34E  00                 	db	0
  3343  00F34F  04                 	db	4
  3344  00F350  00                 	db	0
  3345  00F351  06                 	db	6
  3346  00F352  05                 	db	5
  3347  00F353  00                 	db	0
  3348  00F354  20                 	db	32
  3349  00F355  06                 	db	6
  3350  00F356  05                 	db	5
  3351  00F357  04                 	db	4
  3352  00F358  00                 	db	0
  3353  00F359                     __end_of_ttable:
  3354                           	opt stack 0
  3355  00F359                     _seg_bcd_hex:
  3356                           	opt stack 0
  3357  00F359  3F                 	db	63
  3358  00F35A  06                 	db	6
  3359  00F35B  5B                 	db	91
  3360  00F35C  4F                 	db	79
  3361  00F35D  66                 	db	102
  3362  00F35E  6D                 	db	109
  3363  00F35F  7D                 	db	125
  3364  00F360  07                 	db	7
  3365  00F361  7F                 	db	127
  3366  00F362  6F                 	db	111
  3367  00F363  77                 	db	119
  3368  00F364  7C                 	db	124
  3369  00F365  39                 	db	57
  3370  00F366  5E                 	db	94
  3371  00F367  79                 	db	121
  3372  00F368  71                 	db	113
  3373  00F369                     __end_of_seg_bcd_hex:
  3374                           	opt stack 0
  3375  00F369                     _minor_key:
  3376                           	opt stack 0
  3377  00F369  00                 	db	0
  3378  00F36A  02                 	db	2
  3379  00F36B  03                 	db	3
  3380  00F36C  05                 	db	5
  3381  00F36D  07                 	db	7
  3382  00F36E  08                 	db	8
  3383  00F36F  0A                 	db	10
  3384  00F370  0C                 	db	12
  3385  00F371  0E                 	db	14
  3386  00F372  0F                 	db	15
  3387  00F373  11                 	db	17
  3388  00F374  13                 	db	19
  3389  00F375  14                 	db	20
  3390  00F376  16                 	db	22
  3391  00F377  18                 	db	24
  3392  00F378                     __end_of_minor_key:
  3393                           	opt stack 0
  3394  00F378                     _major_key:
  3395                           	opt stack 0
  3396  00F378  00                 	db	0
  3397  00F379  02                 	db	2
  3398  00F37A  04                 	db	4
  3399  00F37B  05                 	db	5
  3400  00F37C  07                 	db	7
  3401  00F37D  09                 	db	9
  3402  00F37E  0B                 	db	11
  3403  00F37F  0C                 	db	12
  3404  00F380  0E                 	db	14
  3405  00F381  10                 	db	16
  3406  00F382  11                 	db	17
  3407  00F383  13                 	db	19
  3408  00F384  15                 	db	21
  3409  00F385  17                 	db	23
  3410  00F386  18                 	db	24
  3411  00F387                     __end_of_major_key:
  3412                           	opt stack 0
  3413  00F387                     _pentatonic_minor_key:
  3414                           	opt stack 0
  3415  00F387  00                 	db	0
  3416  00F388  03                 	db	3
  3417  00F389  05                 	db	5
  3418  00F38A  07                 	db	7
  3419  00F38B  0A                 	db	10
  3420  00F38C  0C                 	db	12
  3421  00F38D  0F                 	db	15
  3422  00F38E  11                 	db	17
  3423  00F38F  13                 	db	19
  3424  00F390  16                 	db	22
  3425  00F391  18                 	db	24
  3426  00F392                     __end_of_pentatonic_minor_key:
  3427                           	opt stack 0
  3428  00F392                     _pentatonic_major_key:
  3429                           	opt stack 0
  3430  00F392  00                 	db	0
  3431  00F393  02                 	db	2
  3432  00F394  04                 	db	4
  3433  00F395  07                 	db	7
  3434  00F396  09                 	db	9
  3435  00F397  0C                 	db	12
  3436  00F398  0E                 	db	14
  3437  00F399  10                 	db	16
  3438  00F39A  13                 	db	19
  3439  00F39B  15                 	db	21
  3440  00F39C  18                 	db	24
  3441  00F39D                     __end_of_pentatonic_major_key:
  3442                           	opt stack 0
  3443  00F39D                     _MAX_NUM_NOTES:
  3444                           	opt stack 0
  3445  00F39D  10                 	db	16
  3446  00F39E                     __end_of_MAX_NUM_NOTES:
  3447                           	opt stack 0
  3448  00F39E                     _LCD_STRINGS:
  3449                           	opt stack 0
  3450  00F39E  4B                 	db	75
  3451  00F39F  45                 	db	69
  3452  00F3A0  59                 	db	89
  3453  00F3A1  42                 	db	66
  3454  00F3A2  4F                 	db	79
  3455  00F3A3  41                 	db	65
  3456  00F3A4  52                 	db	82
  3457  00F3A5  44                 	db	68
  3458  00F3A6  20                 	db	32
  3459  00F3A7  4D                 	db	77
  3460  00F3A8  4F                 	db	79
  3461  00F3A9  44                 	db	68
  3462  00F3AA  45                 	db	69
  3463  00F3AB  3A                 	db	58
  3464  00F3AC  00                 	db	0
  3465  00F3AD  00                 	db	0
  3466  00F3AE  00                 	db	0
  3467  00F3AF  41                 	db	65
  3468  00F3B0  52                 	db	82
  3469  00F3B1  50                 	db	80
  3470  00F3B2  45                 	db	69
  3471  00F3B3  47                 	db	71
  3472  00F3B4  47                 	db	71
  3473  00F3B5  49                 	db	73
  3474  00F3B6  4F                 	db	79
  3475  00F3B7  20                 	db	32
  3476  00F3B8  4D                 	db	77
  3477  00F3B9  45                 	db	69
  3478  00F3BA  4E                 	db	78
  3479  00F3BB  55                 	db	85
  3480  00F3BC  3A                 	db	58
  3481  00F3BD  00                 	db	0
  3482  00F3BE  00                 	db	0
  3483  00F3BF  00                 	db	0
  3484  00F3C0  54                 	db	84
  3485  00F3C1  52                 	db	82
  3486  00F3C2  41                 	db	65
  3487  00F3C3  4E                 	db	78
  3488  00F3C4  53                 	db	83
  3489  00F3C5  50                 	db	80
  3490  00F3C6  4F                 	db	79
  3491  00F3C7  53                 	db	83
  3492  00F3C8  45                 	db	69
  3493  00F3C9  20                 	db	32
  3494  00F3CA  4D                 	db	77
  3495  00F3CB  4F                 	db	79
  3496  00F3CC  44                 	db	68
  3497  00F3CD  45                 	db	69
  3498  00F3CE  3A                 	db	58
  3499  00F3CF  00                 	db	0
  3500  00F3D0  00                 	db	0
  3501  00F3D1  44                 	db	68
  3502  00F3D2  52                 	db	82
  3503  00F3D3  55                 	db	85
  3504  00F3D4  4D                 	db	77
  3505  00F3D5  20                 	db	32
  3506  00F3D6  4D                 	db	77
  3507  00F3D7  4F                 	db	79
  3508  00F3D8  44                 	db	68
  3509  00F3D9  45                 	db	69
  3510  00F3DA  3A                 	db	58
  3511  00F3DB  00                 	db	0
  3512  00F3DC  00                 	db	0
  3513  00F3DD  00                 	db	0
  3514  00F3DE  00                 	db	0
  3515  00F3DF  00                 	db	0
  3516  00F3E0  00                 	db	0
  3517  00F3E1  00                 	db	0
  3518  00F3E2  50                 	db	80
  3519  00F3E3  4F                 	db	79
  3520  00F3E4  54                 	db	84
  3521  00F3E5  53                 	db	83
  3522  00F3E6  20                 	db	32
  3523  00F3E7  4D                 	db	77
  3524  00F3E8  4F                 	db	79
  3525  00F3E9  44                 	db	68
  3526  00F3EA  45                 	db	69
  3527  00F3EB  3A                 	db	58
  3528  00F3EC  00                 	db	0
  3529  00F3ED  00                 	db	0
  3530  00F3EE  00                 	db	0
  3531  00F3EF  00                 	db	0
  3532  00F3F0  00                 	db	0
  3533  00F3F1  00                 	db	0
  3534  00F3F2  00                 	db	0
  3535  00F3F3  4D                 	db	77
  3536  00F3F4  49                 	db	73
  3537  00F3F5  44                 	db	68
  3538  00F3F6  49                 	db	73
  3539  00F3F7  20                 	db	32
  3540  00F3F8  43                 	db	67
  3541  00F3F9  48                 	db	72
  3542  00F3FA  41                 	db	65
  3543  00F3FB  4E                 	db	78
  3544  00F3FC  4E                 	db	78
  3545  00F3FD  45                 	db	69
  3546  00F3FE  4C                 	db	76
  3547  00F3FF  53                 	db	83
  3548  00F400  3A                 	db	58
  3549  00F401  00                 	db	0
  3550  00F402  00                 	db	0
  3551  00F403  00                 	db	0
  3552  00F404  50                 	db	80
  3553  00F405  52                 	db	82
  3554  00F406  4F                 	db	79
  3555  00F407  47                 	db	71
  3556  00F408  52                 	db	82
  3557  00F409  41                 	db	65
  3558  00F40A  4D                 	db	77
  3559  00F40B  20                 	db	32
  3560  00F40C  43                 	db	67
  3561  00F40D  48                 	db	72
  3562  00F40E  41                 	db	65
  3563  00F40F  4E                 	db	78
  3564  00F410  47                 	db	71
  3565  00F411  45                 	db	69
  3566  00F412  3A                 	db	58
  3567  00F413  00                 	db	0
  3568  00F414  00                 	db	0
  3569  00F415  45                 	db	69
  3570  00F416  45                 	db	69
  3571  00F417  50                 	db	80
  3572  00F418  52                 	db	82
  3573  00F419  4F                 	db	79
  3574  00F41A  4D                 	db	77
  3575  00F41B  20                 	db	32
  3576  00F41C  4D                 	db	77
  3577  00F41D  45                 	db	69
  3578  00F41E  4E                 	db	78
  3579  00F41F  55                 	db	85
  3580  00F420  3A                 	db	58
  3581  00F421  00                 	db	0
  3582  00F422  00                 	db	0
  3583  00F423  00                 	db	0
  3584  00F424  00                 	db	0
  3585  00F425  00                 	db	0
  3586  00F426  43                 	db	67
  3587  00F427  48                 	db	72
  3588  00F428  52                 	db	82
  3589  00F429  4F                 	db	79
  3590  00F42A  4D                 	db	77
  3591  00F42B  41                 	db	65
  3592  00F42C  54                 	db	84
  3593  00F42D  49                 	db	73
  3594  00F42E  43                 	db	67
  3595  00F42F  00                 	db	0
  3596  00F430  00                 	db	0
  3597  00F431  00                 	db	0
  3598  00F432  00                 	db	0
  3599  00F433  00                 	db	0
  3600  00F434  00                 	db	0
  3601  00F435  00                 	db	0
  3602  00F436  00                 	db	0
  3603  00F437  4D                 	db	77
  3604  00F438  41                 	db	65
  3605  00F439  4A                 	db	74
  3606  00F43A  4F                 	db	79
  3607  00F43B  52                 	db	82
  3608  00F43C  00                 	db	0
  3609  00F43D  00                 	db	0
  3610  00F43E  00                 	db	0
  3611  00F43F  00                 	db	0
  3612  00F440  00                 	db	0
  3613  00F441  00                 	db	0
  3614  00F442  00                 	db	0
  3615  00F443  00                 	db	0
  3616  00F444  00                 	db	0
  3617  00F445  00                 	db	0
  3618  00F446  00                 	db	0
  3619  00F447  00                 	db	0
  3620  00F448  4D                 	db	77
  3621  00F449  49                 	db	73
  3622  00F44A  4E                 	db	78
  3623  00F44B  4F                 	db	79
  3624  00F44C  52                 	db	82
  3625  00F44D  00                 	db	0
  3626  00F44E  00                 	db	0
  3627  00F44F  00                 	db	0
  3628  00F450  00                 	db	0
  3629  00F451  00                 	db	0
  3630  00F452  00                 	db	0
  3631  00F453  00                 	db	0
  3632  00F454  00                 	db	0
  3633  00F455  00                 	db	0
  3634  00F456  00                 	db	0
  3635  00F457  00                 	db	0
  3636  00F458  00                 	db	0
  3637  00F459  4D                 	db	77
  3638  00F45A  4F                 	db	79
  3639  00F45B  44                 	db	68
  3640  00F45C  45                 	db	69
  3641  00F45D  53                 	db	83
  3642  00F45E  00                 	db	0
  3643  00F45F  00                 	db	0
  3644  00F460  00                 	db	0
  3645  00F461  00                 	db	0
  3646  00F462  00                 	db	0
  3647  00F463  00                 	db	0
  3648  00F464  00                 	db	0
  3649  00F465  00                 	db	0
  3650  00F466  00                 	db	0
  3651  00F467  00                 	db	0
  3652  00F468  00                 	db	0
  3653  00F469  00                 	db	0
  3654  00F46A  50                 	db	80
  3655  00F46B  45                 	db	69
  3656  00F46C  4E                 	db	78
  3657  00F46D  54                 	db	84
  3658  00F46E  41                 	db	65
  3659  00F46F  54                 	db	84
  3660  00F470  4F                 	db	79
  3661  00F471  4E                 	db	78
  3662  00F472  49                 	db	73
  3663  00F473  43                 	db	67
  3664  00F474  20                 	db	32
  3665  00F475  4D                 	db	77
  3666  00F476  41                 	db	65
  3667  00F477  4A                 	db	74
  3668  00F478  4F                 	db	79
  3669  00F479  52                 	db	82
  3670  00F47A  00                 	db	0
  3671  00F47B  50                 	db	80
  3672  00F47C  45                 	db	69
  3673  00F47D  4E                 	db	78
  3674  00F47E  54                 	db	84
  3675  00F47F  41                 	db	65
  3676  00F480  54                 	db	84
  3677  00F481  4F                 	db	79
  3678  00F482  4E                 	db	78
  3679  00F483  49                 	db	73
  3680  00F484  43                 	db	67
  3681  00F485  20                 	db	32
  3682  00F486  4D                 	db	77
  3683  00F487  49                 	db	73
  3684  00F488  4E                 	db	78
  3685  00F489  4F                 	db	79
  3686  00F48A  52                 	db	82
  3687  00F48B  00                 	db	0
  3688  00F48C  54                 	db	84
  3689  00F48D  52                 	db	82
  3690  00F48E  49                 	db	73
  3691  00F48F  41                 	db	65
  3692  00F490  44                 	db	68
  3693  00F491  00                 	db	0
  3694  00F492  00                 	db	0
  3695  00F493  00                 	db	0
  3696  00F494  00                 	db	0
  3697  00F495  00                 	db	0
  3698  00F496  00                 	db	0
  3699  00F497  00                 	db	0
  3700  00F498  00                 	db	0
  3701  00F499  00                 	db	0
  3702  00F49A  00                 	db	0
  3703  00F49B  00                 	db	0
  3704  00F49C  00                 	db	0
  3705  00F49D  44                 	db	68
  3706  00F49E  49                 	db	73
  3707  00F49F  41                 	db	65
  3708  00F4A0  54                 	db	84
  3709  00F4A1  4F                 	db	79
  3710  00F4A2  4E                 	db	78
  3711  00F4A3  49                 	db	73
  3712  00F4A4  43                 	db	67
  3713  00F4A5  20                 	db	32
  3714  00F4A6  54                 	db	84
  3715  00F4A7  20                 	db	32
  3716  00F4A8  4D                 	db	77
  3717  00F4A9  41                 	db	65
  3718  00F4AA  4A                 	db	74
  3719  00F4AB  4F                 	db	79
  3720  00F4AC  52                 	db	82
  3721  00F4AD  00                 	db	0
  3722  00F4AE  44                 	db	68
  3723  00F4AF  49                 	db	73
  3724  00F4B0  41                 	db	65
  3725  00F4B1  54                 	db	84
  3726  00F4B2  4F                 	db	79
  3727  00F4B3  4E                 	db	78
  3728  00F4B4  49                 	db	73
  3729  00F4B5  43                 	db	67
  3730  00F4B6  20                 	db	32
  3731  00F4B7  54                 	db	84
  3732  00F4B8  20                 	db	32
  3733  00F4B9  4D                 	db	77
  3734  00F4BA  49                 	db	73
  3735  00F4BB  4E                 	db	78
  3736  00F4BC  4F                 	db	79
  3737  00F4BD  52                 	db	82
  3738  00F4BE  00                 	db	0
  3739  00F4BF  53                 	db	83
  3740  00F4C0  45                 	db	69
  3741  00F4C1  56                 	db	86
  3742  00F4C2  45                 	db	69
  3743  00F4C3  4E                 	db	78
  3744  00F4C4  54                 	db	84
  3745  00F4C5  48                 	db	72
  3746  00F4C6  00                 	db	0
  3747  00F4C7  00                 	db	0
  3748  00F4C8  00                 	db	0
  3749  00F4C9  00                 	db	0
  3750  00F4CA  00                 	db	0
  3751  00F4CB  00                 	db	0
  3752  00F4CC  00                 	db	0
  3753  00F4CD  00                 	db	0
  3754  00F4CE  00                 	db	0
  3755  00F4CF  00                 	db	0
  3756  00F4D0  44                 	db	68
  3757  00F4D1  49                 	db	73
  3758  00F4D2  41                 	db	65
  3759  00F4D3  54                 	db	84
  3760  00F4D4  4F                 	db	79
  3761  00F4D5  4E                 	db	78
  3762  00F4D6  49                 	db	73
  3763  00F4D7  43                 	db	67
  3764  00F4D8  20                 	db	32
  3765  00F4D9  37                 	db	55
  3766  00F4DA  20                 	db	32
  3767  00F4DB  4D                 	db	77
  3768  00F4DC  41                 	db	65
  3769  00F4DD  4A                 	db	74
  3770  00F4DE  4F                 	db	79
  3771  00F4DF  52                 	db	82
  3772  00F4E0  00                 	db	0
  3773  00F4E1  44                 	db	68
  3774  00F4E2  49                 	db	73
  3775  00F4E3  41                 	db	65
  3776  00F4E4  54                 	db	84
  3777  00F4E5  4F                 	db	79
  3778  00F4E6  4E                 	db	78
  3779  00F4E7  49                 	db	73
  3780  00F4E8  43                 	db	67
  3781  00F4E9  20                 	db	32
  3782  00F4EA  37                 	db	55
  3783  00F4EB  20                 	db	32
  3784  00F4EC  4D                 	db	77
  3785  00F4ED  49                 	db	73
  3786  00F4EE  4E                 	db	78
  3787  00F4EF  4F                 	db	79
  3788  00F4F0  52                 	db	82
  3789  00F4F1  00                 	db	0
  3790  00F4F2  69                 	db	105
  3791  00F4F3  6F                 	db	111
  3792  00F4F4  6E                 	db	110
  3793  00F4F5  69                 	db	105
  3794  00F4F6  61                 	db	97
  3795  00F4F7  6E                 	db	110
  3796  00F4F8  00                 	db	0
  3797  00F4F9  00                 	db	0
  3798  00F4FA  00                 	db	0
  3799  00F4FB  00                 	db	0
  3800  00F4FC  00                 	db	0
  3801  00F4FD  00                 	db	0
  3802  00F4FE  00                 	db	0
  3803  00F4FF  00                 	db	0
  3804  00F500  00                 	db	0
  3805  00F501  00                 	db	0
  3806  00F502  00                 	db	0
  3807  00F503  64                 	db	100
  3808  00F504  6F                 	db	111
  3809  00F505  72                 	db	114
  3810  00F506  69                 	db	105
  3811  00F507  61                 	db	97
  3812  00F508  6E                 	db	110
  3813  00F509  00                 	db	0
  3814  00F50A  00                 	db	0
  3815  00F50B  00                 	db	0
  3816  00F50C  00                 	db	0
  3817  00F50D  00                 	db	0
  3818  00F50E  00                 	db	0
  3819  00F50F  00                 	db	0
  3820  00F510  00                 	db	0
  3821  00F511  00                 	db	0
  3822  00F512  00                 	db	0
  3823  00F513  00                 	db	0
  3824  00F514  70                 	db	112
  3825  00F515  68                 	db	104
  3826  00F516  72                 	db	114
  3827  00F517  79                 	db	121
  3828  00F518  67                 	db	103
  3829  00F519  69                 	db	105
  3830  00F51A  61                 	db	97
  3831  00F51B  6E                 	db	110
  3832  00F51C  00                 	db	0
  3833  00F51D  00                 	db	0
  3834  00F51E  00                 	db	0
  3835  00F51F  00                 	db	0
  3836  00F520  00                 	db	0
  3837  00F521  00                 	db	0
  3838  00F522  00                 	db	0
  3839  00F523  00                 	db	0
  3840  00F524  00                 	db	0
  3841  00F525  6C                 	db	108
  3842  00F526  79                 	db	121
  3843  00F527  64                 	db	100
  3844  00F528  69                 	db	105
  3845  00F529  61                 	db	97
  3846  00F52A  6E                 	db	110
  3847  00F52B  00                 	db	0
  3848  00F52C  00                 	db	0
  3849  00F52D  00                 	db	0
  3850  00F52E  00                 	db	0
  3851  00F52F  00                 	db	0
  3852  00F530  00                 	db	0
  3853  00F531  00                 	db	0
  3854  00F532  00                 	db	0
  3855  00F533  00                 	db	0
  3856  00F534  00                 	db	0
  3857  00F535  00                 	db	0
  3858  00F536  6D                 	db	109
  3859  00F537  69                 	db	105
  3860  00F538  78                 	db	120
  3861  00F539  6F                 	db	111
  3862  00F53A  6C                 	db	108
  3863  00F53B  79                 	db	121
  3864  00F53C  64                 	db	100
  3865  00F53D  69                 	db	105
  3866  00F53E  61                 	db	97
  3867  00F53F  6E                 	db	110
  3868  00F540  00                 	db	0
  3869  00F541  00                 	db	0
  3870  00F542  00                 	db	0
  3871  00F543  00                 	db	0
  3872  00F544  00                 	db	0
  3873  00F545  00                 	db	0
  3874  00F546  00                 	db	0
  3875  00F547  61                 	db	97
  3876  00F548  65                 	db	101
  3877  00F549  6F                 	db	111
  3878  00F54A  6C                 	db	108
  3879  00F54B  69                 	db	105
  3880  00F54C  61                 	db	97
  3881  00F54D  6E                 	db	110
  3882  00F54E  00                 	db	0
  3883  00F54F  00                 	db	0
  3884  00F550  00                 	db	0
  3885  00F551  00                 	db	0
  3886  00F552  00                 	db	0
  3887  00F553  00                 	db	0
  3888  00F554  00                 	db	0
  3889  00F555  00                 	db	0
  3890  00F556  00                 	db	0
  3891  00F557  00                 	db	0
  3892  00F558  6C                 	db	108
  3893  00F559  6F                 	db	111
  3894  00F55A  63                 	db	99
  3895  00F55B  72                 	db	114
  3896  00F55C  69                 	db	105
  3897  00F55D  61                 	db	97
  3898  00F55E  6E                 	db	110
  3899  00F55F  00                 	db	0
  3900  00F560  00                 	db	0
  3901  00F561  00                 	db	0
  3902  00F562  00                 	db	0
  3903  00F563  00                 	db	0
  3904  00F564  00                 	db	0
  3905  00F565  00                 	db	0
  3906  00F566  00                 	db	0
  3907  00F567  00                 	db	0
  3908  00F568  00                 	db	0
  3909  00F569  6D                 	db	109
  3910  00F56A  61                 	db	97
  3911  00F56B  6A                 	db	106
  3912  00F56C  6F                 	db	111
  3913  00F56D  72                 	db	114
  3914  00F56E  20                 	db	32
  3915  00F56F  74                 	db	116
  3916  00F570  72                 	db	114
  3917  00F571  69                 	db	105
  3918  00F572  61                 	db	97
  3919  00F573  64                 	db	100
  3920  00F574  00                 	db	0
  3921  00F575  00                 	db	0
  3922  00F576  00                 	db	0
  3923  00F577  00                 	db	0
  3924  00F578  00                 	db	0
  3925  00F579  00                 	db	0
  3926  00F57A  6D                 	db	109
  3927  00F57B  69                 	db	105
  3928  00F57C  6E                 	db	110
  3929  00F57D  6F                 	db	111
  3930  00F57E  72                 	db	114
  3931  00F57F  20                 	db	32
  3932  00F580  74                 	db	116
  3933  00F581  72                 	db	114
  3934  00F582  69                 	db	105
  3935  00F583  61                 	db	97
  3936  00F584  64                 	db	100
  3937  00F585  00                 	db	0
  3938  00F586  00                 	db	0
  3939  00F587  00                 	db	0
  3940  00F588  00                 	db	0
  3941  00F589  00                 	db	0
  3942  00F58A  00                 	db	0
  3943  00F58B  61                 	db	97
  3944  00F58C  75                 	db	117
  3945  00F58D  67                 	db	103
  3946  00F58E  6D                 	db	109
  3947  00F58F  65                 	db	101
  3948  00F590  6E                 	db	110
  3949  00F591  74                 	db	116
  3950  00F592  65                 	db	101
  3951  00F593  64                 	db	100
  3952  00F594  20                 	db	32
  3953  00F595  74                 	db	116
  3954  00F596  72                 	db	114
  3955  00F597  69                 	db	105
  3956  00F598  61                 	db	97
  3957  00F599  64                 	db	100
  3958  00F59A  00                 	db	0
  3959  00F59B  00                 	db	0
  3960  00F59C  64                 	db	100
  3961  00F59D  69                 	db	105
  3962  00F59E  6D                 	db	109
  3963  00F59F  69                 	db	105
  3964  00F5A0  6E                 	db	110
  3965  00F5A1  69                 	db	105
  3966  00F5A2  73                 	db	115
  3967  00F5A3  68                 	db	104
  3968  00F5A4  65                 	db	101
  3969  00F5A5  64                 	db	100
  3970  00F5A6  20                 	db	32
  3971  00F5A7  74                 	db	116
  3972  00F5A8  72                 	db	114
  3973  00F5A9  69                 	db	105
  3974  00F5AA  61                 	db	97
  3975  00F5AB  64                 	db	100
  3976  00F5AC  00                 	db	0
  3977  00F5AD  64                 	db	100
  3978  00F5AE  6F                 	db	111
  3979  00F5AF  6D                 	db	109
  3980  00F5B0  69                 	db	105
  3981  00F5B1  6E                 	db	110
  3982  00F5B2  61                 	db	97
  3983  00F5B3  6E                 	db	110
  3984  00F5B4  74                 	db	116
  3985  00F5B5  20                 	db	32
  3986  00F5B6  37                 	db	55
  3987  00F5B7  74                 	db	116
  3988  00F5B8  68                 	db	104
  3989  00F5B9  00                 	db	0
  3990  00F5BA  00                 	db	0
  3991  00F5BB  00                 	db	0
  3992  00F5BC  00                 	db	0
  3993  00F5BD  00                 	db	0
  3994  00F5BE  6D                 	db	109
  3995  00F5BF  61                 	db	97
  3996  00F5C0  6A                 	db	106
  3997  00F5C1  6F                 	db	111
  3998  00F5C2  72                 	db	114
  3999  00F5C3  20                 	db	32
  4000  00F5C4  37                 	db	55
  4001  00F5C5  74                 	db	116
  4002  00F5C6  68                 	db	104
  4003  00F5C7  00                 	db	0
  4004  00F5C8  00                 	db	0
  4005  00F5C9  00                 	db	0
  4006  00F5CA  00                 	db	0
  4007  00F5CB  00                 	db	0
  4008  00F5CC  00                 	db	0
  4009  00F5CD  00                 	db	0
  4010  00F5CE  00                 	db	0
  4011  00F5CF  6D                 	db	109
  4012  00F5D0  69                 	db	105
  4013  00F5D1  6E                 	db	110
  4014  00F5D2  6F                 	db	111
  4015  00F5D3  72                 	db	114
  4016  00F5D4  20                 	db	32
  4017  00F5D5  37                 	db	55
  4018  00F5D6  74                 	db	116
  4019  00F5D7  68                 	db	104
  4020  00F5D8  00                 	db	0
  4021  00F5D9  00                 	db	0
  4022  00F5DA  00                 	db	0
  4023  00F5DB  00                 	db	0
  4024  00F5DC  00                 	db	0
  4025  00F5DD  00                 	db	0
  4026  00F5DE  00                 	db	0
  4027  00F5DF  00                 	db	0
  4028  00F5E0  68                 	db	104
  4029  00F5E1  61                 	db	97
  4030  00F5E2  6C                 	db	108
  4031  00F5E3  66                 	db	102
  4032  00F5E4  20                 	db	32
  4033  00F5E5  64                 	db	100
  4034  00F5E6  69                 	db	105
  4035  00F5E7  6D                 	db	109
  4036  00F5E8  69                 	db	105
  4037  00F5E9  6E                 	db	110
  4038  00F5EA  69                 	db	105
  4039  00F5EB  73                 	db	115
  4040  00F5EC  68                 	db	104
  4041  00F5ED  65                 	db	101
  4042  00F5EE  64                 	db	100
  4043  00F5EF  00                 	db	0
  4044  00F5F0  00                 	db	0
  4045  00F5F1  64                 	db	100
  4046  00F5F2  69                 	db	105
  4047  00F5F3  6D                 	db	109
  4048  00F5F4  69                 	db	105
  4049  00F5F5  6E                 	db	110
  4050  00F5F6  69                 	db	105
  4051  00F5F7  73                 	db	115
  4052  00F5F8  68                 	db	104
  4053  00F5F9  65                 	db	101
  4054  00F5FA  64                 	db	100
  4055  00F5FB  20                 	db	32
  4056  00F5FC  37                 	db	55
  4057  00F5FD  74                 	db	116
  4058  00F5FE  68                 	db	104
  4059  00F5FF  00                 	db	0
  4060  00F600  00                 	db	0
  4061  00F601  00                 	db	0
  4062  00F602  48                 	db	72
  4063  00F603  41                 	db	65
  4064  00F604  4C                 	db	76
  4065  00F605  46                 	db	70
  4066  00F606  20                 	db	32
  4067  00F607  53                 	db	83
  4068  00F608  54                 	db	84
  4069  00F609  45                 	db	69
  4070  00F60A  50                 	db	80
  4071  00F60B  00                 	db	0
  4072  00F60C  00                 	db	0
  4073  00F60D  00                 	db	0
  4074  00F60E  00                 	db	0
  4075  00F60F  00                 	db	0
  4076  00F610  00                 	db	0
  4077  00F611  00                 	db	0
  4078  00F612  00                 	db	0
  4079  00F613  43                 	db	67
  4080  00F614  49                 	db	73
  4081  00F615  52                 	db	82
  4082  00F616  43                 	db	67
  4083  00F617  4C                 	db	76
  4084  00F618  45                 	db	69
  4085  00F619  20                 	db	32
  4086  00F61A  4F                 	db	79
  4087  00F61B  46                 	db	70
  4088  00F61C  20                 	db	32
  4089  00F61D  46                 	db	70
  4090  00F61E  49                 	db	73
  4091  00F61F  46                 	db	70
  4092  00F620  54                 	db	84
  4093  00F621  48                 	db	72
  4094  00F622  53                 	db	83
  4095  00F623  00                 	db	0
  4096  00F624  44                 	db	68
  4097  00F625  52                 	db	82
  4098  00F626  55                 	db	85
  4099  00F627  4D                 	db	77
  4100  00F628  20                 	db	32
  4101  00F629  49                 	db	73
  4102  00F62A  53                 	db	83
  4103  00F62B  20                 	db	32
  4104  00F62C  4E                 	db	78
  4105  00F62D  4F                 	db	79
  4106  00F62E  54                 	db	84
  4107  00F62F  45                 	db	69
  4108  00F630  20                 	db	32
  4109  00F631  4F                 	db	79
  4110  00F632  4E                 	db	78
  4111  00F633  00                 	db	0
  4112  00F634  00                 	db	0
  4113  00F635  44                 	db	68
  4114  00F636  52                 	db	82
  4115  00F637  55                 	db	85
  4116  00F638  4D                 	db	77
  4117  00F639  20                 	db	32
  4118  00F63A  49                 	db	73
  4119  00F63B  53                 	db	83
  4120  00F63C  20                 	db	32
  4121  00F63D  43                 	db	67
  4122  00F63E  43                 	db	67
  4123  00F63F  00                 	db	0
  4124  00F640  00                 	db	0
  4125  00F641  00                 	db	0
  4126  00F642  00                 	db	0
  4127  00F643  00                 	db	0
  4128  00F644  00                 	db	0
  4129  00F645  00                 	db	0
  4130  00F646  44                 	db	68
  4131  00F647  52                 	db	82
  4132  00F648  55                 	db	85
  4133  00F649  4D                 	db	77
  4134  00F64A  20                 	db	32
  4135  00F64B  43                 	db	67
  4136  00F64C  43                 	db	67
  4137  00F64D  20                 	db	32
  4138  00F64E  54                 	db	84
  4139  00F64F  59                 	db	89
  4140  00F650  50                 	db	80
  4141  00F651  45                 	db	69
  4142  00F652  00                 	db	0
  4143  00F653  00                 	db	0
  4144  00F654  00                 	db	0
  4145  00F655  00                 	db	0
  4146  00F656  00                 	db	0
  4147  00F657  44                 	db	68
  4148  00F658  52                 	db	82
  4149  00F659  55                 	db	85
  4150  00F65A  4D                 	db	77
  4151  00F65B  20                 	db	32
  4152  00F65C  53                 	db	83
  4153  00F65D  45                 	db	69
  4154  00F65E  54                 	db	84
  4155  00F65F  20                 	db	32
  4156  00F660  4E                 	db	78
  4157  00F661  4E                 	db	78
  4158  00F662  23                 	db	35
  4159  00F663  00                 	db	0
  4160  00F664  00                 	db	0
  4161  00F665  00                 	db	0
  4162  00F666  00                 	db	0
  4163  00F667  00                 	db	0
  4164  00F668  44                 	db	68
  4165  00F669  52                 	db	82
  4166  00F66A  55                 	db	85
  4167  00F66B  4D                 	db	77
  4168  00F66C  20                 	db	32
  4169  00F66D  53                 	db	83
  4170  00F66E  45                 	db	69
  4171  00F66F  54                 	db	84
  4172  00F670  20                 	db	32
  4173  00F671  43                 	db	67
  4174  00F672  43                 	db	67
  4175  00F673  23                 	db	35
  4176  00F674  00                 	db	0
  4177  00F675  00                 	db	0
  4178  00F676  00                 	db	0
  4179  00F677  00                 	db	0
  4180  00F678  00                 	db	0
  4181  00F679  44                 	db	68
  4182  00F67A  52                 	db	82
  4183  00F67B  55                 	db	85
  4184  00F67C  4D                 	db	77
  4185  00F67D  20                 	db	32
  4186  00F67E  43                 	db	67
  4187  00F67F  43                 	db	67
  4188  00F680  20                 	db	32
  4189  00F681  54                 	db	84
  4190  00F682  52                 	db	82
  4191  00F683  49                 	db	73
  4192  00F684  47                 	db	71
  4193  00F685  47                 	db	71
  4194  00F686  45                 	db	69
  4195  00F687  52                 	db	82
  4196  00F688  00                 	db	0
  4197  00F689  00                 	db	0
  4198  00F68A  44                 	db	68
  4199  00F68B  52                 	db	82
  4200  00F68C  55                 	db	85
  4201  00F68D  4D                 	db	77
  4202  00F68E  20                 	db	32
  4203  00F68F  43                 	db	67
  4204  00F690  43                 	db	67
  4205  00F691  20                 	db	32
  4206  00F692  54                 	db	84
  4207  00F693  4F                 	db	79
  4208  00F694  47                 	db	71
  4209  00F695  47                 	db	71
  4210  00F696  4C                 	db	76
  4211  00F697  45                 	db	69
  4212  00F698  00                 	db	0
  4213  00F699  00                 	db	0
  4214  00F69A  00                 	db	0
  4215  00F69B  44                 	db	68
  4216  00F69C  52                 	db	82
  4217  00F69D  55                 	db	85
  4218  00F69E  4D                 	db	77
  4219  00F69F  20                 	db	32
  4220  00F6A0  31                 	db	49
  4221  00F6A1  20                 	db	32
  4222  00F6A2  4E                 	db	78
  4223  00F6A3  4E                 	db	78
  4224  00F6A4  3A                 	db	58
  4225  00F6A5  20                 	db	32
  4226  00F6A6  00                 	db	0
  4227  00F6A7  00                 	db	0
  4228  00F6A8  00                 	db	0
  4229  00F6A9  00                 	db	0
  4230  00F6AA  00                 	db	0
  4231  00F6AB  00                 	db	0
  4232  00F6AC  44                 	db	68
  4233  00F6AD  52                 	db	82
  4234  00F6AE  55                 	db	85
  4235  00F6AF  4D                 	db	77
  4236  00F6B0  20                 	db	32
  4237  00F6B1  32                 	db	50
  4238  00F6B2  20                 	db	32
  4239  00F6B3  4E                 	db	78
  4240  00F6B4  4E                 	db	78
  4241  00F6B5  3A                 	db	58
  4242  00F6B6  20                 	db	32
  4243  00F6B7  00                 	db	0
  4244  00F6B8  00                 	db	0
  4245  00F6B9  00                 	db	0
  4246  00F6BA  00                 	db	0
  4247  00F6BB  00                 	db	0
  4248  00F6BC  00                 	db	0
  4249  00F6BD  44                 	db	68
  4250  00F6BE  52                 	db	82
  4251  00F6BF  55                 	db	85
  4252  00F6C0  4D                 	db	77
  4253  00F6C1  20                 	db	32
  4254  00F6C2  33                 	db	51
  4255  00F6C3  20                 	db	32
  4256  00F6C4  4E                 	db	78
  4257  00F6C5  4E                 	db	78
  4258  00F6C6  3A                 	db	58
  4259  00F6C7  20                 	db	32
  4260  00F6C8  00                 	db	0
  4261  00F6C9  00                 	db	0
  4262  00F6CA  00                 	db	0
  4263  00F6CB  00                 	db	0
  4264  00F6CC  00                 	db	0
  4265  00F6CD  00                 	db	0
  4266  00F6CE  44                 	db	68
  4267  00F6CF  52                 	db	82
  4268  00F6D0  55                 	db	85
  4269  00F6D1  4D                 	db	77
  4270  00F6D2  20                 	db	32
  4271  00F6D3  34                 	db	52
  4272  00F6D4  20                 	db	32
  4273  00F6D5  4E                 	db	78
  4274  00F6D6  4E                 	db	78
  4275  00F6D7  3A                 	db	58
  4276  00F6D8  20                 	db	32
  4277  00F6D9  00                 	db	0
  4278  00F6DA  00                 	db	0
  4279  00F6DB  00                 	db	0
  4280  00F6DC  00                 	db	0
  4281  00F6DD  00                 	db	0
  4282  00F6DE  00                 	db	0
  4283  00F6DF  44                 	db	68
  4284  00F6E0  52                 	db	82
  4285  00F6E1  55                 	db	85
  4286  00F6E2  4D                 	db	77
  4287  00F6E3  20                 	db	32
  4288  00F6E4  35                 	db	53
  4289  00F6E5  20                 	db	32
  4290  00F6E6  4E                 	db	78
  4291  00F6E7  4E                 	db	78
  4292  00F6E8  3A                 	db	58
  4293  00F6E9  20                 	db	32
  4294  00F6EA  00                 	db	0
  4295  00F6EB  00                 	db	0
  4296  00F6EC  00                 	db	0
  4297  00F6ED  00                 	db	0
  4298  00F6EE  00                 	db	0
  4299  00F6EF  00                 	db	0
  4300  00F6F0  44                 	db	68
  4301  00F6F1  52                 	db	82
  4302  00F6F2  55                 	db	85
  4303  00F6F3  4D                 	db	77
  4304  00F6F4  20                 	db	32
  4305  00F6F5  36                 	db	54
  4306  00F6F6  20                 	db	32
  4307  00F6F7  4E                 	db	78
  4308  00F6F8  4E                 	db	78
  4309  00F6F9  3A                 	db	58
  4310  00F6FA  20                 	db	32
  4311  00F6FB  00                 	db	0
  4312  00F6FC  00                 	db	0
  4313  00F6FD  00                 	db	0
  4314  00F6FE  00                 	db	0
  4315  00F6FF  00                 	db	0
  4316  00F700  00                 	db	0
  4317  00F701  44                 	db	68
  4318  00F702  52                 	db	82
  4319  00F703  55                 	db	85
  4320  00F704  4D                 	db	77
  4321  00F705  20                 	db	32
  4322  00F706  37                 	db	55
  4323  00F707  20                 	db	32
  4324  00F708  4E                 	db	78
  4325  00F709  4E                 	db	78
  4326  00F70A  3A                 	db	58
  4327  00F70B  20                 	db	32
  4328  00F70C  00                 	db	0
  4329  00F70D  00                 	db	0
  4330  00F70E  00                 	db	0
  4331  00F70F  00                 	db	0
  4332  00F710  00                 	db	0
  4333  00F711  00                 	db	0
  4334  00F712  44                 	db	68
  4335  00F713  52                 	db	82
  4336  00F714  55                 	db	85
  4337  00F715  4D                 	db	77
  4338  00F716  20                 	db	32
  4339  00F717  38                 	db	56
  4340  00F718  20                 	db	32
  4341  00F719  4E                 	db	78
  4342  00F71A  4E                 	db	78
  4343  00F71B  3A                 	db	58
  4344  00F71C  20                 	db	32
  4345  00F71D  00                 	db	0
  4346  00F71E  00                 	db	0
  4347  00F71F  00                 	db	0
  4348  00F720  00                 	db	0
  4349  00F721  00                 	db	0
  4350  00F722  00                 	db	0
  4351  00F723  44                 	db	68
  4352  00F724  52                 	db	82
  4353  00F725  55                 	db	85
  4354  00F726  4D                 	db	77
  4355  00F727  20                 	db	32
  4356  00F728  31                 	db	49
  4357  00F729  20                 	db	32
  4358  00F72A  43                 	db	67
  4359  00F72B  43                 	db	67
  4360  00F72C  3A                 	db	58
  4361  00F72D  20                 	db	32
  4362  00F72E  00                 	db	0
  4363  00F72F  00                 	db	0
  4364  00F730  00                 	db	0
  4365  00F731  00                 	db	0
  4366  00F732  00                 	db	0
  4367  00F733  00                 	db	0
  4368  00F734  44                 	db	68
  4369  00F735  52                 	db	82
  4370  00F736  55                 	db	85
  4371  00F737  4D                 	db	77
  4372  00F738  20                 	db	32
  4373  00F739  32                 	db	50
  4374  00F73A  20                 	db	32
  4375  00F73B  43                 	db	67
  4376  00F73C  43                 	db	67
  4377  00F73D  3A                 	db	58
  4378  00F73E  20                 	db	32
  4379  00F73F  00                 	db	0
  4380  00F740  00                 	db	0
  4381  00F741  00                 	db	0
  4382  00F742  00                 	db	0
  4383  00F743  00                 	db	0
  4384  00F744  00                 	db	0
  4385  00F745  44                 	db	68
  4386  00F746  52                 	db	82
  4387  00F747  55                 	db	85
  4388  00F748  4D                 	db	77
  4389  00F749  20                 	db	32
  4390  00F74A  33                 	db	51
  4391  00F74B  20                 	db	32
  4392  00F74C  43                 	db	67
  4393  00F74D  43                 	db	67
  4394  00F74E  3A                 	db	58
  4395  00F74F  20                 	db	32
  4396  00F750  00                 	db	0
  4397  00F751  00                 	db	0
  4398  00F752  00                 	db	0
  4399  00F753  00                 	db	0
  4400  00F754  00                 	db	0
  4401  00F755  00                 	db	0
  4402  00F756  44                 	db	68
  4403  00F757  52                 	db	82
  4404  00F758  55                 	db	85
  4405  00F759  4D                 	db	77
  4406  00F75A  20                 	db	32
  4407  00F75B  34                 	db	52
  4408  00F75C  20                 	db	32
  4409  00F75D  43                 	db	67
  4410  00F75E  43                 	db	67
  4411  00F75F  3A                 	db	58
  4412  00F760  20                 	db	32
  4413  00F761  00                 	db	0
  4414  00F762  00                 	db	0
  4415  00F763  00                 	db	0
  4416  00F764  00                 	db	0
  4417  00F765  00                 	db	0
  4418  00F766  00                 	db	0
  4419  00F767  44                 	db	68
  4420  00F768  52                 	db	82
  4421  00F769  55                 	db	85
  4422  00F76A  4D                 	db	77
  4423  00F76B  20                 	db	32
  4424  00F76C  35                 	db	53
  4425  00F76D  20                 	db	32
  4426  00F76E  43                 	db	67
  4427  00F76F  43                 	db	67
  4428  00F770  3A                 	db	58
  4429  00F771  20                 	db	32
  4430  00F772  00                 	db	0
  4431  00F773  00                 	db	0
  4432  00F774  00                 	db	0
  4433  00F775  00                 	db	0
  4434  00F776  00                 	db	0
  4435  00F777  00                 	db	0
  4436  00F778  44                 	db	68
  4437  00F779  52                 	db	82
  4438  00F77A  55                 	db	85
  4439  00F77B  4D                 	db	77
  4440  00F77C  20                 	db	32
  4441  00F77D  36                 	db	54
  4442  00F77E  20                 	db	32
  4443  00F77F  43                 	db	67
  4444  00F780  43                 	db	67
  4445  00F781  3A                 	db	58
  4446  00F782  20                 	db	32
  4447  00F783  00                 	db	0
  4448  00F784  00                 	db	0
  4449  00F785  00                 	db	0
  4450  00F786  00                 	db	0
  4451  00F787  00                 	db	0
  4452  00F788  00                 	db	0
  4453  00F789  44                 	db	68
  4454  00F78A  52                 	db	82
  4455  00F78B  55                 	db	85
  4456  00F78C  4D                 	db	77
  4457  00F78D  20                 	db	32
  4458  00F78E  37                 	db	55
  4459  00F78F  20                 	db	32
  4460  00F790  43                 	db	67
  4461  00F791  43                 	db	67
  4462  00F792  3A                 	db	58
  4463  00F793  20                 	db	32
  4464  00F794  00                 	db	0
  4465  00F795  00                 	db	0
  4466  00F796  00                 	db	0
  4467  00F797  00                 	db	0
  4468  00F798  00                 	db	0
  4469  00F799  00                 	db	0
  4470  00F79A  44                 	db	68
  4471  00F79B  52                 	db	82
  4472  00F79C  55                 	db	85
  4473  00F79D  4D                 	db	77
  4474  00F79E  20                 	db	32
  4475  00F79F  38                 	db	56
  4476  00F7A0  20                 	db	32
  4477  00F7A1  43                 	db	67
  4478  00F7A2  43                 	db	67
  4479  00F7A3  3A                 	db	58
  4480  00F7A4  20                 	db	32
  4481  00F7A5  00                 	db	0
  4482  00F7A6  00                 	db	0
  4483  00F7A7  00                 	db	0
  4484  00F7A8  00                 	db	0
  4485  00F7A9  00                 	db	0
  4486  00F7AA  00                 	db	0
  4487  00F7AB  50                 	db	80
  4488  00F7AC  4F                 	db	79
  4489  00F7AD  54                 	db	84
  4490  00F7AE  53                 	db	83
  4491  00F7AF  20                 	db	32
  4492  00F7B0  52                 	db	82
  4493  00F7B1  45                 	db	69
  4494  00F7B2  53                 	db	83
  4495  00F7B3  4F                 	db	79
  4496  00F7B4  4C                 	db	76
  4497  00F7B5  55                 	db	85
  4498  00F7B6  54                 	db	84
  4499  00F7B7  49                 	db	73
  4500  00F7B8  4F                 	db	79
  4501  00F7B9  4E                 	db	78
  4502  00F7BA  00                 	db	0
  4503  00F7BB  00                 	db	0
  4504  00F7BC  50                 	db	80
  4505  00F7BD  4F                 	db	79
  4506  00F7BE  54                 	db	84
  4507  00F7BF  53                 	db	83
  4508  00F7C0  20                 	db	32
  4509  00F7C1  41                 	db	65
  4510  00F7C2  4C                 	db	76
  4511  00F7C3  50                 	db	80
  4512  00F7C4  48                 	db	72
  4513  00F7C5  41                 	db	65
  4514  00F7C6  00                 	db	0
  4515  00F7C7  00                 	db	0
  4516  00F7C8  00                 	db	0
  4517  00F7C9  00                 	db	0
  4518  00F7CA  00                 	db	0
  4519  00F7CB  00                 	db	0
  4520  00F7CC  00                 	db	0
  4521  00F7CD  50                 	db	80
  4522  00F7CE  4F                 	db	79
  4523  00F7CF  54                 	db	84
  4524  00F7D0  53                 	db	83
  4525  00F7D1  20                 	db	32
  4526  00F7D2  53                 	db	83
  4527  00F7D3  45                 	db	69
  4528  00F7D4  54                 	db	84
  4529  00F7D5  20                 	db	32
  4530  00F7D6  43                 	db	67
  4531  00F7D7  43                 	db	67
  4532  00F7D8  23                 	db	35
  4533  00F7D9  00                 	db	0
  4534  00F7DA  00                 	db	0
  4535  00F7DB  00                 	db	0
  4536  00F7DC  00                 	db	0
  4537  00F7DD  00                 	db	0
  4538  00F7DE  53                 	db	83
  4539  00F7DF  4C                 	db	76
  4540  00F7E0  49                 	db	73
  4541  00F7E1  44                 	db	68
  4542  00F7E2  45                 	db	69
  4543  00F7E3  50                 	db	80
  4544  00F7E4  4F                 	db	79
  4545  00F7E5  54                 	db	84
  4546  00F7E6  20                 	db	32
  4547  00F7E7  53                 	db	83
  4548  00F7E8  45                 	db	69
  4549  00F7E9  54                 	db	84
  4550  00F7EA  20                 	db	32
  4551  00F7EB  43                 	db	67
  4552  00F7EC  43                 	db	67
  4553  00F7ED  23                 	db	35
  4554  00F7EE  00                 	db	0
  4555  00F7EF  4A                 	db	74
  4556  00F7F0  4F                 	db	79
  4557  00F7F1  59                 	db	89
  4558  00F7F2  53                 	db	83
  4559  00F7F3  54                 	db	84
  4560  00F7F4  49                 	db	73
  4561  00F7F5  43                 	db	67
  4562  00F7F6  4B                 	db	75
  4563  00F7F7  20                 	db	32
  4564  00F7F8  53                 	db	83
  4565  00F7F9  45                 	db	69
  4566  00F7FA  54                 	db	84
  4567  00F7FB  20                 	db	32
  4568  00F7FC  43                 	db	67
  4569  00F7FD  43                 	db	67
  4570  00F7FE  23                 	db	35
  4571  00F7FF  00                 	db	0
  4572  00F800  50                 	db	80
  4573  00F801  4F                 	db	79
  4574  00F802  54                 	db	84
  4575  00F803  53                 	db	83
  4576  00F804  20                 	db	32
  4577  00F805  4C                 	db	76
  4578  00F806  4F                 	db	79
  4579  00F807  20                 	db	32
  4580  00F808  52                 	db	82
  4581  00F809  45                 	db	69
  4582  00F80A  53                 	db	83
  4583  00F80B  00                 	db	0
  4584  00F80C  00                 	db	0
  4585  00F80D  00                 	db	0
  4586  00F80E  00                 	db	0
  4587  00F80F  00                 	db	0
  4588  00F810  00                 	db	0
  4589  00F811  50                 	db	80
  4590  00F812  4F                 	db	79
  4591  00F813  54                 	db	84
  4592  00F814  53                 	db	83
  4593  00F815  20                 	db	32
  4594  00F816  48                 	db	72
  4595  00F817  49                 	db	73
  4596  00F818  20                 	db	32
  4597  00F819  52                 	db	82
  4598  00F81A  45                 	db	69
  4599  00F81B  53                 	db	83
  4600  00F81C  00                 	db	0
  4601  00F81D  00                 	db	0
  4602  00F81E  00                 	db	0
  4603  00F81F  00                 	db	0
  4604  00F820  00                 	db	0
  4605  00F821  00                 	db	0
  4606  00F822  50                 	db	80
  4607  00F823  31                 	db	49
  4608  00F824  20                 	db	32
  4609  00F825  43                 	db	67
  4610  00F826  43                 	db	67
  4611  00F827  3A                 	db	58
  4612  00F828  00                 	db	0
  4613  00F829  00                 	db	0
  4614  00F82A  00                 	db	0
  4615  00F82B  00                 	db	0
  4616  00F82C  00                 	db	0
  4617  00F82D  00                 	db	0
  4618  00F82E  00                 	db	0
  4619  00F82F  00                 	db	0
  4620  00F830  00                 	db	0
  4621  00F831  00                 	db	0
  4622  00F832  00                 	db	0
  4623  00F833  50                 	db	80
  4624  00F834  32                 	db	50
  4625  00F835  20                 	db	32
  4626  00F836  43                 	db	67
  4627  00F837  43                 	db	67
  4628  00F838  3A                 	db	58
  4629  00F839  00                 	db	0
  4630  00F83A  00                 	db	0
  4631  00F83B  00                 	db	0
  4632  00F83C  00                 	db	0
  4633  00F83D  00                 	db	0
  4634  00F83E  00                 	db	0
  4635  00F83F  00                 	db	0
  4636  00F840  00                 	db	0
  4637  00F841  00                 	db	0
  4638  00F842  00                 	db	0
  4639  00F843  00                 	db	0
  4640  00F844  50                 	db	80
  4641  00F845  33                 	db	51
  4642  00F846  20                 	db	32
  4643  00F847  43                 	db	67
  4644  00F848  43                 	db	67
  4645  00F849  3A                 	db	58
  4646  00F84A  00                 	db	0
  4647  00F84B  00                 	db	0
  4648  00F84C  00                 	db	0
  4649  00F84D  00                 	db	0
  4650  00F84E  00                 	db	0
  4651  00F84F  00                 	db	0
  4652  00F850  00                 	db	0
  4653  00F851  00                 	db	0
  4654  00F852  00                 	db	0
  4655  00F853  00                 	db	0
  4656  00F854  00                 	db	0
  4657  00F855  50                 	db	80
  4658  00F856  34                 	db	52
  4659  00F857  20                 	db	32
  4660  00F858  43                 	db	67
  4661  00F859  43                 	db	67
  4662  00F85A  3A                 	db	58
  4663  00F85B  00                 	db	0
  4664  00F85C  00                 	db	0
  4665  00F85D  00                 	db	0
  4666  00F85E  00                 	db	0
  4667  00F85F  00                 	db	0
  4668  00F860  00                 	db	0
  4669  00F861  00                 	db	0
  4670  00F862  00                 	db	0
  4671  00F863  00                 	db	0
  4672  00F864  00                 	db	0
  4673  00F865  00                 	db	0
  4674  00F866  50                 	db	80
  4675  00F867  35                 	db	53
  4676  00F868  20                 	db	32
  4677  00F869  43                 	db	67
  4678  00F86A  43                 	db	67
  4679  00F86B  3A                 	db	58
  4680  00F86C  00                 	db	0
  4681  00F86D  00                 	db	0
  4682  00F86E  00                 	db	0
  4683  00F86F  00                 	db	0
  4684  00F870  00                 	db	0
  4685  00F871  00                 	db	0
  4686  00F872  00                 	db	0
  4687  00F873  00                 	db	0
  4688  00F874  00                 	db	0
  4689  00F875  00                 	db	0
  4690  00F876  00                 	db	0
  4691  00F877  50                 	db	80
  4692  00F878  36                 	db	54
  4693  00F879  20                 	db	32
  4694  00F87A  43                 	db	67
  4695  00F87B  43                 	db	67
  4696  00F87C  3A                 	db	58
  4697  00F87D  00                 	db	0
  4698  00F87E  00                 	db	0
  4699  00F87F  00                 	db	0
  4700  00F880  00                 	db	0
  4701  00F881  00                 	db	0
  4702  00F882  00                 	db	0
  4703  00F883  00                 	db	0
  4704  00F884  00                 	db	0
  4705  00F885  00                 	db	0
  4706  00F886  00                 	db	0
  4707  00F887  00                 	db	0
  4708  00F888  50                 	db	80
  4709  00F889  37                 	db	55
  4710  00F88A  20                 	db	32
  4711  00F88B  43                 	db	67
  4712  00F88C  43                 	db	67
  4713  00F88D  3A                 	db	58
  4714  00F88E  00                 	db	0
  4715  00F88F  00                 	db	0
  4716  00F890  00                 	db	0
  4717  00F891  00                 	db	0
  4718  00F892  00                 	db	0
  4719  00F893  00                 	db	0
  4720  00F894  00                 	db	0
  4721  00F895  00                 	db	0
  4722  00F896  00                 	db	0
  4723  00F897  00                 	db	0
  4724  00F898  00                 	db	0
  4725  00F899  53                 	db	83
  4726  00F89A  31                 	db	49
  4727  00F89B  20                 	db	32
  4728  00F89C  43                 	db	67
  4729  00F89D  43                 	db	67
  4730  00F89E  3A                 	db	58
  4731  00F89F  20                 	db	32
  4732  00F8A0  00                 	db	0
  4733  00F8A1  00                 	db	0
  4734  00F8A2  00                 	db	0
  4735  00F8A3  00                 	db	0
  4736  00F8A4  00                 	db	0
  4737  00F8A5  00                 	db	0
  4738  00F8A6  00                 	db	0
  4739  00F8A7  00                 	db	0
  4740  00F8A8  00                 	db	0
  4741  00F8A9  00                 	db	0
  4742  00F8AA  53                 	db	83
  4743  00F8AB  32                 	db	50
  4744  00F8AC  20                 	db	32
  4745  00F8AD  43                 	db	67
  4746  00F8AE  43                 	db	67
  4747  00F8AF  3A                 	db	58
  4748  00F8B0  20                 	db	32
  4749  00F8B1  00                 	db	0
  4750  00F8B2  00                 	db	0
  4751  00F8B3  00                 	db	0
  4752  00F8B4  00                 	db	0
  4753  00F8B5  00                 	db	0
  4754  00F8B6  00                 	db	0
  4755  00F8B7  00                 	db	0
  4756  00F8B8  00                 	db	0
  4757  00F8B9  00                 	db	0
  4758  00F8BA  00                 	db	0
  4759  00F8BB  53                 	db	83
  4760  00F8BC  33                 	db	51
  4761  00F8BD  20                 	db	32
  4762  00F8BE  43                 	db	67
  4763  00F8BF  43                 	db	67
  4764  00F8C0  3A                 	db	58
  4765  00F8C1  20                 	db	32
  4766  00F8C2  00                 	db	0
  4767  00F8C3  00                 	db	0
  4768  00F8C4  00                 	db	0
  4769  00F8C5  00                 	db	0
  4770  00F8C6  00                 	db	0
  4771  00F8C7  00                 	db	0
  4772  00F8C8  00                 	db	0
  4773  00F8C9  00                 	db	0
  4774  00F8CA  00                 	db	0
  4775  00F8CB  00                 	db	0
  4776  00F8CC  53                 	db	83
  4777  00F8CD  34                 	db	52
  4778  00F8CE  20                 	db	32
  4779  00F8CF  43                 	db	67
  4780  00F8D0  43                 	db	67
  4781  00F8D1  3A                 	db	58
  4782  00F8D2  20                 	db	32
  4783  00F8D3  00                 	db	0
  4784  00F8D4  00                 	db	0
  4785  00F8D5  00                 	db	0
  4786  00F8D6  00                 	db	0
  4787  00F8D7  00                 	db	0
  4788  00F8D8  00                 	db	0
  4789  00F8D9  00                 	db	0
  4790  00F8DA  00                 	db	0
  4791  00F8DB  00                 	db	0
  4792  00F8DC  00                 	db	0
  4793  00F8DD  53                 	db	83
  4794  00F8DE  35                 	db	53
  4795  00F8DF  20                 	db	32
  4796  00F8E0  43                 	db	67
  4797  00F8E1  43                 	db	67
  4798  00F8E2  3A                 	db	58
  4799  00F8E3  20                 	db	32
  4800  00F8E4  00                 	db	0
  4801  00F8E5  00                 	db	0
  4802  00F8E6  00                 	db	0
  4803  00F8E7  00                 	db	0
  4804  00F8E8  00                 	db	0
  4805  00F8E9  00                 	db	0
  4806  00F8EA  00                 	db	0
  4807  00F8EB  00                 	db	0
  4808  00F8EC  00                 	db	0
  4809  00F8ED  00                 	db	0
  4810  00F8EE  53                 	db	83
  4811  00F8EF  36                 	db	54
  4812  00F8F0  20                 	db	32
  4813  00F8F1  43                 	db	67
  4814  00F8F2  43                 	db	67
  4815  00F8F3  3A                 	db	58
  4816  00F8F4  20                 	db	32
  4817  00F8F5  00                 	db	0
  4818  00F8F6  00                 	db	0
  4819  00F8F7  00                 	db	0
  4820  00F8F8  00                 	db	0
  4821  00F8F9  00                 	db	0
  4822  00F8FA  00                 	db	0
  4823  00F8FB  00                 	db	0
  4824  00F8FC  00                 	db	0
  4825  00F8FD  00                 	db	0
  4826  00F8FE  00                 	db	0
  4827  00F8FF  53                 	db	83
  4828  00F900  37                 	db	55
  4829  00F901  20                 	db	32
  4830  00F902  43                 	db	67
  4831  00F903  43                 	db	67
  4832  00F904  3A                 	db	58
  4833  00F905  20                 	db	32
  4834  00F906  00                 	db	0
  4835  00F907  00                 	db	0
  4836  00F908  00                 	db	0
  4837  00F909  00                 	db	0
  4838  00F90A  00                 	db	0
  4839  00F90B  00                 	db	0
  4840  00F90C  00                 	db	0
  4841  00F90D  00                 	db	0
  4842  00F90E  00                 	db	0
  4843  00F90F  00                 	db	0
  4844  00F910  4A                 	db	74
  4845  00F911  58                 	db	88
  4846  00F912  20                 	db	32
  4847  00F913  43                 	db	67
  4848  00F914  43                 	db	67
  4849  00F915  3A                 	db	58
  4850  00F916  20                 	db	32
  4851  00F917  00                 	db	0
  4852  00F918  00                 	db	0
  4853  00F919  00                 	db	0
  4854  00F91A  00                 	db	0
  4855  00F91B  00                 	db	0
  4856  00F91C  00                 	db	0
  4857  00F91D  00                 	db	0
  4858  00F91E  00                 	db	0
  4859  00F91F  00                 	db	0
  4860  00F920  00                 	db	0
  4861  00F921  4A                 	db	74
  4862  00F922  59                 	db	89
  4863  00F923  20                 	db	32
  4864  00F924  43                 	db	67
  4865  00F925  43                 	db	67
  4866  00F926  3A                 	db	58
  4867  00F927  20                 	db	32
  4868  00F928  00                 	db	0
  4869  00F929  00                 	db	0
  4870  00F92A  00                 	db	0
  4871  00F92B  00                 	db	0
  4872  00F92C  00                 	db	0
  4873  00F92D  00                 	db	0
  4874  00F92E  00                 	db	0
  4875  00F92F  00                 	db	0
  4876  00F930  00                 	db	0
  4877  00F931  00                 	db	0
  4878  00F932  4D                 	db	77
  4879  00F933  61                 	db	97
  4880  00F934  69                 	db	105
  4881  00F935  6E                 	db	110
  4882  00F936  20                 	db	32
  4883  00F937  63                 	db	99
  4884  00F938  68                 	db	104
  4885  00F939  61                 	db	97
  4886  00F93A  6E                 	db	110
  4887  00F93B  6E                 	db	110
  4888  00F93C  65                 	db	101
  4889  00F93D  6C                 	db	108
  4890  00F93E  00                 	db	0
  4891  00F93F  00                 	db	0
  4892  00F940  00                 	db	0
  4893  00F941  00                 	db	0
  4894  00F942  00                 	db	0
  4895  00F943  44                 	db	68
  4896  00F944  72                 	db	114
  4897  00F945  75                 	db	117
  4898  00F946  6D                 	db	109
  4899  00F947  20                 	db	32
  4900  00F948  63                 	db	99
  4901  00F949  68                 	db	104
  4902  00F94A  61                 	db	97
  4903  00F94B  6E                 	db	110
  4904  00F94C  6E                 	db	110
  4905  00F94D  65                 	db	101
  4906  00F94E  6C                 	db	108
  4907  00F94F  00                 	db	0
  4908  00F950  00                 	db	0
  4909  00F951  00                 	db	0
  4910  00F952  00                 	db	0
  4911  00F953  00                 	db	0
  4912  00F954  53                 	db	83
  4913  00F955  61                 	db	97
  4914  00F956  76                 	db	118
  4915  00F957  65                 	db	101
  4916  00F958  20                 	db	32
  4917  00F959  73                 	db	115
  4918  00F95A  65                 	db	101
  4919  00F95B  74                 	db	116
  4920  00F95C  74                 	db	116
  4921  00F95D  69                 	db	105
  4922  00F95E  6E                 	db	110
  4923  00F95F  67                 	db	103
  4924  00F960  73                 	db	115
  4925  00F961  00                 	db	0
  4926  00F962  00                 	db	0
  4927  00F963  00                 	db	0
  4928  00F964  00                 	db	0
  4929  00F965  4C                 	db	76
  4930  00F966  6F                 	db	111
  4931  00F967  61                 	db	97
  4932  00F968  64                 	db	100
  4933  00F969  20                 	db	32
  4934  00F96A  73                 	db	115
  4935  00F96B  65                 	db	101
  4936  00F96C  74                 	db	116
  4937  00F96D  74                 	db	116
  4938  00F96E  69                 	db	105
  4939  00F96F  6E                 	db	110
  4940  00F970  67                 	db	103
  4941  00F971  73                 	db	115
  4942  00F972  00                 	db	0
  4943  00F973  00                 	db	0
  4944  00F974  00                 	db	0
  4945  00F975  00                 	db	0
  4946  00F976  52                 	db	82
  4947  00F977  65                 	db	101
  4948  00F978  73                 	db	115
  4949  00F979  74                 	db	116
  4950  00F97A  6F                 	db	111
  4951  00F97B  72                 	db	114
  4952  00F97C  65                 	db	101
  4953  00F97D  20                 	db	32
  4954  00F97E  64                 	db	100
  4955  00F97F  65                 	db	101
  4956  00F980  66                 	db	102
  4957  00F981  61                 	db	97
  4958  00F982  75                 	db	117
  4959  00F983  6C                 	db	108
  4960  00F984  74                 	db	116
  4961  00F985  73                 	db	115
  4962  00F986  00                 	db	0
  4963  00F987  45                 	db	69
  4964  00F988  6E                 	db	110
  4965  00F989  63                 	db	99
  4966  00F98A  6F                 	db	111
  4967  00F98B  64                 	db	100
  4968  00F98C  65                 	db	101
  4969  00F98D  72                 	db	114
  4970  00F98E  20                 	db	32
  4971  00F98F  50                 	db	80
  4972  00F990  6F                 	db	111
  4973  00F991  6C                 	db	108
  4974  00F992  61                 	db	97
  4975  00F993  72                 	db	114
  4976  00F994  69                 	db	105
  4977  00F995  74                 	db	116
  4978  00F996  79                 	db	121
  4979  00F997  00                 	db	0
  4980  00F998  45                 	db	69
  4981  00F999  78                 	db	120
  4982  00F99A  69                 	db	105
  4983  00F99B  74                 	db	116
  4984  00F99C  00                 	db	0
  4985  00F99D  00                 	db	0
  4986  00F99E  00                 	db	0
  4987  00F99F  00                 	db	0
  4988  00F9A0  00                 	db	0
  4989  00F9A1  00                 	db	0
  4990  00F9A2  00                 	db	0
  4991  00F9A3  00                 	db	0
  4992  00F9A4  00                 	db	0
  4993  00F9A5  00                 	db	0
  4994  00F9A6  00                 	db	0
  4995  00F9A7  00                 	db	0
  4996  00F9A8  00                 	db	0
  4997  00F9A9  53                 	db	83
  4998  00F9AA  6C                 	db	108
  4999  00F9AB  6F                 	db	111
  5000  00F9AC  74                 	db	116
  5001  00F9AD  20                 	db	32
  5002  00F9AE  31                 	db	49
  5003  00F9AF  00                 	db	0
  5004  00F9B0  00                 	db	0
  5005  00F9B1  00                 	db	0
  5006  00F9B2  00                 	db	0
  5007  00F9B3  00                 	db	0
  5008  00F9B4  00                 	db	0
  5009  00F9B5  00                 	db	0
  5010  00F9B6  00                 	db	0
  5011  00F9B7  00                 	db	0
  5012  00F9B8  00                 	db	0
  5013  00F9B9  00                 	db	0
  5014  00F9BA  53                 	db	83
  5015  00F9BB  6C                 	db	108
  5016  00F9BC  6F                 	db	111
  5017  00F9BD  74                 	db	116
  5018  00F9BE  20                 	db	32
  5019  00F9BF  32                 	db	50
  5020  00F9C0  00                 	db	0
  5021  00F9C1  00                 	db	0
  5022  00F9C2  00                 	db	0
  5023  00F9C3  00                 	db	0
  5024  00F9C4  00                 	db	0
  5025  00F9C5  00                 	db	0
  5026  00F9C6  00                 	db	0
  5027  00F9C7  00                 	db	0
  5028  00F9C8  00                 	db	0
  5029  00F9C9  00                 	db	0
  5030  00F9CA  00                 	db	0
  5031  00F9CB  53                 	db	83
  5032  00F9CC  6C                 	db	108
  5033  00F9CD  6F                 	db	111
  5034  00F9CE  74                 	db	116
  5035  00F9CF  20                 	db	32
  5036  00F9D0  33                 	db	51
  5037  00F9D1  00                 	db	0
  5038  00F9D2  00                 	db	0
  5039  00F9D3  00                 	db	0
  5040  00F9D4  00                 	db	0
  5041  00F9D5  00                 	db	0
  5042  00F9D6  00                 	db	0
  5043  00F9D7  00                 	db	0
  5044  00F9D8  00                 	db	0
  5045  00F9D9  00                 	db	0
  5046  00F9DA  00                 	db	0
  5047  00F9DB  00                 	db	0
  5048  00F9DC  53                 	db	83
  5049  00F9DD  6C                 	db	108
  5050  00F9DE  6F                 	db	111
  5051  00F9DF  74                 	db	116
  5052  00F9E0  20                 	db	32
  5053  00F9E1  34                 	db	52
  5054  00F9E2  00                 	db	0
  5055  00F9E3  00                 	db	0
  5056  00F9E4  00                 	db	0
  5057  00F9E5  00                 	db	0
  5058  00F9E6  00                 	db	0
  5059  00F9E7  00                 	db	0
  5060  00F9E8  00                 	db	0
  5061  00F9E9  00                 	db	0
  5062  00F9EA  00                 	db	0
  5063  00F9EB  00                 	db	0
  5064  00F9EC  00                 	db	0
  5065  00F9ED  45                 	db	69
  5066  00F9EE  78                 	db	120
  5067  00F9EF  69                 	db	105
  5068  00F9F0  74                 	db	116
  5069  00F9F1  00                 	db	0
  5070  00F9F2  00                 	db	0
  5071  00F9F3  00                 	db	0
  5072  00F9F4  00                 	db	0
  5073  00F9F5  00                 	db	0
  5074  00F9F6  00                 	db	0
  5075  00F9F7  00                 	db	0
  5076  00F9F8  00                 	db	0
  5077  00F9F9  00                 	db	0
  5078  00F9FA  00                 	db	0
  5079  00F9FB  00                 	db	0
  5080  00F9FC  00                 	db	0
  5081  00F9FD  00                 	db	0
  5082  00F9FE  43                 	db	67
  5083  00F9FF  57                 	db	87
  5084  00FA00  20                 	db	32
  5085  00FA01  49                 	db	73
  5086  00FA02  53                 	db	83
  5087  00FA03  20                 	db	32
  5088  00FA04  49                 	db	73
  5089  00FA05  4E                 	db	78
  5090  00FA06  43                 	db	67
  5091  00FA07  52                 	db	82
  5092  00FA08  45                 	db	69
  5093  00FA09  41                 	db	65
  5094  00FA0A  53                 	db	83
  5095  00FA0B  45                 	db	69
  5096  00FA0C  00                 	db	0
  5097  00FA0D  00                 	db	0
  5098  00FA0E  00                 	db	0
  5099  00FA0F  43                 	db	67
  5100  00FA10  43                 	db	67
  5101  00FA11  57                 	db	87
  5102  00FA12  20                 	db	32
  5103  00FA13  49                 	db	73
  5104  00FA14  53                 	db	83
  5105  00FA15  20                 	db	32
  5106  00FA16  49                 	db	73
  5107  00FA17  4E                 	db	78
  5108  00FA18  43                 	db	67
  5109  00FA19  52                 	db	82
  5110  00FA1A  45                 	db	69
  5111  00FA1B  41                 	db	65
  5112  00FA1C  53                 	db	83
  5113  00FA1D  45                 	db	69
  5114  00FA1E  00                 	db	0
  5115  00FA1F  00                 	db	0
  5116  00FA20  41                 	db	65
  5117  00FA21  72                 	db	114
  5118  00FA22  70                 	db	112
  5119  00FA23  65                 	db	101
  5120  00FA24  67                 	db	103
  5121  00FA25  67                 	db	103
  5122  00FA26  69                 	db	105
  5123  00FA27  6F                 	db	111
  5124  00FA28  20                 	db	32
  5125  00FA29  4F                 	db	79
  5126  00FA2A  46                 	db	70
  5127  00FA2B  46                 	db	70
  5128  00FA2C  2F                 	db	47
  5129  00FA2D  4F                 	db	79
  5130  00FA2E  4E                 	db	78
  5131  00FA2F  00                 	db	0
  5132  00FA30  00                 	db	0
  5133  00FA31  54                 	db	84
  5134  00FA32  65                 	db	101
  5135  00FA33  6D                 	db	109
  5136  00FA34  70                 	db	112
  5137  00FA35  6F                 	db	111
  5138  00FA36  00                 	db	0
  5139  00FA37  00                 	db	0
  5140  00FA38  00                 	db	0
  5141  00FA39  00                 	db	0
  5142  00FA3A  00                 	db	0
  5143  00FA3B  00                 	db	0
  5144  00FA3C  00                 	db	0
  5145  00FA3D  00                 	db	0
  5146  00FA3E  00                 	db	0
  5147  00FA3F  00                 	db	0
  5148  00FA40  00                 	db	0
  5149  00FA41  00                 	db	0
  5150  00FA42  4F                 	db	79
  5151  00FA43  63                 	db	99
  5152  00FA44  74                 	db	116
  5153  00FA45  61                 	db	97
  5154  00FA46  76                 	db	118
  5155  00FA47  65                 	db	101
  5156  00FA48  20                 	db	32
  5157  00FA49  52                 	db	82
  5158  00FA4A  61                 	db	97
  5159  00FA4B  6E                 	db	110
  5160  00FA4C  67                 	db	103
  5161  00FA4D  65                 	db	101
  5162  00FA4E  00                 	db	0
  5163  00FA4F  00                 	db	0
  5164  00FA50  00                 	db	0
  5165  00FA51  00                 	db	0
  5166  00FA52  00                 	db	0
  5167  00FA53  41                 	db	65
  5168  00FA54  72                 	db	114
  5169  00FA55  70                 	db	112
  5170  00FA56  65                 	db	101
  5171  00FA57  67                 	db	103
  5172  00FA58  67                 	db	103
  5173  00FA59  69                 	db	105
  5174  00FA5A  6F                 	db	111
  5175  00FA5B  20                 	db	32
  5176  00FA5C  54                 	db	84
  5177  00FA5D  79                 	db	121
  5178  00FA5E  70                 	db	112
  5179  00FA5F  65                 	db	101
  5180  00FA60  00                 	db	0
  5181  00FA61  00                 	db	0
  5182  00FA62  00                 	db	0
  5183  00FA63  00                 	db	0
  5184  00FA64  4E                 	db	78
  5185  00FA65  6F                 	db	111
  5186  00FA66  74                 	db	116
  5187  00FA67  65                 	db	101
  5188  00FA68  20                 	db	32
  5189  00FA69  4C                 	db	76
  5190  00FA6A  65                 	db	101
  5191  00FA6B  6E                 	db	110
  5192  00FA6C  67                 	db	103
  5193  00FA6D  74                 	db	116
  5194  00FA6E  68                 	db	104
  5195  00FA6F  00                 	db	0
  5196  00FA70  00                 	db	0
  5197  00FA71  00                 	db	0
  5198  00FA72  00                 	db	0
  5199  00FA73  00                 	db	0
  5200  00FA74  00                 	db	0
  5201  00FA75  4C                 	db	76
  5202  00FA76  61                 	db	97
  5203  00FA77  74                 	db	116
  5204  00FA78  63                 	db	99
  5205  00FA79  68                 	db	104
  5206  00FA7A  2F                 	db	47
  5207  00FA7B  41                 	db	65
  5208  00FA7C  75                 	db	117
  5209  00FA7D  74                 	db	116
  5210  00FA7E  6F                 	db	111
  5211  00FA7F  20                 	db	32
  5212  00FA80  4C                 	db	76
  5213  00FA81  61                 	db	97
  5214  00FA82  74                 	db	116
  5215  00FA83  63                 	db	99
  5216  00FA84  68                 	db	104
  5217  00FA85  00                 	db	0
  5218  00FA86  55                 	db	85
  5219  00FA87  6E                 	db	110
  5220  00FA88  2D                 	db	45
  5221  00FA89  6C                 	db	108
  5222  00FA8A  61                 	db	97
  5223  00FA8B  74                 	db	116
  5224  00FA8C  63                 	db	99
  5225  00FA8D  68                 	db	104
  5226  00FA8E  20                 	db	32
  5227  00FA8F  4D                 	db	77
  5228  00FA90  6F                 	db	111
  5229  00FA91  64                 	db	100
  5230  00FA92  65                 	db	101
  5231  00FA93  00                 	db	0
  5232  00FA94  00                 	db	0
  5233  00FA95  00                 	db	0
  5234  00FA96  00                 	db	0
  5235  00FA97  52                 	db	82
  5236  00FA98  61                 	db	97
  5237  00FA99  6E                 	db	110
  5238  00FA9A  64                 	db	100
  5239  00FA9B  6F                 	db	111
  5240  00FA9C  6D                 	db	109
  5241  00FA9D  69                 	db	105
  5242  00FA9E  7A                 	db	122
  5243  00FA9F  65                 	db	101
  5244  00FAA0  2F                 	db	47
  5245  00FAA1  53                 	db	83
  5246  00FAA2  6B                 	db	107
  5247  00FAA3  69                 	db	105
  5248  00FAA4  70                 	db	112
  5249  00FAA5  00                 	db	0
  5250  00FAA6  00                 	db	0
  5251  00FAA7  00                 	db	0
  5252  00FAA8  4C                 	db	76
  5253  00FAA9  61                 	db	97
  5254  00FAAA  73                 	db	115
  5255  00FAAB  74                 	db	116
  5256  00FAAC  20                 	db	32
  5257  00FAAD  4E                 	db	78
  5258  00FAAE  6F                 	db	111
  5259  00FAAF  74                 	db	116
  5260  00FAB0  65                 	db	101
  5261  00FAB1  20                 	db	32
  5262  00FAB2  4D                 	db	77
  5263  00FAB3  6F                 	db	111
  5264  00FAB4  64                 	db	100
  5265  00FAB5  65                 	db	101
  5266  00FAB6  00                 	db	0
  5267  00FAB7  00                 	db	0
  5268  00FAB8  00                 	db	0
  5269  00FAB9  41                 	db	65
  5270  00FABA  52                 	db	82
  5271  00FABB  50                 	db	80
  5272  00FABC  45                 	db	69
  5273  00FABD  47                 	db	71
  5274  00FABE  47                 	db	71
  5275  00FABF  49                 	db	73
  5276  00FAC0  41                 	db	65
  5277  00FAC1  54                 	db	84
  5278  00FAC2  4F                 	db	79
  5279  00FAC3  52                 	db	82
  5280  00FAC4  20                 	db	32
  5281  00FAC5  4F                 	db	79
  5282  00FAC6  46                 	db	70
  5283  00FAC7  46                 	db	70
  5284  00FAC8  00                 	db	0
  5285  00FAC9  00                 	db	0
  5286  00FACA  41                 	db	65
  5287  00FACB  52                 	db	82
  5288  00FACC  50                 	db	80
  5289  00FACD  45                 	db	69
  5290  00FACE  47                 	db	71
  5291  00FACF  47                 	db	71
  5292  00FAD0  49                 	db	73
  5293  00FAD1  41                 	db	65
  5294  00FAD2  54                 	db	84
  5295  00FAD3  4F                 	db	79
  5296  00FAD4  52                 	db	82
  5297  00FAD5  20                 	db	32
  5298  00FAD6  4F                 	db	79
  5299  00FAD7  4E                 	db	78
  5300  00FAD8  00                 	db	0
  5301  00FAD9  00                 	db	0
  5302  00FADA  00                 	db	0
  5303  00FADB  55                 	db	85
  5304  00FADC  50                 	db	80
  5305  00FADD  00                 	db	0
  5306  00FADE  00                 	db	0
  5307  00FADF  00                 	db	0
  5308  00FAE0  00                 	db	0
  5309  00FAE1  00                 	db	0
  5310  00FAE2  00                 	db	0
  5311  00FAE3  00                 	db	0
  5312  00FAE4  00                 	db	0
  5313  00FAE5  00                 	db	0
  5314  00FAE6  00                 	db	0
  5315  00FAE7  00                 	db	0
  5316  00FAE8  00                 	db	0
  5317  00FAE9  00                 	db	0
  5318  00FAEA  00                 	db	0
  5319  00FAEB  00                 	db	0
  5320  00FAEC  44                 	db	68
  5321  00FAED  4F                 	db	79
  5322  00FAEE  57                 	db	87
  5323  00FAEF  4E                 	db	78
  5324  00FAF0  00                 	db	0
  5325  00FAF1  00                 	db	0
  5326  00FAF2  00                 	db	0
  5327  00FAF3  00                 	db	0
  5328  00FAF4  00                 	db	0
  5329  00FAF5  00                 	db	0
  5330  00FAF6  00                 	db	0
  5331  00FAF7  00                 	db	0
  5332  00FAF8  00                 	db	0
  5333  00FAF9  00                 	db	0
  5334  00FAFA  00                 	db	0
  5335  00FAFB  00                 	db	0
  5336  00FAFC  00                 	db	0
  5337  00FAFD  55                 	db	85
  5338  00FAFE  50                 	db	80
  5339  00FAFF  2F                 	db	47
  5340  00FB00  44                 	db	68
  5341  00FB01  4F                 	db	79
  5342  00FB02  57                 	db	87
  5343  00FB03  4E                 	db	78
  5344  00FB04  00                 	db	0
  5345  00FB05  00                 	db	0
  5346  00FB06  00                 	db	0
  5347  00FB07  00                 	db	0
  5348  00FB08  00                 	db	0
  5349  00FB09  00                 	db	0
  5350  00FB0A  00                 	db	0
  5351  00FB0B  00                 	db	0
  5352  00FB0C  00                 	db	0
  5353  00FB0D  00                 	db	0
  5354  00FB0E  44                 	db	68
  5355  00FB0F  4F                 	db	79
  5356  00FB10  57                 	db	87
  5357  00FB11  4E                 	db	78
  5358  00FB12  2F                 	db	47
  5359  00FB13  55                 	db	85
  5360  00FB14  50                 	db	80
  5361  00FB15  00                 	db	0
  5362  00FB16  00                 	db	0
  5363  00FB17  00                 	db	0
  5364  00FB18  00                 	db	0
  5365  00FB19  00                 	db	0
  5366  00FB1A  00                 	db	0
  5367  00FB1B  00                 	db	0
  5368  00FB1C  00                 	db	0
  5369  00FB1D  00                 	db	0
  5370  00FB1E  00                 	db	0
  5371  00FB1F  53                 	db	83
  5372  00FB20  48                 	db	72
  5373  00FB21  55                 	db	85
  5374  00FB22  46                 	db	70
  5375  00FB23  46                 	db	70
  5376  00FB24  4C                 	db	76
  5377  00FB25  45                 	db	69
  5378  00FB26  00                 	db	0
  5379  00FB27  00                 	db	0
  5380  00FB28  00                 	db	0
  5381  00FB29  00                 	db	0
  5382  00FB2A  00                 	db	0
  5383  00FB2B  00                 	db	0
  5384  00FB2C  00                 	db	0
  5385  00FB2D  00                 	db	0
  5386  00FB2E  00                 	db	0
  5387  00FB2F  00                 	db	0
  5388  00FB30  52                 	db	82
  5389  00FB31  41                 	db	65
  5390  00FB32  4E                 	db	78
  5391  00FB33  44                 	db	68
  5392  00FB34  4F                 	db	79
  5393  00FB35  4D                 	db	77
  5394  00FB36  00                 	db	0
  5395  00FB37  00                 	db	0
  5396  00FB38  00                 	db	0
  5397  00FB39  00                 	db	0
  5398  00FB3A  00                 	db	0
  5399  00FB3B  00                 	db	0
  5400  00FB3C  00                 	db	0
  5401  00FB3D  00                 	db	0
  5402  00FB3E  00                 	db	0
  5403  00FB3F  00                 	db	0
  5404  00FB40  00                 	db	0
  5405  00FB41  41                 	db	65
  5406  00FB42  53                 	db	83
  5407  00FB43  20                 	db	32
  5408  00FB44  50                 	db	80
  5409  00FB45  52                 	db	82
  5410  00FB46  45                 	db	69
  5411  00FB47  53                 	db	83
  5412  00FB48  53                 	db	83
  5413  00FB49  45                 	db	69
  5414  00FB4A  44                 	db	68
  5415  00FB4B  00                 	db	0
  5416  00FB4C  00                 	db	0
  5417  00FB4D  00                 	db	0
  5418  00FB4E  00                 	db	0
  5419  00FB4F  00                 	db	0
  5420  00FB50  00                 	db	0
  5421  00FB51  00                 	db	0
  5422  00FB52  31                 	db	49
  5423  00FB53  2F                 	db	47
  5424  00FB54  34                 	db	52
  5425  00FB55  00                 	db	0
  5426  00FB56  00                 	db	0
  5427  00FB57  00                 	db	0
  5428  00FB58  00                 	db	0
  5429  00FB59  00                 	db	0
  5430  00FB5A  00                 	db	0
  5431  00FB5B  00                 	db	0
  5432  00FB5C  00                 	db	0
  5433  00FB5D  00                 	db	0
  5434  00FB5E  00                 	db	0
  5435  00FB5F  00                 	db	0
  5436  00FB60  00                 	db	0
  5437  00FB61  00                 	db	0
  5438  00FB62  00                 	db	0
  5439  00FB63  31                 	db	49
  5440  00FB64  2F                 	db	47
  5441  00FB65  34                 	db	52
  5442  00FB66  20                 	db	32
  5443  00FB67  44                 	db	68
  5444  00FB68  4F                 	db	79
  5445  00FB69  54                 	db	84
  5446  00FB6A  54                 	db	84
  5447  00FB6B  45                 	db	69
  5448  00FB6C  44                 	db	68
  5449  00FB6D  00                 	db	0
  5450  00FB6E  00                 	db	0
  5451  00FB6F  00                 	db	0
  5452  00FB70  00                 	db	0
  5453  00FB71  00                 	db	0
  5454  00FB72  00                 	db	0
  5455  00FB73  00                 	db	0
  5456  00FB74  31                 	db	49
  5457  00FB75  2F                 	db	47
  5458  00FB76  34                 	db	52
  5459  00FB77  20                 	db	32
  5460  00FB78  54                 	db	84
  5461  00FB79  52                 	db	82
  5462  00FB7A  49                 	db	73
  5463  00FB7B  50                 	db	80
  5464  00FB7C  4C                 	db	76
  5465  00FB7D  45                 	db	69
  5466  00FB7E  54                 	db	84
  5467  00FB7F  00                 	db	0
  5468  00FB80  00                 	db	0
  5469  00FB81  00                 	db	0
  5470  00FB82  00                 	db	0
  5471  00FB83  00                 	db	0
  5472  00FB84  00                 	db	0
  5473  00FB85  31                 	db	49
  5474  00FB86  2F                 	db	47
  5475  00FB87  38                 	db	56
  5476  00FB88  00                 	db	0
  5477  00FB89  00                 	db	0
  5478  00FB8A  00                 	db	0
  5479  00FB8B  00                 	db	0
  5480  00FB8C  00                 	db	0
  5481  00FB8D  00                 	db	0
  5482  00FB8E  00                 	db	0
  5483  00FB8F  00                 	db	0
  5484  00FB90  00                 	db	0
  5485  00FB91  00                 	db	0
  5486  00FB92  00                 	db	0
  5487  00FB93  00                 	db	0
  5488  00FB94  00                 	db	0
  5489  00FB95  00                 	db	0
  5490  00FB96  31                 	db	49
  5491  00FB97  2F                 	db	47
  5492  00FB98  38                 	db	56
  5493  00FB99  20                 	db	32
  5494  00FB9A  44                 	db	68
  5495  00FB9B  4F                 	db	79
  5496  00FB9C  54                 	db	84
  5497  00FB9D  54                 	db	84
  5498  00FB9E  45                 	db	69
  5499  00FB9F  44                 	db	68
  5500  00FBA0  00                 	db	0
  5501  00FBA1  00                 	db	0
  5502  00FBA2  00                 	db	0
  5503  00FBA3  00                 	db	0
  5504  00FBA4  00                 	db	0
  5505  00FBA5  00                 	db	0
  5506  00FBA6  00                 	db	0
  5507  00FBA7  31                 	db	49
  5508  00FBA8  2F                 	db	47
  5509  00FBA9  38                 	db	56
  5510  00FBAA  20                 	db	32
  5511  00FBAB  54                 	db	84
  5512  00FBAC  52                 	db	82
  5513  00FBAD  49                 	db	73
  5514  00FBAE  50                 	db	80
  5515  00FBAF  4C                 	db	76
  5516  00FBB0  45                 	db	69
  5517  00FBB1  54                 	db	84
  5518  00FBB2  00                 	db	0
  5519  00FBB3  00                 	db	0
  5520  00FBB4  00                 	db	0
  5521  00FBB5  00                 	db	0
  5522  00FBB6  00                 	db	0
  5523  00FBB7  00                 	db	0
  5524  00FBB8  31                 	db	49
  5525  00FBB9  2F                 	db	47
  5526  00FBBA  31                 	db	49
  5527  00FBBB  36                 	db	54
  5528  00FBBC  00                 	db	0
  5529  00FBBD  00                 	db	0
  5530  00FBBE  00                 	db	0
  5531  00FBBF  00                 	db	0
  5532  00FBC0  00                 	db	0
  5533  00FBC1  00                 	db	0
  5534  00FBC2  00                 	db	0
  5535  00FBC3  00                 	db	0
  5536  00FBC4  00                 	db	0
  5537  00FBC5  00                 	db	0
  5538  00FBC6  00                 	db	0
  5539  00FBC7  00                 	db	0
  5540  00FBC8  00                 	db	0
  5541  00FBC9  31                 	db	49
  5542  00FBCA  2F                 	db	47
  5543  00FBCB  31                 	db	49
  5544  00FBCC  36                 	db	54
  5545  00FBCD  20                 	db	32
  5546  00FBCE  44                 	db	68
  5547  00FBCF  4F                 	db	79
  5548  00FBD0  54                 	db	84
  5549  00FBD1  54                 	db	84
  5550  00FBD2  45                 	db	69
  5551  00FBD3  44                 	db	68
  5552  00FBD4  00                 	db	0
  5553  00FBD5  00                 	db	0
  5554  00FBD6  00                 	db	0
  5555  00FBD7  00                 	db	0
  5556  00FBD8  00                 	db	0
  5557  00FBD9  00                 	db	0
  5558  00FBDA  31                 	db	49
  5559  00FBDB  2F                 	db	47
  5560  00FBDC  31                 	db	49
  5561  00FBDD  36                 	db	54
  5562  00FBDE  20                 	db	32
  5563  00FBDF  54                 	db	84
  5564  00FBE0  52                 	db	82
  5565  00FBE1  49                 	db	73
  5566  00FBE2  50                 	db	80
  5567  00FBE3  4C                 	db	76
  5568  00FBE4  45                 	db	69
  5569  00FBE5  54                 	db	84
  5570  00FBE6  00                 	db	0
  5571  00FBE7  00                 	db	0
  5572  00FBE8  00                 	db	0
  5573  00FBE9  00                 	db	0
  5574  00FBEA  00                 	db	0
  5575  00FBEB  31                 	db	49
  5576  00FBEC  2F                 	db	47
  5577  00FBED  33                 	db	51
  5578  00FBEE  32                 	db	50
  5579  00FBEF  00                 	db	0
  5580  00FBF0  00                 	db	0
  5581  00FBF1  00                 	db	0
  5582  00FBF2  00                 	db	0
  5583  00FBF3  00                 	db	0
  5584  00FBF4  00                 	db	0
  5585  00FBF5  00                 	db	0
  5586  00FBF6  00                 	db	0
  5587  00FBF7  00                 	db	0
  5588  00FBF8  00                 	db	0
  5589  00FBF9  00                 	db	0
  5590  00FBFA  00                 	db	0
  5591  00FBFB  00                 	db	0
  5592  00FBFC  31                 	db	49
  5593  00FBFD  2F                 	db	47
  5594  00FBFE  33                 	db	51
  5595  00FBFF  32                 	db	50
  5596  00FC00  20                 	db	32
  5597  00FC01  44                 	db	68
  5598  00FC02  4F                 	db	79
  5599  00FC03  54                 	db	84
  5600  00FC04  54                 	db	84
  5601  00FC05  45                 	db	69
  5602  00FC06  44                 	db	68
  5603  00FC07  00                 	db	0
  5604  00FC08  00                 	db	0
  5605  00FC09  00                 	db	0
  5606  00FC0A  00                 	db	0
  5607  00FC0B  00                 	db	0
  5608  00FC0C  00                 	db	0
  5609  00FC0D  31                 	db	49
  5610  00FC0E  2F                 	db	47
  5611  00FC0F  33                 	db	51
  5612  00FC10  32                 	db	50
  5613  00FC11  20                 	db	32
  5614  00FC12  54                 	db	84
  5615  00FC13  52                 	db	82
  5616  00FC14  49                 	db	73
  5617  00FC15  50                 	db	80
  5618  00FC16  4C                 	db	76
  5619  00FC17  45                 	db	69
  5620  00FC18  54                 	db	84
  5621  00FC19  00                 	db	0
  5622  00FC1A  00                 	db	0
  5623  00FC1B  00                 	db	0
  5624  00FC1C  00                 	db	0
  5625  00FC1D  00                 	db	0
  5626  00FC1E  53                 	db	83
  5627  00FC1F  45                 	db	69
  5628  00FC20  54                 	db	84
  5629  00FC21  2F                 	db	47
  5630  00FC22  43                 	db	67
  5631  00FC23  4C                 	db	76
  5632  00FC24  45                 	db	69
  5633  00FC25  41                 	db	65
  5634  00FC26  52                 	db	82
  5635  00FC27  20                 	db	32
  5636  00FC28  4C                 	db	76
  5637  00FC29  41                 	db	65
  5638  00FC2A  54                 	db	84
  5639  00FC2B  43                 	db	67
  5640  00FC2C  48                 	db	72
  5641  00FC2D  00                 	db	0
  5642  00FC2E  00                 	db	0
  5643  00FC2F  41                 	db	65
  5644  00FC30  55                 	db	85
  5645  00FC31  54                 	db	84
  5646  00FC32  4F                 	db	79
  5647  00FC33  20                 	db	32
  5648  00FC34  4C                 	db	76
  5649  00FC35  41                 	db	65
  5650  00FC36  54                 	db	84
  5651  00FC37  43                 	db	67
  5652  00FC38  48                 	db	72
  5653  00FC39  00                 	db	0
  5654  00FC3A  00                 	db	0
  5655  00FC3B  00                 	db	0
  5656  00FC3C  00                 	db	0
  5657  00FC3D  00                 	db	0
  5658  00FC3E  00                 	db	0
  5659  00FC3F  00                 	db	0
  5660  00FC40  55                 	db	85
  5661  00FC41  6E                 	db	110
  5662  00FC42  2D                 	db	45
  5663  00FC43  4C                 	db	76
  5664  00FC44  61                 	db	97
  5665  00FC45  74                 	db	116
  5666  00FC46  63                 	db	99
  5667  00FC47  68                 	db	104
  5668  00FC48  20                 	db	32
  5669  00FC49  4D                 	db	77
  5670  00FC4A  6F                 	db	111
  5671  00FC4B  64                 	db	100
  5672  00FC4C  65                 	db	101
  5673  00FC4D  00                 	db	0
  5674  00FC4E  00                 	db	0
  5675  00FC4F  00                 	db	0
  5676  00FC50  00                 	db	0
  5677  00FC51  55                 	db	85
  5678  00FC52  4E                 	db	78
  5679  00FC53  4C                 	db	76
  5680  00FC54  41                 	db	65
  5681  00FC55  54                 	db	84
  5682  00FC56  43                 	db	67
  5683  00FC57  48                 	db	72
  5684  00FC58  20                 	db	32
  5685  00FC59  41                 	db	65
  5686  00FC5A  4C                 	db	76
  5687  00FC5B  4C                 	db	76
  5688  00FC5C  00                 	db	0
  5689  00FC5D  00                 	db	0
  5690  00FC5E  00                 	db	0
  5691  00FC5F  00                 	db	0
  5692  00FC60  00                 	db	0
  5693  00FC61  00                 	db	0
  5694  00FC62  4F                 	db	79
  5695  00FC63  4E                 	db	78
  5696  00FC64  45                 	db	69
  5697  00FC65  20                 	db	32
  5698  00FC66  41                 	db	65
  5699  00FC67  54                 	db	84
  5700  00FC68  20                 	db	32
  5701  00FC69  41                 	db	65
  5702  00FC6A  20                 	db	32
  5703  00FC6B  54                 	db	84
  5704  00FC6C  49                 	db	73
  5705  00FC6D  4D                 	db	77
  5706  00FC6E  45                 	db	69
  5707  00FC6F  00                 	db	0
  5708  00FC70  00                 	db	0
  5709  00FC71  00                 	db	0
  5710  00FC72  00                 	db	0
  5711  00FC73  52                 	db	82
  5712  00FC74  61                 	db	97
  5713  00FC75  6E                 	db	110
  5714  00FC76  64                 	db	100
  5715  00FC77  6F                 	db	111
  5716  00FC78  6D                 	db	109
  5717  00FC79  69                 	db	105
  5718  00FC7A  7A                 	db	122
  5719  00FC7B  65                 	db	101
  5720  00FC7C  00                 	db	0
  5721  00FC7D  00                 	db	0
  5722  00FC7E  00                 	db	0
  5723  00FC7F  00                 	db	0
  5724  00FC80  00                 	db	0
  5725  00FC81  00                 	db	0
  5726  00FC82  00                 	db	0
  5727  00FC83  00                 	db	0
  5728  00FC84  53                 	db	83
  5729  00FC85  6B                 	db	107
  5730  00FC86  69                 	db	105
  5731  00FC87  70                 	db	112
  5732  00FC88  20                 	db	32
  5733  00FC89  46                 	db	70
  5734  00FC8A  69                 	db	105
  5735  00FC8B  72                 	db	114
  5736  00FC8C  73                 	db	115
  5737  00FC8D  74                 	db	116
  5738  00FC8E  2F                 	db	47
  5739  00FC8F  4C                 	db	76
  5740  00FC90  61                 	db	97
  5741  00FC91  73                 	db	115
  5742  00FC92  74                 	db	116
  5743  00FC93  00                 	db	0
  5744  00FC94  00                 	db	0
  5745  00FC95  52                 	db	82
  5746  00FC96  41                 	db	65
  5747  00FC97  4E                 	db	78
  5748  00FC98  44                 	db	68
  5749  00FC99  4F                 	db	79
  5750  00FC9A  4D                 	db	77
  5751  00FC9B  49                 	db	73
  5752  00FC9C  5A                 	db	90
  5753  00FC9D  45                 	db	69
  5754  00FC9E  20                 	db	32
  5755  00FC9F  41                 	db	65
  5756  00FCA0  55                 	db	85
  5757  00FCA1  54                 	db	84
  5758  00FCA2  4F                 	db	79
  5759  00FCA3  00                 	db	0
  5760  00FCA4  00                 	db	0
  5761  00FCA5  00                 	db	0
  5762  00FCA6  52                 	db	82
  5763  00FCA7  41                 	db	65
  5764  00FCA8  4E                 	db	78
  5765  00FCA9  44                 	db	68
  5766  00FCAA  4F                 	db	79
  5767  00FCAB  4D                 	db	77
  5768  00FCAC  49                 	db	73
  5769  00FCAD  5A                 	db	90
  5770  00FCAE  45                 	db	69
  5771  00FCAF  20                 	db	32
  5772  00FCB0  4F                 	db	79
  5773  00FCB1  4E                 	db	78
  5774  00FCB2  43                 	db	67
  5775  00FCB3  45                 	db	69
  5776  00FCB4  00                 	db	0
  5777  00FCB5  00                 	db	0
  5778  00FCB6  00                 	db	0
  5779  00FCB7  4B                 	db	75
  5780  00FCB8  65                 	db	101
  5781  00FCB9  79                 	db	121
  5782  00FCBA  20                 	db	32
  5783  00FCBB  70                 	db	112
  5784  00FCBC  72                 	db	114
  5785  00FCBD  65                 	db	101
  5786  00FCBE  73                 	db	115
  5787  00FCBF  73                 	db	115
  5788  00FCC0  00                 	db	0
  5789  00FCC1  00                 	db	0
  5790  00FCC2  00                 	db	0
  5791  00FCC3  00                 	db	0
  5792  00FCC4  00                 	db	0
  5793  00FCC5  00                 	db	0
  5794  00FCC6  00                 	db	0
  5795  00FCC7  00                 	db	0
  5796  00FCC8  4B                 	db	75
  5797  00FCC9  65                 	db	101
  5798  00FCCA  79                 	db	121
  5799  00FCCB  20                 	db	32
  5800  00FCCC  72                 	db	114
  5801  00FCCD  65                 	db	101
  5802  00FCCE  6C                 	db	108
  5803  00FCCF  65                 	db	101
  5804  00FCD0  61                 	db	97
  5805  00FCD1  73                 	db	115
  5806  00FCD2  65                 	db	101
  5807  00FCD3  00                 	db	0
  5808  00FCD4  00                 	db	0
  5809  00FCD5  00                 	db	0
  5810  00FCD6  00                 	db	0
  5811  00FCD7  00                 	db	0
  5812  00FCD8  00                 	db	0
  5813  00FCD9  54                 	db	84
  5814  00FCDA  72                 	db	114
  5815  00FCDB  61                 	db	97
  5816  00FCDC  6E                 	db	110
  5817  00FCDD  73                 	db	115
  5818  00FCDE  70                 	db	112
  5819  00FCDF  6F                 	db	111
  5820  00FCE0  73                 	db	115
  5821  00FCE1  65                 	db	101
  5822  00FCE2  00                 	db	0
  5823  00FCE3  00                 	db	0
  5824  00FCE4  00                 	db	0
  5825  00FCE5  00                 	db	0
  5826  00FCE6  00                 	db	0
  5827  00FCE7  00                 	db	0
  5828  00FCE8  00                 	db	0
  5829  00FCE9  00                 	db	0
  5830  00FCEA  52                 	db	82
  5831  00FCEB  65                 	db	101
  5832  00FCEC  73                 	db	115
  5833  00FCED  65                 	db	101
  5834  00FCEE  74                 	db	116
  5835  00FCEF  00                 	db	0
  5836  00FCF0  00                 	db	0
  5837  00FCF1  00                 	db	0
  5838  00FCF2  00                 	db	0
  5839  00FCF3  00                 	db	0
  5840  00FCF4  00                 	db	0
  5841  00FCF5  00                 	db	0
  5842  00FCF6  00                 	db	0
  5843  00FCF7  00                 	db	0
  5844  00FCF8  00                 	db	0
  5845  00FCF9  00                 	db	0
  5846  00FCFA  00                 	db	0
  5847  00FCFB                     __end_of_LCD_STRINGS:
  5848                           	opt stack 0
  5849  00FCFB                     _locrian_key:
  5850                           	opt stack 0
  5851  00FCFB  0B                 	db	11
  5852  00FCFC  01                 	db	1
  5853  00FCFD  03                 	db	3
  5854  00FCFE  05                 	db	5
  5855  00FCFF  06                 	db	6
  5856  00FD00  08                 	db	8
  5857  00FD01  0A                 	db	10
  5858  00FD02  0C                 	db	12
  5859  00FD03  0D                 	db	13
  5860  00FD04  0F                 	db	15
  5861  00FD05  11                 	db	17
  5862  00FD06  12                 	db	18
  5863  00FD07  14                 	db	20
  5864  00FD08  16                 	db	22
  5865  00FD09  18                 	db	24
  5866  00FD0A                     __end_of_locrian_key:
  5867                           	opt stack 0
  5868  00FD0A                     _aeolian_key:
  5869                           	opt stack 0
  5870  00FD0A  09                 	db	9
  5871  00FD0B  02                 	db	2
  5872  00FD0C  03                 	db	3
  5873  00FD0D  05                 	db	5
  5874  00FD0E  07                 	db	7
  5875  00FD0F  08                 	db	8
  5876  00FD10  0A                 	db	10
  5877  00FD11  0C                 	db	12
  5878  00FD12  0E                 	db	14
  5879  00FD13  0F                 	db	15
  5880  00FD14  11                 	db	17
  5881  00FD15  13                 	db	19
  5882  00FD16  14                 	db	20
  5883  00FD17  16                 	db	22
  5884  00FD18  18                 	db	24
  5885  00FD19                     __end_of_aeolian_key:
  5886                           	opt stack 0
  5887  00FD19                     _mixolydian_key:
  5888                           	opt stack 0
  5889  00FD19  07                 	db	7
  5890  00FD1A  02                 	db	2
  5891  00FD1B  04                 	db	4
  5892  00FD1C  05                 	db	5
  5893  00FD1D  07                 	db	7
  5894  00FD1E  09                 	db	9
  5895  00FD1F  0A                 	db	10
  5896  00FD20  0C                 	db	12
  5897  00FD21  0E                 	db	14
  5898  00FD22  10                 	db	16
  5899  00FD23  11                 	db	17
  5900  00FD24  13                 	db	19
  5901  00FD25  15                 	db	21
  5902  00FD26  16                 	db	22
  5903  00FD27  18                 	db	24
  5904  00FD28                     __end_of_mixolydian_key:
  5905                           	opt stack 0
  5906  00FD28                     _lydian_key:
  5907                           	opt stack 0
  5908  00FD28  05                 	db	5
  5909  00FD29  02                 	db	2
  5910  00FD2A  04                 	db	4
  5911  00FD2B  06                 	db	6
  5912  00FD2C  07                 	db	7
  5913  00FD2D  09                 	db	9
  5914  00FD2E  0B                 	db	11
  5915  00FD2F  0C                 	db	12
  5916  00FD30  0E                 	db	14
  5917  00FD31  10                 	db	16
  5918  00FD32  12                 	db	18
  5919  00FD33  13                 	db	19
  5920  00FD34  15                 	db	21
  5921  00FD35  17                 	db	23
  5922  00FD36  18                 	db	24
  5923  00FD37                     __end_of_lydian_key:
  5924                           	opt stack 0
  5925  00FD37                     _phrygian_key:
  5926                           	opt stack 0
  5927  00FD37  04                 	db	4
  5928  00FD38  01                 	db	1
  5929  00FD39  03                 	db	3
  5930  00FD3A  05                 	db	5
  5931  00FD3B  07                 	db	7
  5932  00FD3C  08                 	db	8
  5933  00FD3D  0A                 	db	10
  5934  00FD3E  0C                 	db	12
  5935  00FD3F  0D                 	db	13
  5936  00FD40  0F                 	db	15
  5937  00FD41  11                 	db	17
  5938  00FD42  13                 	db	19
  5939  00FD43  14                 	db	20
  5940  00FD44  16                 	db	22
  5941  00FD45  18                 	db	24
  5942  00FD46                     __end_of_phrygian_key:
  5943                           	opt stack 0
  5944  00FD46                     _dorian_key:
  5945                           	opt stack 0
  5946  00FD46  02                 	db	2
  5947  00FD47  02                 	db	2
  5948  00FD48  03                 	db	3
  5949  00FD49  05                 	db	5
  5950  00FD4A  07                 	db	7
  5951  00FD4B  09                 	db	9
  5952  00FD4C  0A                 	db	10
  5953  00FD4D  0C                 	db	12
  5954  00FD4E  0E                 	db	14
  5955  00FD4F  0F                 	db	15
  5956  00FD50  11                 	db	17
  5957  00FD51  13                 	db	19
  5958  00FD52  15                 	db	21
  5959  00FD53  16                 	db	22
  5960  00FD54  18                 	db	24
  5961  00FD55                     __end_of_dorian_key:
  5962                           	opt stack 0
  5963  00FD55                     _ionian_key:
  5964                           	opt stack 0
  5965  00FD55  00                 	db	0
  5966  00FD56  02                 	db	2
  5967  00FD57  04                 	db	4
  5968  00FD58  05                 	db	5
  5969  00FD59  07                 	db	7
  5970  00FD5A  09                 	db	9
  5971  00FD5B  0B                 	db	11
  5972  00FD5C  0C                 	db	12
  5973  00FD5D  0E                 	db	14
  5974  00FD5E  10                 	db	16
  5975  00FD5F  11                 	db	17
  5976  00FD60  13                 	db	19
  5977  00FD61  15                 	db	21
  5978  00FD62  17                 	db	23
  5979  00FD63  18                 	db	24
  5980  00FD64                     __end_of_ionian_key:
  5981                           	opt stack 0
  5982  00FD64                     STR_10:
  5983  00FD64  20                 	db	32
  5984  00FD65  20                 	db	32
  5985  00FD66  20                 	db	32
  5986  00FD67  20                 	db	32
  5987  00FD68  20                 	db	32
  5988  00FD69  20                 	db	32
  5989  00FD6A  20                 	db	32
  5990  00FD6B  20                 	db	32
  5991  00FD6C  20                 	db	32
  5992  00FD6D  20                 	db	32
  5993  00FD6E  20                 	db	32
  5994  00FD6F  20                 	db	32
  5995  00FD70  20                 	db	32
  5996  00FD71  20                 	db	32
  5997  00FD72  20                 	db	32
  5998  00FD73  20                 	db	32
  5999  00FD74  00                 	db	0
  6000  00FD75                     STR_22:
  6001  00FD75  53                 	db	83	;'S'
  6002  00FD76  65                 	db	101	;'e'
  6003  00FD77  74                 	db	116	;'t'
  6004  00FD78  74                 	db	116	;'t'
  6005  00FD79  69                 	db	105	;'i'
  6006  00FD7A  6E                 	db	110	;'n'
  6007  00FD7B  67                 	db	103	;'g'
  6008  00FD7C  73                 	db	115	;'s'
  6009  00FD7D  20                 	db	32
  6010  00FD7E  4C                 	db	76	;'L'
  6011  00FD7F  6F                 	db	111	;'o'
  6012  00FD80  61                 	db	97	;'a'
  6013  00FD81  64                 	db	100	;'d'
  6014  00FD82  65                 	db	101	;'e'
  6015  00FD83  64                 	db	100	;'d'
  6016  00FD84  21                 	db	33
  6017  00FD85  00                 	db	0
  6018  00FD86                     STR_37:
  6019  00FD86  52                 	db	82	;'R'
  6020  00FD87  65                 	db	101	;'e'
  6021  00FD88  73                 	db	115	;'s'
  6022  00FD89  74                 	db	116	;'t'
  6023  00FD8A  6F                 	db	111	;'o'
  6024  00FD8B  72                 	db	114	;'r'
  6025  00FD8C  65                 	db	101	;'e'
  6026  00FD8D  20                 	db	32
  6027  00FD8E  53                 	db	83	;'S'
  6028  00FD8F  65                 	db	101	;'e'
  6029  00FD90  74                 	db	116	;'t'
  6030  00FD91  74                 	db	116	;'t'
  6031  00FD92  69                 	db	105	;'i'
  6032  00FD93  6E                 	db	110	;'n'
  6033  00FD94  67                 	db	103	;'g'
  6034  00FD95  21                 	db	33
  6035  00FD96  00                 	db	0
  6036  00FD97                     STR_33:
  6037  00FD97  53                 	db	83	;'S'
  6038  00FD98  65                 	db	101	;'e'
  6039  00FD99  74                 	db	116	;'t'
  6040  00FD9A  20                 	db	32
  6041  00FD9B  4A                 	db	74	;'J'
  6042  00FD9C  6F                 	db	111	;'o'
  6043  00FD9D  79                 	db	121	;'y'
  6044  00FD9E  73                 	db	115	;'s'
  6045  00FD9F  74                 	db	116	;'t'
  6046  00FDA0  69                 	db	105	;'i'
  6047  00FDA1  63                 	db	99	;'c'
  6048  00FDA2  6B                 	db	107	;'k'
  6049  00FDA3  20                 	db	32
  6050  00FDA4  43                 	db	67	;'C'
  6051  00FDA5  43                 	db	67	;'C'
  6052  00FDA6  23                 	db	35
  6053  00FDA7  00                 	db	0
  6054  00FDA8                     STR_30:
  6055  00FDA8  50                 	db	80	;'P'
  6056  00FDA9  6F                 	db	111	;'o'
  6057  00FDAA  74                 	db	116	;'t'
  6058  00FDAB  73                 	db	115	;'s'
  6059  00FDAC  20                 	db	32
  6060  00FDAD  52                 	db	82	;'R'
  6061  00FDAE  65                 	db	101	;'e'
  6062  00FDAF  73                 	db	115	;'s'
  6063  00FDB0  6F                 	db	111	;'o'
  6064  00FDB1  6C                 	db	108	;'l'
  6065  00FDB2  75                 	db	117	;'u'
  6066  00FDB3  74                 	db	116	;'t'
  6067  00FDB4  69                 	db	105	;'i'
  6068  00FDB5  6F                 	db	111	;'o'
  6069  00FDB6  6E                 	db	110	;'n'
  6070  00FDB7  3A                 	db	58	;':'
  6071  00FDB8  00                 	db	0
  6072  00FDB9                     STR_47:
  6073  00FDB9  53                 	db	83	;'S'
  6074  00FDBA  65                 	db	101	;'e'
  6075  00FDBB  6C                 	db	108	;'l'
  6076  00FDBC  65                 	db	101	;'e'
  6077  00FDBD  63                 	db	99	;'c'
  6078  00FDBE  74                 	db	116	;'t'
  6079  00FDBF  20                 	db	32
  6080  00FDC0  41                 	db	65	;'A'
  6081  00FDC1  72                 	db	114	;'r'
  6082  00FDC2  70                 	db	112	;'p'
  6083  00FDC3  65                 	db	101	;'e'
  6084  00FDC4  67                 	db	103	;'g'
  6085  00FDC5  67                 	db	103	;'g'
  6086  00FDC6  69                 	db	105	;'i'
  6087  00FDC7  6F                 	db	111	;'o'
  6088  00FDC8  3A                 	db	58	;':'
  6089  00FDC9  00                 	db	0
  6090  00FDCA                     STR_28:
  6091  00FDCA  53                 	db	83	;'S'
  6092  00FDCB  65                 	db	101	;'e'
  6093  00FDCC  74                 	db	116	;'t'
  6094  00FDCD  20                 	db	32
  6095  00FDCE  4E                 	db	78	;'N'
  6096  00FDCF  6F                 	db	111	;'o'
  6097  00FDD0  74                 	db	116	;'t'
  6098  00FDD1  65                 	db	101	;'e'
  6099  00FDD2  20                 	db	32
  6100  00FDD3  4E                 	db	78	;'N'
  6101  00FDD4  75                 	db	117	;'u'
  6102  00FDD5  6D                 	db	109	;'m'
  6103  00FDD6  62                 	db	98	;'b'
  6104  00FDD7  65                 	db	101	;'e'
  6105  00FDD8  72                 	db	114	;'r'
  6106  00FDD9  3A                 	db	58	;':'
  6107  00FDDA  00                 	db	0
  6108  00FDDB                     STR_52:
  6109  00FDDB  41                 	db	65	;'A'
  6110  00FDDC  75                 	db	117	;'u'
  6111  00FDDD  74                 	db	116	;'t'
  6112  00FDDE  6F                 	db	111	;'o'
  6113  00FDDF  4C                 	db	76	;'L'
  6114  00FDE0  61                 	db	97	;'a'
  6115  00FDE1  74                 	db	116	;'t'
  6116  00FDE2  63                 	db	99	;'c'
  6117  00FDE3  68                 	db	104	;'h'
  6118  00FDE4  20                 	db	32
  6119  00FDE5  4F                 	db	79	;'O'
  6120  00FDE6  4E                 	db	78	;'N'
  6121  00FDE7  2F                 	db	47
  6122  00FDE8  4F                 	db	79	;'O'
  6123  00FDE9  46                 	db	70	;'F'
  6124  00FDEA  46                 	db	70	;'F'
  6125  00FDEB  00                 	db	0
  6126  00FDEC                     STR_39:
  6127  00FDEC  45                 	db	69	;'E'
  6128  00FDED  6E                 	db	110	;'n'
  6129  00FDEE  63                 	db	99	;'c'
  6130  00FDEF  6F                 	db	111	;'o'
  6131  00FDF0  64                 	db	100	;'d'
  6132  00FDF1  65                 	db	101	;'e'
  6133  00FDF2  72                 	db	114	;'r'
  6134  00FDF3  20                 	db	32
  6135  00FDF4  50                 	db	80	;'P'
  6136  00FDF5  6F                 	db	111	;'o'
  6137  00FDF6  6C                 	db	108	;'l'
  6138  00FDF7  61                 	db	97	;'a'
  6139  00FDF8  72                 	db	114	;'r'
  6140  00FDF9  69                 	db	105	;'i'
  6141  00FDFA  74                 	db	116	;'t'
  6142  00FDFB  79                 	db	121	;'y'
  6143  00FDFC  00                 	db	0
  6144  00FDFD                     STR_21:
  6145  00FDFD  53                 	db	83	;'S'
  6146  00FDFE  65                 	db	101	;'e'
  6147  00FDFF  74                 	db	116	;'t'
  6148  00FE00  74                 	db	116	;'t'
  6149  00FE01  69                 	db	105	;'i'
  6150  00FE02  6E                 	db	110	;'n'
  6151  00FE03  67                 	db	103	;'g'
  6152  00FE04  73                 	db	115	;'s'
  6153  00FE05  20                 	db	32
  6154  00FE06  53                 	db	83	;'S'
  6155  00FE07  61                 	db	97	;'a'
  6156  00FE08  76                 	db	118	;'v'
  6157  00FE09  65                 	db	101	;'e'
  6158  00FE0A  64                 	db	100	;'d'
  6159  00FE0B  21                 	db	33
  6160  00FE0C  00                 	db	0
  6161  00FE0D                     STR_75:
  6162  00FE0D  4C                 	db	76	;'L'
  6163  00FE0E  61                 	db	97	;'a'
  6164  00FE0F  73                 	db	115	;'s'
  6165  00FE10  74                 	db	116	;'t'
  6166  00FE11  20                 	db	32
  6167  00FE12  4E                 	db	78	;'N'
  6168  00FE13  6F                 	db	111	;'o'
  6169  00FE14  74                 	db	116	;'t'
  6170  00FE15  65                 	db	101	;'e'
  6171  00FE16  20                 	db	32
  6172  00FE17  4D                 	db	77	;'M'
  6173  00FE18  6F                 	db	111	;'o'
  6174  00FE19  64                 	db	100	;'d'
  6175  00FE1A  65                 	db	101	;'e'
  6176  00FE1B  3A                 	db	58	;':'
  6177  00FE1C  00                 	db	0
  6178  00FE1D                     STR_62:
  6179  00FE1D  52                 	db	82	;'R'
  6180  00FE1E  61                 	db	97	;'a'
  6181  00FE1F  6E                 	db	110	;'n'
  6182  00FE20  64                 	db	100	;'d'
  6183  00FE21  6F                 	db	111	;'o'
  6184  00FE22  6D                 	db	109	;'m'
  6185  00FE23  69                 	db	105	;'i'
  6186  00FE24  7A                 	db	122	;'z'
  6187  00FE25  65                 	db	101	;'e'
  6188  00FE26  20                 	db	32
  6189  00FE27  54                 	db	84	;'T'
  6190  00FE28  79                 	db	121	;'y'
  6191  00FE29  70                 	db	112	;'p'
  6192  00FE2A  65                 	db	101	;'e'
  6193  00FE2B  3A                 	db	58	;':'
  6194  00FE2C  00                 	db	0
  6195  00FE2D                     STR_26:
  6196  00FE2D  53                 	db	83	;'S'
  6197  00FE2E  65                 	db	101	;'e'
  6198  00FE2F  6C                 	db	108	;'l'
  6199  00FE30  65                 	db	101	;'e'
  6200  00FE31  63                 	db	99	;'c'
  6201  00FE32  74                 	db	116	;'t'
  6202  00FE33  20                 	db	32
  6203  00FE34  53                 	db	83	;'S'
  6204  00FE35  65                 	db	101	;'e'
  6205  00FE36  76                 	db	118	;'v'
  6206  00FE37  65                 	db	101	;'e'
  6207  00FE38  6E                 	db	110	;'n'
  6208  00FE39  74                 	db	116	;'t'
  6209  00FE3A  68                 	db	104	;'h'
  6210  00FE3B  3A                 	db	58	;':'
  6211  00FE3C  00                 	db	0
  6212  00FE3D                     STR_40:
  6213  00FE3D  41                 	db	65	;'A'
  6214  00FE3E  52                 	db	82	;'R'
  6215  00FE3F  50                 	db	80	;'P'
  6216  00FE40  45                 	db	69	;'E'
  6217  00FE41  47                 	db	71	;'G'
  6218  00FE42  47                 	db	71	;'G'
  6219  00FE43  49                 	db	73	;'I'
  6220  00FE44  41                 	db	65	;'A'
  6221  00FE45  54                 	db	84	;'T'
  6222  00FE46  4F                 	db	79	;'O'
  6223  00FE47  52                 	db	82	;'R'
  6224  00FE48  20                 	db	32
  6225  00FE49  4F                 	db	79	;'O'
  6226  00FE4A  46                 	db	70	;'F'
  6227  00FE4B  46                 	db	70	;'F'
  6228  00FE4C  00                 	db	0
  6229  00FE4D                     STR_32:
  6230  00FE4D  53                 	db	83	;'S'
  6231  00FE4E  6C                 	db	108	;'l'
  6232  00FE4F  69                 	db	105	;'i'
  6233  00FE50  64                 	db	100	;'d'
  6234  00FE51  65                 	db	101	;'e'
  6235  00FE52  70                 	db	112	;'p'
  6236  00FE53  6F                 	db	111	;'o'
  6237  00FE54  74                 	db	116	;'t'
  6238  00FE55  73                 	db	115	;'s'
  6239  00FE56  20                 	db	32
  6240  00FE57  43                 	db	67	;'C'
  6241  00FE58  43                 	db	67	;'C'
  6242  00FE59  23                 	db	35
  6243  00FE5A  3A                 	db	58	;':'
  6244  00FE5B  00                 	db	0
  6245  00FE5C                     STR_57:
  6246  00FE5C  55                 	db	85	;'U'
  6247  00FE5D  6E                 	db	110	;'n'
  6248  00FE5E  2D                 	db	45
  6249  00FE5F  6C                 	db	108	;'l'
  6250  00FE60  61                 	db	97	;'a'
  6251  00FE61  74                 	db	116	;'t'
  6252  00FE62  63                 	db	99	;'c'
  6253  00FE63  68                 	db	104	;'h'
  6254  00FE64  20                 	db	32
  6255  00FE65  4D                 	db	77	;'M'
  6256  00FE66  6F                 	db	111	;'o'
  6257  00FE67  64                 	db	100	;'d'
  6258  00FE68  65                 	db	101	;'e'
  6259  00FE69  3A                 	db	58	;':'
  6260  00FE6A  00                 	db	0
  6261  00FE6B                     STR_29:
  6262  00FE6B  53                 	db	83	;'S'
  6263  00FE6C  65                 	db	101	;'e'
  6264  00FE6D  74                 	db	116	;'t'
  6265  00FE6E  20                 	db	32
  6266  00FE6F  43                 	db	67	;'C'
  6267  00FE70  43                 	db	67	;'C'
  6268  00FE71  20                 	db	32
  6269  00FE72  4E                 	db	78	;'N'
  6270  00FE73  75                 	db	117	;'u'
  6271  00FE74  6D                 	db	109	;'m'
  6272  00FE75  62                 	db	98	;'b'
  6273  00FE76  65                 	db	101	;'e'
  6274  00FE77  72                 	db	114	;'r'
  6275  00FE78  3A                 	db	58	;':'
  6276  00FE79  00                 	db	0
  6277  00FE7A                     STR_64:
  6278  00FE7A  52                 	db	82	;'R'
  6279  00FE7B  41                 	db	65	;'A'
  6280  00FE7C  4E                 	db	78	;'N'
  6281  00FE7D  44                 	db	68	;'D'
  6282  00FE7E  4F                 	db	79	;'O'
  6283  00FE7F  4D                 	db	77	;'M'
  6284  00FE80  49                 	db	73	;'I'
  6285  00FE81  5A                 	db	90	;'Z'
  6286  00FE82  45                 	db	69	;'E'
  6287  00FE83  20                 	db	32
  6288  00FE84  4F                 	db	79	;'O'
  6289  00FE85  4E                 	db	78	;'N'
  6290  00FE86  43                 	db	67	;'C'
  6291  00FE87  45                 	db	69	;'E'
  6292  00FE88  00                 	db	0
  6293  00FE89                     STR_53:
  6294  00FE89  41                 	db	65	;'A'
  6295  00FE8A  75                 	db	117	;'u'
  6296  00FE8B  74                 	db	116	;'t'
  6297  00FE8C  6F                 	db	111	;'o'
  6298  00FE8D  20                 	db	32
  6299  00FE8E  4C                 	db	76	;'L'
  6300  00FE8F  61                 	db	97	;'a'
  6301  00FE90  74                 	db	116	;'t'
  6302  00FE91  63                 	db	99	;'c'
  6303  00FE92  68                 	db	104	;'h'
  6304  00FE93  20                 	db	32
  6305  00FE94  4F                 	db	79	;'O'
  6306  00FE95  46                 	db	70	;'F'
  6307  00FE96  46                 	db	70	;'F'
  6308  00FE97  00                 	db	0
  6309  00FE98                     STR_42:
  6310  00FE98  41                 	db	65	;'A'
  6311  00FE99  52                 	db	82	;'R'
  6312  00FE9A  50                 	db	80	;'P'
  6313  00FE9B  45                 	db	69	;'E'
  6314  00FE9C  47                 	db	71	;'G'
  6315  00FE9D  47                 	db	71	;'G'
  6316  00FE9E  49                 	db	73	;'I'
  6317  00FE9F  41                 	db	65	;'A'
  6318  00FEA0  54                 	db	84	;'T'
  6319  00FEA1  4F                 	db	79	;'O'
  6320  00FEA2  52                 	db	82	;'R'
  6321  00FEA3  20                 	db	32
  6322  00FEA4  4F                 	db	79	;'O'
  6323  00FEA5  4E                 	db	78	;'N'
  6324  00FEA6  00                 	db	0
  6325  00FEA7                     STR_63:
  6326  00FEA7  52                 	db	82	;'R'
  6327  00FEA8  41                 	db	65	;'A'
  6328  00FEA9  4E                 	db	78	;'N'
  6329  00FEAA  44                 	db	68	;'D'
  6330  00FEAB  4F                 	db	79	;'O'
  6331  00FEAC  4D                 	db	77	;'M'
  6332  00FEAD  49                 	db	73	;'I'
  6333  00FEAE  5A                 	db	90	;'Z'
  6334  00FEAF  45                 	db	69	;'E'
  6335  00FEB0  20                 	db	32
  6336  00FEB1  41                 	db	65	;'A'
  6337  00FEB2  55                 	db	85	;'U'
  6338  00FEB3  54                 	db	84	;'T'
  6339  00FEB4  4F                 	db	79	;'O'
  6340  00FEB5  00                 	db	0
  6341  00FEB6                     STR_45:
  6342  00FEB6  54                 	db	84	;'T'
  6343  00FEB7  65                 	db	101	;'e'
  6344  00FEB8  6D                 	db	109	;'m'
  6345  00FEB9  70                 	db	112	;'p'
  6346  00FEBA  6F                 	db	111	;'o'
  6347  00FEBB  20                 	db	32
  6348  00FEBC  28                 	db	40
  6349  00FEBD  42                 	db	66	;'B'
  6350  00FEBE  50                 	db	80	;'P'
  6351  00FEBF  4D                 	db	77	;'M'
  6352  00FEC0  29                 	db	41
  6353  00FEC1  3A                 	db	58	;':'
  6354  00FEC2  20                 	db	32
  6355  00FEC3  00                 	db	0
  6356  00FEC4                     STR_31:
  6357  00FEC4  53                 	db	83	;'S'
  6358  00FEC5  65                 	db	101	;'e'
  6359  00FEC6  74                 	db	116	;'t'
  6360  00FEC7  20                 	db	32
  6361  00FEC8  50                 	db	80	;'P'
  6362  00FEC9  6F                 	db	111	;'o'
  6363  00FECA  74                 	db	116	;'t'
  6364  00FECB  73                 	db	115	;'s'
  6365  00FECC  20                 	db	32
  6366  00FECD  43                 	db	67	;'C'
  6367  00FECE  43                 	db	67	;'C'
  6368  00FECF  23                 	db	35
  6369  00FED0  3A                 	db	58	;':'
  6370  00FED1  00                 	db	0
  6371  00FED2                     STR_25:
  6372  00FED2  53                 	db	83	;'S'
  6373  00FED3  65                 	db	101	;'e'
  6374  00FED4  6C                 	db	108	;'l'
  6375  00FED5  65                 	db	101	;'e'
  6376  00FED6  63                 	db	99	;'c'
  6377  00FED7  74                 	db	116	;'t'
  6378  00FED8  20                 	db	32
  6379  00FED9  54                 	db	84	;'T'
  6380  00FEDA  72                 	db	114	;'r'
  6381  00FEDB  69                 	db	105	;'i'
  6382  00FEDC  61                 	db	97	;'a'
  6383  00FEDD  64                 	db	100	;'d'
  6384  00FEDE  3A                 	db	58	;':'
  6385  00FEDF  00                 	db	0
  6386  00FEE0                     STR_27:
  6387  00FEE0  44                 	db	68	;'D'
  6388  00FEE1  72                 	db	114	;'r'
  6389  00FEE2  75                 	db	117	;'u'
  6390  00FEE3  6D                 	db	109	;'m'
  6391  00FEE4  20                 	db	32
  6392  00FEE5  43                 	db	67	;'C'
  6393  00FEE6  43                 	db	67	;'C'
  6394  00FEE7  20                 	db	32
  6395  00FEE8  4D                 	db	77	;'M'
  6396  00FEE9  6F                 	db	111	;'o'
  6397  00FEEA  64                 	db	100	;'d'
  6398  00FEEB  65                 	db	101	;'e'
  6399  00FEEC  3A                 	db	58	;':'
  6400  00FEED  00                 	db	0
  6401  00FEEE                     STR_46:
  6402  00FEEE  4F                 	db	79	;'O'
  6403  00FEEF  63                 	db	99	;'c'
  6404  00FEF0  74                 	db	116	;'t'
  6405  00FEF1  61                 	db	97	;'a'
  6406  00FEF2  76                 	db	118	;'v'
  6407  00FEF3  65                 	db	101	;'e'
  6408  00FEF4  20                 	db	32
  6409  00FEF5  52                 	db	82	;'R'
  6410  00FEF6  61                 	db	97	;'a'
  6411  00FEF7  6E                 	db	110	;'n'
  6412  00FEF8  67                 	db	103	;'g'
  6413  00FEF9  65                 	db	101	;'e'
  6414  00FEFA  3A                 	db	58	;':'
  6415  00FEFB  00                 	db	0
  6416  00FEFC                     STR_60:
  6417  00FEFC  4F                 	db	79	;'O'
  6418  00FEFD  4E                 	db	78	;'N'
  6419  00FEFE  45                 	db	69	;'E'
  6420  00FEFF  20                 	db	32
  6421  00FF00  41                 	db	65	;'A'
  6422  00FF01  54                 	db	84	;'T'
  6423  00FF02  20                 	db	32
  6424  00FF03  41                 	db	65	;'A'
  6425  00FF04  20                 	db	32
  6426  00FF05  54                 	db	84	;'T'
  6427  00FF06  49                 	db	73	;'I'
  6428  00FF07  4D                 	db	77	;'M'
  6429  00FF08  45                 	db	69	;'E'
  6430  00FF09  00                 	db	0
  6431  00FF0A                     STR_55:
  6432  00FF0A  41                 	db	65	;'A'
  6433  00FF0B  75                 	db	117	;'u'
  6434  00FF0C  74                 	db	116	;'t'
  6435  00FF0D  6F                 	db	111	;'o'
  6436  00FF0E  20                 	db	32
  6437  00FF0F  4C                 	db	76	;'L'
  6438  00FF10  61                 	db	97	;'a'
  6439  00FF11  74                 	db	116	;'t'
  6440  00FF12  63                 	db	99	;'c'
  6441  00FF13  68                 	db	104	;'h'
  6442  00FF14  20                 	db	32
  6443  00FF15  4F                 	db	79	;'O'
  6444  00FF16  4E                 	db	78	;'N'
  6445  00FF17  00                 	db	0
  6446  00FF18                     STR_23:
  6447  00FF18  45                 	db	69	;'E'
  6448  00FF19  78                 	db	120	;'x'
  6449  00FF1A  69                 	db	105	;'i'
  6450  00FF1B  74                 	db	116	;'t'
  6451  00FF1C  20                 	db	32
  6452  00FF1D  45                 	db	69	;'E'
  6453  00FF1E  45                 	db	69	;'E'
  6454  00FF1F  50                 	db	80	;'P'
  6455  00FF20  52                 	db	82	;'R'
  6456  00FF21  4F                 	db	79	;'O'
  6457  00FF22  4D                 	db	77	;'M'
  6458  00FF23  21                 	db	33
  6459  00FF24  00                 	db	0
  6460  00FF25                     STR_38:
  6461  00FF25  52                 	db	82	;'R'
  6462  00FF26  65                 	db	101	;'e'
  6463  00FF27  62                 	db	98	;'b'
  6464  00FF28  6F                 	db	111	;'o'
  6465  00FF29  6F                 	db	111	;'o'
  6466  00FF2A  74                 	db	116	;'t'
  6467  00FF2B  69                 	db	105	;'i'
  6468  00FF2C  6E                 	db	110	;'n'
  6469  00FF2D  67                 	db	103	;'g'
  6470  00FF2E  2E                 	db	46
  6471  00FF2F  2E                 	db	46
  6472  00FF30  2E                 	db	46
  6473  00FF31  00                 	db	0
  6474  00FF32                     STR_48:
  6475  00FF32  4E                 	db	78	;'N'
  6476  00FF33  6F                 	db	111	;'o'
  6477  00FF34  74                 	db	116	;'t'
  6478  00FF35  65                 	db	101	;'e'
  6479  00FF36  20                 	db	32
  6480  00FF37  4C                 	db	76	;'L'
  6481  00FF38  65                 	db	101	;'e'
  6482  00FF39  6E                 	db	110	;'n'
  6483  00FF3A  67                 	db	103	;'g'
  6484  00FF3B  74                 	db	116	;'t'
  6485  00FF3C  68                 	db	104	;'h'
  6486  00FF3D  3A                 	db	58	;':'
  6487  00FF3E  00                 	db	0
  6488  00FF3F                     STR_65:
  6489  00FF3F  53                 	db	83	;'S'
  6490  00FF40  6B                 	db	107	;'k'
  6491  00FF41  69                 	db	105	;'i'
  6492  00FF42  70                 	db	112	;'p'
  6493  00FF43  20                 	db	32
  6494  00FF44  46                 	db	70	;'F'
  6495  00FF45  2F                 	db	47
  6496  00FF46  4C                 	db	76	;'L'
  6497  00FF47  20                 	db	32
  6498  00FF48  4F                 	db	79	;'O'
  6499  00FF49  46                 	db	70	;'F'
  6500  00FF4A  46                 	db	70	;'F'
  6501  00FF4B  00                 	db	0
  6502  00FF4C                     STR_34:
  6503  00FF4C  50                 	db	80	;'P'
  6504  00FF4D  72                 	db	114	;'r'
  6505  00FF4E  6F                 	db	111	;'o'
  6506  00FF4F  67                 	db	103	;'g'
  6507  00FF50  72                 	db	114	;'r'
  6508  00FF51  61                 	db	97	;'a'
  6509  00FF52  6D                 	db	109	;'m'
  6510  00FF53  20                 	db	32
  6511  00FF54  23                 	db	35
  6512  00FF55  3A                 	db	58	;':'
  6513  00FF56  20                 	db	32
  6514  00FF57  00                 	db	0
  6515  00FF58                     STR_24:
  6516  00FF58  45                 	db	69	;'E'
  6517  00FF59  6E                 	db	110	;'n'
  6518  00FF5A  74                 	db	116	;'t'
  6519  00FF5B  65                 	db	101	;'e'
  6520  00FF5C  72                 	db	114	;'r'
  6521  00FF5D  20                 	db	32
  6522  00FF5E  4D                 	db	77	;'M'
  6523  00FF5F  6F                 	db	111	;'o'
  6524  00FF60  64                 	db	100	;'d'
  6525  00FF61  65                 	db	101	;'e'
  6526  00FF62  3A                 	db	58	;':'
  6527  00FF63  00                 	db	0
  6528  00FF64                     STR_58:
  6529  00FF64  55                 	db	85	;'U'
  6530  00FF65  4E                 	db	78	;'N'
  6531  00FF66  4C                 	db	76	;'L'
  6532  00FF67  41                 	db	65	;'A'
  6533  00FF68  54                 	db	84	;'T'
  6534  00FF69  43                 	db	67	;'C'
  6535  00FF6A  48                 	db	72	;'H'
  6536  00FF6B  20                 	db	32
  6537  00FF6C  41                 	db	65	;'A'
  6538  00FF6D  4C                 	db	76	;'L'
  6539  00FF6E  4C                 	db	76	;'L'
  6540  00FF6F  00                 	db	0
  6541  00FF70                     STR_66:
  6542  00FF70  53                 	db	83	;'S'
  6543  00FF71  6B                 	db	107	;'k'
  6544  00FF72  69                 	db	105	;'i'
  6545  00FF73  70                 	db	112	;'p'
  6546  00FF74  20                 	db	32
  6547  00FF75  46                 	db	70	;'F'
  6548  00FF76  2F                 	db	47
  6549  00FF77  4C                 	db	76	;'L'
  6550  00FF78  20                 	db	32
  6551  00FF79  4F                 	db	79	;'O'
  6552  00FF7A  4E                 	db	78	;'N'
  6553  00FF7B  00                 	db	0
  6554  00FF7C                     STR_68:
  6555  00FF7C  46                 	db	70	;'F'
  6556  00FF7D  49                 	db	73	;'I'
  6557  00FF7E  4E                 	db	78	;'N'
  6558  00FF7F  49                 	db	73	;'I'
  6559  00FF80  53                 	db	83	;'S'
  6560  00FF81  48                 	db	72	;'H'
  6561  00FF82  20                 	db	32
  6562  00FF83  4C                 	db	76	;'L'
  6563  00FF84  41                 	db	65	;'A'
  6564  00FF85  53                 	db	83	;'S'
  6565  00FF86  54                 	db	84	;'T'
  6566  00FF87  00                 	db	0
  6567  00FF88                     STR_14:
  6568  00FF88  20                 	db	32
  6569  00FF89  50                 	db	80	;'P'
  6570  00FF8A  49                 	db	73	;'I'
  6571  00FF8B  54                 	db	84	;'T'
  6572  00FF8C  43                 	db	67	;'C'
  6573  00FF8D  48                 	db	72	;'H'
  6574  00FF8E  42                 	db	66	;'B'
  6575  00FF8F  45                 	db	69	;'E'
  6576  00FF90  4E                 	db	78	;'N'
  6577  00FF91  44                 	db	68	;'D'
  6578  00FF92  00                 	db	0
  6579  00FF93                     STR_15:
  6580  00FF93  20                 	db	32
  6581  00FF94  4D                 	db	77	;'M'
  6582  00FF95  4F                 	db	79	;'O'
  6583  00FF96  44                 	db	68	;'D'
  6584  00FF97  2E                 	db	46
  6585  00FF98  57                 	db	87	;'W'
  6586  00FF99  48                 	db	72	;'H'
  6587  00FF9A  45                 	db	69	;'E'
  6588  00FF9B  45                 	db	69	;'E'
  6589  00FF9C  4C                 	db	76	;'L'
  6590  00FF9D  00                 	db	0
  6591  00FF9E                     STR_13:
  6592  00FF9E  20                 	db	32
  6593  00FF9F  20                 	db	32
  6594  00FFA0  56                 	db	86	;'V'
  6595  00FFA1  45                 	db	69	;'E'
  6596  00FFA2  4C                 	db	76	;'L'
  6597  00FFA3  4F                 	db	79	;'O'
  6598  00FFA4  43                 	db	67	;'C'
  6599  00FFA5  49                 	db	73	;'I'
  6600  00FFA6  54                 	db	84	;'T'
  6601  00FFA7  59                 	db	89	;'Y'
  6602  00FFA8  00                 	db	0
  6603  00FFA9                     STR_67:
  6604  00FFA9  49                 	db	73	;'I'
  6605  00FFAA  4D                 	db	77	;'M'
  6606  00FFAB  4D                 	db	77	;'M'
  6607  00FFAC  45                 	db	69	;'E'
  6608  00FFAD  44                 	db	68	;'D'
  6609  00FFAE  49                 	db	73	;'I'
  6610  00FFAF  41                 	db	65	;'A'
  6611  00FFB0  54                 	db	84	;'T'
  6612  00FFB1  45                 	db	69	;'E'
  6613  00FFB2  00                 	db	0
  6614  00FFB3                     STR_36:
  6615  00FFB3  4C                 	db	76	;'L'
  6616  00FFB4  6F                 	db	111	;'o'
  6617  00FFB5  61                 	db	97	;'a'
  6618  00FFB6  64                 	db	100	;'d'
  6619  00FFB7  20                 	db	32
  6620  00FFB8  23                 	db	35
  6621  00FFB9  3A                 	db	58	;':'
  6622  00FFBA  00                 	db	0
  6623  00FFBB                     STR_35:
  6624  00FFBB  53                 	db	83	;'S'
  6625  00FFBC  61                 	db	97	;'a'
  6626  00FFBD  76                 	db	118	;'v'
  6627  00FFBE  65                 	db	101	;'e'
  6628  00FFBF  20                 	db	32
  6629  00FFC0  23                 	db	35
  6630  00FFC1  3A                 	db	58	;':'
  6631  00FFC2  00                 	db	0
  6632  00FFC3                     STR_20:
  6633  00FFC3  53                 	db	83	;'S'
  6634  00FFC4  65                 	db	101	;'e'
  6635  00FFC5  74                 	db	116	;'t'
  6636  00FFC6  21                 	db	33
  6637  00FFC7  00                 	db	0
  6638  00FFC8                     STR_61:
  6639  00FFC8  20                 	db	32
  6640  00FFC9  4F                 	db	79	;'O'
  6641  00FFCA  6E                 	db	110	;'n'
  6642  00FFCB  45                 	db	69	;'E'
  6643  00FFCC  00                 	db	0
  6644  00FFCD                     STR_41:
  6645  00FFCD  41                 	db	65	;'A'
  6646  00FFCE  6F                 	db	111	;'o'
  6647  00FFCF  46                 	db	70	;'F'
  6648  00FFD0  46                 	db	70	;'F'
  6649  00FFD1  00                 	db	0
  6650  00FFD2                     STR_43:
  6651  00FFD2  20                 	db	32
  6652  00FFD3  41                 	db	65	;'A'
  6653  00FFD4  72                 	db	114	;'r'
  6654  00FFD5  50                 	db	80	;'P'
  6655  00FFD6  00                 	db	0
  6656  00FFD7                     STR_8:
  6657  00FFD7  74                 	db	116	;'t'
  6658  00FFD8  45                 	db	69	;'E'
  6659  00FFD9  53                 	db	83	;'S'
  6660  00FFDA  74                 	db	116	;'t'
  6661  00FFDB  00                 	db	0
  6662  00FFDC                     STR_5:
  6663  00FFDC  20                 	db	32
  6664  00FFDD  6F                 	db	111	;'o'
  6665  00FFDE  46                 	db	70	;'F'
  6666  00FFDF  46                 	db	70	;'F'
  6667  00FFE0  00                 	db	0
  6668  00FFE1                     STR_2:
  6669  00FFE1  20                 	db	32
  6670  00FFE2  64                 	db	100	;'d'
  6671  00FFE3  45                 	db	69	;'E'
  6672  00FFE4  4C                 	db	76	;'L'
  6673  00FFE5  00                 	db	0
  6674  00FFE6                     STR_1:
  6675  00FFE6  48                 	db	72	;'H'
  6676  00FFE7  6F                 	db	111	;'o'
  6677  00FFE8  4C                 	db	76	;'L'
  6678  00FFE9  64                 	db	100	;'d'
  6679  00FFEA  00                 	db	0
  6680  00FFEB                     STR_6:
  6681  00FFEB  72                 	db	114	;'r'
  6682  00FFEC  41                 	db	65	;'A'
  6683  00FFED  6E                 	db	110	;'n'
  6684  00FFEE  64                 	db	100	;'d'
  6685  00FFEF  00                 	db	0
  6686  00FFF0                     STR_4:
  6687  00FFF0  41                 	db	65	;'A'
  6688  00FFF1  75                 	db	117	;'u'
  6689  00FFF2  74                 	db	116	;'t'
  6690  00FFF3  6F                 	db	111	;'o'
  6691  00FFF4  00                 	db	0
  6692  00FFF5                     STR_7:
  6693  00FFF5  72                 	db	114	;'r'
  6694  00FFF6  53                 	db	83	;'S'
  6695  00FFF7  45                 	db	69	;'E'
  6696  00FFF8  74                 	db	116	;'t'
  6697  00FFF9  00                 	db	0
  6698  00FFFA                     STR_3:
  6699  00FFFA  4C                 	db	76	;'L'
  6700  00FFFB  61                 	db	97	;'a'
  6701  00FFFC  53                 	db	83	;'S'
  6702  00FFFD  74                 	db	116	;'t'
  6703  00FFFE  00                 	db	0
  6704  0000                     
  6705                           ; #config settings
  6706  00FFFF  00                 	db	0	; dummy byte at the end
  6707  0000                     
  6708                           	psect	bitnvCOMRAM
  6709  000290                     __pbitnvCOMRAM:
  6710                           	opt stack 0
  6711  000290                     _note_off_was_sent:
  6712                           	opt stack 0
  6713  000290                     	ds	1
  6714  0000                     _TMR0	set	4054
  6715  0000                     _TMR1	set	4046
  6716  0000                     _EECON2	set	4007
  6717  0000                     _INTCONbits	set	4082
  6718  0000                     _EEDATA	set	4008
  6719  0000                     _EEADR	set	4009
  6720  0000                     _EEADRH	set	4010
  6721  0000                     _EECON1bits	set	4006
  6722  0000                     _SPBRG	set	4015
  6723  0000                     _T1CON	set	4045
  6724  0000                     _TMR2	set	4044
  6725  0000                     _T2CON	set	4042
  6726  0000                     _T0CON	set	4053
  6727  0000                     _PORTE	set	3972
  6728  0000                     _PORTB	set	3969
  6729  0000                     _TRISE	set	3990
  6730  0000                     _TRISD	set	3989
  6731  0000                     _TRISC	set	3988
  6732  0000                     _TRISB	set	3987
  6733  0000                     _TRISA	set	3986
  6734  0000                     _PORTD	set	3971
  6735  0000                     _TXREG	set	4013
  6736  0000                     _ADRESL	set	4035
  6737  0000                     _ADRESH	set	4036
  6738  0000                     _PORTA	set	3968
  6739  0000                     _ADCON2	set	4032
  6740  0000                     _ADCON1	set	4033
  6741  0000                     _ADCON0	set	4034
  6742  0000                     _CMCON	set	4020
  6743  0000                     _PORTC	set	3970
  6744  0000                     _TMR0IF	set	32658
  6745  0000                     _RB0	set	31752
  6746  0000                     _TMR1IF	set	31984
  6747  0000                     _TMR2IF	set	31985
  6748  0000                     _RC4	set	31764
  6749  0000                     _RC5	set	31765
  6750  0000                     _RB1	set	31753
  6751  0000                     _GIE	set	32663
  6752  0000                     _PEIE	set	32662
  6753  0000                     _BRGH	set	32098
  6754  0000                     _CREN	set	32092
  6755  0000                     _SPEN	set	32095
  6756  0000                     _SYNC	set	32100
  6757  0000                     _TXEN	set	32101
  6758  0000                     _TMR1IE	set	31976
  6759  0000                     _TMR1ON	set	32360
  6760  0000                     _TMR2IE	set	31977
  6761  0000                     _TMR0IE	set	32661
  6762  0000                     _PSA	set	32427
  6763  0000                     _T0CS	set	32429
  6764  0000                     _T08BIT	set	32430
  6765  0000                     _INT0IE	set	32660
  6766  0000                     _INT0IF	set	32657
  6767  0000                     _INTEDG0	set	32654
  6768  0000                     _RBIE	set	32659
  6769  0000                     _RBIF	set	32656
  6770  0000                     _IPEN	set	32391
  6771  0000                     _RC2	set	31762
  6772  0000                     _RC1	set	31761
  6773  0000                     _RC0	set	31760
  6774  0000                     _RC3	set	31763
  6775  0000                     _TMR0ON	set	32431
  6776  0000                     _RB4	set	31756
  6777  0000                     _RB5	set	31757
  6778  0000                     _RE2	set	31778
  6779  0000                     _RB2	set	31754
  6780  0000                     _RA5	set	31749
  6781  0000                     _TXIF	set	31988
  6782  0000                     _TRMT	set	32097
  6783  0000                     _GO_nDONE	set	32273
  6784  0000                     _ADON	set	32272
  6785  0000                     _TMR2ON	set	32338
  6786  0000                     _RE1	set	31777
  6787  0000                     _RE0	set	31776
  6788  0000                     _RD7	set	31775
  6789  0000                     _RD6	set	31774
  6790  0000                     _RD5	set	31773
  6791  0000                     _RD4	set	31772
  6792                           
  6793                           	psect	cinit
  6794  006C44                     __pcinit:
  6795                           	opt stack 0
  6796  006C44                     start_initialization:
  6797                           	opt stack 0
  6798  006C44                     __initialization:
  6799                           	opt stack 0
  6800                           
  6801                           ; Initialize objects allocated to BANK3 (105 bytes)
  6802                           ; load TBLPTR registers with __pidataBANK3
  6803  006C44  0E20               	movlw	low __pidataBANK3
  6804  006C46  6EF6               	movwf	tblptrl,c
  6805  006C48  0E8F               	movlw	high __pidataBANK3
  6806  006C4A  6EF7               	movwf	tblptrh,c
  6807  006C4C  0E00               	movlw	low (__pidataBANK3 shr (0+16))
  6808  006C4E  6EF8               	movwf	tblptru,c
  6809  006C50  EE03  F000         	lfsr	0,__pdataBANK3
  6810  006C54  EE20 F069          	lfsr	2,105
  6811  006C58                     copy_data0:
  6812  006C58  0009               	tblrd		*+
  6813  006C5A  CFF5 FFEE          	movff	tablat,postinc0
  6814  006C5E  50DD               	movf	postdec2,w,c
  6815  006C60  50D9               	movf	fsr2l,w,c
  6816  006C62  E1FA               	bnz	copy_data0
  6817                           
  6818                           ; Initialize objects allocated to BANK2 (96 bytes)
  6819                           ; load TBLPTR registers with __pidataBANK2
  6820  006C64  0E76               	movlw	low __pidataBANK2
  6821  006C66  6EF6               	movwf	tblptrl,c
  6822  006C68  0E91               	movlw	high __pidataBANK2
  6823  006C6A  6EF7               	movwf	tblptrh,c
  6824  006C6C  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  6825  006C6E  6EF8               	movwf	tblptru,c
  6826  006C70  EE02  F088         	lfsr	0,__pdataBANK2
  6827  006C74  EE20 F060          	lfsr	2,96
  6828  006C78                     copy_data1:
  6829  006C78  0009               	tblrd		*+
  6830  006C7A  CFF5 FFEE          	movff	tablat,postinc0
  6831  006C7E  50DD               	movf	postdec2,w,c
  6832  006C80  50D9               	movf	fsr2l,w,c
  6833  006C82  E1FA               	bnz	copy_data1
  6834                           
  6835                           ; Initialize objects allocated to BANK1 (22 bytes)
  6836                           ; load TBLPTR registers with __pidataBANK1
  6837  006C84  0E18               	movlw	low __pidataBANK1
  6838  006C86  6EF6               	movwf	tblptrl,c
  6839  006C88  0E9A               	movlw	high __pidataBANK1
  6840  006C8A  6EF7               	movwf	tblptrh,c
  6841  006C8C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  6842  006C8E  6EF8               	movwf	tblptru,c
  6843  006C90  EE01  F0EA         	lfsr	0,__pdataBANK1
  6844  006C94  EE20 F016          	lfsr	2,22
  6845  006C98                     copy_data2:
  6846  006C98  0009               	tblrd		*+
  6847  006C9A  CFF5 FFEE          	movff	tablat,postinc0
  6848  006C9E  50DD               	movf	postdec2,w,c
  6849  006CA0  50D9               	movf	fsr2l,w,c
  6850  006CA2  E1FA               	bnz	copy_data2
  6851                           
  6852                           ; Initialize objects allocated to BANK0 (11 bytes)
  6853                           ; load TBLPTR registers with __pidataBANK0
  6854  006CA4  0E7C               	movlw	low __pidataBANK0
  6855  006CA6  6EF6               	movwf	tblptrl,c
  6856  006CA8  0E9A               	movlw	high __pidataBANK0
  6857  006CAA  6EF7               	movwf	tblptrh,c
  6858  006CAC  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  6859  006CAE  6EF8               	movwf	tblptru,c
  6860  006CB0  EE00  F0F5         	lfsr	0,__pdataBANK0
  6861  006CB4  EE20 F00B          	lfsr	2,11
  6862  006CB8                     copy_data3:
  6863  006CB8  0009               	tblrd		*+
  6864  006CBA  CFF5 FFEE          	movff	tablat,postinc0
  6865  006CBE  50DD               	movf	postdec2,w,c
  6866  006CC0  50D9               	movf	fsr2l,w,c
  6867  006CC2  E1FA               	bnz	copy_data3
  6868                           
  6869                           ; Initialize objects allocated to COMRAM (8 bytes)
  6870                           ; load TBLPTR registers with __pidataCOMRAM
  6871  006CC4  0E87               	movlw	low __pidataCOMRAM
  6872  006CC6  6EF6               	movwf	tblptrl,c
  6873  006CC8  0E9A               	movlw	high __pidataCOMRAM
  6874  006CCA  6EF7               	movwf	tblptrh,c
  6875  006CCC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  6876  006CCE  6EF8               	movwf	tblptru,c
  6877  006CD0  EE00  F04A         	lfsr	0,__pdataCOMRAM
  6878  006CD4  EE20 F008          	lfsr	2,8
  6879  006CD8                     copy_data4:
  6880  006CD8  0009               	tblrd		*+
  6881  006CDA  CFF5 FFEE          	movff	tablat,postinc0
  6882  006CDE  50DD               	movf	postdec2,w,c
  6883  006CE0  50D9               	movf	fsr2l,w,c
  6884  006CE2  E1FA               	bnz	copy_data4
  6885                           
  6886                           ; Clear objects allocated to BANK3 (32 bytes)
  6887  006CE4  EE03  F069         	lfsr	0,__pbssBANK3
  6888  006CE8  0E20               	movlw	32
  6889  006CEA                     clear_0:
  6890  006CEA  6AEE               	clrf	postinc0,c
  6891  006CEC  06E8               	decf	wreg,f,c
  6892  006CEE  E1FD               	bnz	clear_0
  6893                           
  6894                           ; Clear objects allocated to BANK2 (136 bytes)
  6895  006CF0  EE02  F000         	lfsr	0,__pbssBANK2
  6896  006CF4  0E88               	movlw	136
  6897  006CF6                     clear_1:
  6898  006CF6  6AEE               	clrf	postinc0,c
  6899  006CF8  06E8               	decf	wreg,f,c
  6900  006CFA  E1FD               	bnz	clear_1
  6901                           
  6902                           ; Clear objects allocated to BANK1 (153 bytes)
  6903  006CFC  EE01  F000         	lfsr	0,__pbssBANK1
  6904  006D00  0E99               	movlw	153
  6905  006D02                     clear_2:
  6906  006D02  6AEE               	clrf	postinc0,c
  6907  006D04  06E8               	decf	wreg,f,c
  6908  006D06  E1FD               	bnz	clear_2
  6909                           
  6910                           ; Clear objects allocated to BANK0 (40 bytes)
  6911  006D08  EE00  F0CD         	lfsr	0,__pbssBANK0
  6912  006D0C  0E28               	movlw	40
  6913  006D0E                     clear_3:
  6914  006D0E  6AEE               	clrf	postinc0,c
  6915  006D10  06E8               	decf	wreg,f,c
  6916  006D12  E1FD               	bnz	clear_3
  6917                           
  6918                           ; Clear objects allocated to BITCOMRAM (6 bytes)
  6919  006D14  6A06               	clrf	((__pbitbssCOMRAM/(0+8)+5))& (0+255),c
  6920  006D16  6A05               	clrf	((__pbitbssCOMRAM/(0+8)+4))& (0+255),c
  6921  006D18  6A04               	clrf	((__pbitbssCOMRAM/(0+8)+3))& (0+255),c
  6922  006D1A  6A03               	clrf	((__pbitbssCOMRAM/(0+8)+2))& (0+255),c
  6923  006D1C  6A02               	clrf	((__pbitbssCOMRAM/(0+8)+1))& (0+255),c
  6924  006D1E  6A01               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  6925                           
  6926                           ; Clear objects allocated to COMRAM (20 bytes)
  6927  006D20  EE00  F02A         	lfsr	0,__pbssCOMRAM
  6928  006D24  0E14               	movlw	20
  6929  006D26                     clear_4:
  6930  006D26  6AEE               	clrf	postinc0,c
  6931  006D28  06E8               	decf	wreg,f,c
  6932  006D2A  E1FD               	bnz	clear_4
  6933  006D2C                     end_of_initialization:
  6934                           	opt stack 0
  6935  006D2C                     __end_of__initialization:
  6936                           	opt stack 0
  6937  006D2C  0E00               	movlw	low (__Lmediumconst shr (0+16))
  6938  006D2E  6EF8               	movwf	tblptru,c
  6939  006D30  0100               	movlb	0
  6940  006D32  EFA7  F035         	goto	_main	;jump to C main() function
  6941                           tblptru	equ	0xFF8
  6942                           tblptrh	equ	0xFF7
  6943                           tblptrl	equ	0xFF6
  6944                           tablat	equ	0xFF5
  6945                           postinc0	equ	0xFEE
  6946                           wreg	equ	0xFE8
  6947                           postdec2	equ	0xFDD
  6948                           fsr2l	equ	0xFD9
  6949                           
  6950                           	psect	bitbssCOMRAM
  6951  000008                     __pbitbssCOMRAM:
  6952                           	opt stack 0
  6953  000008                     Function_C_3@printOnce:
  6954                           	opt stack 0
  6955  000008                     	ds	1
  6956  000009                     Function_C_2@printOnce:
  6957                           	opt stack 0
  6958  000009                     	ds	1
  6959  00000A                     setControllerNumbers@printOnce:
  6960                           	opt stack 0
  6961  00000A                     	ds	1
  6962  00000B                     int2string@isNegative:
  6963                           	opt stack 0
  6964  00000B                     	ds	1
  6965  00000C                     doTheUnLatch@once:
  6966                           	opt stack 0
  6967  00000C                     	ds	1
  6968  00000D                     keyboardTranspose@keyPress:
  6969                           	opt stack 0
  6970  00000D                     	ds	1
  6971  00000E                     _CONTROL_MODE:
  6972                           	opt stack 0
  6973  00000E                     	ds	1
  6974  00000F                     _DRUM_MODE:
  6975                           	opt stack 0
  6976  00000F                     	ds	1
  6977  000010                     _DISPLAY_STEP_NUMBER:
  6978                           	opt stack 0
  6979  000010                     	ds	1
  6980  000011                     _flag2:
  6981                           	opt stack 0
  6982  000011                     	ds	1
  6983  000012                     _flag1:
  6984                           	opt stack 0
  6985  000012                     	ds	1
  6986  000013                     _octave_overflow:
  6987                           	opt stack 0
  6988  000013                     	ds	1
  6989  000014                     _overflow:
  6990                           	opt stack 0
  6991  000014                     	ds	1
  6992  000015                     _suppress_note_off:
  6993                           	opt stack 0
  6994  000015                     	ds	1
  6995  000016                     _suppress_note_on:
  6996                           	opt stack 0
  6997  000016                     	ds	1
  6998  000017                     _finishLastNote:
  6999                           	opt stack 0
  7000  000017                     	ds	1
  7001  000018                     _LAST_NOTE_MODE_RESET:
  7002                           	opt stack 0
  7003  000018                     	ds	1
  7004  000019                     _LAST_NOTE_MODE_TRANSPOSE:
  7005                           	opt stack 0
  7006  000019                     	ds	1
  7007  00001A                     _LAST_NOTE_MODE_KEY_RELEASE:
  7008                           	opt stack 0
  7009  00001A                     	ds	1
  7010  00001B                     _LAST_NOTE_MODE_KEY_PRESS:
  7011                           	opt stack 0
  7012  00001B                     	ds	1
  7013  00001C                     _lastNoteMode:
  7014                           	opt stack 0
  7015  00001C                     	ds	1
  7016  00001D                     _skipFirstLast:
  7017                           	opt stack 0
  7018  00001D                     	ds	1
  7019  00001E                     _AUTO_RANDOMIZE:
  7020                           	opt stack 0
  7021  00001E                     	ds	1
  7022  00001F                     _latch_was_pressed:
  7023                           	opt stack 0
  7024  00001F                     	ds	1
  7025  000020                     _AUTO_LATCH:
  7026                           	opt stack 0
  7027  000020                     	ds	1
  7028  000021                     _UN_LATCH_MODE:
  7029                           	opt stack 0
  7030  000021                     	ds	1
  7031  000022                     _LATCH:
  7032                           	opt stack 0
  7033  000022                     	ds	1
  7034  000023                     _RESET_ON_KEY_RELEASE:
  7035                           	opt stack 0
  7036  000023                     	ds	1
  7037  000024                     _RESET_ON_KEY_PRESS:
  7038                           	opt stack 0
  7039  000024                     	ds	1
  7040  000025                     _ARPEGGIO_ON:
  7041                           	opt stack 0
  7042  000025                     	ds	1
  7043  000026                     _SORT_DIRECTION:
  7044                           	opt stack 0
  7045  000026                     	ds	1
  7046  000027                     _TRANSPOSE_MODE:
  7047                           	opt stack 0
  7048  000027                     	ds	1
  7049  000028                     _print_row_2_once:
  7050                           	opt stack 0
  7051  000028                     	ds	1
  7052  000029                     _lcd_print_once:
  7053                           	opt stack 0
  7054  000029                     	ds	1
  7055  00002A                     _which_functions_are_unblocked:
  7056                           	opt stack 0
  7057  00002A                     	ds	1
  7058  00002B                     _encoder_click:
  7059                           	opt stack 0
  7060  00002B                     	ds	1
  7061  00002C                     _encoderPolarity:
  7062                           	opt stack 0
  7063  00002C                     	ds	1
  7064  00002D                     _encoderB:
  7065                           	opt stack 0
  7066  00002D                     	ds	1
  7067  00002E                     _encoderA:
  7068                           	opt stack 0
  7069  00002E                     	ds	1
  7070  00002F                     _POT_MODE:
  7071                           	opt stack 0
  7072  00002F                     	ds	1
  7073  000030                     _FIRST_READING:
  7074                           	opt stack 0
  7075  000030                     	ds	1
  7076  000031                     _ON_OFF:
  7077                           	opt stack 0
  7078  000031                     	ds	1
  7079  000032                     _light_decimal_points:
  7080                           	opt stack 0
  7081  000032                     	ds	1
  7082  000033                     _CONTROL_CHANGE_IS_BEING_SENT:
  7083                           	opt stack 0
  7084  000033                     	ds	1
  7085  000034                     _ARPEGGIO_IS_PLAYING:
  7086                           	opt stack 0
  7087  000034                     	ds	1
  7088                           tblptru	equ	0xFF8
  7089                           tblptrh	equ	0xFF7
  7090                           tblptrl	equ	0xFF6
  7091                           tablat	equ	0xFF5
  7092                           postinc0	equ	0xFEE
  7093                           wreg	equ	0xFE8
  7094                           postdec2	equ	0xFDD
  7095                           fsr2l	equ	0xFD9
  7096                           
  7097                           	psect	bssCOMRAM
  7098  00002A                     __pbssCOMRAM:
  7099                           	opt stack 0
  7100  00002A                     _arpeggioPtr:
  7101                           	opt stack 0
  7102  00002A                     	ds	2
  7103  00002C                     _toggle_state:
  7104                           	opt stack 0
  7105  00002C                     	ds	1
  7106  00002D                     _TIMER_OVERFLOWS:
  7107                           	opt stack 0
  7108  00002D                     	ds	1
  7109  00002E                     _NUM_NOTES_PRESSED:
  7110                           	opt stack 0
  7111  00002E                     	ds	1
  7112  00002F                     _parallel:
  7113                           	opt stack 0
  7114  00002F                     	ds	1
  7115  000030                     _stored_octave:
  7116                           	opt stack 0
  7117  000030                     	ds	1
  7118  000031                     _which_octave:
  7119                           	opt stack 0
  7120  000031                     	ds	1
  7121  000032                     _which_note:
  7122                           	opt stack 0
  7123  000032                     	ds	1
  7124  000033                     _startingDirection:
  7125                           	opt stack 0
  7126  000033                     	ds	1
  7127  000034                     _ARPEGGIO_TYPE:
  7128                           	opt stack 0
  7129  000034                     	ds	1
  7130  000035                     _encoder_direction:
  7131                           	opt stack 0
  7132  000035                     	ds	1
  7133  000036                     _drum:
  7134                           	opt stack 0
  7135  000036                     	ds	1
  7136  000037                     _drum_button_state_last:
  7137                           	opt stack 0
  7138  000037                     	ds	1
  7139  000038                     _drum_button_state_now:
  7140                           	opt stack 0
  7141  000038                     	ds	1
  7142  000039                     _DIGIT_MODE:
  7143                           	opt stack 0
  7144  000039                     	ds	1
  7145  00003A                     _semitone:
  7146                           	opt stack 0
  7147  00003A                     	ds	1
  7148  00003B                     _noteNumber:
  7149                           	opt stack 0
  7150  00003B                     	ds	1
  7151  00003C                     _statusByte:
  7152                           	opt stack 0
  7153  00003C                     	ds	1
  7154  00003D                     _channel:
  7155                           	opt stack 0
  7156  00003D                     	ds	1
  7157                           tblptru	equ	0xFF8
  7158                           tblptrh	equ	0xFF7
  7159                           tblptrl	equ	0xFF6
  7160                           tablat	equ	0xFF5
  7161                           postinc0	equ	0xFEE
  7162                           wreg	equ	0xFE8
  7163                           postdec2	equ	0xFDD
  7164                           fsr2l	equ	0xFD9
  7165                           
  7166                           	psect	dataCOMRAM
  7167  00004A                     __pdataCOMRAM:
  7168                           	opt stack 0
  7169  00004A                     _number_to_display:
  7170                           	opt stack 0
  7171  00004A                     	ds	2
  7172  00004C                     _NOTE_LENGTH_PULSES:
  7173                           	opt stack 0
  7174  00004C                     	ds	1
  7175  00004D                     _OCTAVES:
  7176                           	opt stack 0
  7177  00004D                     	ds	1
  7178  00004E                     _which_screen:
  7179                           	opt stack 0
  7180  00004E                     	ds	1
  7181  00004F                     _octave:
  7182                           	opt stack 0
  7183  00004F                     	ds	1
  7184  000050                     _velocity:
  7185                           	opt stack 0
  7186  000050                     	ds	1
  7187  000051                     _drumchannel:
  7188                           	opt stack 0
  7189  000051                     	ds	1
  7190                           tblptru	equ	0xFF8
  7191                           tblptrh	equ	0xFF7
  7192                           tblptrl	equ	0xFF6
  7193                           tablat	equ	0xFF5
  7194                           postinc0	equ	0xFEE
  7195                           wreg	equ	0xFE8
  7196                           postdec2	equ	0xFDD
  7197                           fsr2l	equ	0xFD9
  7198                           
  7199                           	psect	bssBANK0
  7200  0000CD                     __pbssBANK0:
  7201                           	opt stack 0
  7202  0000CD                     displayDigits@digit:
  7203                           	opt stack 0
  7204  0000CD                     	ds	4
  7205  0000D1                     _keyboard:
  7206                           	opt stack 0
  7207  0000D1                     	ds	4
  7208  0000D5                     _button_state_last:
  7209                           	opt stack 0
  7210  0000D5                     	ds	4
  7211  0000D9                     _button_state_now:
  7212                           	opt stack 0
  7213  0000D9                     	ds	4
  7214  0000DD                     _arpeggiatorLastNoteModeMenu:
  7215                           	opt stack 0
  7216  0000DD                     	ds	3
  7217  0000E0                     _arpeggiatorMenu:
  7218                           	opt stack 0
  7219  0000E0                     	ds	3
  7220  0000E3                     _savesMenu:
  7221                           	opt stack 0
  7222  0000E3                     	ds	3
  7223  0000E6                     displayDigits@number_to_display_temp:
  7224                           	opt stack 0
  7225  0000E6                     	ds	2
  7226  0000E8                     key_press_release_note_off@temp:
  7227                           	opt stack 0
  7228  0000E8                     	ds	1
  7229  0000E9                     displayString@letter_counter:
  7230                           	opt stack 0
  7231  0000E9                     	ds	1
  7232  0000EA                     displayDigits@digit_counter:
  7233                           	opt stack 0
  7234  0000EA                     	ds	1
  7235  0000EB                     keyboardTranspose@semitone_temp:
  7236                           	opt stack 0
  7237  0000EB                     	ds	1
  7238  0000EC                     _ARRAY_INDEX:
  7239                           	opt stack 0
  7240  0000EC                     	ds	1
  7241  0000ED                     _last_note:
  7242                           	opt stack 0
  7243  0000ED                     	ds	1
  7244  0000EE                     _state:
  7245                           	opt stack 0
  7246  0000EE                     	ds	1
  7247  0000EF                     _DISPLAY_MODE:
  7248                           	opt stack 0
  7249  0000EF                     	ds	1
  7250  0000F0                     _which_seventh:
  7251                           	opt stack 0
  7252  0000F0                     	ds	1
  7253  0000F1                     _which_triad:
  7254                           	opt stack 0
  7255  0000F1                     	ds	1
  7256  0000F2                     _which_mode:
  7257                           	opt stack 0
  7258  0000F2                     	ds	1
  7259  0000F3                     _KEYBOARD_MODE:
  7260                           	opt stack 0
  7261  0000F3                     	ds	1
  7262  0000F4                     _patch_number:
  7263                           	opt stack 0
  7264  0000F4                     	ds	1
  7265                           tblptru	equ	0xFF8
  7266                           tblptrh	equ	0xFF7
  7267                           tblptrl	equ	0xFF6
  7268                           tablat	equ	0xFF5
  7269                           postinc0	equ	0xFEE
  7270                           wreg	equ	0xFE8
  7271                           postdec2	equ	0xFDD
  7272                           fsr2l	equ	0xFD9
  7273                           
  7274                           	psect	dataBANK0
  7275  0000F5                     __pdataBANK0:
  7276                           	opt stack 0
  7277  0000F5                     _DRUM_CC:
  7278                           	opt stack 0
  7279  0000F5                     	ds	8
  7280  0000FD                     _iterator_focus:
  7281                           	opt stack 0
  7282  0000FD                     	ds	1
  7283  0000FE                     _ema_integer:
  7284                           	opt stack 0
  7285  0000FE                     	ds	1
  7286  0000FF                     _BPM:
  7287                           	opt stack 0
  7288  0000FF                     	ds	1
  7289                           tblptru	equ	0xFF8
  7290                           tblptrh	equ	0xFF7
  7291                           tblptrl	equ	0xFF6
  7292                           tablat	equ	0xFF5
  7293                           postinc0	equ	0xFEE
  7294                           wreg	equ	0xFE8
  7295                           postdec2	equ	0xFDD
  7296                           fsr2l	equ	0xFD9
  7297                           
  7298                           	psect	bssBANK1
  7299  000100                     __pbssBANK1:
  7300                           	opt stack 0
  7301  000100                     displayString@letter:
  7302                           	opt stack 0
  7303  000100                     	ds	4
  7304  000104                     _ema_alpha:
  7305                           	opt stack 0
  7306  000104                     	ds	4
  7307  000108                     _arpeggiatorLastNoteModeResetMenu:
  7308                           	opt stack 0
  7309  000108                     	ds	3
  7310  00010B                     _arpeggiatorLastNoteModeTransposeMenu:
  7311                           	opt stack 0
  7312  00010B                     	ds	3
  7313  00010E                     _arpeggiatorLastNoteModeKeyReleaseMenu:
  7314                           	opt stack 0
  7315  00010E                     	ds	3
  7316  000111                     _arpeggiatorLastNoteModeKeyPressMenu:
  7317                           	opt stack 0
  7318  000111                     	ds	3
  7319  000114                     _arpeggiatorSkipFirstLastMenu:
  7320                           	opt stack 0
  7321  000114                     	ds	3
  7322  000117                     _arpeggiatorRandomizeTypeMenu:
  7323                           	opt stack 0
  7324  000117                     	ds	3
  7325  00011A                     _arpeggiatorRandomizeSkipMenu:
  7326                           	opt stack 0
  7327  00011A                     	ds	3
  7328  00011D                     _arpeggiatorUnLatchModeMenu:
  7329                           	opt stack 0
  7330  00011D                     	ds	3
  7331  000120                     _arpeggiatorAutoLatchOnOffMenu:
  7332                           	opt stack 0
  7333  000120                     	ds	3
  7334  000123                     _arpeggiatorLatchOnOffMenu:
  7335                           	opt stack 0
  7336  000123                     	ds	3
  7337  000126                     _arpeggiatorLatchMenu:
  7338                           	opt stack 0
  7339  000126                     	ds	3
  7340  000129                     _arpeggiatorNoteLengthMenu:
  7341                           	opt stack 0
  7342  000129                     	ds	3
  7343  00012C                     _arpeggiatorTypeMenu:
  7344                           	opt stack 0
  7345  00012C                     	ds	3
  7346  00012F                     _arpeggiatorOctavesMenu:
  7347                           	opt stack 0
  7348  00012F                     	ds	3
  7349  000132                     _arpeggiatorTempoMenu:
  7350                           	opt stack 0
  7351  000132                     	ds	3
  7352  000135                     _arpeggiatorOnOffMenu:
  7353                           	opt stack 0
  7354  000135                     	ds	3
  7355  000138                     _encoderPolarityMenu:
  7356                           	opt stack 0
  7357  000138                     	ds	3
  7358  00013B                     _eepromMenu:
  7359                           	opt stack 0
  7360  00013B                     	ds	3
  7361  00013E                     _drumChannelMenu:
  7362                           	opt stack 0
  7363  00013E                     	ds	3
  7364  000141                     _mainChannelMenu:
  7365                           	opt stack 0
  7366  000141                     	ds	3
  7367  000144                     _programChangeMenu:
  7368                           	opt stack 0
  7369  000144                     	ds	3
  7370  000147                     _midiChannelMenu:
  7371                           	opt stack 0
  7372  000147                     	ds	3
  7373  00014A                     _joystickCCMenu:
  7374                           	opt stack 0
  7375  00014A                     	ds	3
  7376  00014D                     _slidepotsCCMenu:
  7377                           	opt stack 0
  7378  00014D                     	ds	3
  7379  000150                     _potsCCMenu:
  7380                           	opt stack 0
  7381  000150                     	ds	3
  7382  000153                     _potsAlphaMenu:
  7383                           	opt stack 0
  7384  000153                     	ds	3
  7385  000156                     _potsResoMenu:
  7386                           	opt stack 0
  7387  000156                     	ds	3
  7388  000159                     _potsMenu:
  7389                           	opt stack 0
  7390  000159                     	ds	3
  7391  00015C                     _drumCCMenu:
  7392                           	opt stack 0
  7393  00015C                     	ds	3
  7394  00015F                     _drumNNMenu:
  7395                           	opt stack 0
  7396  00015F                     	ds	3
  7397  000162                     _drumCCTypeMenu:
  7398                           	opt stack 0
  7399  000162                     	ds	3
  7400  000165                     _drumMenu:
  7401                           	opt stack 0
  7402  000165                     	ds	3
  7403  000168                     _transposeMenu:
  7404                           	opt stack 0
  7405  000168                     	ds	3
  7406  00016B                     _seventhMenu:
  7407                           	opt stack 0
  7408  00016B                     	ds	3
  7409  00016E                     _triadMenu:
  7410                           	opt stack 0
  7411  00016E                     	ds	3
  7412  000171                     _modeMenu:
  7413                           	opt stack 0
  7414  000171                     	ds	3
  7415  000174                     _keyboardMenu:
  7416                           	opt stack 0
  7417  000174                     	ds	3
  7418  000177                     _mainMenu:
  7419                           	opt stack 0
  7420  000177                     	ds	3
  7421  00017A                     displayDigits@number_to_display_last:
  7422                           	opt stack 0
  7423  00017A                     	ds	2
  7424  00017C                     _TIMER_PRELOAD:
  7425                           	opt stack 0
  7426  00017C                     	ds	2
  7427  00017E                     _last_octave:
  7428                           	opt stack 0
  7429  00017E                     	ds	1
  7430  00017F                     _encoder_state_last:
  7431                           	opt stack 0
  7432  00017F                     	ds	1
  7433  000180                     _encoder_state_now:
  7434                           	opt stack 0
  7435  000180                     	ds	1
  7436  000181                     _GLOBAL_CC_VALUE:
  7437                           	opt stack 0
  7438  000181                     	ds	1
  7439  000182                     _GLOBAL_CC_NUMBER:
  7440                           	opt stack 0
  7441  000182                     	ds	1
  7442  000183                     _GLOBAL_STATUS_BYTE:
  7443                           	opt stack 0
  7444  000183                     	ds	1
  7445  000184                     _ARPEGGIO:
  7446                           	opt stack 0
  7447  000184                     	ds	16
  7448  000194                     _string2display:
  7449                           	opt stack 0
  7450  000194                     	ds	5
  7451                           tblptru	equ	0xFF8
  7452                           tblptrh	equ	0xFF7
  7453                           tblptrl	equ	0xFF6
  7454                           tablat	equ	0xFF5
  7455                           postinc0	equ	0xFEE
  7456                           wreg	equ	0xFE8
  7457                           postdec2	equ	0xFDD
  7458                           fsr2l	equ	0xFD9
  7459                           
  7460                           	psect	dataBANK1
  7461  0001EA                     __pdataBANK1:
  7462                           	opt stack 0
  7463  0001EA                     _DRUM_NOTE:
  7464                           	opt stack 0
  7465  0001EA                     	ds	8
  7466  0001F2                     _randx:
  7467                           	opt stack 0
  7468  0001F2                     	ds	4
  7469  0001F6                     _HYST_VAL:
  7470                           	opt stack 0
  7471  0001F6                     	ds	2
  7472  0001F8                     _PRESCALER:
  7473                           	opt stack 0
  7474  0001F8                     	ds	1
  7475  0001F9                     _PPQN:
  7476                           	opt stack 0
  7477  0001F9                     	ds	1
  7478  0001FA                     _command:
  7479                           	opt stack 0
  7480  0001FA                     	ds	1
  7481  0001FB                     _string_to_display:
  7482                           	opt stack 0
  7483  0001FB                     	ds	5
  7484                           tblptru	equ	0xFF8
  7485                           tblptrh	equ	0xFF7
  7486                           tblptrl	equ	0xFF6
  7487                           tablat	equ	0xFF5
  7488                           postinc0	equ	0xFEE
  7489                           wreg	equ	0xFE8
  7490                           postdec2	equ	0xFDD
  7491                           fsr2l	equ	0xFD9
  7492                           
  7493                           	psect	bssBANK2
  7494  000200                     __pbssBANK2:
  7495                           	opt stack 0
  7496  000200                     _potentiometer_filtered_last:
  7497                           	opt stack 0
  7498  000200                     	ds	32
  7499  000220                     _potentiometer_filtered_now:
  7500                           	opt stack 0
  7501  000220                     	ds	32
  7502  000240                     _ema_sum:
  7503                           	opt stack 0
  7504  000240                     	ds	32
  7505  000260                     readPotentiometers@count:
  7506                           	opt stack 0
  7507  000260                     	ds	4
  7508  000264                     _count_ISR:
  7509                           	opt stack 0
  7510  000264                     	ds	4
  7511  000268                     _ARPEGGIO_RANDOM:
  7512                           	opt stack 0
  7513  000268                     	ds	16
  7514  000278                     _ARPEGGIO_SORTED:
  7515                           	opt stack 0
  7516  000278                     	ds	16
  7517                           tblptru	equ	0xFF8
  7518                           tblptrh	equ	0xFF7
  7519                           tblptrl	equ	0xFF6
  7520                           tablat	equ	0xFF5
  7521                           postinc0	equ	0xFEE
  7522                           wreg	equ	0xFE8
  7523                           postdec2	equ	0xFDD
  7524                           fsr2l	equ	0xFD9
  7525                           
  7526                           	psect	dataBANK2
  7527  000288                     __pdataBANK2:
  7528                           	opt stack 0
  7529  000288                     _inputPotsArray:
  7530                           	opt stack 0
  7531  000288                     	ds	48
  7532  0002B8                     _NOTE_LENGTH_PULSES_ARRAY:
  7533                           	opt stack 0
  7534  0002B8                     	ds	12
  7535  0002C4                     _number_of_interrupts:
  7536                           	opt stack 0
  7537  0002C4                     	ds	4
  7538  0002C8                     _diminished_7th:
  7539                           	opt stack 0
  7540  0002C8                     	ds	4
  7541  0002CC                     _half_diminished_7th:
  7542                           	opt stack 0
  7543  0002CC                     	ds	4
  7544  0002D0                     _minor_7th:
  7545                           	opt stack 0
  7546  0002D0                     	ds	4
  7547  0002D4                     _major_7th:
  7548                           	opt stack 0
  7549  0002D4                     	ds	4
  7550  0002D8                     _dominant_7th:
  7551                           	opt stack 0
  7552  0002D8                     	ds	4
  7553  0002DC                     _diminished_triad:
  7554                           	opt stack 0
  7555  0002DC                     	ds	3
  7556  0002DF                     _augmented_triad:
  7557                           	opt stack 0
  7558  0002DF                     	ds	3
  7559  0002E2                     _minor_triad:
  7560                           	opt stack 0
  7561  0002E2                     	ds	3
  7562  0002E5                     _major_triad:
  7563                           	opt stack 0
  7564  0002E5                     	ds	3
  7565                           tblptru	equ	0xFF8
  7566                           tblptrh	equ	0xFF7
  7567                           tblptrl	equ	0xFF6
  7568                           tablat	equ	0xFF5
  7569                           postinc0	equ	0xFEE
  7570                           wreg	equ	0xFE8
  7571                           postdec2	equ	0xFDD
  7572                           fsr2l	equ	0xFD9
  7573                           
  7574                           	psect	bssBANK3
  7575  000369                     __pbssBANK3:
  7576                           	opt stack 0
  7577  000369                     _potentiometer_raw:
  7578                           	opt stack 0
  7579  000369                     	ds	32
  7580                           tblptru	equ	0xFF8
  7581                           tblptrh	equ	0xFF7
  7582                           tblptrl	equ	0xFF6
  7583                           tablat	equ	0xFF5
  7584                           postinc0	equ	0xFEE
  7585                           wreg	equ	0xFE8
  7586                           postdec2	equ	0xFDD
  7587                           fsr2l	equ	0xFD9
  7588                           
  7589                           	psect	dataBANK3
  7590  000300                     __pdataBANK3:
  7591                           	opt stack 0
  7592  000300                     _menuArray:
  7593                           	opt stack 0
  7594  000300                     	ds	105
  7595                           tblptru	equ	0xFF8
  7596                           tblptrh	equ	0xFF7
  7597                           tblptrl	equ	0xFF6
  7598                           tablat	equ	0xFF5
  7599                           postinc0	equ	0xFEE
  7600                           wreg	equ	0xFE8
  7601                           postdec2	equ	0xFDD
  7602                           fsr2l	equ	0xFD9
  7603                           
  7604                           	psect	cstackBANK1
  7605  000199                     __pcstackBANK1:
  7606                           	opt stack 0
  7607  000199                     _readPotentiometers$5910:
  7608                           	opt stack 0
  7609  000199                     loadFromEEPROM@to_load:
  7610                           	opt stack 0
  7611                           
  7612                           ; 75 bytes @ 0x0
  7613  000199                     	ds	4
  7614  00019D                     readPotentiometers@i_3437:
  7615                           	opt stack 0
  7616                           
  7617                           ; 1 bytes @ 0x4
  7618  00019D                     	ds	1
  7619  00019E                     readPotentiometers@i:
  7620                           	opt stack 0
  7621                           
  7622                           ; 1 bytes @ 0x5
  7623  00019E                     	ds	1
  7624  00019F                     readPotentiometers@i_3438:
  7625                           	opt stack 0
  7626                           
  7627                           ; 1 bytes @ 0x6
  7628  00019F                     	ds	1
  7629  0001A0                     ??_analogInputs:
  7630                           
  7631                           ; 1 bytes @ 0x7
  7632  0001A0                     	ds	68
  7633  0001E4                     loadFromEEPROM@baseAddress:
  7634                           	opt stack 0
  7635                           
  7636                           ; 2 bytes @ 0x4B
  7637  0001E4                     	ds	2
  7638  0001E6                     loadFromEEPROM@slotNumber:
  7639                           	opt stack 0
  7640                           
  7641                           ; 1 bytes @ 0x4D
  7642  0001E6                     	ds	1
  7643  0001E7                     loadFromEEPROM@byte_count:
  7644                           	opt stack 0
  7645                           
  7646                           ; 2 bytes @ 0x4E
  7647  0001E7                     	ds	2
  7648  0001E9                     ??_main:
  7649                           
  7650                           ; 1 bytes @ 0x50
  7651  0001E9                     	ds	1
  7652                           tblptru	equ	0xFF8
  7653                           tblptrh	equ	0xFF7
  7654                           tblptrl	equ	0xFF6
  7655                           tablat	equ	0xFF5
  7656                           postinc0	equ	0xFEE
  7657                           wreg	equ	0xFE8
  7658                           postdec2	equ	0xFDD
  7659                           fsr2l	equ	0xFD9
  7660                           
  7661                           	psect	cstackBANK0
  7662  000060                     __pcstackBANK0:
  7663                           	opt stack 0
  7664  000060                     ??_rotateArrayLeft:
  7665  000060                     ??_processEncoderBuxton:
  7666  000060                     ??_buttonInputsSerial:
  7667  000060                     ?_ADC_Read:
  7668                           	opt stack 0
  7669  000060                     ?___wmul:
  7670                           	opt stack 0
  7671  000060                     ?___aldiv:
  7672                           	opt stack 0
  7673  000060                     ?___xxtofl:
  7674                           	opt stack 0
  7675  000060                     Lcd_SetBit@data_bit:
  7676                           	opt stack 0
  7677  000060                     noteOffDrum@pitch:
  7678                           	opt stack 0
  7679  000060                     noteOnDrum@pitch:
  7680                           	opt stack 0
  7681  000060                     controlChange@controllerNumber:
  7682                           	opt stack 0
  7683  000060                     pitchBend@lowByte:
  7684                           	opt stack 0
  7685  000060                     programChange@data1:
  7686                           	opt stack 0
  7687  000060                     setControllerResolution@i:
  7688                           	opt stack 0
  7689  000060                     wait_one_pulse@mode:
  7690                           	opt stack 0
  7691  000060                     copy_array@i:
  7692                           	opt stack 0
  7693  000060                     printThisNumber@n:
  7694                           	opt stack 0
  7695  000060                     int2string@number:
  7696                           	opt stack 0
  7697  000060                     Read_b_eep@badd:
  7698                           	opt stack 0
  7699  000060                     Write_b_eep@badd:
  7700                           	opt stack 0
  7701  000060                     ___wmul@multiplier:
  7702                           	opt stack 0
  7703  000060                     srand@x:
  7704                           	opt stack 0
  7705  000060                     strcpy@to:
  7706                           	opt stack 0
  7707  000060                     ___aldiv@dividend:
  7708                           	opt stack 0
  7709  000060                     ___xxtofl@val:
  7710                           	opt stack 0
  7711                           
  7712                           ; 4 bytes @ 0x0
  7713  000060                     	ds	1
  7714  000061                     ??_Lcd_Cmd:
  7715  000061                     ??_playTriad:
  7716  000061                     ??_playSeventh:
  7717  000061                     Lcd_Print_Char@Lower_Nibble:
  7718                           	opt stack 0
  7719  000061                     noteOffDrum@velocity:
  7720                           	opt stack 0
  7721  000061                     noteOnDrum@velocity:
  7722                           	opt stack 0
  7723  000061                     controlChange@value:
  7724                           	opt stack 0
  7725  000061                     pitchBend@highByte:
  7726                           	opt stack 0
  7727  000061                     programChange@data2:
  7728                           	opt stack 0
  7729  000061                     playDiatonicTriadMajor@index:
  7730                           	opt stack 0
  7731  000061                     playDiatonicSeventhMajor@index:
  7732                           	opt stack 0
  7733  000061                     playDiatonicTriadMinor@index:
  7734                           	opt stack 0
  7735  000061                     playDiatonicSeventhMinor@index:
  7736                           	opt stack 0
  7737  000061                     findArrayIndex@pitch_of_key_release:
  7738                           	opt stack 0
  7739                           
  7740                           ; 1 bytes @ 0x1
  7741  000061                     	ds	1
  7742  000062                     ??_playDiatonicTriadMajor:
  7743  000062                     ??_playDiatonicTriadMinor:
  7744  000062                     ??_playDiatonicSeventhMajor:
  7745  000062                     ??_playDiatonicSeventhMinor:
  7746  000062                     ??_ADC_Read:
  7747  000062                     ??_int2string:
  7748  000062                     Lcd_Cmd@a:
  7749                           	opt stack 0
  7750  000062                     Lcd_Print_Char@Upper_Nibble:
  7751                           	opt stack 0
  7752  000062                     noteOffDrum@channel:
  7753                           	opt stack 0
  7754  000062                     noteOnDrum@channel:
  7755                           	opt stack 0
  7756  000062                     controlChange@channel:
  7757                           	opt stack 0
  7758  000062                     pitchBend@channel:
  7759                           	opt stack 0
  7760  000062                     programChange@channel:
  7761                           	opt stack 0
  7762  000062                     findArrayIndex@i:
  7763                           	opt stack 0
  7764  000062                     Write_b_eep@bdat:
  7765                           	opt stack 0
  7766  000062                     ___wmul@multiplicand:
  7767                           	opt stack 0
  7768  000062                     strcpy@from:
  7769                           	opt stack 0
  7770                           
  7771                           ; 2 bytes @ 0x2
  7772  000062                     	ds	1
  7773  000063                     ??_processPotentiometers:
  7774  000063                     ??_Lcd_Start:
  7775  000063                     Lcd_Set_Cursor@b:
  7776                           	opt stack 0
  7777  000063                     Lcd_Print_Char@data:
  7778                           	opt stack 0
  7779  000063                     Write_b_eep@GIE_BIT_VAL:
  7780                           	opt stack 0
  7781                           
  7782                           ; 1 bytes @ 0x3
  7783  000063                     	ds	1
  7784  000064                     ??___xxtofl:
  7785  000064                     Lcd_Set_Cursor@a:
  7786                           	opt stack 0
  7787  000064                     ADC_Read@adc_channel:
  7788                           	opt stack 0
  7789  000064                     buttonInputsSerial@i:
  7790                           	opt stack 0
  7791  000064                     Lcd_Start@i:
  7792                           	opt stack 0
  7793  000064                     Lcd_Print_Char@i:
  7794                           	opt stack 0
  7795  000064                     int2string@number_to_display_temp:
  7796                           	opt stack 0
  7797  000064                     ___wmul@product:
  7798                           	opt stack 0
  7799  000064                     strcpy@cp:
  7800                           	opt stack 0
  7801  000064                     ___aldiv@divisor:
  7802                           	opt stack 0
  7803  000064                     saveToEEPROM@to_save:
  7804                           	opt stack 0
  7805                           
  7806                           ; 75 bytes @ 0x4
  7807  000064                     	ds	1
  7808  000065                     Lcd_Set_Cursor@z:
  7809                           	opt stack 0
  7810  000065                     buttonInputsSerial@i_4482:
  7811                           	opt stack 0
  7812  000065                     playTriad@triad_p:
  7813                           	opt stack 0
  7814  000065                     playSeventh@seventh_p:
  7815                           	opt stack 0
  7816                           
  7817                           ; 2 bytes @ 0x5
  7818  000065                     	ds	1
  7819  000066                     ??_displayTest:
  7820  000066                     ??_initializeMenuArray:
  7821  000066                     Lcd_Set_Cursor@y:
  7822                           	opt stack 0
  7823  000066                     playDiatonicTriadMajor@i:
  7824                           	opt stack 0
  7825  000066                     playDiatonicSeventhMajor@i:
  7826                           	opt stack 0
  7827  000066                     playDiatonicTriadMinor@pitch:
  7828                           	opt stack 0
  7829  000066                     playDiatonicSeventhMinor@pitch:
  7830                           	opt stack 0
  7831  000066                     processPotentiometers@lowByte:
  7832                           	opt stack 0
  7833  000066                     Lcd_Print_Char@i_59:
  7834                           	opt stack 0
  7835                           
  7836                           ; 2 bytes @ 0x6
  7837  000066                     	ds	1
  7838  000067                     Lcd_Set_Cursor@temp:
  7839                           	opt stack 0
  7840  000067                     playTriad@i:
  7841                           	opt stack 0
  7842  000067                     playSeventh@i:
  7843                           	opt stack 0
  7844  000067                     playDiatonicTriadMajor@i_1713:
  7845                           	opt stack 0
  7846  000067                     playDiatonicSeventhMajor@i_1718:
  7847                           	opt stack 0
  7848  000067                     playDiatonicTriadMinor@i:
  7849                           	opt stack 0
  7850  000067                     playDiatonicSeventhMinor@i:
  7851                           	opt stack 0
  7852  000067                     initializeMenuArray@NumberOfElements:
  7853                           	opt stack 0
  7854  000067                     processPotentiometers@highByte:
  7855                           	opt stack 0
  7856  000067                     rotateArrayLeft@array_index:
  7857                           	opt stack 0
  7858                           
  7859                           ; 1 bytes @ 0x7
  7860  000067                     	ds	1
  7861  000068                     playTriad@i_1691:
  7862                           	opt stack 0
  7863  000068                     playSeventh@i_1696:
  7864                           	opt stack 0
  7865  000068                     playDiatonicTriadMajor@pitch:
  7866                           	opt stack 0
  7867  000068                     playDiatonicSeventhMajor@pitch:
  7868                           	opt stack 0
  7869  000068                     playDiatonicTriadMinor@i_1723:
  7870                           	opt stack 0
  7871  000068                     playDiatonicSeventhMinor@i_1728:
  7872                           	opt stack 0
  7873  000068                     initializeMenuArray@i:
  7874                           	opt stack 0
  7875  000068                     processPotentiometers@i:
  7876                           	opt stack 0
  7877  000068                     rotateArrayLeft@i:
  7878                           	opt stack 0
  7879  000068                     ___aldiv@counter:
  7880                           	opt stack 0
  7881  000068                     ___xxtofl@sign:
  7882                           	opt stack 0
  7883  000068                     Lcd_Print_String@a:
  7884                           	opt stack 0
  7885                           
  7886                           ; 2 bytes @ 0x8
  7887  000068                     	ds	1
  7888  000069                     ??_add_notes_to_arpeggio:
  7889  000069                     playTriad@pitch:
  7890                           	opt stack 0
  7891  000069                     playSeventh@pitch:
  7892                           	opt stack 0
  7893  000069                     delete_notes_from_arpeggio@pitch:
  7894                           	opt stack 0
  7895  000069                     ___aldiv@sign:
  7896                           	opt stack 0
  7897  000069                     ___xxtofl@exp:
  7898                           	opt stack 0
  7899                           
  7900                           ; 1 bytes @ 0x9
  7901  000069                     	ds	1
  7902  00006A                     ??_Lcd_Print_String:
  7903  00006A                     delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT:
  7904                           	opt stack 0
  7905  00006A                     ___aldiv@quotient:
  7906                           	opt stack 0
  7907  00006A                     ___xxtofl@arg:
  7908                           	opt stack 0
  7909                           
  7910                           ; 4 bytes @ 0xA
  7911  00006A                     	ds	2
  7912  00006C                     Lcd_Print_String@i:
  7913                           	opt stack 0
  7914                           
  7915                           ; 2 bytes @ 0xC
  7916  00006C                     	ds	2
  7917  00006E                     ??_exitFunction:
  7918  00006E                     ??_exitSave:
  7919  00006E                     ??_exitLoad:
  7920  00006E                     ??_eepromExit:
  7921  00006E                     ??_Function_G_3:
  7922  00006E                     ?___flmul:
  7923                           	opt stack 0
  7924  00006E                     ?_map:
  7925                           	opt stack 0
  7926  00006E                     map@x:
  7927                           	opt stack 0
  7928  00006E                     ___flmul@b:
  7929                           	opt stack 0
  7930                           
  7931                           ; 4 bytes @ 0xE
  7932  00006E                     	ds	2
  7933  000070                     add_notes_to_arpeggio@pitch:
  7934                           	opt stack 0
  7935                           
  7936                           ; 1 bytes @ 0x10
  7937  000070                     	ds	1
  7938  000071                     ??_playThisNote:
  7939  000071                     playThisNotePentatonic@index:
  7940                           	opt stack 0
  7941  000071                     playThisNote8@index:
  7942                           	opt stack 0
  7943                           
  7944                           ; 1 bytes @ 0x11
  7945  000071                     	ds	1
  7946  000072                     ??_playThisNotePentatonic:
  7947  000072                     ??_playThisNote8:
  7948  000072                     map@in_min:
  7949                           	opt stack 0
  7950  000072                     ___flmul@a:
  7951                           	opt stack 0
  7952                           
  7953                           ; 4 bytes @ 0x12
  7954  000072                     	ds	3
  7955  000075                     playThisNote@pitch:
  7956                           	opt stack 0
  7957                           
  7958                           ; 1 bytes @ 0x15
  7959  000075                     	ds	1
  7960  000076                     ??___flmul:
  7961  000076                     playThisNotePentatonic@temp_pitch:
  7962                           	opt stack 0
  7963  000076                     keyboard_all_note_efficient@pitch:
  7964                           	opt stack 0
  7965  000076                     playThisNote8@pitch:
  7966                           	opt stack 0
  7967  000076                     map@in_max:
  7968                           	opt stack 0
  7969                           
  7970                           ; 4 bytes @ 0x16
  7971  000076                     	ds	1
  7972  000077                     keyboard_sharps_only_efficient@pitch:
  7973                           	opt stack 0
  7974  000077                     playThisNote8@temp_pitch:
  7975                           	opt stack 0
  7976                           
  7977                           ; 1 bytes @ 0x17
  7978  000077                     	ds	1
  7979  000078                     keyboard_sharps_only_efficient@index:
  7980                           	opt stack 0
  7981  000078                     playThisNote8@mode_p:
  7982                           	opt stack 0
  7983                           
  7984                           ; 2 bytes @ 0x18
  7985  000078                     	ds	2
  7986  00007A                     ??_doTheUnLatch:
  7987  00007A                     keyboard_eight_note_efficient@pitch:
  7988                           	opt stack 0
  7989  00007A                     ___flmul@sign:
  7990                           	opt stack 0
  7991  00007A                     map@out_min:
  7992                           	opt stack 0
  7993                           
  7994                           ; 4 bytes @ 0x1A
  7995  00007A                     	ds	1
  7996  00007B                     keyboard_eight_note_efficient@index:
  7997                           	opt stack 0
  7998  00007B                     ___flmul@aexp:
  7999                           	opt stack 0
  8000                           
  8001                           ; 1 bytes @ 0x1B
  8002  00007B                     	ds	1
  8003  00007C                     ___flmul@grs:
  8004                           	opt stack 0
  8005                           
  8006                           ; 4 bytes @ 0x1C
  8007  00007C                     	ds	2
  8008  00007E                     ??_processOctave:
  8009  00007E                     map@out_max:
  8010                           	opt stack 0
  8011                           
  8012                           ; 4 bytes @ 0x1E
  8013  00007E                     	ds	2
  8014  000080                     ___flmul@bexp:
  8015                           	opt stack 0
  8016                           
  8017                           ; 1 bytes @ 0x20
  8018  000080                     	ds	1
  8019  000081                     ___flmul@prod:
  8020                           	opt stack 0
  8021                           
  8022                           ; 4 bytes @ 0x21
  8023  000081                     	ds	1
  8024  000082                     ??_map:
  8025                           
  8026                           ; 1 bytes @ 0x22
  8027  000082                     	ds	3
  8028  000085                     ___flmul@temp:
  8029                           	opt stack 0
  8030                           
  8031                           ; 2 bytes @ 0x25
  8032  000085                     	ds	2
  8033  000087                     ?___fldiv:
  8034                           	opt stack 0
  8035  000087                     ___fldiv@b:
  8036                           	opt stack 0
  8037                           
  8038                           ; 4 bytes @ 0x27
  8039  000087                     	ds	4
  8040  00008B                     ___fldiv@a:
  8041                           	opt stack 0
  8042                           
  8043                           ; 4 bytes @ 0x2B
  8044  00008B                     	ds	4
  8045  00008F                     ??___fldiv:
  8046                           
  8047                           ; 1 bytes @ 0x2F
  8048  00008F                     	ds	4
  8049  000093                     ___fldiv@sign:
  8050                           	opt stack 0
  8051                           
  8052                           ; 1 bytes @ 0x33
  8053  000093                     	ds	1
  8054  000094                     ___fldiv@rem:
  8055                           	opt stack 0
  8056                           
  8057                           ; 4 bytes @ 0x34
  8058  000094                     	ds	4
  8059  000098                     ___fldiv@new_exp:
  8060                           	opt stack 0
  8061                           
  8062                           ; 2 bytes @ 0x38
  8063  000098                     	ds	2
  8064  00009A                     ___fldiv@grs:
  8065                           	opt stack 0
  8066                           
  8067                           ; 4 bytes @ 0x3A
  8068  00009A                     	ds	4
  8069  00009E                     ___fldiv@bexp:
  8070                           	opt stack 0
  8071                           
  8072                           ; 1 bytes @ 0x3E
  8073  00009E                     	ds	1
  8074  00009F                     ___fldiv@aexp:
  8075                           	opt stack 0
  8076                           
  8077                           ; 1 bytes @ 0x3F
  8078  00009F                     	ds	1
  8079  0000A0                     ?___flneg:
  8080                           	opt stack 0
  8081  0000A0                     ___flneg@f1:
  8082                           	opt stack 0
  8083                           
  8084                           ; 4 bytes @ 0x40
  8085  0000A0                     	ds	4
  8086  0000A4                     ?___fladd:
  8087                           	opt stack 0
  8088  0000A4                     ___fladd@b:
  8089                           	opt stack 0
  8090                           
  8091                           ; 4 bytes @ 0x44
  8092  0000A4                     	ds	4
  8093  0000A8                     ___fladd@a:
  8094                           	opt stack 0
  8095                           
  8096                           ; 4 bytes @ 0x48
  8097  0000A8                     	ds	4
  8098  0000AC                     ??___fladd:
  8099                           
  8100                           ; 1 bytes @ 0x4C
  8101  0000AC                     	ds	3
  8102  0000AF                     saveToEEPROM@baseAddress:
  8103                           	opt stack 0
  8104                           
  8105                           ; 2 bytes @ 0x4F
  8106  0000AF                     	ds	2
  8107  0000B1                     saveToEEPROM@slotNumber:
  8108                           	opt stack 0
  8109                           
  8110                           ; 1 bytes @ 0x51
  8111  0000B1                     	ds	1
  8112  0000B2                     saveToEEPROM@byte_count:
  8113                           	opt stack 0
  8114                           
  8115                           ; 2 bytes @ 0x52
  8116  0000B2                     	ds	2
  8117  0000B4                     initializeSaveSlotsOnce@initializeSlotsOnce:
  8118                           	opt stack 0
  8119  0000B4                     ___fladd@signs:
  8120                           	opt stack 0
  8121                           
  8122                           ; 1 bytes @ 0x54
  8123  0000B4                     	ds	1
  8124  0000B5                     ___fladd@aexp:
  8125                           	opt stack 0
  8126                           
  8127                           ; 1 bytes @ 0x55
  8128  0000B5                     	ds	1
  8129  0000B6                     ___fladd@bexp:
  8130                           	opt stack 0
  8131                           
  8132                           ; 1 bytes @ 0x56
  8133  0000B6                     	ds	1
  8134  0000B7                     ___fladd@grs:
  8135                           	opt stack 0
  8136                           
  8137                           ; 1 bytes @ 0x57
  8138  0000B7                     	ds	1
  8139  0000B8                     ?___fltol:
  8140                           	opt stack 0
  8141  0000B8                     ___fltol@f1:
  8142                           	opt stack 0
  8143                           
  8144                           ; 4 bytes @ 0x58
  8145  0000B8                     	ds	4
  8146  0000BC                     ??___fltol:
  8147                           
  8148                           ; 1 bytes @ 0x5C
  8149  0000BC                     	ds	4
  8150  0000C0                     ___fltol@sign1:
  8151                           	opt stack 0
  8152                           
  8153                           ; 1 bytes @ 0x60
  8154  0000C0                     	ds	1
  8155  0000C1                     ___fltol@exp1:
  8156                           	opt stack 0
  8157                           
  8158                           ; 1 bytes @ 0x61
  8159  0000C1                     	ds	1
  8160  0000C2                     ??_readPotentiometers:
  8161  0000C2                     ?_calculate_pulse_length:
  8162                           	opt stack 0
  8163                           
  8164                           ; 2 bytes @ 0x62
  8165  0000C2                     	ds	2
  8166  0000C4                     calculate_pulse_length@s_tick:
  8167                           	opt stack 0
  8168                           
  8169                           ; 4 bytes @ 0x64
  8170  0000C4                     	ds	3
  8171  0000C7                     ??_Function_C_2:
  8172  0000C7                     ??_Function_C_3:
  8173  0000C7                     Function_H_1@temp:
  8174                           	opt stack 0
  8175  0000C7                     Function_H_6_1@temp:
  8176                           	opt stack 0
  8177                           
  8178                           ; 1 bytes @ 0x67
  8179  0000C7                     	ds	1
  8180  0000C8                     setControllerNumbers@array_index:
  8181                           	opt stack 0
  8182  0000C8                     Function_C_2@array_index:
  8183                           	opt stack 0
  8184  0000C8                     Function_C_3@array_index:
  8185                           	opt stack 0
  8186  0000C8                     Function_H_5@i:
  8187                           	opt stack 0
  8188  0000C8                     _calculate_pulse_length$5911:
  8189                           	opt stack 0
  8190                           
  8191                           ; 4 bytes @ 0x68
  8192  0000C8                     	ds	1
  8193  0000C9                     Function_D_3@array_index:
  8194                           	opt stack 0
  8195  0000C9                     Function_D_4@array_index:
  8196                           	opt stack 0
  8197  0000C9                     Function_D_5@array_index:
  8198                           	opt stack 0
  8199                           
  8200                           ; 1 bytes @ 0x69
  8201  0000C9                     	ds	1
  8202  0000CA                     
  8203                           ; 1 bytes @ 0x6A
  8204  0000CA                     	ds	2
  8205  0000CC                     selectSlotOnBoot@slot:
  8206                           	opt stack 0
  8207                           
  8208                           ; 1 bytes @ 0x6C
  8209  0000CC                     	ds	1
  8210                           tblptru	equ	0xFF8
  8211                           tblptrh	equ	0xFF7
  8212                           tblptrl	equ	0xFF6
  8213                           tablat	equ	0xFF5
  8214                           postinc0	equ	0xFEE
  8215                           wreg	equ	0xFE8
  8216                           postdec2	equ	0xFDD
  8217                           fsr2l	equ	0xFD9
  8218                           
  8219                           	psect	cstackCOMRAM
  8220  000007                     __pcstackCOMRAM:
  8221                           	opt stack 0
  8222  000007                     ??_displayDigits:
  8223  000007                     ??_encoderInputsBuxton:
  8224  000007                     
  8225                           ; 1 bytes @ 0x0
  8226  000007                     	ds	1
  8227  000008                     displayString@i:
  8228                           	opt stack 0
  8229                           
  8230                           ; 1 bytes @ 0x1
  8231  000008                     	ds	1
  8232  000009                     sort_pitches@a:
  8233                           	opt stack 0
  8234                           
  8235                           ; 1 bytes @ 0x2
  8236  000009                     	ds	1
  8237  00000A                     encoderInputsBuxton@tempA:
  8238                           	opt stack 0
  8239  00000A                     displayDigits@lowByte:
  8240                           	opt stack 0
  8241  00000A                     sort_pitches@j:
  8242                           	opt stack 0
  8243                           
  8244                           ; 1 bytes @ 0x3
  8245  00000A                     	ds	1
  8246  00000B                     encoderInputsBuxton@tempB:
  8247                           	opt stack 0
  8248  00000B                     displayDigits@highByte:
  8249                           	opt stack 0
  8250  00000B                     sort_pitches@i:
  8251                           	opt stack 0
  8252                           
  8253                           ; 1 bytes @ 0x4
  8254  00000B                     	ds	1
  8255  00000C                     ??_playArpeggio:
  8256  00000C                     encoderInputsBuxton@pinstate:
  8257                           	opt stack 0
  8258                           
  8259                           ; 1 bytes @ 0x5
  8260  00000C                     	ds	6
  8261  000012                     ??_ISR:
  8262                           
  8263                           ; 1 bytes @ 0xB
  8264  000012                     	ds	24
  8265                           tblptru	equ	0xFF8
  8266                           tblptrh	equ	0xFF7
  8267                           tblptrl	equ	0xFF6
  8268                           tablat	equ	0xFF5
  8269                           postinc0	equ	0xFEE
  8270                           wreg	equ	0xFE8
  8271                           postdec2	equ	0xFDD
  8272                           fsr2l	equ	0xFD9
  8273                           
  8274 ;;
  8275 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  8276 ;;
  8277 ;; *************** function _main *****************
  8278 ;; Defined at:
  8279 ;;		line 530 in file "main.c"
  8280 ;; Parameters:    Size  Location     Type
  8281 ;;		None
  8282 ;; Auto vars:     Size  Location     Type
  8283 ;;		None
  8284 ;; Return value:  Size  Location     Type
  8285 ;;                  2  5045[None  ] int 
  8286 ;; Registers used:
  8287 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8288 ;; Tracked objects:
  8289 ;;		On entry : 0/0
  8290 ;;		On exit  : 0/0
  8291 ;;		Unchanged: 0/0
  8292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8295 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8296 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  8297 ;;Total ram usage:        1 bytes
  8298 ;; Hardware stack levels required when called:   20
  8299 ;; This function calls:
  8300 ;;		_ADC_Initialize
  8301 ;;		_Lcd_Start
  8302 ;;		_Read_b_eep
  8303 ;;		_analogInputs
  8304 ;;		_calculate_alpha
  8305 ;;		_calculate_pulse_length
  8306 ;;		_digitalInputs
  8307 ;;		_displayTest
  8308 ;;		_initializeMenuArray
  8309 ;;		_initializeSaveSlotsOnce
  8310 ;;		_menu_lcd
  8311 ;;		_panic_button
  8312 ;;		_processEncoderBuxton
  8313 ;;		_selectSlotOnBoot
  8314 ;;		_setup
  8315 ;;		_srand
  8316 ;; This function is called by:
  8317 ;;		Startup code after reset
  8318 ;; This function uses a non-reentrant model
  8319 ;;
  8320                           
  8321                           	psect	text0
  8322  006B4E                     __ptext0:
  8323                           	opt stack 0
  8324  006B4E                     _main:
  8325                           	opt stack 11
  8326                           
  8327                           ;main.c: 534: note_off_was_sent = 1;
  8328                           
  8329                           ;incstack = 0
  8330  006B4E  8052               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
  8331                           
  8332                           ;main.c: 537: setup();
  8333  006B50  EC63  F045         	call	_setup	;wreg free
  8334                           
  8335                           ;main.c: 538: ADC_Initialize();
  8336  006B54  EC2C  F04D         	call	_ADC_Initialize	;wreg free
  8337                           
  8338                           ;main.c: 539: initializeMenuArray();
  8339  006B58  EC0F  F027         	call	_initializeMenuArray	;wreg free
  8340                           
  8341                           ;main.c: 540: Lcd_Start();
  8342  006B5C  ECEC  F041         	call	_Lcd_Start	;wreg free
  8343                           
  8344                           ;main.c: 543: state = 0x0;
  8345  006B60  0E00               	movlw	0
  8346  006B62  0100               	movlb	0	; () banked
  8347  006B64  6FEE               	movwf	_state& (0+255),b
  8348                           
  8349                           ; BSR set to: 0
  8350                           ;main.c: 544: POT_MODE = 0;
  8351  006B66  9E05               	bcf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
  8352                           
  8353                           ; BSR set to: 0
  8354                           ;main.c: 545: which_screen = MAIN_MENU;
  8355  006B68  0E02               	movlw	2
  8356  006B6A  6E4E               	movwf	_which_screen,c
  8357                           
  8358                           ; BSR set to: 0
  8359                           ;main.c: 546: menu_lcd();
  8360  006B6C  EC84  F037         	call	_menu_lcd	;wreg free
  8361                           
  8362                           ;main.c: 547: panic_button();
  8363  006B70  ECA7  F04C         	call	_panic_button	;wreg free
  8364                           
  8365                           ;main.c: 549: srand(2048);
  8366  006B74  0E08               	movlw	8
  8367  006B76  0100               	movlb	0	; () banked
  8368  006B78  6F61               	movwf	(srand@x+1)& (0+255),b
  8369  006B7A  0E00               	movlw	0
  8370  006B7C  6F60               	movwf	srand@x& (0+255),b
  8371  006B7E  EC36  F04D         	call	_srand	;wreg free
  8372                           
  8373                           ;main.c: 552: encoderPolarity = Read_b_eep(0x02);
  8374  006B82  0E00               	movlw	0
  8375  006B84  0100               	movlb	0	; () banked
  8376  006B86  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
  8377  006B88  0E02               	movlw	2
  8378  006B8A  6F60               	movwf	Read_b_eep@badd& (0+255),b
  8379  006B8C  ECE7  F04C         	call	_Read_b_eep	;wreg free
  8380  006B90  0101               	movlb	1	; () banked
  8381  006B92  6FE9               	movwf	??_main& (0+255),b
  8382  006B94  31E9               	rrcf	??_main& (0+255),w,b
  8383  006B96  A0D8               	btfss	status,0,c
  8384  006B98  D002               	goto	u67490
  8385  006B9A  8805               	bsf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
  8386  006B9C  D001               	goto	u67505
  8387  006B9E                     u67490:
  8388  006B9E  9805               	bcf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
  8389  006BA0                     u67505:
  8390                           
  8391                           ;main.c: 554: ema_integer = Read_b_eep(0x03);
  8392  006BA0  0E00               	movlw	0
  8393  006BA2  0100               	movlb	0	; () banked
  8394  006BA4  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
  8395  006BA6  0E03               	movlw	3
  8396  006BA8  6F60               	movwf	Read_b_eep@badd& (0+255),b
  8397  006BAA  ECE7  F04C         	call	_Read_b_eep	;wreg free
  8398  006BAE  0100               	movlb	0	; () banked
  8399  006BB0  6FFE               	movwf	_ema_integer& (0+255),b
  8400                           
  8401                           ; BSR set to: 0
  8402                           ;main.c: 556: calculate_alpha();
  8403  006BB2  EC0E  F04A         	call	_calculate_alpha	;wreg free
  8404                           
  8405                           ;main.c: 563: ARPEGGIO_ON = 0;
  8406  006BB6  9A04               	bcf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
  8407                           
  8408                           ;main.c: 566: TIMER_PRELOAD = calculate_pulse_length();
  8409  006BB8  EC61  F02F         	call	_calculate_pulse_length	;wreg free
  8410  006BBC  C0C2  F17C         	movff	?_calculate_pulse_length,_TIMER_PRELOAD
  8411  006BC0  C0C3  F17D         	movff	?_calculate_pulse_length+1,_TIMER_PRELOAD+1
  8412                           
  8413                           ;main.c: 569: LATCH = 0;
  8414  006BC4  9404               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
  8415                           
  8416                           ;main.c: 570: UN_LATCH_MODE = 0;
  8417  006BC6  9204               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
  8418                           
  8419                           ;main.c: 572: AUTO_LATCH = 0;
  8420  006BC8  9004               	bcf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
  8421                           
  8422                           ;main.c: 575: AUTO_RANDOMIZE = 0;
  8423  006BCA  9C03               	bcf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
  8424                           
  8425                           ;main.c: 579: RESET_ON_KEY_PRESS = 1;
  8426  006BCC  8804               	bsf	_RESET_ON_KEY_PRESS/(0+8),_RESET_ON_KEY_PRESS& (0+7),c
  8427                           
  8428                           ;main.c: 580: RESET_ON_KEY_RELEASE = 1;
  8429  006BCE  8604               	bsf	_RESET_ON_KEY_RELEASE/(0+8),_RESET_ON_KEY_RELEASE& (0+7),c
  8430                           
  8431                           ;main.c: 583: LAST_NOTE_MODE_KEY_PRESS = 0;
  8432  006BD0  9603               	bcf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
  8433                           
  8434                           ;main.c: 584: LAST_NOTE_MODE_KEY_RELEASE = 0;
  8435  006BD2  9403               	bcf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
  8436                           
  8437                           ;main.c: 585: LAST_NOTE_MODE_TRANSPOSE = 1;
  8438  006BD4  8203               	bsf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
  8439                           
  8440                           ;main.c: 586: LAST_NOTE_MODE_RESET = 1;
  8441  006BD6  8003               	bsf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  8442                           
  8443                           ;main.c: 589: skipFirstLast = 0;
  8444  006BD8  9A03               	bcf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
  8445                           
  8446                           ;main.c: 592: DISPLAY_STEP_NUMBER = 0;
  8447  006BDA  9002               	bcf	_DISPLAY_STEP_NUMBER/(0+8),_DISPLAY_STEP_NUMBER& (0+7),c
  8448                           
  8449                           ;main.c: 595: TMR0IE = 1;
  8450  006BDC  8AF2               	bsf	intcon,5,c	;volatile
  8451                           
  8452                           ;main.c: 596: TMR0ON = 1;
  8453  006BDE  8ED5               	bsf	4053,7,c	;volatile
  8454                           
  8455                           ;main.c: 598: TMR2IE = 1;
  8456  006BE0  829D               	bsf	3997,1,c	;volatile
  8457                           
  8458                           ;main.c: 599: TMR2ON = 1;
  8459  006BE2  84CA               	bsf	4042,2,c	;volatile
  8460                           
  8461                           ;main.c: 601: TMR1IE = 1;
  8462  006BE4  809D               	bsf	3997,0,c	;volatile
  8463                           
  8464                           ;main.c: 602: TMR1ON = 1;
  8465  006BE6  80CD               	bsf	4045,0,c	;volatile
  8466                           
  8467                           ;main.c: 605: initializeSaveSlotsOnce();
  8468  006BE8  EC33  F04A         	call	_initializeSaveSlotsOnce	;wreg free
  8469                           
  8470                           ;main.c: 606: selectSlotOnBoot();
  8471  006BEC  ECB8  F04C         	call	_selectSlotOnBoot	;wreg free
  8472                           
  8473                           ;main.c: 609: if((ARPEGGIO_TYPE == UP) || (ARPEGGIO_TYPE == UP_DOWN) || (ARPEGGIO_TYPE =
      +                          = RANDOM) || (ARPEGGIO_TYPE == RANDOM_NON_REPEATING) || (ARPEGGIO_TYPE == AS_PRESSED)){
  8474  006BF0  5034               	movf	_ARPEGGIO_TYPE,w,c
  8475  006BF2  B4D8               	btfsc	status,2,c
  8476  006BF4  D010               	goto	u67550
  8477  006BF6  0E02               	movlw	2
  8478  006BF8  1834               	xorwf	_ARPEGGIO_TYPE,w,c
  8479  006BFA  B4D8               	btfsc	status,2,c
  8480  006BFC  D00C               	goto	u67550
  8481  006BFE  0E05               	movlw	5
  8482  006C00  1834               	xorwf	_ARPEGGIO_TYPE,w,c
  8483  006C02  B4D8               	btfsc	status,2,c
  8484  006C04  D008               	goto	u67550
  8485  006C06  0E04               	movlw	4
  8486  006C08  1834               	xorwf	_ARPEGGIO_TYPE,w,c
  8487  006C0A  B4D8               	btfsc	status,2,c
  8488  006C0C  D004               	goto	u67550
  8489  006C0E  0E06               	movlw	6
  8490  006C10  1834               	xorwf	_ARPEGGIO_TYPE,w,c
  8491  006C12  A4D8               	btfss	status,2,c
  8492  006C14  D002               	goto	l5046
  8493  006C16                     u67550:
  8494                           
  8495                           ;main.c: 610: startingDirection = UP;
  8496  006C16  0E00               	movlw	0
  8497  006C18  6E33               	movwf	_startingDirection,c
  8498  006C1A                     l5046:
  8499                           
  8500                           ;main.c: 611: }
  8501                           ;main.c: 613: if((ARPEGGIO_TYPE == DOWN) || (ARPEGGIO_TYPE == DOWN_UP)){
  8502  006C1A  0434               	decf	_ARPEGGIO_TYPE,w,c
  8503  006C1C  B4D8               	btfsc	status,2,c
  8504  006C1E  D004               	goto	u67570
  8505  006C20  0E03               	movlw	3
  8506  006C22  1834               	xorwf	_ARPEGGIO_TYPE,w,c
  8507  006C24  A4D8               	btfss	status,2,c
  8508  006C26  D002               	goto	l5049
  8509  006C28                     u67570:
  8510                           
  8511                           ;main.c: 614: startingDirection = DOWN;
  8512  006C28  0E01               	movlw	1
  8513  006C2A  6E33               	movwf	_startingDirection,c
  8514  006C2C                     l5049:
  8515                           
  8516                           ;main.c: 615: }
  8517                           ;main.c: 617: displayTest();
  8518  006C2C  EC3C  F043         	call	_displayTest	;wreg free
  8519                           
  8520                           ;main.c: 624: which_functions_are_unblocked = 1;
  8521  006C30  8405               	bsf	_which_functions_are_unblocked/(0+8),_which_functions_are_unblocked& (0+7),c
  8522  006C32                     
  8523                           ;main.c: 630: digitalInputs();
  8524  006C32  EC6F  F049         	call	_digitalInputs	;wreg free
  8525                           
  8526                           ;main.c: 631: analogInputs();
  8527  006C36  ECE8  F049         	call	_analogInputs	;wreg free
  8528                           
  8529                           ;main.c: 632: processEncoderBuxton();
  8530  006C3A  EC0A  F000         	call	_processEncoderBuxton	;wreg free
  8531                           
  8532                           ;main.c: 643: menu_lcd();
  8533  006C3E  EC84  F037         	call	_menu_lcd	;wreg free
  8534  006C42  D7F7               	goto	l5052
  8535  006C44                     __end_of_main:
  8536                           	opt stack 0
  8537                           tblptru	equ	0xFF8
  8538                           tblptrh	equ	0xFF7
  8539                           tblptrl	equ	0xFF6
  8540                           tablat	equ	0xFF5
  8541                           intcon	equ	0xFF2
  8542                           postinc0	equ	0xFEE
  8543                           wreg	equ	0xFE8
  8544                           postdec2	equ	0xFDD
  8545                           fsr2l	equ	0xFD9
  8546                           status	equ	0xFD8
  8547                           
  8548 ;; *************** function _srand *****************
  8549 ;; Defined at:
  8550 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  8551 ;; Parameters:    Size  Location     Type
  8552 ;;  x               2    0[BANK0 ] unsigned int 
  8553 ;; Auto vars:     Size  Location     Type
  8554 ;;		None
  8555 ;; Return value:  Size  Location     Type
  8556 ;;                  1    wreg      void 
  8557 ;; Registers used:
  8558 ;;		status,2
  8559 ;; Tracked objects:
  8560 ;;		On entry : 0/0
  8561 ;;		On exit  : 0/0
  8562 ;;		Unchanged: 0/0
  8563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8564 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8567 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8568 ;;Total ram usage:        2 bytes
  8569 ;; Hardware stack levels used:    1
  8570 ;; Hardware stack levels required when called:    5
  8571 ;; This function calls:
  8572 ;;		Nothing
  8573 ;; This function is called by:
  8574 ;;		_main
  8575 ;; This function uses a non-reentrant model
  8576 ;;
  8577                           
  8578                           	psect	text1
  8579  009A6C                     __ptext1:
  8580                           	opt stack 0
  8581  009A6C                     _srand:
  8582                           	opt stack 25
  8583                           
  8584                           ;incstack = 0
  8585  009A6C  C060  F1F2         	movff	srand@x,_randx
  8586  009A70  C061  F1F3         	movff	srand@x+1,_randx+1
  8587  009A74  0101               	movlb	1	; () banked
  8588  009A76  6BF4               	clrf	(_randx+2)& (0+255),b
  8589  009A78  6BF5               	clrf	(_randx+3)& (0+255),b
  8590                           
  8591                           ; BSR set to: 1
  8592  009A7A  0012               	return		;funcret
  8593  009A7C                     __end_of_srand:
  8594                           	opt stack 0
  8595                           tblptru	equ	0xFF8
  8596                           tblptrh	equ	0xFF7
  8597                           tblptrl	equ	0xFF6
  8598                           tablat	equ	0xFF5
  8599                           intcon	equ	0xFF2
  8600                           postinc0	equ	0xFEE
  8601                           wreg	equ	0xFE8
  8602                           postdec2	equ	0xFDD
  8603                           fsr2l	equ	0xFD9
  8604                           status	equ	0xFD8
  8605                           
  8606 ;; *************** function _setup *****************
  8607 ;; Defined at:
  8608 ;;		line 209 in file "main.c"
  8609 ;; Parameters:    Size  Location     Type
  8610 ;;		None
  8611 ;; Auto vars:     Size  Location     Type
  8612 ;;		None
  8613 ;; Return value:  Size  Location     Type
  8614 ;;                  1    wreg      void 
  8615 ;; Registers used:
  8616 ;;		wreg, status,2, status,0
  8617 ;; Tracked objects:
  8618 ;;		On entry : 0/0
  8619 ;;		On exit  : 0/0
  8620 ;;		Unchanged: 0/0
  8621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8625 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8626 ;;Total ram usage:        0 bytes
  8627 ;; Hardware stack levels used:    1
  8628 ;; Hardware stack levels required when called:    5
  8629 ;; This function calls:
  8630 ;;		Nothing
  8631 ;; This function is called by:
  8632 ;;		_main
  8633 ;; This function uses a non-reentrant model
  8634 ;;
  8635                           
  8636                           	psect	text2
  8637  008AC6                     __ptext2:
  8638                           	opt stack 0
  8639  008AC6                     _setup:
  8640                           	opt stack 25
  8641                           
  8642                           ;main.c: 212: TRISA = 0b000001;
  8643                           
  8644                           ; BSR set to: 1
  8645                           ;incstack = 0
  8646  008AC6  0E01               	movlw	1
  8647  008AC8  6E92               	movwf	3986,c	;volatile
  8648                           
  8649                           ;main.c: 216: TRISB = 0b00110001;
  8650  008ACA  0E31               	movlw	49
  8651  008ACC  6E93               	movwf	3987,c	;volatile
  8652                           
  8653                           ;main.c: 224: TRISC = 0b10010000;
  8654  008ACE  0E90               	movlw	144
  8655  008AD0  6E94               	movwf	3988,c	;volatile
  8656                           
  8657                           ;main.c: 230: TRISD = 0b00000000;
  8658  008AD2  0E00               	movlw	0
  8659  008AD4  6E95               	movwf	3989,c	;volatile
  8660                           
  8661                           ;main.c: 233: TRISE = 0b000;
  8662  008AD6  0E00               	movlw	0
  8663  008AD8  6E96               	movwf	3990,c	;volatile
  8664                           
  8665                           ;main.c: 238: PORTA = 0x00;
  8666  008ADA  0E00               	movlw	0
  8667  008ADC  6E80               	movwf	3968,c	;volatile
  8668                           
  8669                           ;main.c: 239: PORTB = 0x00;
  8670  008ADE  0E00               	movlw	0
  8671  008AE0  6E81               	movwf	3969,c	;volatile
  8672                           
  8673                           ;main.c: 240: PORTC = 0x00;
  8674  008AE2  0E00               	movlw	0
  8675  008AE4  6E82               	movwf	3970,c	;volatile
  8676                           
  8677                           ;main.c: 241: PORTD = 0x00;
  8678  008AE6  0E00               	movlw	0
  8679  008AE8  6E83               	movwf	3971,c	;volatile
  8680                           
  8681                           ;main.c: 242: PORTE = 0x00;
  8682  008AEA  0E00               	movlw	0
  8683  008AEC  6E84               	movwf	3972,c	;volatile
  8684                           
  8685                           ;main.c: 245: IPEN = 0;
  8686  008AEE  9ED0               	bcf	4048,7,c	;volatile
  8687                           
  8688                           ;main.c: 248: RBIF = 0;
  8689  008AF0  90F2               	bcf	intcon,0,c	;volatile
  8690                           
  8691                           ;main.c: 249: RBIE = 1;
  8692  008AF2  86F2               	bsf	intcon,3,c	;volatile
  8693                           
  8694                           ;main.c: 251: INTEDG0 = 0;
  8695  008AF4  9CF1               	bcf	intcon2,6,c	;volatile
  8696                           
  8697                           ;main.c: 252: INT0IF = 0;
  8698  008AF6  92F2               	bcf	intcon,1,c	;volatile
  8699                           
  8700                           ;main.c: 253: INT0IE = 1;
  8701  008AF8  88F2               	bsf	intcon,4,c	;volatile
  8702                           
  8703                           ;main.c: 256: T08BIT = 0;
  8704  008AFA  9CD5               	bcf	4053,6,c	;volatile
  8705                           
  8706                           ;main.c: 257: T0CS = 0;
  8707  008AFC  9AD5               	bcf	4053,5,c	;volatile
  8708                           
  8709                           ;main.c: 258: T0CON &= 0b11111000;
  8710  008AFE  0EF8               	movlw	248
  8711  008B00  16D5               	andwf	4053,f,c	;volatile
  8712                           
  8713                           ;main.c: 259: T0CON |= 0b00000001;
  8714  008B02  80D5               	bsf	4053,0,c	;volatile
  8715                           
  8716                           ;main.c: 260: PSA = 0;
  8717  008B04  96D5               	bcf	4053,3,c	;volatile
  8718                           
  8719                           ;main.c: 261: TMR0ON = 0;
  8720  008B06  9ED5               	bcf	4053,7,c	;volatile
  8721                           
  8722                           ;main.c: 262: TMR0IE = 1;
  8723  008B08  8AF2               	bsf	intcon,5,c	;volatile
  8724                           
  8725                           ;main.c: 265: T2CON = 0b01000001;
  8726  008B0A  0E41               	movlw	65
  8727  008B0C  6ECA               	movwf	4042,c	;volatile
  8728                           
  8729                           ;main.c: 266: TMR2 = 0x83;
  8730  008B0E  0E83               	movlw	131
  8731  008B10  6ECC               	movwf	4044,c	;volatile
  8732                           
  8733                           ;main.c: 267: TMR2ON = 0;
  8734  008B12  94CA               	bcf	4042,2,c	;volatile
  8735                           
  8736                           ;main.c: 268: TMR2IE = 0;
  8737  008B14  929D               	bcf	3997,1,c	;volatile
  8738                           
  8739                           ;main.c: 271: T1CON = 0b10000000;
  8740  008B16  0E80               	movlw	128
  8741  008B18  6ECD               	movwf	4045,c	;volatile
  8742                           
  8743                           ;main.c: 272: TMR1 = 0xEC78;
  8744  008B1A  0EEC               	movlw	236
  8745  008B1C  6ECF               	movwf	4047,c	;volatile
  8746  008B1E  0E78               	movlw	120
  8747  008B20  6ECE               	movwf	4046,c	;volatile
  8748                           
  8749                           ;main.c: 273: TMR1ON = 0;
  8750  008B22  90CD               	bcf	4045,0,c	;volatile
  8751                           
  8752                           ;main.c: 274: TMR1IE = 1;
  8753  008B24  809D               	bsf	3997,0,c	;volatile
  8754                           
  8755                           ;main.c: 278: TXEN = 1;
  8756  008B26  8AAC               	bsf	4012,5,c	;volatile
  8757                           
  8758                           ;main.c: 279: SYNC = 0;
  8759  008B28  98AC               	bcf	4012,4,c	;volatile
  8760                           
  8761                           ;main.c: 282: SPEN = 1;
  8762  008B2A  8EAB               	bsf	4011,7,c	;volatile
  8763                           
  8764                           ;main.c: 283: CREN = 1;
  8765  008B2C  88AB               	bsf	4011,4,c	;volatile
  8766                           
  8767                           ;main.c: 286: BRGH = 0;
  8768  008B2E  94AC               	bcf	4012,2,c	;volatile
  8769                           
  8770                           ;main.c: 287: SPBRG = 9;
  8771  008B30  0E09               	movlw	9
  8772  008B32  6EAF               	movwf	4015,c	;volatile
  8773                           
  8774                           ;main.c: 289: PEIE = 1;
  8775  008B34  8CF2               	bsf	intcon,6,c	;volatile
  8776                           
  8777                           ;main.c: 290: GIE = 1;
  8778  008B36  8EF2               	bsf	intcon,7,c	;volatile
  8779  008B38  0012               	return		;funcret
  8780  008B3A                     __end_of_setup:
  8781                           	opt stack 0
  8782                           tblptru	equ	0xFF8
  8783                           tblptrh	equ	0xFF7
  8784                           tblptrl	equ	0xFF6
  8785                           tablat	equ	0xFF5
  8786                           intcon	equ	0xFF2
  8787                           intcon2	equ	0xFF1
  8788                           postinc0	equ	0xFEE
  8789                           wreg	equ	0xFE8
  8790                           postdec2	equ	0xFDD
  8791                           fsr2l	equ	0xFD9
  8792                           status	equ	0xFD8
  8793                           
  8794 ;; *************** function _selectSlotOnBoot *****************
  8795 ;; Defined at:
  8796 ;;		line 41 in file "eeprom.c"
  8797 ;; Parameters:    Size  Location     Type
  8798 ;;		None
  8799 ;; Auto vars:     Size  Location     Type
  8800 ;;  slot            1  108[BANK0 ] unsigned char 
  8801 ;; Return value:  Size  Location     Type
  8802 ;;                  1    wreg      void 
  8803 ;; Registers used:
  8804 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8805 ;; Tracked objects:
  8806 ;;		On entry : 0/0
  8807 ;;		On exit  : 0/0
  8808 ;;		Unchanged: 0/0
  8809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8811 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8813 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8814 ;;Total ram usage:        1 bytes
  8815 ;; Hardware stack levels used:    1
  8816 ;; Hardware stack levels required when called:    8
  8817 ;; This function calls:
  8818 ;;		_Read_b_eep
  8819 ;;		_loadFromEEPROM
  8820 ;; This function is called by:
  8821 ;;		_main
  8822 ;; This function uses a non-reentrant model
  8823 ;;
  8824                           
  8825                           	psect	text3
  8826  009970                     __ptext3:
  8827                           	opt stack 0
  8828  009970                     _selectSlotOnBoot:
  8829                           	opt stack 22
  8830                           
  8831                           ;eeprom.c: 43: unsigned char slot = Read_b_eep(0);
  8832                           
  8833                           ;incstack = 0
  8834  009970  0E00               	movlw	0
  8835  009972  0100               	movlb	0	; () banked
  8836  009974  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
  8837  009976  0E00               	movlw	0
  8838  009978  6F60               	movwf	Read_b_eep@badd& (0+255),b
  8839  00997A  ECE7  F04C         	call	_Read_b_eep	;wreg free
  8840  00997E  0100               	movlb	0	; () banked
  8841  009980  6FCC               	movwf	selectSlotOnBoot@slot& (0+255),b
  8842                           
  8843                           ; BSR set to: 0
  8844                           ;eeprom.c: 45: if (slot == DEFAULT){
  8845  009982  51CC               	movf	selectSlotOnBoot@slot& (0+255),w,b
  8846  009984  B4D8               	btfsc	status,2,c
  8847  009986  0012               	return	
  8848                           
  8849                           ; BSR set to: 0
  8850                           ;eeprom.c: 49: else {
  8851                           ;eeprom.c: 50: loadFromEEPROM(slot);
  8852                           
  8853                           ; BSR set to: 0
  8854                           
  8855                           ; BSR set to: 0
  8856                           ;eeprom.c: 47: }
  8857                           
  8858                           ; BSR set to: 0
  8859                           ;eeprom.c: 46: return;
  8860  009988  51CC               	movf	selectSlotOnBoot@slot& (0+255),w,b
  8861  00998A  ECF1  F025         	call	_loadFromEEPROM
  8862  00998E  0012               	return	
  8863  009990                     __end_of_selectSlotOnBoot:
  8864                           	opt stack 0
  8865                           tblptru	equ	0xFF8
  8866                           tblptrh	equ	0xFF7
  8867                           tblptrl	equ	0xFF6
  8868                           tablat	equ	0xFF5
  8869                           intcon	equ	0xFF2
  8870                           intcon2	equ	0xFF1
  8871                           postinc0	equ	0xFEE
  8872                           wreg	equ	0xFE8
  8873                           postdec2	equ	0xFDD
  8874                           fsr2l	equ	0xFD9
  8875                           status	equ	0xFD8
  8876                           
  8877 ;; *************** function _panic_button *****************
  8878 ;; Defined at:
  8879 ;;		line 515 in file "main.c"
  8880 ;; Parameters:    Size  Location     Type
  8881 ;;		None
  8882 ;; Auto vars:     Size  Location     Type
  8883 ;;		None
  8884 ;; Return value:  Size  Location     Type
  8885 ;;                  1    wreg      void 
  8886 ;; Registers used:
  8887 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
  8888 ;; Tracked objects:
  8889 ;;		On entry : 0/0
  8890 ;;		On exit  : 0/0
  8891 ;;		Unchanged: 0/0
  8892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8896 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8897 ;;Total ram usage:        0 bytes
  8898 ;; Hardware stack levels used:    1
  8899 ;; Hardware stack levels required when called:    9
  8900 ;; This function calls:
  8901 ;;		_controlChange
  8902 ;; This function is called by:
  8903 ;;		_main
  8904 ;; This function uses a non-reentrant model
  8905 ;;
  8906                           
  8907                           	psect	text4
  8908  00994E                     __ptext4:
  8909                           	opt stack 0
  8910  00994E                     _panic_button:
  8911                           	opt stack 21
  8912                           
  8913                           ;main.c: 516: controlChange (channel, all_notes_off, 0x00);
  8914                           
  8915                           ;incstack = 0
  8916  00994E  0E7B               	movlw	123
  8917  009950  0100               	movlb	0	; () banked
  8918  009952  6F60               	movwf	controlChange@controllerNumber& (0+255),b
  8919  009954  0E00               	movlw	0
  8920  009956  6F61               	movwf	controlChange@value& (0+255),b
  8921  009958  503D               	movf	_channel,w,c
  8922  00995A  EC19  F049         	call	_controlChange
  8923                           
  8924                           ;main.c: 517: controlChange (drumchannel, all_notes_off, 0x00);
  8925  00995E  0E7B               	movlw	123
  8926  009960  0100               	movlb	0	; () banked
  8927  009962  6F60               	movwf	controlChange@controllerNumber& (0+255),b
  8928  009964  0E00               	movlw	0
  8929  009966  6F61               	movwf	controlChange@value& (0+255),b
  8930  009968  5051               	movf	_drumchannel,w,c
  8931  00996A  EC19  F049         	call	_controlChange
  8932  00996E  0012               	return		;funcret
  8933  009970                     __end_of_panic_button:
  8934                           	opt stack 0
  8935                           tblptru	equ	0xFF8
  8936                           tblptrh	equ	0xFF7
  8937                           tblptrl	equ	0xFF6
  8938                           tablat	equ	0xFF5
  8939                           intcon	equ	0xFF2
  8940                           intcon2	equ	0xFF1
  8941                           postinc0	equ	0xFEE
  8942                           wreg	equ	0xFE8
  8943                           postdec2	equ	0xFDD
  8944                           fsr2l	equ	0xFD9
  8945                           status	equ	0xFD8
  8946                           
  8947 ;; *************** function _menu_lcd *****************
  8948 ;; Defined at:
  8949 ;;		line 355 in file "menu.c"
  8950 ;; Parameters:    Size  Location     Type
  8951 ;;		None
  8952 ;; Auto vars:     Size  Location     Type
  8953 ;;		None
  8954 ;; Return value:  Size  Location     Type
  8955 ;;                  1    wreg      void 
  8956 ;; Registers used:
  8957 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8958 ;; Tracked objects:
  8959 ;;		On entry : 0/0
  8960 ;;		On exit  : 0/0
  8961 ;;		Unchanged: 0/0
  8962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8967 ;;Total ram usage:        0 bytes
  8968 ;; Hardware stack levels used:    1
  8969 ;; Hardware stack levels required when called:   19
  8970 ;; This function calls:
  8971 ;;		_Function_A
  8972 ;;		_Function_B
  8973 ;;		_Function_C
  8974 ;;		_Function_D
  8975 ;;		_Function_E
  8976 ;;		_Function_F
  8977 ;;		_Function_G
  8978 ;;		_Function_H
  8979 ;;		_Lcd_Clear
  8980 ;;		_Lcd_Print_String
  8981 ;;		_Lcd_Set_Cursor
  8982 ;;		___lbmod
  8983 ;;		___wmul
  8984 ;;		_exitFunction
  8985 ;; This function is called by:
  8986 ;;		_main
  8987 ;; This function uses a non-reentrant model
  8988 ;;
  8989                           
  8990                           	psect	text5
  8991  006F08                     __ptext5:
  8992                           	opt stack 0
  8993  006F08                     _menu_lcd:
  8994                           	opt stack 11
  8995                           
  8996                           ;menu.c: 357: which_screen = MAIN_MENU;
  8997                           
  8998                           ;incstack = 0
  8999  006F08  0E02               	movlw	2
  9000  006F0A  6E4E               	movwf	_which_screen,c
  9001                           
  9002                           ;menu.c: 360: if (lcd_print_once == 0) {
  9003  006F0C  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9004  006F0E  D026               	goto	l3541
  9005                           
  9006                           ;menu.c: 362: Lcd_Clear();
  9007  006F10  EC17  F04D         	call	_Lcd_Clear	;wreg free
  9008                           
  9009                           ;menu.c: 363: Lcd_Set_Cursor(1,1);
  9010  006F14  0E01               	movlw	1
  9011  006F16  0100               	movlb	0	; () banked
  9012  006F18  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
  9013  006F1A  0E01               	movlw	1
  9014  006F1C  EC8A  F048         	call	_Lcd_Set_Cursor
  9015                           
  9016                           ;menu.c: 369: Lcd_Print_String(LCD_STRINGS[(mainMenu.selector % mainMenu.number) + mainM
      +                          enu.address]);
  9017  006F20  0101               	movlb	1	; () banked
  9018  006F22  5177               	movf	_mainMenu& (0+255),w,b
  9019  006F24  6EE6               	movwf	postinc1,c
  9020  006F26  5179               	movf	(_mainMenu+2)& (0+255),w,b
  9021  006F28  6EE6               	movwf	postinc1,c
  9022  006F2A  ECA5  F041         	call	___lbmod	;wreg free
  9023  006F2E  503E               	movf	btemp,w,c
  9024  006F30  0101               	movlb	1	; () banked
  9025  006F32  2578               	addwf	(_mainMenu+1)& (0+255),w,b
  9026  006F34  0100               	movlb	0	; () banked
  9027  006F36  6F60               	movwf	___wmul@multiplier& (0+255),b
  9028  006F38  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9029  006F3A  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9030  006F3C  0E00               	movlw	0
  9031  006F3E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9032  006F40  0E11               	movlw	17
  9033  006F42  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9034  006F44  EC80  F04C         	call	___wmul	;wreg free
  9035  006F48  0E9E               	movlw	low _LCD_STRINGS
  9036  006F4A  0100               	movlb	0	; () banked
  9037  006F4C  2560               	addwf	?___wmul& (0+255),w,b
  9038  006F4E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9039  006F50  0EF3               	movlw	high _LCD_STRINGS
  9040  006F52  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9041  006F54  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9042  006F56  ECB8  F042         	call	_Lcd_Print_String	;wreg free
  9043                           
  9044                           ;menu.c: 371: lcd_print_once = 1;
  9045  006F5A  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9046  006F5C                     l3541:
  9047                           
  9048                           ;menu.c: 372: }
  9049                           ;menu.c: 374: if(encoder_click == 1) {
  9050  006F5C  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9051  006F5E  0012               	return	
  9052                           
  9053                           ;menu.c: 376: encoder_click = 0;
  9054  006F60  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9055                           
  9056                           ;menu.c: 378: switch (mainMenu.selector) {
  9057  006F62  D026               	goto	l3543
  9058  006F64                     
  9059                           ;menu.c: 380: Function_A();
  9060  006F64  EC0F  F03A         	call	_Function_A	;wreg free
  9061                           
  9062                           ;menu.c: 381: exitFunction();
  9063  006F68  EC20  F04B         	call	_exitFunction	;wreg free
  9064                           
  9065                           ;menu.c: 382: break;
  9066  006F6C  0012               	return	
  9067  006F6E                     
  9068                           ;menu.c: 384: Function_H();
  9069  006F6E  ECA4  F03B         	call	_Function_H	;wreg free
  9070                           
  9071                           ;menu.c: 385: exitFunction();
  9072  006F72  EC20  F04B         	call	_exitFunction	;wreg free
  9073                           
  9074                           ;menu.c: 386: break;
  9075  006F76  0012               	return	
  9076  006F78                     
  9077                           ;menu.c: 388: Function_B();
  9078  006F78  EC74  F044         	call	_Function_B	;wreg free
  9079                           
  9080                           ;menu.c: 389: exitFunction();
  9081  006F7C  EC20  F04B         	call	_exitFunction	;wreg free
  9082                           
  9083                           ;menu.c: 390: break;
  9084  006F80  0012               	return	
  9085  006F82                     
  9086                           ;menu.c: 392: Function_C();
  9087  006F82  ECCC  F040         	call	_Function_C	;wreg free
  9088                           
  9089                           ;menu.c: 393: exitFunction();
  9090  006F86  EC20  F04B         	call	_exitFunction	;wreg free
  9091                           
  9092                           ;menu.c: 394: break;
  9093  006F8A  0012               	return	
  9094  006F8C                     
  9095                           ;menu.c: 396: Function_D();
  9096  006F8C  EC5D  F041         	call	_Function_D	;wreg free
  9097                           
  9098                           ;menu.c: 397: exitFunction();
  9099  006F90  EC20  F04B         	call	_exitFunction	;wreg free
  9100                           
  9101                           ;menu.c: 398: break;
  9102  006F94  0012               	return	
  9103  006F96                     
  9104                           ;menu.c: 400: Function_E();
  9105  006F96  EC24  F047         	call	_Function_E	;wreg free
  9106                           
  9107                           ;menu.c: 401: exitFunction();
  9108  006F9A  EC20  F04B         	call	_exitFunction	;wreg free
  9109                           
  9110                           ;menu.c: 402: break;
  9111  006F9E  0012               	return	
  9112  006FA0                     
  9113                           ;menu.c: 404: Function_F();
  9114  006FA0  ECED  F046         	call	_Function_F	;wreg free
  9115                           
  9116                           ;menu.c: 405: exitFunction();
  9117  006FA4  EC20  F04B         	call	_exitFunction	;wreg free
  9118                           
  9119                           ;menu.c: 406: break;
  9120  006FA8  0012               	return	
  9121  006FAA                     
  9122                           ;menu.c: 408: Function_G();
  9123  006FAA  EC15  F041         	call	_Function_G	;wreg free
  9124                           
  9125                           ;menu.c: 414: }
  9126                           
  9127                           ;menu.c: 413: break;
  9128                           
  9129                           ;menu.c: 412: default:
  9130                           
  9131                           ;menu.c: 410: break;
  9132  006FAE  0012               	return	
  9133  006FB0                     l3543:
  9134  006FB0  0101               	movlb	1	; () banked
  9135  006FB2  5179               	movf	(_mainMenu+2)& (0+255),w,b
  9136                           
  9137                           ; Switch size 1, requested type "space"
  9138                           ; Number of cases is 8, Range of values is 0 to 7
  9139                           ; switch strategies available:
  9140                           ; Name         Instructions Cycles
  9141                           ; simple_byte           25    13 (average)
  9142                           ;	Chosen strategy is simple_byte
  9143  006FB4  0A00               	xorlw	0	; case 0
  9144  006FB6  B4D8               	btfsc	status,2,c
  9145  006FB8  D7D5               	goto	l3544
  9146  006FBA  0A01               	xorlw	1	; case 1
  9147  006FBC  B4D8               	btfsc	status,2,c
  9148  006FBE  D7D7               	goto	l3546
  9149  006FC0  0A03               	xorlw	3	; case 2
  9150  006FC2  B4D8               	btfsc	status,2,c
  9151  006FC4  D7D9               	goto	l3547
  9152  006FC6  0A01               	xorlw	1	; case 3
  9153  006FC8  B4D8               	btfsc	status,2,c
  9154  006FCA  D7DB               	goto	l3548
  9155  006FCC  0A07               	xorlw	7	; case 4
  9156  006FCE  B4D8               	btfsc	status,2,c
  9157  006FD0  D7DD               	goto	l3549
  9158  006FD2  0A01               	xorlw	1	; case 5
  9159  006FD4  B4D8               	btfsc	status,2,c
  9160  006FD6  D7DF               	goto	l3550
  9161  006FD8  0A03               	xorlw	3	; case 6
  9162  006FDA  B4D8               	btfsc	status,2,c
  9163  006FDC  D7E1               	goto	l3551
  9164  006FDE  0A01               	xorlw	1	; case 7
  9165  006FE0  A4D8               	btfss	status,2,c
  9166                           
  9167                           ; BSR set to: 1
  9168  006FE2  0012               	return	
  9169  006FE4  D7E2               	goto	l3552
  9170  006FE6                     __end_of_menu_lcd:
  9171                           	opt stack 0
  9172                           tblptru	equ	0xFF8
  9173                           tblptrh	equ	0xFF7
  9174                           tblptrl	equ	0xFF6
  9175                           tablat	equ	0xFF5
  9176                           intcon	equ	0xFF2
  9177                           intcon2	equ	0xFF1
  9178                           postinc0	equ	0xFEE
  9179                           wreg	equ	0xFE8
  9180                           postinc1	equ	0xFE6
  9181                           postdec2	equ	0xFDD
  9182                           fsr2l	equ	0xFD9
  9183                           status	equ	0xFD8
  9184                           
  9185 ;; *************** function _Lcd_Clear *****************
  9186 ;; Defined at:
  9187 ;;		line 53 in file "lcd.c"
  9188 ;; Parameters:    Size  Location     Type
  9189 ;;		None
  9190 ;; Auto vars:     Size  Location     Type
  9191 ;;		None
  9192 ;; Return value:  Size  Location     Type
  9193 ;;                  1    wreg      void 
  9194 ;; Registers used:
  9195 ;;		wreg, status,2, status,0, cstack
  9196 ;; Tracked objects:
  9197 ;;		On entry : 0/0
  9198 ;;		On exit  : 0/0
  9199 ;;		Unchanged: 0/0
  9200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9205 ;;Total ram usage:        0 bytes
  9206 ;; Hardware stack levels used:    1
  9207 ;; Hardware stack levels required when called:    7
  9208 ;; This function calls:
  9209 ;;		_Lcd_Cmd
  9210 ;; This function is called by:
  9211 ;;		_menu_lcd
  9212 ;; This function uses a non-reentrant model
  9213 ;;
  9214                           
  9215                           	psect	text6
  9216  009A2E                     __ptext6:
  9217                           	opt stack 0
  9218  009A2E                     _Lcd_Clear:
  9219                           	opt stack 22
  9220                           
  9221                           ;lcd.c: 56: TMR2ON = 0;
  9222                           
  9223                           ;incstack = 0
  9224  009A2E  94CA               	bcf	4042,2,c	;volatile
  9225                           
  9226                           ;lcd.c: 57: PORTC &= 0xF0;
  9227  009A30  0EF0               	movlw	240
  9228  009A32  1682               	andwf	3970,f,c	;volatile
  9229                           
  9230                           ;lcd.c: 59: Lcd_Cmd(0);
  9231  009A34  0E00               	movlw	0
  9232  009A36  EC94  F04C         	call	_Lcd_Cmd
  9233                           
  9234                           ;lcd.c: 60: Lcd_Cmd(1);
  9235  009A3A  0E01               	movlw	1
  9236  009A3C  EC94  F04C         	call	_Lcd_Cmd
  9237                           
  9238                           ;lcd.c: 63: TMR2ON = 1;
  9239  009A40  84CA               	bsf	4042,2,c	;volatile
  9240  009A42  0012               	return		;funcret
  9241  009A44                     __end_of_Lcd_Clear:
  9242                           	opt stack 0
  9243                           tblptru	equ	0xFF8
  9244                           tblptrh	equ	0xFF7
  9245                           tblptrl	equ	0xFF6
  9246                           tablat	equ	0xFF5
  9247                           intcon	equ	0xFF2
  9248                           intcon2	equ	0xFF1
  9249                           postinc0	equ	0xFEE
  9250                           wreg	equ	0xFE8
  9251                           postinc1	equ	0xFE6
  9252                           postdec2	equ	0xFDD
  9253                           fsr2l	equ	0xFD9
  9254                           status	equ	0xFD8
  9255                           
  9256 ;; *************** function _Function_H *****************
  9257 ;; Defined at:
  9258 ;;		line 1290 in file "menu.c"
  9259 ;; Parameters:    Size  Location     Type
  9260 ;;		None
  9261 ;; Auto vars:     Size  Location     Type
  9262 ;;		None
  9263 ;; Return value:  Size  Location     Type
  9264 ;;                  1    wreg      void 
  9265 ;; Registers used:
  9266 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9267 ;; Tracked objects:
  9268 ;;		On entry : 0/0
  9269 ;;		On exit  : 0/0
  9270 ;;		Unchanged: 0/0
  9271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9276 ;;Total ram usage:        0 bytes
  9277 ;; Hardware stack levels used:    1
  9278 ;; Hardware stack levels required when called:   18
  9279 ;; This function calls:
  9280 ;;		_Function_H_1
  9281 ;;		_Function_H_2
  9282 ;;		_Function_H_3
  9283 ;;		_Function_H_4
  9284 ;;		_Function_H_5
  9285 ;;		_Function_H_6
  9286 ;;		_Function_H_7
  9287 ;;		_Function_H_8
  9288 ;;		_Function_H_9
  9289 ;;		_Lcd_Print_String
  9290 ;;		___lbmod
  9291 ;;		___wmul
  9292 ;;		_clear_row2
  9293 ;;		_un_block_code
  9294 ;; This function is called by:
  9295 ;;		_menu_lcd
  9296 ;; This function uses a non-reentrant model
  9297 ;;
  9298                           
  9299                           	psect	text7
  9300  007748                     __ptext7:
  9301                           	opt stack 0
  9302  007748                     _Function_H:
  9303                           	opt stack 11
  9304                           
  9305                           ;menu.c: 1292: which_screen = ARPEGGIATOR_MENU;
  9306                           
  9307                           ;incstack = 0
  9308  007748  0E19               	movlw	25
  9309  00774A  6E4E               	movwf	_which_screen,c
  9310                           
  9311                           ;menu.c: 1293: encoder_click = 0;
  9312  00774C  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9313                           
  9314                           ;menu.c: 1294: lcd_print_once = 0;
  9315  00774E  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9316                           
  9317                           ;menu.c: 1296: while(encoder_click == 0) {
  9318  007750  D023               	goto	l3793
  9319  007752                     
  9320                           ;menu.c: 1300: un_block_code();
  9321  007752  ECF4  F04C         	call	_un_block_code	;wreg free
  9322                           
  9323                           ;menu.c: 1302: if (lcd_print_once == 0) {
  9324  007756  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9325  007758  D01E               	goto	l3795
  9326                           
  9327                           ;menu.c: 1303: clear_row2();
  9328  00775A  EC58  F04C         	call	_clear_row2	;wreg free
  9329                           
  9330                           ;menu.c: 1304: Lcd_Print_String(LCD_STRINGS[(arpeggiatorMenu.selector % arpeggiatorMenu.
      +                          number) + arpeggiatorMenu.address]);
  9331  00775E  0100               	movlb	0	; () banked
  9332  007760  51E0               	movf	_arpeggiatorMenu& (0+255),w,b
  9333  007762  6EE6               	movwf	postinc1,c
  9334  007764  51E2               	movf	(_arpeggiatorMenu+2)& (0+255),w,b
  9335  007766  6EE6               	movwf	postinc1,c
  9336  007768  ECA5  F041         	call	___lbmod	;wreg free
  9337  00776C  503E               	movf	btemp,w,c
  9338  00776E  0100               	movlb	0	; () banked
  9339  007770  25E1               	addwf	(_arpeggiatorMenu+1)& (0+255),w,b
  9340  007772  6F60               	movwf	___wmul@multiplier& (0+255),b
  9341  007774  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9342  007776  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9343  007778  0E00               	movlw	0
  9344  00777A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9345  00777C  0E11               	movlw	17
  9346  00777E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9347  007780  EC80  F04C         	call	___wmul	;wreg free
  9348  007784  0E9E               	movlw	low _LCD_STRINGS
  9349  007786  0100               	movlb	0	; () banked
  9350  007788  2560               	addwf	?___wmul& (0+255),w,b
  9351  00778A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9352  00778C  0EF3               	movlw	high _LCD_STRINGS
  9353  00778E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9354  007790  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9355  007792  ECB8  F042         	call	_Lcd_Print_String	;wreg free
  9356  007796                     l3795:
  9357                           
  9358                           ;menu.c: 1305: }
  9359                           ;menu.c: 1306: lcd_print_once = 1;
  9360  007796  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9361  007798                     l3793:
  9362  007798  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9363  00779A  D7DB               	goto	l3794
  9364                           
  9365                           ;menu.c: 1307: }
  9366                           ;menu.c: 1309: if(arpeggiatorMenu.selector == 0) {Function_H_1();}
  9367  00779C  0100               	movlb	0	; () banked
  9368  00779E  51E2               	movf	(_arpeggiatorMenu+2)& (0+255),w,b
  9369  0077A0  B4D8               	btfsc	status,2,c
  9370                           
  9371                           ; BSR set to: 0
  9372  0077A2  ECCE  F038         	call	_Function_H_1	;wreg free
  9373                           
  9374                           ;menu.c: 1310: if(arpeggiatorMenu.selector == 1) {Function_H_2();}
  9375  0077A6  0100               	movlb	0	; () banked
  9376  0077A8  05E2               	decf	(_arpeggiatorMenu+2)& (0+255),w,b
  9377  0077AA  B4D8               	btfsc	status,2,c
  9378                           
  9379                           ; BSR set to: 0
  9380  0077AC  ECB6  F046         	call	_Function_H_2	;wreg free
  9381                           
  9382                           ;menu.c: 1311: if(arpeggiatorMenu.selector == 2) {Function_H_3();}
  9383  0077B0  0E02               	movlw	2
  9384  0077B2  0100               	movlb	0	; () banked
  9385  0077B4  19E2               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9386  0077B6  B4D8               	btfsc	status,2,c
  9387                           
  9388                           ; BSR set to: 0
  9389  0077B8  ECF7  F047         	call	_Function_H_3	;wreg free
  9390                           
  9391                           ;menu.c: 1312: if(arpeggiatorMenu.selector == 3) {Function_H_4();}
  9392  0077BC  0E03               	movlw	3
  9393  0077BE  0100               	movlb	0	; () banked
  9394  0077C0  19E2               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9395  0077C2  B4D8               	btfsc	status,2,c
  9396                           
  9397                           ; BSR set to: 0
  9398  0077C4  EC04  F03C         	call	_Function_H_4	;wreg free
  9399                           
  9400                           ;menu.c: 1313: if(arpeggiatorMenu.selector == 4) {Function_H_5();}
  9401  0077C8  0E04               	movlw	4
  9402  0077CA  0100               	movlb	0	; () banked
  9403  0077CC  19E2               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9404  0077CE  B4D8               	btfsc	status,2,c
  9405                           
  9406                           ; BSR set to: 0
  9407  0077D0  EC60  F03D         	call	_Function_H_5	;wreg free
  9408                           
  9409                           ;menu.c: 1314: if(arpeggiatorMenu.selector == 5) {Function_H_6();}
  9410  0077D4  0E05               	movlw	5
  9411  0077D6  0100               	movlb	0	; () banked
  9412  0077D8  19E2               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9413  0077DA  B4D8               	btfsc	status,2,c
  9414                           
  9415                           ; BSR set to: 0
  9416  0077DC  EC7F  F046         	call	_Function_H_6	;wreg free
  9417                           
  9418                           ;menu.c: 1315: if(arpeggiatorMenu.selector == 6) {Function_H_7();}
  9419  0077E0  0E06               	movlw	6
  9420  0077E2  0100               	movlb	0	; () banked
  9421  0077E4  19E2               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9422  0077E6  B4D8               	btfsc	status,2,c
  9423                           
  9424                           ; BSR set to: 0
  9425  0077E8  EC5D  F03C         	call	_Function_H_7	;wreg free
  9426                           
  9427                           ;menu.c: 1316: if(arpeggiatorMenu.selector == 7) {Function_H_8();}
  9428  0077EC  0E07               	movlw	7
  9429  0077EE  0100               	movlb	0	; () banked
  9430  0077F0  19E2               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9431  0077F2  B4D8               	btfsc	status,2,c
  9432                           
  9433                           ; BSR set to: 0
  9434  0077F4  EC48  F046         	call	_Function_H_8	;wreg free
  9435                           
  9436                           ;menu.c: 1317: if(arpeggiatorMenu.selector == 8) {Function_H_9();}
  9437  0077F8  0E08               	movlw	8
  9438  0077FA  0100               	movlb	0	; () banked
  9439  0077FC  19E2               	xorwf	(_arpeggiatorMenu+2)& (0+255),w,b
  9440  0077FE  A4D8               	btfss	status,2,c
  9441  007800  0012               	return	
  9442                           
  9443                           ; BSR set to: 0
  9444  007802  EC81  F040         	call	_Function_H_9	;wreg free
  9445  007806  0012               	return	
  9446  007808                     __end_of_Function_H:
  9447                           	opt stack 0
  9448                           tblptru	equ	0xFF8
  9449                           tblptrh	equ	0xFF7
  9450                           tblptrl	equ	0xFF6
  9451                           tablat	equ	0xFF5
  9452                           intcon	equ	0xFF2
  9453                           intcon2	equ	0xFF1
  9454                           postinc0	equ	0xFEE
  9455                           wreg	equ	0xFE8
  9456                           postinc1	equ	0xFE6
  9457                           postdec2	equ	0xFDD
  9458                           fsr2l	equ	0xFD9
  9459                           status	equ	0xFD8
  9460                           
  9461 ;; *************** function _Function_H_9 *****************
  9462 ;; Defined at:
  9463 ;;		line 1927 in file "menu.c"
  9464 ;; Parameters:    Size  Location     Type
  9465 ;;		None
  9466 ;; Auto vars:     Size  Location     Type
  9467 ;;		None
  9468 ;; Return value:  Size  Location     Type
  9469 ;;                  1    wreg      void 
  9470 ;; Registers used:
  9471 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9472 ;; Tracked objects:
  9473 ;;		On entry : 0/0
  9474 ;;		On exit  : 0/0
  9475 ;;		Unchanged: 0/0
  9476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9481 ;;Total ram usage:        0 bytes
  9482 ;; Hardware stack levels used:    1
  9483 ;; Hardware stack levels required when called:   17
  9484 ;; This function calls:
  9485 ;;		_Function_H_9_1
  9486 ;;		_Function_H_9_2
  9487 ;;		_Function_H_9_3
  9488 ;;		_Function_H_9_4
  9489 ;;		_Lcd_Print_String
  9490 ;;		___lbmod
  9491 ;;		___wmul
  9492 ;;		_clear_row1
  9493 ;;		_clear_row2
  9494 ;;		_un_block_code
  9495 ;; This function is called by:
  9496 ;;		_Function_H
  9497 ;; This function uses a non-reentrant model
  9498 ;;
  9499                           
  9500                           	psect	text8
  9501  008102                     __ptext8:
  9502                           	opt stack 0
  9503  008102                     _Function_H_9:
  9504                           	opt stack 11
  9505                           
  9506                           ;menu.c: 1929: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_MENU,
  9507                           ;menu.c: 1930: lcd_print_once = 0;
  9508                           
  9509                           ;incstack = 0
  9510  008102  0E26               	movlw	38
  9511  008104  6E4E               	movwf	_which_screen,c
  9512  008106  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9513                           
  9514                           ;menu.c: 1931: encoder_click = 0;
  9515  008108  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9516                           
  9517                           ;menu.c: 1933: while(encoder_click == 0) {
  9518  00810A  D02C               	goto	l3959
  9519  00810C                     
  9520                           ;menu.c: 1937: un_block_code();
  9521  00810C  ECF4  F04C         	call	_un_block_code	;wreg free
  9522                           
  9523                           ;menu.c: 1939: if (lcd_print_once == 0) {
  9524  008110  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9525  008112  D027               	goto	l3961
  9526                           
  9527                           ;menu.c: 1940: clear_row1();
  9528  008114  EC6C  F04C         	call	_clear_row1	;wreg free
  9529                           
  9530                           ;menu.c: 1941: Lcd_Print_String("Last Note Mode:");
  9531  008118  0E0D               	movlw	low STR_75
  9532  00811A  0100               	movlb	0	; () banked
  9533  00811C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9534  00811E  0EFE               	movlw	high STR_75
  9535  008120  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9536  008122  ECB8  F042         	call	_Lcd_Print_String	;wreg free
  9537                           
  9538                           ;menu.c: 1942: clear_row2();
  9539  008126  EC58  F04C         	call	_clear_row2	;wreg free
  9540                           
  9541                           ;menu.c: 1943: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
  9542  00812A  0100               	movlb	0	; () banked
  9543  00812C  51DD               	movf	_arpeggiatorLastNoteModeMenu& (0+255),w,b
  9544  00812E  6EE6               	movwf	postinc1,c
  9545  008130  51DF               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9546  008132  6EE6               	movwf	postinc1,c
  9547  008134  ECA5  F041         	call	___lbmod	;wreg free
  9548  008138  503E               	movf	btemp,w,c
  9549  00813A  0100               	movlb	0	; () banked
  9550  00813C  25DE               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
  9551  00813E  6F60               	movwf	___wmul@multiplier& (0+255),b
  9552  008140  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9553  008142  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9554  008144  0E00               	movlw	0
  9555  008146  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9556  008148  0E11               	movlw	17
  9557  00814A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9558  00814C  EC80  F04C         	call	___wmul	;wreg free
  9559  008150  0E9E               	movlw	low _LCD_STRINGS
  9560  008152  0100               	movlb	0	; () banked
  9561  008154  2560               	addwf	?___wmul& (0+255),w,b
  9562  008156  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9563  008158  0EF3               	movlw	high _LCD_STRINGS
  9564  00815A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9565  00815C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9566  00815E  ECB8  F042         	call	_Lcd_Print_String	;wreg free
  9567  008162                     l3961:
  9568                           
  9569                           ;menu.c: 1944: }
  9570                           ;menu.c: 1945: lcd_print_once = 1;
  9571  008162  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9572  008164                     l3959:
  9573  008164  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9574  008166  D7D2               	goto	l3960
  9575                           
  9576                           ;menu.c: 1946: }
  9577                           ;menu.c: 1949: if(arpeggiatorLastNoteModeMenu.selector == 0) {Function_H_9_1();}
  9578  008168  0100               	movlb	0	; () banked
  9579  00816A  51DF               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9580  00816C  B4D8               	btfsc	status,2,c
  9581                           
  9582                           ; BSR set to: 0
  9583  00816E  ECF6  F03E         	call	_Function_H_9_1	;wreg free
  9584                           
  9585                           ;menu.c: 1950: if(arpeggiatorLastNoteModeMenu.selector == 1) {Function_H_9_2();}
  9586  008172  0100               	movlb	0	; () banked
  9587  008174  05DF               	decf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9588  008176  B4D8               	btfsc	status,2,c
  9589                           
  9590                           ; BSR set to: 0
  9591  008178  ECA6  F03E         	call	_Function_H_9_2	;wreg free
  9592                           
  9593                           ;menu.c: 1951: if(arpeggiatorLastNoteModeMenu.selector == 2) {Function_H_9_3();}
  9594  00817C  0E02               	movlw	2
  9595  00817E  0100               	movlb	0	; () banked
  9596  008180  19DF               	xorwf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9597  008182  B4D8               	btfsc	status,2,c
  9598                           
  9599                           ; BSR set to: 0
  9600  008184  EC56  F03E         	call	_Function_H_9_3	;wreg free
  9601                           
  9602                           ;menu.c: 1952: if(arpeggiatorLastNoteModeMenu.selector == 3) {Function_H_9_4();}
  9603  008188  0E03               	movlw	3
  9604  00818A  0100               	movlb	0	; () banked
  9605  00818C  19DF               	xorwf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9606  00818E  A4D8               	btfss	status,2,c
  9607  008190  0012               	return	
  9608                           
  9609                           ; BSR set to: 0
  9610  008192  EC06  F03E         	call	_Function_H_9_4	;wreg free
  9611  008196  0012               	return	
  9612  008198                     __end_of_Function_H_9:
  9613                           	opt stack 0
  9614                           tblptru	equ	0xFF8
  9615                           tblptrh	equ	0xFF7
  9616                           tblptrl	equ	0xFF6
  9617                           tablat	equ	0xFF5
  9618                           intcon	equ	0xFF2
  9619                           intcon2	equ	0xFF1
  9620                           postinc0	equ	0xFEE
  9621                           wreg	equ	0xFE8
  9622                           postinc1	equ	0xFE6
  9623                           postdec2	equ	0xFDD
  9624                           fsr2l	equ	0xFD9
  9625                           status	equ	0xFD8
  9626                           
  9627 ;; *************** function _Function_H_9_4 *****************
  9628 ;; Defined at:
  9629 ;;		line 1898 in file "menu.c"
  9630 ;; Parameters:    Size  Location     Type
  9631 ;;		None
  9632 ;; Auto vars:     Size  Location     Type
  9633 ;;		None
  9634 ;; Return value:  Size  Location     Type
  9635 ;;                  1    wreg      void 
  9636 ;; Registers used:
  9637 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9638 ;; Tracked objects:
  9639 ;;		On entry : 0/0
  9640 ;;		On exit  : 0/0
  9641 ;;		Unchanged: 0/0
  9642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9646 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9647 ;;Total ram usage:        0 bytes
  9648 ;; Hardware stack levels used:    1
  9649 ;; Hardware stack levels required when called:   16
  9650 ;; This function calls:
  9651 ;;		_Lcd_Print_String
  9652 ;;		___lbmod
  9653 ;;		___wmul
  9654 ;;		_clear_row1
  9655 ;;		_clear_row2
  9656 ;;		_un_block_code
  9657 ;; This function is called by:
  9658 ;;		_Function_H_9
  9659 ;; This function uses a non-reentrant model
  9660 ;;
  9661                           
  9662                           	psect	text9
  9663  007C0C                     __ptext9:
  9664                           	opt stack 0
  9665  007C0C                     _Function_H_9_4:
  9666                           	opt stack 11
  9667                           
  9668                           ;menu.c: 1900: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_RESET_MENU;
  9669                           
  9670                           ;incstack = 0
  9671  007C0C  0E2A               	movlw	42
  9672  007C0E  6E4E               	movwf	_which_screen,c
  9673                           
  9674                           ;menu.c: 1901: lcd_print_once = 0;
  9675  007C10  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9676                           
  9677                           ;menu.c: 1902: encoder_click = 0;
  9678  007C12  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9679                           
  9680                           ;menu.c: 1904: arpeggiatorLastNoteModeResetMenu.selector = LAST_NOTE_MODE_RESET;
  9681  007C14  0E00               	movlw	0
  9682  007C16  B003               	btfsc	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  9683  007C18  0E01               	movlw	1
  9684  007C1A  0101               	movlb	1	; () banked
  9685  007C1C  6F0A               	movwf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),b
  9686                           
  9687                           ;menu.c: 1906: while(encoder_click == 0) {
  9688  007C1E  D03D               	goto	l3950
  9689  007C20                     
  9690                           ;menu.c: 1910: un_block_code();
  9691                           
  9692                           ; BSR set to: 1
  9693  007C20  ECF4  F04C         	call	_un_block_code	;wreg free
  9694                           
  9695                           ;menu.c: 1912: if (lcd_print_once == 0) {
  9696  007C24  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9697  007C26  D038               	goto	l3954
  9698                           
  9699                           ;menu.c: 1913: clear_row1();
  9700  007C28  EC6C  F04C         	call	_clear_row1	;wreg free
  9701                           
  9702                           ;menu.c: 1914: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
  9703  007C2C  0100               	movlb	0	; () banked
  9704  007C2E  51DD               	movf	_arpeggiatorLastNoteModeMenu& (0+255),w,b
  9705  007C30  6EE6               	movwf	postinc1,c
  9706  007C32  51DF               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9707  007C34  6EE6               	movwf	postinc1,c
  9708  007C36  ECA5  F041         	call	___lbmod	;wreg free
  9709  007C3A  503E               	movf	btemp,w,c
  9710  007C3C  0100               	movlb	0	; () banked
  9711  007C3E  25DE               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
  9712  007C40  6F60               	movwf	___wmul@multiplier& (0+255),b
  9713  007C42  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9714  007C44  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9715  007C46  0E00               	movlw	0
  9716  007C48  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9717  007C4A  0E11               	movlw	17
  9718  007C4C  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9719  007C4E  EC80  F04C         	call	___wmul	;wreg free
  9720  007C52  0E9E               	movlw	low _LCD_STRINGS
  9721  007C54  0100               	movlb	0	; () banked
  9722  007C56  2560               	addwf	?___wmul& (0+255),w,b
  9723  007C58  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9724  007C5A  0EF3               	movlw	high _LCD_STRINGS
  9725  007C5C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9726  007C5E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9727  007C60  ECB8  F042         	call	_Lcd_Print_String	;wreg free
  9728                           
  9729                           ;menu.c: 1915: if(arpeggiatorLastNoteModeResetMenu.selector == 0) {clear_row2();Lcd_Prin
      +                          t_String("IMMEDIATE");}
  9730  007C64  0101               	movlb	1	; () banked
  9731  007C66  510A               	movf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),w,b
  9732  007C68  A4D8               	btfss	status,2,c
  9733  007C6A  D009               	goto	l3953
  9734                           
  9735                           ; BSR set to: 1
  9736  007C6C  EC58  F04C         	call	_clear_row2	;wreg free
  9737  007C70  0EA9               	movlw	low STR_67
  9738  007C72  0100               	movlb	0	; () banked
  9739  007C74  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9740  007C76  0EFF               	movlw	high STR_67
  9741  007C78  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9742  007C7A  ECB8  F042         	call	_Lcd_Print_String	;wreg free
  9743  007C7E                     l3953:
  9744                           
  9745                           ;menu.c: 1916: if(arpeggiatorLastNoteModeResetMenu.selector == 1) {clear_row2();Lcd_Prin
      +                          t_String("FINISH LAST");}
  9746  007C7E  0101               	movlb	1	; () banked
  9747  007C80  050A               	decf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),w,b
  9748  007C82  A4D8               	btfss	status,2,c
  9749  007C84  D009               	goto	l3954
  9750                           
  9751                           ; BSR set to: 1
  9752  007C86  EC58  F04C         	call	_clear_row2	;wreg free
  9753  007C8A  0E7C               	movlw	low STR_68
  9754  007C8C  0100               	movlb	0	; () banked
  9755  007C8E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9756  007C90  0EFF               	movlw	high STR_68
  9757  007C92  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9758  007C94  ECB8  F042         	call	_Lcd_Print_String	;wreg free
  9759  007C98                     l3954:
  9760                           
  9761                           ;menu.c: 1917: }
  9762                           ;menu.c: 1918: lcd_print_once = 1;
  9763  007C98  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9764  007C9A                     l3950:
  9765  007C9A  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9766  007C9C  D7C1               	goto	l3951
  9767                           
  9768                           ;menu.c: 1919: }
  9769                           ;menu.c: 1921: LAST_NOTE_MODE_RESET = arpeggiatorLastNoteModeResetMenu.selector;
  9770  007C9E  0101               	movlb	1	; () banked
  9771  007CA0  A10A               	btfss	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),0,b
  9772  007CA2  D002               	goto	u58460
  9773  007CA4  8003               	bsf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  9774  007CA6  0012               	return	
  9775  007CA8                     u58460:
  9776  007CA8  9003               	bcf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
  9777  007CAA  0012               	return		;funcret
  9778  007CAC                     __end_of_Function_H_9_4:
  9779                           	opt stack 0
  9780                           tblptru	equ	0xFF8
  9781                           tblptrh	equ	0xFF7
  9782                           tblptrl	equ	0xFF6
  9783                           tablat	equ	0xFF5
  9784                           intcon	equ	0xFF2
  9785                           intcon2	equ	0xFF1
  9786                           postinc0	equ	0xFEE
  9787                           wreg	equ	0xFE8
  9788                           postinc1	equ	0xFE6
  9789                           postdec2	equ	0xFDD
  9790                           fsr2l	equ	0xFD9
  9791                           status	equ	0xFD8
  9792                           
  9793 ;; *************** function _Function_H_9_3 *****************
  9794 ;; Defined at:
  9795 ;;		line 1870 in file "menu.c"
  9796 ;; Parameters:    Size  Location     Type
  9797 ;;		None
  9798 ;; Auto vars:     Size  Location     Type
  9799 ;;		None
  9800 ;; Return value:  Size  Location     Type
  9801 ;;                  1    wreg      void 
  9802 ;; Registers used:
  9803 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9804 ;; Tracked objects:
  9805 ;;		On entry : 0/0
  9806 ;;		On exit  : 0/0
  9807 ;;		Unchanged: 0/0
  9808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9813 ;;Total ram usage:        0 bytes
  9814 ;; Hardware stack levels used:    1
  9815 ;; Hardware stack levels required when called:   16
  9816 ;; This function calls:
  9817 ;;		_Lcd_Print_String
  9818 ;;		___lbmod
  9819 ;;		___wmul
  9820 ;;		_clear_row1
  9821 ;;		_clear_row2
  9822 ;;		_un_block_code
  9823 ;; This function is called by:
  9824 ;;		_Function_H_9
  9825 ;; This function uses a non-reentrant model
  9826 ;;
  9827                           
  9828                           	psect	text10
  9829  007CAC                     __ptext10:
  9830                           	opt stack 0
  9831  007CAC                     _Function_H_9_3:
  9832                           	opt stack 11
  9833                           
  9834                           ;menu.c: 1872: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU;
  9835                           
  9836                           ;incstack = 0
  9837  007CAC  0E29               	movlw	41
  9838  007CAE  6E4E               	movwf	_which_screen,c
  9839                           
  9840                           ;menu.c: 1873: lcd_print_once = 0;
  9841  007CB0  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9842                           
  9843                           ;menu.c: 1874: encoder_click = 0;
  9844  007CB2  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
  9845                           
  9846                           ;menu.c: 1876: arpeggiatorLastNoteModeTransposeMenu.selector = LAST_NOTE_MODE_TRANSPOSE;
  9847  007CB4  0E00               	movlw	0
  9848  007CB6  B203               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
  9849  007CB8  0E01               	movlw	1
  9850  007CBA  0101               	movlb	1	; () banked
  9851  007CBC  6F0D               	movwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),b
  9852                           
  9853                           ;menu.c: 1878: while(encoder_click == 0) {
  9854  007CBE  D03D               	goto	l3941
  9855  007CC0                     
  9856                           ;menu.c: 1882: un_block_code();
  9857                           
  9858                           ; BSR set to: 1
  9859  007CC0  ECF4  F04C         	call	_un_block_code	;wreg free
  9860                           
  9861                           ;menu.c: 1884: if (lcd_print_once == 0) {
  9862  007CC4  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9863  007CC6  D038               	goto	l3945
  9864                           
  9865                           ;menu.c: 1885: clear_row1();
  9866  007CC8  EC6C  F04C         	call	_clear_row1	;wreg free
  9867                           
  9868                           ;menu.c: 1886: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
  9869  007CCC  0100               	movlb	0	; () banked
  9870  007CCE  51DD               	movf	_arpeggiatorLastNoteModeMenu& (0+255),w,b
  9871  007CD0  6EE6               	movwf	postinc1,c
  9872  007CD2  51DF               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
  9873  007CD4  6EE6               	movwf	postinc1,c
  9874  007CD6  ECA5  F041         	call	___lbmod	;wreg free
  9875  007CDA  503E               	movf	btemp,w,c
  9876  007CDC  0100               	movlb	0	; () banked
  9877  007CDE  25DE               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
  9878  007CE0  6F60               	movwf	___wmul@multiplier& (0+255),b
  9879  007CE2  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9880  007CE4  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
  9881  007CE6  0E00               	movlw	0
  9882  007CE8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9883  007CEA  0E11               	movlw	17
  9884  007CEC  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9885  007CEE  EC80  F04C         	call	___wmul	;wreg free
  9886  007CF2  0E9E               	movlw	low _LCD_STRINGS
  9887  007CF4  0100               	movlb	0	; () banked
  9888  007CF6  2560               	addwf	?___wmul& (0+255),w,b
  9889  007CF8  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9890  007CFA  0EF3               	movlw	high _LCD_STRINGS
  9891  007CFC  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9892  007CFE  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9893  007D00  ECB8  F042         	call	_Lcd_Print_String	;wreg free
  9894                           
  9895                           ;menu.c: 1887: if(arpeggiatorLastNoteModeTransposeMenu.selector == 0) {clear_row2();Lcd_
      +                          Print_String("IMMEDIATE");}
  9896  007D04  0101               	movlb	1	; () banked
  9897  007D06  510D               	movf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),w,b
  9898  007D08  A4D8               	btfss	status,2,c
  9899  007D0A  D009               	goto	l3944
  9900                           
  9901                           ; BSR set to: 1
  9902  007D0C  EC58  F04C         	call	_clear_row2	;wreg free
  9903  007D10  0EA9               	movlw	low STR_67
  9904  007D12  0100               	movlb	0	; () banked
  9905  007D14  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9906  007D16  0EFF               	movlw	high STR_67
  9907  007D18  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9908  007D1A  ECB8  F042         	call	_Lcd_Print_String	;wreg free
  9909  007D1E                     l3944:
  9910                           
  9911                           ;menu.c: 1888: if(arpeggiatorLastNoteModeTransposeMenu.selector == 1) {clear_row2();Lcd_
      +                          Print_String("FINISH LAST");}
  9912  007D1E  0101               	movlb	1	; () banked
  9913  007D20  050D               	decf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),w,b
  9914  007D22  A4D8               	btfss	status,2,c
  9915  007D24  D009               	goto	l3945
  9916                           
  9917                           ; BSR set to: 1
  9918  007D26  EC58  F04C         	call	_clear_row2	;wreg free
  9919  007D2A  0E7C               	movlw	low STR_68
  9920  007D2C  0100               	movlb	0	; () banked
  9921  007D2E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
  9922  007D30  0EFF               	movlw	high STR_68
  9923  007D32  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
  9924  007D34  ECB8  F042         	call	_Lcd_Print_String	;wreg free
  9925  007D38                     l3945:
  9926                           
  9927                           ;menu.c: 1889: }
  9928                           ;menu.c: 1890: lcd_print_once = 1;
  9929  007D38  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
  9930  007D3A                     l3941:
  9931  007D3A  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
  9932  007D3C  D7C1               	goto	l3942
  9933                           
  9934                           ;menu.c: 1891: }
  9935                           ;menu.c: 1893: LAST_NOTE_MODE_TRANSPOSE = arpeggiatorLastNoteModeTransposeMenu.selector;
  9936  007D3E  0101               	movlb	1	; () banked
  9937  007D40  A10D               	btfss	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),0,b
  9938  007D42  D002               	goto	u58400
  9939  007D44  8203               	bsf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
  9940  007D46  0012               	return	
  9941  007D48                     u58400:
  9942  007D48  9203               	bcf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
  9943  007D4A  0012               	return		;funcret
  9944  007D4C                     __end_of_Function_H_9_3:
  9945                           	opt stack 0
  9946                           tblptru	equ	0xFF8
  9947                           tblptrh	equ	0xFF7
  9948                           tblptrl	equ	0xFF6
  9949                           tablat	equ	0xFF5
  9950                           intcon	equ	0xFF2
  9951                           intcon2	equ	0xFF1
  9952                           postinc0	equ	0xFEE
  9953                           wreg	equ	0xFE8
  9954                           postinc1	equ	0xFE6
  9955                           postdec2	equ	0xFDD
  9956                           fsr2l	equ	0xFD9
  9957                           status	equ	0xFD8
  9958                           
  9959 ;; *************** function _Function_H_9_2 *****************
  9960 ;; Defined at:
  9961 ;;		line 1843 in file "menu.c"
  9962 ;; Parameters:    Size  Location     Type
  9963 ;;		None
  9964 ;; Auto vars:     Size  Location     Type
  9965 ;;		None
  9966 ;; Return value:  Size  Location     Type
  9967 ;;                  1    wreg      void 
  9968 ;; Registers used:
  9969 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9970 ;; Tracked objects:
  9971 ;;		On entry : 0/0
  9972 ;;		On exit  : 0/0
  9973 ;;		Unchanged: 0/0
  9974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9978 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9979 ;;Total ram usage:        0 bytes
  9980 ;; Hardware stack levels used:    1
  9981 ;; Hardware stack levels required when called:   16
  9982 ;; This function calls:
  9983 ;;		_Lcd_Print_String
  9984 ;;		___lbmod
  9985 ;;		___wmul
  9986 ;;		_clear_row1
  9987 ;;		_clear_row2
  9988 ;;		_un_block_code
  9989 ;; This function is called by:
  9990 ;;		_Function_H_9
  9991 ;; This function uses a non-reentrant model
  9992 ;;
  9993                           
  9994                           	psect	text11
  9995  007D4C                     __ptext11:
  9996                           	opt stack 0
  9997  007D4C                     _Function_H_9_2:
  9998                           	opt stack 11
  9999                           
 10000                           ;menu.c: 1845: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_KEY_RELEASE_MENU;
 10001                           
 10002                           ;incstack = 0
 10003  007D4C  0E28               	movlw	40
 10004  007D4E  6E4E               	movwf	_which_screen,c
 10005                           
 10006                           ;menu.c: 1846: lcd_print_once = 0;
 10007  007D50  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10008                           
 10009                           ;menu.c: 1847: encoder_click = 0;
 10010  007D52  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10011                           
 10012                           ;menu.c: 1849: arpeggiatorLastNoteModeKeyReleaseMenu.selector = LAST_NOTE_MODE_KEY_RELEA
      +                          SE;
 10013  007D54  0E00               	movlw	0
 10014  007D56  B403               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 10015  007D58  0E01               	movlw	1
 10016  007D5A  0101               	movlb	1	; () banked
 10017  007D5C  6F10               	movwf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),b
 10018                           
 10019                           ;menu.c: 1851: while(encoder_click == 0) {
 10020  007D5E  D03D               	goto	l3932
 10021  007D60                     
 10022                           ;menu.c: 1855: un_block_code();
 10023                           
 10024                           ; BSR set to: 1
 10025  007D60  ECF4  F04C         	call	_un_block_code	;wreg free
 10026                           
 10027                           ;menu.c: 1857: if (lcd_print_once == 0) {
 10028  007D64  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10029  007D66  D038               	goto	l3936
 10030                           
 10031                           ;menu.c: 1858: clear_row1();
 10032  007D68  EC6C  F04C         	call	_clear_row1	;wreg free
 10033                           
 10034                           ;menu.c: 1859: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
 10035  007D6C  0100               	movlb	0	; () banked
 10036  007D6E  51DD               	movf	_arpeggiatorLastNoteModeMenu& (0+255),w,b
 10037  007D70  6EE6               	movwf	postinc1,c
 10038  007D72  51DF               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 10039  007D74  6EE6               	movwf	postinc1,c
 10040  007D76  ECA5  F041         	call	___lbmod	;wreg free
 10041  007D7A  503E               	movf	btemp,w,c
 10042  007D7C  0100               	movlb	0	; () banked
 10043  007D7E  25DE               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
 10044  007D80  6F60               	movwf	___wmul@multiplier& (0+255),b
 10045  007D82  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 10046  007D84  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 10047  007D86  0E00               	movlw	0
 10048  007D88  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10049  007D8A  0E11               	movlw	17
 10050  007D8C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10051  007D8E  EC80  F04C         	call	___wmul	;wreg free
 10052  007D92  0E9E               	movlw	low _LCD_STRINGS
 10053  007D94  0100               	movlb	0	; () banked
 10054  007D96  2560               	addwf	?___wmul& (0+255),w,b
 10055  007D98  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10056  007D9A  0EF3               	movlw	high _LCD_STRINGS
 10057  007D9C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10058  007D9E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10059  007DA0  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 10060                           
 10061                           ;menu.c: 1860: if(arpeggiatorLastNoteModeKeyReleaseMenu.selector == 0) {clear_row2();Lcd
      +                          _Print_String("IMMEDIATE");}
 10062  007DA4  0101               	movlb	1	; () banked
 10063  007DA6  5110               	movf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),w,b
 10064  007DA8  A4D8               	btfss	status,2,c
 10065  007DAA  D009               	goto	l3935
 10066                           
 10067                           ; BSR set to: 1
 10068  007DAC  EC58  F04C         	call	_clear_row2	;wreg free
 10069  007DB0  0EA9               	movlw	low STR_67
 10070  007DB2  0100               	movlb	0	; () banked
 10071  007DB4  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10072  007DB6  0EFF               	movlw	high STR_67
 10073  007DB8  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10074  007DBA  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 10075  007DBE                     l3935:
 10076                           
 10077                           ;menu.c: 1861: if(arpeggiatorLastNoteModeKeyReleaseMenu.selector == 1) {clear_row2();Lcd
      +                          _Print_String("FINISH LAST");}
 10078  007DBE  0101               	movlb	1	; () banked
 10079  007DC0  0510               	decf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),w,b
 10080  007DC2  A4D8               	btfss	status,2,c
 10081  007DC4  D009               	goto	l3936
 10082                           
 10083                           ; BSR set to: 1
 10084  007DC6  EC58  F04C         	call	_clear_row2	;wreg free
 10085  007DCA  0E7C               	movlw	low STR_68
 10086  007DCC  0100               	movlb	0	; () banked
 10087  007DCE  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10088  007DD0  0EFF               	movlw	high STR_68
 10089  007DD2  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10090  007DD4  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 10091  007DD8                     l3936:
 10092                           
 10093                           ;menu.c: 1862: }
 10094                           ;menu.c: 1863: lcd_print_once = 1;
 10095  007DD8  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10096  007DDA                     l3932:
 10097  007DDA  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10098  007DDC  D7C1               	goto	l3933
 10099                           
 10100                           ;menu.c: 1864: }
 10101                           ;menu.c: 1866: LAST_NOTE_MODE_KEY_RELEASE = arpeggiatorLastNoteModeKeyReleaseMenu.select
      +                          or;
 10102  007DDE  0101               	movlb	1	; () banked
 10103  007DE0  A110               	btfss	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),0,b
 10104  007DE2  D002               	goto	u58340
 10105  007DE4  8403               	bsf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 10106  007DE6  0012               	return	
 10107  007DE8                     u58340:
 10108  007DE8  9403               	bcf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 10109  007DEA  0012               	return		;funcret
 10110  007DEC                     __end_of_Function_H_9_2:
 10111                           	opt stack 0
 10112                           tblptru	equ	0xFF8
 10113                           tblptrh	equ	0xFF7
 10114                           tblptrl	equ	0xFF6
 10115                           tablat	equ	0xFF5
 10116                           intcon	equ	0xFF2
 10117                           intcon2	equ	0xFF1
 10118                           postinc0	equ	0xFEE
 10119                           wreg	equ	0xFE8
 10120                           postinc1	equ	0xFE6
 10121                           postdec2	equ	0xFDD
 10122                           fsr2l	equ	0xFD9
 10123                           status	equ	0xFD8
 10124                           
 10125 ;; *************** function _Function_H_9_1 *****************
 10126 ;; Defined at:
 10127 ;;		line 1816 in file "menu.c"
 10128 ;; Parameters:    Size  Location     Type
 10129 ;;		None
 10130 ;; Auto vars:     Size  Location     Type
 10131 ;;		None
 10132 ;; Return value:  Size  Location     Type
 10133 ;;                  1    wreg      void 
 10134 ;; Registers used:
 10135 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10136 ;; Tracked objects:
 10137 ;;		On entry : 0/0
 10138 ;;		On exit  : 0/0
 10139 ;;		Unchanged: 0/0
 10140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10145 ;;Total ram usage:        0 bytes
 10146 ;; Hardware stack levels used:    1
 10147 ;; Hardware stack levels required when called:   16
 10148 ;; This function calls:
 10149 ;;		_Lcd_Print_String
 10150 ;;		___lbmod
 10151 ;;		___wmul
 10152 ;;		_clear_row1
 10153 ;;		_clear_row2
 10154 ;;		_un_block_code
 10155 ;; This function is called by:
 10156 ;;		_Function_H_9
 10157 ;; This function uses a non-reentrant model
 10158 ;;
 10159                           
 10160                           	psect	text12
 10161  007DEC                     __ptext12:
 10162                           	opt stack 0
 10163  007DEC                     _Function_H_9_1:
 10164                           	opt stack 11
 10165                           
 10166                           ;menu.c: 1818: which_screen = ARPEGGIATOR_LAST_NOTE_MODE_KEY_PRESS_MENU;
 10167                           
 10168                           ;incstack = 0
 10169  007DEC  0E27               	movlw	39
 10170  007DEE  6E4E               	movwf	_which_screen,c
 10171                           
 10172                           ;menu.c: 1819: lcd_print_once = 0;
 10173  007DF0  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10174                           
 10175                           ;menu.c: 1820: encoder_click = 0;
 10176  007DF2  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10177                           
 10178                           ;menu.c: 1822: arpeggiatorLastNoteModeKeyPressMenu.selector = LAST_NOTE_MODE_KEY_PRESS;
 10179  007DF4  0E00               	movlw	0
 10180  007DF6  B603               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 10181  007DF8  0E01               	movlw	1
 10182  007DFA  0101               	movlb	1	; () banked
 10183  007DFC  6F13               	movwf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),b
 10184                           
 10185                           ;menu.c: 1824: while(encoder_click == 0) {
 10186  007DFE  D03D               	goto	l3923
 10187  007E00                     
 10188                           ;menu.c: 1828: un_block_code();
 10189                           
 10190                           ; BSR set to: 1
 10191  007E00  ECF4  F04C         	call	_un_block_code	;wreg free
 10192                           
 10193                           ;menu.c: 1830: if (lcd_print_once == 0) {
 10194  007E04  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10195  007E06  D038               	goto	l3927
 10196                           
 10197                           ;menu.c: 1831: clear_row1();
 10198  007E08  EC6C  F04C         	call	_clear_row1	;wreg free
 10199                           
 10200                           ;menu.c: 1832: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLastNoteModeMenu.selector % arpe
      +                          ggiatorLastNoteModeMenu.number) + arpeggiatorLastNoteModeMenu.address]);
 10201  007E0C  0100               	movlb	0	; () banked
 10202  007E0E  51DD               	movf	_arpeggiatorLastNoteModeMenu& (0+255),w,b
 10203  007E10  6EE6               	movwf	postinc1,c
 10204  007E12  51DF               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 10205  007E14  6EE6               	movwf	postinc1,c
 10206  007E16  ECA5  F041         	call	___lbmod	;wreg free
 10207  007E1A  503E               	movf	btemp,w,c
 10208  007E1C  0100               	movlb	0	; () banked
 10209  007E1E  25DE               	addwf	(_arpeggiatorLastNoteModeMenu+1)& (0+255),w,b
 10210  007E20  6F60               	movwf	___wmul@multiplier& (0+255),b
 10211  007E22  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 10212  007E24  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 10213  007E26  0E00               	movlw	0
 10214  007E28  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10215  007E2A  0E11               	movlw	17
 10216  007E2C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10217  007E2E  EC80  F04C         	call	___wmul	;wreg free
 10218  007E32  0E9E               	movlw	low _LCD_STRINGS
 10219  007E34  0100               	movlb	0	; () banked
 10220  007E36  2560               	addwf	?___wmul& (0+255),w,b
 10221  007E38  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10222  007E3A  0EF3               	movlw	high _LCD_STRINGS
 10223  007E3C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10224  007E3E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10225  007E40  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 10226                           
 10227                           ;menu.c: 1833: if(arpeggiatorLastNoteModeKeyPressMenu.selector == 0) {clear_row2();Lcd_P
      +                          rint_String("IMMEDIATE");}
 10228  007E44  0101               	movlb	1	; () banked
 10229  007E46  5113               	movf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),w,b
 10230  007E48  A4D8               	btfss	status,2,c
 10231  007E4A  D009               	goto	l3926
 10232                           
 10233                           ; BSR set to: 1
 10234  007E4C  EC58  F04C         	call	_clear_row2	;wreg free
 10235  007E50  0EA9               	movlw	low STR_67
 10236  007E52  0100               	movlb	0	; () banked
 10237  007E54  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10238  007E56  0EFF               	movlw	high STR_67
 10239  007E58  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10240  007E5A  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 10241  007E5E                     l3926:
 10242                           
 10243                           ;menu.c: 1834: if(arpeggiatorLastNoteModeKeyPressMenu.selector == 1) {clear_row2();Lcd_P
      +                          rint_String("FINISH LAST");}
 10244  007E5E  0101               	movlb	1	; () banked
 10245  007E60  0513               	decf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),w,b
 10246  007E62  A4D8               	btfss	status,2,c
 10247  007E64  D009               	goto	l3927
 10248                           
 10249                           ; BSR set to: 1
 10250  007E66  EC58  F04C         	call	_clear_row2	;wreg free
 10251  007E6A  0E7C               	movlw	low STR_68
 10252  007E6C  0100               	movlb	0	; () banked
 10253  007E6E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10254  007E70  0EFF               	movlw	high STR_68
 10255  007E72  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10256  007E74  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 10257  007E78                     l3927:
 10258                           
 10259                           ;menu.c: 1835: }
 10260                           ;menu.c: 1836: lcd_print_once = 1;
 10261  007E78  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10262  007E7A                     l3923:
 10263  007E7A  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10264  007E7C  D7C1               	goto	l3924
 10265                           
 10266                           ;menu.c: 1837: }
 10267                           ;menu.c: 1839: LAST_NOTE_MODE_KEY_PRESS = arpeggiatorLastNoteModeKeyPressMenu.selector;
 10268  007E7E  0101               	movlb	1	; () banked
 10269  007E80  A113               	btfss	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),0,b
 10270  007E82  D002               	goto	u58280
 10271  007E84  8603               	bsf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 10272  007E86  0012               	return	
 10273  007E88                     u58280:
 10274  007E88  9603               	bcf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 10275  007E8A  0012               	return		;funcret
 10276  007E8C                     __end_of_Function_H_9_1:
 10277                           	opt stack 0
 10278                           tblptru	equ	0xFF8
 10279                           tblptrh	equ	0xFF7
 10280                           tblptrl	equ	0xFF6
 10281                           tablat	equ	0xFF5
 10282                           intcon	equ	0xFF2
 10283                           intcon2	equ	0xFF1
 10284                           postinc0	equ	0xFEE
 10285                           wreg	equ	0xFE8
 10286                           postinc1	equ	0xFE6
 10287                           postdec2	equ	0xFDD
 10288                           fsr2l	equ	0xFD9
 10289                           status	equ	0xFD8
 10290                           
 10291 ;; *************** function _Function_H_8 *****************
 10292 ;; Defined at:
 10293 ;;		line 1790 in file "menu.c"
 10294 ;; Parameters:    Size  Location     Type
 10295 ;;		None
 10296 ;; Auto vars:     Size  Location     Type
 10297 ;;		None
 10298 ;; Return value:  Size  Location     Type
 10299 ;;                  1    wreg      void 
 10300 ;; Registers used:
 10301 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10302 ;; Tracked objects:
 10303 ;;		On entry : 0/0
 10304 ;;		On exit  : 0/0
 10305 ;;		Unchanged: 0/0
 10306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10310 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10311 ;;Total ram usage:        0 bytes
 10312 ;; Hardware stack levels used:    1
 10313 ;; Hardware stack levels required when called:   17
 10314 ;; This function calls:
 10315 ;;		_Function_H_8_1
 10316 ;;		_Function_H_8_2
 10317 ;;		_Lcd_Print_String
 10318 ;;		___lbmod
 10319 ;;		___wmul
 10320 ;;		_clear_row2
 10321 ;;		_un_block_code
 10322 ;; This function is called by:
 10323 ;;		_Function_H
 10324 ;; This function uses a non-reentrant model
 10325 ;;
 10326                           
 10327                           	psect	text13
 10328  008C90                     __ptext13:
 10329                           	opt stack 0
 10330  008C90                     _Function_H_8:
 10331                           	opt stack 11
 10332                           
 10333                           ;menu.c: 1792: which_screen = ARPEGGIATOR_RANDOMIZE_SKIP_MENU;
 10334                           
 10335                           ;incstack = 0
 10336  008C90  0E23               	movlw	35
 10337  008C92  6E4E               	movwf	_which_screen,c
 10338                           
 10339                           ;menu.c: 1793: lcd_print_once = 0;
 10340  008C94  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10341                           
 10342                           ;menu.c: 1794: encoder_click = 0;
 10343  008C96  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10344                           
 10345                           ;menu.c: 1796: while(encoder_click == 0) {
 10346  008C98  D024               	goto	l3914
 10347  008C9A                     
 10348                           ;menu.c: 1800: un_block_code();
 10349  008C9A  ECF4  F04C         	call	_un_block_code	;wreg free
 10350                           
 10351                           ;menu.c: 1802: if (lcd_print_once == 0) {
 10352  008C9E  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10353  008CA0  D01F               	goto	l3916
 10354                           
 10355                           ;menu.c: 1803: clear_row2();
 10356  008CA2  EC58  F04C         	call	_clear_row2	;wreg free
 10357                           
 10358                           ;menu.c: 1804: Lcd_Print_String(LCD_STRINGS[(arpeggiatorRandomizeSkipMenu.selector % arp
      +                          eggiatorRandomizeSkipMenu.number) + arpeggiatorRandomizeSkipMenu.address]);
 10359  008CA6  0101               	movlb	1	; () banked
 10360  008CA8  511A               	movf	_arpeggiatorRandomizeSkipMenu& (0+255),w,b
 10361  008CAA  6EE6               	movwf	postinc1,c
 10362  008CAC  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 10363  008CAE  6EE6               	movwf	postinc1,c
 10364  008CB0  ECA5  F041         	call	___lbmod	;wreg free
 10365  008CB4  503E               	movf	btemp,w,c
 10366  008CB6  0101               	movlb	1	; () banked
 10367  008CB8  251B               	addwf	(_arpeggiatorRandomizeSkipMenu+1)& (0+255),w,b
 10368  008CBA  0100               	movlb	0	; () banked
 10369  008CBC  6F60               	movwf	___wmul@multiplier& (0+255),b
 10370  008CBE  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 10371  008CC0  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 10372  008CC2  0E00               	movlw	0
 10373  008CC4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10374  008CC6  0E11               	movlw	17
 10375  008CC8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10376  008CCA  EC80  F04C         	call	___wmul	;wreg free
 10377  008CCE  0E9E               	movlw	low _LCD_STRINGS
 10378  008CD0  0100               	movlb	0	; () banked
 10379  008CD2  2560               	addwf	?___wmul& (0+255),w,b
 10380  008CD4  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10381  008CD6  0EF3               	movlw	high _LCD_STRINGS
 10382  008CD8  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10383  008CDA  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10384  008CDC  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 10385  008CE0                     l3916:
 10386                           
 10387                           ;menu.c: 1805: }
 10388                           ;menu.c: 1806: lcd_print_once = 1;
 10389  008CE0  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10390  008CE2                     l3914:
 10391  008CE2  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10392  008CE4  D7DA               	goto	l3915
 10393                           
 10394                           ;menu.c: 1807: }
 10395                           ;menu.c: 1810: if(arpeggiatorRandomizeSkipMenu.selector == 0) {Function_H_8_1();}
 10396  008CE6  0101               	movlb	1	; () banked
 10397  008CE8  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 10398  008CEA  B4D8               	btfsc	status,2,c
 10399                           
 10400                           ; BSR set to: 1
 10401  008CEC  ECED  F044         	call	_Function_H_8_1	;wreg free
 10402                           
 10403                           ;menu.c: 1811: if(arpeggiatorRandomizeSkipMenu.selector == 1) {Function_H_8_2();}
 10404  008CF0  0101               	movlb	1	; () banked
 10405  008CF2  051C               	decf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 10406  008CF4  A4D8               	btfss	status,2,c
 10407  008CF6  0012               	return	
 10408                           
 10409                           ; BSR set to: 1
 10410  008CF8  ECC5  F047         	call	_Function_H_8_2	;wreg free
 10411  008CFC  0012               	return	
 10412  008CFE                     __end_of_Function_H_8:
 10413                           	opt stack 0
 10414                           tblptru	equ	0xFF8
 10415                           tblptrh	equ	0xFF7
 10416                           tblptrl	equ	0xFF6
 10417                           tablat	equ	0xFF5
 10418                           intcon	equ	0xFF2
 10419                           intcon2	equ	0xFF1
 10420                           postinc0	equ	0xFEE
 10421                           wreg	equ	0xFE8
 10422                           postinc1	equ	0xFE6
 10423                           postdec2	equ	0xFDD
 10424                           fsr2l	equ	0xFD9
 10425                           status	equ	0xFD8
 10426                           
 10427 ;; *************** function _Function_H_8_2 *****************
 10428 ;; Defined at:
 10429 ;;		line 1764 in file "menu.c"
 10430 ;; Parameters:    Size  Location     Type
 10431 ;;		None
 10432 ;; Auto vars:     Size  Location     Type
 10433 ;;		None
 10434 ;; Return value:  Size  Location     Type
 10435 ;;                  1    wreg      void 
 10436 ;; Registers used:
 10437 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10438 ;; Tracked objects:
 10439 ;;		On entry : 0/0
 10440 ;;		On exit  : 0/0
 10441 ;;		Unchanged: 0/0
 10442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10447 ;;Total ram usage:        0 bytes
 10448 ;; Hardware stack levels used:    1
 10449 ;; Hardware stack levels required when called:   16
 10450 ;; This function calls:
 10451 ;;		_Lcd_Print_String
 10452 ;;		_clear_row2
 10453 ;;		_un_block_code
 10454 ;; This function is called by:
 10455 ;;		_Function_H_8
 10456 ;; This function uses a non-reentrant model
 10457 ;;
 10458                           
 10459                           	psect	text14
 10460  008F8A                     __ptext14:
 10461                           	opt stack 0
 10462  008F8A                     _Function_H_8_2:
 10463                           	opt stack 11
 10464                           
 10465                           ;menu.c: 1766: which_screen = ARPEGGIATOR_SKIP_FIRST_LAST_MENU;
 10466                           
 10467                           ;incstack = 0
 10468  008F8A  0E25               	movlw	37
 10469  008F8C  6E4E               	movwf	_which_screen,c
 10470                           
 10471                           ;menu.c: 1767: lcd_print_once = 0;
 10472  008F8E  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10473                           
 10474                           ;menu.c: 1768: encoder_click = 0;
 10475  008F90  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10476                           
 10477                           ;menu.c: 1770: arpeggiatorSkipFirstLastMenu.selector = skipFirstLast;
 10478  008F92  0E00               	movlw	0
 10479  008F94  BA03               	btfsc	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 10480  008F96  0E01               	movlw	1
 10481  008F98  0101               	movlb	1	; () banked
 10482  008F9A  6F16               	movwf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),b
 10483                           
 10484                           ;menu.c: 1772: while(encoder_click == 0) {
 10485  008F9C  D01F               	goto	l3905
 10486  008F9E                     
 10487                           ;menu.c: 1776: un_block_code();
 10488                           
 10489                           ; BSR set to: 1
 10490  008F9E  ECF4  F04C         	call	_un_block_code	;wreg free
 10491                           
 10492                           ;menu.c: 1778: if (lcd_print_once == 0) {
 10493  008FA2  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10494  008FA4  D01A               	goto	l3909
 10495                           
 10496                           ;menu.c: 1779: if(arpeggiatorSkipFirstLastMenu.selector == 0) {clear_row2();Lcd_Print_St
      +                          ring("Skip F/L OFF");}
 10497  008FA6  0101               	movlb	1	; () banked
 10498  008FA8  5116               	movf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),w,b
 10499  008FAA  A4D8               	btfss	status,2,c
 10500  008FAC  D009               	goto	l3908
 10501                           
 10502                           ; BSR set to: 1
 10503  008FAE  EC58  F04C         	call	_clear_row2	;wreg free
 10504  008FB2  0E3F               	movlw	low STR_65
 10505  008FB4  0100               	movlb	0	; () banked
 10506  008FB6  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10507  008FB8  0EFF               	movlw	high STR_65
 10508  008FBA  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10509  008FBC  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 10510  008FC0                     l3908:
 10511                           
 10512                           ;menu.c: 1780: if(arpeggiatorSkipFirstLastMenu.selector == 1) {clear_row2();Lcd_Print_St
      +                          ring("Skip F/L ON");}
 10513  008FC0  0101               	movlb	1	; () banked
 10514  008FC2  0516               	decf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),w,b
 10515  008FC4  A4D8               	btfss	status,2,c
 10516  008FC6  D009               	goto	l3909
 10517                           
 10518                           ; BSR set to: 1
 10519  008FC8  EC58  F04C         	call	_clear_row2	;wreg free
 10520  008FCC  0E70               	movlw	low STR_66
 10521  008FCE  0100               	movlb	0	; () banked
 10522  008FD0  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10523  008FD2  0EFF               	movlw	high STR_66
 10524  008FD4  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10525  008FD6  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 10526  008FDA                     l3909:
 10527                           
 10528                           ;menu.c: 1781: }
 10529                           ;menu.c: 1782: lcd_print_once = 1;
 10530  008FDA  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10531  008FDC                     l3905:
 10532  008FDC  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10533  008FDE  D7DF               	goto	l3906
 10534                           
 10535                           ;menu.c: 1783: }
 10536                           ;menu.c: 1785: skipFirstLast = arpeggiatorSkipFirstLastMenu.selector;
 10537  008FE0  0101               	movlb	1	; () banked
 10538  008FE2  A116               	btfss	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),0,b
 10539  008FE4  D002               	goto	u58220
 10540  008FE6  8A03               	bsf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 10541  008FE8  0012               	return	
 10542  008FEA                     u58220:
 10543  008FEA  9A03               	bcf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 10544  008FEC  0012               	return		;funcret
 10545  008FEE                     __end_of_Function_H_8_2:
 10546                           	opt stack 0
 10547                           tblptru	equ	0xFF8
 10548                           tblptrh	equ	0xFF7
 10549                           tblptrl	equ	0xFF6
 10550                           tablat	equ	0xFF5
 10551                           intcon	equ	0xFF2
 10552                           intcon2	equ	0xFF1
 10553                           postinc0	equ	0xFEE
 10554                           wreg	equ	0xFE8
 10555                           postinc1	equ	0xFE6
 10556                           postdec2	equ	0xFDD
 10557                           fsr2l	equ	0xFD9
 10558                           status	equ	0xFD8
 10559                           
 10560 ;; *************** function _Function_H_8_1 *****************
 10561 ;; Defined at:
 10562 ;;		line 1734 in file "menu.c"
 10563 ;; Parameters:    Size  Location     Type
 10564 ;;		None
 10565 ;; Auto vars:     Size  Location     Type
 10566 ;;		None
 10567 ;; Return value:  Size  Location     Type
 10568 ;;                  1    wreg      void 
 10569 ;; Registers used:
 10570 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10571 ;; Tracked objects:
 10572 ;;		On entry : 0/0
 10573 ;;		On exit  : 0/0
 10574 ;;		Unchanged: 0/0
 10575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10580 ;;Total ram usage:        0 bytes
 10581 ;; Hardware stack levels used:    1
 10582 ;; Hardware stack levels required when called:   16
 10583 ;; This function calls:
 10584 ;;		_Lcd_Print_String
 10585 ;;		_clear_row1
 10586 ;;		_clear_row2
 10587 ;;		_un_block_code
 10588 ;; This function is called by:
 10589 ;;		_Function_H_8
 10590 ;; This function uses a non-reentrant model
 10591 ;;
 10592                           
 10593                           	psect	text15
 10594  0089DA                     __ptext15:
 10595                           	opt stack 0
 10596  0089DA                     _Function_H_8_1:
 10597                           	opt stack 11
 10598                           
 10599                           ;menu.c: 1736: which_screen = ARPEGGIATOR_RANDOMIZE_TYPE_MENU;
 10600                           
 10601                           ;incstack = 0
 10602  0089DA  0E24               	movlw	36
 10603  0089DC  6E4E               	movwf	_which_screen,c
 10604                           
 10605                           ;menu.c: 1737: lcd_print_once = 0;
 10606  0089DE  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10607                           
 10608                           ;menu.c: 1738: encoder_click = 0;
 10609  0089E0  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10610                           
 10611                           ;menu.c: 1740: arpeggiatorRandomizeTypeMenu.selector = AUTO_RANDOMIZE;
 10612  0089E2  0E00               	movlw	0
 10613  0089E4  BC03               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 10614  0089E6  0E01               	movlw	1
 10615  0089E8  0101               	movlb	1	; () banked
 10616  0089EA  6F19               	movwf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),b
 10617                           
 10618                           ;menu.c: 1742: while(encoder_click == 0) {
 10619  0089EC  D028               	goto	l3896
 10620  0089EE                     
 10621                           ;menu.c: 1746: un_block_code();
 10622                           
 10623                           ; BSR set to: 1
 10624  0089EE  ECF4  F04C         	call	_un_block_code	;wreg free
 10625                           
 10626                           ;menu.c: 1748: if (lcd_print_once == 0) {
 10627  0089F2  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10628  0089F4  D023               	goto	l3900
 10629                           
 10630                           ;menu.c: 1749: clear_row1();
 10631  0089F6  EC6C  F04C         	call	_clear_row1	;wreg free
 10632                           
 10633                           ;menu.c: 1750: Lcd_Print_String("Randomize Type:");
 10634  0089FA  0E1D               	movlw	low STR_62
 10635  0089FC  0100               	movlb	0	; () banked
 10636  0089FE  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10637  008A00  0EFE               	movlw	high STR_62
 10638  008A02  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10639  008A04  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 10640                           
 10641                           ;menu.c: 1753: if(arpeggiatorRandomizeTypeMenu.selector == 0) {clear_row2();Lcd_Print_St
      +                          ring("RANDOMIZE AUTO");}
 10642  008A08  0101               	movlb	1	; () banked
 10643  008A0A  5119               	movf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),w,b
 10644  008A0C  A4D8               	btfss	status,2,c
 10645  008A0E  D009               	goto	l3899
 10646                           
 10647                           ; BSR set to: 1
 10648  008A10  EC58  F04C         	call	_clear_row2	;wreg free
 10649  008A14  0EA7               	movlw	low STR_63
 10650  008A16  0100               	movlb	0	; () banked
 10651  008A18  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10652  008A1A  0EFE               	movlw	high STR_63
 10653  008A1C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10654  008A1E  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 10655  008A22                     l3899:
 10656                           
 10657                           ;menu.c: 1754: if(arpeggiatorRandomizeTypeMenu.selector == 1) {clear_row2();Lcd_Print_St
      +                          ring("RANDOMIZE ONCE");}
 10658  008A22  0101               	movlb	1	; () banked
 10659  008A24  0519               	decf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),w,b
 10660  008A26  A4D8               	btfss	status,2,c
 10661  008A28  D009               	goto	l3900
 10662                           
 10663                           ; BSR set to: 1
 10664  008A2A  EC58  F04C         	call	_clear_row2	;wreg free
 10665  008A2E  0E7A               	movlw	low STR_64
 10666  008A30  0100               	movlb	0	; () banked
 10667  008A32  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10668  008A34  0EFE               	movlw	high STR_64
 10669  008A36  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10670  008A38  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 10671  008A3C                     l3900:
 10672                           
 10673                           ;menu.c: 1755: }
 10674                           ;menu.c: 1756: lcd_print_once = 1;
 10675  008A3C  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10676  008A3E                     l3896:
 10677  008A3E  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10678  008A40  D7D6               	goto	l3897
 10679                           
 10680                           ;menu.c: 1757: }
 10681                           ;menu.c: 1759: AUTO_RANDOMIZE = arpeggiatorRandomizeTypeMenu.selector;
 10682  008A42  0101               	movlb	1	; () banked
 10683  008A44  A119               	btfss	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),0,b
 10684  008A46  D002               	goto	u58160
 10685  008A48  8C03               	bsf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 10686  008A4A  0012               	return	
 10687  008A4C                     u58160:
 10688  008A4C  9C03               	bcf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 10689  008A4E  0012               	return		;funcret
 10690  008A50                     __end_of_Function_H_8_1:
 10691                           	opt stack 0
 10692                           tblptru	equ	0xFF8
 10693                           tblptrh	equ	0xFF7
 10694                           tblptrl	equ	0xFF6
 10695                           tablat	equ	0xFF5
 10696                           intcon	equ	0xFF2
 10697                           intcon2	equ	0xFF1
 10698                           postinc0	equ	0xFEE
 10699                           wreg	equ	0xFE8
 10700                           postinc1	equ	0xFE6
 10701                           postdec2	equ	0xFDD
 10702                           fsr2l	equ	0xFD9
 10703                           status	equ	0xFD8
 10704                           
 10705 ;; *************** function _Function_H_7 *****************
 10706 ;; Defined at:
 10707 ;;		line 1697 in file "menu.c"
 10708 ;; Parameters:    Size  Location     Type
 10709 ;;		None
 10710 ;; Auto vars:     Size  Location     Type
 10711 ;;		None
 10712 ;; Return value:  Size  Location     Type
 10713 ;;                  1    wreg      void 
 10714 ;; Registers used:
 10715 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10716 ;; Tracked objects:
 10717 ;;		On entry : 0/0
 10718 ;;		On exit  : 0/0
 10719 ;;		Unchanged: 0/0
 10720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10725 ;;Total ram usage:        0 bytes
 10726 ;; Hardware stack levels used:    1
 10727 ;; Hardware stack levels required when called:   16
 10728 ;; This function calls:
 10729 ;;		_Lcd_Print_String
 10730 ;;		_clear_row1
 10731 ;;		_clear_row2
 10732 ;;		_strcpy
 10733 ;;		_un_block_code
 10734 ;; This function is called by:
 10735 ;;		_Function_H
 10736 ;; This function uses a non-reentrant model
 10737 ;;
 10738                           
 10739                           	psect	text16
 10740  0078BA                     __ptext16:
 10741                           	opt stack 0
 10742  0078BA                     _Function_H_7:
 10743                           	opt stack 12
 10744                           
 10745                           ;menu.c: 1699: which_screen = ARPEGGIATOR_UN_LATCH_MODE_MENU;
 10746                           
 10747                           ;incstack = 0
 10748  0078BA  0E22               	movlw	34
 10749  0078BC  6E4E               	movwf	_which_screen,c
 10750                           
 10751                           ;menu.c: 1700: lcd_print_once = 0;
 10752  0078BE  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10753                           
 10754                           ;menu.c: 1701: encoder_click = 0;
 10755  0078C0  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10756                           
 10757                           ;menu.c: 1703: arpeggiatorUnLatchModeMenu.selector = UN_LATCH_MODE;
 10758  0078C2  0E00               	movlw	0
 10759  0078C4  B204               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 10760  0078C6  0E01               	movlw	1
 10761  0078C8  0101               	movlb	1	; () banked
 10762  0078CA  6F1F               	movwf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),b
 10763                           
 10764                           ;menu.c: 1705: while(encoder_click == 0) {
 10765  0078CC  D044               	goto	l3887
 10766  0078CE                     
 10767                           ;menu.c: 1709: un_block_code();
 10768                           
 10769                           ; BSR set to: 1
 10770  0078CE  ECF4  F04C         	call	_un_block_code	;wreg free
 10771                           
 10772                           ;menu.c: 1711: if (lcd_print_once == 0) {
 10773  0078D2  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10774  0078D4  D03F               	goto	l3891
 10775                           
 10776                           ;menu.c: 1712: clear_row1();
 10777  0078D6  EC6C  F04C         	call	_clear_row1	;wreg free
 10778                           
 10779                           ;menu.c: 1713: Lcd_Print_String("Un-latch Mode:");
 10780  0078DA  0E5C               	movlw	low STR_57
 10781  0078DC  0100               	movlb	0	; () banked
 10782  0078DE  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10783  0078E0  0EFE               	movlw	high STR_57
 10784  0078E2  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10785  0078E4  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 10786                           
 10787                           ;menu.c: 1714: clear_row2();
 10788  0078E8  EC58  F04C         	call	_clear_row2	;wreg free
 10789                           
 10790                           ;menu.c: 1716: if(arpeggiatorUnLatchModeMenu.selector == 0) {
 10791  0078EC  0101               	movlb	1	; () banked
 10792  0078EE  511F               	movf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),w,b
 10793  0078F0  A4D8               	btfss	status,2,c
 10794  0078F2  D016               	goto	l3890
 10795                           
 10796                           ; BSR set to: 1
 10797                           ;menu.c: 1717: clear_row2();Lcd_Print_String("UNLATCH ALL");
 10798  0078F4  EC58  F04C         	call	_clear_row2	;wreg free
 10799  0078F8  0E64               	movlw	low STR_58
 10800  0078FA  0100               	movlb	0	; () banked
 10801  0078FC  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10802  0078FE  0EFF               	movlw	high STR_58
 10803  007900  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10804  007902  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 10805                           
 10806                           ;menu.c: 1718: DISPLAY_MODE = 1;
 10807  007906  0E01               	movlw	1
 10808  007908  0100               	movlb	0	; () banked
 10809  00790A  6FEF               	movwf	_DISPLAY_MODE& (0+255),b
 10810                           
 10811                           ; BSR set to: 0
 10812                           ;menu.c: 1719: strcpy(string_to_display, " ALL");
 10813  00790C  0EFB               	movlw	low _string_to_display
 10814  00790E  6F60               	movwf	strcpy@to& (0+255),b
 10815  007910  0E01               	movlw	high _string_to_display
 10816  007912  6F61               	movwf	(strcpy@to+1)& (0+255),b
 10817  007914  0E6B               	movlw	low (STR_58+7)
 10818  007916  6F62               	movwf	strcpy@from& (0+255),b
 10819  007918  0EFF               	movlw	high (STR_58+7)
 10820  00791A  6F63               	movwf	(strcpy@from+1)& (0+255),b
 10821  00791C  ECE4  F04B         	call	_strcpy	;wreg free
 10822  007920                     l3890:
 10823                           
 10824                           ;menu.c: 1720: }
 10825                           ;menu.c: 1721: if(arpeggiatorUnLatchModeMenu.selector == 1) {
 10826  007920  0101               	movlb	1	; () banked
 10827  007922  051F               	decf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),w,b
 10828  007924  A4D8               	btfss	status,2,c
 10829  007926  D016               	goto	l3891
 10830                           
 10831                           ; BSR set to: 1
 10832                           ;menu.c: 1722: clear_row2();Lcd_Print_String("ONE AT A TIME");
 10833  007928  EC58  F04C         	call	_clear_row2	;wreg free
 10834  00792C  0EFC               	movlw	low STR_60
 10835  00792E  0100               	movlb	0	; () banked
 10836  007930  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10837  007932  0EFE               	movlw	high STR_60
 10838  007934  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10839  007936  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 10840                           
 10841                           ;menu.c: 1723: DISPLAY_MODE = 1;
 10842  00793A  0E01               	movlw	1
 10843  00793C  0100               	movlb	0	; () banked
 10844  00793E  6FEF               	movwf	_DISPLAY_MODE& (0+255),b
 10845                           
 10846                           ; BSR set to: 0
 10847                           ;menu.c: 1724: strcpy(string_to_display, " OnE");
 10848  007940  0EFB               	movlw	low _string_to_display
 10849  007942  6F60               	movwf	strcpy@to& (0+255),b
 10850  007944  0E01               	movlw	high _string_to_display
 10851  007946  6F61               	movwf	(strcpy@to+1)& (0+255),b
 10852  007948  0EC8               	movlw	low STR_61
 10853  00794A  6F62               	movwf	strcpy@from& (0+255),b
 10854  00794C  0EFF               	movlw	high STR_61
 10855  00794E  6F63               	movwf	(strcpy@from+1)& (0+255),b
 10856  007950  ECE4  F04B         	call	_strcpy	;wreg free
 10857  007954                     l3891:
 10858                           
 10859                           ;menu.c: 1725: }
 10860                           ;menu.c: 1726: }
 10861                           ;menu.c: 1727: lcd_print_once = 1;
 10862  007954  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10863  007956                     l3887:
 10864  007956  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10865  007958  D7BA               	goto	l3888
 10866                           
 10867                           ;menu.c: 1728: }
 10868                           ;menu.c: 1730: UN_LATCH_MODE = arpeggiatorUnLatchModeMenu.selector;
 10869  00795A  0101               	movlb	1	; () banked
 10870  00795C  A11F               	btfss	(_arpeggiatorUnLatchModeMenu+2)& (0+255),0,b
 10871  00795E  D002               	goto	u59510
 10872  007960  8204               	bsf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 10873  007962  0012               	return	
 10874  007964                     u59510:
 10875  007964  9204               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 10876  007966  0012               	return		;funcret
 10877  007968                     __end_of_Function_H_7:
 10878                           	opt stack 0
 10879                           tblptru	equ	0xFF8
 10880                           tblptrh	equ	0xFF7
 10881                           tblptrl	equ	0xFF6
 10882                           tablat	equ	0xFF5
 10883                           intcon	equ	0xFF2
 10884                           intcon2	equ	0xFF1
 10885                           postinc0	equ	0xFEE
 10886                           wreg	equ	0xFE8
 10887                           postinc1	equ	0xFE6
 10888                           postdec2	equ	0xFDD
 10889                           fsr2l	equ	0xFD9
 10890                           status	equ	0xFD8
 10891                           
 10892 ;; *************** function _Function_H_6 *****************
 10893 ;; Defined at:
 10894 ;;		line 1672 in file "menu.c"
 10895 ;; Parameters:    Size  Location     Type
 10896 ;;		None
 10897 ;; Auto vars:     Size  Location     Type
 10898 ;;		None
 10899 ;; Return value:  Size  Location     Type
 10900 ;;                  1    wreg      void 
 10901 ;; Registers used:
 10902 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10903 ;; Tracked objects:
 10904 ;;		On entry : 0/0
 10905 ;;		On exit  : 0/0
 10906 ;;		Unchanged: 0/0
 10907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10912 ;;Total ram usage:        0 bytes
 10913 ;; Hardware stack levels used:    1
 10914 ;; Hardware stack levels required when called:   17
 10915 ;; This function calls:
 10916 ;;		_Function_H_6_1
 10917 ;;		_Function_H_6_2
 10918 ;;		_Lcd_Print_String
 10919 ;;		___lbmod
 10920 ;;		___wmul
 10921 ;;		_clear_row2
 10922 ;;		_un_block_code
 10923 ;; This function is called by:
 10924 ;;		_Function_H
 10925 ;; This function uses a non-reentrant model
 10926 ;;
 10927                           
 10928                           	psect	text17
 10929  008CFE                     __ptext17:
 10930                           	opt stack 0
 10931  008CFE                     _Function_H_6:
 10932                           	opt stack 11
 10933                           
 10934                           ;menu.c: 1674: which_screen = ARPEGGIATOR_LATCH_MENU;
 10935                           
 10936                           ;incstack = 0
 10937  008CFE  0E1F               	movlw	31
 10938  008D00  6E4E               	movwf	_which_screen,c
 10939                           
 10940                           ;menu.c: 1675: lcd_print_once = 0;
 10941  008D02  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10942                           
 10943                           ;menu.c: 1676: encoder_click = 0;
 10944  008D04  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 10945                           
 10946                           ;menu.c: 1678: while(encoder_click == 0) {
 10947  008D06  D024               	goto	l3878
 10948  008D08                     
 10949                           ;menu.c: 1682: un_block_code();
 10950  008D08  ECF4  F04C         	call	_un_block_code	;wreg free
 10951                           
 10952                           ;menu.c: 1684: if (lcd_print_once == 0) {
 10953  008D0C  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10954  008D0E  D01F               	goto	l3880
 10955                           
 10956                           ;menu.c: 1685: clear_row2();
 10957  008D10  EC58  F04C         	call	_clear_row2	;wreg free
 10958                           
 10959                           ;menu.c: 1686: Lcd_Print_String(LCD_STRINGS[(arpeggiatorLatchMenu.selector % arpeggiator
      +                          LatchMenu.number) + arpeggiatorLatchMenu.address]);
 10960  008D14  0101               	movlb	1	; () banked
 10961  008D16  5126               	movf	_arpeggiatorLatchMenu& (0+255),w,b
 10962  008D18  6EE6               	movwf	postinc1,c
 10963  008D1A  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 10964  008D1C  6EE6               	movwf	postinc1,c
 10965  008D1E  ECA5  F041         	call	___lbmod	;wreg free
 10966  008D22  503E               	movf	btemp,w,c
 10967  008D24  0101               	movlb	1	; () banked
 10968  008D26  2527               	addwf	(_arpeggiatorLatchMenu+1)& (0+255),w,b
 10969  008D28  0100               	movlb	0	; () banked
 10970  008D2A  6F60               	movwf	___wmul@multiplier& (0+255),b
 10971  008D2C  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 10972  008D2E  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 10973  008D30  0E00               	movlw	0
 10974  008D32  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10975  008D34  0E11               	movlw	17
 10976  008D36  6F62               	movwf	___wmul@multiplicand& (0+255),b
 10977  008D38  EC80  F04C         	call	___wmul	;wreg free
 10978  008D3C  0E9E               	movlw	low _LCD_STRINGS
 10979  008D3E  0100               	movlb	0	; () banked
 10980  008D40  2560               	addwf	?___wmul& (0+255),w,b
 10981  008D42  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 10982  008D44  0EF3               	movlw	high _LCD_STRINGS
 10983  008D46  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 10984  008D48  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 10985  008D4A  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 10986  008D4E                     l3880:
 10987                           
 10988                           ;menu.c: 1687: }
 10989                           ;menu.c: 1688: lcd_print_once = 1;
 10990  008D4E  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 10991  008D50                     l3878:
 10992  008D50  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 10993  008D52  D7DA               	goto	l3879
 10994                           
 10995                           ;menu.c: 1689: }
 10996                           ;menu.c: 1692: if(arpeggiatorLatchMenu.selector == 0) {Function_H_6_1();}
 10997  008D54  0101               	movlb	1	; () banked
 10998  008D56  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 10999  008D58  B4D8               	btfsc	status,2,c
 11000                           
 11001                           ; BSR set to: 1
 11002  008D5A  ECE6  F03F         	call	_Function_H_6_1	;wreg free
 11003                           
 11004                           ;menu.c: 1693: if(arpeggiatorLatchMenu.selector == 1) {Function_H_6_2();}
 11005  008D5E  0101               	movlb	1	; () banked
 11006  008D60  0528               	decf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 11007  008D62  A4D8               	btfss	status,2,c
 11008  008D64  0012               	return	
 11009                           
 11010                           ; BSR set to: 1
 11011  008D66  EC0B  F03D         	call	_Function_H_6_2	;wreg free
 11012  008D6A  0012               	return	
 11013  008D6C                     __end_of_Function_H_6:
 11014                           	opt stack 0
 11015                           tblptru	equ	0xFF8
 11016                           tblptrh	equ	0xFF7
 11017                           tblptrl	equ	0xFF6
 11018                           tablat	equ	0xFF5
 11019                           intcon	equ	0xFF2
 11020                           intcon2	equ	0xFF1
 11021                           postinc0	equ	0xFEE
 11022                           wreg	equ	0xFE8
 11023                           postinc1	equ	0xFE6
 11024                           postdec2	equ	0xFDD
 11025                           fsr2l	equ	0xFD9
 11026                           status	equ	0xFD8
 11027                           
 11028 ;; *************** function _Function_H_6_2 *****************
 11029 ;; Defined at:
 11030 ;;		line 1637 in file "menu.c"
 11031 ;; Parameters:    Size  Location     Type
 11032 ;;		None
 11033 ;; Auto vars:     Size  Location     Type
 11034 ;;		None
 11035 ;; Return value:  Size  Location     Type
 11036 ;;                  1    wreg      void 
 11037 ;; Registers used:
 11038 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11039 ;; Tracked objects:
 11040 ;;		On entry : 0/0
 11041 ;;		On exit  : 0/0
 11042 ;;		Unchanged: 0/0
 11043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11048 ;;Total ram usage:        0 bytes
 11049 ;; Hardware stack levels used:    1
 11050 ;; Hardware stack levels required when called:   16
 11051 ;; This function calls:
 11052 ;;		_Lcd_Print_String
 11053 ;;		_clear_row1
 11054 ;;		_clear_row2
 11055 ;;		_strcpy
 11056 ;;		_un_block_code
 11057 ;; This function is called by:
 11058 ;;		_Function_H_6
 11059 ;; This function uses a non-reentrant model
 11060 ;;
 11061                           
 11062                           	psect	text18
 11063  007A16                     __ptext18:
 11064                           	opt stack 0
 11065  007A16                     _Function_H_6_2:
 11066                           	opt stack 11
 11067                           
 11068                           ;menu.c: 1639: which_screen = ARPEGGIATOR_AUTO_LATCH_ON_OFF_MENU;
 11069                           
 11070                           ;incstack = 0
 11071  007A16  0E21               	movlw	33
 11072  007A18  6E4E               	movwf	_which_screen,c
 11073                           
 11074                           ;menu.c: 1640: lcd_print_once = 0;
 11075  007A1A  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11076                           
 11077                           ;menu.c: 1641: encoder_click = 0;
 11078  007A1C  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11079                           
 11080                           ;menu.c: 1643: arpeggiatorAutoLatchOnOffMenu.selector = AUTO_LATCH;
 11081  007A1E  0E00               	movlw	0
 11082  007A20  B004               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 11083  007A22  0E01               	movlw	1
 11084  007A24  0101               	movlb	1	; () banked
 11085  007A26  6F22               	movwf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),b
 11086                           
 11087                           ;menu.c: 1645: while(encoder_click == 0) {
 11088  007A28  D042               	goto	l3869
 11089  007A2A                     
 11090                           ;menu.c: 1649: un_block_code();
 11091                           
 11092                           ; BSR set to: 1
 11093  007A2A  ECF4  F04C         	call	_un_block_code	;wreg free
 11094                           
 11095                           ;menu.c: 1651: if (lcd_print_once == 0) {
 11096  007A2E  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11097  007A30  D03D               	goto	l3873
 11098                           
 11099                           ;menu.c: 1652: clear_row1();Lcd_Print_String("AutoLatch ON/OFF");
 11100  007A32  EC6C  F04C         	call	_clear_row1	;wreg free
 11101  007A36  0EDB               	movlw	low STR_52
 11102  007A38  0100               	movlb	0	; () banked
 11103  007A3A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11104  007A3C  0EFD               	movlw	high STR_52
 11105  007A3E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11106  007A40  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 11107                           
 11108                           ;menu.c: 1653: if(arpeggiatorAutoLatchOnOffMenu.selector == 0) {
 11109  007A44  0101               	movlb	1	; () banked
 11110  007A46  5122               	movf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),w,b
 11111  007A48  A4D8               	btfss	status,2,c
 11112  007A4A  D016               	goto	l3872
 11113                           
 11114                           ; BSR set to: 1
 11115                           ;menu.c: 1654: clear_row2();Lcd_Print_String("Auto Latch OFF");
 11116  007A4C  EC58  F04C         	call	_clear_row2	;wreg free
 11117  007A50  0E89               	movlw	low STR_53
 11118  007A52  0100               	movlb	0	; () banked
 11119  007A54  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11120  007A56  0EFE               	movlw	high STR_53
 11121  007A58  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11122  007A5A  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 11123                           
 11124                           ;menu.c: 1655: DISPLAY_MODE = 1;
 11125  007A5E  0E01               	movlw	1
 11126  007A60  0100               	movlb	0	; () banked
 11127  007A62  6FEF               	movwf	_DISPLAY_MODE& (0+255),b
 11128                           
 11129                           ; BSR set to: 0
 11130                           ;menu.c: 1656: strcpy(string_to_display, " oFF");
 11131  007A64  0EFB               	movlw	low _string_to_display
 11132  007A66  6F60               	movwf	strcpy@to& (0+255),b
 11133  007A68  0E01               	movlw	high _string_to_display
 11134  007A6A  6F61               	movwf	(strcpy@to+1)& (0+255),b
 11135  007A6C  0EDC               	movlw	low STR_5
 11136  007A6E  6F62               	movwf	strcpy@from& (0+255),b
 11137  007A70  0EFF               	movlw	high STR_5
 11138  007A72  6F63               	movwf	(strcpy@from+1)& (0+255),b
 11139  007A74  ECE4  F04B         	call	_strcpy	;wreg free
 11140  007A78                     l3872:
 11141                           
 11142                           ;menu.c: 1657: }
 11143                           ;menu.c: 1658: if(arpeggiatorAutoLatchOnOffMenu.selector == 1) {
 11144  007A78  0101               	movlb	1	; () banked
 11145  007A7A  0522               	decf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),w,b
 11146  007A7C  A4D8               	btfss	status,2,c
 11147  007A7E  D016               	goto	l3873
 11148                           
 11149                           ; BSR set to: 1
 11150                           ;menu.c: 1659: clear_row2();Lcd_Print_String("Auto Latch ON");
 11151  007A80  EC58  F04C         	call	_clear_row2	;wreg free
 11152  007A84  0E0A               	movlw	low STR_55
 11153  007A86  0100               	movlb	0	; () banked
 11154  007A88  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11155  007A8A  0EFF               	movlw	high STR_55
 11156  007A8C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11157  007A8E  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 11158                           
 11159                           ;menu.c: 1660: DISPLAY_MODE = 1;
 11160  007A92  0E01               	movlw	1
 11161  007A94  0100               	movlb	0	; () banked
 11162  007A96  6FEF               	movwf	_DISPLAY_MODE& (0+255),b
 11163                           
 11164                           ; BSR set to: 0
 11165                           ;menu.c: 1661: strcpy(string_to_display, "Auto");
 11166  007A98  0EFB               	movlw	low _string_to_display
 11167  007A9A  6F60               	movwf	strcpy@to& (0+255),b
 11168  007A9C  0E01               	movlw	high _string_to_display
 11169  007A9E  6F61               	movwf	(strcpy@to+1)& (0+255),b
 11170  007AA0  0EF0               	movlw	low STR_4
 11171  007AA2  6F62               	movwf	strcpy@from& (0+255),b
 11172  007AA4  0EFF               	movlw	high STR_4
 11173  007AA6  6F63               	movwf	(strcpy@from+1)& (0+255),b
 11174  007AA8  ECE4  F04B         	call	_strcpy	;wreg free
 11175  007AAC                     l3873:
 11176                           
 11177                           ;menu.c: 1662: }
 11178                           ;menu.c: 1663: }
 11179                           ;menu.c: 1664: lcd_print_once = 1;
 11180  007AAC  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11181  007AAE                     l3869:
 11182  007AAE  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11183  007AB0  D7BC               	goto	l3870
 11184                           
 11185                           ;menu.c: 1665: }
 11186                           ;menu.c: 1667: AUTO_LATCH = arpeggiatorAutoLatchOnOffMenu.selector;
 11187  007AB2  0101               	movlb	1	; () banked
 11188  007AB4  A122               	btfss	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),0,b
 11189  007AB6  D002               	goto	u58100
 11190  007AB8  8004               	bsf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 11191  007ABA  0012               	return	
 11192  007ABC                     u58100:
 11193  007ABC  9004               	bcf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 11194  007ABE  0012               	return		;funcret
 11195  007AC0                     __end_of_Function_H_6_2:
 11196                           	opt stack 0
 11197                           tblptru	equ	0xFF8
 11198                           tblptrh	equ	0xFF7
 11199                           tblptrl	equ	0xFF6
 11200                           tablat	equ	0xFF5
 11201                           intcon	equ	0xFF2
 11202                           intcon2	equ	0xFF1
 11203                           postinc0	equ	0xFEE
 11204                           wreg	equ	0xFE8
 11205                           postinc1	equ	0xFE6
 11206                           postdec2	equ	0xFDD
 11207                           fsr2l	equ	0xFD9
 11208                           status	equ	0xFD8
 11209                           
 11210 ;; *************** function _Function_H_6_1 *****************
 11211 ;; Defined at:
 11212 ;;		line 1541 in file "menu.c"
 11213 ;; Parameters:    Size  Location     Type
 11214 ;;		None
 11215 ;; Auto vars:     Size  Location     Type
 11216 ;;  temp            1  103[BANK0 ] unsigned char 
 11217 ;; Return value:  Size  Location     Type
 11218 ;;                  1    wreg      void 
 11219 ;; Registers used:
 11220 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11221 ;; Tracked objects:
 11222 ;;		On entry : 0/0
 11223 ;;		On exit  : 0/0
 11224 ;;		Unchanged: 0/0
 11225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11227 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11229 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11230 ;;Total ram usage:        1 bytes
 11231 ;; Hardware stack levels used:    1
 11232 ;; Hardware stack levels required when called:   16
 11233 ;; This function calls:
 11234 ;;		_Lcd_Print_String
 11235 ;;		_clear_row1
 11236 ;;		_clear_row2
 11237 ;;		_doTheLatch
 11238 ;;		_doTheUnLatch
 11239 ;;		_un_block_code
 11240 ;; This function is called by:
 11241 ;;		_Function_H_6
 11242 ;; This function uses a non-reentrant model
 11243 ;;
 11244                           
 11245                           	psect	text19
 11246  007FCC                     __ptext19:
 11247                           	opt stack 0
 11248  007FCC                     _Function_H_6_1:
 11249                           	opt stack 11
 11250                           
 11251                           ;menu.c: 1543: which_screen = ARPEGGIATOR_LATCH_ON_OFF_MENU;
 11252                           
 11253                           ;incstack = 0
 11254  007FCC  0E20               	movlw	32
 11255  007FCE  6E4E               	movwf	_which_screen,c
 11256                           
 11257                           ;menu.c: 1544: lcd_print_once = 0;
 11258  007FD0  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11259                           
 11260                           ;menu.c: 1545: encoder_click = 0;
 11261  007FD2  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11262                           
 11263                           ;menu.c: 1547: arpeggiatorLatchOnOffMenu.selector = LATCH;
 11264  007FD4  0E00               	movlw	0
 11265  007FD6  B404               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 11266  007FD8  0E01               	movlw	1
 11267  007FDA  0101               	movlb	1	; () banked
 11268  007FDC  6F25               	movwf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),b
 11269                           
 11270                           ;menu.c: 1549: while(encoder_click == 0) {
 11271  007FDE  D028               	goto	l3858
 11272  007FE0                     
 11273                           ;menu.c: 1553: un_block_code();
 11274                           
 11275                           ; BSR set to: 1
 11276  007FE0  ECF4  F04C         	call	_un_block_code	;wreg free
 11277                           
 11278                           ;menu.c: 1555: if (lcd_print_once == 0) {
 11279  007FE4  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11280  007FE6  D023               	goto	l3862
 11281                           
 11282                           ;menu.c: 1556: clear_row1();Lcd_Print_String("Latch ON/OFF");
 11283  007FE8  EC6C  F04C         	call	_clear_row1	;wreg free
 11284  007FEC  0EDF               	movlw	low (STR_52+4)
 11285  007FEE  0100               	movlb	0	; () banked
 11286  007FF0  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11287  007FF2  0EFD               	movlw	high (STR_52+4)
 11288  007FF4  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11289  007FF6  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 11290                           
 11291                           ;menu.c: 1557: if(arpeggiatorLatchOnOffMenu.selector == 0) {
 11292  007FFA  0101               	movlb	1	; () banked
 11293  007FFC  5125               	movf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),w,b
 11294  007FFE  A4D8               	btfss	status,2,c
 11295  008000  D009               	goto	l3861
 11296                           
 11297                           ; BSR set to: 1
 11298                           ;menu.c: 1558: clear_row2();
 11299  008002  EC58  F04C         	call	_clear_row2	;wreg free
 11300                           
 11301                           ;menu.c: 1559: Lcd_Print_String("Latch OFF");
 11302  008006  0E8E               	movlw	low (STR_53+5)
 11303  008008  0100               	movlb	0	; () banked
 11304  00800A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11305  00800C  0EFE               	movlw	high (STR_53+5)
 11306  00800E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11307  008010  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 11308  008014                     l3861:
 11309                           
 11310                           ;menu.c: 1560: }
 11311                           ;menu.c: 1561: if(arpeggiatorLatchOnOffMenu.selector == 1) {
 11312  008014  0101               	movlb	1	; () banked
 11313  008016  0525               	decf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),w,b
 11314  008018  A4D8               	btfss	status,2,c
 11315  00801A  D009               	goto	l3862
 11316                           
 11317                           ; BSR set to: 1
 11318                           ;menu.c: 1562: clear_row2();
 11319  00801C  EC58  F04C         	call	_clear_row2	;wreg free
 11320                           
 11321                           ;menu.c: 1563: Lcd_Print_String("Latch ON");
 11322  008020  0E0F               	movlw	low (STR_55+5)
 11323  008022  0100               	movlb	0	; () banked
 11324  008024  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11325  008026  0EFF               	movlw	high (STR_55+5)
 11326  008028  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11327  00802A  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 11328  00802E                     l3862:
 11329                           
 11330                           ;menu.c: 1564: }
 11331                           ;menu.c: 1565: }
 11332                           ;menu.c: 1566: lcd_print_once = 1;
 11333  00802E  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11334  008030                     l3858:
 11335  008030  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11336  008032  D7D6               	goto	l3859
 11337                           
 11338                           ;menu.c: 1567: }
 11339                           ;menu.c: 1569: LATCH = arpeggiatorLatchOnOffMenu.selector;
 11340  008034  0101               	movlb	1	; () banked
 11341  008036  A125               	btfss	(_arpeggiatorLatchOnOffMenu+2)& (0+255),0,b
 11342  008038  D002               	goto	u58000
 11343  00803A  8404               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 11344  00803C  D001               	goto	u58015
 11345  00803E                     u58000:
 11346  00803E  9404               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
 11347  008040                     u58015:
 11348                           
 11349                           ;menu.c: 1571: if(LATCH == 1){
 11350  008040  B404               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 11351                           
 11352                           ;menu.c: 1578: doTheLatch();
 11353  008042  ECC8  F04C         	call	_doTheLatch	;wreg free
 11354                           
 11355                           ;menu.c: 1579: }
 11356                           ;menu.c: 1581: if(LATCH == 0){
 11357  008046  B404               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 11358  008048  0012               	return	
 11359                           
 11360                           ;menu.c: 1584: unsigned char temp = UN_LATCH_MODE;
 11361  00804A  0E00               	movlw	0
 11362  00804C  B204               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 11363  00804E  0E01               	movlw	1
 11364  008050  0100               	movlb	0	; () banked
 11365  008052  6FC7               	movwf	Function_H_6_1@temp& (0+255),b
 11366                           
 11367                           ; BSR set to: 0
 11368                           ;menu.c: 1586: UN_LATCH_MODE = 0;
 11369  008054  9204               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 11370                           
 11371                           ; BSR set to: 0
 11372                           ;menu.c: 1587: doTheUnLatch();
 11373  008056  EC0A  F029         	call	_doTheUnLatch	;wreg free
 11374                           
 11375                           ;menu.c: 1590: UN_LATCH_MODE = temp;
 11376  00805A  0100               	movlb	0	; () banked
 11377  00805C  A1C7               	btfss	Function_H_6_1@temp& (0+255),0,b
 11378  00805E  D002               	goto	u58040
 11379  008060  8204               	bsf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 11380  008062  0012               	return	
 11381  008064                     u58040:
 11382  008064  9204               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 11383  008066  0012               	return	
 11384  008068                     __end_of_Function_H_6_1:
 11385                           	opt stack 0
 11386                           tblptru	equ	0xFF8
 11387                           tblptrh	equ	0xFF7
 11388                           tblptrl	equ	0xFF6
 11389                           tablat	equ	0xFF5
 11390                           intcon	equ	0xFF2
 11391                           intcon2	equ	0xFF1
 11392                           postinc0	equ	0xFEE
 11393                           wreg	equ	0xFE8
 11394                           postinc1	equ	0xFE6
 11395                           postdec2	equ	0xFDD
 11396                           fsr2l	equ	0xFD9
 11397                           status	equ	0xFD8
 11398                           
 11399 ;; *************** function _Function_H_5 *****************
 11400 ;; Defined at:
 11401 ;;		line 1504 in file "menu.c"
 11402 ;; Parameters:    Size  Location     Type
 11403 ;;		None
 11404 ;; Auto vars:     Size  Location     Type
 11405 ;;  i               1  104[BANK0 ] unsigned char 
 11406 ;; Return value:  Size  Location     Type
 11407 ;;                  1    wreg      void 
 11408 ;; Registers used:
 11409 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11410 ;; Tracked objects:
 11411 ;;		On entry : 0/0
 11412 ;;		On exit  : 0/0
 11413 ;;		Unchanged: 0/0
 11414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11416 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11417 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11418 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11419 ;;Total ram usage:        2 bytes
 11420 ;; Hardware stack levels used:    1
 11421 ;; Hardware stack levels required when called:   16
 11422 ;; This function calls:
 11423 ;;		_Lcd_Print_String
 11424 ;;		___lbmod
 11425 ;;		___wmul
 11426 ;;		_clear_row1
 11427 ;;		_clear_row2
 11428 ;;		_un_block_code
 11429 ;; This function is called by:
 11430 ;;		_Function_H
 11431 ;; This function uses a non-reentrant model
 11432 ;;
 11433                           
 11434                           	psect	text20
 11435  007AC0                     __ptext20:
 11436                           	opt stack 0
 11437  007AC0                     _Function_H_5:
 11438                           	opt stack 12
 11439                           
 11440                           ;menu.c: 1506: which_screen = ARPEGGIATOR_NOTE_LENGTH_MENU,
 11441                           ;menu.c: 1507: lcd_print_once = 0;
 11442                           
 11443                           ;incstack = 0
 11444  007AC0  0E1E               	movlw	30
 11445  007AC2  6E4E               	movwf	_which_screen,c
 11446  007AC4  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11447                           
 11448                           ;menu.c: 1508: encoder_click = 0;
 11449  007AC6  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11450                           
 11451                           ;menu.c: 1511: for(unsigned char i = 0; i < 12; i++) {
 11452  007AC8  0E00               	movlw	0
 11453  007ACA  0100               	movlb	0	; () banked
 11454  007ACC  6FC8               	movwf	Function_H_5@i& (0+255),b
 11455  007ACE                     l32756:
 11456                           
 11457                           ; BSR set to: 0
 11458  007ACE  0E0B               	movlw	11
 11459  007AD0  65C8               	cpfsgt	Function_H_5@i& (0+255),b
 11460  007AD2  D001               	goto	l3848
 11461  007AD4  D03C               	goto	l3851
 11462  007AD6                     l3848:
 11463                           
 11464                           ; BSR set to: 0
 11465                           ;menu.c: 1512: if(NOTE_LENGTH_PULSES_ARRAY[i] == NOTE_LENGTH_PULSES) {
 11466                           
 11467                           ; BSR set to: 0
 11468  007AD6  51C8               	movf	Function_H_5@i& (0+255),w,b
 11469  007AD8  0D01               	mullw	1
 11470  007ADA  0EB8               	movlw	low _NOTE_LENGTH_PULSES_ARRAY
 11471  007ADC  24F3               	addwf	prodl,w,c
 11472  007ADE  6ED9               	movwf	fsr2l,c
 11473  007AE0  0E02               	movlw	high _NOTE_LENGTH_PULSES_ARRAY
 11474  007AE2  20F4               	addwfc	prodh,w,c
 11475  007AE4  6EDA               	movwf	fsr2h,c
 11476  007AE6  504C               	movf	_NOTE_LENGTH_PULSES,w,c
 11477  007AE8  18DE               	xorwf	postinc2,w,c
 11478  007AEA  B4D8               	btfsc	status,2,c
 11479                           
 11480                           ; BSR set to: 0
 11481                           ;menu.c: 1514: arpeggiatorNoteLengthMenu.selector = i;
 11482  007AEC  C0C8  F12B         	movff	Function_H_5@i,_arpeggiatorNoteLengthMenu+2
 11483                           
 11484                           ; BSR set to: 0
 11485                           
 11486                           ; BSR set to: 0
 11487  007AF0  2BC8               	incf	Function_H_5@i& (0+255),f,b
 11488  007AF2  D7ED               	goto	l32756
 11489  007AF4                     
 11490                           ;menu.c: 1524: un_block_code();
 11491                           
 11492                           ; BSR set to: 0
 11493  007AF4  ECF4  F04C         	call	_un_block_code	;wreg free
 11494                           
 11495                           ;menu.c: 1526: if (lcd_print_once == 0) {
 11496  007AF8  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11497  007AFA  D028               	goto	l3853
 11498                           
 11499                           ;menu.c: 1527: clear_row1();
 11500  007AFC  EC6C  F04C         	call	_clear_row1	;wreg free
 11501                           
 11502                           ;menu.c: 1528: Lcd_Print_String("Note Length:");
 11503  007B00  0E32               	movlw	low STR_48
 11504  007B02  0100               	movlb	0	; () banked
 11505  007B04  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11506  007B06  0EFF               	movlw	high STR_48
 11507  007B08  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11508  007B0A  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 11509                           
 11510                           ;menu.c: 1529: clear_row2();
 11511  007B0E  EC58  F04C         	call	_clear_row2	;wreg free
 11512                           
 11513                           ;menu.c: 1530: Lcd_Print_String(LCD_STRINGS[(arpeggiatorNoteLengthMenu.selector % arpegg
      +                          iatorNoteLengthMenu.number) + arpeggiatorNoteLengthMenu.address]);
 11514  007B12  0101               	movlb	1	; () banked
 11515  007B14  5129               	movf	_arpeggiatorNoteLengthMenu& (0+255),w,b
 11516  007B16  6EE6               	movwf	postinc1,c
 11517  007B18  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 11518  007B1A  6EE6               	movwf	postinc1,c
 11519  007B1C  ECA5  F041         	call	___lbmod	;wreg free
 11520  007B20  503E               	movf	btemp,w,c
 11521  007B22  0101               	movlb	1	; () banked
 11522  007B24  252A               	addwf	(_arpeggiatorNoteLengthMenu+1)& (0+255),w,b
 11523  007B26  0100               	movlb	0	; () banked
 11524  007B28  6F60               	movwf	___wmul@multiplier& (0+255),b
 11525  007B2A  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 11526  007B2C  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 11527  007B2E  0E00               	movlw	0
 11528  007B30  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11529  007B32  0E11               	movlw	17
 11530  007B34  6F62               	movwf	___wmul@multiplicand& (0+255),b
 11531  007B36  EC80  F04C         	call	___wmul	;wreg free
 11532  007B3A  0E9E               	movlw	low _LCD_STRINGS
 11533  007B3C  0100               	movlb	0	; () banked
 11534  007B3E  2560               	addwf	?___wmul& (0+255),w,b
 11535  007B40  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11536  007B42  0EF3               	movlw	high _LCD_STRINGS
 11537  007B44  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 11538  007B46  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11539  007B48  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 11540  007B4C                     l3853:
 11541                           
 11542                           ;menu.c: 1531: }
 11543                           ;menu.c: 1532: lcd_print_once = 1;
 11544  007B4C  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11545  007B4E                     l3851:
 11546  007B4E  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11547  007B50  D7D1               	goto	l3852
 11548                           
 11549                           ;menu.c: 1533: }
 11550                           ;menu.c: 1536: NOTE_LENGTH_PULSES = NOTE_LENGTH_PULSES_ARRAY[arpeggiatorNoteLengthMenu.s
      +                          elector];
 11551  007B52  0101               	movlb	1	; () banked
 11552  007B54  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 11553  007B56  0D01               	mullw	1
 11554  007B58  0EB8               	movlw	low _NOTE_LENGTH_PULSES_ARRAY
 11555  007B5A  24F3               	addwf	prodl,w,c
 11556  007B5C  6ED9               	movwf	fsr2l,c
 11557  007B5E  0E02               	movlw	high _NOTE_LENGTH_PULSES_ARRAY
 11558  007B60  20F4               	addwfc	prodh,w,c
 11559  007B62  6EDA               	movwf	fsr2h,c
 11560  007B64  50DF               	movf	indf2,w,c
 11561  007B66  6E4C               	movwf	_NOTE_LENGTH_PULSES,c
 11562                           
 11563                           ; BSR set to: 1
 11564  007B68  0012               	return		;funcret
 11565  007B6A                     __end_of_Function_H_5:
 11566                           	opt stack 0
 11567                           tblptru	equ	0xFF8
 11568                           tblptrh	equ	0xFF7
 11569                           tblptrl	equ	0xFF6
 11570                           tablat	equ	0xFF5
 11571                           prodh	equ	0xFF4
 11572                           prodl	equ	0xFF3
 11573                           intcon	equ	0xFF2
 11574                           intcon2	equ	0xFF1
 11575                           postinc0	equ	0xFEE
 11576                           wreg	equ	0xFE8
 11577                           postinc1	equ	0xFE6
 11578                           indf2	equ	0xFDF
 11579                           postinc2	equ	0xFDE
 11580                           postdec2	equ	0xFDD
 11581                           fsr2h	equ	0xFDA
 11582                           fsr2l	equ	0xFD9
 11583                           status	equ	0xFD8
 11584                           
 11585 ;; *************** function _Function_H_4 *****************
 11586 ;; Defined at:
 11587 ;;		line 1465 in file "menu.c"
 11588 ;; Parameters:    Size  Location     Type
 11589 ;;		None
 11590 ;; Auto vars:     Size  Location     Type
 11591 ;;		None
 11592 ;; Return value:  Size  Location     Type
 11593 ;;                  1    wreg      void 
 11594 ;; Registers used:
 11595 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11596 ;; Tracked objects:
 11597 ;;		On entry : 0/0
 11598 ;;		On exit  : 0/0
 11599 ;;		Unchanged: 0/0
 11600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11604 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11605 ;;Total ram usage:        0 bytes
 11606 ;; Hardware stack levels used:    1
 11607 ;; Hardware stack levels required when called:   16
 11608 ;; This function calls:
 11609 ;;		_Lcd_Print_String
 11610 ;;		___lbmod
 11611 ;;		___wmul
 11612 ;;		_clear_row1
 11613 ;;		_clear_row2
 11614 ;;		_setupArpeggio
 11615 ;;		_un_block_code
 11616 ;; This function is called by:
 11617 ;;		_Function_H
 11618 ;; This function uses a non-reentrant model
 11619 ;;
 11620                           
 11621                           	psect	text21
 11622  007808                     __ptext21:
 11623                           	opt stack 0
 11624  007808                     _Function_H_4:
 11625                           	opt stack 12
 11626                           
 11627                           ;menu.c: 1467: which_screen = ARPEGGIATOR_ARPEGGIO_TYPE_MENU,
 11628                           ;menu.c: 1468: lcd_print_once = 0;
 11629                           
 11630                           ; BSR set to: 1
 11631                           ;incstack = 0
 11632  007808  0E1D               	movlw	29
 11633  00780A  6E4E               	movwf	_which_screen,c
 11634  00780C  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11635                           
 11636                           ;menu.c: 1469: encoder_click = 0;
 11637  00780E  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11638                           
 11639                           ;menu.c: 1471: arpeggiatorTypeMenu.selector = ARPEGGIO_TYPE;
 11640  007810  C034  F12E         	movff	_ARPEGGIO_TYPE,_arpeggiatorTypeMenu+2
 11641                           
 11642                           ;menu.c: 1473: while(encoder_click == 0) {
 11643  007814  D02D               	goto	l3835
 11644  007816                     
 11645                           ;menu.c: 1477: un_block_code();
 11646  007816  ECF4  F04C         	call	_un_block_code	;wreg free
 11647                           
 11648                           ;menu.c: 1479: if (lcd_print_once == 0) {
 11649  00781A  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11650  00781C  D028               	goto	l3837
 11651                           
 11652                           ;menu.c: 1480: clear_row1();
 11653  00781E  EC6C  F04C         	call	_clear_row1	;wreg free
 11654                           
 11655                           ;menu.c: 1481: Lcd_Print_String("Select Arpeggio:");
 11656  007822  0EB9               	movlw	low STR_47
 11657  007824  0100               	movlb	0	; () banked
 11658  007826  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11659  007828  0EFD               	movlw	high STR_47
 11660  00782A  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11661  00782C  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 11662                           
 11663                           ;menu.c: 1482: clear_row2();
 11664  007830  EC58  F04C         	call	_clear_row2	;wreg free
 11665                           
 11666                           ;menu.c: 1483: Lcd_Print_String(LCD_STRINGS[(arpeggiatorTypeMenu.selector % arpeggiatorT
      +                          ypeMenu.number) + arpeggiatorTypeMenu.address]);
 11667  007834  0101               	movlb	1	; () banked
 11668  007836  512C               	movf	_arpeggiatorTypeMenu& (0+255),w,b
 11669  007838  6EE6               	movwf	postinc1,c
 11670  00783A  512E               	movf	(_arpeggiatorTypeMenu+2)& (0+255),w,b
 11671  00783C  6EE6               	movwf	postinc1,c
 11672  00783E  ECA5  F041         	call	___lbmod	;wreg free
 11673  007842  503E               	movf	btemp,w,c
 11674  007844  0101               	movlb	1	; () banked
 11675  007846  252D               	addwf	(_arpeggiatorTypeMenu+1)& (0+255),w,b
 11676  007848  0100               	movlb	0	; () banked
 11677  00784A  6F60               	movwf	___wmul@multiplier& (0+255),b
 11678  00784C  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 11679  00784E  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 11680  007850  0E00               	movlw	0
 11681  007852  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11682  007854  0E11               	movlw	17
 11683  007856  6F62               	movwf	___wmul@multiplicand& (0+255),b
 11684  007858  EC80  F04C         	call	___wmul	;wreg free
 11685  00785C  0E9E               	movlw	low _LCD_STRINGS
 11686  00785E  0100               	movlb	0	; () banked
 11687  007860  2560               	addwf	?___wmul& (0+255),w,b
 11688  007862  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11689  007864  0EF3               	movlw	high _LCD_STRINGS
 11690  007866  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 11691  007868  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11692  00786A  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 11693  00786E                     l3837:
 11694                           
 11695                           ;menu.c: 1484: }
 11696                           ;menu.c: 1485: lcd_print_once = 1;
 11697  00786E  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11698  007870                     l3835:
 11699  007870  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11700  007872  D7D1               	goto	l3836
 11701                           
 11702                           ;menu.c: 1486: }
 11703                           ;menu.c: 1488: ARPEGGIO_TYPE = arpeggiatorTypeMenu.selector;
 11704  007874  C12E  F034         	movff	_arpeggiatorTypeMenu+2,_ARPEGGIO_TYPE
 11705                           
 11706                           ;menu.c: 1491: if((ARPEGGIO_TYPE == AS_PRESSED) || (ARPEGGIO_TYPE == UP) || (ARPEGGIO_TY
      +                          PE == UP_DOWN) || (ARPEGGIO_TYPE == RANDOM) || (ARPEGGIO_TYPE == RANDOM_NON_REPEATING)) 
      +                          {
 11707  007878  0E06               	movlw	6
 11708  00787A  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 11709  00787C  B4D8               	btfsc	status,2,c
 11710  00787E  D00F               	goto	u59350
 11711  007880  5034               	movf	_ARPEGGIO_TYPE,w,c
 11712  007882  B4D8               	btfsc	status,2,c
 11713  007884  D00C               	goto	u59350
 11714  007886  0E02               	movlw	2
 11715  007888  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 11716  00788A  B4D8               	btfsc	status,2,c
 11717  00788C  D008               	goto	u59350
 11718  00788E  0E05               	movlw	5
 11719  007890  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 11720  007892  B4D8               	btfsc	status,2,c
 11721  007894  D004               	goto	u59350
 11722  007896  0E04               	movlw	4
 11723  007898  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 11724  00789A  A4D8               	btfss	status,2,c
 11725  00789C  D002               	goto	l3839
 11726  00789E                     u59350:
 11727                           
 11728                           ;menu.c: 1492: startingDirection = UP;
 11729  00789E  0E00               	movlw	0
 11730  0078A0  6E33               	movwf	_startingDirection,c
 11731  0078A2                     l3839:
 11732                           
 11733                           ;menu.c: 1493: }
 11734                           ;menu.c: 1495: if((ARPEGGIO_TYPE == DOWN) || (ARPEGGIO_TYPE == DOWN_UP)) {
 11735  0078A2  0434               	decf	_ARPEGGIO_TYPE,w,c
 11736  0078A4  B4D8               	btfsc	status,2,c
 11737  0078A6  D004               	goto	u59370
 11738  0078A8  0E03               	movlw	3
 11739  0078AA  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 11740  0078AC  A4D8               	btfss	status,2,c
 11741  0078AE  D002               	goto	l3842
 11742  0078B0                     u59370:
 11743                           
 11744                           ;menu.c: 1496: startingDirection = DOWN;
 11745  0078B0  0E01               	movlw	1
 11746  0078B2  6E33               	movwf	_startingDirection,c
 11747  0078B4                     l3842:
 11748                           
 11749                           ;menu.c: 1497: }
 11750                           ;menu.c: 1499: setupArpeggio();
 11751  0078B4  EC9D  F045         	call	_setupArpeggio	;wreg free
 11752  0078B8  0012               	return		;funcret
 11753  0078BA                     __end_of_Function_H_4:
 11754                           	opt stack 0
 11755                           tblptru	equ	0xFF8
 11756                           tblptrh	equ	0xFF7
 11757                           tblptrl	equ	0xFF6
 11758                           tablat	equ	0xFF5
 11759                           prodh	equ	0xFF4
 11760                           prodl	equ	0xFF3
 11761                           intcon	equ	0xFF2
 11762                           intcon2	equ	0xFF1
 11763                           postinc0	equ	0xFEE
 11764                           wreg	equ	0xFE8
 11765                           postinc1	equ	0xFE6
 11766                           indf2	equ	0xFDF
 11767                           postinc2	equ	0xFDE
 11768                           postdec2	equ	0xFDD
 11769                           fsr2h	equ	0xFDA
 11770                           fsr2l	equ	0xFD9
 11771                           status	equ	0xFD8
 11772                           
 11773 ;; *************** function _Function_H_3 *****************
 11774 ;; Defined at:
 11775 ;;		line 1430 in file "menu.c"
 11776 ;; Parameters:    Size  Location     Type
 11777 ;;		None
 11778 ;; Auto vars:     Size  Location     Type
 11779 ;;		None
 11780 ;; Return value:  Size  Location     Type
 11781 ;;                  1    wreg      void 
 11782 ;; Registers used:
 11783 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11784 ;; Tracked objects:
 11785 ;;		On entry : 0/0
 11786 ;;		On exit  : 0/0
 11787 ;;		Unchanged: 0/0
 11788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11793 ;;Total ram usage:        0 bytes
 11794 ;; Hardware stack levels used:    1
 11795 ;; Hardware stack levels required when called:   16
 11796 ;; This function calls:
 11797 ;;		_Lcd_Print_String
 11798 ;;		_Lcd_Set_Cursor
 11799 ;;		_clear_row2
 11800 ;;		_int2string
 11801 ;;		_un_block_code
 11802 ;; This function is called by:
 11803 ;;		_Function_H
 11804 ;; This function uses a non-reentrant model
 11805 ;;
 11806                           
 11807                           	psect	text22
 11808  008FEE                     __ptext22:
 11809                           	opt stack 0
 11810  008FEE                     _Function_H_3:
 11811                           	opt stack 12
 11812                           
 11813                           ;menu.c: 1432: which_screen = ARPEGGIATOR_OCTAVES_MENU;
 11814                           
 11815                           ;incstack = 0
 11816  008FEE  0E1C               	movlw	28
 11817  008FF0  6E4E               	movwf	_which_screen,c
 11818                           
 11819                           ;menu.c: 1433: lcd_print_once = 0;
 11820  008FF2  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11821                           
 11822                           ;menu.c: 1434: print_row_2_once = 0;
 11823  008FF4  9005               	bcf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 11824                           
 11825                           ;menu.c: 1435: encoder_click = 0;
 11826  008FF6  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11827                           
 11828                           ;menu.c: 1437: arpeggiatorOctavesMenu.selector = OCTAVES;
 11829  008FF8  C04D  F131         	movff	_OCTAVES,_arpeggiatorOctavesMenu+2
 11830                           
 11831                           ;menu.c: 1439: while(encoder_click == 0) {
 11832  008FFC  D024               	goto	l3830
 11833  008FFE                     
 11834                           ;menu.c: 1443: un_block_code();
 11835  008FFE  ECF4  F04C         	call	_un_block_code	;wreg free
 11836                           
 11837                           ;menu.c: 1445: if (lcd_print_once == 0) {
 11838  009002  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11839  009004  D009               	goto	l3829
 11840                           
 11841                           ;menu.c: 1446: clear_row2();
 11842  009006  EC58  F04C         	call	_clear_row2	;wreg free
 11843                           
 11844                           ;menu.c: 1447: Lcd_Print_String("Octave Range:");
 11845  00900A  0EEE               	movlw	low STR_46
 11846  00900C  0100               	movlb	0	; () banked
 11847  00900E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11848  009010  0EFE               	movlw	high STR_46
 11849  009012  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11850  009014  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 11851  009018                     l3829:
 11852                           
 11853                           ;menu.c: 1448: }
 11854                           ;menu.c: 1449: lcd_print_once = 1;
 11855  009018  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11856                           
 11857                           ;menu.c: 1451: if(print_row_2_once == 0){
 11858  00901A  B005               	btfsc	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 11859  00901C  D014               	goto	l3830
 11860                           
 11861                           ;menu.c: 1453: int2string(arpeggiatorOctavesMenu.selector);
 11862  00901E  C131  F060         	movff	_arpeggiatorOctavesMenu+2,int2string@number
 11863  009022  0100               	movlb	0	; () banked
 11864  009024  6B61               	clrf	(int2string@number+1)& (0+255),b
 11865  009026  EC42  F03B         	call	_int2string	;wreg free
 11866                           
 11867                           ;menu.c: 1454: Lcd_Set_Cursor(2,13);
 11868  00902A  0E0D               	movlw	13
 11869  00902C  0100               	movlb	0	; () banked
 11870  00902E  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 11871  009030  0E02               	movlw	2
 11872  009032  EC8A  F048         	call	_Lcd_Set_Cursor
 11873                           
 11874                           ;menu.c: 1455: Lcd_Print_String(string2display);
 11875  009036  0E94               	movlw	low _string2display
 11876  009038  0100               	movlb	0	; () banked
 11877  00903A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11878  00903C  0E01               	movlw	high _string2display
 11879  00903E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11880  009040  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 11881                           
 11882                           ;menu.c: 1456: print_row_2_once = 1;
 11883  009044  8005               	bsf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 11884  009046                     l3830:
 11885  009046  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 11886  009048  D7DA               	goto	l3828
 11887                           
 11888                           ;menu.c: 1457: }
 11889                           ;menu.c: 1458: }
 11890                           ;menu.c: 1460: OCTAVES = arpeggiatorOctavesMenu.selector;
 11891  00904A  C131  F04D         	movff	_arpeggiatorOctavesMenu+2,_OCTAVES
 11892  00904E  0012               	return		;funcret
 11893  009050                     __end_of_Function_H_3:
 11894                           	opt stack 0
 11895                           tblptru	equ	0xFF8
 11896                           tblptrh	equ	0xFF7
 11897                           tblptrl	equ	0xFF6
 11898                           tablat	equ	0xFF5
 11899                           prodh	equ	0xFF4
 11900                           prodl	equ	0xFF3
 11901                           intcon	equ	0xFF2
 11902                           intcon2	equ	0xFF1
 11903                           postinc0	equ	0xFEE
 11904                           wreg	equ	0xFE8
 11905                           postinc1	equ	0xFE6
 11906                           indf2	equ	0xFDF
 11907                           postinc2	equ	0xFDE
 11908                           postdec2	equ	0xFDD
 11909                           fsr2h	equ	0xFDA
 11910                           fsr2l	equ	0xFD9
 11911                           status	equ	0xFD8
 11912                           
 11913 ;; *************** function _Function_H_2 *****************
 11914 ;; Defined at:
 11915 ;;		line 1395 in file "menu.c"
 11916 ;; Parameters:    Size  Location     Type
 11917 ;;		None
 11918 ;; Auto vars:     Size  Location     Type
 11919 ;;		None
 11920 ;; Return value:  Size  Location     Type
 11921 ;;                  1    wreg      void 
 11922 ;; Registers used:
 11923 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11924 ;; Tracked objects:
 11925 ;;		On entry : 0/0
 11926 ;;		On exit  : 0/0
 11927 ;;		Unchanged: 0/0
 11928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11933 ;;Total ram usage:        0 bytes
 11934 ;; Hardware stack levels used:    1
 11935 ;; Hardware stack levels required when called:   16
 11936 ;; This function calls:
 11937 ;;		_Lcd_Print_String
 11938 ;;		_Lcd_Set_Cursor
 11939 ;;		_calculate_pulse_length
 11940 ;;		_clear_row2
 11941 ;;		_int2string
 11942 ;;		_un_block_code
 11943 ;; This function is called by:
 11944 ;;		_Function_H
 11945 ;; This function uses a non-reentrant model
 11946 ;;
 11947                           
 11948                           	psect	text23
 11949  008D6C                     __ptext23:
 11950                           	opt stack 0
 11951  008D6C                     _Function_H_2:
 11952                           	opt stack 12
 11953                           
 11954                           ;menu.c: 1397: which_screen = ARPEGGIATOR_TEMPO_MENU;
 11955                           
 11956                           ;incstack = 0
 11957  008D6C  0E1B               	movlw	27
 11958  008D6E  6E4E               	movwf	_which_screen,c
 11959                           
 11960                           ;menu.c: 1398: lcd_print_once = 0;
 11961  008D70  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11962                           
 11963                           ;menu.c: 1399: print_row_2_once = 0;
 11964  008D72  9005               	bcf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 11965                           
 11966                           ;menu.c: 1400: encoder_click = 0;
 11967  008D74  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 11968                           
 11969                           ;menu.c: 1402: arpeggiatorTempoMenu.selector = BPM;
 11970  008D76  C0FF  F134         	movff	_BPM,_arpeggiatorTempoMenu+2
 11971                           
 11972                           ;menu.c: 1404: while(encoder_click == 0) {
 11973  008D7A  D024               	goto	l3822
 11974  008D7C                     
 11975                           ;menu.c: 1408: un_block_code();
 11976  008D7C  ECF4  F04C         	call	_un_block_code	;wreg free
 11977                           
 11978                           ;menu.c: 1410: if (lcd_print_once == 0) {
 11979  008D80  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11980  008D82  D009               	goto	l3821
 11981                           
 11982                           ;menu.c: 1411: clear_row2();
 11983  008D84  EC58  F04C         	call	_clear_row2	;wreg free
 11984                           
 11985                           ;menu.c: 1412: Lcd_Print_String("Tempo (BPM): ");
 11986  008D88  0EB6               	movlw	low STR_45
 11987  008D8A  0100               	movlb	0	; () banked
 11988  008D8C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 11989  008D8E  0EFE               	movlw	high STR_45
 11990  008D90  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 11991  008D92  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 11992  008D96                     l3821:
 11993                           
 11994                           ;menu.c: 1413: }
 11995                           ;menu.c: 1414: lcd_print_once = 1;
 11996  008D96  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 11997                           
 11998                           ;menu.c: 1416: if(print_row_2_once == 0){
 11999  008D98  B005               	btfsc	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 12000  008D9A  D014               	goto	l3822
 12001                           
 12002                           ;menu.c: 1418: int2string(arpeggiatorTempoMenu.selector);
 12003  008D9C  C134  F060         	movff	_arpeggiatorTempoMenu+2,int2string@number
 12004  008DA0  0100               	movlb	0	; () banked
 12005  008DA2  6B61               	clrf	(int2string@number+1)& (0+255),b
 12006  008DA4  EC42  F03B         	call	_int2string	;wreg free
 12007                           
 12008                           ;menu.c: 1419: Lcd_Set_Cursor(2,13);
 12009  008DA8  0E0D               	movlw	13
 12010  008DAA  0100               	movlb	0	; () banked
 12011  008DAC  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 12012  008DAE  0E02               	movlw	2
 12013  008DB0  EC8A  F048         	call	_Lcd_Set_Cursor
 12014                           
 12015                           ;menu.c: 1420: Lcd_Print_String(string2display);
 12016  008DB4  0E94               	movlw	low _string2display
 12017  008DB6  0100               	movlb	0	; () banked
 12018  008DB8  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12019  008DBA  0E01               	movlw	high _string2display
 12020  008DBC  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12021  008DBE  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 12022                           
 12023                           ;menu.c: 1421: print_row_2_once = 1;
 12024  008DC2  8005               	bsf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 12025  008DC4                     l3822:
 12026  008DC4  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12027  008DC6  D7DA               	goto	l3820
 12028                           
 12029                           ;menu.c: 1422: }
 12030                           ;menu.c: 1423: }
 12031                           ;menu.c: 1425: BPM = arpeggiatorTempoMenu.selector;
 12032  008DC8  C134  F0FF         	movff	_arpeggiatorTempoMenu+2,_BPM
 12033                           
 12034                           ;menu.c: 1426: TIMER_PRELOAD = calculate_pulse_length();
 12035  008DCC  EC61  F02F         	call	_calculate_pulse_length	;wreg free
 12036  008DD0  C0C2  F17C         	movff	?_calculate_pulse_length,_TIMER_PRELOAD
 12037  008DD4  C0C3  F17D         	movff	?_calculate_pulse_length+1,_TIMER_PRELOAD+1
 12038  008DD8  0012               	return		;funcret
 12039  008DDA                     __end_of_Function_H_2:
 12040                           	opt stack 0
 12041                           tblptru	equ	0xFF8
 12042                           tblptrh	equ	0xFF7
 12043                           tblptrl	equ	0xFF6
 12044                           tablat	equ	0xFF5
 12045                           prodh	equ	0xFF4
 12046                           prodl	equ	0xFF3
 12047                           intcon	equ	0xFF2
 12048                           intcon2	equ	0xFF1
 12049                           postinc0	equ	0xFEE
 12050                           wreg	equ	0xFE8
 12051                           postinc1	equ	0xFE6
 12052                           indf2	equ	0xFDF
 12053                           postinc2	equ	0xFDE
 12054                           postdec2	equ	0xFDD
 12055                           fsr2h	equ	0xFDA
 12056                           fsr2l	equ	0xFD9
 12057                           status	equ	0xFD8
 12058                           
 12059 ;; *************** function _Function_H_1 *****************
 12060 ;; Defined at:
 12061 ;;		line 1338 in file "menu.c"
 12062 ;; Parameters:    Size  Location     Type
 12063 ;;		None
 12064 ;; Auto vars:     Size  Location     Type
 12065 ;;  temp            1  103[BANK0 ] unsigned char 
 12066 ;; Return value:  Size  Location     Type
 12067 ;;                  1    wreg      void 
 12068 ;; Registers used:
 12069 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12070 ;; Tracked objects:
 12071 ;;		On entry : 0/0
 12072 ;;		On exit  : 0/0
 12073 ;;		Unchanged: 0/0
 12074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12076 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12078 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12079 ;;Total ram usage:        1 bytes
 12080 ;; Hardware stack levels used:    1
 12081 ;; Hardware stack levels required when called:   16
 12082 ;; This function calls:
 12083 ;;		_Lcd_Print_String
 12084 ;;		_clear_row2
 12085 ;;		_doTheUnLatch
 12086 ;;		_strcpy
 12087 ;;		_un_block_code
 12088 ;; This function is called by:
 12089 ;;		_Function_H
 12090 ;; This function uses a non-reentrant model
 12091 ;;
 12092                           
 12093                           	psect	text24
 12094  00719C                     __ptext24:
 12095                           	opt stack 0
 12096  00719C                     _Function_H_1:
 12097                           	opt stack 12
 12098                           
 12099                           ;menu.c: 1340: which_screen = ARPEGGIATOR_ON_OFF_MENU;
 12100                           
 12101                           ;incstack = 0
 12102  00719C  0E1A               	movlw	26
 12103  00719E  6E4E               	movwf	_which_screen,c
 12104                           
 12105                           ;menu.c: 1341: lcd_print_once = 0;
 12106  0071A0  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12107                           
 12108                           ;menu.c: 1342: encoder_click = 0;
 12109  0071A2  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12110                           
 12111                           ;menu.c: 1344: arpeggiatorOnOffMenu.selector = ARPEGGIO_ON;
 12112  0071A4  0E00               	movlw	0
 12113  0071A6  BA04               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 12114  0071A8  0E01               	movlw	1
 12115  0071AA  0101               	movlb	1	; () banked
 12116  0071AC  6F37               	movwf	(_arpeggiatorOnOffMenu+2)& (0+255),b
 12117                           
 12118                           ;menu.c: 1346: while(encoder_click == 0) {
 12119  0071AE  D039               	goto	l3809
 12120  0071B0                     
 12121                           ;menu.c: 1350: un_block_code();
 12122                           
 12123                           ; BSR set to: 1
 12124  0071B0  ECF4  F04C         	call	_un_block_code	;wreg free
 12125                           
 12126                           ;menu.c: 1352: if (lcd_print_once == 0) {
 12127  0071B4  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12128  0071B6  D034               	goto	l3813
 12129                           
 12130                           ;menu.c: 1357: if(arpeggiatorOnOffMenu.selector == 0) {
 12131  0071B8  0101               	movlb	1	; () banked
 12132  0071BA  5137               	movf	(_arpeggiatorOnOffMenu+2)& (0+255),w,b
 12133  0071BC  A4D8               	btfss	status,2,c
 12134  0071BE  D016               	goto	l3812
 12135                           
 12136                           ; BSR set to: 1
 12137                           ;menu.c: 1358: clear_row2();
 12138  0071C0  EC58  F04C         	call	_clear_row2	;wreg free
 12139                           
 12140                           ;menu.c: 1359: Lcd_Print_String("ARPEGGIATOR OFF");
 12141  0071C4  0E3D               	movlw	low STR_40
 12142  0071C6  0100               	movlb	0	; () banked
 12143  0071C8  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12144  0071CA  0EFE               	movlw	high STR_40
 12145  0071CC  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12146  0071CE  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 12147                           
 12148                           ;menu.c: 1360: DISPLAY_MODE = 1;
 12149  0071D2  0E01               	movlw	1
 12150  0071D4  0100               	movlb	0	; () banked
 12151  0071D6  6FEF               	movwf	_DISPLAY_MODE& (0+255),b
 12152                           
 12153                           ; BSR set to: 0
 12154                           ;menu.c: 1361: strcpy(string_to_display, "AoFF");
 12155  0071D8  0EFB               	movlw	low _string_to_display
 12156  0071DA  6F60               	movwf	strcpy@to& (0+255),b
 12157  0071DC  0E01               	movlw	high _string_to_display
 12158  0071DE  6F61               	movwf	(strcpy@to+1)& (0+255),b
 12159  0071E0  0ECD               	movlw	low STR_41
 12160  0071E2  6F62               	movwf	strcpy@from& (0+255),b
 12161  0071E4  0EFF               	movlw	high STR_41
 12162  0071E6  6F63               	movwf	(strcpy@from+1)& (0+255),b
 12163  0071E8  ECE4  F04B         	call	_strcpy	;wreg free
 12164  0071EC                     l3812:
 12165                           
 12166                           ;menu.c: 1363: }
 12167                           ;menu.c: 1364: if(arpeggiatorOnOffMenu.selector == 1) {
 12168  0071EC  0101               	movlb	1	; () banked
 12169  0071EE  0537               	decf	(_arpeggiatorOnOffMenu+2)& (0+255),w,b
 12170  0071F0  A4D8               	btfss	status,2,c
 12171  0071F2  D016               	goto	l3813
 12172                           
 12173                           ; BSR set to: 1
 12174                           ;menu.c: 1365: clear_row2();
 12175  0071F4  EC58  F04C         	call	_clear_row2	;wreg free
 12176                           
 12177                           ;menu.c: 1366: Lcd_Print_String("ARPEGGIATOR ON");
 12178  0071F8  0E98               	movlw	low STR_42
 12179  0071FA  0100               	movlb	0	; () banked
 12180  0071FC  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12181  0071FE  0EFE               	movlw	high STR_42
 12182  007200  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12183  007202  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 12184                           
 12185                           ;menu.c: 1367: DISPLAY_MODE = 1;
 12186  007206  0E01               	movlw	1
 12187  007208  0100               	movlb	0	; () banked
 12188  00720A  6FEF               	movwf	_DISPLAY_MODE& (0+255),b
 12189                           
 12190                           ; BSR set to: 0
 12191                           ;menu.c: 1368: strcpy(string_to_display, " ArP");
 12192  00720C  0EFB               	movlw	low _string_to_display
 12193  00720E  6F60               	movwf	strcpy@to& (0+255),b
 12194  007210  0E01               	movlw	high _string_to_display
 12195  007212  6F61               	movwf	(strcpy@to+1)& (0+255),b
 12196  007214  0ED2               	movlw	low STR_43
 12197  007216  6F62               	movwf	strcpy@from& (0+255),b
 12198  007218  0EFF               	movlw	high STR_43
 12199  00721A  6F63               	movwf	(strcpy@from+1)& (0+255),b
 12200  00721C  ECE4  F04B         	call	_strcpy	;wreg free
 12201  007220                     l3813:
 12202                           
 12203                           ;menu.c: 1369: }
 12204                           ;menu.c: 1370: }
 12205                           ;menu.c: 1371: lcd_print_once = 1;
 12206  007220  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12207  007222                     l3809:
 12208  007222  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12209  007224  D7C5               	goto	l3810
 12210                           
 12211                           ;menu.c: 1372: }
 12212                           ;menu.c: 1375: if(arpeggiatorOnOffMenu.selector == 0){
 12213  007226  0101               	movlb	1	; () banked
 12214  007228  5137               	movf	(_arpeggiatorOnOffMenu+2)& (0+255),w,b
 12215  00722A  A4D8               	btfss	status,2,c
 12216  00722C  D01B               	goto	l3815
 12217                           
 12218                           ; BSR set to: 1
 12219                           ;menu.c: 1378: unsigned char temp = UN_LATCH_MODE;
 12220  00722E  0E00               	movlw	0
 12221  007230  B204               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 12222  007232  0E01               	movlw	1
 12223  007234  0100               	movlb	0	; () banked
 12224  007236  6FC7               	movwf	Function_H_1@temp& (0+255),b
 12225                           
 12226                           ; BSR set to: 0
 12227                           ;menu.c: 1380: UN_LATCH_MODE = 0;
 12228  007238  9204               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 12229                           
 12230                           ; BSR set to: 0
 12231                           ;menu.c: 1381: doTheUnLatch();
 12232  00723A  EC0A  F029         	call	_doTheUnLatch	;wreg free
 12233                           
 12234                           ;menu.c: 1384: UN_LATCH_MODE = temp;
 12235  00723E  0100               	movlb	0	; () banked
 12236  007240  A1C7               	btfss	Function_H_1@temp& (0+255),0,b
 12237  007242  D002               	goto	u59190
 12238  007244  8204               	bsf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 12239  007246  D001               	goto	u59205
 12240  007248                     u59190:
 12241  007248  9204               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 12242  00724A                     u59205:
 12243                           
 12244                           ;menu.c: 1387: DISPLAY_MODE = 1;
 12245  00724A  0E01               	movlw	1
 12246  00724C  0100               	movlb	0	; () banked
 12247  00724E  6FEF               	movwf	_DISPLAY_MODE& (0+255),b
 12248                           
 12249                           ; BSR set to: 0
 12250                           ;menu.c: 1388: strcpy(string_to_display, "AoFF");
 12251  007250  0EFB               	movlw	low _string_to_display
 12252  007252  6F60               	movwf	strcpy@to& (0+255),b
 12253  007254  0E01               	movlw	high _string_to_display
 12254  007256  6F61               	movwf	(strcpy@to+1)& (0+255),b
 12255  007258  0ECD               	movlw	low STR_41
 12256  00725A  6F62               	movwf	strcpy@from& (0+255),b
 12257  00725C  0EFF               	movlw	high STR_41
 12258  00725E  6F63               	movwf	(strcpy@from+1)& (0+255),b
 12259  007260  ECE4  F04B         	call	_strcpy	;wreg free
 12260  007264                     l3815:
 12261                           
 12262                           ;menu.c: 1389: }
 12263                           ;menu.c: 1391: ARPEGGIO_ON = arpeggiatorOnOffMenu.selector;
 12264  007264  0101               	movlb	1	; () banked
 12265  007266  A137               	btfss	(_arpeggiatorOnOffMenu+2)& (0+255),0,b
 12266  007268  D002               	goto	u59210
 12267  00726A  8A04               	bsf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 12268  00726C  0012               	return	
 12269  00726E                     u59210:
 12270  00726E  9A04               	bcf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 12271  007270  0012               	return		;funcret
 12272  007272                     __end_of_Function_H_1:
 12273                           	opt stack 0
 12274                           tblptru	equ	0xFF8
 12275                           tblptrh	equ	0xFF7
 12276                           tblptrl	equ	0xFF6
 12277                           tablat	equ	0xFF5
 12278                           prodh	equ	0xFF4
 12279                           prodl	equ	0xFF3
 12280                           intcon	equ	0xFF2
 12281                           intcon2	equ	0xFF1
 12282                           postinc0	equ	0xFEE
 12283                           wreg	equ	0xFE8
 12284                           postinc1	equ	0xFE6
 12285                           indf2	equ	0xFDF
 12286                           postinc2	equ	0xFDE
 12287                           postdec2	equ	0xFDD
 12288                           fsr2h	equ	0xFDA
 12289                           fsr2l	equ	0xFD9
 12290                           status	equ	0xFD8
 12291                           
 12292 ;; *************** function _Function_G *****************
 12293 ;; Defined at:
 12294 ;;		line 1262 in file "menu.c"
 12295 ;; Parameters:    Size  Location     Type
 12296 ;;		None
 12297 ;; Auto vars:     Size  Location     Type
 12298 ;;		None
 12299 ;; Return value:  Size  Location     Type
 12300 ;;                  1    wreg      void 
 12301 ;; Registers used:
 12302 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12303 ;; Tracked objects:
 12304 ;;		On entry : 0/0
 12305 ;;		On exit  : 0/0
 12306 ;;		Unchanged: 0/0
 12307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12311 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12312 ;;Total ram usage:        0 bytes
 12313 ;; Hardware stack levels used:    1
 12314 ;; Hardware stack levels required when called:   17
 12315 ;; This function calls:
 12316 ;;		_Function_G_1
 12317 ;;		_Function_G_2
 12318 ;;		_Function_G_3
 12319 ;;		_Function_G_4
 12320 ;;		_Lcd_Print_String
 12321 ;;		___lbmod
 12322 ;;		___wmul
 12323 ;;		_clear_row2
 12324 ;;		_eepromExit
 12325 ;;		_un_block_code
 12326 ;; This function is called by:
 12327 ;;		_menu_lcd
 12328 ;; This function uses a non-reentrant model
 12329 ;;
 12330                           
 12331                           	psect	text25
 12332  00822A                     __ptext25:
 12333                           	opt stack 0
 12334  00822A                     _Function_G:
 12335                           	opt stack 12
 12336                           
 12337                           ;menu.c: 1264: which_screen = EEPROM_MENU;
 12338                           
 12339                           ;incstack = 0
 12340  00822A  0E16               	movlw	22
 12341  00822C  6E4E               	movwf	_which_screen,c
 12342                           
 12343                           ;menu.c: 1265: lcd_print_once = 0;
 12344  00822E  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12345                           
 12346                           ;menu.c: 1267: while(encoder_click == 0) {
 12347  008230  D024               	goto	l3781
 12348  008232                     
 12349                           ;menu.c: 1271: un_block_code();
 12350  008232  ECF4  F04C         	call	_un_block_code	;wreg free
 12351                           
 12352                           ;menu.c: 1273: if (lcd_print_once == 0) {
 12353  008236  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12354  008238  D01F               	goto	l3783
 12355                           
 12356                           ;menu.c: 1274: clear_row2();
 12357  00823A  EC58  F04C         	call	_clear_row2	;wreg free
 12358                           
 12359                           ;menu.c: 1275: Lcd_Print_String(LCD_STRINGS[(eepromMenu.selector % eepromMenu.number) + 
      +                          eepromMenu.address]);
 12360  00823E  0101               	movlb	1	; () banked
 12361  008240  513B               	movf	_eepromMenu& (0+255),w,b
 12362  008242  6EE6               	movwf	postinc1,c
 12363  008244  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 12364  008246  6EE6               	movwf	postinc1,c
 12365  008248  ECA5  F041         	call	___lbmod	;wreg free
 12366  00824C  503E               	movf	btemp,w,c
 12367  00824E  0101               	movlb	1	; () banked
 12368  008250  253C               	addwf	(_eepromMenu+1)& (0+255),w,b
 12369  008252  0100               	movlb	0	; () banked
 12370  008254  6F60               	movwf	___wmul@multiplier& (0+255),b
 12371  008256  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 12372  008258  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 12373  00825A  0E00               	movlw	0
 12374  00825C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12375  00825E  0E11               	movlw	17
 12376  008260  6F62               	movwf	___wmul@multiplicand& (0+255),b
 12377  008262  EC80  F04C         	call	___wmul	;wreg free
 12378  008266  0E9E               	movlw	low _LCD_STRINGS
 12379  008268  0100               	movlb	0	; () banked
 12380  00826A  2560               	addwf	?___wmul& (0+255),w,b
 12381  00826C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12382  00826E  0EF3               	movlw	high _LCD_STRINGS
 12383  008270  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 12384  008272  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12385  008274  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 12386  008278                     l3783:
 12387                           
 12388                           ;menu.c: 1276: }
 12389                           ;menu.c: 1277: lcd_print_once = 1;
 12390  008278  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12391  00827A                     l3781:
 12392  00827A  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12393  00827C  D7DA               	goto	l3782
 12394                           
 12395                           ;menu.c: 1278: }
 12396                           ;menu.c: 1280: if(eepromMenu.selector == 0) {Function_G_1();}
 12397  00827E  0101               	movlb	1	; () banked
 12398  008280  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 12399  008282  B4D8               	btfsc	status,2,c
 12400                           
 12401                           ; BSR set to: 1
 12402  008284  EC96  F03F         	call	_Function_G_1	;wreg free
 12403                           
 12404                           ;menu.c: 1281: if(eepromMenu.selector == 1) {Function_G_2();}
 12405  008288  0101               	movlb	1	; () banked
 12406  00828A  053D               	decf	(_eepromMenu+2)& (0+255),w,b
 12407  00828C  B4D8               	btfsc	status,2,c
 12408                           
 12409                           ; BSR set to: 1
 12410  00828E  EC46  F03F         	call	_Function_G_2	;wreg free
 12411                           
 12412                           ;menu.c: 1282: if(eepromMenu.selector == 2) {Function_G_3();}
 12413  008292  0E02               	movlw	2
 12414  008294  0101               	movlb	1	; () banked
 12415  008296  193D               	xorwf	(_eepromMenu+2)& (0+255),w,b
 12416  008298  B4D8               	btfsc	status,2,c
 12417                           
 12418                           ; BSR set to: 1
 12419  00829A  ECEB  F048         	call	_Function_G_3	;wreg free
 12420                           
 12421                           ;menu.c: 1283: if(eepromMenu.selector == 3) {Function_G_4();}
 12422  00829E  0E03               	movlw	3
 12423  0082A0  0101               	movlb	1	; () banked
 12424  0082A2  193D               	xorwf	(_eepromMenu+2)& (0+255),w,b
 12425  0082A4  B4D8               	btfsc	status,2,c
 12426                           
 12427                           ; BSR set to: 1
 12428  0082A6  EC34  F040         	call	_Function_G_4	;wreg free
 12429                           
 12430                           ;menu.c: 1284: if(eepromMenu.selector == 4) {eepromExit();}
 12431  0082AA  0E04               	movlw	4
 12432  0082AC  0101               	movlb	1	; () banked
 12433  0082AE  193D               	xorwf	(_eepromMenu+2)& (0+255),w,b
 12434  0082B0  A4D8               	btfss	status,2,c
 12435  0082B2  0012               	return	
 12436                           
 12437                           ; BSR set to: 1
 12438  0082B4  EC77  F04B         	call	_eepromExit	;wreg free
 12439  0082B8  0012               	return	
 12440  0082BA                     __end_of_Function_G:
 12441                           	opt stack 0
 12442                           tblptru	equ	0xFF8
 12443                           tblptrh	equ	0xFF7
 12444                           tblptrl	equ	0xFF6
 12445                           tablat	equ	0xFF5
 12446                           prodh	equ	0xFF4
 12447                           prodl	equ	0xFF3
 12448                           intcon	equ	0xFF2
 12449                           intcon2	equ	0xFF1
 12450                           postinc0	equ	0xFEE
 12451                           wreg	equ	0xFE8
 12452                           postinc1	equ	0xFE6
 12453                           indf2	equ	0xFDF
 12454                           postinc2	equ	0xFDE
 12455                           postdec2	equ	0xFDD
 12456                           fsr2h	equ	0xFDA
 12457                           fsr2l	equ	0xFD9
 12458                           status	equ	0xFD8
 12459                           
 12460 ;; *************** function _Function_G_4 *****************
 12461 ;; Defined at:
 12462 ;;		line 1229 in file "menu.c"
 12463 ;; Parameters:    Size  Location     Type
 12464 ;;		None
 12465 ;; Auto vars:     Size  Location     Type
 12466 ;;		None
 12467 ;; Return value:  Size  Location     Type
 12468 ;;                  1    wreg      void 
 12469 ;; Registers used:
 12470 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12471 ;; Tracked objects:
 12472 ;;		On entry : 0/0
 12473 ;;		On exit  : 0/0
 12474 ;;		Unchanged: 0/0
 12475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12480 ;;Total ram usage:        0 bytes
 12481 ;; Hardware stack levels used:    1
 12482 ;; Hardware stack levels required when called:   16
 12483 ;; This function calls:
 12484 ;;		_Busy_eep
 12485 ;;		_Lcd_Print_String
 12486 ;;		_Write_b_eep
 12487 ;;		___lbmod
 12488 ;;		___wmul
 12489 ;;		_clear_row1
 12490 ;;		_clear_row2
 12491 ;;		_exitFunction
 12492 ;;		_un_block_code
 12493 ;; This function is called by:
 12494 ;;		_Function_G
 12495 ;; This function uses a non-reentrant model
 12496 ;;
 12497                           
 12498                           	psect	text26
 12499  008068                     __ptext26:
 12500                           	opt stack 0
 12501  008068                     _Function_G_4:
 12502                           	opt stack 12
 12503                           
 12504                           ;menu.c: 1233: which_screen = ENCODER_POLARITY_MENU;
 12505                           
 12506                           ;incstack = 0
 12507  008068  0E18               	movlw	24
 12508  00806A  6E4E               	movwf	_which_screen,c
 12509                           
 12510                           ;menu.c: 1234: lcd_print_once = 0;
 12511  00806C  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12512                           
 12513                           ;menu.c: 1235: encoder_click = 0;
 12514  00806E  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12515                           
 12516                           ;menu.c: 1237: encoderPolarityMenu.selector = encoderPolarity;
 12517  008070  0E00               	movlw	0
 12518  008072  B805               	btfsc	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 12519  008074  0E01               	movlw	1
 12520  008076  0101               	movlb	1	; () banked
 12521  008078  6F3A               	movwf	(_encoderPolarityMenu+2)& (0+255),b
 12522                           
 12523                           ;menu.c: 1239: while(encoder_click == 0) {
 12524  00807A  D02D               	goto	l3774
 12525  00807C                     
 12526                           ;menu.c: 1243: un_block_code();
 12527                           
 12528                           ; BSR set to: 1
 12529  00807C  ECF4  F04C         	call	_un_block_code	;wreg free
 12530                           
 12531                           ;menu.c: 1245: if (lcd_print_once == 0) {
 12532  008080  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12533  008082  D028               	goto	l3776
 12534                           
 12535                           ;menu.c: 1246: clear_row1();
 12536  008084  EC6C  F04C         	call	_clear_row1	;wreg free
 12537                           
 12538                           ;menu.c: 1247: Lcd_Print_String("Encoder Polarity");
 12539  008088  0EEC               	movlw	low STR_39
 12540  00808A  0100               	movlb	0	; () banked
 12541  00808C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12542  00808E  0EFD               	movlw	high STR_39
 12543  008090  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12544  008092  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 12545                           
 12546                           ;menu.c: 1248: clear_row2();
 12547  008096  EC58  F04C         	call	_clear_row2	;wreg free
 12548                           
 12549                           ;menu.c: 1249: Lcd_Print_String(LCD_STRINGS[(encoderPolarityMenu.selector % encoderPolar
      +                          ityMenu.number) + encoderPolarityMenu.address]);
 12550  00809A  0101               	movlb	1	; () banked
 12551  00809C  5138               	movf	_encoderPolarityMenu& (0+255),w,b
 12552  00809E  6EE6               	movwf	postinc1,c
 12553  0080A0  513A               	movf	(_encoderPolarityMenu+2)& (0+255),w,b
 12554  0080A2  6EE6               	movwf	postinc1,c
 12555  0080A4  ECA5  F041         	call	___lbmod	;wreg free
 12556  0080A8  503E               	movf	btemp,w,c
 12557  0080AA  0101               	movlb	1	; () banked
 12558  0080AC  2539               	addwf	(_encoderPolarityMenu+1)& (0+255),w,b
 12559  0080AE  0100               	movlb	0	; () banked
 12560  0080B0  6F60               	movwf	___wmul@multiplier& (0+255),b
 12561  0080B2  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 12562  0080B4  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 12563  0080B6  0E00               	movlw	0
 12564  0080B8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12565  0080BA  0E11               	movlw	17
 12566  0080BC  6F62               	movwf	___wmul@multiplicand& (0+255),b
 12567  0080BE  EC80  F04C         	call	___wmul	;wreg free
 12568  0080C2  0E9E               	movlw	low _LCD_STRINGS
 12569  0080C4  0100               	movlb	0	; () banked
 12570  0080C6  2560               	addwf	?___wmul& (0+255),w,b
 12571  0080C8  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12572  0080CA  0EF3               	movlw	high _LCD_STRINGS
 12573  0080CC  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 12574  0080CE  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12575  0080D0  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 12576  0080D4                     l3776:
 12577                           
 12578                           ;menu.c: 1250: }
 12579                           ;menu.c: 1251: lcd_print_once = 1;
 12580  0080D4  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12581  0080D6                     l3774:
 12582  0080D6  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12583  0080D8  D7D1               	goto	l3775
 12584                           
 12585                           ;menu.c: 1252: }
 12586                           ;menu.c: 1255: encoderPolarity = encoderPolarityMenu.selector;
 12587  0080DA  0101               	movlb	1	; () banked
 12588  0080DC  A13A               	btfss	(_encoderPolarityMenu+2)& (0+255),0,b
 12589  0080DE  D002               	goto	u59120
 12590  0080E0  8805               	bsf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 12591  0080E2  D001               	goto	u59135
 12592  0080E4                     u59120:
 12593  0080E4  9805               	bcf	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 12594  0080E6                     u59135:
 12595                           
 12596                           ;menu.c: 1256: (Busy_eep(), Write_b_eep(0x02,encoderPolarityMenu.selector));
 12597  0080E6  EC4E  F04D         	call	_Busy_eep	;wreg free
 12598  0080EA  0E00               	movlw	0
 12599  0080EC  0100               	movlb	0	; () banked
 12600  0080EE  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 12601  0080F0  0E02               	movlw	2
 12602  0080F2  6F60               	movwf	Write_b_eep@badd& (0+255),b
 12603  0080F4  C13A  F062         	movff	_encoderPolarityMenu+2,Write_b_eep@bdat
 12604  0080F8  ECC2  F04A         	call	_Write_b_eep	;wreg free
 12605                           
 12606                           ;menu.c: 1257: exitFunction();
 12607  0080FC  EC20  F04B         	call	_exitFunction	;wreg free
 12608  008100  0012               	return		;funcret
 12609  008102                     __end_of_Function_G_4:
 12610                           	opt stack 0
 12611                           tblptru	equ	0xFF8
 12612                           tblptrh	equ	0xFF7
 12613                           tblptrl	equ	0xFF6
 12614                           tablat	equ	0xFF5
 12615                           prodh	equ	0xFF4
 12616                           prodl	equ	0xFF3
 12617                           intcon	equ	0xFF2
 12618                           intcon2	equ	0xFF1
 12619                           postinc0	equ	0xFEE
 12620                           wreg	equ	0xFE8
 12621                           postinc1	equ	0xFE6
 12622                           indf2	equ	0xFDF
 12623                           postinc2	equ	0xFDE
 12624                           postdec2	equ	0xFDD
 12625                           fsr2h	equ	0xFDA
 12626                           fsr2l	equ	0xFD9
 12627                           status	equ	0xFD8
 12628                           
 12629 ;; *************** function _exitFunction *****************
 12630 ;; Defined at:
 12631 ;;		line 272 in file "menu.c"
 12632 ;; Parameters:    Size  Location     Type
 12633 ;;		None
 12634 ;; Auto vars:     Size  Location     Type
 12635 ;;		None
 12636 ;; Return value:  Size  Location     Type
 12637 ;;                  1    wreg      void 
 12638 ;; Registers used:
 12639 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12640 ;; Tracked objects:
 12641 ;;		On entry : 0/0
 12642 ;;		On exit  : 0/0
 12643 ;;		Unchanged: 0/0
 12644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12647 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12648 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12649 ;;Total ram usage:        2 bytes
 12650 ;; Hardware stack levels used:    1
 12651 ;; Hardware stack levels required when called:    9
 12652 ;; This function calls:
 12653 ;;		_Lcd_Print_String
 12654 ;;		_clear_row1
 12655 ;; This function is called by:
 12656 ;;		_menu_lcd
 12657 ;;		_Function_G_4
 12658 ;; This function uses a non-reentrant model
 12659 ;;
 12660                           
 12661                           	psect	text27
 12662  009640                     __ptext27:
 12663                           	opt stack 0
 12664  009640                     _exitFunction:
 12665                           	opt stack 20
 12666                           
 12667                           ;menu.c: 275: while(encoder_click == 0);
 12668                           
 12669                           ;incstack = 0
 12670  009640  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12671  009642  D7FE               	goto	_exitFunction
 12672                           
 12673                           ;menu.c: 281: clear_row1();
 12674  009644  EC6C  F04C         	call	_clear_row1	;wreg free
 12675                           
 12676                           ;menu.c: 282: Lcd_Print_String("Set!");
 12677  009648  0EC3               	movlw	low STR_20
 12678  00964A  0100               	movlb	0	; () banked
 12679  00964C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12680  00964E  0EFF               	movlw	high STR_20
 12681  009650  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12682  009652  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 12683                           
 12684                           ;menu.c: 285: _delay((unsigned long)((500)*(20000000/4000.0)));
 12685  009656  0E0D               	movlw	13
 12686  009658  0100               	movlb	0	; () banked
 12687  00965A  6F6F               	movwf	(??_exitFunction+1)& (0+255),b
 12688  00965C  0EAF               	movlw	175
 12689  00965E  6F6E               	movwf	??_exitFunction& (0+255),b
 12690  009660  0EB6               	movlw	182
 12691  009662                     u67587:
 12692  009662  2EE8               	decfsz	wreg,f,c
 12693  009664  D7FE               	bra	u67587
 12694  009666  2F6E               	decfsz	??_exitFunction& (0+255),f,b
 12695  009668  D7FC               	bra	u67587
 12696  00966A  2F6F               	decfsz	(??_exitFunction+1)& (0+255),f,b
 12697  00966C  D7FA               	bra	u67587
 12698  00966E  F000               	nop	
 12699                           
 12700                           ;menu.c: 286: which_screen = MAIN_MENU;
 12701  009670  0E02               	movlw	2
 12702  009672  6E4E               	movwf	_which_screen,c
 12703                           
 12704                           ;menu.c: 287: lcd_print_once = 0;
 12705  009674  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12706                           
 12707                           ;menu.c: 288: encoder_click = 0;
 12708  009676  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12709  009678  0012               	return		;funcret
 12710  00967A                     __end_of_exitFunction:
 12711                           	opt stack 0
 12712                           tblptru	equ	0xFF8
 12713                           tblptrh	equ	0xFF7
 12714                           tblptrl	equ	0xFF6
 12715                           tablat	equ	0xFF5
 12716                           prodh	equ	0xFF4
 12717                           prodl	equ	0xFF3
 12718                           intcon	equ	0xFF2
 12719                           intcon2	equ	0xFF1
 12720                           postinc0	equ	0xFEE
 12721                           wreg	equ	0xFE8
 12722                           postinc1	equ	0xFE6
 12723                           indf2	equ	0xFDF
 12724                           postinc2	equ	0xFDE
 12725                           postdec2	equ	0xFDD
 12726                           fsr2h	equ	0xFDA
 12727                           fsr2l	equ	0xFD9
 12728                           status	equ	0xFD8
 12729                           
 12730 ;; *************** function _Function_G_3 *****************
 12731 ;; Defined at:
 12732 ;;		line 1213 in file "menu.c"
 12733 ;; Parameters:    Size  Location     Type
 12734 ;;		None
 12735 ;; Auto vars:     Size  Location     Type
 12736 ;;		None
 12737 ;; Return value:  Size  Location     Type
 12738 ;;                  1    wreg      void 
 12739 ;; Registers used:
 12740 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12741 ;; Tracked objects:
 12742 ;;		On entry : 0/0
 12743 ;;		On exit  : 0/0
 12744 ;;		Unchanged: 0/0
 12745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12748 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12749 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12750 ;;Total ram usage:        2 bytes
 12751 ;; Hardware stack levels used:    1
 12752 ;; Hardware stack levels required when called:    9
 12753 ;; This function calls:
 12754 ;;		_Busy_eep
 12755 ;;		_Lcd_Print_String
 12756 ;;		_Write_b_eep
 12757 ;;		_clear_row1
 12758 ;;		_clear_row2
 12759 ;; This function is called by:
 12760 ;;		_Function_G
 12761 ;; This function uses a non-reentrant model
 12762 ;;
 12763                           
 12764                           	psect	text28
 12765  0091D6                     __ptext28:
 12766                           	opt stack 0
 12767  0091D6                     _Function_G_3:
 12768                           	opt stack 19
 12769                           
 12770                           ;menu.c: 1216: while(encoder_click == 0);
 12771                           
 12772                           ;incstack = 0
 12773  0091D6  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12774  0091D8  D7FE               	goto	_Function_G_3
 12775                           
 12776                           ;menu.c: 1218: (Busy_eep(), Write_b_eep(0,0x00));
 12777  0091DA  EC4E  F04D         	call	_Busy_eep	;wreg free
 12778  0091DE  0E00               	movlw	0
 12779  0091E0  0100               	movlb	0	; () banked
 12780  0091E2  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 12781  0091E4  0E00               	movlw	0
 12782  0091E6  6F60               	movwf	Write_b_eep@badd& (0+255),b
 12783  0091E8  0E00               	movlw	0
 12784  0091EA  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 12785  0091EC  ECC2  F04A         	call	_Write_b_eep	;wreg free
 12786                           
 12787                           ;menu.c: 1220: clear_row1();
 12788  0091F0  EC6C  F04C         	call	_clear_row1	;wreg free
 12789                           
 12790                           ;menu.c: 1221: Lcd_Print_String("Restore Setting!");
 12791  0091F4  0E86               	movlw	low STR_37
 12792  0091F6  0100               	movlb	0	; () banked
 12793  0091F8  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12794  0091FA  0EFD               	movlw	high STR_37
 12795  0091FC  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12796  0091FE  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 12797                           
 12798                           ;menu.c: 1222: clear_row2();
 12799  009202  EC58  F04C         	call	_clear_row2	;wreg free
 12800                           
 12801                           ;menu.c: 1223: Lcd_Print_String("Rebooting...");
 12802  009206  0E25               	movlw	low STR_38
 12803  009208  0100               	movlb	0	; () banked
 12804  00920A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12805  00920C  0EFF               	movlw	high STR_38
 12806  00920E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12807  009210  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 12808                           
 12809                           ;menu.c: 1224: _delay((unsigned long)((2500)*(20000000/4000.0)));
 12810  009214  0E40               	movlw	64
 12811  009216  0100               	movlb	0	; () banked
 12812  009218  6F6F               	movwf	(??_Function_G_3+1)& (0+255),b
 12813  00921A  0E6A               	movlw	106
 12814  00921C  6F6E               	movwf	??_Function_G_3& (0+255),b
 12815  00921E  0E97               	movlw	151
 12816  009220                     u67597:
 12817  009220  2EE8               	decfsz	wreg,f,c
 12818  009222  D7FE               	bra	u67597
 12819  009224  2F6E               	decfsz	??_Function_G_3& (0+255),f,b
 12820  009226  D7FC               	bra	u67597
 12821  009228  2F6F               	decfsz	(??_Function_G_3+1)& (0+255),f,b
 12822  00922A  D7FA               	bra	u67597
 12823  00922C  D000               	nop2	
 12824  00922E  00FF               	reset		;# 
 12825  009230  0012               	return		;funcret
 12826  009232                     __end_of_Function_G_3:
 12827                           	opt stack 0
 12828                           tblptru	equ	0xFF8
 12829                           tblptrh	equ	0xFF7
 12830                           tblptrl	equ	0xFF6
 12831                           tablat	equ	0xFF5
 12832                           prodh	equ	0xFF4
 12833                           prodl	equ	0xFF3
 12834                           intcon	equ	0xFF2
 12835                           intcon2	equ	0xFF1
 12836                           postinc0	equ	0xFEE
 12837                           wreg	equ	0xFE8
 12838                           postinc1	equ	0xFE6
 12839                           indf2	equ	0xFDF
 12840                           postinc2	equ	0xFDE
 12841                           postdec2	equ	0xFDD
 12842                           fsr2h	equ	0xFDA
 12843                           fsr2l	equ	0xFD9
 12844                           status	equ	0xFD8
 12845                           
 12846 ;; *************** function _Function_G_2 *****************
 12847 ;; Defined at:
 12848 ;;		line 1180 in file "menu.c"
 12849 ;; Parameters:    Size  Location     Type
 12850 ;;		None
 12851 ;; Auto vars:     Size  Location     Type
 12852 ;;		None
 12853 ;; Return value:  Size  Location     Type
 12854 ;;                  1    wreg      void 
 12855 ;; Registers used:
 12856 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12857 ;; Tracked objects:
 12858 ;;		On entry : 0/0
 12859 ;;		On exit  : 0/0
 12860 ;;		Unchanged: 0/0
 12861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12866 ;;Total ram usage:        0 bytes
 12867 ;; Hardware stack levels used:    1
 12868 ;; Hardware stack levels required when called:   16
 12869 ;; This function calls:
 12870 ;;		_Busy_eep
 12871 ;;		_Lcd_Print_String
 12872 ;;		_Write_b_eep
 12873 ;;		___lbmod
 12874 ;;		___wmul
 12875 ;;		_clear_row1
 12876 ;;		_clear_row2
 12877 ;;		_eepromExit
 12878 ;;		_exitLoad
 12879 ;;		_loadFromEEPROM
 12880 ;;		_un_block_code
 12881 ;; This function is called by:
 12882 ;;		_Function_G
 12883 ;; This function uses a non-reentrant model
 12884 ;;
 12885                           
 12886                           	psect	text29
 12887  007E8C                     __ptext29:
 12888                           	opt stack 0
 12889  007E8C                     _Function_G_2:
 12890                           	opt stack 12
 12891                           
 12892                           ;menu.c: 1182: which_screen = SAVES_MENU;
 12893                           
 12894                           ;incstack = 0
 12895  007E8C  0E17               	movlw	23
 12896  007E8E  6E4E               	movwf	_which_screen,c
 12897                           
 12898                           ;menu.c: 1183: encoder_click = 0;
 12899  007E90  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 12900                           
 12901                           ;menu.c: 1184: lcd_print_once = 0;
 12902  007E92  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12903                           
 12904                           ;menu.c: 1186: while(encoder_click == 0) {
 12905  007E94  D02C               	goto	l3759
 12906  007E96                     
 12907                           ;menu.c: 1190: un_block_code();
 12908  007E96  ECF4  F04C         	call	_un_block_code	;wreg free
 12909                           
 12910                           ;menu.c: 1192: if (lcd_print_once == 0) {
 12911  007E9A  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12912  007E9C  D027               	goto	l3761
 12913                           
 12914                           ;menu.c: 1193: clear_row1();
 12915  007E9E  EC6C  F04C         	call	_clear_row1	;wreg free
 12916                           
 12917                           ;menu.c: 1194: Lcd_Print_String("Load #:");
 12918  007EA2  0EB3               	movlw	low STR_36
 12919  007EA4  0100               	movlb	0	; () banked
 12920  007EA6  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12921  007EA8  0EFF               	movlw	high STR_36
 12922  007EAA  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12923  007EAC  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 12924                           
 12925                           ;menu.c: 1195: clear_row2();
 12926  007EB0  EC58  F04C         	call	_clear_row2	;wreg free
 12927                           
 12928                           ;menu.c: 1196: Lcd_Print_String(LCD_STRINGS[(savesMenu.selector % savesMenu.number) + sa
      +                          vesMenu.address]);
 12929  007EB4  0100               	movlb	0	; () banked
 12930  007EB6  51E3               	movf	_savesMenu& (0+255),w,b
 12931  007EB8  6EE6               	movwf	postinc1,c
 12932  007EBA  51E5               	movf	(_savesMenu+2)& (0+255),w,b
 12933  007EBC  6EE6               	movwf	postinc1,c
 12934  007EBE  ECA5  F041         	call	___lbmod	;wreg free
 12935  007EC2  503E               	movf	btemp,w,c
 12936  007EC4  0100               	movlb	0	; () banked
 12937  007EC6  25E4               	addwf	(_savesMenu+1)& (0+255),w,b
 12938  007EC8  6F60               	movwf	___wmul@multiplier& (0+255),b
 12939  007ECA  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 12940  007ECC  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 12941  007ECE  0E00               	movlw	0
 12942  007ED0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 12943  007ED2  0E11               	movlw	17
 12944  007ED4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 12945  007ED6  EC80  F04C         	call	___wmul	;wreg free
 12946  007EDA  0E9E               	movlw	low _LCD_STRINGS
 12947  007EDC  0100               	movlb	0	; () banked
 12948  007EDE  2560               	addwf	?___wmul& (0+255),w,b
 12949  007EE0  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 12950  007EE2  0EF3               	movlw	high _LCD_STRINGS
 12951  007EE4  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 12952  007EE6  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 12953  007EE8  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 12954  007EEC                     l3761:
 12955                           
 12956                           ;menu.c: 1197: }
 12957                           ;menu.c: 1198: lcd_print_once = 1;
 12958  007EEC  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 12959  007EEE                     l3759:
 12960  007EEE  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 12961  007EF0  D7D2               	goto	l3760
 12962                           
 12963                           ;menu.c: 1199: }
 12964                           ;menu.c: 1201: if(savesMenu.selector == 4){eepromExit();}
 12965  007EF2  0E04               	movlw	4
 12966  007EF4  0100               	movlb	0	; () banked
 12967  007EF6  19E5               	xorwf	(_savesMenu+2)& (0+255),w,b
 12968  007EF8  A4D8               	btfss	status,2,c
 12969  007EFA  D003               	goto	l3763
 12970                           
 12971                           ; BSR set to: 0
 12972  007EFC  EC77  F04B         	call	_eepromExit	;wreg free
 12973  007F00  D011               	goto	l3764
 12974  007F02                     l3763:
 12975                           
 12976                           ;menu.c: 1202: else {
 12977                           ;menu.c: 1204: (Busy_eep(), Write_b_eep(0,(savesMenu.selector + 1)));
 12978  007F02  EC4E  F04D         	call	_Busy_eep	;wreg free
 12979  007F06  0E00               	movlw	0
 12980  007F08  0100               	movlb	0	; () banked
 12981  007F0A  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 12982  007F0C  0E00               	movlw	0
 12983  007F0E  6F60               	movwf	Write_b_eep@badd& (0+255),b
 12984  007F10  29E5               	incf	(_savesMenu+2)& (0+255),w,b
 12985  007F12  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 12986  007F14  ECC2  F04A         	call	_Write_b_eep	;wreg free
 12987                           
 12988                           ;menu.c: 1205: loadFromEEPROM(savesMenu.selector + 1);
 12989  007F18  0100               	movlb	0	; () banked
 12990  007F1A  29E5               	incf	(_savesMenu+2)& (0+255),w,b
 12991  007F1C  ECF1  F025         	call	_loadFromEEPROM
 12992                           
 12993                           ;menu.c: 1206: exitLoad();
 12994  007F20  EC3D  F04B         	call	_exitLoad	;wreg free
 12995  007F24                     l3764:
 12996                           
 12997                           ;menu.c: 1207: }
 12998                           ;menu.c: 1209: savesMenu.selector = 0;
 12999  007F24  0E00               	movlw	0
 13000  007F26  0100               	movlb	0	; () banked
 13001  007F28  6FE5               	movwf	(_savesMenu+2)& (0+255),b
 13002                           
 13003                           ; BSR set to: 0
 13004  007F2A  0012               	return		;funcret
 13005  007F2C                     __end_of_Function_G_2:
 13006                           	opt stack 0
 13007                           tblptru	equ	0xFF8
 13008                           tblptrh	equ	0xFF7
 13009                           tblptrl	equ	0xFF6
 13010                           tablat	equ	0xFF5
 13011                           prodh	equ	0xFF4
 13012                           prodl	equ	0xFF3
 13013                           intcon	equ	0xFF2
 13014                           intcon2	equ	0xFF1
 13015                           postinc0	equ	0xFEE
 13016                           wreg	equ	0xFE8
 13017                           postinc1	equ	0xFE6
 13018                           indf2	equ	0xFDF
 13019                           postinc2	equ	0xFDE
 13020                           postdec2	equ	0xFDD
 13021                           fsr2h	equ	0xFDA
 13022                           fsr2l	equ	0xFD9
 13023                           status	equ	0xFD8
 13024                           
 13025 ;; *************** function _loadFromEEPROM *****************
 13026 ;; Defined at:
 13027 ;;		line 54 in file "eeprom.c"
 13028 ;; Parameters:    Size  Location     Type
 13029 ;;  slotNumber      1    wreg     unsigned char 
 13030 ;; Auto vars:     Size  Location     Type
 13031 ;;  slotNumber      1   77[BANK1 ] unsigned char 
 13032 ;;  byte_count      2   78[BANK1 ] unsigned int 
 13033 ;;  to_load        75    0[BANK1 ] unsigned char [75]
 13034 ;;  baseAddress     2   75[BANK1 ] unsigned int 
 13035 ;; Return value:  Size  Location     Type
 13036 ;;                  1    wreg      void 
 13037 ;; Registers used:
 13038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13039 ;; Tracked objects:
 13040 ;;		On entry : 0/0
 13041 ;;		On exit  : 0/0
 13042 ;;		Unchanged: 0/0
 13043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13045 ;;      Locals:         0       0      80       0       0       0       0       0       0       0       0       0       
      +0       0
 13046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13047 ;;      Totals:         0       0      80       0       0       0       0       0       0       0       0       0       
      +0       0
 13048 ;;Total ram usage:       80 bytes
 13049 ;; Hardware stack levels used:    1
 13050 ;; Hardware stack levels required when called:    7
 13051 ;; This function calls:
 13052 ;;		_Read_b_eep
 13053 ;;		_calculate_pulse_length
 13054 ;; This function is called by:
 13055 ;;		_Function_G_2
 13056 ;;		_selectSlotOnBoot
 13057 ;; This function uses a non-reentrant model
 13058 ;;
 13059                           
 13060                           	psect	text30
 13061  004BE2                     __ptext30:
 13062                           	opt stack 0
 13063  004BE2                     _loadFromEEPROM:
 13064                           	opt stack 22
 13065                           
 13066                           ; BSR set to: 0
 13067                           ;incstack = 0
 13068                           ;loadFromEEPROM@slotNumber stored from wreg
 13069  004BE2  0101               	movlb	1	; () banked
 13070  004BE4  6FE6               	movwf	loadFromEEPROM@slotNumber& (0+255),b
 13071                           
 13072                           ;eeprom.c: 56: unsigned int baseAddress = 0;
 13073  004BE6  0E00               	movlw	0
 13074  004BE8  0101               	movlb	1	; () banked
 13075  004BEA  6FE5               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13076  004BEC  0E00               	movlw	0
 13077  004BEE  6FE4               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13078                           
 13079                           ; BSR set to: 1
 13080                           ;eeprom.c: 59: if (slotNumber == SLOT1) {baseAddress = 128;}
 13081  004BF0  05E6               	decf	loadFromEEPROM@slotNumber& (0+255),w,b
 13082  004BF2  A4D8               	btfss	status,2,c
 13083  004BF4  D004               	goto	l4473
 13084                           
 13085                           ; BSR set to: 1
 13086  004BF6  0E00               	movlw	0
 13087  004BF8  6FE5               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13088  004BFA  0E80               	movlw	128
 13089  004BFC  6FE4               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13090  004BFE                     l4473:
 13091                           
 13092                           ; BSR set to: 1
 13093                           ;eeprom.c: 60: if (slotNumber == SLOT2) {baseAddress = 256;}
 13094                           
 13095                           ; BSR set to: 1
 13096  004BFE  0E02               	movlw	2
 13097  004C00  19E6               	xorwf	loadFromEEPROM@slotNumber& (0+255),w,b
 13098  004C02  A4D8               	btfss	status,2,c
 13099  004C04  D004               	goto	l4474
 13100                           
 13101                           ; BSR set to: 1
 13102  004C06  0E01               	movlw	1
 13103  004C08  6FE5               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13104  004C0A  0E00               	movlw	0
 13105  004C0C  6FE4               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13106  004C0E                     l4474:
 13107                           
 13108                           ; BSR set to: 1
 13109                           ;eeprom.c: 61: if (slotNumber == SLOT3) {baseAddress = 384;}
 13110                           
 13111                           ; BSR set to: 1
 13112  004C0E  0E03               	movlw	3
 13113  004C10  19E6               	xorwf	loadFromEEPROM@slotNumber& (0+255),w,b
 13114  004C12  A4D8               	btfss	status,2,c
 13115  004C14  D004               	goto	l4475
 13116                           
 13117                           ; BSR set to: 1
 13118  004C16  0E01               	movlw	1
 13119  004C18  6FE5               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13120  004C1A  0E80               	movlw	128
 13121  004C1C  6FE4               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13122  004C1E                     l4475:
 13123                           
 13124                           ; BSR set to: 1
 13125                           ;eeprom.c: 62: if (slotNumber == SLOT4) {baseAddress = 512;}
 13126                           
 13127                           ; BSR set to: 1
 13128  004C1E  0E04               	movlw	4
 13129  004C20  19E6               	xorwf	loadFromEEPROM@slotNumber& (0+255),w,b
 13130  004C22  A4D8               	btfss	status,2,c
 13131  004C24  D004               	goto	l4476
 13132                           
 13133                           ; BSR set to: 1
 13134  004C26  0E02               	movlw	2
 13135  004C28  6FE5               	movwf	(loadFromEEPROM@baseAddress+1)& (0+255),b
 13136  004C2A  0E00               	movlw	0
 13137  004C2C  6FE4               	movwf	loadFromEEPROM@baseAddress& (0+255),b
 13138  004C2E                     l4476:
 13139                           
 13140                           ; BSR set to: 1
 13141                           ;eeprom.c: 65: unsigned char to_load[75];
 13142                           ;eeprom.c: 68: for (unsigned int byte_count = 0; byte_count < 75; byte_count++){
 13143  004C2E  0E00               	movlw	0
 13144  004C30  6FE8               	movwf	(loadFromEEPROM@byte_count+1)& (0+255),b
 13145  004C32  0E00               	movlw	0
 13146  004C34  6FE7               	movwf	loadFromEEPROM@byte_count& (0+255),b
 13147                           
 13148                           ; BSR set to: 1
 13149  004C36  51E8               	movf	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13150  004C38  E11C               	bnz	l4478
 13151  004C3A  D017               	goto	L1
 13152  004C3C                     
 13153                           ; BSR set to: 1
 13154                           ;eeprom.c: 69: to_load[byte_count] = Read_b_eep(byte_count + baseAddress);
 13155                           
 13156                           ; BSR set to: 1
 13157  004C3C  0E99               	movlw	low loadFromEEPROM@to_load
 13158  004C3E  25E7               	addwf	loadFromEEPROM@byte_count& (0+255),w,b
 13159  004C40  6ED9               	movwf	fsr2l,c
 13160  004C42  0E01               	movlw	high loadFromEEPROM@to_load
 13161  004C44  21E8               	addwfc	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13162  004C46  6EDA               	movwf	fsr2h,c
 13163  004C48  51E4               	movf	loadFromEEPROM@baseAddress& (0+255),w,b
 13164  004C4A  25E7               	addwf	loadFromEEPROM@byte_count& (0+255),w,b
 13165  004C4C  0100               	movlb	0	; () banked
 13166  004C4E  6F60               	movwf	Read_b_eep@badd& (0+255),b
 13167  004C50  0101               	movlb	1	; () banked
 13168  004C52  51E5               	movf	(loadFromEEPROM@baseAddress+1)& (0+255),w,b
 13169  004C54  21E8               	addwfc	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13170  004C56  0100               	movlb	0	; () banked
 13171  004C58  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
 13172  004C5A  ECE7  F04C         	call	_Read_b_eep	;wreg free
 13173  004C5E  6EDF               	movwf	indf2,c
 13174  004C60  0101               	movlb	1	; () banked
 13175  004C62  4BE7               	infsnz	loadFromEEPROM@byte_count& (0+255),f,b
 13176  004C64  2BE8               	incf	(loadFromEEPROM@byte_count+1)& (0+255),f,b
 13177                           
 13178                           ; BSR set to: 1
 13179  004C66  51E8               	movf	(loadFromEEPROM@byte_count+1)& (0+255),w,b
 13180  004C68  E104               	bnz	u57660
 13181  004C6A                     L1:
 13182  004C6A  0E4B               	movlw	75
 13183  004C6C  5DE7               	subwf	loadFromEEPROM@byte_count& (0+255),w,b
 13184  004C6E  A0D8               	btfss	status,0,c
 13185  004C70  D7E5               	goto	l4477
 13186  004C72                     u57660:
 13187  004C72                     l4478:
 13188                           
 13189                           ; BSR set to: 1
 13190                           ;eeprom.c: 70: }
 13191                           ;eeprom.c: 75: KEYBOARD_MODE = to_load[0];
 13192  004C72  C199  F0F3         	movff	loadFromEEPROM@to_load,_KEYBOARD_MODE
 13193                           
 13194                           ;eeprom.c: 76: which_mode = to_load[1];
 13195  004C76  C19A  F0F2         	movff	loadFromEEPROM@to_load+1,_which_mode
 13196                           
 13197                           ;eeprom.c: 77: which_triad = to_load[2];
 13198  004C7A  C19B  F0F1         	movff	loadFromEEPROM@to_load+2,_which_triad
 13199                           
 13200                           ;eeprom.c: 78: which_seventh = to_load[3];
 13201  004C7E  C19C  F0F0         	movff	loadFromEEPROM@to_load+3,_which_seventh
 13202                           
 13203                           ;eeprom.c: 81: TRANSPOSE_MODE = to_load[4];
 13204  004C82  A19D               	btfss	(loadFromEEPROM@to_load+4)& (0+255),0,b
 13205  004C84  D002               	goto	u57670
 13206  004C86  8E04               	bsf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 13207  004C88  D001               	goto	u57685
 13208  004C8A                     u57670:
 13209  004C8A  9E04               	bcf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 13210  004C8C                     u57685:
 13211                           
 13212                           ;eeprom.c: 84: DRUM_MODE = to_load[5];
 13213  004C8C  0101               	movlb	1	; () banked
 13214  004C8E  A19E               	btfss	(loadFromEEPROM@to_load+5)& (0+255),0,b
 13215  004C90  D002               	goto	u57690
 13216  004C92  8E01               	bsf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 13217  004C94  D001               	goto	u57705
 13218  004C96                     u57690:
 13219  004C96  9E01               	bcf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 13220  004C98                     u57705:
 13221                           
 13222                           ;eeprom.c: 85: CONTROL_MODE = to_load[6];
 13223  004C98  0101               	movlb	1	; () banked
 13224  004C9A  A19F               	btfss	(loadFromEEPROM@to_load+6)& (0+255),0,b
 13225  004C9C  D002               	goto	u57710
 13226  004C9E  8C01               	bsf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 13227  004CA0  D001               	goto	u57725
 13228  004CA2                     u57710:
 13229  004CA2  9C01               	bcf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 13230  004CA4                     u57725:
 13231                           
 13232                           ;eeprom.c: 88: DRUM_NOTE[0] = to_load[7];
 13233  004CA4  C1A0  F1EA         	movff	loadFromEEPROM@to_load+7,_DRUM_NOTE
 13234                           
 13235                           ;eeprom.c: 89: DRUM_NOTE[1] = to_load[8];
 13236  004CA8  C1A1  F1EB         	movff	loadFromEEPROM@to_load+8,_DRUM_NOTE+1
 13237                           
 13238                           ;eeprom.c: 90: DRUM_NOTE[2] = to_load[9];
 13239  004CAC  C1A2  F1EC         	movff	loadFromEEPROM@to_load+9,_DRUM_NOTE+2
 13240                           
 13241                           ;eeprom.c: 91: DRUM_NOTE[3] = to_load[10];
 13242  004CB0  C1A3  F1ED         	movff	loadFromEEPROM@to_load+10,_DRUM_NOTE+3
 13243                           
 13244                           ;eeprom.c: 92: DRUM_NOTE[4] = to_load[11];
 13245  004CB4  C1A4  F1EE         	movff	loadFromEEPROM@to_load+11,_DRUM_NOTE+4
 13246                           
 13247                           ;eeprom.c: 93: DRUM_NOTE[5] = to_load[12];
 13248  004CB8  C1A5  F1EF         	movff	loadFromEEPROM@to_load+12,_DRUM_NOTE+5
 13249                           
 13250                           ;eeprom.c: 94: DRUM_NOTE[6] = to_load[13];
 13251  004CBC  C1A6  F1F0         	movff	loadFromEEPROM@to_load+13,_DRUM_NOTE+6
 13252                           
 13253                           ;eeprom.c: 95: DRUM_NOTE[7] = to_load[14];
 13254  004CC0  C1A7  F1F1         	movff	loadFromEEPROM@to_load+14,_DRUM_NOTE+7
 13255                           
 13256                           ;eeprom.c: 98: DRUM_CC[0] = to_load[15];
 13257  004CC4  C1A8  F0F5         	movff	loadFromEEPROM@to_load+15,_DRUM_CC
 13258                           
 13259                           ;eeprom.c: 99: DRUM_CC[1] = to_load[16];
 13260  004CC8  C1A9  F0F6         	movff	loadFromEEPROM@to_load+16,_DRUM_CC+1
 13261                           
 13262                           ;eeprom.c: 100: DRUM_CC[2] = to_load[17];
 13263  004CCC  C1AA  F0F7         	movff	loadFromEEPROM@to_load+17,_DRUM_CC+2
 13264                           
 13265                           ;eeprom.c: 101: DRUM_CC[3] = to_load[18];
 13266  004CD0  C1AB  F0F8         	movff	loadFromEEPROM@to_load+18,_DRUM_CC+3
 13267                           
 13268                           ;eeprom.c: 102: DRUM_CC[4] = to_load[19];
 13269  004CD4  C1AC  F0F9         	movff	loadFromEEPROM@to_load+19,_DRUM_CC+4
 13270                           
 13271                           ;eeprom.c: 103: DRUM_CC[5] = to_load[20];
 13272  004CD8  C1AD  F0FA         	movff	loadFromEEPROM@to_load+20,_DRUM_CC+5
 13273                           
 13274                           ;eeprom.c: 104: DRUM_CC[6] = to_load[21];
 13275  004CDC  C1AE  F0FB         	movff	loadFromEEPROM@to_load+21,_DRUM_CC+6
 13276                           
 13277                           ;eeprom.c: 105: DRUM_CC[7] = to_load[22];
 13278  004CE0  C1AF  F0FC         	movff	loadFromEEPROM@to_load+22,_DRUM_CC+7
 13279                           
 13280                           ;eeprom.c: 108: POT_MODE = to_load[23];
 13281  004CE4  0101               	movlb	1	; () banked
 13282  004CE6  A1B0               	btfss	(loadFromEEPROM@to_load+23)& (0+255),0,b
 13283  004CE8  D002               	goto	u57730
 13284  004CEA  8E05               	bsf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 13285  004CEC  D001               	goto	u57745
 13286  004CEE                     u57730:
 13287  004CEE  9E05               	bcf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 13288  004CF0                     u57745:
 13289                           
 13290                           ;eeprom.c: 111: inputPotsArray[0].controller_number = to_load[24];
 13291  004CF0  C1B1  F289         	movff	loadFromEEPROM@to_load+24,_inputPotsArray+1
 13292                           
 13293                           ;eeprom.c: 112: inputPotsArray[0].controller_number_two_byte = to_load[25];
 13294  004CF4  C1B2  F28A         	movff	loadFromEEPROM@to_load+25,_inputPotsArray+2
 13295                           
 13296                           ;eeprom.c: 114: inputPotsArray[1].controller_number = to_load[26];
 13297  004CF8  C1B3  F28C         	movff	loadFromEEPROM@to_load+26,_inputPotsArray+4
 13298                           
 13299                           ;eeprom.c: 115: inputPotsArray[1].controller_number_two_byte = to_load[27];
 13300  004CFC  C1B4  F28D         	movff	loadFromEEPROM@to_load+27,_inputPotsArray+5
 13301                           
 13302                           ;eeprom.c: 117: inputPotsArray[2].controller_number = to_load[28];
 13303  004D00  C1B5  F28F         	movff	loadFromEEPROM@to_load+28,_inputPotsArray+7
 13304                           
 13305                           ;eeprom.c: 118: inputPotsArray[2].controller_number_two_byte = to_load[29];
 13306  004D04  C1B6  F290         	movff	loadFromEEPROM@to_load+29,_inputPotsArray+8
 13307                           
 13308                           ;eeprom.c: 120: inputPotsArray[3].controller_number = to_load[30];
 13309  004D08  C1B7  F292         	movff	loadFromEEPROM@to_load+30,_inputPotsArray+10
 13310                           
 13311                           ;eeprom.c: 121: inputPotsArray[3].controller_number_two_byte = to_load[31];
 13312  004D0C  C1B8  F293         	movff	loadFromEEPROM@to_load+31,_inputPotsArray+11
 13313                           
 13314                           ;eeprom.c: 123: inputPotsArray[4].controller_number = to_load[32];
 13315  004D10  C1B9  F295         	movff	loadFromEEPROM@to_load+32,_inputPotsArray+13
 13316                           
 13317                           ;eeprom.c: 124: inputPotsArray[4].controller_number_two_byte = to_load[33];
 13318  004D14  C1BA  F296         	movff	loadFromEEPROM@to_load+33,_inputPotsArray+14
 13319                           
 13320                           ;eeprom.c: 126: inputPotsArray[5].controller_number = to_load[34];
 13321  004D18  C1BB  F298         	movff	loadFromEEPROM@to_load+34,_inputPotsArray+16
 13322                           
 13323                           ;eeprom.c: 127: inputPotsArray[5].controller_number_two_byte = to_load[35];
 13324  004D1C  C1BC  F299         	movff	loadFromEEPROM@to_load+35,_inputPotsArray+17
 13325                           
 13326                           ;eeprom.c: 129: inputPotsArray[6].controller_number = to_load[36];
 13327  004D20  C1BD  F29B         	movff	loadFromEEPROM@to_load+36,_inputPotsArray+19
 13328                           
 13329                           ;eeprom.c: 130: inputPotsArray[6].controller_number_two_byte = to_load[37];
 13330  004D24  C1BE  F29C         	movff	loadFromEEPROM@to_load+37,_inputPotsArray+20
 13331                           
 13332                           ;eeprom.c: 134: inputPotsArray[7].controller_number = to_load[38];
 13333  004D28  C1BF  F29E         	movff	loadFromEEPROM@to_load+38,_inputPotsArray+22
 13334                           
 13335                           ;eeprom.c: 135: inputPotsArray[7].controller_number_two_byte = to_load[39];
 13336  004D2C  C1C0  F29F         	movff	loadFromEEPROM@to_load+39,_inputPotsArray+23
 13337                           
 13338                           ;eeprom.c: 137: inputPotsArray[8].controller_number = to_load[40];
 13339  004D30  C1C1  F2A1         	movff	loadFromEEPROM@to_load+40,_inputPotsArray+25
 13340                           
 13341                           ;eeprom.c: 138: inputPotsArray[8].controller_number_two_byte = to_load[41];
 13342  004D34  C1C2  F2A2         	movff	loadFromEEPROM@to_load+41,_inputPotsArray+26
 13343                           
 13344                           ;eeprom.c: 140: inputPotsArray[9].controller_number = to_load[42];
 13345  004D38  C1C3  F2A4         	movff	loadFromEEPROM@to_load+42,_inputPotsArray+28
 13346                           
 13347                           ;eeprom.c: 141: inputPotsArray[9].controller_number_two_byte = to_load[43];
 13348  004D3C  C1C4  F2A5         	movff	loadFromEEPROM@to_load+43,_inputPotsArray+29
 13349                           
 13350                           ;eeprom.c: 143: inputPotsArray[10].controller_number = to_load[44];
 13351  004D40  C1C5  F2A7         	movff	loadFromEEPROM@to_load+44,_inputPotsArray+31
 13352                           
 13353                           ;eeprom.c: 144: inputPotsArray[10].controller_number_two_byte = to_load[45];
 13354  004D44  C1C6  F2A8         	movff	loadFromEEPROM@to_load+45,_inputPotsArray+32
 13355                           
 13356                           ;eeprom.c: 146: inputPotsArray[11].controller_number = to_load[46];
 13357  004D48  C1C7  F2AA         	movff	loadFromEEPROM@to_load+46,_inputPotsArray+34
 13358                           
 13359                           ;eeprom.c: 147: inputPotsArray[11].controller_number_two_byte = to_load[47];
 13360  004D4C  C1C8  F2AB         	movff	loadFromEEPROM@to_load+47,_inputPotsArray+35
 13361                           
 13362                           ;eeprom.c: 149: inputPotsArray[12].controller_number = to_load[48];
 13363  004D50  C1C9  F2AD         	movff	loadFromEEPROM@to_load+48,_inputPotsArray+37
 13364                           
 13365                           ;eeprom.c: 150: inputPotsArray[12].controller_number_two_byte = to_load[49];
 13366  004D54  C1CA  F2AE         	movff	loadFromEEPROM@to_load+49,_inputPotsArray+38
 13367                           
 13368                           ;eeprom.c: 152: inputPotsArray[13].controller_number = to_load[50];
 13369  004D58  C1CB  F2B0         	movff	loadFromEEPROM@to_load+50,_inputPotsArray+40
 13370                           
 13371                           ;eeprom.c: 153: inputPotsArray[13].controller_number_two_byte = to_load[51];
 13372  004D5C  C1CC  F2B1         	movff	loadFromEEPROM@to_load+51,_inputPotsArray+41
 13373                           
 13374                           ;eeprom.c: 155: inputPotsArray[14].controller_number = to_load[52];
 13375  004D60  C1CD  F2B3         	movff	loadFromEEPROM@to_load+52,_inputPotsArray+43
 13376                           
 13377                           ;eeprom.c: 156: inputPotsArray[14].controller_number_two_byte = to_load[53];
 13378  004D64  C1CE  F2B4         	movff	loadFromEEPROM@to_load+53,_inputPotsArray+44
 13379                           
 13380                           ;eeprom.c: 158: inputPotsArray[15].controller_number = to_load[54];
 13381  004D68  C1CF  F2B6         	movff	loadFromEEPROM@to_load+54,_inputPotsArray+46
 13382                           
 13383                           ;eeprom.c: 159: inputPotsArray[15].controller_number_two_byte = to_load[55];
 13384  004D6C  C1D0  F2B7         	movff	loadFromEEPROM@to_load+55,_inputPotsArray+47
 13385                           
 13386                           ;eeprom.c: 163: channel = to_load[56];
 13387  004D70  C1D1  F03D         	movff	loadFromEEPROM@to_load+56,_channel
 13388                           
 13389                           ;eeprom.c: 164: drumchannel = to_load[57];
 13390  004D74  C1D2  F051         	movff	loadFromEEPROM@to_load+57,_drumchannel
 13391                           
 13392                           ;eeprom.c: 167: octave = to_load[58];
 13393  004D78  C1D3  F04F         	movff	loadFromEEPROM@to_load+58,_octave
 13394                           
 13395                           ;eeprom.c: 168: semitone = to_load[59];
 13396  004D7C  C1D4  F03A         	movff	loadFromEEPROM@to_load+59,_semitone
 13397                           
 13398                           ;eeprom.c: 171: patch_number = to_load[60];
 13399  004D80  C1D5  F0F4         	movff	loadFromEEPROM@to_load+60,_patch_number
 13400                           
 13401                           ;eeprom.c: 174: ARPEGGIO_ON = to_load[61];
 13402  004D84  0101               	movlb	1	; () banked
 13403  004D86  A1D6               	btfss	(loadFromEEPROM@to_load+61)& (0+255),0,b
 13404  004D88  D002               	goto	u57750
 13405  004D8A  8A04               	bsf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 13406  004D8C  D001               	goto	u57765
 13407  004D8E                     u57750:
 13408  004D8E  9A04               	bcf	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 13409  004D90                     u57765:
 13410                           
 13411                           ;eeprom.c: 175: BPM = to_load[62];
 13412  004D90  C1D7  F0FF         	movff	loadFromEEPROM@to_load+62,_BPM
 13413                           
 13414                           ;eeprom.c: 177: TIMER_PRELOAD = calculate_pulse_length();
 13415  004D94  EC61  F02F         	call	_calculate_pulse_length	;wreg free
 13416  004D98  C0C2  F17C         	movff	?_calculate_pulse_length,_TIMER_PRELOAD
 13417  004D9C  C0C3  F17D         	movff	?_calculate_pulse_length+1,_TIMER_PRELOAD+1
 13418                           
 13419                           ;eeprom.c: 179: OCTAVES = to_load[63];
 13420  004DA0  C1D8  F04D         	movff	loadFromEEPROM@to_load+63,_OCTAVES
 13421                           
 13422                           ;eeprom.c: 180: ARPEGGIO_TYPE = to_load[64];
 13423  004DA4  C1D9  F034         	movff	loadFromEEPROM@to_load+64,_ARPEGGIO_TYPE
 13424                           
 13425                           ;eeprom.c: 181: NOTE_LENGTH_PULSES = to_load[65];
 13426  004DA8  C1DA  F04C         	movff	loadFromEEPROM@to_load+65,_NOTE_LENGTH_PULSES
 13427                           
 13428                           ;eeprom.c: 182: LATCH = to_load[66];
 13429  004DAC  0101               	movlb	1	; () banked
 13430  004DAE  A1DB               	btfss	(loadFromEEPROM@to_load+66)& (0+255),0,b
 13431  004DB0  D002               	goto	u57770
 13432  004DB2  8404               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 13433  004DB4  D001               	goto	u57785
 13434  004DB6                     u57770:
 13435  004DB6  9404               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
 13436  004DB8                     u57785:
 13437                           
 13438                           ;eeprom.c: 185: if(LATCH == 1){latch_was_pressed = 1;}
 13439  004DB8  B404               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 13440  004DBA  8E03               	bsf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 13441                           
 13442                           ;eeprom.c: 187: AUTO_LATCH = to_load[67];
 13443  004DBC  0101               	movlb	1	; () banked
 13444  004DBE  A1DC               	btfss	(loadFromEEPROM@to_load+67)& (0+255),0,b
 13445  004DC0  D002               	goto	u57800
 13446  004DC2  8004               	bsf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 13447  004DC4  D001               	goto	u57815
 13448  004DC6                     u57800:
 13449  004DC6  9004               	bcf	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 13450  004DC8                     u57815:
 13451                           
 13452                           ;eeprom.c: 188: UN_LATCH_MODE = to_load[68];
 13453  004DC8  0101               	movlb	1	; () banked
 13454  004DCA  A1DD               	btfss	(loadFromEEPROM@to_load+68)& (0+255),0,b
 13455  004DCC  D002               	goto	u57820
 13456  004DCE  8204               	bsf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 13457  004DD0  D001               	goto	u57835
 13458  004DD2                     u57820:
 13459  004DD2  9204               	bcf	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 13460  004DD4                     u57835:
 13461                           
 13462                           ;eeprom.c: 189: AUTO_RANDOMIZE = to_load[69];
 13463  004DD4  0101               	movlb	1	; () banked
 13464  004DD6  A1DE               	btfss	(loadFromEEPROM@to_load+69)& (0+255),0,b
 13465  004DD8  D002               	goto	u57840
 13466  004DDA  8C03               	bsf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 13467  004DDC  D001               	goto	u57855
 13468  004DDE                     u57840:
 13469  004DDE  9C03               	bcf	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 13470  004DE0                     u57855:
 13471                           
 13472                           ;eeprom.c: 190: skipFirstLast = to_load[70];
 13473  004DE0  0101               	movlb	1	; () banked
 13474  004DE2  A1DF               	btfss	(loadFromEEPROM@to_load+70)& (0+255),0,b
 13475  004DE4  D002               	goto	u57860
 13476  004DE6  8A03               	bsf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 13477  004DE8  D001               	goto	u57875
 13478  004DEA                     u57860:
 13479  004DEA  9A03               	bcf	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 13480  004DEC                     u57875:
 13481                           
 13482                           ;eeprom.c: 191: LAST_NOTE_MODE_KEY_PRESS = to_load[71];
 13483  004DEC  0101               	movlb	1	; () banked
 13484  004DEE  A1E0               	btfss	(loadFromEEPROM@to_load+71)& (0+255),0,b
 13485  004DF0  D002               	goto	u57880
 13486  004DF2  8603               	bsf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 13487  004DF4  D001               	goto	u57895
 13488  004DF6                     u57880:
 13489  004DF6  9603               	bcf	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 13490  004DF8                     u57895:
 13491                           
 13492                           ;eeprom.c: 192: LAST_NOTE_MODE_KEY_RELEASE = to_load[72];
 13493  004DF8  0101               	movlb	1	; () banked
 13494  004DFA  A1E1               	btfss	(loadFromEEPROM@to_load+72)& (0+255),0,b
 13495  004DFC  D002               	goto	u57900
 13496  004DFE  8403               	bsf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 13497  004E00  D001               	goto	u57915
 13498  004E02                     u57900:
 13499  004E02  9403               	bcf	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 13500  004E04                     u57915:
 13501                           
 13502                           ;eeprom.c: 193: LAST_NOTE_MODE_TRANSPOSE = to_load[73];
 13503  004E04  0101               	movlb	1	; () banked
 13504  004E06  A1E2               	btfss	(loadFromEEPROM@to_load+73)& (0+255),0,b
 13505  004E08  D002               	goto	u57920
 13506  004E0A  8203               	bsf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 13507  004E0C  D001               	goto	u57935
 13508  004E0E                     u57920:
 13509  004E0E  9203               	bcf	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 13510  004E10                     u57935:
 13511                           
 13512                           ;eeprom.c: 194: LAST_NOTE_MODE_RESET = to_load[74];
 13513  004E10  0101               	movlb	1	; () banked
 13514  004E12  A1E3               	btfss	(loadFromEEPROM@to_load+74)& (0+255),0,b
 13515  004E14  D002               	goto	u57940
 13516  004E16  8003               	bsf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 13517  004E18  0012               	return	
 13518  004E1A                     u57940:
 13519  004E1A  9003               	bcf	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 13520  004E1C  0012               	return		;funcret
 13521  004E1E                     __end_of_loadFromEEPROM:
 13522                           	opt stack 0
 13523                           tblptru	equ	0xFF8
 13524                           tblptrh	equ	0xFF7
 13525                           tblptrl	equ	0xFF6
 13526                           tablat	equ	0xFF5
 13527                           prodh	equ	0xFF4
 13528                           prodl	equ	0xFF3
 13529                           intcon	equ	0xFF2
 13530                           intcon2	equ	0xFF1
 13531                           postinc0	equ	0xFEE
 13532                           wreg	equ	0xFE8
 13533                           postinc1	equ	0xFE6
 13534                           indf2	equ	0xFDF
 13535                           postinc2	equ	0xFDE
 13536                           postdec2	equ	0xFDD
 13537                           fsr2h	equ	0xFDA
 13538                           fsr2l	equ	0xFD9
 13539                           status	equ	0xFD8
 13540                           
 13541 ;; *************** function _calculate_pulse_length *****************
 13542 ;; Defined at:
 13543 ;;		line 150 in file "arpeggio.c"
 13544 ;; Parameters:    Size  Location     Type
 13545 ;;		None
 13546 ;; Auto vars:     Size  Location     Type
 13547 ;;  s_tick          4  100[BANK0 ] void 
 13548 ;; Return value:  Size  Location     Type
 13549 ;;                  2   98[BANK0 ] unsigned short 
 13550 ;; Registers used:
 13551 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13552 ;; Tracked objects:
 13553 ;;		On entry : 0/0
 13554 ;;		On exit  : 0/0
 13555 ;;		Unchanged: 0/0
 13556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13557 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13558 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13560 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13561 ;;Total ram usage:       10 bytes
 13562 ;; Hardware stack levels used:    1
 13563 ;; Hardware stack levels required when called:    6
 13564 ;; This function calls:
 13565 ;;		___fladd
 13566 ;;		___fldiv
 13567 ;;		___flmul
 13568 ;;		___flneg
 13569 ;;		___fltol
 13570 ;;		___xxtofl
 13571 ;; This function is called by:
 13572 ;;		_Function_H_2
 13573 ;;		_loadFromEEPROM
 13574 ;;		_main
 13575 ;; This function uses a non-reentrant model
 13576 ;;
 13577                           
 13578                           	psect	text31
 13579  005EC2                     __ptext31:
 13580                           	opt stack 0
 13581  005EC2                     _calculate_pulse_length:
 13582                           	opt stack 22
 13583                           
 13584                           ;arpeggio.c: 157: double s_tick = 1.0 / ((BPM * PPQN) / 60.0);
 13585                           
 13586                           ;incstack = 0
 13587  005EC2  0E00               	movlw	0
 13588  005EC4  0100               	movlb	0	; () banked
 13589  005EC6  6F8B               	movwf	___fldiv@a& (0+255),b
 13590  005EC8  0E00               	movlw	0
 13591  005ECA  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 13592  005ECC  0E70               	movlw	112
 13593  005ECE  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 13594  005ED0  0E42               	movlw	66
 13595  005ED2  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 13596  005ED4  51FF               	movf	_BPM& (0+255),w,b
 13597  005ED6  0101               	movlb	1	; () banked
 13598  005ED8  03F9               	mulwf	_PPQN& (0+255),b
 13599  005EDA  CFF3 F060          	movff	prodl,___xxtofl@val
 13600  005EDE  CFF4 F061          	movff	prodh,___xxtofl@val+1
 13601  005EE2  0100               	movlb	0	; () banked
 13602  005EE4  0E00               	movlw	0
 13603  005EE6  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 13604  005EE8  0EFF               	movlw	-1
 13605  005EEA  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 13606  005EEC  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 13607  005EEE  0E01               	movlw	1
 13608  005EF0  EC14  F030         	call	___xxtofl
 13609  005EF4  C060  F087         	movff	?___xxtofl,___fldiv@b
 13610  005EF8  C061  F088         	movff	?___xxtofl+1,___fldiv@b+1
 13611  005EFC  C062  F089         	movff	?___xxtofl+2,___fldiv@b+2
 13612  005F00  C063  F08A         	movff	?___xxtofl+3,___fldiv@b+3
 13613  005F04  EC37  F01E         	call	___fldiv	;wreg free
 13614  005F08  C087  F0C8         	movff	?___fldiv,_calculate_pulse_length$5911
 13615  005F0C  C088  F0C9         	movff	?___fldiv+1,_calculate_pulse_length$5911+1
 13616  005F10  C089  F0CA         	movff	?___fldiv+2,_calculate_pulse_length$5911+2
 13617  005F14  C08A  F0CB         	movff	?___fldiv+3,_calculate_pulse_length$5911+3
 13618                           
 13619                           ;arpeggio.c: 157: double s_tick = 1.0 / ((BPM * PPQN) / 60.0);
 13620  005F18  0E00               	movlw	0
 13621  005F1A  0100               	movlb	0	; () banked
 13622  005F1C  6F87               	movwf	___fldiv@b& (0+255),b
 13623  005F1E  0E00               	movlw	0
 13624  005F20  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 13625  005F22  0E80               	movlw	128
 13626  005F24  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 13627  005F26  0E3F               	movlw	63
 13628  005F28  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 13629  005F2A  C0C8  F08B         	movff	_calculate_pulse_length$5911,___fldiv@a
 13630  005F2E  C0C9  F08C         	movff	_calculate_pulse_length$5911+1,___fldiv@a+1
 13631  005F32  C0CA  F08D         	movff	_calculate_pulse_length$5911+2,___fldiv@a+2
 13632  005F36  C0CB  F08E         	movff	_calculate_pulse_length$5911+3,___fldiv@a+3
 13633  005F3A  EC37  F01E         	call	___fldiv	;wreg free
 13634  005F3E  C087  F0C4         	movff	?___fldiv,calculate_pulse_length@s_tick
 13635  005F42  C088  F0C5         	movff	?___fldiv+1,calculate_pulse_length@s_tick+1
 13636  005F46  C089  F0C6         	movff	?___fldiv+2,calculate_pulse_length@s_tick+2
 13637  005F4A  C08A  F0C7         	movff	?___fldiv+3,calculate_pulse_length@s_tick+3
 13638                           
 13639                           ;arpeggio.c: 158: return (unsigned short) ((65535.0 - (s_tick * 20000000.0) / ( 4.0 * PR
      +                          ESCALER)) + 0.5);
 13640  005F4E  0E80               	movlw	128
 13641  005F50  0100               	movlb	0	; () banked
 13642  005F52  6FA8               	movwf	___fladd@a& (0+255),b
 13643  005F54  0EFF               	movlw	255
 13644  005F56  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 13645  005F58  0E7F               	movlw	127
 13646  005F5A  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 13647  005F5C  0E47               	movlw	71
 13648  005F5E  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 13649  005F60  0E00               	movlw	0
 13650  005F62  6F72               	movwf	___flmul@a& (0+255),b
 13651  005F64  0E00               	movlw	0
 13652  005F66  6F73               	movwf	(___flmul@a+1)& (0+255),b
 13653  005F68  0E80               	movlw	128
 13654  005F6A  6F74               	movwf	(___flmul@a+2)& (0+255),b
 13655  005F6C  0E40               	movlw	64
 13656  005F6E  6F75               	movwf	(___flmul@a+3)& (0+255),b
 13657  005F70  0101               	movlb	1	; () banked
 13658  005F72  51F8               	movf	_PRESCALER& (0+255),w,b
 13659  005F74  0100               	movlb	0	; () banked
 13660  005F76  6F60               	movwf	___xxtofl@val& (0+255),b
 13661  005F78  6B61               	clrf	(___xxtofl@val+1)& (0+255),b
 13662  005F7A  6B62               	clrf	(___xxtofl@val+2)& (0+255),b
 13663  005F7C  6B63               	clrf	(___xxtofl@val+3)& (0+255),b
 13664  005F7E  0E00               	movlw	0
 13665  005F80  EC14  F030         	call	___xxtofl
 13666  005F84  C060  F06E         	movff	?___xxtofl,___flmul@b
 13667  005F88  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 13668  005F8C  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 13669  005F90  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 13670  005F94  EC0C  F018         	call	___flmul	;wreg free
 13671  005F98  C06E  F08B         	movff	?___flmul,___fldiv@a
 13672  005F9C  C06F  F08C         	movff	?___flmul+1,___fldiv@a+1
 13673  005FA0  C070  F08D         	movff	?___flmul+2,___fldiv@a+2
 13674  005FA4  C071  F08E         	movff	?___flmul+3,___fldiv@a+3
 13675  005FA8  0E80               	movlw	128
 13676  005FAA  0100               	movlb	0	; () banked
 13677  005FAC  6F72               	movwf	___flmul@a& (0+255),b
 13678  005FAE  0E96               	movlw	150
 13679  005FB0  6F73               	movwf	(___flmul@a+1)& (0+255),b
 13680  005FB2  0E98               	movlw	152
 13681  005FB4  6F74               	movwf	(___flmul@a+2)& (0+255),b
 13682  005FB6  0E4B               	movlw	75
 13683  005FB8  6F75               	movwf	(___flmul@a+3)& (0+255),b
 13684  005FBA  C0C4  F06E         	movff	calculate_pulse_length@s_tick,___flmul@b
 13685  005FBE  C0C5  F06F         	movff	calculate_pulse_length@s_tick+1,___flmul@b+1
 13686  005FC2  C0C6  F070         	movff	calculate_pulse_length@s_tick+2,___flmul@b+2
 13687  005FC6  C0C7  F071         	movff	calculate_pulse_length@s_tick+3,___flmul@b+3
 13688  005FCA  EC0C  F018         	call	___flmul	;wreg free
 13689  005FCE  C06E  F087         	movff	?___flmul,___fldiv@b
 13690  005FD2  C06F  F088         	movff	?___flmul+1,___fldiv@b+1
 13691  005FD6  C070  F089         	movff	?___flmul+2,___fldiv@b+2
 13692  005FDA  C071  F08A         	movff	?___flmul+3,___fldiv@b+3
 13693  005FDE  EC37  F01E         	call	___fldiv	;wreg free
 13694  005FE2  C087  F0A0         	movff	?___fldiv,___flneg@f1
 13695  005FE6  C088  F0A1         	movff	?___fldiv+1,___flneg@f1+1
 13696  005FEA  C089  F0A2         	movff	?___fldiv+2,___flneg@f1+2
 13697  005FEE  C08A  F0A3         	movff	?___fldiv+3,___flneg@f1+3
 13698  005FF2  ECFD  F04B         	call	___flneg	;wreg free
 13699  005FF6  C0A0  F0A4         	movff	?___flneg,___fladd@b
 13700  005FFA  C0A1  F0A5         	movff	?___flneg+1,___fladd@b+1
 13701  005FFE  C0A2  F0A6         	movff	?___flneg+2,___fladd@b+2
 13702  006002  C0A3  F0A7         	movff	?___flneg+3,___fladd@b+3
 13703  006006  ECB5  F019         	call	___fladd	;wreg free
 13704  00600A  C0A4  F0B8         	movff	?___fladd,___fltol@f1
 13705  00600E  C0A5  F0B9         	movff	?___fladd+1,___fltol@f1+1
 13706  006012  C0A6  F0BA         	movff	?___fladd+2,___fltol@f1+2
 13707  006016  C0A7  F0BB         	movff	?___fladd+3,___fltol@f1+3
 13708  00601A  ECF3  F037         	call	___fltol	;wreg free
 13709  00601E  C0B8  F0C2         	movff	?___fltol,?_calculate_pulse_length
 13710  006022  C0B9  F0C3         	movff	?___fltol+1,?_calculate_pulse_length+1
 13711  006026  0012               	return	
 13712  006028                     __end_of_calculate_pulse_length:
 13713                           	opt stack 0
 13714                           tblptru	equ	0xFF8
 13715                           tblptrh	equ	0xFF7
 13716                           tblptrl	equ	0xFF6
 13717                           tablat	equ	0xFF5
 13718                           prodh	equ	0xFF4
 13719                           prodl	equ	0xFF3
 13720                           intcon	equ	0xFF2
 13721                           intcon2	equ	0xFF1
 13722                           postinc0	equ	0xFEE
 13723                           wreg	equ	0xFE8
 13724                           postinc1	equ	0xFE6
 13725                           indf2	equ	0xFDF
 13726                           postinc2	equ	0xFDE
 13727                           postdec2	equ	0xFDD
 13728                           fsr2h	equ	0xFDA
 13729                           fsr2l	equ	0xFD9
 13730                           status	equ	0xFD8
 13731                           
 13732 ;; *************** function _exitLoad *****************
 13733 ;; Defined at:
 13734 ;;		line 315 in file "menu.c"
 13735 ;; Parameters:    Size  Location     Type
 13736 ;;		None
 13737 ;; Auto vars:     Size  Location     Type
 13738 ;;		None
 13739 ;; Return value:  Size  Location     Type
 13740 ;;                  1    wreg      void 
 13741 ;; Registers used:
 13742 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 13743 ;; Tracked objects:
 13744 ;;		On entry : 0/0
 13745 ;;		On exit  : 0/0
 13746 ;;		Unchanged: 0/0
 13747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13750 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13751 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13752 ;;Total ram usage:        2 bytes
 13753 ;; Hardware stack levels used:    1
 13754 ;; Hardware stack levels required when called:    9
 13755 ;; This function calls:
 13756 ;;		_Lcd_Print_String
 13757 ;;		_clear_row1
 13758 ;; This function is called by:
 13759 ;;		_Function_G_2
 13760 ;; This function uses a non-reentrant model
 13761 ;;
 13762                           
 13763                           	psect	text32
 13764  00967A                     __ptext32:
 13765                           	opt stack 0
 13766  00967A                     _exitLoad:
 13767                           	opt stack 18
 13768                           
 13769                           ;menu.c: 317: while(encoder_click == 0);
 13770                           
 13771                           ;incstack = 0
 13772  00967A  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 13773  00967C  D7FE               	goto	_exitLoad
 13774                           
 13775                           ;menu.c: 323: clear_row1();
 13776  00967E  EC6C  F04C         	call	_clear_row1	;wreg free
 13777                           
 13778                           ;menu.c: 324: Lcd_Print_String("Settings Loaded!");
 13779  009682  0E75               	movlw	low STR_22
 13780  009684  0100               	movlb	0	; () banked
 13781  009686  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 13782  009688  0EFD               	movlw	high STR_22
 13783  00968A  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 13784  00968C  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 13785                           
 13786                           ;menu.c: 325: _delay((unsigned long)((500)*(20000000/4000.0)));
 13787  009690  0E0D               	movlw	13
 13788  009692  0100               	movlb	0	; () banked
 13789  009694  6F6F               	movwf	(??_exitLoad+1)& (0+255),b
 13790  009696  0EAF               	movlw	175
 13791  009698  6F6E               	movwf	??_exitLoad& (0+255),b
 13792  00969A  0EB6               	movlw	182
 13793  00969C                     u67607:
 13794  00969C  2EE8               	decfsz	wreg,f,c
 13795  00969E  D7FE               	bra	u67607
 13796  0096A0  2F6E               	decfsz	??_exitLoad& (0+255),f,b
 13797  0096A2  D7FC               	bra	u67607
 13798  0096A4  2F6F               	decfsz	(??_exitLoad+1)& (0+255),f,b
 13799  0096A6  D7FA               	bra	u67607
 13800  0096A8  F000               	nop	
 13801                           
 13802                           ;menu.c: 326: which_screen = MAIN_MENU;
 13803  0096AA  0E02               	movlw	2
 13804  0096AC  6E4E               	movwf	_which_screen,c
 13805                           
 13806                           ;menu.c: 327: lcd_print_once = 0;
 13807  0096AE  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13808                           
 13809                           ;menu.c: 328: encoder_click = 0;
 13810  0096B0  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 13811  0096B2  0012               	return		;funcret
 13812  0096B4                     __end_of_exitLoad:
 13813                           	opt stack 0
 13814                           tblptru	equ	0xFF8
 13815                           tblptrh	equ	0xFF7
 13816                           tblptrl	equ	0xFF6
 13817                           tablat	equ	0xFF5
 13818                           prodh	equ	0xFF4
 13819                           prodl	equ	0xFF3
 13820                           intcon	equ	0xFF2
 13821                           intcon2	equ	0xFF1
 13822                           postinc0	equ	0xFEE
 13823                           wreg	equ	0xFE8
 13824                           postinc1	equ	0xFE6
 13825                           indf2	equ	0xFDF
 13826                           postinc2	equ	0xFDE
 13827                           postdec2	equ	0xFDD
 13828                           fsr2h	equ	0xFDA
 13829                           fsr2l	equ	0xFD9
 13830                           status	equ	0xFD8
 13831                           
 13832 ;; *************** function _Function_G_1 *****************
 13833 ;; Defined at:
 13834 ;;		line 1147 in file "menu.c"
 13835 ;; Parameters:    Size  Location     Type
 13836 ;;		None
 13837 ;; Auto vars:     Size  Location     Type
 13838 ;;		None
 13839 ;; Return value:  Size  Location     Type
 13840 ;;                  1    wreg      void 
 13841 ;; Registers used:
 13842 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13843 ;; Tracked objects:
 13844 ;;		On entry : 0/0
 13845 ;;		On exit  : 0/0
 13846 ;;		Unchanged: 0/0
 13847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13852 ;;Total ram usage:        0 bytes
 13853 ;; Hardware stack levels used:    1
 13854 ;; Hardware stack levels required when called:   16
 13855 ;; This function calls:
 13856 ;;		_Busy_eep
 13857 ;;		_Lcd_Print_String
 13858 ;;		_Write_b_eep
 13859 ;;		___lbmod
 13860 ;;		___wmul
 13861 ;;		_clear_row1
 13862 ;;		_clear_row2
 13863 ;;		_eepromExit
 13864 ;;		_exitSave
 13865 ;;		_saveToEEPROM
 13866 ;;		_un_block_code
 13867 ;; This function is called by:
 13868 ;;		_Function_G
 13869 ;; This function uses a non-reentrant model
 13870 ;;
 13871                           
 13872                           	psect	text33
 13873  007F2C                     __ptext33:
 13874                           	opt stack 0
 13875  007F2C                     _Function_G_1:
 13876                           	opt stack 12
 13877                           
 13878                           ;menu.c: 1149: which_screen = SAVES_MENU;
 13879                           
 13880                           ;incstack = 0
 13881  007F2C  0E17               	movlw	23
 13882  007F2E  6E4E               	movwf	_which_screen,c
 13883                           
 13884                           ;menu.c: 1150: encoder_click = 0;
 13885  007F30  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 13886                           
 13887                           ;menu.c: 1151: lcd_print_once = 0;
 13888  007F32  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13889                           
 13890                           ;menu.c: 1153: while(encoder_click == 0) {
 13891  007F34  D02C               	goto	l3750
 13892  007F36                     
 13893                           ;menu.c: 1157: un_block_code();
 13894  007F36  ECF4  F04C         	call	_un_block_code	;wreg free
 13895                           
 13896                           ;menu.c: 1159: if (lcd_print_once == 0) {
 13897  007F3A  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13898  007F3C  D027               	goto	l3752
 13899                           
 13900                           ;menu.c: 1160: clear_row1();
 13901  007F3E  EC6C  F04C         	call	_clear_row1	;wreg free
 13902                           
 13903                           ;menu.c: 1161: Lcd_Print_String("Save #:");
 13904  007F42  0EBB               	movlw	low STR_35
 13905  007F44  0100               	movlb	0	; () banked
 13906  007F46  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 13907  007F48  0EFF               	movlw	high STR_35
 13908  007F4A  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 13909  007F4C  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 13910                           
 13911                           ;menu.c: 1162: clear_row2();
 13912  007F50  EC58  F04C         	call	_clear_row2	;wreg free
 13913                           
 13914                           ;menu.c: 1163: Lcd_Print_String(LCD_STRINGS[(savesMenu.selector % savesMenu.number) + sa
      +                          vesMenu.address]);
 13915  007F54  0100               	movlb	0	; () banked
 13916  007F56  51E3               	movf	_savesMenu& (0+255),w,b
 13917  007F58  6EE6               	movwf	postinc1,c
 13918  007F5A  51E5               	movf	(_savesMenu+2)& (0+255),w,b
 13919  007F5C  6EE6               	movwf	postinc1,c
 13920  007F5E  ECA5  F041         	call	___lbmod	;wreg free
 13921  007F62  503E               	movf	btemp,w,c
 13922  007F64  0100               	movlb	0	; () banked
 13923  007F66  25E4               	addwf	(_savesMenu+1)& (0+255),w,b
 13924  007F68  6F60               	movwf	___wmul@multiplier& (0+255),b
 13925  007F6A  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 13926  007F6C  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 13927  007F6E  0E00               	movlw	0
 13928  007F70  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13929  007F72  0E11               	movlw	17
 13930  007F74  6F62               	movwf	___wmul@multiplicand& (0+255),b
 13931  007F76  EC80  F04C         	call	___wmul	;wreg free
 13932  007F7A  0E9E               	movlw	low _LCD_STRINGS
 13933  007F7C  0100               	movlb	0	; () banked
 13934  007F7E  2560               	addwf	?___wmul& (0+255),w,b
 13935  007F80  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 13936  007F82  0EF3               	movlw	high _LCD_STRINGS
 13937  007F84  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 13938  007F86  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 13939  007F88  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 13940  007F8C                     l3752:
 13941                           
 13942                           ;menu.c: 1164: }
 13943                           ;menu.c: 1165: lcd_print_once = 1;
 13944  007F8C  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 13945  007F8E                     l3750:
 13946  007F8E  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 13947  007F90  D7D2               	goto	l3751
 13948                           
 13949                           ;menu.c: 1166: }
 13950                           ;menu.c: 1168: if(savesMenu.selector == 4){eepromExit();}
 13951  007F92  0E04               	movlw	4
 13952  007F94  0100               	movlb	0	; () banked
 13953  007F96  19E5               	xorwf	(_savesMenu+2)& (0+255),w,b
 13954  007F98  A4D8               	btfss	status,2,c
 13955  007F9A  D003               	goto	l3754
 13956                           
 13957                           ; BSR set to: 0
 13958  007F9C  EC77  F04B         	call	_eepromExit	;wreg free
 13959  007FA0  D011               	goto	l3755
 13960  007FA2                     l3754:
 13961                           
 13962                           ;menu.c: 1169: else {
 13963                           ;menu.c: 1171: (Busy_eep(), Write_b_eep(0,(savesMenu.selector + 1)));
 13964  007FA2  EC4E  F04D         	call	_Busy_eep	;wreg free
 13965  007FA6  0E00               	movlw	0
 13966  007FA8  0100               	movlb	0	; () banked
 13967  007FAA  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 13968  007FAC  0E00               	movlw	0
 13969  007FAE  6F60               	movwf	Write_b_eep@badd& (0+255),b
 13970  007FB0  29E5               	incf	(_savesMenu+2)& (0+255),w,b
 13971  007FB2  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 13972  007FB4  ECC2  F04A         	call	_Write_b_eep	;wreg free
 13973                           
 13974                           ;menu.c: 1172: saveToEEPROM(savesMenu.selector + 1);
 13975  007FB8  0100               	movlb	0	; () banked
 13976  007FBA  29E5               	incf	(_savesMenu+2)& (0+255),w,b
 13977  007FBC  EC10  F028         	call	_saveToEEPROM
 13978                           
 13979                           ;menu.c: 1173: exitSave();
 13980  007FC0  EC5A  F04B         	call	_exitSave	;wreg free
 13981  007FC4                     l3755:
 13982                           
 13983                           ;menu.c: 1174: }
 13984                           ;menu.c: 1176: savesMenu.selector = 0;
 13985  007FC4  0E00               	movlw	0
 13986  007FC6  0100               	movlb	0	; () banked
 13987  007FC8  6FE5               	movwf	(_savesMenu+2)& (0+255),b
 13988                           
 13989                           ; BSR set to: 0
 13990  007FCA  0012               	return		;funcret
 13991  007FCC                     __end_of_Function_G_1:
 13992                           	opt stack 0
 13993                           tblptru	equ	0xFF8
 13994                           tblptrh	equ	0xFF7
 13995                           tblptrl	equ	0xFF6
 13996                           tablat	equ	0xFF5
 13997                           prodh	equ	0xFF4
 13998                           prodl	equ	0xFF3
 13999                           intcon	equ	0xFF2
 14000                           intcon2	equ	0xFF1
 14001                           postinc0	equ	0xFEE
 14002                           wreg	equ	0xFE8
 14003                           postinc1	equ	0xFE6
 14004                           indf2	equ	0xFDF
 14005                           postinc2	equ	0xFDE
 14006                           postdec2	equ	0xFDD
 14007                           fsr2h	equ	0xFDA
 14008                           fsr2l	equ	0xFD9
 14009                           status	equ	0xFD8
 14010                           
 14011 ;; *************** function _exitSave *****************
 14012 ;; Defined at:
 14013 ;;		line 295 in file "menu.c"
 14014 ;; Parameters:    Size  Location     Type
 14015 ;;		None
 14016 ;; Auto vars:     Size  Location     Type
 14017 ;;		None
 14018 ;; Return value:  Size  Location     Type
 14019 ;;                  1    wreg      void 
 14020 ;; Registers used:
 14021 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14022 ;; Tracked objects:
 14023 ;;		On entry : 0/0
 14024 ;;		On exit  : 0/0
 14025 ;;		Unchanged: 0/0
 14026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14029 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14030 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14031 ;;Total ram usage:        2 bytes
 14032 ;; Hardware stack levels used:    1
 14033 ;; Hardware stack levels required when called:    9
 14034 ;; This function calls:
 14035 ;;		_Lcd_Print_String
 14036 ;;		_clear_row1
 14037 ;; This function is called by:
 14038 ;;		_Function_G_1
 14039 ;; This function uses a non-reentrant model
 14040 ;;
 14041                           
 14042                           	psect	text34
 14043  0096B4                     __ptext34:
 14044                           	opt stack 0
 14045  0096B4                     _exitSave:
 14046                           	opt stack 18
 14047                           
 14048                           ;menu.c: 297: while(encoder_click == 0);
 14049                           
 14050                           ; BSR set to: 0
 14051                           ;incstack = 0
 14052  0096B4  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14053  0096B6  D7FE               	goto	_exitSave
 14054                           
 14055                           ;menu.c: 303: clear_row1();
 14056  0096B8  EC6C  F04C         	call	_clear_row1	;wreg free
 14057                           
 14058                           ;menu.c: 304: Lcd_Print_String("Settings Saved!");
 14059  0096BC  0EFD               	movlw	low STR_21
 14060  0096BE  0100               	movlb	0	; () banked
 14061  0096C0  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14062  0096C2  0EFD               	movlw	high STR_21
 14063  0096C4  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14064  0096C6  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 14065                           
 14066                           ;menu.c: 305: _delay((unsigned long)((500)*(20000000/4000.0)));
 14067  0096CA  0E0D               	movlw	13
 14068  0096CC  0100               	movlb	0	; () banked
 14069  0096CE  6F6F               	movwf	(??_exitSave+1)& (0+255),b
 14070  0096D0  0EAF               	movlw	175
 14071  0096D2  6F6E               	movwf	??_exitSave& (0+255),b
 14072  0096D4  0EB6               	movlw	182
 14073  0096D6                     u67617:
 14074  0096D6  2EE8               	decfsz	wreg,f,c
 14075  0096D8  D7FE               	bra	u67617
 14076  0096DA  2F6E               	decfsz	??_exitSave& (0+255),f,b
 14077  0096DC  D7FC               	bra	u67617
 14078  0096DE  2F6F               	decfsz	(??_exitSave+1)& (0+255),f,b
 14079  0096E0  D7FA               	bra	u67617
 14080  0096E2  F000               	nop	
 14081                           
 14082                           ;menu.c: 306: which_screen = MAIN_MENU;
 14083  0096E4  0E02               	movlw	2
 14084  0096E6  6E4E               	movwf	_which_screen,c
 14085                           
 14086                           ;menu.c: 307: lcd_print_once = 0;
 14087  0096E8  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14088                           
 14089                           ;menu.c: 308: encoder_click = 0;
 14090  0096EA  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14091  0096EC  0012               	return		;funcret
 14092  0096EE                     __end_of_exitSave:
 14093                           	opt stack 0
 14094                           tblptru	equ	0xFF8
 14095                           tblptrh	equ	0xFF7
 14096                           tblptrl	equ	0xFF6
 14097                           tablat	equ	0xFF5
 14098                           prodh	equ	0xFF4
 14099                           prodl	equ	0xFF3
 14100                           intcon	equ	0xFF2
 14101                           intcon2	equ	0xFF1
 14102                           postinc0	equ	0xFEE
 14103                           wreg	equ	0xFE8
 14104                           postinc1	equ	0xFE6
 14105                           indf2	equ	0xFDF
 14106                           postinc2	equ	0xFDE
 14107                           postdec2	equ	0xFDD
 14108                           fsr2h	equ	0xFDA
 14109                           fsr2l	equ	0xFD9
 14110                           status	equ	0xFD8
 14111                           
 14112 ;; *************** function _eepromExit *****************
 14113 ;; Defined at:
 14114 ;;		line 335 in file "menu.c"
 14115 ;; Parameters:    Size  Location     Type
 14116 ;;		None
 14117 ;; Auto vars:     Size  Location     Type
 14118 ;;		None
 14119 ;; Return value:  Size  Location     Type
 14120 ;;                  1    wreg      void 
 14121 ;; Registers used:
 14122 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 14123 ;; Tracked objects:
 14124 ;;		On entry : 0/0
 14125 ;;		On exit  : 0/0
 14126 ;;		Unchanged: 0/0
 14127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14130 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14131 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14132 ;;Total ram usage:        2 bytes
 14133 ;; Hardware stack levels used:    1
 14134 ;; Hardware stack levels required when called:    9
 14135 ;; This function calls:
 14136 ;;		_Lcd_Print_String
 14137 ;;		_clear_row1
 14138 ;; This function is called by:
 14139 ;;		_Function_G_1
 14140 ;;		_Function_G_2
 14141 ;;		_Function_G
 14142 ;; This function uses a non-reentrant model
 14143 ;;
 14144                           
 14145                           	psect	text35
 14146  0096EE                     __ptext35:
 14147                           	opt stack 0
 14148  0096EE                     _eepromExit:
 14149                           	opt stack 19
 14150                           
 14151                           ;menu.c: 337: while(encoder_click == 0);
 14152                           
 14153                           ;incstack = 0
 14154  0096EE  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14155  0096F0  D7FE               	goto	_eepromExit
 14156                           
 14157                           ;menu.c: 343: clear_row1();
 14158  0096F2  EC6C  F04C         	call	_clear_row1	;wreg free
 14159                           
 14160                           ;menu.c: 344: Lcd_Print_String("Exit EEPROM!");
 14161  0096F6  0E18               	movlw	low STR_23
 14162  0096F8  0100               	movlb	0	; () banked
 14163  0096FA  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14164  0096FC  0EFF               	movlw	high STR_23
 14165  0096FE  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14166  009700  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 14167                           
 14168                           ;menu.c: 345: _delay((unsigned long)((500)*(20000000/4000.0)));
 14169  009704  0E0D               	movlw	13
 14170  009706  0100               	movlb	0	; () banked
 14171  009708  6F6F               	movwf	(??_eepromExit+1)& (0+255),b
 14172  00970A  0EAF               	movlw	175
 14173  00970C  6F6E               	movwf	??_eepromExit& (0+255),b
 14174  00970E  0EB6               	movlw	182
 14175  009710                     u67627:
 14176  009710  2EE8               	decfsz	wreg,f,c
 14177  009712  D7FE               	bra	u67627
 14178  009714  2F6E               	decfsz	??_eepromExit& (0+255),f,b
 14179  009716  D7FC               	bra	u67627
 14180  009718  2F6F               	decfsz	(??_eepromExit+1)& (0+255),f,b
 14181  00971A  D7FA               	bra	u67627
 14182  00971C  F000               	nop	
 14183                           
 14184                           ;menu.c: 346: which_screen = MAIN_MENU;
 14185  00971E  0E02               	movlw	2
 14186  009720  6E4E               	movwf	_which_screen,c
 14187                           
 14188                           ;menu.c: 347: lcd_print_once = 0;
 14189  009722  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14190                           
 14191                           ;menu.c: 348: encoder_click = 0;
 14192  009724  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14193  009726  0012               	return		;funcret
 14194  009728                     __end_of_eepromExit:
 14195                           	opt stack 0
 14196                           tblptru	equ	0xFF8
 14197                           tblptrh	equ	0xFF7
 14198                           tblptrl	equ	0xFF6
 14199                           tablat	equ	0xFF5
 14200                           prodh	equ	0xFF4
 14201                           prodl	equ	0xFF3
 14202                           intcon	equ	0xFF2
 14203                           intcon2	equ	0xFF1
 14204                           postinc0	equ	0xFEE
 14205                           wreg	equ	0xFE8
 14206                           postinc1	equ	0xFE6
 14207                           indf2	equ	0xFDF
 14208                           postinc2	equ	0xFDE
 14209                           postdec2	equ	0xFDD
 14210                           fsr2h	equ	0xFDA
 14211                           fsr2l	equ	0xFD9
 14212                           status	equ	0xFD8
 14213                           
 14214 ;; *************** function _Function_F *****************
 14215 ;; Defined at:
 14216 ;;		line 1111 in file "menu.c"
 14217 ;; Parameters:    Size  Location     Type
 14218 ;;		None
 14219 ;; Auto vars:     Size  Location     Type
 14220 ;;		None
 14221 ;; Return value:  Size  Location     Type
 14222 ;;                  1    wreg      void 
 14223 ;; Registers used:
 14224 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14225 ;; Tracked objects:
 14226 ;;		On entry : 0/0
 14227 ;;		On exit  : 0/0
 14228 ;;		Unchanged: 0/0
 14229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14231 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14233 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14234 ;;Total ram usage:        0 bytes
 14235 ;; Hardware stack levels used:    1
 14236 ;; Hardware stack levels required when called:   16
 14237 ;; This function calls:
 14238 ;;		_Lcd_Print_String
 14239 ;;		_Lcd_Set_Cursor
 14240 ;;		_clear_row2
 14241 ;;		_int2string
 14242 ;;		_programChange
 14243 ;;		_un_block_code
 14244 ;; This function is called by:
 14245 ;;		_menu_lcd
 14246 ;; This function uses a non-reentrant model
 14247 ;;
 14248                           
 14249                           	psect	text36
 14250  008DDA                     __ptext36:
 14251                           	opt stack 0
 14252  008DDA                     _Function_F:
 14253                           	opt stack 13
 14254                           
 14255                           ;menu.c: 1113: which_screen = PROGRAM_CHANGE_MENU;
 14256                           
 14257                           ;incstack = 0
 14258  008DDA  0E08               	movlw	8
 14259  008DDC  6E4E               	movwf	_which_screen,c
 14260                           
 14261                           ;menu.c: 1114: lcd_print_once = 0;
 14262  008DDE  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14263                           
 14264                           ;menu.c: 1116: print_row_2_once = 0;
 14265  008DE0  9005               	bcf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 14266                           
 14267                           ;menu.c: 1118: programChangeMenu.selector = patch_number;
 14268  008DE2  C0F4  F146         	movff	_patch_number,_programChangeMenu+2
 14269                           
 14270                           ;menu.c: 1120: while(encoder_click == 0) {
 14271  008DE6  D024               	goto	l3745
 14272  008DE8                     
 14273                           ;menu.c: 1124: un_block_code();
 14274  008DE8  ECF4  F04C         	call	_un_block_code	;wreg free
 14275                           
 14276                           ;menu.c: 1126: if (lcd_print_once == 0) {
 14277  008DEC  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14278  008DEE  D009               	goto	l3744
 14279                           
 14280                           ;menu.c: 1127: clear_row2();
 14281  008DF0  EC58  F04C         	call	_clear_row2	;wreg free
 14282                           
 14283                           ;menu.c: 1128: Lcd_Print_String("Program #: ");
 14284  008DF4  0E4C               	movlw	low STR_34
 14285  008DF6  0100               	movlb	0	; () banked
 14286  008DF8  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14287  008DFA  0EFF               	movlw	high STR_34
 14288  008DFC  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14289  008DFE  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 14290  008E02                     l3744:
 14291                           
 14292                           ;menu.c: 1129: }
 14293                           ;menu.c: 1130: lcd_print_once = 1;
 14294  008E02  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14295                           
 14296                           ;menu.c: 1133: if(print_row_2_once == 0){
 14297  008E04  B005               	btfsc	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 14298  008E06  D014               	goto	l3745
 14299                           
 14300                           ;menu.c: 1134: int2string(programChangeMenu.selector);
 14301  008E08  C146  F060         	movff	_programChangeMenu+2,int2string@number
 14302  008E0C  0100               	movlb	0	; () banked
 14303  008E0E  6B61               	clrf	(int2string@number+1)& (0+255),b
 14304  008E10  EC42  F03B         	call	_int2string	;wreg free
 14305                           
 14306                           ;menu.c: 1135: Lcd_Set_Cursor(2,13);
 14307  008E14  0E0D               	movlw	13
 14308  008E16  0100               	movlb	0	; () banked
 14309  008E18  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 14310  008E1A  0E02               	movlw	2
 14311  008E1C  EC8A  F048         	call	_Lcd_Set_Cursor
 14312                           
 14313                           ;menu.c: 1136: Lcd_Print_String(string2display);
 14314  008E20  0E94               	movlw	low _string2display
 14315  008E22  0100               	movlb	0	; () banked
 14316  008E24  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14317  008E26  0E01               	movlw	high _string2display
 14318  008E28  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14319  008E2A  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 14320                           
 14321                           ;menu.c: 1137: print_row_2_once = 1;
 14322  008E2E  8005               	bsf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 14323  008E30                     l3745:
 14324  008E30  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14325  008E32  D7DA               	goto	l3743
 14326                           
 14327                           ;menu.c: 1138: }
 14328                           ;menu.c: 1139: }
 14329                           ;menu.c: 1141: patch_number = programChangeMenu.selector;
 14330  008E34  C146  F0F4         	movff	_programChangeMenu+2,_patch_number
 14331                           
 14332                           ;menu.c: 1143: programChange(channel, programChangeMenu.selector, programChangeMenu.sele
      +                          ctor);
 14333  008E38  C146  F060         	movff	_programChangeMenu+2,programChange@data1
 14334  008E3C  C146  F061         	movff	_programChangeMenu+2,programChange@data2
 14335  008E40  503D               	movf	_channel,w,c
 14336  008E42  EC58  F04A         	call	_programChange
 14337  008E46  0012               	return		;funcret
 14338  008E48                     __end_of_Function_F:
 14339                           	opt stack 0
 14340                           tblptru	equ	0xFF8
 14341                           tblptrh	equ	0xFF7
 14342                           tblptrl	equ	0xFF6
 14343                           tablat	equ	0xFF5
 14344                           prodh	equ	0xFF4
 14345                           prodl	equ	0xFF3
 14346                           intcon	equ	0xFF2
 14347                           intcon2	equ	0xFF1
 14348                           postinc0	equ	0xFEE
 14349                           wreg	equ	0xFE8
 14350                           postinc1	equ	0xFE6
 14351                           indf2	equ	0xFDF
 14352                           postinc2	equ	0xFDE
 14353                           postdec2	equ	0xFDD
 14354                           fsr2h	equ	0xFDA
 14355                           fsr2l	equ	0xFD9
 14356                           status	equ	0xFD8
 14357                           
 14358 ;; *************** function _programChange *****************
 14359 ;; Defined at:
 14360 ;;		line 225 in file "midi.c"
 14361 ;; Parameters:    Size  Location     Type
 14362 ;;  channel         1    wreg     unsigned char 
 14363 ;;  data1           1    0[BANK0 ] unsigned char 
 14364 ;;  data2           1    1[BANK0 ] unsigned char 
 14365 ;; Auto vars:     Size  Location     Type
 14366 ;;  channel         1    2[BANK0 ] unsigned char 
 14367 ;; Return value:  Size  Location     Type
 14368 ;;                  1    wreg      void 
 14369 ;; Registers used:
 14370 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
 14371 ;; Tracked objects:
 14372 ;;		On entry : 0/0
 14373 ;;		On exit  : 0/0
 14374 ;;		Unchanged: 0/0
 14375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14376 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14377 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14379 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14380 ;;Total ram usage:        3 bytes
 14381 ;; Hardware stack levels used:    1
 14382 ;; Hardware stack levels required when called:    8
 14383 ;; This function calls:
 14384 ;;		___lbmod
 14385 ;;		_key_press_release_note_off
 14386 ;;		_sendOut
 14387 ;;		_sendUSB
 14388 ;; This function is called by:
 14389 ;;		_Function_F
 14390 ;; This function uses a non-reentrant model
 14391 ;;
 14392                           
 14393                           	psect	text37
 14394  0094B0                     __ptext37:
 14395                           	opt stack 0
 14396  0094B0                     _programChange:
 14397                           	opt stack 20
 14398                           
 14399                           ;incstack = 0
 14400                           ;programChange@channel stored from wreg
 14401  0094B0  0100               	movlb	0	; () banked
 14402  0094B2  6F62               	movwf	programChange@channel& (0+255),b
 14403                           
 14404                           ;midi.c: 229: if((note_off_was_sent == 0) && ((TIMER_OVERFLOWS % NOTE_LENGTH_PULSES) == 
      +                          0)){
 14405  0094B4  B052               	btfsc	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 14406  0094B6  D00A               	goto	l504
 14407  0094B8  504C               	movf	_NOTE_LENGTH_PULSES,w,c
 14408  0094BA  6EE6               	movwf	postinc1,c
 14409  0094BC  502D               	movf	_TIMER_OVERFLOWS,w,c
 14410  0094BE  6EE6               	movwf	postinc1,c
 14411  0094C0  ECA5  F041         	call	___lbmod	;wreg free
 14412  0094C4  503E               	movf	btemp,w,c
 14413  0094C6  B4D8               	btfsc	status,2,c
 14414                           
 14415                           ;midi.c: 231: key_press_release_note_off();
 14416  0094C8  ECA7  F02E         	call	_key_press_release_note_off	;wreg free
 14417  0094CC                     l504:
 14418                           
 14419                           ;midi.c: 232: }
 14420                           ;midi.c: 234: statusByte = channel | program_change;
 14421  0094CC  0100               	movlb	0	; () banked
 14422  0094CE  5162               	movf	programChange@channel& (0+255),w,b
 14423  0094D0  09C0               	iorlw	192
 14424  0094D2  6E3C               	movwf	_statusByte,c
 14425                           
 14426                           ; BSR set to: 0
 14427                           ;midi.c: 237: sendUSB(statusByte, data1, data2);
 14428  0094D4  5161               	movf	programChange@data2& (0+255),w,b
 14429  0094D6  6EE6               	movwf	postinc1,c
 14430  0094D8  5160               	movf	programChange@data1& (0+255),w,b
 14431  0094DA  6EE6               	movwf	postinc1,c
 14432  0094DC  503C               	movf	_statusByte,w,c
 14433  0094DE  6EE6               	movwf	postinc1,c
 14434  0094E0  EC12  F037         	call	_sendUSB	;wreg free
 14435                           
 14436                           ;midi.c: 240: sendOut(statusByte, data1, data2);
 14437  0094E4  0100               	movlb	0	; () banked
 14438  0094E6  5161               	movf	programChange@data2& (0+255),w,b
 14439  0094E8  6EE6               	movwf	postinc1,c
 14440  0094EA  5160               	movf	programChange@data1& (0+255),w,b
 14441  0094EC  6EE6               	movwf	postinc1,c
 14442  0094EE  503C               	movf	_statusByte,w,c
 14443  0094F0  6EE6               	movwf	postinc1,c
 14444  0094F2  EC9B  F036         	call	_sendOut	;wreg free
 14445  0094F6  0012               	return		;funcret
 14446  0094F8                     __end_of_programChange:
 14447                           	opt stack 0
 14448                           tblptru	equ	0xFF8
 14449                           tblptrh	equ	0xFF7
 14450                           tblptrl	equ	0xFF6
 14451                           tablat	equ	0xFF5
 14452                           prodh	equ	0xFF4
 14453                           prodl	equ	0xFF3
 14454                           intcon	equ	0xFF2
 14455                           intcon2	equ	0xFF1
 14456                           postinc0	equ	0xFEE
 14457                           wreg	equ	0xFE8
 14458                           postinc1	equ	0xFE6
 14459                           indf2	equ	0xFDF
 14460                           postinc2	equ	0xFDE
 14461                           postdec2	equ	0xFDD
 14462                           fsr2h	equ	0xFDA
 14463                           fsr2l	equ	0xFD9
 14464                           status	equ	0xFD8
 14465                           
 14466 ;; *************** function _Function_E *****************
 14467 ;; Defined at:
 14468 ;;		line 1088 in file "menu.c"
 14469 ;; Parameters:    Size  Location     Type
 14470 ;;		None
 14471 ;; Auto vars:     Size  Location     Type
 14472 ;;		None
 14473 ;; Return value:  Size  Location     Type
 14474 ;;                  1    wreg      void 
 14475 ;; Registers used:
 14476 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14477 ;; Tracked objects:
 14478 ;;		On entry : 0/0
 14479 ;;		On exit  : 0/0
 14480 ;;		Unchanged: 0/0
 14481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14486 ;;Total ram usage:        0 bytes
 14487 ;; Hardware stack levels used:    1
 14488 ;; Hardware stack levels required when called:   17
 14489 ;; This function calls:
 14490 ;;		_Function_E_1
 14491 ;;		_Function_E_2
 14492 ;;		_Lcd_Print_String
 14493 ;;		___lbmod
 14494 ;;		___wmul
 14495 ;;		_clear_row2
 14496 ;;		_un_block_code
 14497 ;; This function is called by:
 14498 ;;		_menu_lcd
 14499 ;; This function uses a non-reentrant model
 14500 ;;
 14501                           
 14502                           	psect	text38
 14503  008E48                     __ptext38:
 14504                           	opt stack 0
 14505  008E48                     _Function_E:
 14506                           	opt stack 12
 14507                           
 14508                           ;menu.c: 1090: which_screen = MIDI_CHANNEL_MENU;
 14509                           
 14510                           ;incstack = 0
 14511  008E48  0E07               	movlw	7
 14512  008E4A  6E4E               	movwf	_which_screen,c
 14513                           
 14514                           ;menu.c: 1091: lcd_print_once = 0;
 14515  008E4C  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14516                           
 14517                           ;menu.c: 1093: while(encoder_click == 0) {
 14518  008E4E  D024               	goto	l3733
 14519  008E50                     
 14520                           ;menu.c: 1097: un_block_code();
 14521  008E50  ECF4  F04C         	call	_un_block_code	;wreg free
 14522                           
 14523                           ;menu.c: 1099: if (lcd_print_once == 0) {
 14524  008E54  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14525  008E56  D01F               	goto	l3735
 14526                           
 14527                           ;menu.c: 1100: clear_row2();
 14528  008E58  EC58  F04C         	call	_clear_row2	;wreg free
 14529                           
 14530                           ;menu.c: 1101: Lcd_Print_String(LCD_STRINGS[(midiChannelMenu.selector % midiChannelMenu.
      +                          number) + midiChannelMenu.address]);
 14531  008E5C  0101               	movlb	1	; () banked
 14532  008E5E  5147               	movf	_midiChannelMenu& (0+255),w,b
 14533  008E60  6EE6               	movwf	postinc1,c
 14534  008E62  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 14535  008E64  6EE6               	movwf	postinc1,c
 14536  008E66  ECA5  F041         	call	___lbmod	;wreg free
 14537  008E6A  503E               	movf	btemp,w,c
 14538  008E6C  0101               	movlb	1	; () banked
 14539  008E6E  2548               	addwf	(_midiChannelMenu+1)& (0+255),w,b
 14540  008E70  0100               	movlb	0	; () banked
 14541  008E72  6F60               	movwf	___wmul@multiplier& (0+255),b
 14542  008E74  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 14543  008E76  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 14544  008E78  0E00               	movlw	0
 14545  008E7A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14546  008E7C  0E11               	movlw	17
 14547  008E7E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14548  008E80  EC80  F04C         	call	___wmul	;wreg free
 14549  008E84  0E9E               	movlw	low _LCD_STRINGS
 14550  008E86  0100               	movlb	0	; () banked
 14551  008E88  2560               	addwf	?___wmul& (0+255),w,b
 14552  008E8A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14553  008E8C  0EF3               	movlw	high _LCD_STRINGS
 14554  008E8E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 14555  008E90  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14556  008E92  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 14557  008E96                     l3735:
 14558                           
 14559                           ;menu.c: 1102: }
 14560                           ;menu.c: 1103: lcd_print_once = 1;
 14561  008E96  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14562  008E98                     l3733:
 14563  008E98  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14564  008E9A  D7DA               	goto	l3734
 14565                           
 14566                           ;menu.c: 1104: }
 14567                           ;menu.c: 1106: if(midiChannelMenu.selector == 0) {Function_E_1();}
 14568  008E9C  0101               	movlb	1	; () banked
 14569  008E9E  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 14570  008EA0  B4D8               	btfsc	status,2,c
 14571                           
 14572                           ; BSR set to: 1
 14573  008EA2  ECC0  F049         	call	_Function_E_1	;wreg free
 14574                           
 14575                           ;menu.c: 1107: if(midiChannelMenu.selector == 1) {Function_E_2();}
 14576  008EA6  0101               	movlb	1	; () banked
 14577  008EA8  0549               	decf	(_midiChannelMenu+2)& (0+255),w,b
 14578  008EAA  A4D8               	btfss	status,2,c
 14579  008EAC  0012               	return	
 14580                           
 14581                           ; BSR set to: 1
 14582  008EAE  EC98  F049         	call	_Function_E_2	;wreg free
 14583  008EB2  0012               	return	
 14584  008EB4                     __end_of_Function_E:
 14585                           	opt stack 0
 14586                           tblptru	equ	0xFF8
 14587                           tblptrh	equ	0xFF7
 14588                           tblptrl	equ	0xFF6
 14589                           tablat	equ	0xFF5
 14590                           prodh	equ	0xFF4
 14591                           prodl	equ	0xFF3
 14592                           intcon	equ	0xFF2
 14593                           intcon2	equ	0xFF1
 14594                           postinc0	equ	0xFEE
 14595                           wreg	equ	0xFE8
 14596                           postinc1	equ	0xFE6
 14597                           indf2	equ	0xFDF
 14598                           postinc2	equ	0xFDE
 14599                           postdec2	equ	0xFDD
 14600                           fsr2h	equ	0xFDA
 14601                           fsr2l	equ	0xFD9
 14602                           status	equ	0xFD8
 14603                           
 14604 ;; *************** function _Function_E_2 *****************
 14605 ;; Defined at:
 14606 ;;		line 1062 in file "menu.c"
 14607 ;; Parameters:    Size  Location     Type
 14608 ;;		None
 14609 ;; Auto vars:     Size  Location     Type
 14610 ;;		None
 14611 ;; Return value:  Size  Location     Type
 14612 ;;                  1    wreg      void 
 14613 ;; Registers used:
 14614 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14615 ;; Tracked objects:
 14616 ;;		On entry : 0/0
 14617 ;;		On exit  : 0/0
 14618 ;;		Unchanged: 0/0
 14619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14624 ;;Total ram usage:        0 bytes
 14625 ;; Hardware stack levels used:    1
 14626 ;; Hardware stack levels required when called:   16
 14627 ;; This function calls:
 14628 ;;		_Lcd_Print_String
 14629 ;;		_Lcd_Set_Cursor
 14630 ;;		_int2string
 14631 ;;		_un_block_code
 14632 ;; This function is called by:
 14633 ;;		_Function_E
 14634 ;; This function uses a non-reentrant model
 14635 ;;
 14636                           
 14637                           	psect	text39
 14638  009330                     __ptext39:
 14639                           	opt stack 0
 14640  009330                     _Function_E_2:
 14641                           	opt stack 12
 14642                           
 14643                           ;menu.c: 1064: which_screen = DRUM_CH_MENU;
 14644                           
 14645                           ;incstack = 0
 14646  009330  0E15               	movlw	21
 14647  009332  6E4E               	movwf	_which_screen,c
 14648                           
 14649                           ;menu.c: 1065: lcd_print_once = 0;
 14650  009334  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14651                           
 14652                           ;menu.c: 1066: encoder_click = 0;
 14653  009336  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14654                           
 14655                           ;menu.c: 1067: drumChannelMenu.selector = drumchannel;
 14656  009338  C051  F140         	movff	_drumchannel,_drumChannelMenu+2
 14657                           
 14658                           ;menu.c: 1069: while(encoder_click == 0) {
 14659  00933C  D01C               	goto	l3726
 14660  00933E                     
 14661                           ;menu.c: 1073: un_block_code();
 14662  00933E  ECF4  F04C         	call	_un_block_code	;wreg free
 14663                           
 14664                           ;menu.c: 1076: if (lcd_print_once == 0) {
 14665  009342  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14666  009344  D017               	goto	l3728
 14667                           
 14668                           ;menu.c: 1077: int2string((drumChannelMenu.selector) + 1);
 14669  009346  0E01               	movlw	1
 14670  009348  0101               	movlb	1	; () banked
 14671  00934A  2540               	addwf	(_drumChannelMenu+2)& (0+255),w,b
 14672  00934C  0100               	movlb	0	; () banked
 14673  00934E  6F60               	movwf	int2string@number& (0+255),b
 14674  009350  6B61               	clrf	(int2string@number+1)& (0+255),b
 14675  009352  0E00               	movlw	0
 14676  009354  2361               	addwfc	(int2string@number+1)& (0+255),f,b
 14677  009356  EC42  F03B         	call	_int2string	;wreg free
 14678                           
 14679                           ;menu.c: 1078: Lcd_Set_Cursor(2,13);
 14680  00935A  0E0D               	movlw	13
 14681  00935C  0100               	movlb	0	; () banked
 14682  00935E  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 14683  009360  0E02               	movlw	2
 14684  009362  EC8A  F048         	call	_Lcd_Set_Cursor
 14685                           
 14686                           ;menu.c: 1079: Lcd_Print_String(string2display);
 14687  009366  0E94               	movlw	low _string2display
 14688  009368  0100               	movlb	0	; () banked
 14689  00936A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14690  00936C  0E01               	movlw	high _string2display
 14691  00936E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14692  009370  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 14693  009374                     l3728:
 14694                           
 14695                           ;menu.c: 1080: }
 14696                           ;menu.c: 1081: lcd_print_once = 1;
 14697  009374  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14698  009376                     l3726:
 14699  009376  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14700  009378  D7E2               	goto	l3727
 14701                           
 14702                           ;menu.c: 1082: }
 14703                           ;menu.c: 1084: drumchannel = drumChannelMenu.selector;
 14704  00937A  C140  F051         	movff	_drumChannelMenu+2,_drumchannel
 14705  00937E  0012               	return		;funcret
 14706  009380                     __end_of_Function_E_2:
 14707                           	opt stack 0
 14708                           tblptru	equ	0xFF8
 14709                           tblptrh	equ	0xFF7
 14710                           tblptrl	equ	0xFF6
 14711                           tablat	equ	0xFF5
 14712                           prodh	equ	0xFF4
 14713                           prodl	equ	0xFF3
 14714                           intcon	equ	0xFF2
 14715                           intcon2	equ	0xFF1
 14716                           postinc0	equ	0xFEE
 14717                           wreg	equ	0xFE8
 14718                           postinc1	equ	0xFE6
 14719                           indf2	equ	0xFDF
 14720                           postinc2	equ	0xFDE
 14721                           postdec2	equ	0xFDD
 14722                           fsr2h	equ	0xFDA
 14723                           fsr2l	equ	0xFD9
 14724                           status	equ	0xFD8
 14725                           
 14726 ;; *************** function _Function_E_1 *****************
 14727 ;; Defined at:
 14728 ;;		line 1034 in file "menu.c"
 14729 ;; Parameters:    Size  Location     Type
 14730 ;;		None
 14731 ;; Auto vars:     Size  Location     Type
 14732 ;;		None
 14733 ;; Return value:  Size  Location     Type
 14734 ;;                  1    wreg      void 
 14735 ;; Registers used:
 14736 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14737 ;; Tracked objects:
 14738 ;;		On entry : 0/0
 14739 ;;		On exit  : 0/0
 14740 ;;		Unchanged: 0/0
 14741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14746 ;;Total ram usage:        0 bytes
 14747 ;; Hardware stack levels used:    1
 14748 ;; Hardware stack levels required when called:   16
 14749 ;; This function calls:
 14750 ;;		_Lcd_Print_String
 14751 ;;		_Lcd_Set_Cursor
 14752 ;;		_int2string
 14753 ;;		_un_block_code
 14754 ;; This function is called by:
 14755 ;;		_Function_E
 14756 ;; This function uses a non-reentrant model
 14757 ;;
 14758                           
 14759                           	psect	text40
 14760  009380                     __ptext40:
 14761                           	opt stack 0
 14762  009380                     _Function_E_1:
 14763                           	opt stack 12
 14764                           
 14765                           ;menu.c: 1036: which_screen = MAIN_CH_MENU;
 14766                           
 14767                           ;incstack = 0
 14768  009380  0E14               	movlw	20
 14769  009382  6E4E               	movwf	_which_screen,c
 14770                           
 14771                           ;menu.c: 1037: lcd_print_once = 0;
 14772  009384  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14773                           
 14774                           ;menu.c: 1038: encoder_click = 0;
 14775  009386  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 14776                           
 14777                           ;menu.c: 1039: mainChannelMenu.selector = channel;
 14778  009388  C03D  F143         	movff	_channel,_mainChannelMenu+2
 14779                           
 14780                           ;menu.c: 1041: while(encoder_click == 0) {
 14781  00938C  D01C               	goto	l3719
 14782  00938E                     
 14783                           ;menu.c: 1045: un_block_code();
 14784  00938E  ECF4  F04C         	call	_un_block_code	;wreg free
 14785                           
 14786                           ;menu.c: 1048: if (lcd_print_once == 0) {
 14787  009392  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14788  009394  D017               	goto	l3721
 14789                           
 14790                           ;menu.c: 1050: int2string((mainChannelMenu.selector) + 1);
 14791  009396  0E01               	movlw	1
 14792  009398  0101               	movlb	1	; () banked
 14793  00939A  2543               	addwf	(_mainChannelMenu+2)& (0+255),w,b
 14794  00939C  0100               	movlb	0	; () banked
 14795  00939E  6F60               	movwf	int2string@number& (0+255),b
 14796  0093A0  6B61               	clrf	(int2string@number+1)& (0+255),b
 14797  0093A2  0E00               	movlw	0
 14798  0093A4  2361               	addwfc	(int2string@number+1)& (0+255),f,b
 14799  0093A6  EC42  F03B         	call	_int2string	;wreg free
 14800                           
 14801                           ;menu.c: 1052: Lcd_Set_Cursor(2,13);
 14802  0093AA  0E0D               	movlw	13
 14803  0093AC  0100               	movlb	0	; () banked
 14804  0093AE  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 14805  0093B0  0E02               	movlw	2
 14806  0093B2  EC8A  F048         	call	_Lcd_Set_Cursor
 14807                           
 14808                           ;menu.c: 1053: Lcd_Print_String(string2display);
 14809  0093B6  0E94               	movlw	low _string2display
 14810  0093B8  0100               	movlb	0	; () banked
 14811  0093BA  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14812  0093BC  0E01               	movlw	high _string2display
 14813  0093BE  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14814  0093C0  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 14815  0093C4                     l3721:
 14816                           
 14817                           ;menu.c: 1054: }
 14818                           ;menu.c: 1055: lcd_print_once = 1;
 14819  0093C4  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14820  0093C6                     l3719:
 14821  0093C6  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14822  0093C8  D7E2               	goto	l3720
 14823                           
 14824                           ;menu.c: 1056: }
 14825                           ;menu.c: 1058: channel = mainChannelMenu.selector;
 14826  0093CA  C143  F03D         	movff	_mainChannelMenu+2,_channel
 14827  0093CE  0012               	return		;funcret
 14828  0093D0                     __end_of_Function_E_1:
 14829                           	opt stack 0
 14830                           tblptru	equ	0xFF8
 14831                           tblptrh	equ	0xFF7
 14832                           tblptrl	equ	0xFF6
 14833                           tablat	equ	0xFF5
 14834                           prodh	equ	0xFF4
 14835                           prodl	equ	0xFF3
 14836                           intcon	equ	0xFF2
 14837                           intcon2	equ	0xFF1
 14838                           postinc0	equ	0xFEE
 14839                           wreg	equ	0xFE8
 14840                           postinc1	equ	0xFE6
 14841                           indf2	equ	0xFDF
 14842                           postinc2	equ	0xFDE
 14843                           postdec2	equ	0xFDD
 14844                           fsr2h	equ	0xFDA
 14845                           fsr2l	equ	0xFD9
 14846                           status	equ	0xFD8
 14847                           
 14848 ;; *************** function _Function_D *****************
 14849 ;; Defined at:
 14850 ;;		line 1007 in file "menu.c"
 14851 ;; Parameters:    Size  Location     Type
 14852 ;;		None
 14853 ;; Auto vars:     Size  Location     Type
 14854 ;;		None
 14855 ;; Return value:  Size  Location     Type
 14856 ;;                  1    wreg      void 
 14857 ;; Registers used:
 14858 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14859 ;; Tracked objects:
 14860 ;;		On entry : 0/0
 14861 ;;		On exit  : 0/0
 14862 ;;		Unchanged: 0/0
 14863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14867 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14868 ;;Total ram usage:        0 bytes
 14869 ;; Hardware stack levels used:    1
 14870 ;; Hardware stack levels required when called:   17
 14871 ;; This function calls:
 14872 ;;		_Function_D_1
 14873 ;;		_Function_D_2
 14874 ;;		_Function_D_3
 14875 ;;		_Function_D_4
 14876 ;;		_Function_D_5
 14877 ;;		_Lcd_Print_String
 14878 ;;		___lbmod
 14879 ;;		___wmul
 14880 ;;		_clear_row2
 14881 ;;		_un_block_code
 14882 ;; This function is called by:
 14883 ;;		_menu_lcd
 14884 ;; This function uses a non-reentrant model
 14885 ;;
 14886                           
 14887                           	psect	text41
 14888  0082BA                     __ptext41:
 14889                           	opt stack 0
 14890  0082BA                     _Function_D:
 14891                           	opt stack 12
 14892                           
 14893                           ;menu.c: 1009: which_screen = POTENTIOMETER_MENU;
 14894                           
 14895                           ;incstack = 0
 14896  0082BA  0E06               	movlw	6
 14897  0082BC  6E4E               	movwf	_which_screen,c
 14898                           
 14899                           ;menu.c: 1010: lcd_print_once = 0;
 14900  0082BE  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14901                           
 14902                           ;menu.c: 1012: while(encoder_click == 0) {
 14903  0082C0  D024               	goto	l3707
 14904  0082C2                     
 14905                           ;menu.c: 1016: un_block_code();
 14906  0082C2  ECF4  F04C         	call	_un_block_code	;wreg free
 14907                           
 14908                           ;menu.c: 1018: if (lcd_print_once == 0) {
 14909  0082C6  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14910  0082C8  D01F               	goto	l3709
 14911                           
 14912                           ;menu.c: 1019: clear_row2();
 14913  0082CA  EC58  F04C         	call	_clear_row2	;wreg free
 14914                           
 14915                           ;menu.c: 1020: Lcd_Print_String(LCD_STRINGS[(potsMenu.selector % potsMenu.number) + pots
      +                          Menu.address]);
 14916  0082CE  0101               	movlb	1	; () banked
 14917  0082D0  5159               	movf	_potsMenu& (0+255),w,b
 14918  0082D2  6EE6               	movwf	postinc1,c
 14919  0082D4  515B               	movf	(_potsMenu+2)& (0+255),w,b
 14920  0082D6  6EE6               	movwf	postinc1,c
 14921  0082D8  ECA5  F041         	call	___lbmod	;wreg free
 14922  0082DC  503E               	movf	btemp,w,c
 14923  0082DE  0101               	movlb	1	; () banked
 14924  0082E0  255A               	addwf	(_potsMenu+1)& (0+255),w,b
 14925  0082E2  0100               	movlb	0	; () banked
 14926  0082E4  6F60               	movwf	___wmul@multiplier& (0+255),b
 14927  0082E6  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 14928  0082E8  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 14929  0082EA  0E00               	movlw	0
 14930  0082EC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 14931  0082EE  0E11               	movlw	17
 14932  0082F0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 14933  0082F2  EC80  F04C         	call	___wmul	;wreg free
 14934  0082F6  0E9E               	movlw	low _LCD_STRINGS
 14935  0082F8  0100               	movlb	0	; () banked
 14936  0082FA  2560               	addwf	?___wmul& (0+255),w,b
 14937  0082FC  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 14938  0082FE  0EF3               	movlw	high _LCD_STRINGS
 14939  008300  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 14940  008302  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 14941  008304  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 14942  008308                     l3709:
 14943                           
 14944                           ;menu.c: 1021: }
 14945                           ;menu.c: 1022: lcd_print_once = 1;
 14946  008308  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 14947  00830A                     l3707:
 14948  00830A  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 14949  00830C  D7DA               	goto	l3708
 14950                           
 14951                           ;menu.c: 1023: }
 14952                           ;menu.c: 1025: if(potsMenu.selector == 0) {Function_D_1();}
 14953  00830E  0101               	movlb	1	; () banked
 14954  008310  515B               	movf	(_potsMenu+2)& (0+255),w,b
 14955  008312  B4D8               	btfsc	status,2,c
 14956                           
 14957                           ; BSR set to: 1
 14958  008314  EC76  F042         	call	_Function_D_1	;wreg free
 14959                           
 14960                           ;menu.c: 1026: if(potsMenu.selector == 1) {Function_D_2();}
 14961  008318  0101               	movlb	1	; () banked
 14962  00831A  055B               	decf	(_potsMenu+2)& (0+255),w,b
 14963  00831C  B4D8               	btfsc	status,2,c
 14964                           
 14965                           ; BSR set to: 1
 14966  00831E  EC28  F048         	call	_Function_D_2	;wreg free
 14967                           
 14968                           ;menu.c: 1027: if(potsMenu.selector == 2) {Function_D_3();}
 14969  008322  0E02               	movlw	2
 14970  008324  0101               	movlb	1	; () banked
 14971  008326  195B               	xorwf	(_potsMenu+2)& (0+255),w,b
 14972  008328  B4D8               	btfsc	status,2,c
 14973                           
 14974                           ; BSR set to: 1
 14975  00832A  EC28  F045         	call	_Function_D_3	;wreg free
 14976                           
 14977                           ;menu.c: 1028: if(potsMenu.selector == 3) {Function_D_4();}
 14978  00832E  0E03               	movlw	3
 14979  008330  0101               	movlb	1	; () banked
 14980  008332  195B               	xorwf	(_potsMenu+2)& (0+255),w,b
 14981  008334  B4D8               	btfsc	status,2,c
 14982                           
 14983                           ; BSR set to: 1
 14984  008336  EC37  F044         	call	_Function_D_4	;wreg free
 14985                           
 14986                           ;menu.c: 1029: if(potsMenu.selector == 4) {Function_D_5();}
 14987  00833A  0E04               	movlw	4
 14988  00833C  0101               	movlb	1	; () banked
 14989  00833E  195B               	xorwf	(_potsMenu+2)& (0+255),w,b
 14990  008340  A4D8               	btfss	status,2,c
 14991  008342  0012               	return	
 14992                           
 14993                           ; BSR set to: 1
 14994  008344  ECFA  F043         	call	_Function_D_5	;wreg free
 14995  008348  0012               	return	
 14996  00834A                     __end_of_Function_D:
 14997                           	opt stack 0
 14998                           tblptru	equ	0xFF8
 14999                           tblptrh	equ	0xFF7
 15000                           tblptrl	equ	0xFF6
 15001                           tablat	equ	0xFF5
 15002                           prodh	equ	0xFF4
 15003                           prodl	equ	0xFF3
 15004                           intcon	equ	0xFF2
 15005                           intcon2	equ	0xFF1
 15006                           postinc0	equ	0xFEE
 15007                           wreg	equ	0xFE8
 15008                           postinc1	equ	0xFE6
 15009                           indf2	equ	0xFDF
 15010                           postinc2	equ	0xFDE
 15011                           postdec2	equ	0xFDD
 15012                           fsr2h	equ	0xFDA
 15013                           fsr2l	equ	0xFD9
 15014                           status	equ	0xFD8
 15015                           
 15016 ;; *************** function _Function_D_5 *****************
 15017 ;; Defined at:
 15018 ;;		line 977 in file "menu.c"
 15019 ;; Parameters:    Size  Location     Type
 15020 ;;		None
 15021 ;; Auto vars:     Size  Location     Type
 15022 ;;  array_index     1  105[BANK0 ] unsigned char 
 15023 ;; Return value:  Size  Location     Type
 15024 ;;                  1    wreg      void 
 15025 ;; Registers used:
 15026 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15027 ;; Tracked objects:
 15028 ;;		On entry : 0/0
 15029 ;;		On exit  : 0/0
 15030 ;;		Unchanged: 0/0
 15031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15033 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15035 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15036 ;;Total ram usage:        1 bytes
 15037 ;; Hardware stack levels used:    1
 15038 ;; Hardware stack levels required when called:   16
 15039 ;; This function calls:
 15040 ;;		_Lcd_Print_String
 15041 ;;		___lbmod
 15042 ;;		___wmul
 15043 ;;		_clear_row1
 15044 ;;		_clear_row2
 15045 ;;		_setControllerNumbers
 15046 ;;		_un_block_code
 15047 ;; This function is called by:
 15048 ;;		_Function_D
 15049 ;; This function uses a non-reentrant model
 15050 ;;
 15051                           
 15052                           	psect	text42
 15053  0087F4                     __ptext42:
 15054                           	opt stack 0
 15055  0087F4                     _Function_D_5:
 15056                           	opt stack 12
 15057                           
 15058                           ;menu.c: 979: which_screen = JOYSTICK_CC_MENU;
 15059                           
 15060                           ;incstack = 0
 15061  0087F4  0E13               	movlw	19
 15062  0087F6  6E4E               	movwf	_which_screen,c
 15063                           
 15064                           ;menu.c: 981: lcd_print_once = 0;
 15065  0087F8  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15066                           
 15067                           ;menu.c: 982: encoder_click = 0;
 15068  0087FA  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15069                           
 15070                           ;menu.c: 984: while(encoder_click == 0) {
 15071  0087FC  D02D               	goto	l3700
 15072  0087FE                     
 15073                           ;menu.c: 988: un_block_code();
 15074  0087FE  ECF4  F04C         	call	_un_block_code	;wreg free
 15075                           
 15076                           ;menu.c: 990: if (lcd_print_once == 0) {
 15077  008802  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15078  008804  D028               	goto	l3702
 15079                           
 15080                           ;menu.c: 991: clear_row1();
 15081  008806  EC6C  F04C         	call	_clear_row1	;wreg free
 15082                           
 15083                           ;menu.c: 992: Lcd_Print_String("Set Joystick CC#");
 15084  00880A  0E97               	movlw	low STR_33
 15085  00880C  0100               	movlb	0	; () banked
 15086  00880E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15087  008810  0EFD               	movlw	high STR_33
 15088  008812  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15089  008814  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 15090                           
 15091                           ;menu.c: 993: clear_row2();
 15092  008818  EC58  F04C         	call	_clear_row2	;wreg free
 15093                           
 15094                           ;menu.c: 994: Lcd_Print_String(LCD_STRINGS[(joystickCCMenu.selector % joystickCCMenu.num
      +                          ber) + joystickCCMenu.address]);
 15095  00881C  0101               	movlb	1	; () banked
 15096  00881E  514A               	movf	_joystickCCMenu& (0+255),w,b
 15097  008820  6EE6               	movwf	postinc1,c
 15098  008822  514C               	movf	(_joystickCCMenu+2)& (0+255),w,b
 15099  008824  6EE6               	movwf	postinc1,c
 15100  008826  ECA5  F041         	call	___lbmod	;wreg free
 15101  00882A  503E               	movf	btemp,w,c
 15102  00882C  0101               	movlb	1	; () banked
 15103  00882E  254B               	addwf	(_joystickCCMenu+1)& (0+255),w,b
 15104  008830  0100               	movlb	0	; () banked
 15105  008832  6F60               	movwf	___wmul@multiplier& (0+255),b
 15106  008834  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 15107  008836  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 15108  008838  0E00               	movlw	0
 15109  00883A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15110  00883C  0E11               	movlw	17
 15111  00883E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15112  008840  EC80  F04C         	call	___wmul	;wreg free
 15113  008844  0E9E               	movlw	low _LCD_STRINGS
 15114  008846  0100               	movlb	0	; () banked
 15115  008848  2560               	addwf	?___wmul& (0+255),w,b
 15116  00884A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15117  00884C  0EF3               	movlw	high _LCD_STRINGS
 15118  00884E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 15119  008850  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15120  008852  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 15121  008856                     l3702:
 15122                           
 15123                           ;menu.c: 995: }
 15124                           ;menu.c: 996: lcd_print_once = 1;
 15125  008856  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15126  008858                     l3700:
 15127  008858  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 15128  00885A  D7D1               	goto	l3701
 15129                           
 15130                           ;menu.c: 997: }
 15131                           ;menu.c: 1001: unsigned char array_index = (joystickCCMenu.selector) + 14;
 15132  00885C  0101               	movlb	1	; () banked
 15133  00885E  514C               	movf	(_joystickCCMenu+2)& (0+255),w,b
 15134  008860  0F0E               	addlw	14
 15135  008862  0100               	movlb	0	; () banked
 15136  008864  6FC9               	movwf	Function_D_5@array_index& (0+255),b
 15137                           
 15138                           ; BSR set to: 0
 15139                           ;menu.c: 1002: setControllerNumbers(array_index);
 15140  008866  51C9               	movf	Function_D_5@array_index& (0+255),w,b
 15141  008868  EC52  F00C         	call	_setControllerNumbers
 15142  00886C  0012               	return		;funcret
 15143  00886E                     __end_of_Function_D_5:
 15144                           	opt stack 0
 15145                           tblptru	equ	0xFF8
 15146                           tblptrh	equ	0xFF7
 15147                           tblptrl	equ	0xFF6
 15148                           tablat	equ	0xFF5
 15149                           prodh	equ	0xFF4
 15150                           prodl	equ	0xFF3
 15151                           intcon	equ	0xFF2
 15152                           intcon2	equ	0xFF1
 15153                           postinc0	equ	0xFEE
 15154                           wreg	equ	0xFE8
 15155                           postinc1	equ	0xFE6
 15156                           indf2	equ	0xFDF
 15157                           postinc2	equ	0xFDE
 15158                           postdec2	equ	0xFDD
 15159                           fsr2h	equ	0xFDA
 15160                           fsr2l	equ	0xFD9
 15161                           status	equ	0xFD8
 15162                           
 15163 ;; *************** function _Function_D_4 *****************
 15164 ;; Defined at:
 15165 ;;		line 946 in file "menu.c"
 15166 ;; Parameters:    Size  Location     Type
 15167 ;;		None
 15168 ;; Auto vars:     Size  Location     Type
 15169 ;;  array_index     1  105[BANK0 ] unsigned char 
 15170 ;; Return value:  Size  Location     Type
 15171 ;;                  1    wreg      void 
 15172 ;; Registers used:
 15173 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15174 ;; Tracked objects:
 15175 ;;		On entry : 0/0
 15176 ;;		On exit  : 0/0
 15177 ;;		Unchanged: 0/0
 15178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15180 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15182 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15183 ;;Total ram usage:        1 bytes
 15184 ;; Hardware stack levels used:    1
 15185 ;; Hardware stack levels required when called:   16
 15186 ;; This function calls:
 15187 ;;		_Lcd_Print_String
 15188 ;;		___lbmod
 15189 ;;		___wmul
 15190 ;;		_clear_row1
 15191 ;;		_clear_row2
 15192 ;;		_setControllerNumbers
 15193 ;;		_un_block_code
 15194 ;; This function is called by:
 15195 ;;		_Function_D
 15196 ;; This function uses a non-reentrant model
 15197 ;;
 15198                           
 15199                           	psect	text43
 15200  00886E                     __ptext43:
 15201                           	opt stack 0
 15202  00886E                     _Function_D_4:
 15203                           	opt stack 12
 15204                           
 15205                           ;menu.c: 948: which_screen = SLIDEPOTS_CC_MENU;
 15206                           
 15207                           ;incstack = 0
 15208  00886E  0E12               	movlw	18
 15209  008870  6E4E               	movwf	_which_screen,c
 15210                           
 15211                           ;menu.c: 950: lcd_print_once = 0;
 15212  008872  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15213                           
 15214                           ;menu.c: 951: encoder_click = 0;
 15215  008874  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15216                           
 15217                           ;menu.c: 953: while(encoder_click == 0) {
 15218  008876  D02D               	goto	l3693
 15219  008878                     
 15220                           ;menu.c: 957: un_block_code();
 15221  008878  ECF4  F04C         	call	_un_block_code	;wreg free
 15222                           
 15223                           ;menu.c: 959: if (lcd_print_once == 0) {
 15224  00887C  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15225  00887E  D028               	goto	l3695
 15226                           
 15227                           ;menu.c: 960: clear_row1();
 15228  008880  EC6C  F04C         	call	_clear_row1	;wreg free
 15229                           
 15230                           ;menu.c: 961: Lcd_Print_String("Slidepots CC#:");
 15231  008884  0E4D               	movlw	low STR_32
 15232  008886  0100               	movlb	0	; () banked
 15233  008888  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15234  00888A  0EFE               	movlw	high STR_32
 15235  00888C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15236  00888E  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 15237                           
 15238                           ;menu.c: 962: clear_row2();
 15239  008892  EC58  F04C         	call	_clear_row2	;wreg free
 15240                           
 15241                           ;menu.c: 963: Lcd_Print_String(LCD_STRINGS[(slidepotsCCMenu.selector % slidepotsCCMenu.n
      +                          umber) + slidepotsCCMenu.address]);
 15242  008896  0101               	movlb	1	; () banked
 15243  008898  514D               	movf	_slidepotsCCMenu& (0+255),w,b
 15244  00889A  6EE6               	movwf	postinc1,c
 15245  00889C  514F               	movf	(_slidepotsCCMenu+2)& (0+255),w,b
 15246  00889E  6EE6               	movwf	postinc1,c
 15247  0088A0  ECA5  F041         	call	___lbmod	;wreg free
 15248  0088A4  503E               	movf	btemp,w,c
 15249  0088A6  0101               	movlb	1	; () banked
 15250  0088A8  254E               	addwf	(_slidepotsCCMenu+1)& (0+255),w,b
 15251  0088AA  0100               	movlb	0	; () banked
 15252  0088AC  6F60               	movwf	___wmul@multiplier& (0+255),b
 15253  0088AE  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 15254  0088B0  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 15255  0088B2  0E00               	movlw	0
 15256  0088B4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15257  0088B6  0E11               	movlw	17
 15258  0088B8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15259  0088BA  EC80  F04C         	call	___wmul	;wreg free
 15260  0088BE  0E9E               	movlw	low _LCD_STRINGS
 15261  0088C0  0100               	movlb	0	; () banked
 15262  0088C2  2560               	addwf	?___wmul& (0+255),w,b
 15263  0088C4  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15264  0088C6  0EF3               	movlw	high _LCD_STRINGS
 15265  0088C8  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 15266  0088CA  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15267  0088CC  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 15268  0088D0                     l3695:
 15269                           
 15270                           ;menu.c: 964: }
 15271                           ;menu.c: 965: lcd_print_once = 1;
 15272  0088D0  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15273  0088D2                     l3693:
 15274  0088D2  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 15275  0088D4  D7D1               	goto	l3694
 15276                           
 15277                           ;menu.c: 966: }
 15278                           ;menu.c: 971: unsigned char array_index = (slidepotsCCMenu.selector) + 7;
 15279  0088D6  0101               	movlb	1	; () banked
 15280  0088D8  514F               	movf	(_slidepotsCCMenu+2)& (0+255),w,b
 15281  0088DA  0F07               	addlw	7
 15282  0088DC  0100               	movlb	0	; () banked
 15283  0088DE  6FC9               	movwf	Function_D_4@array_index& (0+255),b
 15284                           
 15285                           ; BSR set to: 0
 15286                           ;menu.c: 972: setControllerNumbers(array_index);
 15287  0088E0  51C9               	movf	Function_D_4@array_index& (0+255),w,b
 15288  0088E2  EC52  F00C         	call	_setControllerNumbers
 15289  0088E6  0012               	return		;funcret
 15290  0088E8                     __end_of_Function_D_4:
 15291                           	opt stack 0
 15292                           tblptru	equ	0xFF8
 15293                           tblptrh	equ	0xFF7
 15294                           tblptrl	equ	0xFF6
 15295                           tablat	equ	0xFF5
 15296                           prodh	equ	0xFF4
 15297                           prodl	equ	0xFF3
 15298                           intcon	equ	0xFF2
 15299                           intcon2	equ	0xFF1
 15300                           postinc0	equ	0xFEE
 15301                           wreg	equ	0xFE8
 15302                           postinc1	equ	0xFE6
 15303                           indf2	equ	0xFDF
 15304                           postinc2	equ	0xFDE
 15305                           postdec2	equ	0xFDD
 15306                           fsr2h	equ	0xFDA
 15307                           fsr2l	equ	0xFD9
 15308                           status	equ	0xFD8
 15309                           
 15310 ;; *************** function _Function_D_3 *****************
 15311 ;; Defined at:
 15312 ;;		line 918 in file "menu.c"
 15313 ;; Parameters:    Size  Location     Type
 15314 ;;		None
 15315 ;; Auto vars:     Size  Location     Type
 15316 ;;  array_index     1  105[BANK0 ] unsigned char 
 15317 ;; Return value:  Size  Location     Type
 15318 ;;                  1    wreg      void 
 15319 ;; Registers used:
 15320 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15321 ;; Tracked objects:
 15322 ;;		On entry : 0/0
 15323 ;;		On exit  : 0/0
 15324 ;;		Unchanged: 0/0
 15325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15327 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15329 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15330 ;;Total ram usage:        1 bytes
 15331 ;; Hardware stack levels used:    1
 15332 ;; Hardware stack levels required when called:   16
 15333 ;; This function calls:
 15334 ;;		_Lcd_Print_String
 15335 ;;		___lbmod
 15336 ;;		___wmul
 15337 ;;		_clear_row1
 15338 ;;		_clear_row2
 15339 ;;		_setControllerNumbers
 15340 ;;		_un_block_code
 15341 ;; This function is called by:
 15342 ;;		_Function_D
 15343 ;; This function uses a non-reentrant model
 15344 ;;
 15345                           
 15346                           	psect	text44
 15347  008A50                     __ptext44:
 15348                           	opt stack 0
 15349  008A50                     _Function_D_3:
 15350                           	opt stack 12
 15351                           
 15352                           ;menu.c: 920: which_screen = POTS_CC_MENU;
 15353                           
 15354                           ;incstack = 0
 15355  008A50  0E11               	movlw	17
 15356  008A52  6E4E               	movwf	_which_screen,c
 15357                           
 15358                           ;menu.c: 922: lcd_print_once = 0;
 15359  008A54  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15360                           
 15361                           ;menu.c: 923: encoder_click = 0;
 15362  008A56  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15363                           
 15364                           ;menu.c: 925: while(encoder_click == 0) {
 15365  008A58  D02D               	goto	l3686
 15366  008A5A                     
 15367                           ;menu.c: 929: un_block_code();
 15368  008A5A  ECF4  F04C         	call	_un_block_code	;wreg free
 15369                           
 15370                           ;menu.c: 931: if (lcd_print_once == 0) {
 15371  008A5E  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15372  008A60  D028               	goto	l3688
 15373                           
 15374                           ;menu.c: 932: clear_row1();
 15375  008A62  EC6C  F04C         	call	_clear_row1	;wreg free
 15376                           
 15377                           ;menu.c: 933: Lcd_Print_String("Set Pots CC#:");
 15378  008A66  0EC4               	movlw	low STR_31
 15379  008A68  0100               	movlb	0	; () banked
 15380  008A6A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15381  008A6C  0EFE               	movlw	high STR_31
 15382  008A6E  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15383  008A70  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 15384                           
 15385                           ;menu.c: 934: clear_row2();
 15386  008A74  EC58  F04C         	call	_clear_row2	;wreg free
 15387                           
 15388                           ;menu.c: 935: Lcd_Print_String(LCD_STRINGS[(potsCCMenu.selector % potsCCMenu.number) + p
      +                          otsCCMenu.address]);
 15389  008A78  0101               	movlb	1	; () banked
 15390  008A7A  5150               	movf	_potsCCMenu& (0+255),w,b
 15391  008A7C  6EE6               	movwf	postinc1,c
 15392  008A7E  5152               	movf	(_potsCCMenu+2)& (0+255),w,b
 15393  008A80  6EE6               	movwf	postinc1,c
 15394  008A82  ECA5  F041         	call	___lbmod	;wreg free
 15395  008A86  503E               	movf	btemp,w,c
 15396  008A88  0101               	movlb	1	; () banked
 15397  008A8A  2551               	addwf	(_potsCCMenu+1)& (0+255),w,b
 15398  008A8C  0100               	movlb	0	; () banked
 15399  008A8E  6F60               	movwf	___wmul@multiplier& (0+255),b
 15400  008A90  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 15401  008A92  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 15402  008A94  0E00               	movlw	0
 15403  008A96  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 15404  008A98  0E11               	movlw	17
 15405  008A9A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 15406  008A9C  EC80  F04C         	call	___wmul	;wreg free
 15407  008AA0  0E9E               	movlw	low _LCD_STRINGS
 15408  008AA2  0100               	movlb	0	; () banked
 15409  008AA4  2560               	addwf	?___wmul& (0+255),w,b
 15410  008AA6  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15411  008AA8  0EF3               	movlw	high _LCD_STRINGS
 15412  008AAA  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 15413  008AAC  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15414  008AAE  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 15415  008AB2                     l3688:
 15416                           
 15417                           ;menu.c: 936: }
 15418                           ;menu.c: 937: lcd_print_once = 1;
 15419  008AB2  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 15420  008AB4                     l3686:
 15421  008AB4  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 15422  008AB6  D7D1               	goto	l3687
 15423                           
 15424                           ;menu.c: 938: }
 15425                           ;menu.c: 940: unsigned char array_index = potsCCMenu.selector;
 15426  008AB8  C152  F0C9         	movff	_potsCCMenu+2,Function_D_3@array_index
 15427                           
 15428                           ;menu.c: 941: setControllerNumbers(array_index);
 15429  008ABC  0100               	movlb	0	; () banked
 15430  008ABE  51C9               	movf	Function_D_3@array_index& (0+255),w,b
 15431  008AC0  EC52  F00C         	call	_setControllerNumbers
 15432  008AC4  0012               	return		;funcret
 15433  008AC6                     __end_of_Function_D_3:
 15434                           	opt stack 0
 15435                           tblptru	equ	0xFF8
 15436                           tblptrh	equ	0xFF7
 15437                           tblptrl	equ	0xFF6
 15438                           tablat	equ	0xFF5
 15439                           prodh	equ	0xFF4
 15440                           prodl	equ	0xFF3
 15441                           intcon	equ	0xFF2
 15442                           intcon2	equ	0xFF1
 15443                           postinc0	equ	0xFEE
 15444                           wreg	equ	0xFE8
 15445                           postinc1	equ	0xFE6
 15446                           indf2	equ	0xFDF
 15447                           postinc2	equ	0xFDE
 15448                           postdec2	equ	0xFDD
 15449                           fsr2h	equ	0xFDA
 15450                           fsr2l	equ	0xFD9
 15451                           status	equ	0xFD8
 15452                           
 15453 ;; *************** function _setControllerNumbers *****************
 15454 ;; Defined at:
 15455 ;;		line 125 in file "menu.c"
 15456 ;; Parameters:    Size  Location     Type
 15457 ;;  array_index     1    wreg     unsigned char 
 15458 ;; Auto vars:     Size  Location     Type
 15459 ;;  array_index     1  104[BANK0 ] unsigned char 
 15460 ;; Return value:  Size  Location     Type
 15461 ;;                  1    wreg      void 
 15462 ;; Registers used:
 15463 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15464 ;; Tracked objects:
 15465 ;;		On entry : 0/0
 15466 ;;		On exit  : 0/0
 15467 ;;		Unchanged: 0/0
 15468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15470 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15471 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15472 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15473 ;;Total ram usage:        2 bytes
 15474 ;; Hardware stack levels used:    1
 15475 ;; Hardware stack levels required when called:   15
 15476 ;; This function calls:
 15477 ;;		_Lcd_Print_String
 15478 ;;		_Lcd_Set_Cursor
 15479 ;;		_analogInputs
 15480 ;;		_digitalInputs
 15481 ;;		_int2string
 15482 ;; This function is called by:
 15483 ;;		_Function_D_3
 15484 ;;		_Function_D_4
 15485 ;;		_Function_D_5
 15486 ;;		_initializeControllerNumbers
 15487 ;; This function uses a non-reentrant model
 15488 ;;
 15489                           
 15490                           	psect	text45
 15491  0018A4                     __ptext45:
 15492                           	opt stack 0
 15493  0018A4                     _setControllerNumbers:
 15494                           	opt stack 12
 15495                           
 15496                           ;incstack = 0
 15497                           ;setControllerNumbers@array_index stored from wreg
 15498  0018A4  0100               	movlb	0	; () banked
 15499  0018A6  6FC8               	movwf	setControllerNumbers@array_index& (0+255),b
 15500                           
 15501                           ;menu.c: 127: which_screen = BLANK;
 15502  0018A8  0E00               	movlw	0
 15503  0018AA  6E4E               	movwf	_which_screen,c
 15504                           
 15505                           ;menu.c: 128: encoder_click = 0;
 15506  0018AC  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 15507                           
 15508                           ;menu.c: 131: static __bit printOnce;
 15509                           ;menu.c: 132: printOnce = 0;
 15510  0018AE  9401               	bcf	setControllerNumbers@printOnce/(0+8),setControllerNumbers@printOnce& (0+7),c
 15511                           
 15512                           ;menu.c: 134: while(encoder_click == 0) {
 15513  0018B0  D285               	goto	l3512
 15514  0018B2                     
 15515                           ;menu.c: 139: digitalInputs();
 15516  0018B2  EC6F  F049         	call	_digitalInputs	;wreg free
 15517                           
 15518                           ;menu.c: 140: analogInputs();
 15519  0018B6  ECE8  F049         	call	_analogInputs	;wreg free
 15520                           
 15521                           ;menu.c: 145: if (encoder_direction == 0x10) {
 15522  0018BA  0E10               	movlw	16
 15523  0018BC  1835               	xorwf	_encoder_direction,w,c
 15524  0018BE  A4D8               	btfss	status,2,c
 15525  0018C0  D076               	goto	l3479
 15526                           
 15527                           ;menu.c: 147: if(inputPotsArray[array_index].controller_resolution == 0){
 15528  0018C2  0100               	movlb	0	; () banked
 15529  0018C4  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 15530  0018C6  0D03               	mullw	3
 15531  0018C8  0E88               	movlw	low _inputPotsArray
 15532  0018CA  24F3               	addwf	prodl,w,c
 15533  0018CC  6ED9               	movwf	fsr2l,c
 15534  0018CE  0E02               	movlw	high _inputPotsArray
 15535  0018D0  20F4               	addwfc	prodh,w,c
 15536  0018D2  6EDA               	movwf	fsr2h,c
 15537  0018D4  0102               	movlb	2	; () banked
 15538  0018D6  B0DF               	btfsc	indf2,0,c
 15539  0018D8  D03C               	goto	l3482
 15540                           
 15541                           ; BSR set to: 2
 15542                           ;menu.c: 148: if(inputPotsArray[array_index].controller_number < 119) {
 15543  0018DA  0100               	movlb	0	; () banked
 15544  0018DC  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 15545  0018DE  0D03               	mullw	3
 15546  0018E0  0E01               	movlw	1
 15547  0018E2  26F3               	addwf	prodl,f,c
 15548  0018E4  0E00               	movlw	0
 15549  0018E6  22F4               	addwfc	prodh,f,c
 15550  0018E8  0E88               	movlw	low _inputPotsArray
 15551  0018EA  24F3               	addwf	prodl,w,c
 15552  0018EC  6ED9               	movwf	fsr2l,c
 15553  0018EE  0E02               	movlw	high _inputPotsArray
 15554  0018F0  20F4               	addwfc	prodh,w,c
 15555  0018F2  6EDA               	movwf	fsr2h,c
 15556  0018F4  50DF               	movf	indf2,w,c
 15557  0018F6  0A80               	xorlw	128
 15558  0018F8  0F09               	addlw	-247
 15559  0018FA  B0D8               	btfsc	status,0,c
 15560  0018FC  D02A               	goto	l3482
 15561                           
 15562                           ; BSR set to: 0
 15563                           ;menu.c: 149: inputPotsArray[array_index].controller_number++;
 15564  0018FE  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 15565  001900  0D03               	mullw	3
 15566  001902  0E01               	movlw	1
 15567  001904  26F3               	addwf	prodl,f,c
 15568  001906  0E00               	movlw	0
 15569  001908  22F4               	addwfc	prodh,f,c
 15570  00190A  0E88               	movlw	low _inputPotsArray
 15571  00190C  24F3               	addwf	prodl,w,c
 15572  00190E  6ED9               	movwf	fsr2l,c
 15573  001910  0E02               	movlw	high _inputPotsArray
 15574  001912  20F4               	addwfc	prodh,w,c
 15575  001914  6EDA               	movwf	fsr2h,c
 15576  001916  2ADF               	incf	indf2,f,c
 15577                           
 15578                           ;menu.c: 150: if(inputPotsArray[array_index].controller_number == 0){inputPotsArray[arra
      +                          y_index].controller_number = 64;}
 15579  001918  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 15580  00191A  0D03               	mullw	3
 15581  00191C  0E01               	movlw	1
 15582  00191E  26F3               	addwf	prodl,f,c
 15583  001920  0E00               	movlw	0
 15584  001922  22F4               	addwfc	prodh,f,c
 15585  001924  0E88               	movlw	low _inputPotsArray
 15586  001926  24F3               	addwf	prodl,w,c
 15587  001928  6ED9               	movwf	fsr2l,c
 15588  00192A  0E02               	movlw	high _inputPotsArray
 15589  00192C  20F4               	addwfc	prodh,w,c
 15590  00192E  6EDA               	movwf	fsr2h,c
 15591  001930  50DF               	movf	indf2,w,c
 15592  001932  A4D8               	btfss	status,2,c
 15593  001934  D00E               	goto	l3482
 15594                           
 15595                           ; BSR set to: 0
 15596  001936  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 15597  001938  0D03               	mullw	3
 15598  00193A  0E01               	movlw	1
 15599  00193C  26F3               	addwf	prodl,f,c
 15600  00193E  0E00               	movlw	0
 15601  001940  22F4               	addwfc	prodh,f,c
 15602  001942  0E88               	movlw	low _inputPotsArray
 15603  001944  24F3               	addwf	prodl,w,c
 15604  001946  6ED9               	movwf	fsr2l,c
 15605  001948  0E02               	movlw	high _inputPotsArray
 15606  00194A  20F4               	addwfc	prodh,w,c
 15607  00194C  6EDA               	movwf	fsr2h,c
 15608  00194E  0E40               	movlw	64
 15609  001950  6EDF               	movwf	indf2,c
 15610  001952                     l3482:
 15611                           
 15612                           ;menu.c: 151: }
 15613                           ;menu.c: 152: }
 15614                           ;menu.c: 154: if(inputPotsArray[array_index].controller_resolution == 1){
 15615                           
 15616                           ; BSR set to: 0
 15617                           
 15618                           ; BSR set to: 0
 15619  001952  0100               	movlb	0	; () banked
 15620  001954  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 15621  001956  0D03               	mullw	3
 15622  001958  0E88               	movlw	low _inputPotsArray
 15623  00195A  24F3               	addwf	prodl,w,c
 15624  00195C  6ED9               	movwf	fsr2l,c
 15625  00195E  0E02               	movlw	high _inputPotsArray
 15626  001960  20F4               	addwfc	prodh,w,c
 15627  001962  6EDA               	movwf	fsr2h,c
 15628  001964  0102               	movlb	2	; () banked
 15629  001966  A0DF               	btfss	indf2,0,c
 15630  001968  D01F               	goto	l3484
 15631                           
 15632                           ; BSR set to: 2
 15633                           ;menu.c: 155: if(inputPotsArray[array_index].controller_number_two_byte < 31) {
 15634  00196A  0100               	movlb	0	; () banked
 15635  00196C  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 15636  00196E  0D03               	mullw	3
 15637  001970  0E02               	movlw	2
 15638  001972  26F3               	addwf	prodl,f,c
 15639  001974  0E00               	movlw	0
 15640  001976  22F4               	addwfc	prodh,f,c
 15641  001978  0E88               	movlw	low _inputPotsArray
 15642  00197A  24F3               	addwf	prodl,w,c
 15643  00197C  6ED9               	movwf	fsr2l,c
 15644  00197E  0E02               	movlw	high _inputPotsArray
 15645  001980  20F4               	addwfc	prodh,w,c
 15646  001982  6EDA               	movwf	fsr2h,c
 15647  001984  50DF               	movf	indf2,w,c
 15648  001986  0A80               	xorlw	128
 15649  001988  0F61               	addlw	-159
 15650  00198A  B0D8               	btfsc	status,0,c
 15651  00198C  D00D               	goto	l3484
 15652                           
 15653                           ; BSR set to: 0
 15654                           ;menu.c: 156: inputPotsArray[array_index].controller_number_two_byte++;
 15655  00198E  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 15656  001990  0D03               	mullw	3
 15657  001992  0E02               	movlw	2
 15658  001994  26F3               	addwf	prodl,f,c
 15659  001996  0E00               	movlw	0
 15660  001998  22F4               	addwfc	prodh,f,c
 15661  00199A  0E88               	movlw	low _inputPotsArray
 15662  00199C  24F3               	addwf	prodl,w,c
 15663  00199E  6ED9               	movwf	fsr2l,c
 15664  0019A0  0E02               	movlw	high _inputPotsArray
 15665  0019A2  20F4               	addwfc	prodh,w,c
 15666  0019A4  6EDA               	movwf	fsr2h,c
 15667  0019A6  2ADF               	incf	indf2,f,c
 15668  0019A8                     l3484:
 15669                           
 15670                           ;menu.c: 157: }
 15671                           ;menu.c: 158: }
 15672                           ;menu.c: 160: encoder_direction = 0x00;
 15673                           
 15674                           ; BSR set to: 0
 15675                           
 15676                           ; BSR set to: 0
 15677  0019A8  0E00               	movlw	0
 15678  0019AA  6E35               	movwf	_encoder_direction,c
 15679                           
 15680                           ;menu.c: 161: printOnce = 0;
 15681  0019AC  9401               	bcf	setControllerNumbers@printOnce/(0+8),setControllerNumbers@printOnce& (0+7),c
 15682  0019AE                     l3479:
 15683                           
 15684                           ;menu.c: 162: }
 15685                           ;menu.c: 166: if (encoder_direction == 0x20) {
 15686  0019AE  0E20               	movlw	32
 15687  0019B0  1835               	xorwf	_encoder_direction,w,c
 15688  0019B2  A4D8               	btfss	status,2,c
 15689  0019B4  D0B3               	goto	l3485
 15690                           
 15691                           ;menu.c: 168: if(inputPotsArray[array_index].controller_resolution == 0){
 15692  0019B6  0100               	movlb	0	; () banked
 15693  0019B8  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 15694  0019BA  0D03               	mullw	3
 15695  0019BC  0E88               	movlw	low _inputPotsArray
 15696  0019BE  24F3               	addwf	prodl,w,c
 15697  0019C0  6ED9               	movwf	fsr2l,c
 15698  0019C2  0E02               	movlw	high _inputPotsArray
 15699  0019C4  20F4               	addwfc	prodh,w,c
 15700  0019C6  6EDA               	movwf	fsr2h,c
 15701  0019C8  0102               	movlb	2	; () banked
 15702  0019CA  B0DF               	btfsc	indf2,0,c
 15703  0019CC  D079               	goto	l3490
 15704                           
 15705                           ; BSR set to: 2
 15706                           ;menu.c: 170: if(inputPotsArray[array_index].controller_number > -3) {
 15707  0019CE  0100               	movlb	0	; () banked
 15708  0019D0  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 15709  0019D2  0D03               	mullw	3
 15710  0019D4  0E01               	movlw	1
 15711  0019D6  26F3               	addwf	prodl,f,c
 15712  0019D8  0E00               	movlw	0
 15713  0019DA  22F4               	addwfc	prodh,f,c
 15714  0019DC  0E88               	movlw	low _inputPotsArray
 15715  0019DE  24F3               	addwf	prodl,w,c
 15716  0019E0  6ED9               	movwf	fsr2l,c
 15717  0019E2  0E02               	movlw	high _inputPotsArray
 15718  0019E4  20F4               	addwfc	prodh,w,c
 15719  0019E6  6EDA               	movwf	fsr2h,c
 15720  0019E8  50DF               	movf	indf2,w,c
 15721  0019EA  0A80               	xorlw	128
 15722  0019EC  0F82               	addlw	130
 15723  0019EE  A0D8               	btfss	status,0,c
 15724  0019F0  D00D               	goto	l3487
 15725                           
 15726                           ; BSR set to: 0
 15727                           ;menu.c: 171: inputPotsArray[array_index].controller_number--;
 15728  0019F2  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 15729  0019F4  0D03               	mullw	3
 15730  0019F6  0E01               	movlw	1
 15731  0019F8  26F3               	addwf	prodl,f,c
 15732  0019FA  0E00               	movlw	0
 15733  0019FC  22F4               	addwfc	prodh,f,c
 15734  0019FE  0E88               	movlw	low _inputPotsArray
 15735  001A00  24F3               	addwf	prodl,w,c
 15736  001A02  6ED9               	movwf	fsr2l,c
 15737  001A04  0E02               	movlw	high _inputPotsArray
 15738  001A06  20F4               	addwfc	prodh,w,c
 15739  001A08  6EDA               	movwf	fsr2h,c
 15740  001A0A  06DF               	decf	indf2,f,c
 15741  001A0C                     l3487:
 15742                           
 15743                           ; BSR set to: 0
 15744                           ;menu.c: 172: }
 15745                           ;menu.c: 173: if(inputPotsArray[array_index].controller_number == 61) {inputPotsArray[ar
      +                          ray_index].controller_number = -3;}
 15746  001A0C  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 15747  001A0E  0D03               	mullw	3
 15748  001A10  0E01               	movlw	1
 15749  001A12  26F3               	addwf	prodl,f,c
 15750  001A14  0E00               	movlw	0
 15751  001A16  22F4               	addwfc	prodh,f,c
 15752  001A18  0E88               	movlw	low _inputPotsArray
 15753  001A1A  24F3               	addwf	prodl,w,c
 15754  001A1C  6ED9               	movwf	fsr2l,c
 15755  001A1E  0E02               	movlw	high _inputPotsArray
 15756  001A20  20F4               	addwfc	prodh,w,c
 15757  001A22  6EDA               	movwf	fsr2h,c
 15758  001A24  0E3D               	movlw	61
 15759  001A26  18DE               	xorwf	postinc2,w,c
 15760  001A28  A4D8               	btfss	status,2,c
 15761  001A2A  D00E               	goto	l3488
 15762                           
 15763                           ; BSR set to: 0
 15764  001A2C  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 15765  001A2E  0D03               	mullw	3
 15766  001A30  0E01               	movlw	1
 15767  001A32  26F3               	addwf	prodl,f,c
 15768  001A34  0E00               	movlw	0
 15769  001A36  22F4               	addwfc	prodh,f,c
 15770  001A38  0E88               	movlw	low _inputPotsArray
 15771  001A3A  24F3               	addwf	prodl,w,c
 15772  001A3C  6ED9               	movwf	fsr2l,c
 15773  001A3E  0E02               	movlw	high _inputPotsArray
 15774  001A40  20F4               	addwfc	prodh,w,c
 15775  001A42  6EDA               	movwf	fsr2h,c
 15776  001A44  0EFD               	movlw	253
 15777  001A46  6EDF               	movwf	indf2,c
 15778  001A48                     l3488:
 15779                           
 15780                           ; BSR set to: 0
 15781                           ;menu.c: 174: if(inputPotsArray[array_index].controller_number == 62) {inputPotsArray[ar
      +                          ray_index].controller_number = -2;}
 15782  001A48  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 15783  001A4A  0D03               	mullw	3
 15784  001A4C  0E01               	movlw	1
 15785  001A4E  26F3               	addwf	prodl,f,c
 15786  001A50  0E00               	movlw	0
 15787  001A52  22F4               	addwfc	prodh,f,c
 15788  001A54  0E88               	movlw	low _inputPotsArray
 15789  001A56  24F3               	addwf	prodl,w,c
 15790  001A58  6ED9               	movwf	fsr2l,c
 15791  001A5A  0E02               	movlw	high _inputPotsArray
 15792  001A5C  20F4               	addwfc	prodh,w,c
 15793  001A5E  6EDA               	movwf	fsr2h,c
 15794  001A60  0E3E               	movlw	62
 15795  001A62  18DE               	xorwf	postinc2,w,c
 15796  001A64  A4D8               	btfss	status,2,c
 15797  001A66  D00E               	goto	l3489
 15798                           
 15799                           ; BSR set to: 0
 15800  001A68  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 15801  001A6A  0D03               	mullw	3
 15802  001A6C  0E01               	movlw	1
 15803  001A6E  26F3               	addwf	prodl,f,c
 15804  001A70  0E00               	movlw	0
 15805  001A72  22F4               	addwfc	prodh,f,c
 15806  001A74  0E88               	movlw	low _inputPotsArray
 15807  001A76  24F3               	addwf	prodl,w,c
 15808  001A78  6ED9               	movwf	fsr2l,c
 15809  001A7A  0E02               	movlw	high _inputPotsArray
 15810  001A7C  20F4               	addwfc	prodh,w,c
 15811  001A7E  6EDA               	movwf	fsr2h,c
 15812  001A80  0EFE               	movlw	254
 15813  001A82  6EDF               	movwf	indf2,c
 15814  001A84                     l3489:
 15815                           
 15816                           ; BSR set to: 0
 15817                           ;menu.c: 175: if(inputPotsArray[array_index].controller_number == 63) {inputPotsArray[ar
      +                          ray_index].controller_number = -1;}
 15818  001A84  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 15819  001A86  0D03               	mullw	3
 15820  001A88  0E01               	movlw	1
 15821  001A8A  26F3               	addwf	prodl,f,c
 15822  001A8C  0E00               	movlw	0
 15823  001A8E  22F4               	addwfc	prodh,f,c
 15824  001A90  0E88               	movlw	low _inputPotsArray
 15825  001A92  24F3               	addwf	prodl,w,c
 15826  001A94  6ED9               	movwf	fsr2l,c
 15827  001A96  0E02               	movlw	high _inputPotsArray
 15828  001A98  20F4               	addwfc	prodh,w,c
 15829  001A9A  6EDA               	movwf	fsr2h,c
 15830  001A9C  0E3F               	movlw	63
 15831  001A9E  18DE               	xorwf	postinc2,w,c
 15832  001AA0  A4D8               	btfss	status,2,c
 15833  001AA2  D00E               	goto	l3490
 15834                           
 15835                           ; BSR set to: 0
 15836  001AA4  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 15837  001AA6  0D03               	mullw	3
 15838  001AA8  0E01               	movlw	1
 15839  001AAA  26F3               	addwf	prodl,f,c
 15840  001AAC  0E00               	movlw	0
 15841  001AAE  22F4               	addwfc	prodh,f,c
 15842  001AB0  0E88               	movlw	low _inputPotsArray
 15843  001AB2  24F3               	addwf	prodl,w,c
 15844  001AB4  6ED9               	movwf	fsr2l,c
 15845  001AB6  0E02               	movlw	high _inputPotsArray
 15846  001AB8  20F4               	addwfc	prodh,w,c
 15847  001ABA  6EDA               	movwf	fsr2h,c
 15848  001ABC  0EFF               	movlw	255
 15849  001ABE  6EDF               	movwf	indf2,c
 15850  001AC0                     l3490:
 15851                           
 15852                           ;menu.c: 177: }
 15853                           ;menu.c: 179: if(inputPotsArray[array_index].controller_resolution == 1){
 15854                           
 15855                           ; BSR set to: 0
 15856  001AC0  0100               	movlb	0	; () banked
 15857  001AC2  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 15858  001AC4  0D03               	mullw	3
 15859  001AC6  0E88               	movlw	low _inputPotsArray
 15860  001AC8  24F3               	addwf	prodl,w,c
 15861  001ACA  6ED9               	movwf	fsr2l,c
 15862  001ACC  0E02               	movlw	high _inputPotsArray
 15863  001ACE  20F4               	addwfc	prodh,w,c
 15864  001AD0  6EDA               	movwf	fsr2h,c
 15865  001AD2  0102               	movlb	2	; () banked
 15866  001AD4  A0DF               	btfss	indf2,0,c
 15867  001AD6  D01F               	goto	l3492
 15868                           
 15869                           ; BSR set to: 2
 15870                           ;menu.c: 181: if(inputPotsArray[array_index].controller_number_two_byte > -3) {
 15871  001AD8  0100               	movlb	0	; () banked
 15872  001ADA  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 15873  001ADC  0D03               	mullw	3
 15874  001ADE  0E02               	movlw	2
 15875  001AE0  26F3               	addwf	prodl,f,c
 15876  001AE2  0E00               	movlw	0
 15877  001AE4  22F4               	addwfc	prodh,f,c
 15878  001AE6  0E88               	movlw	low _inputPotsArray
 15879  001AE8  24F3               	addwf	prodl,w,c
 15880  001AEA  6ED9               	movwf	fsr2l,c
 15881  001AEC  0E02               	movlw	high _inputPotsArray
 15882  001AEE  20F4               	addwfc	prodh,w,c
 15883  001AF0  6EDA               	movwf	fsr2h,c
 15884  001AF2  50DF               	movf	indf2,w,c
 15885  001AF4  0A80               	xorlw	128
 15886  001AF6  0F82               	addlw	130
 15887  001AF8  A0D8               	btfss	status,0,c
 15888  001AFA  D00D               	goto	l3492
 15889                           
 15890                           ; BSR set to: 0
 15891                           ;menu.c: 182: inputPotsArray[array_index].controller_number_two_byte--;
 15892  001AFC  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 15893  001AFE  0D03               	mullw	3
 15894  001B00  0E02               	movlw	2
 15895  001B02  26F3               	addwf	prodl,f,c
 15896  001B04  0E00               	movlw	0
 15897  001B06  22F4               	addwfc	prodh,f,c
 15898  001B08  0E88               	movlw	low _inputPotsArray
 15899  001B0A  24F3               	addwf	prodl,w,c
 15900  001B0C  6ED9               	movwf	fsr2l,c
 15901  001B0E  0E02               	movlw	high _inputPotsArray
 15902  001B10  20F4               	addwfc	prodh,w,c
 15903  001B12  6EDA               	movwf	fsr2h,c
 15904  001B14  06DF               	decf	indf2,f,c
 15905  001B16                     l3492:
 15906                           
 15907                           ;menu.c: 183: }
 15908                           ;menu.c: 185: }
 15909                           ;menu.c: 187: encoder_direction = 0x00;
 15910                           
 15911                           ; BSR set to: 0
 15912                           
 15913                           ; BSR set to: 0
 15914  001B16  0E00               	movlw	0
 15915  001B18  6E35               	movwf	_encoder_direction,c
 15916                           
 15917                           ;menu.c: 188: printOnce = 0;
 15918  001B1A  9401               	bcf	setControllerNumbers@printOnce/(0+8),setControllerNumbers@printOnce& (0+7),c
 15919  001B1C                     l3485:
 15920                           
 15921                           ;menu.c: 189: }
 15922                           ;menu.c: 191: if(inputPotsArray[array_index].controller_resolution == 0){
 15923  001B1C  0100               	movlb	0	; () banked
 15924  001B1E  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 15925  001B20  0D03               	mullw	3
 15926  001B22  0E88               	movlw	low _inputPotsArray
 15927  001B24  24F3               	addwf	prodl,w,c
 15928  001B26  6ED9               	movwf	fsr2l,c
 15929  001B28  0E02               	movlw	high _inputPotsArray
 15930  001B2A  20F4               	addwfc	prodh,w,c
 15931  001B2C  6EDA               	movwf	fsr2h,c
 15932  001B2E  0102               	movlb	2	; () banked
 15933  001B30  B0DF               	btfsc	indf2,0,c
 15934  001B32  D09C               	goto	l3502
 15935                           
 15936                           ; BSR set to: 2
 15937                           ;menu.c: 193: if(inputPotsArray[array_index].controller_number >= 0) {
 15938  001B34  0100               	movlb	0	; () banked
 15939  001B36  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 15940  001B38  0D03               	mullw	3
 15941  001B3A  0E01               	movlw	1
 15942  001B3C  26F3               	addwf	prodl,f,c
 15943  001B3E  0E00               	movlw	0
 15944  001B40  22F4               	addwfc	prodh,f,c
 15945  001B42  0E88               	movlw	low _inputPotsArray
 15946  001B44  24F3               	addwf	prodl,w,c
 15947  001B46  6ED9               	movwf	fsr2l,c
 15948  001B48  0E02               	movlw	high _inputPotsArray
 15949  001B4A  20F4               	addwfc	prodh,w,c
 15950  001B4C  6EDA               	movwf	fsr2h,c
 15951  001B4E  0E00               	movlw	0
 15952  001B50  BEDB               	btfsc	plusw2,7,c
 15953  001B52  D030               	goto	l3494
 15954                           
 15955                           ; BSR set to: 0
 15956                           ;menu.c: 195: if(printOnce == 0){
 15957  001B54  B401               	btfsc	setControllerNumbers@printOnce/(0+8),setControllerNumbers@printOnce& (0+7),c
 15958  001B56  D08A               	goto	l3502
 15959                           
 15960                           ; BSR set to: 0
 15961                           ;menu.c: 196: int2string(inputPotsArray[array_index].controller_number);
 15962  001B58  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 15963  001B5A  0D03               	mullw	3
 15964  001B5C  0E01               	movlw	1
 15965  001B5E  26F3               	addwf	prodl,f,c
 15966  001B60  0E00               	movlw	0
 15967  001B62  22F4               	addwfc	prodh,f,c
 15968  001B64  0E88               	movlw	low _inputPotsArray
 15969  001B66  24F3               	addwf	prodl,w,c
 15970  001B68  6ED9               	movwf	fsr2l,c
 15971  001B6A  0E02               	movlw	high _inputPotsArray
 15972  001B6C  20F4               	addwfc	prodh,w,c
 15973  001B6E  6EDA               	movwf	fsr2h,c
 15974  001B70  50DF               	movf	indf2,w,c
 15975  001B72  6F60               	movwf	int2string@number& (0+255),b
 15976  001B74  6B61               	clrf	(int2string@number+1)& (0+255),b
 15977  001B76  BF60               	btfsc	int2string@number& (0+255),7,b
 15978  001B78  0761               	decf	(int2string@number+1)& (0+255),f,b
 15979  001B7A  EC42  F03B         	call	_int2string	;wreg free
 15980                           
 15981                           ;menu.c: 197: Lcd_Set_Cursor(2,7);
 15982  001B7E  0E07               	movlw	7
 15983  001B80  0100               	movlb	0	; () banked
 15984  001B82  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 15985  001B84  0E02               	movlw	2
 15986  001B86  EC8A  F048         	call	_Lcd_Set_Cursor
 15987                           
 15988                           ;menu.c: 198: Lcd_Print_String("         ");
 15989  001B8A  0E6B               	movlw	low (STR_10+7)
 15990  001B8C  0100               	movlb	0	; () banked
 15991  001B8E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 15992  001B90  0EFD               	movlw	high (STR_10+7)
 15993  001B92  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 15994  001B94  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 15995                           
 15996                           ;menu.c: 199: Lcd_Set_Cursor(2,13);
 15997  001B98  0E0D               	movlw	13
 15998  001B9A  0100               	movlb	0	; () banked
 15999  001B9C  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16000  001B9E  0E02               	movlw	2
 16001  001BA0  EC8A  F048         	call	_Lcd_Set_Cursor
 16002                           
 16003                           ;menu.c: 200: Lcd_Print_String(string2display);
 16004  001BA4  0E94               	movlw	low _string2display
 16005  001BA6  0100               	movlb	0	; () banked
 16006  001BA8  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16007  001BAA  0E01               	movlw	high _string2display
 16008  001BAC  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16009  001BAE  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 16010  001BB2  D05B               	goto	l31536
 16011  001BB4                     l3494:
 16012                           
 16013                           ;menu.c: 204: else {
 16014                           ;menu.c: 205: if(inputPotsArray[array_index].controller_number == -1) {
 16015  001BB4  0100               	movlb	0	; () banked
 16016  001BB6  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 16017  001BB8  0D03               	mullw	3
 16018  001BBA  0E01               	movlw	1
 16019  001BBC  26F3               	addwf	prodl,f,c
 16020  001BBE  0E00               	movlw	0
 16021  001BC0  22F4               	addwfc	prodh,f,c
 16022  001BC2  0E88               	movlw	low _inputPotsArray
 16023  001BC4  24F3               	addwf	prodl,w,c
 16024  001BC6  6ED9               	movwf	fsr2l,c
 16025  001BC8  0E02               	movlw	high _inputPotsArray
 16026  001BCA  20F4               	addwfc	prodh,w,c
 16027  001BCC  6EDA               	movwf	fsr2h,c
 16028  001BCE  28DE               	incf	postinc2,w,c
 16029  001BD0  B4D8               	btfsc	status,2,c
 16030                           
 16031                           ; BSR set to: 0
 16032                           ;menu.c: 206: if(printOnce == 0){
 16033  001BD2  B401               	btfsc	setControllerNumbers@printOnce/(0+8),setControllerNumbers@printOnce& (0+7),c
 16034  001BD4  D00D               	goto	l3498
 16035                           
 16036                           ; BSR set to: 0
 16037                           ;menu.c: 207: Lcd_Set_Cursor(2,7);
 16038  001BD6  0E07               	movlw	7
 16039  001BD8  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16040  001BDA  0E02               	movlw	2
 16041  001BDC  EC8A  F048         	call	_Lcd_Set_Cursor
 16042                           
 16043                           ;menu.c: 208: Lcd_Print_String("  VELOCITY");
 16044  001BE0  0E9E               	movlw	low STR_13
 16045  001BE2  0100               	movlb	0	; () banked
 16046  001BE4  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16047  001BE6  0EFF               	movlw	high STR_13
 16048  001BE8  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16049  001BEA  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 16050                           
 16051                           ;menu.c: 209: printOnce = 1;
 16052  001BEE  8401               	bsf	setControllerNumbers@printOnce/(0+8),setControllerNumbers@printOnce& (0+7),c
 16053  001BF0                     l3498:
 16054                           
 16055                           ;menu.c: 210: }
 16056                           ;menu.c: 211: }
 16057                           ;menu.c: 213: if(inputPotsArray[array_index].controller_number == -2) {
 16058  001BF0  0100               	movlb	0	; () banked
 16059  001BF2  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 16060  001BF4  0D03               	mullw	3
 16061  001BF6  0E01               	movlw	1
 16062  001BF8  26F3               	addwf	prodl,f,c
 16063  001BFA  0E00               	movlw	0
 16064  001BFC  22F4               	addwfc	prodh,f,c
 16065  001BFE  0E88               	movlw	low _inputPotsArray
 16066  001C00  24F3               	addwf	prodl,w,c
 16067  001C02  6ED9               	movwf	fsr2l,c
 16068  001C04  0E02               	movlw	high _inputPotsArray
 16069  001C06  20F4               	addwfc	prodh,w,c
 16070  001C08  6EDA               	movwf	fsr2h,c
 16071  001C0A  0EFE               	movlw	254
 16072  001C0C  18DE               	xorwf	postinc2,w,c
 16073  001C0E  B4D8               	btfsc	status,2,c
 16074                           
 16075                           ; BSR set to: 0
 16076                           ;menu.c: 214: if(printOnce == 0){
 16077  001C10  B401               	btfsc	setControllerNumbers@printOnce/(0+8),setControllerNumbers@printOnce& (0+7),c
 16078  001C12  D00D               	goto	l3500
 16079                           
 16080                           ; BSR set to: 0
 16081                           ;menu.c: 215: Lcd_Set_Cursor(2,7);
 16082  001C14  0E07               	movlw	7
 16083  001C16  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16084  001C18  0E02               	movlw	2
 16085  001C1A  EC8A  F048         	call	_Lcd_Set_Cursor
 16086                           
 16087                           ;menu.c: 216: Lcd_Print_String(" PITCHBEND");
 16088  001C1E  0E88               	movlw	low STR_14
 16089  001C20  0100               	movlb	0	; () banked
 16090  001C22  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16091  001C24  0EFF               	movlw	high STR_14
 16092  001C26  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16093  001C28  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 16094                           
 16095                           ;menu.c: 217: printOnce = 1;
 16096  001C2C  8401               	bsf	setControllerNumbers@printOnce/(0+8),setControllerNumbers@printOnce& (0+7),c
 16097  001C2E                     l3500:
 16098                           
 16099                           ;menu.c: 218: }
 16100                           ;menu.c: 219: }
 16101                           ;menu.c: 220: if(inputPotsArray[array_index].controller_number == -3) {
 16102  001C2E  0100               	movlb	0	; () banked
 16103  001C30  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 16104  001C32  0D03               	mullw	3
 16105  001C34  0E01               	movlw	1
 16106  001C36  26F3               	addwf	prodl,f,c
 16107  001C38  0E00               	movlw	0
 16108  001C3A  22F4               	addwfc	prodh,f,c
 16109  001C3C  0E88               	movlw	low _inputPotsArray
 16110  001C3E  24F3               	addwf	prodl,w,c
 16111  001C40  6ED9               	movwf	fsr2l,c
 16112  001C42  0E02               	movlw	high _inputPotsArray
 16113  001C44  20F4               	addwfc	prodh,w,c
 16114  001C46  6EDA               	movwf	fsr2h,c
 16115  001C48  0EFD               	movlw	253
 16116  001C4A  18DE               	xorwf	postinc2,w,c
 16117  001C4C  B4D8               	btfsc	status,2,c
 16118                           
 16119                           ; BSR set to: 0
 16120                           ;menu.c: 221: if(printOnce == 0){
 16121  001C4E  B401               	btfsc	setControllerNumbers@printOnce/(0+8),setControllerNumbers@printOnce& (0+7),c
 16122  001C50  D00D               	goto	l3502
 16123                           
 16124                           ; BSR set to: 0
 16125                           ;menu.c: 222: Lcd_Set_Cursor(2,7);
 16126  001C52  0E07               	movlw	7
 16127  001C54  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16128  001C56  0E02               	movlw	2
 16129  001C58  EC8A  F048         	call	_Lcd_Set_Cursor
 16130                           
 16131                           ;menu.c: 223: Lcd_Print_String(" MOD.WHEEL");
 16132  001C5C  0E93               	movlw	low STR_15
 16133  001C5E  0100               	movlb	0	; () banked
 16134  001C60  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16135  001C62  0EFF               	movlw	high STR_15
 16136  001C64  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16137  001C66  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 16138  001C6A                     l31536:
 16139                           
 16140                           ;menu.c: 224: printOnce = 1;
 16141  001C6A  8401               	bsf	setControllerNumbers@printOnce/(0+8),setControllerNumbers@printOnce& (0+7),c
 16142  001C6C                     l3502:
 16143                           
 16144                           ;menu.c: 225: }
 16145                           ;menu.c: 226: }
 16146                           ;menu.c: 227: }
 16147                           ;menu.c: 228: }
 16148                           ;menu.c: 230: if(inputPotsArray[array_index].controller_resolution == 1){
 16149  001C6C  0100               	movlb	0	; () banked
 16150  001C6E  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 16151  001C70  0D03               	mullw	3
 16152  001C72  0E88               	movlw	low _inputPotsArray
 16153  001C74  24F3               	addwf	prodl,w,c
 16154  001C76  6ED9               	movwf	fsr2l,c
 16155  001C78  0E02               	movlw	high _inputPotsArray
 16156  001C7A  20F4               	addwfc	prodh,w,c
 16157  001C7C  6EDA               	movwf	fsr2h,c
 16158  001C7E  0102               	movlb	2	; () banked
 16159  001C80  A0DF               	btfss	indf2,0,c
 16160  001C82  D09C               	goto	l3512
 16161                           
 16162                           ; BSR set to: 2
 16163                           ;menu.c: 232: if(inputPotsArray[array_index].controller_number_two_byte >= 0) {
 16164  001C84  0100               	movlb	0	; () banked
 16165  001C86  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 16166  001C88  0D03               	mullw	3
 16167  001C8A  0E02               	movlw	2
 16168  001C8C  26F3               	addwf	prodl,f,c
 16169  001C8E  0E00               	movlw	0
 16170  001C90  22F4               	addwfc	prodh,f,c
 16171  001C92  0E88               	movlw	low _inputPotsArray
 16172  001C94  24F3               	addwf	prodl,w,c
 16173  001C96  6ED9               	movwf	fsr2l,c
 16174  001C98  0E02               	movlw	high _inputPotsArray
 16175  001C9A  20F4               	addwfc	prodh,w,c
 16176  001C9C  6EDA               	movwf	fsr2h,c
 16177  001C9E  0E00               	movlw	0
 16178  001CA0  BEDB               	btfsc	plusw2,7,c
 16179  001CA2  D030               	goto	l3504
 16180                           
 16181                           ; BSR set to: 0
 16182                           ;menu.c: 234: if(printOnce == 0){
 16183  001CA4  B401               	btfsc	setControllerNumbers@printOnce/(0+8),setControllerNumbers@printOnce& (0+7),c
 16184  001CA6  D08A               	goto	l3512
 16185                           
 16186                           ; BSR set to: 0
 16187                           ;menu.c: 235: int2string(inputPotsArray[array_index].controller_number_two_byte);
 16188  001CA8  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 16189  001CAA  0D03               	mullw	3
 16190  001CAC  0E02               	movlw	2
 16191  001CAE  26F3               	addwf	prodl,f,c
 16192  001CB0  0E00               	movlw	0
 16193  001CB2  22F4               	addwfc	prodh,f,c
 16194  001CB4  0E88               	movlw	low _inputPotsArray
 16195  001CB6  24F3               	addwf	prodl,w,c
 16196  001CB8  6ED9               	movwf	fsr2l,c
 16197  001CBA  0E02               	movlw	high _inputPotsArray
 16198  001CBC  20F4               	addwfc	prodh,w,c
 16199  001CBE  6EDA               	movwf	fsr2h,c
 16200  001CC0  50DF               	movf	indf2,w,c
 16201  001CC2  6F60               	movwf	int2string@number& (0+255),b
 16202  001CC4  6B61               	clrf	(int2string@number+1)& (0+255),b
 16203  001CC6  BF60               	btfsc	int2string@number& (0+255),7,b
 16204  001CC8  0761               	decf	(int2string@number+1)& (0+255),f,b
 16205  001CCA  EC42  F03B         	call	_int2string	;wreg free
 16206                           
 16207                           ;menu.c: 236: Lcd_Set_Cursor(2,7);
 16208  001CCE  0E07               	movlw	7
 16209  001CD0  0100               	movlb	0	; () banked
 16210  001CD2  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16211  001CD4  0E02               	movlw	2
 16212  001CD6  EC8A  F048         	call	_Lcd_Set_Cursor
 16213                           
 16214                           ;menu.c: 237: Lcd_Print_String("         ");
 16215  001CDA  0E6B               	movlw	low (STR_10+7)
 16216  001CDC  0100               	movlb	0	; () banked
 16217  001CDE  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16218  001CE0  0EFD               	movlw	high (STR_10+7)
 16219  001CE2  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16220  001CE4  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 16221                           
 16222                           ;menu.c: 238: Lcd_Set_Cursor(2,13);
 16223  001CE8  0E0D               	movlw	13
 16224  001CEA  0100               	movlb	0	; () banked
 16225  001CEC  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16226  001CEE  0E02               	movlw	2
 16227  001CF0  EC8A  F048         	call	_Lcd_Set_Cursor
 16228                           
 16229                           ;menu.c: 239: Lcd_Print_String(string2display);
 16230  001CF4  0E94               	movlw	low _string2display
 16231  001CF6  0100               	movlb	0	; () banked
 16232  001CF8  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16233  001CFA  0E01               	movlw	high _string2display
 16234  001CFC  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16235  001CFE  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 16236  001D02  D05B               	goto	l31584
 16237  001D04                     l3504:
 16238                           
 16239                           ;menu.c: 243: else {
 16240                           ;menu.c: 244: if(inputPotsArray[array_index].controller_number_two_byte == -1) {
 16241  001D04  0100               	movlb	0	; () banked
 16242  001D06  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 16243  001D08  0D03               	mullw	3
 16244  001D0A  0E02               	movlw	2
 16245  001D0C  26F3               	addwf	prodl,f,c
 16246  001D0E  0E00               	movlw	0
 16247  001D10  22F4               	addwfc	prodh,f,c
 16248  001D12  0E88               	movlw	low _inputPotsArray
 16249  001D14  24F3               	addwf	prodl,w,c
 16250  001D16  6ED9               	movwf	fsr2l,c
 16251  001D18  0E02               	movlw	high _inputPotsArray
 16252  001D1A  20F4               	addwfc	prodh,w,c
 16253  001D1C  6EDA               	movwf	fsr2h,c
 16254  001D1E  28DE               	incf	postinc2,w,c
 16255  001D20  B4D8               	btfsc	status,2,c
 16256                           
 16257                           ; BSR set to: 0
 16258                           ;menu.c: 245: if(printOnce == 0){
 16259  001D22  B401               	btfsc	setControllerNumbers@printOnce/(0+8),setControllerNumbers@printOnce& (0+7),c
 16260  001D24  D00D               	goto	l3508
 16261                           
 16262                           ; BSR set to: 0
 16263                           ;menu.c: 246: Lcd_Set_Cursor(2,7);
 16264  001D26  0E07               	movlw	7
 16265  001D28  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16266  001D2A  0E02               	movlw	2
 16267  001D2C  EC8A  F048         	call	_Lcd_Set_Cursor
 16268                           
 16269                           ;menu.c: 247: Lcd_Print_String("  VELOCITY");
 16270  001D30  0E9E               	movlw	low STR_13
 16271  001D32  0100               	movlb	0	; () banked
 16272  001D34  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16273  001D36  0EFF               	movlw	high STR_13
 16274  001D38  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16275  001D3A  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 16276                           
 16277                           ;menu.c: 248: printOnce = 1;
 16278  001D3E  8401               	bsf	setControllerNumbers@printOnce/(0+8),setControllerNumbers@printOnce& (0+7),c
 16279  001D40                     l3508:
 16280                           
 16281                           ;menu.c: 249: }
 16282                           ;menu.c: 250: }
 16283                           ;menu.c: 252: if(inputPotsArray[array_index].controller_number_two_byte == -2) {
 16284  001D40  0100               	movlb	0	; () banked
 16285  001D42  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 16286  001D44  0D03               	mullw	3
 16287  001D46  0E02               	movlw	2
 16288  001D48  26F3               	addwf	prodl,f,c
 16289  001D4A  0E00               	movlw	0
 16290  001D4C  22F4               	addwfc	prodh,f,c
 16291  001D4E  0E88               	movlw	low _inputPotsArray
 16292  001D50  24F3               	addwf	prodl,w,c
 16293  001D52  6ED9               	movwf	fsr2l,c
 16294  001D54  0E02               	movlw	high _inputPotsArray
 16295  001D56  20F4               	addwfc	prodh,w,c
 16296  001D58  6EDA               	movwf	fsr2h,c
 16297  001D5A  0EFE               	movlw	254
 16298  001D5C  18DE               	xorwf	postinc2,w,c
 16299  001D5E  B4D8               	btfsc	status,2,c
 16300                           
 16301                           ; BSR set to: 0
 16302                           ;menu.c: 253: if(printOnce == 0){
 16303  001D60  B401               	btfsc	setControllerNumbers@printOnce/(0+8),setControllerNumbers@printOnce& (0+7),c
 16304  001D62  D00D               	goto	l3510
 16305                           
 16306                           ; BSR set to: 0
 16307                           ;menu.c: 254: Lcd_Set_Cursor(2,7);
 16308  001D64  0E07               	movlw	7
 16309  001D66  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16310  001D68  0E02               	movlw	2
 16311  001D6A  EC8A  F048         	call	_Lcd_Set_Cursor
 16312                           
 16313                           ;menu.c: 255: Lcd_Print_String(" PITCHBEND");
 16314  001D6E  0E88               	movlw	low STR_14
 16315  001D70  0100               	movlb	0	; () banked
 16316  001D72  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16317  001D74  0EFF               	movlw	high STR_14
 16318  001D76  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16319  001D78  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 16320                           
 16321                           ;menu.c: 256: printOnce = 1;
 16322  001D7C  8401               	bsf	setControllerNumbers@printOnce/(0+8),setControllerNumbers@printOnce& (0+7),c
 16323  001D7E                     l3510:
 16324                           
 16325                           ;menu.c: 257: }
 16326                           ;menu.c: 258: }
 16327                           ;menu.c: 259: if(inputPotsArray[array_index].controller_number_two_byte == -3) {
 16328  001D7E  0100               	movlb	0	; () banked
 16329  001D80  51C8               	movf	setControllerNumbers@array_index& (0+255),w,b
 16330  001D82  0D03               	mullw	3
 16331  001D84  0E02               	movlw	2
 16332  001D86  26F3               	addwf	prodl,f,c
 16333  001D88  0E00               	movlw	0
 16334  001D8A  22F4               	addwfc	prodh,f,c
 16335  001D8C  0E88               	movlw	low _inputPotsArray
 16336  001D8E  24F3               	addwf	prodl,w,c
 16337  001D90  6ED9               	movwf	fsr2l,c
 16338  001D92  0E02               	movlw	high _inputPotsArray
 16339  001D94  20F4               	addwfc	prodh,w,c
 16340  001D96  6EDA               	movwf	fsr2h,c
 16341  001D98  0EFD               	movlw	253
 16342  001D9A  18DE               	xorwf	postinc2,w,c
 16343  001D9C  B4D8               	btfsc	status,2,c
 16344                           
 16345                           ; BSR set to: 0
 16346                           ;menu.c: 260: if(printOnce == 0){
 16347  001D9E  B401               	btfsc	setControllerNumbers@printOnce/(0+8),setControllerNumbers@printOnce& (0+7),c
 16348  001DA0  D00D               	goto	l3512
 16349                           
 16350                           ; BSR set to: 0
 16351                           ;menu.c: 261: Lcd_Set_Cursor(2,7);
 16352  001DA2  0E07               	movlw	7
 16353  001DA4  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16354  001DA6  0E02               	movlw	2
 16355  001DA8  EC8A  F048         	call	_Lcd_Set_Cursor
 16356                           
 16357                           ;menu.c: 262: Lcd_Print_String(" MOD.WHEEL");
 16358  001DAC  0E93               	movlw	low STR_15
 16359  001DAE  0100               	movlb	0	; () banked
 16360  001DB0  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16361  001DB2  0EFF               	movlw	high STR_15
 16362  001DB4  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16363  001DB6  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 16364  001DBA                     l31584:
 16365                           
 16366                           ;menu.c: 263: printOnce = 1;
 16367  001DBA  8401               	bsf	setControllerNumbers@printOnce/(0+8),setControllerNumbers@printOnce& (0+7),c
 16368  001DBC                     l3512:
 16369  001DBC  B605               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 16370  001DBE  0012               	return	
 16371  001DC0  D578               	goto	l3478
 16372  001DC2                     __end_of_setControllerNumbers:
 16373                           	opt stack 0
 16374                           tblptru	equ	0xFF8
 16375                           tblptrh	equ	0xFF7
 16376                           tblptrl	equ	0xFF6
 16377                           tablat	equ	0xFF5
 16378                           prodh	equ	0xFF4
 16379                           prodl	equ	0xFF3
 16380                           intcon	equ	0xFF2
 16381                           intcon2	equ	0xFF1
 16382                           postinc0	equ	0xFEE
 16383                           wreg	equ	0xFE8
 16384                           postinc1	equ	0xFE6
 16385                           indf2	equ	0xFDF
 16386                           postinc2	equ	0xFDE
 16387                           postdec2	equ	0xFDD
 16388                           plusw2	equ	0xFDB
 16389                           fsr2h	equ	0xFDA
 16390                           fsr2l	equ	0xFD9
 16391                           status	equ	0xFD8
 16392                           
 16393 ;; *************** function _Function_D_2 *****************
 16394 ;; Defined at:
 16395 ;;		line 888 in file "menu.c"
 16396 ;; Parameters:    Size  Location     Type
 16397 ;;		None
 16398 ;; Auto vars:     Size  Location     Type
 16399 ;;		None
 16400 ;; Return value:  Size  Location     Type
 16401 ;;                  1    wreg      void 
 16402 ;; Registers used:
 16403 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16404 ;; Tracked objects:
 16405 ;;		On entry : 0/0
 16406 ;;		On exit  : 0/0
 16407 ;;		Unchanged: 0/0
 16408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16412 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16413 ;;Total ram usage:        0 bytes
 16414 ;; Hardware stack levels used:    1
 16415 ;; Hardware stack levels required when called:   16
 16416 ;; This function calls:
 16417 ;;		_Busy_eep
 16418 ;;		_Lcd_Print_String
 16419 ;;		_Lcd_Set_Cursor
 16420 ;;		_Write_b_eep
 16421 ;;		_calculate_alpha
 16422 ;;		_int2string
 16423 ;;		_un_block_code
 16424 ;; This function is called by:
 16425 ;;		_Function_D
 16426 ;; This function uses a non-reentrant model
 16427 ;;
 16428                           
 16429                           	psect	text46
 16430  009050                     __ptext46:
 16431                           	opt stack 0
 16432  009050                     _Function_D_2:
 16433                           	opt stack 12
 16434                           
 16435                           ;menu.c: 890: which_screen = POTS_ALPHA_MENU;
 16436                           
 16437                           ;incstack = 0
 16438  009050  0E10               	movlw	16
 16439  009052  6E4E               	movwf	_which_screen,c
 16440                           
 16441                           ;menu.c: 891: lcd_print_once = 0;
 16442  009054  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 16443                           
 16444                           ;menu.c: 892: encoder_click = 0;
 16445  009056  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 16446                           
 16447                           ;menu.c: 894: potsAlphaMenu.selector = ema_integer;
 16448  009058  C0FE  F155         	movff	_ema_integer,_potsAlphaMenu+2
 16449                           
 16450                           ;menu.c: 896: while(encoder_click == 0) {
 16451  00905C  D018               	goto	l3679
 16452  00905E                     
 16453                           ;menu.c: 900: un_block_code();
 16454  00905E  ECF4  F04C         	call	_un_block_code	;wreg free
 16455                           
 16456                           ;menu.c: 903: if (lcd_print_once == 0) {
 16457  009062  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 16458  009064  D013               	goto	l3681
 16459                           
 16460                           ;menu.c: 904: int2string(potsAlphaMenu.selector);
 16461  009066  C155  F060         	movff	_potsAlphaMenu+2,int2string@number
 16462  00906A  0100               	movlb	0	; () banked
 16463  00906C  6B61               	clrf	(int2string@number+1)& (0+255),b
 16464  00906E  EC42  F03B         	call	_int2string	;wreg free
 16465                           
 16466                           ;menu.c: 905: Lcd_Set_Cursor(2,13);
 16467  009072  0E0D               	movlw	13
 16468  009074  0100               	movlb	0	; () banked
 16469  009076  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 16470  009078  0E02               	movlw	2
 16471  00907A  EC8A  F048         	call	_Lcd_Set_Cursor
 16472                           
 16473                           ;menu.c: 906: Lcd_Print_String(string2display);
 16474  00907E  0E94               	movlw	low _string2display
 16475  009080  0100               	movlb	0	; () banked
 16476  009082  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 16477  009084  0E01               	movlw	high _string2display
 16478  009086  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 16479  009088  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 16480  00908C                     l3681:
 16481                           
 16482                           ;menu.c: 907: }
 16483                           ;menu.c: 908: lcd_print_once = 1;
 16484  00908C  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 16485  00908E                     l3679:
 16486  00908E  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 16487  009090  D7E6               	goto	l3680
 16488                           
 16489                           ;menu.c: 909: }
 16490                           ;menu.c: 911: ema_integer = potsAlphaMenu.selector;
 16491  009092  C155  F0FE         	movff	_potsAlphaMenu+2,_ema_integer
 16492                           
 16493                           ;menu.c: 912: (Busy_eep(), Write_b_eep(0x03,ema_integer));
 16494  009096  EC4E  F04D         	call	_Busy_eep	;wreg free
 16495  00909A  0E00               	movlw	0
 16496  00909C  0100               	movlb	0	; () banked
 16497  00909E  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 16498  0090A0  0E03               	movlw	3
 16499  0090A2  6F60               	movwf	Write_b_eep@badd& (0+255),b
 16500  0090A4  C0FE  F062         	movff	_ema_integer,Write_b_eep@bdat
 16501  0090A8  ECC2  F04A         	call	_Write_b_eep	;wreg free
 16502                           
 16503                           ;menu.c: 913: calculate_alpha();
 16504  0090AC  EC0E  F04A         	call	_calculate_alpha	;wreg free
 16505  0090B0  0012               	return		;funcret
 16506  0090B2                     __end_of_Function_D_2:
 16507                           	opt stack 0
 16508                           tblptru	equ	0xFF8
 16509                           tblptrh	equ	0xFF7
 16510                           tblptrl	equ	0xFF6
 16511                           tablat	equ	0xFF5
 16512                           prodh	equ	0xFF4
 16513                           prodl	equ	0xFF3
 16514                           intcon	equ	0xFF2
 16515                           intcon2	equ	0xFF1
 16516                           postinc0	equ	0xFEE
 16517                           wreg	equ	0xFE8
 16518                           postinc1	equ	0xFE6
 16519                           indf2	equ	0xFDF
 16520                           postinc2	equ	0xFDE
 16521                           postdec2	equ	0xFDD
 16522                           plusw2	equ	0xFDB
 16523                           fsr2h	equ	0xFDA
 16524                           fsr2l	equ	0xFD9
 16525                           status	equ	0xFD8
 16526                           
 16527 ;; *************** function _calculate_alpha *****************
 16528 ;; Defined at:
 16529 ;;		line 24 in file "potentiometers.c"
 16530 ;; Parameters:    Size  Location     Type
 16531 ;;		None
 16532 ;; Auto vars:     Size  Location     Type
 16533 ;;		None
 16534 ;; Return value:  Size  Location     Type
 16535 ;;                  1    wreg      void 
 16536 ;; Registers used:
 16537 ;;		wreg, status,2, status,0, cstack
 16538 ;; Tracked objects:
 16539 ;;		On entry : 0/0
 16540 ;;		On exit  : 0/0
 16541 ;;		Unchanged: 0/0
 16542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16546 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16547 ;;Total ram usage:        0 bytes
 16548 ;; Hardware stack levels used:    1
 16549 ;; Hardware stack levels required when called:    6
 16550 ;; This function calls:
 16551 ;;		___fldiv
 16552 ;;		___xxtofl
 16553 ;; This function is called by:
 16554 ;;		_Function_D_2
 16555 ;;		_main
 16556 ;; This function uses a non-reentrant model
 16557 ;;
 16558                           
 16559                           	psect	text47
 16560  00941C                     __ptext47:
 16561                           	opt stack 0
 16562  00941C                     _calculate_alpha:
 16563                           	opt stack 21
 16564                           
 16565                           ;potentiometers.c: 25: (float)ema_alpha = (ema_integer / 100.0);
 16566                           
 16567                           ;incstack = 0
 16568  00941C  0100               	movlb	0	; () banked
 16569  00941E  51FE               	movf	_ema_integer& (0+255),w,b
 16570  009420  6F60               	movwf	___xxtofl@val& (0+255),b
 16571  009422  6B61               	clrf	(___xxtofl@val+1)& (0+255),b
 16572  009424  6B62               	clrf	(___xxtofl@val+2)& (0+255),b
 16573  009426  6B63               	clrf	(___xxtofl@val+3)& (0+255),b
 16574  009428  0E00               	movlw	0
 16575  00942A  EC14  F030         	call	___xxtofl
 16576  00942E  C060  F087         	movff	?___xxtofl,___fldiv@b
 16577  009432  C061  F088         	movff	?___xxtofl+1,___fldiv@b+1
 16578  009436  C062  F089         	movff	?___xxtofl+2,___fldiv@b+2
 16579  00943A  C063  F08A         	movff	?___xxtofl+3,___fldiv@b+3
 16580  00943E  0E00               	movlw	0
 16581  009440  0100               	movlb	0	; () banked
 16582  009442  6F8B               	movwf	___fldiv@a& (0+255),b
 16583  009444  0E00               	movlw	0
 16584  009446  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 16585  009448  0EC8               	movlw	200
 16586  00944A  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 16587  00944C  0E42               	movlw	66
 16588  00944E  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 16589  009450  EC37  F01E         	call	___fldiv	;wreg free
 16590  009454  C087  F104         	movff	?___fldiv,_ema_alpha
 16591  009458  C088  F105         	movff	?___fldiv+1,_ema_alpha+1
 16592  00945C  C089  F106         	movff	?___fldiv+2,_ema_alpha+2
 16593  009460  C08A  F107         	movff	?___fldiv+3,_ema_alpha+3
 16594  009464  0012               	return		;funcret
 16595  009466                     __end_of_calculate_alpha:
 16596                           	opt stack 0
 16597                           tblptru	equ	0xFF8
 16598                           tblptrh	equ	0xFF7
 16599                           tblptrl	equ	0xFF6
 16600                           tablat	equ	0xFF5
 16601                           prodh	equ	0xFF4
 16602                           prodl	equ	0xFF3
 16603                           intcon	equ	0xFF2
 16604                           intcon2	equ	0xFF1
 16605                           postinc0	equ	0xFEE
 16606                           wreg	equ	0xFE8
 16607                           postinc1	equ	0xFE6
 16608                           indf2	equ	0xFDF
 16609                           postinc2	equ	0xFDE
 16610                           postdec2	equ	0xFDD
 16611                           plusw2	equ	0xFDB
 16612                           fsr2h	equ	0xFDA
 16613                           fsr2l	equ	0xFD9
 16614                           status	equ	0xFD8
 16615                           
 16616 ;; *************** function ___fldiv *****************
 16617 ;; Defined at:
 16618 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcdiv.c"
 16619 ;; Parameters:    Size  Location     Type
 16620 ;;  b               4   39[BANK0 ] void 
 16621 ;;  a               4   43[BANK0 ] void 
 16622 ;; Auto vars:     Size  Location     Type
 16623 ;;  grs             4   58[BANK0 ] unsigned long 
 16624 ;;  rem             4   52[BANK0 ] unsigned long 
 16625 ;;  new_exp         2   56[BANK0 ] int 
 16626 ;;  aexp            1   63[BANK0 ] unsigned char 
 16627 ;;  bexp            1   62[BANK0 ] unsigned char 
 16628 ;;  sign            1   51[BANK0 ] unsigned char 
 16629 ;; Return value:  Size  Location     Type
 16630 ;;                  4   39[BANK0 ] unsigned char 
 16631 ;; Registers used:
 16632 ;;		wreg, status,2, status,0
 16633 ;; Tracked objects:
 16634 ;;		On entry : 0/0
 16635 ;;		On exit  : 0/0
 16636 ;;		Unchanged: 0/0
 16637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16638 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16639 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16640 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16641 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16642 ;;Total ram usage:       25 bytes
 16643 ;; Hardware stack levels used:    1
 16644 ;; Hardware stack levels required when called:    5
 16645 ;; This function calls:
 16646 ;;		Nothing
 16647 ;; This function is called by:
 16648 ;;		_calculate_alpha
 16649 ;;		_calculate_pulse_length
 16650 ;; This function uses a non-reentrant model
 16651 ;;
 16652                           
 16653                           	psect	text48
 16654  003C6E                     __ptext48:
 16655                           	opt stack 0
 16656  003C6E                     ___fldiv:
 16657                           	opt stack 22
 16658                           
 16659                           ;incstack = 0
 16660  003C6E  0100               	movlb	0	; () banked
 16661  003C70  518A               	movf	(___fldiv@b+3)& (0+255),w,b
 16662  003C72  0B80               	andlw	128
 16663  003C74  6F93               	movwf	___fldiv@sign& (0+255),b
 16664  003C76  518A               	movf	(___fldiv@b+3)& (0+255),w,b
 16665  003C78  258A               	addwf	(___fldiv@b+3)& (0+255),w,b
 16666  003C7A  6F9E               	movwf	___fldiv@bexp& (0+255),b
 16667                           
 16668                           ; BSR set to: 0
 16669  003C7C  BF89               	btfsc	(___fldiv@b+2)& (0+255),7,b
 16670                           
 16671                           ; BSR set to: 0
 16672  003C7E  819E               	bsf	___fldiv@bexp& (0+255),0,b
 16673                           
 16674                           ; BSR set to: 0
 16675                           
 16676                           ; BSR set to: 0
 16677  003C80  519E               	movf	___fldiv@bexp& (0+255),w,b
 16678  003C82  B4D8               	btfsc	status,2,c
 16679  003C84  D00D               	goto	l6158
 16680                           
 16681                           ; BSR set to: 0
 16682  003C86  299E               	incf	___fldiv@bexp& (0+255),w,b
 16683  003C88  A4D8               	btfss	status,2,c
 16684  003C8A  D008               	goto	l6159
 16685                           
 16686                           ; BSR set to: 0
 16687  003C8C  0E00               	movlw	0
 16688  003C8E  6F87               	movwf	___fldiv@b& (0+255),b
 16689  003C90  0E00               	movlw	0
 16690  003C92  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16691  003C94  0E00               	movlw	0
 16692  003C96  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16693  003C98  0E00               	movlw	0
 16694  003C9A  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16695  003C9C                     l6159:
 16696                           
 16697                           ; BSR set to: 0
 16698                           
 16699                           ; BSR set to: 0
 16700  003C9C  8F89               	bsf	(___fldiv@b+2)& (0+255),7,b
 16701  003C9E  D006               	goto	L2
 16702  003CA0                     l6158:
 16703                           
 16704                           ; BSR set to: 0
 16705                           
 16706                           ; BSR set to: 0
 16707  003CA0  0E00               	movlw	0
 16708  003CA2  6F87               	movwf	___fldiv@b& (0+255),b
 16709  003CA4  0E00               	movlw	0
 16710  003CA6  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16711  003CA8  0E00               	movlw	0
 16712  003CAA  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16713  003CAC                     L2:
 16714  003CAC  0E00               	movlw	0
 16715  003CAE  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16716                           
 16717                           ; BSR set to: 0
 16718                           
 16719                           ; BSR set to: 0
 16720  003CB0  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 16721  003CB2  0B80               	andlw	128
 16722  003CB4  1B93               	xorwf	___fldiv@sign& (0+255),f,b
 16723                           
 16724                           ; BSR set to: 0
 16725  003CB6  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 16726  003CB8  258E               	addwf	(___fldiv@a+3)& (0+255),w,b
 16727  003CBA  6F9F               	movwf	___fldiv@aexp& (0+255),b
 16728                           
 16729                           ; BSR set to: 0
 16730  003CBC  BF8D               	btfsc	(___fldiv@a+2)& (0+255),7,b
 16731                           
 16732                           ; BSR set to: 0
 16733  003CBE  819F               	bsf	___fldiv@aexp& (0+255),0,b
 16734                           
 16735                           ; BSR set to: 0
 16736                           
 16737                           ; BSR set to: 0
 16738  003CC0  519F               	movf	___fldiv@aexp& (0+255),w,b
 16739  003CC2  B4D8               	btfsc	status,2,c
 16740  003CC4  D00D               	goto	l6162
 16741                           
 16742                           ; BSR set to: 0
 16743  003CC6  299F               	incf	___fldiv@aexp& (0+255),w,b
 16744  003CC8  A4D8               	btfss	status,2,c
 16745  003CCA  D008               	goto	l6163
 16746                           
 16747                           ; BSR set to: 0
 16748  003CCC  0E00               	movlw	0
 16749  003CCE  6F8B               	movwf	___fldiv@a& (0+255),b
 16750  003CD0  0E00               	movlw	0
 16751  003CD2  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 16752  003CD4  0E00               	movlw	0
 16753  003CD6  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 16754  003CD8  0E00               	movlw	0
 16755  003CDA  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 16756  003CDC                     l6163:
 16757                           
 16758                           ; BSR set to: 0
 16759                           
 16760                           ; BSR set to: 0
 16761  003CDC  8F8D               	bsf	(___fldiv@a+2)& (0+255),7,b
 16762  003CDE  D006               	goto	L3
 16763  003CE0                     l6162:
 16764                           
 16765                           ; BSR set to: 0
 16766                           
 16767                           ; BSR set to: 0
 16768  003CE0  0E00               	movlw	0
 16769  003CE2  6F8B               	movwf	___fldiv@a& (0+255),b
 16770  003CE4  0E00               	movlw	0
 16771  003CE6  6F8C               	movwf	(___fldiv@a+1)& (0+255),b
 16772  003CE8  0E00               	movlw	0
 16773  003CEA  6F8D               	movwf	(___fldiv@a+2)& (0+255),b
 16774  003CEC                     L3:
 16775  003CEC  0E00               	movlw	0
 16776  003CEE  6F8E               	movwf	(___fldiv@a+3)& (0+255),b
 16777                           
 16778                           ; BSR set to: 0
 16779                           
 16780                           ; BSR set to: 0
 16781  003CF0  518B               	movf	___fldiv@a& (0+255),w,b
 16782  003CF2  118C               	iorwf	(___fldiv@a+1)& (0+255),w,b
 16783  003CF4  118D               	iorwf	(___fldiv@a+2)& (0+255),w,b
 16784  003CF6  118E               	iorwf	(___fldiv@a+3)& (0+255),w,b
 16785  003CF8  A4D8               	btfss	status,2,c
 16786  003CFA  D015               	goto	l6165
 16787                           
 16788                           ; BSR set to: 0
 16789  003CFC  0E00               	movlw	0
 16790  003CFE  6F87               	movwf	___fldiv@b& (0+255),b
 16791  003D00  0E00               	movlw	0
 16792  003D02  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16793  003D04  0E00               	movlw	0
 16794  003D06  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16795  003D08  0E00               	movlw	0
 16796  003D0A  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16797                           
 16798                           ; BSR set to: 0
 16799  003D0C  0E80               	movlw	128
 16800  003D0E  1389               	iorwf	(___fldiv@b+2)& (0+255),f,b
 16801  003D10  0E7F               	movlw	127
 16802  003D12  138A               	iorwf	(___fldiv@b+3)& (0+255),f,b
 16803                           
 16804                           ; BSR set to: 0
 16805  003D14  C087  F087         	movff	___fldiv@b,?___fldiv
 16806  003D18  C088  F088         	movff	___fldiv@b+1,?___fldiv+1
 16807  003D1C  C089  F089         	movff	___fldiv@b+2,?___fldiv+2
 16808  003D20  C08A  F08A         	movff	___fldiv@b+3,?___fldiv+3
 16809                           
 16810                           ; BSR set to: 0
 16811  003D24  0012               	return	
 16812  003D26                     l6165:
 16813                           
 16814                           ; BSR set to: 0
 16815                           
 16816                           ; BSR set to: 0
 16817  003D26  519E               	movf	___fldiv@bexp& (0+255),w,b
 16818  003D28  A4D8               	btfss	status,2,c
 16819  003D2A  D011               	goto	l6167
 16820                           
 16821                           ; BSR set to: 0
 16822  003D2C  0E00               	movlw	0
 16823  003D2E  6F87               	movwf	___fldiv@b& (0+255),b
 16824  003D30  0E00               	movlw	0
 16825  003D32  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16826  003D34  0E00               	movlw	0
 16827  003D36  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16828  003D38  0E00               	movlw	0
 16829  003D3A  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16830                           
 16831                           ; BSR set to: 0
 16832  003D3C  C087  F087         	movff	___fldiv@b,?___fldiv
 16833  003D40  C088  F088         	movff	___fldiv@b+1,?___fldiv+1
 16834  003D44  C089  F089         	movff	___fldiv@b+2,?___fldiv+2
 16835  003D48  C08A  F08A         	movff	___fldiv@b+3,?___fldiv+3
 16836                           
 16837                           ; BSR set to: 0
 16838  003D4C  0012               	return	
 16839  003D4E                     l6167:
 16840                           
 16841                           ; BSR set to: 0
 16842                           
 16843                           ; BSR set to: 0
 16844  003D4E  519F               	movf	___fldiv@aexp& (0+255),w,b
 16845  003D50  6F8F               	movwf	??___fldiv& (0+255),b
 16846  003D52  6B90               	clrf	(??___fldiv+1)& (0+255),b
 16847  003D54  1F8F               	comf	??___fldiv& (0+255),f,b
 16848  003D56  1F90               	comf	(??___fldiv+1)& (0+255),f,b
 16849  003D58  4B8F               	infsnz	??___fldiv& (0+255),f,b
 16850  003D5A  2B90               	incf	(??___fldiv+1)& (0+255),f,b
 16851  003D5C  519E               	movf	___fldiv@bexp& (0+255),w,b
 16852  003D5E  6F91               	movwf	(??___fldiv+2)& (0+255),b
 16853  003D60  6B92               	clrf	(??___fldiv+3)& (0+255),b
 16854  003D62  518F               	movf	??___fldiv& (0+255),w,b
 16855  003D64  2791               	addwf	(??___fldiv+2)& (0+255),f,b
 16856  003D66  5190               	movf	(??___fldiv+1)& (0+255),w,b
 16857  003D68  2392               	addwfc	(??___fldiv+3)& (0+255),f,b
 16858  003D6A  0E7F               	movlw	127
 16859  003D6C  2591               	addwf	(??___fldiv+2)& (0+255),w,b
 16860  003D6E  6F98               	movwf	___fldiv@new_exp& (0+255),b
 16861  003D70  0E00               	movlw	0
 16862  003D72  2192               	addwfc	(??___fldiv+3)& (0+255),w,b
 16863  003D74  6F99               	movwf	(___fldiv@new_exp+1)& (0+255),b
 16864                           
 16865                           ; BSR set to: 0
 16866  003D76  C087  F094         	movff	___fldiv@b,___fldiv@rem
 16867  003D7A  C088  F095         	movff	___fldiv@b+1,___fldiv@rem+1
 16868  003D7E  C089  F096         	movff	___fldiv@b+2,___fldiv@rem+2
 16869  003D82  C08A  F097         	movff	___fldiv@b+3,___fldiv@rem+3
 16870                           
 16871                           ; BSR set to: 0
 16872  003D86  0E00               	movlw	0
 16873  003D88  6F87               	movwf	___fldiv@b& (0+255),b
 16874  003D8A  0E00               	movlw	0
 16875  003D8C  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 16876  003D8E  0E00               	movlw	0
 16877  003D90  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 16878  003D92  0E00               	movlw	0
 16879  003D94  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 16880                           
 16881                           ; BSR set to: 0
 16882  003D96  0E00               	movlw	0
 16883  003D98  6F9A               	movwf	___fldiv@grs& (0+255),b
 16884  003D9A  0E00               	movlw	0
 16885  003D9C  6F9B               	movwf	(___fldiv@grs+1)& (0+255),b
 16886  003D9E  0E00               	movlw	0
 16887  003DA0  6F9C               	movwf	(___fldiv@grs+2)& (0+255),b
 16888  003DA2  0E00               	movlw	0
 16889  003DA4  6F9D               	movwf	(___fldiv@grs+3)& (0+255),b
 16890                           
 16891                           ; BSR set to: 0
 16892  003DA6  0E00               	movlw	0
 16893  003DA8  6F9F               	movwf	___fldiv@aexp& (0+255),b
 16894  003DAA  D028               	goto	l6168
 16895  003DAC                     
 16896                           ; BSR set to: 0
 16897                           
 16898                           ; BSR set to: 0
 16899  003DAC  519F               	movf	___fldiv@aexp& (0+255),w,b
 16900  003DAE  B4D8               	btfsc	status,2,c
 16901  003DB0  D011               	goto	l6170
 16902                           
 16903                           ; BSR set to: 0
 16904  003DB2  90D8               	bcf	status,0,c
 16905  003DB4  3794               	rlcf	___fldiv@rem& (0+255),f,b
 16906  003DB6  3795               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 16907  003DB8  3796               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 16908  003DBA  3797               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 16909  003DBC  90D8               	bcf	status,0,c
 16910  003DBE  3787               	rlcf	___fldiv@b& (0+255),f,b
 16911  003DC0  3788               	rlcf	(___fldiv@b+1)& (0+255),f,b
 16912  003DC2  3789               	rlcf	(___fldiv@b+2)& (0+255),f,b
 16913  003DC4  378A               	rlcf	(___fldiv@b+3)& (0+255),f,b
 16914                           
 16915                           ; BSR set to: 0
 16916  003DC6  BF9D               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 16917                           
 16918                           ; BSR set to: 0
 16919  003DC8  8187               	bsf	___fldiv@b& (0+255),0,b
 16920                           
 16921                           ; BSR set to: 0
 16922  003DCA  90D8               	bcf	status,0,c
 16923  003DCC  379A               	rlcf	___fldiv@grs& (0+255),f,b
 16924  003DCE  379B               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 16925  003DD0  379C               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 16926  003DD2  379D               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 16927  003DD4                     l6170:
 16928                           
 16929                           ; BSR set to: 0
 16930                           
 16931                           ; BSR set to: 0
 16932  003DD4  518B               	movf	___fldiv@a& (0+255),w,b
 16933  003DD6  5D94               	subwf	___fldiv@rem& (0+255),w,b
 16934  003DD8  518C               	movf	(___fldiv@a+1)& (0+255),w,b
 16935  003DDA  5995               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 16936  003DDC  518D               	movf	(___fldiv@a+2)& (0+255),w,b
 16937  003DDE  5996               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 16938  003DE0  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 16939  003DE2  5997               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 16940  003DE4  A0D8               	btfss	status,0,c
 16941  003DE6  D009               	goto	l6172
 16942                           
 16943                           ; BSR set to: 0
 16944  003DE8  8D9D               	bsf	(___fldiv@grs+3)& (0+255),6,b
 16945                           
 16946                           ; BSR set to: 0
 16947  003DEA  518B               	movf	___fldiv@a& (0+255),w,b
 16948  003DEC  5F94               	subwf	___fldiv@rem& (0+255),f,b
 16949  003DEE  518C               	movf	(___fldiv@a+1)& (0+255),w,b
 16950  003DF0  5B95               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 16951  003DF2  518D               	movf	(___fldiv@a+2)& (0+255),w,b
 16952  003DF4  5B96               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 16953  003DF6  518E               	movf	(___fldiv@a+3)& (0+255),w,b
 16954  003DF8  5B97               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 16955  003DFA                     l6172:
 16956                           
 16957                           ; BSR set to: 0
 16958                           
 16959                           ; BSR set to: 0
 16960  003DFA  2B9F               	incf	___fldiv@aexp& (0+255),f,b
 16961  003DFC                     l6168:
 16962                           
 16963                           ; BSR set to: 0
 16964  003DFC  0E19               	movlw	25
 16965  003DFE  659F               	cpfsgt	___fldiv@aexp& (0+255),b
 16966  003E00  D7D5               	goto	l6169
 16967                           
 16968                           ; BSR set to: 0
 16969                           
 16970                           ; BSR set to: 0
 16971  003E02  5194               	movf	___fldiv@rem& (0+255),w,b
 16972  003E04  1195               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 16973  003E06  1196               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 16974  003E08  1197               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 16975  003E0A  B4D8               	btfsc	status,2,c
 16976  003E0C  D011               	goto	l6175
 16977                           
 16978                           ; BSR set to: 0
 16979  003E0E  819A               	bsf	___fldiv@grs& (0+255),0,b
 16980                           
 16981                           ; BSR set to: 0
 16982  003E10  D00F               	goto	l6175
 16983  003E12                     
 16984                           ; BSR set to: 0
 16985                           
 16986                           ; BSR set to: 0
 16987  003E12  90D8               	bcf	status,0,c
 16988  003E14  3787               	rlcf	___fldiv@b& (0+255),f,b
 16989  003E16  3788               	rlcf	(___fldiv@b+1)& (0+255),f,b
 16990  003E18  3789               	rlcf	(___fldiv@b+2)& (0+255),f,b
 16991  003E1A  378A               	rlcf	(___fldiv@b+3)& (0+255),f,b
 16992                           
 16993                           ; BSR set to: 0
 16994  003E1C  BF9D               	btfsc	(___fldiv@grs+3)& (0+255),7,b
 16995                           
 16996                           ; BSR set to: 0
 16997  003E1E  8187               	bsf	___fldiv@b& (0+255),0,b
 16998                           
 16999                           ; BSR set to: 0
 17000  003E20  90D8               	bcf	status,0,c
 17001  003E22  379A               	rlcf	___fldiv@grs& (0+255),f,b
 17002  003E24  379B               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 17003  003E26  379C               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 17004  003E28  379D               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 17005  003E2A  0798               	decf	___fldiv@new_exp& (0+255),f,b
 17006  003E2C  A0D8               	btfss	status,0,c
 17007  003E2E  0799               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 17008  003E30                     l6175:
 17009                           
 17010                           ; BSR set to: 0
 17011                           
 17012                           ; BSR set to: 0
 17013  003E30  AF89               	btfss	(___fldiv@b+2)& (0+255),7,b
 17014  003E32  D7EF               	goto	l6176
 17015                           
 17016                           ; BSR set to: 0
 17017                           
 17018                           ; BSR set to: 0
 17019  003E34  0E00               	movlw	0
 17020  003E36  6F9F               	movwf	___fldiv@aexp& (0+255),b
 17021                           
 17022                           ; BSR set to: 0
 17023  003E38  AF9D               	btfss	(___fldiv@grs+3)& (0+255),7,b
 17024  003E3A  D016               	goto	l6182
 17025                           
 17026                           ; BSR set to: 0
 17027  003E3C  0EFF               	movlw	255
 17028  003E3E  159A               	andwf	___fldiv@grs& (0+255),w,b
 17029  003E40  6F8F               	movwf	??___fldiv& (0+255),b
 17030  003E42  0EFF               	movlw	255
 17031  003E44  159B               	andwf	(___fldiv@grs+1)& (0+255),w,b
 17032  003E46  6F90               	movwf	(??___fldiv+1)& (0+255),b
 17033  003E48  0EFF               	movlw	255
 17034  003E4A  159C               	andwf	(___fldiv@grs+2)& (0+255),w,b
 17035  003E4C  6F91               	movwf	(??___fldiv+2)& (0+255),b
 17036  003E4E  0E7F               	movlw	127
 17037  003E50  159D               	andwf	(___fldiv@grs+3)& (0+255),w,b
 17038  003E52  6F92               	movwf	(??___fldiv+3)& (0+255),b
 17039  003E54  518F               	movf	??___fldiv& (0+255),w,b
 17040  003E56  1190               	iorwf	(??___fldiv+1)& (0+255),w,b
 17041  003E58  1191               	iorwf	(??___fldiv+2)& (0+255),w,b
 17042  003E5A  1192               	iorwf	(??___fldiv+3)& (0+255),w,b
 17043  003E5C  A4D8               	btfss	status,2,c
 17044  003E5E  D002               	goto	u56930
 17045                           
 17046                           ; BSR set to: 0
 17047                           
 17048                           ; BSR set to: 0
 17049  003E60  A187               	btfss	___fldiv@b& (0+255),0,b
 17050  003E62  D002               	goto	l6182
 17051  003E64                     u56930:
 17052                           
 17053                           ; BSR set to: 0
 17054  003E64  0E01               	movlw	1
 17055  003E66  6F9F               	movwf	___fldiv@aexp& (0+255),b
 17056  003E68                     l6182:
 17057                           
 17058                           ; BSR set to: 0
 17059                           
 17060                           ; BSR set to: 0
 17061                           
 17062                           ; BSR set to: 0
 17063  003E68  519F               	movf	___fldiv@aexp& (0+255),w,b
 17064  003E6A  B4D8               	btfsc	status,2,c
 17065  003E6C  D01F               	goto	l6184
 17066                           
 17067                           ; BSR set to: 0
 17068  003E6E  0E01               	movlw	1
 17069  003E70  2787               	addwf	___fldiv@b& (0+255),f,b
 17070  003E72  0E00               	movlw	0
 17071  003E74  2388               	addwfc	(___fldiv@b+1)& (0+255),f,b
 17072  003E76  2389               	addwfc	(___fldiv@b+2)& (0+255),f,b
 17073  003E78  238A               	addwfc	(___fldiv@b+3)& (0+255),f,b
 17074                           
 17075                           ; BSR set to: 0
 17076  003E7A  A18A               	btfss	(___fldiv@b+3)& (0+255),0,b
 17077  003E7C  D017               	goto	l6184
 17078                           
 17079                           ; BSR set to: 0
 17080  003E7E  C087  F08F         	movff	___fldiv@b,??___fldiv
 17081  003E82  C088  F090         	movff	___fldiv@b+1,??___fldiv+1
 17082  003E86  C089  F091         	movff	___fldiv@b+2,??___fldiv+2
 17083  003E8A  C08A  F092         	movff	___fldiv@b+3,??___fldiv+3
 17084  003E8E  3592               	rlcf	(??___fldiv+3)& (0+255),w,b
 17085  003E90  3392               	rrcf	(??___fldiv+3)& (0+255),f,b
 17086  003E92  3391               	rrcf	(??___fldiv+2)& (0+255),f,b
 17087  003E94  3390               	rrcf	(??___fldiv+1)& (0+255),f,b
 17088  003E96  338F               	rrcf	??___fldiv& (0+255),f,b
 17089  003E98  C08F  F087         	movff	??___fldiv,___fldiv@b
 17090  003E9C  C090  F088         	movff	??___fldiv+1,___fldiv@b+1
 17091  003EA0  C091  F089         	movff	??___fldiv+2,___fldiv@b+2
 17092  003EA4  C092  F08A         	movff	??___fldiv+3,___fldiv@b+3
 17093                           
 17094                           ; BSR set to: 0
 17095  003EA8  4B98               	infsnz	___fldiv@new_exp& (0+255),f,b
 17096  003EAA  2B99               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 17097  003EAC                     l6184:
 17098                           
 17099                           ; BSR set to: 0
 17100                           
 17101                           ; BSR set to: 0
 17102                           
 17103                           ; BSR set to: 0
 17104  003EAC  BF99               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 17105  003EAE  D010               	goto	l6185
 17106  003EB0  5199               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 17107  003EB2  E103               	bnz	u56960
 17108  003EB4  2998               	incf	___fldiv@new_exp& (0+255),w,b
 17109  003EB6  A0D8               	btfss	status,0,c
 17110  003EB8  D00B               	goto	l6185
 17111  003EBA                     u56960:
 17112                           
 17113                           ; BSR set to: 0
 17114  003EBA  0E00               	movlw	0
 17115  003EBC  6F99               	movwf	(___fldiv@new_exp+1)& (0+255),b
 17116  003EBE  6998               	setf	___fldiv@new_exp& (0+255),b
 17117  003EC0  0E00               	movlw	0
 17118  003EC2  6F87               	movwf	___fldiv@b& (0+255),b
 17119  003EC4  0E00               	movlw	0
 17120  003EC6  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 17121  003EC8  0E00               	movlw	0
 17122  003ECA  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 17123  003ECC  0E00               	movlw	0
 17124  003ECE  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 17125  003ED0                     l6185:
 17126                           
 17127                           ; BSR set to: 0
 17128                           
 17129                           ; BSR set to: 0
 17130  003ED0  BF99               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 17131  003ED2  D005               	goto	u56970
 17132  003ED4  5199               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 17133  003ED6  E111               	bnz	l31240
 17134  003ED8  0598               	decf	___fldiv@new_exp& (0+255),w,b
 17135  003EDA  B0D8               	btfsc	status,0,c
 17136  003EDC  D00E               	goto	l6186
 17137  003EDE                     u56970:
 17138                           
 17139                           ; BSR set to: 0
 17140  003EDE  0E00               	movlw	0
 17141  003EE0  6F99               	movwf	(___fldiv@new_exp+1)& (0+255),b
 17142  003EE2  0E00               	movlw	0
 17143  003EE4  6F98               	movwf	___fldiv@new_exp& (0+255),b
 17144  003EE6  0E00               	movlw	0
 17145  003EE8  6F87               	movwf	___fldiv@b& (0+255),b
 17146  003EEA  0E00               	movlw	0
 17147  003EEC  6F88               	movwf	(___fldiv@b+1)& (0+255),b
 17148  003EEE  0E00               	movlw	0
 17149  003EF0  6F89               	movwf	(___fldiv@b+2)& (0+255),b
 17150  003EF2  0E00               	movlw	0
 17151  003EF4  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 17152  003EF6  0E00               	movlw	0
 17153  003EF8  6F93               	movwf	___fldiv@sign& (0+255),b
 17154  003EFA                     l6186:
 17155  003EFA                     l31240:
 17156                           
 17157                           ; BSR set to: 0
 17158  003EFA  C098  F09E         	movff	___fldiv@new_exp,___fldiv@bexp
 17159                           
 17160                           ; BSR set to: 0
 17161  003EFE  A19E               	btfss	___fldiv@bexp& (0+255),0,b
 17162  003F00  D002               	goto	l6187
 17163                           
 17164                           ; BSR set to: 0
 17165  003F02  8F89               	bsf	(___fldiv@b+2)& (0+255),7,b
 17166  003F04  D001               	goto	l6188
 17167  003F06                     l6187:
 17168                           
 17169                           ; BSR set to: 0
 17170                           
 17171                           ; BSR set to: 0
 17172  003F06  9F89               	bcf	(___fldiv@b+2)& (0+255),7,b
 17173  003F08                     l6188:
 17174                           
 17175                           ; BSR set to: 0
 17176                           
 17177                           ; BSR set to: 0
 17178  003F08  90D8               	bcf	status,0,c
 17179  003F0A  319E               	rrcf	___fldiv@bexp& (0+255),w,b
 17180  003F0C  6F8A               	movwf	(___fldiv@b+3)& (0+255),b
 17181                           
 17182                           ; BSR set to: 0
 17183  003F0E  5193               	movf	___fldiv@sign& (0+255),w,b
 17184  003F10  138A               	iorwf	(___fldiv@b+3)& (0+255),f,b
 17185                           
 17186                           ; BSR set to: 0
 17187  003F12  C087  F087         	movff	___fldiv@b,?___fldiv
 17188  003F16  C088  F088         	movff	___fldiv@b+1,?___fldiv+1
 17189  003F1A  C089  F089         	movff	___fldiv@b+2,?___fldiv+2
 17190  003F1E  C08A  F08A         	movff	___fldiv@b+3,?___fldiv+3
 17191  003F22  0012               	return	
 17192  003F24                     __end_of___fldiv:
 17193                           	opt stack 0
 17194                           tblptru	equ	0xFF8
 17195                           tblptrh	equ	0xFF7
 17196                           tblptrl	equ	0xFF6
 17197                           tablat	equ	0xFF5
 17198                           prodh	equ	0xFF4
 17199                           prodl	equ	0xFF3
 17200                           intcon	equ	0xFF2
 17201                           intcon2	equ	0xFF1
 17202                           postinc0	equ	0xFEE
 17203                           wreg	equ	0xFE8
 17204                           postinc1	equ	0xFE6
 17205                           indf2	equ	0xFDF
 17206                           postinc2	equ	0xFDE
 17207                           postdec2	equ	0xFDD
 17208                           plusw2	equ	0xFDB
 17209                           fsr2h	equ	0xFDA
 17210                           fsr2l	equ	0xFD9
 17211                           status	equ	0xFD8
 17212                           
 17213 ;; *************** function _Function_D_1 *****************
 17214 ;; Defined at:
 17215 ;;		line 855 in file "menu.c"
 17216 ;; Parameters:    Size  Location     Type
 17217 ;;		None
 17218 ;; Auto vars:     Size  Location     Type
 17219 ;;		None
 17220 ;; Return value:  Size  Location     Type
 17221 ;;                  1    wreg      void 
 17222 ;; Registers used:
 17223 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17224 ;; Tracked objects:
 17225 ;;		On entry : 0/0
 17226 ;;		On exit  : 0/0
 17227 ;;		Unchanged: 0/0
 17228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17233 ;;Total ram usage:        0 bytes
 17234 ;; Hardware stack levels used:    1
 17235 ;; Hardware stack levels required when called:   16
 17236 ;; This function calls:
 17237 ;;		_Lcd_Print_String
 17238 ;;		___lbmod
 17239 ;;		___wmul
 17240 ;;		_clear_row1
 17241 ;;		_clear_row2
 17242 ;;		_setControllerResolution
 17243 ;;		_un_block_code
 17244 ;; This function is called by:
 17245 ;;		_Function_D
 17246 ;; This function uses a non-reentrant model
 17247 ;;
 17248                           
 17249                           	psect	text49
 17250  0084EC                     __ptext49:
 17251                           	opt stack 0
 17252  0084EC                     _Function_D_1:
 17253                           	opt stack 12
 17254                           
 17255                           ;menu.c: 857: which_screen = POTS_RES_MENU;
 17256                           
 17257                           ; BSR set to: 0
 17258                           ;incstack = 0
 17259  0084EC  0E0F               	movlw	15
 17260  0084EE  6E4E               	movwf	_which_screen,c
 17261                           
 17262                           ;menu.c: 858: lcd_print_once = 0;
 17263  0084F0  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17264                           
 17265                           ;menu.c: 859: encoder_click = 0;
 17266  0084F2  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 17267                           
 17268                           ;menu.c: 861: potsResoMenu.selector = POT_MODE;
 17269  0084F4  0E00               	movlw	0
 17270  0084F6  BE05               	btfsc	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17271  0084F8  0E01               	movlw	1
 17272  0084FA  0101               	movlb	1	; () banked
 17273  0084FC  6F58               	movwf	(_potsResoMenu+2)& (0+255),b
 17274                           
 17275                           ;menu.c: 863: while(encoder_click == 0) {
 17276  0084FE  D02D               	goto	l3672
 17277  008500                     
 17278                           ;menu.c: 867: un_block_code();
 17279                           
 17280                           ; BSR set to: 1
 17281  008500  ECF4  F04C         	call	_un_block_code	;wreg free
 17282                           
 17283                           ;menu.c: 869: if (lcd_print_once == 0) {
 17284  008504  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17285  008506  D028               	goto	l3674
 17286                           
 17287                           ;menu.c: 870: clear_row1();
 17288  008508  EC6C  F04C         	call	_clear_row1	;wreg free
 17289                           
 17290                           ;menu.c: 871: Lcd_Print_String("Pots Resolution:");
 17291  00850C  0EA8               	movlw	low STR_30
 17292  00850E  0100               	movlb	0	; () banked
 17293  008510  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17294  008512  0EFD               	movlw	high STR_30
 17295  008514  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17296  008516  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 17297                           
 17298                           ;menu.c: 872: clear_row2();
 17299  00851A  EC58  F04C         	call	_clear_row2	;wreg free
 17300                           
 17301                           ;menu.c: 873: Lcd_Print_String(LCD_STRINGS[(potsResoMenu.selector % potsResoMenu.number)
      +                           + potsResoMenu.address]);
 17302  00851E  0101               	movlb	1	; () banked
 17303  008520  5156               	movf	_potsResoMenu& (0+255),w,b
 17304  008522  6EE6               	movwf	postinc1,c
 17305  008524  5158               	movf	(_potsResoMenu+2)& (0+255),w,b
 17306  008526  6EE6               	movwf	postinc1,c
 17307  008528  ECA5  F041         	call	___lbmod	;wreg free
 17308  00852C  503E               	movf	btemp,w,c
 17309  00852E  0101               	movlb	1	; () banked
 17310  008530  2557               	addwf	(_potsResoMenu+1)& (0+255),w,b
 17311  008532  0100               	movlb	0	; () banked
 17312  008534  6F60               	movwf	___wmul@multiplier& (0+255),b
 17313  008536  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 17314  008538  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 17315  00853A  0E00               	movlw	0
 17316  00853C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17317  00853E  0E11               	movlw	17
 17318  008540  6F62               	movwf	___wmul@multiplicand& (0+255),b
 17319  008542  EC80  F04C         	call	___wmul	;wreg free
 17320  008546  0E9E               	movlw	low _LCD_STRINGS
 17321  008548  0100               	movlb	0	; () banked
 17322  00854A  2560               	addwf	?___wmul& (0+255),w,b
 17323  00854C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17324  00854E  0EF3               	movlw	high _LCD_STRINGS
 17325  008550  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 17326  008552  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17327  008554  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 17328  008558                     l3674:
 17329                           
 17330                           ;menu.c: 874: }
 17331                           ;menu.c: 875: lcd_print_once = 1;
 17332  008558  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17333  00855A                     l3672:
 17334  00855A  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 17335  00855C  D7D1               	goto	l3673
 17336                           
 17337                           ;menu.c: 876: }
 17338                           ;menu.c: 882: POT_MODE = potsResoMenu.selector;
 17339  00855E  0101               	movlb	1	; () banked
 17340  008560  A158               	btfss	(_potsResoMenu+2)& (0+255),0,b
 17341  008562  D002               	goto	u58890
 17342  008564  8E05               	bsf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17343  008566  D001               	goto	u58905
 17344  008568                     u58890:
 17345  008568  9E05               	bcf	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17346  00856A                     u58905:
 17347                           
 17348                           ;menu.c: 883: setControllerResolution();
 17349  00856A  EC2D  F04C         	call	_setControllerResolution	;wreg free
 17350  00856E  0012               	return		;funcret
 17351  008570                     __end_of_Function_D_1:
 17352                           	opt stack 0
 17353                           tblptru	equ	0xFF8
 17354                           tblptrh	equ	0xFF7
 17355                           tblptrl	equ	0xFF6
 17356                           tablat	equ	0xFF5
 17357                           prodh	equ	0xFF4
 17358                           prodl	equ	0xFF3
 17359                           intcon	equ	0xFF2
 17360                           intcon2	equ	0xFF1
 17361                           postinc0	equ	0xFEE
 17362                           wreg	equ	0xFE8
 17363                           postinc1	equ	0xFE6
 17364                           indf2	equ	0xFDF
 17365                           postinc2	equ	0xFDE
 17366                           postdec2	equ	0xFDD
 17367                           plusw2	equ	0xFDB
 17368                           fsr2h	equ	0xFDA
 17369                           fsr2l	equ	0xFD9
 17370                           status	equ	0xFD8
 17371                           
 17372 ;; *************** function _setControllerResolution *****************
 17373 ;; Defined at:
 17374 ;;		line 115 in file "menu.c"
 17375 ;; Parameters:    Size  Location     Type
 17376 ;;		None
 17377 ;; Auto vars:     Size  Location     Type
 17378 ;;  i               1    0[BANK0 ] unsigned char 
 17379 ;; Return value:  Size  Location     Type
 17380 ;;                  1    wreg      void 
 17381 ;; Registers used:
 17382 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17383 ;; Tracked objects:
 17384 ;;		On entry : 0/0
 17385 ;;		On exit  : 0/0
 17386 ;;		Unchanged: 0/0
 17387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17389 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17391 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17392 ;;Total ram usage:        1 bytes
 17393 ;; Hardware stack levels used:    1
 17394 ;; Hardware stack levels required when called:    5
 17395 ;; This function calls:
 17396 ;;		Nothing
 17397 ;; This function is called by:
 17398 ;;		_Function_D_1
 17399 ;; This function uses a non-reentrant model
 17400 ;;
 17401                           
 17402                           	psect	text50
 17403  00985A                     __ptext50:
 17404                           	opt stack 0
 17405  00985A                     _setControllerResolution:
 17406                           	opt stack 22
 17407                           
 17408                           ;menu.c: 117: for(unsigned char i=0;i<16;i++){
 17409                           
 17410                           ;incstack = 0
 17411  00985A  0E00               	movlw	0
 17412  00985C  0100               	movlb	0	; () banked
 17413  00985E  6F60               	movwf	setControllerResolution@i& (0+255),b
 17414  009860                     l31430:
 17415                           
 17416                           ; BSR set to: 0
 17417  009860  0E0F               	movlw	15
 17418  009862  6560               	cpfsgt	setControllerResolution@i& (0+255),b
 17419  009864  D001               	goto	l3470
 17420  009866  0012               	return	
 17421  009868                     l3470:
 17422                           
 17423                           ; BSR set to: 0
 17424                           ;menu.c: 119: inputPotsArray[i].controller_resolution = POT_MODE;
 17425                           
 17426                           ; BSR set to: 0
 17427  009868  5160               	movf	setControllerResolution@i& (0+255),w,b
 17428  00986A  0D03               	mullw	3
 17429  00986C  0E88               	movlw	low _inputPotsArray
 17430  00986E  24F3               	addwf	prodl,w,c
 17431  009870  6ED9               	movwf	fsr2l,c
 17432  009872  0E02               	movlw	high _inputPotsArray
 17433  009874  20F4               	addwfc	prodh,w,c
 17434  009876  6EDA               	movwf	fsr2h,c
 17435  009878  0102               	movlb	2	; () banked
 17436  00987A  90DF               	bcf	indf2,0,c
 17437  00987C  BE05               	btfsc	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 17438  00987E  80DF               	bsf	indf2,0,c
 17439  009880  0100               	movlb	0	; () banked
 17440  009882  2B60               	incf	setControllerResolution@i& (0+255),f,b
 17441  009884  D7ED               	goto	l31430
 17442  009886                     __end_of_setControllerResolution:
 17443                           	opt stack 0
 17444                           tblptru	equ	0xFF8
 17445                           tblptrh	equ	0xFF7
 17446                           tblptrl	equ	0xFF6
 17447                           tablat	equ	0xFF5
 17448                           prodh	equ	0xFF4
 17449                           prodl	equ	0xFF3
 17450                           intcon	equ	0xFF2
 17451                           intcon2	equ	0xFF1
 17452                           postinc0	equ	0xFEE
 17453                           wreg	equ	0xFE8
 17454                           postinc1	equ	0xFE6
 17455                           indf2	equ	0xFDF
 17456                           postinc2	equ	0xFDE
 17457                           postdec2	equ	0xFDD
 17458                           plusw2	equ	0xFDB
 17459                           fsr2h	equ	0xFDA
 17460                           fsr2l	equ	0xFD9
 17461                           status	equ	0xFD8
 17462                           
 17463 ;; *************** function _Function_C *****************
 17464 ;; Defined at:
 17465 ;;		line 826 in file "menu.c"
 17466 ;; Parameters:    Size  Location     Type
 17467 ;;		None
 17468 ;; Auto vars:     Size  Location     Type
 17469 ;;		None
 17470 ;; Return value:  Size  Location     Type
 17471 ;;                  1    wreg      void 
 17472 ;; Registers used:
 17473 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17474 ;; Tracked objects:
 17475 ;;		On entry : 0/0
 17476 ;;		On exit  : 0/0
 17477 ;;		Unchanged: 0/0
 17478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17483 ;;Total ram usage:        0 bytes
 17484 ;; Hardware stack levels used:    1
 17485 ;; Hardware stack levels required when called:   17
 17486 ;; This function calls:
 17487 ;;		_Function_C_1
 17488 ;;		_Function_C_2
 17489 ;;		_Function_C_3
 17490 ;;		_Lcd_Print_String
 17491 ;;		___lbmod
 17492 ;;		___wmul
 17493 ;;		_clear_row2
 17494 ;;		_un_block_code
 17495 ;; This function is called by:
 17496 ;;		_menu_lcd
 17497 ;; This function uses a non-reentrant model
 17498 ;;
 17499                           
 17500                           	psect	text51
 17501  008198                     __ptext51:
 17502                           	opt stack 0
 17503  008198                     _Function_C:
 17504                           	opt stack 12
 17505                           
 17506                           ;menu.c: 828: which_screen = DRUM_MENU;
 17507                           
 17508                           ; BSR set to: 0
 17509                           ;incstack = 0
 17510  008198  0E05               	movlw	5
 17511  00819A  6E4E               	movwf	_which_screen,c
 17512                           
 17513                           ;menu.c: 829: lcd_print_once = 0;
 17514  00819C  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17515                           
 17516                           ;menu.c: 831: drumMenu.selector = DRUM_MODE;
 17517  00819E  0E00               	movlw	0
 17518  0081A0  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 17519  0081A2  0E01               	movlw	1
 17520  0081A4  0101               	movlb	1	; () banked
 17521  0081A6  6F67               	movwf	(_drumMenu+2)& (0+255),b
 17522                           
 17523                           ;menu.c: 833: while(encoder_click == 0) {
 17524  0081A8  D024               	goto	l3660
 17525  0081AA                     
 17526                           ;menu.c: 837: un_block_code();
 17527                           
 17528                           ; BSR set to: 1
 17529  0081AA  ECF4  F04C         	call	_un_block_code	;wreg free
 17530                           
 17531                           ;menu.c: 839: if (lcd_print_once == 0) {
 17532  0081AE  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17533  0081B0  D01F               	goto	l3662
 17534                           
 17535                           ;menu.c: 840: clear_row2();
 17536  0081B2  EC58  F04C         	call	_clear_row2	;wreg free
 17537                           
 17538                           ;menu.c: 841: Lcd_Print_String(LCD_STRINGS[(drumMenu.selector % drumMenu.number) + drumM
      +                          enu.address]);
 17539  0081B6  0101               	movlb	1	; () banked
 17540  0081B8  5165               	movf	_drumMenu& (0+255),w,b
 17541  0081BA  6EE6               	movwf	postinc1,c
 17542  0081BC  5167               	movf	(_drumMenu+2)& (0+255),w,b
 17543  0081BE  6EE6               	movwf	postinc1,c
 17544  0081C0  ECA5  F041         	call	___lbmod	;wreg free
 17545  0081C4  503E               	movf	btemp,w,c
 17546  0081C6  0101               	movlb	1	; () banked
 17547  0081C8  2566               	addwf	(_drumMenu+1)& (0+255),w,b
 17548  0081CA  0100               	movlb	0	; () banked
 17549  0081CC  6F60               	movwf	___wmul@multiplier& (0+255),b
 17550  0081CE  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 17551  0081D0  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 17552  0081D2  0E00               	movlw	0
 17553  0081D4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17554  0081D6  0E11               	movlw	17
 17555  0081D8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 17556  0081DA  EC80  F04C         	call	___wmul	;wreg free
 17557  0081DE  0E9E               	movlw	low _LCD_STRINGS
 17558  0081E0  0100               	movlb	0	; () banked
 17559  0081E2  2560               	addwf	?___wmul& (0+255),w,b
 17560  0081E4  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17561  0081E6  0EF3               	movlw	high _LCD_STRINGS
 17562  0081E8  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 17563  0081EA  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17564  0081EC  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 17565  0081F0                     l3662:
 17566                           
 17567                           ;menu.c: 843: }
 17568                           ;menu.c: 844: lcd_print_once = 1;
 17569  0081F0  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17570  0081F2                     l3660:
 17571  0081F2  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 17572  0081F4  D7DA               	goto	l3661
 17573                           
 17574                           ;menu.c: 845: }
 17575                           ;menu.c: 847: if(drumMenu.selector == 0){DRUM_MODE = 0;}
 17576  0081F6  0101               	movlb	1	; () banked
 17577  0081F8  5167               	movf	(_drumMenu+2)& (0+255),w,b
 17578  0081FA  B4D8               	btfsc	status,2,c
 17579                           
 17580                           ; BSR set to: 1
 17581  0081FC  9E01               	bcf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 17582                           
 17583                           ; BSR set to: 1
 17584                           ;menu.c: 848: if(drumMenu.selector == 1){DRUM_MODE = 1;}
 17585                           
 17586                           ; BSR set to: 1
 17587  0081FE  0567               	decf	(_drumMenu+2)& (0+255),w,b
 17588  008200  B4D8               	btfsc	status,2,c
 17589                           
 17590                           ; BSR set to: 1
 17591  008202  8E01               	bsf	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 17592                           
 17593                           ; BSR set to: 1
 17594                           ;menu.c: 849: if(drumMenu.selector == 2) {Function_C_1();}
 17595                           
 17596                           ; BSR set to: 1
 17597  008204  0E02               	movlw	2
 17598  008206  1967               	xorwf	(_drumMenu+2)& (0+255),w,b
 17599  008208  B4D8               	btfsc	status,2,c
 17600                           
 17601                           ; BSR set to: 1
 17602  00820A  ECB5  F03D         	call	_Function_C_1	;wreg free
 17603                           
 17604                           ;menu.c: 850: if(drumMenu.selector == 3) {Function_C_2();}
 17605  00820E  0E03               	movlw	3
 17606  008210  0101               	movlb	1	; () banked
 17607  008212  1967               	xorwf	(_drumMenu+2)& (0+255),w,b
 17608  008214  B4D8               	btfsc	status,2,c
 17609                           
 17610                           ; BSR set to: 1
 17611  008216  EC5B  F031         	call	_Function_C_2	;wreg free
 17612                           
 17613                           ;menu.c: 851: if(drumMenu.selector == 4) {Function_C_3();}
 17614  00821A  0E04               	movlw	4
 17615  00821C  0101               	movlb	1	; () banked
 17616  00821E  1967               	xorwf	(_drumMenu+2)& (0+255),w,b
 17617  008220  A4D8               	btfss	status,2,c
 17618  008222  0012               	return	
 17619                           
 17620                           ; BSR set to: 1
 17621  008224  ECBE  F030         	call	_Function_C_3	;wreg free
 17622  008228  0012               	return	
 17623  00822A                     __end_of_Function_C:
 17624                           	opt stack 0
 17625                           tblptru	equ	0xFF8
 17626                           tblptrh	equ	0xFF7
 17627                           tblptrl	equ	0xFF6
 17628                           tablat	equ	0xFF5
 17629                           prodh	equ	0xFF4
 17630                           prodl	equ	0xFF3
 17631                           intcon	equ	0xFF2
 17632                           intcon2	equ	0xFF1
 17633                           postinc0	equ	0xFEE
 17634                           wreg	equ	0xFE8
 17635                           postinc1	equ	0xFE6
 17636                           indf2	equ	0xFDF
 17637                           postinc2	equ	0xFDE
 17638                           postdec2	equ	0xFDD
 17639                           plusw2	equ	0xFDB
 17640                           fsr2h	equ	0xFDA
 17641                           fsr2l	equ	0xFD9
 17642                           status	equ	0xFD8
 17643                           
 17644 ;; *************** function _Function_C_3 *****************
 17645 ;; Defined at:
 17646 ;;		line 759 in file "menu.c"
 17647 ;; Parameters:    Size  Location     Type
 17648 ;;		None
 17649 ;; Auto vars:     Size  Location     Type
 17650 ;;  array_index     1  104[BANK0 ] unsigned char 
 17651 ;; Return value:  Size  Location     Type
 17652 ;;                  1    wreg      void 
 17653 ;; Registers used:
 17654 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17655 ;; Tracked objects:
 17656 ;;		On entry : 0/0
 17657 ;;		On exit  : 0/0
 17658 ;;		Unchanged: 0/0
 17659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17660 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17661 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17662 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17663 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17664 ;;Total ram usage:        2 bytes
 17665 ;; Hardware stack levels used:    1
 17666 ;; Hardware stack levels required when called:   16
 17667 ;; This function calls:
 17668 ;;		_Lcd_Print_String
 17669 ;;		_Lcd_Set_Cursor
 17670 ;;		___lbmod
 17671 ;;		___wmul
 17672 ;;		_analogInputs
 17673 ;;		_clear_row1
 17674 ;;		_clear_row2
 17675 ;;		_digitalInputs
 17676 ;;		_int2string
 17677 ;;		_un_block_code
 17678 ;; This function is called by:
 17679 ;;		_Function_C
 17680 ;; This function uses a non-reentrant model
 17681 ;;
 17682                           
 17683                           	psect	text52
 17684  00617C                     __ptext52:
 17685                           	opt stack 0
 17686  00617C                     _Function_C_3:
 17687                           	opt stack 12
 17688                           
 17689                           ;menu.c: 761: which_screen = DRUMS_CC_MENU;
 17690                           
 17691                           ;incstack = 0
 17692  00617C  0E0E               	movlw	14
 17693  00617E  6E4E               	movwf	_which_screen,c
 17694                           
 17695                           ;menu.c: 762: lcd_print_once = 0;
 17696  006180  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17697                           
 17698                           ;menu.c: 764: static __bit printOnce;
 17699                           ;menu.c: 765: printOnce = 0;
 17700  006182  9001               	bcf	Function_C_3@printOnce/(0+8),Function_C_3@printOnce& (0+7),c
 17701                           
 17702                           ;menu.c: 767: encoder_click = 0;
 17703  006184  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 17704                           
 17705                           ;menu.c: 769: while(encoder_click == 0) {
 17706  006186  D02D               	goto	l3644
 17707  006188                     
 17708                           ;menu.c: 773: un_block_code();
 17709  006188  ECF4  F04C         	call	_un_block_code	;wreg free
 17710                           
 17711                           ;menu.c: 775: if (lcd_print_once == 0) {
 17712  00618C  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17713  00618E  D028               	goto	l3646
 17714                           
 17715                           ;menu.c: 776: clear_row1();
 17716  006190  EC6C  F04C         	call	_clear_row1	;wreg free
 17717                           
 17718                           ;menu.c: 777: Lcd_Print_String("Set CC Number:");
 17719  006194  0E6B               	movlw	low STR_29
 17720  006196  0100               	movlb	0	; () banked
 17721  006198  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17722  00619A  0EFE               	movlw	high STR_29
 17723  00619C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17724  00619E  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 17725                           
 17726                           ;menu.c: 778: clear_row2();
 17727  0061A2  EC58  F04C         	call	_clear_row2	;wreg free
 17728                           
 17729                           ;menu.c: 779: Lcd_Print_String(LCD_STRINGS[(drumCCMenu.selector % drumCCMenu.number) + d
      +                          rumCCMenu.address]);
 17730  0061A6  0101               	movlb	1	; () banked
 17731  0061A8  515C               	movf	_drumCCMenu& (0+255),w,b
 17732  0061AA  6EE6               	movwf	postinc1,c
 17733  0061AC  515E               	movf	(_drumCCMenu+2)& (0+255),w,b
 17734  0061AE  6EE6               	movwf	postinc1,c
 17735  0061B0  ECA5  F041         	call	___lbmod	;wreg free
 17736  0061B4  503E               	movf	btemp,w,c
 17737  0061B6  0101               	movlb	1	; () banked
 17738  0061B8  255D               	addwf	(_drumCCMenu+1)& (0+255),w,b
 17739  0061BA  0100               	movlb	0	; () banked
 17740  0061BC  6F60               	movwf	___wmul@multiplier& (0+255),b
 17741  0061BE  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 17742  0061C0  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 17743  0061C2  0E00               	movlw	0
 17744  0061C4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17745  0061C6  0E11               	movlw	17
 17746  0061C8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 17747  0061CA  EC80  F04C         	call	___wmul	;wreg free
 17748  0061CE  0E9E               	movlw	low _LCD_STRINGS
 17749  0061D0  0100               	movlb	0	; () banked
 17750  0061D2  2560               	addwf	?___wmul& (0+255),w,b
 17751  0061D4  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17752  0061D6  0EF3               	movlw	high _LCD_STRINGS
 17753  0061D8  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 17754  0061DA  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17755  0061DC  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 17756  0061E0                     l3646:
 17757                           
 17758                           ;menu.c: 780: }
 17759                           ;menu.c: 781: lcd_print_once = 1;
 17760  0061E0  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17761  0061E2                     l3644:
 17762  0061E2  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 17763  0061E4  D7D1               	goto	l3645
 17764                           
 17765                           ;menu.c: 782: }
 17766                           ;menu.c: 784: which_screen = BLANK;
 17767  0061E6  0E00               	movlw	0
 17768  0061E8  6E4E               	movwf	_which_screen,c
 17769                           
 17770                           ;menu.c: 785: lcd_print_once = 0;
 17771  0061EA  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17772                           
 17773                           ;menu.c: 786: encoder_click = 0;
 17774  0061EC  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 17775                           
 17776                           ;menu.c: 787: unsigned char array_index = drumCCMenu.selector;
 17777  0061EE  C15E  F0C8         	movff	_drumCCMenu+2,Function_C_3@array_index
 17778                           
 17779                           ;menu.c: 792: while(encoder_click == 0) {
 17780  0061F2  D05E               	goto	l3655
 17781  0061F4                     
 17782                           ;menu.c: 795: digitalInputs();
 17783  0061F4  EC6F  F049         	call	_digitalInputs	;wreg free
 17784                           
 17785                           ;menu.c: 796: analogInputs();
 17786  0061F8  ECE8  F049         	call	_analogInputs	;wreg free
 17787                           
 17788                           ;menu.c: 798: if(lcd_print_once == 0) {
 17789  0061FC  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 17790  0061FE  D058               	goto	l3655
 17791                           
 17792                           ;menu.c: 799: if (encoder_direction == 0x10) {
 17793  006200  0E10               	movlw	16
 17794  006202  1835               	xorwf	_encoder_direction,w,c
 17795  006204  A4D8               	btfss	status,2,c
 17796  006206  D018               	goto	l3651
 17797                           
 17798                           ;menu.c: 800: if(DRUM_CC[array_index] < 127) {
 17799  006208  0100               	movlb	0	; () banked
 17800  00620A  51C8               	movf	Function_C_3@array_index& (0+255),w,b
 17801  00620C  0D01               	mullw	1
 17802  00620E  0EF5               	movlw	low _DRUM_CC
 17803  006210  24F3               	addwf	prodl,w,c
 17804  006212  6ED9               	movwf	fsr2l,c
 17805  006214  0E00               	movlw	high _DRUM_CC
 17806  006216  20F4               	addwfc	prodh,w,c
 17807  006218  6EDA               	movwf	fsr2h,c
 17808  00621A  0E7F               	movlw	127
 17809  00621C  60DF               	cpfslt	indf2,c
 17810  00621E  D009               	goto	l3652
 17811                           
 17812                           ; BSR set to: 0
 17813                           ;menu.c: 801: DRUM_CC[array_index]++;
 17814  006220  51C8               	movf	Function_C_3@array_index& (0+255),w,b
 17815  006222  0D01               	mullw	1
 17816  006224  0EF5               	movlw	low _DRUM_CC
 17817  006226  24F3               	addwf	prodl,w,c
 17818  006228  6ED9               	movwf	fsr2l,c
 17819  00622A  0E00               	movlw	high _DRUM_CC
 17820  00622C  20F4               	addwfc	prodh,w,c
 17821  00622E  6EDA               	movwf	fsr2h,c
 17822  006230  2ADF               	incf	indf2,f,c
 17823  006232                     l3652:
 17824                           
 17825                           ; BSR set to: 0
 17826                           ;menu.c: 802: }
 17827                           ;menu.c: 803: encoder_direction = 0x00;
 17828                           
 17829                           ; BSR set to: 0
 17830  006232  0E00               	movlw	0
 17831  006234  6E35               	movwf	_encoder_direction,c
 17832                           
 17833                           ; BSR set to: 0
 17834                           ;menu.c: 804: printOnce = 0;
 17835  006236  9001               	bcf	Function_C_3@printOnce/(0+8),Function_C_3@printOnce& (0+7),c
 17836  006238                     l3651:
 17837                           
 17838                           ;menu.c: 805: }
 17839                           ;menu.c: 807: if (encoder_direction == 0x20) {
 17840                           
 17841                           ; BSR set to: 0
 17842  006238  0E20               	movlw	32
 17843  00623A  1835               	xorwf	_encoder_direction,w,c
 17844  00623C  A4D8               	btfss	status,2,c
 17845  00623E  D018               	goto	l3653
 17846                           
 17847                           ;menu.c: 808: if(DRUM_CC[array_index] > 0) {
 17848  006240  0100               	movlb	0	; () banked
 17849  006242  51C8               	movf	Function_C_3@array_index& (0+255),w,b
 17850  006244  0D01               	mullw	1
 17851  006246  0EF5               	movlw	low _DRUM_CC
 17852  006248  24F3               	addwf	prodl,w,c
 17853  00624A  6ED9               	movwf	fsr2l,c
 17854  00624C  0E00               	movlw	high _DRUM_CC
 17855  00624E  20F4               	addwfc	prodh,w,c
 17856  006250  6EDA               	movwf	fsr2h,c
 17857  006252  50DF               	movf	indf2,w,c
 17858  006254  B4D8               	btfsc	status,2,c
 17859  006256  D009               	goto	l3654
 17860                           
 17861                           ; BSR set to: 0
 17862                           ;menu.c: 809: DRUM_CC[array_index]--;
 17863  006258  51C8               	movf	Function_C_3@array_index& (0+255),w,b
 17864  00625A  0D01               	mullw	1
 17865  00625C  0EF5               	movlw	low _DRUM_CC
 17866  00625E  24F3               	addwf	prodl,w,c
 17867  006260  6ED9               	movwf	fsr2l,c
 17868  006262  0E00               	movlw	high _DRUM_CC
 17869  006264  20F4               	addwfc	prodh,w,c
 17870  006266  6EDA               	movwf	fsr2h,c
 17871  006268  06DF               	decf	indf2,f,c
 17872  00626A                     l3654:
 17873                           
 17874                           ; BSR set to: 0
 17875                           ;menu.c: 810: }
 17876                           ;menu.c: 811: encoder_direction = 0x00;
 17877                           
 17878                           ; BSR set to: 0
 17879  00626A  0E00               	movlw	0
 17880  00626C  6E35               	movwf	_encoder_direction,c
 17881                           
 17882                           ; BSR set to: 0
 17883                           ;menu.c: 812: printOnce = 0;
 17884  00626E  9001               	bcf	Function_C_3@printOnce/(0+8),Function_C_3@printOnce& (0+7),c
 17885  006270                     l3653:
 17886                           
 17887                           ;menu.c: 813: }
 17888                           ;menu.c: 815: if(printOnce == 0){
 17889                           
 17890                           ; BSR set to: 0
 17891  006270  B001               	btfsc	Function_C_3@printOnce/(0+8),Function_C_3@printOnce& (0+7),c
 17892  006272  D01E               	goto	l3655
 17893                           
 17894                           ;menu.c: 816: int2string(DRUM_CC[array_index]);
 17895  006274  0100               	movlb	0	; () banked
 17896  006276  51C8               	movf	Function_C_3@array_index& (0+255),w,b
 17897  006278  0D01               	mullw	1
 17898  00627A  0EF5               	movlw	low _DRUM_CC
 17899  00627C  24F3               	addwf	prodl,w,c
 17900  00627E  6ED9               	movwf	fsr2l,c
 17901  006280  0E00               	movlw	high _DRUM_CC
 17902  006282  20F4               	addwfc	prodh,w,c
 17903  006284  6EDA               	movwf	fsr2h,c
 17904  006286  50DF               	movf	indf2,w,c
 17905  006288  6FC7               	movwf	??_Function_C_3& (0+255),b
 17906  00628A  51C7               	movf	??_Function_C_3& (0+255),w,b
 17907  00628C  6F60               	movwf	int2string@number& (0+255),b
 17908  00628E  6B61               	clrf	(int2string@number+1)& (0+255),b
 17909  006290  EC42  F03B         	call	_int2string	;wreg free
 17910                           
 17911                           ;menu.c: 817: Lcd_Set_Cursor(2,13);
 17912  006294  0E0D               	movlw	13
 17913  006296  0100               	movlb	0	; () banked
 17914  006298  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 17915  00629A  0E02               	movlw	2
 17916  00629C  EC8A  F048         	call	_Lcd_Set_Cursor
 17917                           
 17918                           ;menu.c: 818: Lcd_Print_String(string2display);
 17919  0062A0  0E94               	movlw	low _string2display
 17920  0062A2  0100               	movlb	0	; () banked
 17921  0062A4  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 17922  0062A6  0E01               	movlw	high _string2display
 17923  0062A8  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 17924  0062AA  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 17925                           
 17926                           ;menu.c: 819: printOnce = 1;
 17927  0062AE  8001               	bsf	Function_C_3@printOnce/(0+8),Function_C_3@printOnce& (0+7),c
 17928  0062B0                     l3655:
 17929  0062B0  B605               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 17930  0062B2  0012               	return	
 17931  0062B4  D79F               	goto	l3649
 17932  0062B6                     __end_of_Function_C_3:
 17933                           	opt stack 0
 17934                           tblptru	equ	0xFF8
 17935                           tblptrh	equ	0xFF7
 17936                           tblptrl	equ	0xFF6
 17937                           tablat	equ	0xFF5
 17938                           prodh	equ	0xFF4
 17939                           prodl	equ	0xFF3
 17940                           intcon	equ	0xFF2
 17941                           intcon2	equ	0xFF1
 17942                           postinc0	equ	0xFEE
 17943                           wreg	equ	0xFE8
 17944                           postinc1	equ	0xFE6
 17945                           indf2	equ	0xFDF
 17946                           postinc2	equ	0xFDE
 17947                           postdec2	equ	0xFDD
 17948                           plusw2	equ	0xFDB
 17949                           fsr2h	equ	0xFDA
 17950                           fsr2l	equ	0xFD9
 17951                           status	equ	0xFD8
 17952                           
 17953 ;; *************** function _Function_C_2 *****************
 17954 ;; Defined at:
 17955 ;;		line 690 in file "menu.c"
 17956 ;; Parameters:    Size  Location     Type
 17957 ;;		None
 17958 ;; Auto vars:     Size  Location     Type
 17959 ;;  array_index     1  104[BANK0 ] unsigned char 
 17960 ;; Return value:  Size  Location     Type
 17961 ;;                  1    wreg      void 
 17962 ;; Registers used:
 17963 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17964 ;; Tracked objects:
 17965 ;;		On entry : 0/0
 17966 ;;		On exit  : 0/0
 17967 ;;		Unchanged: 0/0
 17968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17970 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17971 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17972 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17973 ;;Total ram usage:        2 bytes
 17974 ;; Hardware stack levels used:    1
 17975 ;; Hardware stack levels required when called:   16
 17976 ;; This function calls:
 17977 ;;		_Lcd_Print_String
 17978 ;;		_Lcd_Set_Cursor
 17979 ;;		___lbmod
 17980 ;;		___wmul
 17981 ;;		_analogInputs
 17982 ;;		_clear_row1
 17983 ;;		_clear_row2
 17984 ;;		_digitalInputs
 17985 ;;		_int2string
 17986 ;;		_un_block_code
 17987 ;; This function is called by:
 17988 ;;		_Function_C
 17989 ;; This function uses a non-reentrant model
 17990 ;;
 17991                           
 17992                           	psect	text53
 17993  0062B6                     __ptext53:
 17994                           	opt stack 0
 17995  0062B6                     _Function_C_2:
 17996                           	opt stack 12
 17997                           
 17998                           ;menu.c: 692: which_screen = DRUMS_NN_MENU;
 17999                           
 18000                           ;incstack = 0
 18001  0062B6  0E0D               	movlw	13
 18002  0062B8  6E4E               	movwf	_which_screen,c
 18003                           
 18004                           ;menu.c: 693: lcd_print_once = 0;
 18005  0062BA  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18006                           
 18007                           ;menu.c: 694: encoder_click = 0;
 18008  0062BC  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 18009                           
 18010                           ;menu.c: 697: static __bit printOnce;
 18011                           ;menu.c: 698: printOnce = 0;
 18012  0062BE  9201               	bcf	Function_C_2@printOnce/(0+8),Function_C_2@printOnce& (0+7),c
 18013                           
 18014                           ;menu.c: 700: while(encoder_click == 0) {
 18015  0062C0  D02D               	goto	l3626
 18016  0062C2                     
 18017                           ;menu.c: 704: un_block_code();
 18018  0062C2  ECF4  F04C         	call	_un_block_code	;wreg free
 18019                           
 18020                           ;menu.c: 706: if (lcd_print_once == 0) {
 18021  0062C6  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18022  0062C8  D028               	goto	l3628
 18023                           
 18024                           ;menu.c: 707: clear_row1();
 18025  0062CA  EC6C  F04C         	call	_clear_row1	;wreg free
 18026                           
 18027                           ;menu.c: 708: Lcd_Print_String("Set Note Number:");
 18028  0062CE  0ECA               	movlw	low STR_28
 18029  0062D0  0100               	movlb	0	; () banked
 18030  0062D2  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 18031  0062D4  0EFD               	movlw	high STR_28
 18032  0062D6  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18033  0062D8  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 18034                           
 18035                           ;menu.c: 709: clear_row2();
 18036  0062DC  EC58  F04C         	call	_clear_row2	;wreg free
 18037                           
 18038                           ;menu.c: 710: Lcd_Print_String(LCD_STRINGS[(drumNNMenu.selector % drumNNMenu.number) + d
      +                          rumNNMenu.address]);
 18039  0062E0  0101               	movlb	1	; () banked
 18040  0062E2  515F               	movf	_drumNNMenu& (0+255),w,b
 18041  0062E4  6EE6               	movwf	postinc1,c
 18042  0062E6  5161               	movf	(_drumNNMenu+2)& (0+255),w,b
 18043  0062E8  6EE6               	movwf	postinc1,c
 18044  0062EA  ECA5  F041         	call	___lbmod	;wreg free
 18045  0062EE  503E               	movf	btemp,w,c
 18046  0062F0  0101               	movlb	1	; () banked
 18047  0062F2  2560               	addwf	(_drumNNMenu+1)& (0+255),w,b
 18048  0062F4  0100               	movlb	0	; () banked
 18049  0062F6  6F60               	movwf	___wmul@multiplier& (0+255),b
 18050  0062F8  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 18051  0062FA  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 18052  0062FC  0E00               	movlw	0
 18053  0062FE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18054  006300  0E11               	movlw	17
 18055  006302  6F62               	movwf	___wmul@multiplicand& (0+255),b
 18056  006304  EC80  F04C         	call	___wmul	;wreg free
 18057  006308  0E9E               	movlw	low _LCD_STRINGS
 18058  00630A  0100               	movlb	0	; () banked
 18059  00630C  2560               	addwf	?___wmul& (0+255),w,b
 18060  00630E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 18061  006310  0EF3               	movlw	high _LCD_STRINGS
 18062  006312  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 18063  006314  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18064  006316  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 18065  00631A                     l3628:
 18066                           
 18067                           ;menu.c: 711: }
 18068                           ;menu.c: 712: lcd_print_once = 1;
 18069  00631A  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18070  00631C                     l3626:
 18071  00631C  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 18072  00631E  D7D1               	goto	l3627
 18073                           
 18074                           ;menu.c: 713: }
 18075                           ;menu.c: 715: which_screen = BLANK;
 18076  006320  0E00               	movlw	0
 18077  006322  6E4E               	movwf	_which_screen,c
 18078                           
 18079                           ;menu.c: 716: lcd_print_once = 0;
 18080  006324  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18081                           
 18082                           ;menu.c: 717: encoder_click = 0;
 18083  006326  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 18084                           
 18085                           ;menu.c: 718: unsigned char array_index = drumNNMenu.selector;
 18086  006328  C161  F0C8         	movff	_drumNNMenu+2,Function_C_2@array_index
 18087                           
 18088                           ;menu.c: 722: while(encoder_click == 0) {
 18089  00632C  D05E               	goto	l3637
 18090  00632E                     
 18091                           ;menu.c: 727: digitalInputs();
 18092  00632E  EC6F  F049         	call	_digitalInputs	;wreg free
 18093                           
 18094                           ;menu.c: 728: analogInputs();
 18095  006332  ECE8  F049         	call	_analogInputs	;wreg free
 18096                           
 18097                           ;menu.c: 730: if(lcd_print_once == 0) {
 18098  006336  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18099  006338  D058               	goto	l3637
 18100                           
 18101                           ;menu.c: 731: if (encoder_direction == 0x10) {
 18102  00633A  0E10               	movlw	16
 18103  00633C  1835               	xorwf	_encoder_direction,w,c
 18104  00633E  A4D8               	btfss	status,2,c
 18105  006340  D018               	goto	l3633
 18106                           
 18107                           ;menu.c: 732: if(DRUM_NOTE[array_index] < 81) {
 18108  006342  0100               	movlb	0	; () banked
 18109  006344  51C8               	movf	Function_C_2@array_index& (0+255),w,b
 18110  006346  0D01               	mullw	1
 18111  006348  0EEA               	movlw	low _DRUM_NOTE
 18112  00634A  24F3               	addwf	prodl,w,c
 18113  00634C  6ED9               	movwf	fsr2l,c
 18114  00634E  0E01               	movlw	high _DRUM_NOTE
 18115  006350  20F4               	addwfc	prodh,w,c
 18116  006352  6EDA               	movwf	fsr2h,c
 18117  006354  0E51               	movlw	81
 18118  006356  60DF               	cpfslt	indf2,c
 18119  006358  D009               	goto	l3634
 18120                           
 18121                           ; BSR set to: 0
 18122                           ;menu.c: 733: DRUM_NOTE[array_index]++;
 18123  00635A  51C8               	movf	Function_C_2@array_index& (0+255),w,b
 18124  00635C  0D01               	mullw	1
 18125  00635E  0EEA               	movlw	low _DRUM_NOTE
 18126  006360  24F3               	addwf	prodl,w,c
 18127  006362  6ED9               	movwf	fsr2l,c
 18128  006364  0E01               	movlw	high _DRUM_NOTE
 18129  006366  20F4               	addwfc	prodh,w,c
 18130  006368  6EDA               	movwf	fsr2h,c
 18131  00636A  2ADF               	incf	indf2,f,c
 18132  00636C                     l3634:
 18133                           
 18134                           ; BSR set to: 0
 18135                           ;menu.c: 734: }
 18136                           ;menu.c: 735: encoder_direction = 0x00;
 18137                           
 18138                           ; BSR set to: 0
 18139  00636C  0E00               	movlw	0
 18140  00636E  6E35               	movwf	_encoder_direction,c
 18141                           
 18142                           ; BSR set to: 0
 18143                           ;menu.c: 736: printOnce = 0;
 18144  006370  9201               	bcf	Function_C_2@printOnce/(0+8),Function_C_2@printOnce& (0+7),c
 18145  006372                     l3633:
 18146                           
 18147                           ;menu.c: 737: }
 18148                           ;menu.c: 739: if (encoder_direction == 0x20) {
 18149                           
 18150                           ; BSR set to: 0
 18151  006372  0E20               	movlw	32
 18152  006374  1835               	xorwf	_encoder_direction,w,c
 18153  006376  A4D8               	btfss	status,2,c
 18154  006378  D018               	goto	l3635
 18155                           
 18156                           ;menu.c: 740: if(DRUM_NOTE[array_index] > 35) {
 18157  00637A  0100               	movlb	0	; () banked
 18158  00637C  51C8               	movf	Function_C_2@array_index& (0+255),w,b
 18159  00637E  0D01               	mullw	1
 18160  006380  0EEA               	movlw	low _DRUM_NOTE
 18161  006382  24F3               	addwf	prodl,w,c
 18162  006384  6ED9               	movwf	fsr2l,c
 18163  006386  0E01               	movlw	high _DRUM_NOTE
 18164  006388  20F4               	addwfc	prodh,w,c
 18165  00638A  6EDA               	movwf	fsr2h,c
 18166  00638C  0E23               	movlw	35
 18167  00638E  64DF               	cpfsgt	indf2,c
 18168  006390  D009               	goto	l3636
 18169                           
 18170                           ; BSR set to: 0
 18171                           ;menu.c: 741: DRUM_NOTE[array_index]--;
 18172  006392  51C8               	movf	Function_C_2@array_index& (0+255),w,b
 18173  006394  0D01               	mullw	1
 18174  006396  0EEA               	movlw	low _DRUM_NOTE
 18175  006398  24F3               	addwf	prodl,w,c
 18176  00639A  6ED9               	movwf	fsr2l,c
 18177  00639C  0E01               	movlw	high _DRUM_NOTE
 18178  00639E  20F4               	addwfc	prodh,w,c
 18179  0063A0  6EDA               	movwf	fsr2h,c
 18180  0063A2  06DF               	decf	indf2,f,c
 18181  0063A4                     l3636:
 18182                           
 18183                           ; BSR set to: 0
 18184                           ;menu.c: 742: }
 18185                           ;menu.c: 743: encoder_direction = 0x00;
 18186                           
 18187                           ; BSR set to: 0
 18188  0063A4  0E00               	movlw	0
 18189  0063A6  6E35               	movwf	_encoder_direction,c
 18190                           
 18191                           ; BSR set to: 0
 18192                           ;menu.c: 744: printOnce = 0;
 18193  0063A8  9201               	bcf	Function_C_2@printOnce/(0+8),Function_C_2@printOnce& (0+7),c
 18194  0063AA                     l3635:
 18195                           
 18196                           ;menu.c: 745: }
 18197                           ;menu.c: 747: if(printOnce == 0){
 18198                           
 18199                           ; BSR set to: 0
 18200  0063AA  B201               	btfsc	Function_C_2@printOnce/(0+8),Function_C_2@printOnce& (0+7),c
 18201  0063AC  D01E               	goto	l3637
 18202                           
 18203                           ;menu.c: 748: int2string(DRUM_NOTE[array_index]);
 18204  0063AE  0100               	movlb	0	; () banked
 18205  0063B0  51C8               	movf	Function_C_2@array_index& (0+255),w,b
 18206  0063B2  0D01               	mullw	1
 18207  0063B4  0EEA               	movlw	low _DRUM_NOTE
 18208  0063B6  24F3               	addwf	prodl,w,c
 18209  0063B8  6ED9               	movwf	fsr2l,c
 18210  0063BA  0E01               	movlw	high _DRUM_NOTE
 18211  0063BC  20F4               	addwfc	prodh,w,c
 18212  0063BE  6EDA               	movwf	fsr2h,c
 18213  0063C0  50DF               	movf	indf2,w,c
 18214  0063C2  6FC7               	movwf	??_Function_C_2& (0+255),b
 18215  0063C4  51C7               	movf	??_Function_C_2& (0+255),w,b
 18216  0063C6  6F60               	movwf	int2string@number& (0+255),b
 18217  0063C8  6B61               	clrf	(int2string@number+1)& (0+255),b
 18218  0063CA  EC42  F03B         	call	_int2string	;wreg free
 18219                           
 18220                           ;menu.c: 749: Lcd_Set_Cursor(2,13);
 18221  0063CE  0E0D               	movlw	13
 18222  0063D0  0100               	movlb	0	; () banked
 18223  0063D2  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 18224  0063D4  0E02               	movlw	2
 18225  0063D6  EC8A  F048         	call	_Lcd_Set_Cursor
 18226                           
 18227                           ;menu.c: 750: Lcd_Print_String(string2display);
 18228  0063DA  0E94               	movlw	low _string2display
 18229  0063DC  0100               	movlb	0	; () banked
 18230  0063DE  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 18231  0063E0  0E01               	movlw	high _string2display
 18232  0063E2  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18233  0063E4  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 18234                           
 18235                           ;menu.c: 751: printOnce = 1;
 18236  0063E8  8201               	bsf	Function_C_2@printOnce/(0+8),Function_C_2@printOnce& (0+7),c
 18237  0063EA                     l3637:
 18238  0063EA  B605               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 18239  0063EC  0012               	return	
 18240  0063EE  D79F               	goto	l3631
 18241  0063F0                     __end_of_Function_C_2:
 18242                           	opt stack 0
 18243                           tblptru	equ	0xFF8
 18244                           tblptrh	equ	0xFF7
 18245                           tblptrl	equ	0xFF6
 18246                           tablat	equ	0xFF5
 18247                           prodh	equ	0xFF4
 18248                           prodl	equ	0xFF3
 18249                           intcon	equ	0xFF2
 18250                           intcon2	equ	0xFF1
 18251                           postinc0	equ	0xFEE
 18252                           wreg	equ	0xFE8
 18253                           postinc1	equ	0xFE6
 18254                           indf2	equ	0xFDF
 18255                           postinc2	equ	0xFDE
 18256                           postdec2	equ	0xFDD
 18257                           plusw2	equ	0xFDB
 18258                           fsr2h	equ	0xFDA
 18259                           fsr2l	equ	0xFD9
 18260                           status	equ	0xFD8
 18261                           
 18262 ;; *************** function _int2string *****************
 18263 ;; Defined at:
 18264 ;;		line 86 in file "menu.c"
 18265 ;; Parameters:    Size  Location     Type
 18266 ;;  number          2    0[BANK0 ] int 
 18267 ;; Auto vars:     Size  Location     Type
 18268 ;;  number_to_di    2    4[BANK0 ] int 
 18269 ;; Return value:  Size  Location     Type
 18270 ;;                  1    wreg      void 
 18271 ;; Registers used:
 18272 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl
 18273 ;; Tracked objects:
 18274 ;;		On entry : 0/0
 18275 ;;		On exit  : 0/0
 18276 ;;		Unchanged: 0/0
 18277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18278 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18279 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18280 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18281 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18282 ;;Total ram usage:        6 bytes
 18283 ;; Hardware stack levels used:    1
 18284 ;; Hardware stack levels required when called:    6
 18285 ;; This function calls:
 18286 ;;		___awdiv
 18287 ;;		___awmod
 18288 ;; This function is called by:
 18289 ;;		_setControllerNumbers
 18290 ;;		_Function_C_2
 18291 ;;		_Function_C_3
 18292 ;;		_Function_D_2
 18293 ;;		_Function_E_1
 18294 ;;		_Function_E_2
 18295 ;;		_Function_F
 18296 ;;		_Function_H_2
 18297 ;;		_Function_H_3
 18298 ;; This function uses a non-reentrant model
 18299 ;;
 18300                           
 18301                           	psect	text54
 18302  007684                     __ptext54:
 18303                           	opt stack 0
 18304  007684                     _int2string:
 18305                           	opt stack 21
 18306                           
 18307                           ;menu.c: 88: static __bit isNegative = 0;
 18308                           ;menu.c: 89: signed int number_to_display_temp = 0;
 18309                           
 18310                           ;incstack = 0
 18311  007684  0E00               	movlw	0
 18312  007686  0100               	movlb	0	; () banked
 18313  007688  6F65               	movwf	(int2string@number_to_display_temp+1)& (0+255),b
 18314  00768A  0E00               	movlw	0
 18315  00768C  6F64               	movwf	int2string@number_to_display_temp& (0+255),b
 18316                           
 18317                           ; BSR set to: 0
 18318                           ;menu.c: 91: if(number < 0) {
 18319  00768E  AF61               	btfss	(int2string@number+1)& (0+255),7,b
 18320  007690  D00E               	goto	l3463
 18321                           
 18322                           ; BSR set to: 0
 18323                           ;menu.c: 92: isNegative = 1;
 18324  007692  8601               	bsf	int2string@isNegative/(0+8),int2string@isNegative& (0+7),c
 18325                           
 18326                           ;menu.c: 93: number_to_display_temp = (0 - number);
 18327  007694  C060  F062         	movff	int2string@number,??_int2string
 18328  007698  C061  F063         	movff	int2string@number+1,??_int2string+1
 18329  00769C  1F62               	comf	??_int2string& (0+255),f,b
 18330  00769E  1F63               	comf	(??_int2string+1)& (0+255),f,b
 18331  0076A0  4B62               	infsnz	??_int2string& (0+255),f,b
 18332  0076A2  2B63               	incf	(??_int2string+1)& (0+255),f,b
 18333  0076A4  C062  F064         	movff	??_int2string,int2string@number_to_display_temp
 18334  0076A8  C063  F065         	movff	??_int2string+1,int2string@number_to_display_temp+1
 18335                           
 18336                           ;menu.c: 94: }
 18337  0076AC  D005               	goto	l3464
 18338  0076AE                     l3463:
 18339                           
 18340                           ; BSR set to: 0
 18341                           ;menu.c: 95: else {
 18342                           ;menu.c: 96: isNegative = 0;
 18343  0076AE  9601               	bcf	int2string@isNegative/(0+8),int2string@isNegative& (0+7),c
 18344                           
 18345                           ;menu.c: 97: number_to_display_temp = number;
 18346  0076B0  C060  F064         	movff	int2string@number,int2string@number_to_display_temp
 18347  0076B4  C061  F065         	movff	int2string@number+1,int2string@number_to_display_temp+1
 18348  0076B8                     l3464:
 18349                           
 18350                           ; BSR set to: 0
 18351                           ;menu.c: 98: }
 18352                           ;menu.c: 101: if(isNegative) {
 18353  0076B8  A601               	btfss	int2string@isNegative/(0+8),int2string@isNegative& (0+7),c
 18354  0076BA  D002               	goto	l3465
 18355                           
 18356                           ; BSR set to: 0
 18357                           ;menu.c: 102: string2display[0] = '-';
 18358  0076BC  0E2D               	movlw	45
 18359  0076BE  D001               	goto	L4
 18360  0076C0                     l3465:
 18361                           
 18362                           ;menu.c: 104: else{string2display[0] = ' ';}
 18363                           
 18364                           ; BSR set to: 1
 18365  0076C0  0E20               	movlw	32
 18366  0076C2                     L4:
 18367  0076C2  0101               	movlb	1	; () banked
 18368  0076C4  6F94               	movwf	_string2display& (0+255),b
 18369                           
 18370                           ; BSR set to: 1
 18371                           ;menu.c: 107: string2display[1] = 48 + ((number_to_display_temp / 100) % 10);
 18372                           
 18373                           ; BSR set to: 1
 18374  0076C6  0E0A               	movlw	10
 18375  0076C8  6EE6               	movwf	postinc1,c
 18376  0076CA  0E00               	movlw	0
 18377  0076CC  6EE6               	movwf	postinc1,c
 18378  0076CE  0E64               	movlw	100
 18379  0076D0  6EE6               	movwf	postinc1,c
 18380  0076D2  0E00               	movlw	0
 18381  0076D4  6EE6               	movwf	postinc1,c
 18382  0076D6  C064  FFE6         	movff	int2string@number_to_display_temp,postinc1
 18383  0076DA  C065  FFE6         	movff	int2string@number_to_display_temp+1,postinc1
 18384  0076DE  ECF8  F031         	call	___awdiv	;wreg free
 18385  0076E2  C03E  FFE6         	movff	btemp,postinc1
 18386  0076E6  C03F  FFE6         	movff	btemp+1,postinc1
 18387  0076EA  ECA8  F034         	call	___awmod	;wreg free
 18388  0076EE  503E               	movf	btemp,w,c
 18389  0076F0  0F30               	addlw	48
 18390  0076F2  0101               	movlb	1	; () banked
 18391  0076F4  6F95               	movwf	(_string2display+1)& (0+255),b
 18392                           
 18393                           ; BSR set to: 1
 18394                           ;menu.c: 108: string2display[2] = 48 + ((number_to_display_temp / 10) % 10);
 18395  0076F6  0E0A               	movlw	10
 18396  0076F8  6EE6               	movwf	postinc1,c
 18397  0076FA  0E00               	movlw	0
 18398  0076FC  6EE6               	movwf	postinc1,c
 18399  0076FE  0E0A               	movlw	10
 18400  007700  6EE6               	movwf	postinc1,c
 18401  007702  0E00               	movlw	0
 18402  007704  6EE6               	movwf	postinc1,c
 18403  007706  C064  FFE6         	movff	int2string@number_to_display_temp,postinc1
 18404  00770A  C065  FFE6         	movff	int2string@number_to_display_temp+1,postinc1
 18405  00770E  ECF8  F031         	call	___awdiv	;wreg free
 18406  007712  C03E  FFE6         	movff	btemp,postinc1
 18407  007716  C03F  FFE6         	movff	btemp+1,postinc1
 18408  00771A  ECA8  F034         	call	___awmod	;wreg free
 18409  00771E  503E               	movf	btemp,w,c
 18410  007720  0F30               	addlw	48
 18411  007722  0101               	movlb	1	; () banked
 18412  007724  6F96               	movwf	(_string2display+2)& (0+255),b
 18413                           
 18414                           ; BSR set to: 1
 18415                           ;menu.c: 109: string2display[3] = 48 + (number_to_display_temp % 10);
 18416  007726  0E0A               	movlw	10
 18417  007728  6EE6               	movwf	postinc1,c
 18418  00772A  0E00               	movlw	0
 18419  00772C  6EE6               	movwf	postinc1,c
 18420  00772E  C064  FFE6         	movff	int2string@number_to_display_temp,postinc1
 18421  007732  C065  FFE6         	movff	int2string@number_to_display_temp+1,postinc1
 18422  007736  ECA8  F034         	call	___awmod	;wreg free
 18423  00773A  503E               	movf	btemp,w,c
 18424  00773C  0F30               	addlw	48
 18425  00773E  0101               	movlb	1	; () banked
 18426  007740  6F97               	movwf	(_string2display+3)& (0+255),b
 18427                           
 18428                           ; BSR set to: 1
 18429                           ;menu.c: 110: string2display[4] = '\0';
 18430  007742  0E00               	movlw	0
 18431  007744  6F98               	movwf	(_string2display+4)& (0+255),b
 18432                           
 18433                           ; BSR set to: 1
 18434  007746  0012               	return		;funcret
 18435  007748                     __end_of_int2string:
 18436                           	opt stack 0
 18437                           tblptru	equ	0xFF8
 18438                           tblptrh	equ	0xFF7
 18439                           tblptrl	equ	0xFF6
 18440                           tablat	equ	0xFF5
 18441                           prodh	equ	0xFF4
 18442                           prodl	equ	0xFF3
 18443                           intcon	equ	0xFF2
 18444                           intcon2	equ	0xFF1
 18445                           postinc0	equ	0xFEE
 18446                           wreg	equ	0xFE8
 18447                           postinc1	equ	0xFE6
 18448                           indf2	equ	0xFDF
 18449                           postinc2	equ	0xFDE
 18450                           postdec2	equ	0xFDD
 18451                           plusw2	equ	0xFDB
 18452                           fsr2h	equ	0xFDA
 18453                           fsr2l	equ	0xFD9
 18454                           status	equ	0xFD8
 18455                           
 18456 ;; *************** function ___awdiv *****************
 18457 ;; Defined at:
 18458 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 18459 ;; Parameters:    Size  Location     Type
 18460 ;;  dividend        2  [STACK] int 
 18461 ;;  divisor         2  [STACK] int 
 18462 ;; Auto vars:     Size  Location     Type
 18463 ;;  quotient        2  [STACK] int 
 18464 ;;  sign            1  [STACK] unsigned char 
 18465 ;;  counter         1  [STACK] unsigned char 
 18466 ;; Return value:  Size  Location     Type
 18467 ;;                  2  [STACK] int 
 18468 ;; Registers used:
 18469 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl
 18470 ;; Tracked objects:
 18471 ;;		On entry : 3E/1
 18472 ;;		On exit  : 0/0
 18473 ;;		Unchanged: 0/0
 18474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18479 ;;Total ram usage:        0 bytes
 18480 ;; Hardware stack levels used:    1
 18481 ;; Hardware stack levels required when called:    5
 18482 ;; This function calls:
 18483 ;;		Nothing
 18484 ;; This function is called by:
 18485 ;;		_displayDigits
 18486 ;;		_int2string
 18487 ;; This function uses a reentrant model
 18488 ;;
 18489                           
 18490                           	psect	text55
 18491  0063F0                     __ptext55:
 18492                           	opt stack 0
 18493  0063F0                     ___awdiv:
 18494                           	opt stack 0
 18495                           
 18496                           ; BSR set to: 1
 18497                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
 18498  0063F0  52E6               	movf	postinc1,f,c
 18499  0063F2  52E6               	movf	postinc1,f,c
 18500  0063F4  52E6               	movf	postinc1,f,c
 18501  0063F6  52E6               	movf	postinc1,f,c
 18502                           
 18503                           ;stkvar	___awdiv@sign @ sp[(-4)+2]
 18504                           
 18505                           ;incstack = 0
 18506  0063F8  0EFE               	movlw	-2
 18507  0063FA  6AE3               	clrf	plusw1,c
 18508                           
 18509                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18510  0063FC  0EF9               	movlw	-7
 18511  0063FE  AEE3               	btfss	plusw1,7,c
 18512  006400  D009               	goto	l32916
 18513                           
 18514                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18515                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18516  006402  0EF8               	movlw	-8
 18517  006404  6CE3               	negf	plusw1,c
 18518  006406  0EF9               	movlw	-7
 18519  006408  1EE3               	comf	plusw1,f,c
 18520  00640A  B0D8               	btfsc	status,0,c
 18521  00640C  2AE3               	incf	plusw1,f,c
 18522                           
 18523                           ;stkvar	___awdiv@sign @ sp[(-4)+2]
 18524  00640E  0EFE               	movlw	-2
 18525  006410  6AE3               	clrf	plusw1,c
 18526  006412  2AE3               	incf	plusw1,f,c
 18527  006414                     l32916:
 18528                           
 18529                           ;stkvar	___awdiv@dividend @ sp[(-4)+-2]
 18530  006414  0EFB               	movlw	-5
 18531  006416  AEE3               	btfss	plusw1,7,c
 18532  006418  D008               	goto	l32922
 18533                           
 18534                           ;stkvar	___awdiv@dividend @ sp[(-4)+-2]
 18535                           ;stkvar	___awdiv@dividend @ sp[(-4)+-2]
 18536  00641A  0EFA               	movlw	-6
 18537  00641C  6CE3               	negf	plusw1,c
 18538  00641E  0EFB               	movlw	-5
 18539  006420  1EE3               	comf	plusw1,f,c
 18540  006422  B0D8               	btfsc	status,0,c
 18541  006424  2AE3               	incf	plusw1,f,c
 18542                           
 18543                           ;stkvar	___awdiv@sign @ sp[(-4)+2]
 18544  006426  0EFE               	movlw	-2
 18545  006428  70E3               	btg	plusw1,0,c
 18546  00642A                     l32922:
 18547                           
 18548                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
 18549  00642A  0EFC               	movlw	-4
 18550  00642C  6AE3               	clrf	plusw1,c
 18551  00642E  0EFD               	movlw	-3
 18552  006430  6AE3               	clrf	plusw1,c
 18553                           
 18554                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18555  006432  0EF8               	movlw	-8
 18556  006434  CFE3 F03E          	movff	plusw1,btemp
 18557  006438  0EF9               	movlw	-7
 18558  00643A  50E3               	movf	plusw1,w,c
 18559  00643C  103E               	iorwf	btemp,w,c
 18560  00643E  B4D8               	btfsc	status,2,c
 18561  006440  D05B               	goto	u59690
 18562                           
 18563                           ;stkvar	___awdiv@counter @ sp[(-4)+3]
 18564  006442  0EFF               	movlw	-1
 18565  006444  6AE3               	clrf	plusw1,c
 18566  006446  D010               	goto	L5
 18567  006448                     l32928:
 18568                           
 18569                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18570  006448  0EF8               	movlw	-8
 18571  00644A  50E3               	movf	plusw1,w,c
 18572  00644C  90D8               	bcf	status,0,c
 18573  00644E  34E8               	rlcf	wreg,w,c
 18574  006450  6E3E               	movwf	btemp,c
 18575  006452  0EF8               	movlw	-8
 18576  006454  C03E  FFE3         	movff	btemp,plusw1
 18577  006458  0EF9               	movlw	-7
 18578  00645A  50E3               	movf	plusw1,w,c
 18579  00645C  34E8               	rlcf	wreg,w,c
 18580  00645E  6E3E               	movwf	btemp,c
 18581  006460  0EF9               	movlw	-7
 18582  006462  C03E  FFE3         	movff	btemp,plusw1
 18583                           
 18584                           ;stkvar	___awdiv@counter @ sp[(-4)+3]
 18585  006466  0EFF               	movlw	-1
 18586  006468                     L5:
 18587  006468  2AE3               	incf	plusw1,f,c
 18588                           
 18589                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18590  00646A  0EF9               	movlw	-7
 18591  00646C  AEE3               	btfss	plusw1,7,c
 18592  00646E  D7EC               	goto	l32928
 18593  006470                     u59670:
 18594                           
 18595                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
 18596  006470  0EFC               	movlw	-4
 18597  006472  50E3               	movf	plusw1,w,c
 18598  006474  90D8               	bcf	status,0,c
 18599  006476  34E8               	rlcf	wreg,w,c
 18600  006478  6E3E               	movwf	btemp,c
 18601  00647A  0EFC               	movlw	-4
 18602  00647C  C03E  FFE3         	movff	btemp,plusw1
 18603  006480  0EFD               	movlw	-3
 18604  006482  50E3               	movf	plusw1,w,c
 18605  006484  34E8               	rlcf	wreg,w,c
 18606  006486  6E3E               	movwf	btemp,c
 18607  006488  0EFD               	movlw	-3
 18608  00648A  C03E  FFE3         	movff	btemp,plusw1
 18609                           
 18610                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18611  00648E  0EF8               	movlw	-8
 18612  006490  CFE3 F03F          	movff	plusw1,btemp+1
 18613  006494  0EF9               	movlw	-7
 18614  006496  CFE3 F040          	movff	plusw1,btemp+2
 18615                           
 18616                           ;stkvar	___awdiv@dividend @ sp[(-4)+-2]
 18617  00649A  0EFA               	movlw	-6
 18618  00649C  CFE3 F048          	movff	plusw1,btemp+10
 18619  0064A0  0EFB               	movlw	-5
 18620  0064A2  CFE3 F049          	movff	plusw1,btemp+11
 18621  0064A6  503F               	movf	btemp+1,w,c
 18622  0064A8  5C48               	subwf	btemp+10,w,c
 18623  0064AA  5040               	movf	btemp+2,w,c
 18624  0064AC  5849               	subwfb	btemp+11,w,c
 18625  0064AE  A0D8               	btfss	status,0,c
 18626  0064B0  D014               	goto	l32942
 18627                           
 18628                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18629                           ;stkvar	___awdiv@dividend @ sp[(-4)+-2]
 18630  0064B2  0EFA               	movlw	-6
 18631  0064B4  50E3               	movf	plusw1,w,c
 18632  0064B6  6E3E               	movwf	btemp,c
 18633  0064B8  0EF8               	movlw	-8
 18634  0064BA  50E3               	movf	plusw1,w,c
 18635  0064BC  5E3E               	subwf	btemp,f,c
 18636  0064BE  0EFA               	movlw	-6
 18637  0064C0  C03E  FFE3         	movff	btemp,plusw1
 18638  0064C4  0EFB               	movlw	-5
 18639  0064C6  50E3               	movf	plusw1,w,c
 18640  0064C8  6E3E               	movwf	btemp,c
 18641  0064CA  0EF9               	movlw	-7
 18642  0064CC  50E3               	movf	plusw1,w,c
 18643  0064CE  5A3E               	subwfb	btemp,f,c
 18644  0064D0  0EFB               	movlw	-5
 18645  0064D2  C03E  FFE3         	movff	btemp,plusw1
 18646                           
 18647                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
 18648  0064D6  0EFC               	movlw	-4
 18649  0064D8  80E3               	bsf	plusw1,0,c
 18650  0064DA                     l32942:
 18651                           
 18652                           ;stkvar	___awdiv@divisor @ sp[(-4)+-4]
 18653  0064DA  90D8               	bcf	status,0,c
 18654  0064DC  0EF9               	movlw	-7
 18655  0064DE  32E3               	rrcf	plusw1,f,c
 18656  0064E0  0EF8               	movlw	-8
 18657  0064E2  32E3               	rrcf	plusw1,f,c
 18658                           
 18659                           ;stkvar	___awdiv@counter @ sp[(-4)+3]
 18660  0064E4  0EFF               	movlw	-1
 18661  0064E6  50E3               	movf	plusw1,w,c
 18662  0064E8  6E3E               	movwf	btemp,c
 18663  0064EA  0E01               	movlw	1
 18664  0064EC  5E3E               	subwf	btemp,f,c
 18665  0064EE  0EFF               	movlw	-1
 18666  0064F0  C03E  FFE3         	movff	btemp,plusw1
 18667  0064F4  A4D8               	btfss	status,2,c
 18668  0064F6  D7BC               	goto	u59670
 18669  0064F8                     u59690:
 18670                           
 18671                           ;stkvar	___awdiv@sign @ sp[(-4)+2]
 18672  0064F8  0EFE               	movlw	-2
 18673  0064FA  50E3               	movf	plusw1,w,c
 18674  0064FC  B4D8               	btfsc	status,2,c
 18675  0064FE  D006               	goto	l32950
 18676                           
 18677                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
 18678                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
 18679  006500  0EFC               	movlw	-4
 18680  006502  6CE3               	negf	plusw1,c
 18681  006504  0EFD               	movlw	-3
 18682  006506  1EE3               	comf	plusw1,f,c
 18683  006508  B0D8               	btfsc	status,0,c
 18684  00650A  2AE3               	incf	plusw1,f,c
 18685  00650C                     l32950:
 18686                           
 18687                           ;stkvar	___awdiv@quotient @ sp[(-4)+0]
 18688  00650C  0EFC               	movlw	-4
 18689  00650E  CFE3 F03E          	movff	plusw1,btemp
 18690  006512  0EFD               	movlw	-3
 18691  006514  CFE3 F03F          	movff	plusw1,btemp+1
 18692                           
 18693                           ; ___awdiv: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
 18694  006518  0EF8               	movlw	248
 18695  00651A  26E1               	addwf	fsr1l,f,c
 18696  00651C  0EFF               	movlw	255
 18697  00651E  22E2               	addwfc	fsr1h,f,c
 18698  006520  0012               	return		;funcret
 18699  006522                     __end_of___awdiv:
 18700                           	opt stack 0
 18701                           tblptru	equ	0xFF8
 18702                           tblptrh	equ	0xFF7
 18703                           tblptrl	equ	0xFF6
 18704                           tablat	equ	0xFF5
 18705                           prodh	equ	0xFF4
 18706                           prodl	equ	0xFF3
 18707                           intcon	equ	0xFF2
 18708                           intcon2	equ	0xFF1
 18709                           postinc0	equ	0xFEE
 18710                           wreg	equ	0xFE8
 18711                           postinc1	equ	0xFE6
 18712                           plusw1	equ	0xFE3
 18713                           fsr1h	equ	0xFE2
 18714                           fsr1l	equ	0xFE1
 18715                           indf2	equ	0xFDF
 18716                           postinc2	equ	0xFDE
 18717                           postdec2	equ	0xFDD
 18718                           plusw2	equ	0xFDB
 18719                           fsr2h	equ	0xFDA
 18720                           fsr2l	equ	0xFD9
 18721                           status	equ	0xFD8
 18722                           
 18723 ;; *************** function _Function_C_1 *****************
 18724 ;; Defined at:
 18725 ;;		line 651 in file "menu.c"
 18726 ;; Parameters:    Size  Location     Type
 18727 ;;		None
 18728 ;; Auto vars:     Size  Location     Type
 18729 ;;		None
 18730 ;; Return value:  Size  Location     Type
 18731 ;;                  1    wreg      void 
 18732 ;; Registers used:
 18733 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18734 ;; Tracked objects:
 18735 ;;		On entry : 0/0
 18736 ;;		On exit  : 0/0
 18737 ;;		Unchanged: 0/0
 18738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18743 ;;Total ram usage:        0 bytes
 18744 ;; Hardware stack levels used:    1
 18745 ;; Hardware stack levels required when called:   16
 18746 ;; This function calls:
 18747 ;;		_Lcd_Print_String
 18748 ;;		___lbmod
 18749 ;;		___wmul
 18750 ;;		_clear_row1
 18751 ;;		_clear_row2
 18752 ;;		_un_block_code
 18753 ;; This function is called by:
 18754 ;;		_Function_C
 18755 ;; This function uses a non-reentrant model
 18756 ;;
 18757                           
 18758                           	psect	text56
 18759  007B6A                     __ptext56:
 18760                           	opt stack 0
 18761  007B6A                     _Function_C_1:
 18762                           	opt stack 12
 18763                           
 18764                           ;menu.c: 653: which_screen = DRUMS_CC_TYPE_MENU;
 18765                           
 18766                           ;incstack = 0
 18767  007B6A  0E0C               	movlw	12
 18768  007B6C  6E4E               	movwf	_which_screen,c
 18769                           
 18770                           ;menu.c: 654: lcd_print_once = 0;
 18771  007B6E  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18772                           
 18773                           ;menu.c: 655: encoder_click = 0;
 18774  007B70  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 18775                           
 18776                           ;menu.c: 657: drumCCTypeMenu.selector = CONTROL_MODE;
 18777  007B72  0E00               	movlw	0
 18778  007B74  BC01               	btfsc	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 18779  007B76  0E01               	movlw	1
 18780  007B78  0101               	movlb	1	; () banked
 18781  007B7A  6F64               	movwf	(_drumCCTypeMenu+2)& (0+255),b
 18782                           
 18783                           ;menu.c: 659: while(encoder_click == 0) {
 18784  007B7C  D02D               	goto	l3616
 18785  007B7E                     
 18786                           ;menu.c: 663: un_block_code();
 18787                           
 18788                           ; BSR set to: 1
 18789  007B7E  ECF4  F04C         	call	_un_block_code	;wreg free
 18790                           
 18791                           ;menu.c: 665: if (lcd_print_once == 0) {
 18792  007B82  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18793  007B84  D028               	goto	l3618
 18794                           
 18795                           ;menu.c: 666: clear_row1();
 18796  007B86  EC6C  F04C         	call	_clear_row1	;wreg free
 18797                           
 18798                           ;menu.c: 667: Lcd_Print_String("Drum CC Mode:");
 18799  007B8A  0EE0               	movlw	low STR_27
 18800  007B8C  0100               	movlb	0	; () banked
 18801  007B8E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 18802  007B90  0EFE               	movlw	high STR_27
 18803  007B92  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18804  007B94  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 18805                           
 18806                           ;menu.c: 668: clear_row2();
 18807  007B98  EC58  F04C         	call	_clear_row2	;wreg free
 18808                           
 18809                           ;menu.c: 669: Lcd_Print_String(LCD_STRINGS[(drumCCTypeMenu.selector % drumCCTypeMenu.num
      +                          ber) + drumCCTypeMenu.address]);
 18810  007B9C  0101               	movlb	1	; () banked
 18811  007B9E  5162               	movf	_drumCCTypeMenu& (0+255),w,b
 18812  007BA0  6EE6               	movwf	postinc1,c
 18813  007BA2  5164               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 18814  007BA4  6EE6               	movwf	postinc1,c
 18815  007BA6  ECA5  F041         	call	___lbmod	;wreg free
 18816  007BAA  503E               	movf	btemp,w,c
 18817  007BAC  0101               	movlb	1	; () banked
 18818  007BAE  2563               	addwf	(_drumCCTypeMenu+1)& (0+255),w,b
 18819  007BB0  0100               	movlb	0	; () banked
 18820  007BB2  6F60               	movwf	___wmul@multiplier& (0+255),b
 18821  007BB4  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 18822  007BB6  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 18823  007BB8  0E00               	movlw	0
 18824  007BBA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 18825  007BBC  0E11               	movlw	17
 18826  007BBE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 18827  007BC0  EC80  F04C         	call	___wmul	;wreg free
 18828  007BC4  0E9E               	movlw	low _LCD_STRINGS
 18829  007BC6  0100               	movlb	0	; () banked
 18830  007BC8  2560               	addwf	?___wmul& (0+255),w,b
 18831  007BCA  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 18832  007BCC  0EF3               	movlw	high _LCD_STRINGS
 18833  007BCE  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 18834  007BD0  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 18835  007BD2  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 18836  007BD6                     l3618:
 18837                           
 18838                           ;menu.c: 670: }
 18839                           ;menu.c: 671: lcd_print_once = 1;
 18840  007BD6  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18841  007BD8                     l3616:
 18842  007BD8  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 18843  007BDA  D7D1               	goto	l3617
 18844                           
 18845                           ;menu.c: 672: }
 18846                           ;menu.c: 674: CONTROL_MODE = drumCCTypeMenu.selector % drumCCTypeMenu.number;
 18847  007BDC  0101               	movlb	1	; () banked
 18848  007BDE  5162               	movf	_drumCCTypeMenu& (0+255),w,b
 18849  007BE0  6EE6               	movwf	postinc1,c
 18850  007BE2  5164               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 18851  007BE4  6EE6               	movwf	postinc1,c
 18852  007BE6  ECA5  F041         	call	___lbmod	;wreg free
 18853  007BEA  303E               	rrcf	btemp,w,c
 18854  007BEC  A0D8               	btfss	status,0,c
 18855  007BEE  D002               	goto	u58660
 18856  007BF0  8C01               	bsf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 18857  007BF2  D001               	goto	u58675
 18858  007BF4                     u58660:
 18859  007BF4  9C01               	bcf	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 18860  007BF6                     u58675:
 18861                           
 18862                           ;menu.c: 677: if(CONTROL_MODE == 1){
 18863  007BF6  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 18864  007BF8  0012               	return	
 18865                           
 18866                           ;menu.c: 678: toggle_state.T1 = 0;
 18867  007BFA  902C               	bcf	_toggle_state,0,c
 18868                           
 18869                           ;menu.c: 679: toggle_state.T2 = 0;
 18870  007BFC  922C               	bcf	_toggle_state,1,c
 18871                           
 18872                           ;menu.c: 680: toggle_state.T3 = 0;
 18873  007BFE  942C               	bcf	_toggle_state,2,c
 18874                           
 18875                           ;menu.c: 681: toggle_state.T4 = 0;
 18876  007C00  962C               	bcf	_toggle_state,3,c
 18877                           
 18878                           ;menu.c: 682: toggle_state.T5 = 0;
 18879  007C02  982C               	bcf	_toggle_state,4,c
 18880                           
 18881                           ;menu.c: 683: toggle_state.T6 = 0;
 18882  007C04  9A2C               	bcf	_toggle_state,5,c
 18883                           
 18884                           ;menu.c: 684: toggle_state.T7 = 0;
 18885  007C06  9C2C               	bcf	_toggle_state,6,c
 18886                           
 18887                           ;menu.c: 685: toggle_state.T8 = 0;
 18888  007C08  9E2C               	bcf	_toggle_state,7,c
 18889  007C0A  0012               	return	
 18890  007C0C                     __end_of_Function_C_1:
 18891                           	opt stack 0
 18892                           tblptru	equ	0xFF8
 18893                           tblptrh	equ	0xFF7
 18894                           tblptrl	equ	0xFF6
 18895                           tablat	equ	0xFF5
 18896                           prodh	equ	0xFF4
 18897                           prodl	equ	0xFF3
 18898                           intcon	equ	0xFF2
 18899                           intcon2	equ	0xFF1
 18900                           postinc0	equ	0xFEE
 18901                           wreg	equ	0xFE8
 18902                           postinc1	equ	0xFE6
 18903                           plusw1	equ	0xFE3
 18904                           fsr1h	equ	0xFE2
 18905                           fsr1l	equ	0xFE1
 18906                           indf2	equ	0xFDF
 18907                           postinc2	equ	0xFDE
 18908                           postdec2	equ	0xFDD
 18909                           plusw2	equ	0xFDB
 18910                           fsr2h	equ	0xFDA
 18911                           fsr2l	equ	0xFD9
 18912                           status	equ	0xFD8
 18913                           
 18914 ;; *************** function _Function_B *****************
 18915 ;; Defined at:
 18916 ;;		line 628 in file "menu.c"
 18917 ;; Parameters:    Size  Location     Type
 18918 ;;		None
 18919 ;; Auto vars:     Size  Location     Type
 18920 ;;		None
 18921 ;; Return value:  Size  Location     Type
 18922 ;;                  1    wreg      void 
 18923 ;; Registers used:
 18924 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18925 ;; Tracked objects:
 18926 ;;		On entry : 0/0
 18927 ;;		On exit  : 0/0
 18928 ;;		Unchanged: 0/0
 18929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18934 ;;Total ram usage:        0 bytes
 18935 ;; Hardware stack levels used:    1
 18936 ;; Hardware stack levels required when called:   16
 18937 ;; This function calls:
 18938 ;;		_Lcd_Print_String
 18939 ;;		___lbmod
 18940 ;;		___wmul
 18941 ;;		_clear_row2
 18942 ;;		_un_block_code
 18943 ;; This function is called by:
 18944 ;;		_menu_lcd
 18945 ;; This function uses a non-reentrant model
 18946 ;;
 18947                           
 18948                           	psect	text57
 18949  0088E8                     __ptext57:
 18950                           	opt stack 0
 18951  0088E8                     _Function_B:
 18952                           	opt stack 13
 18953                           
 18954                           ;menu.c: 630: which_screen = TRANSPOSE_MENU;
 18955                           
 18956                           ;incstack = 0
 18957  0088E8  0E04               	movlw	4
 18958  0088EA  6E4E               	movwf	_which_screen,c
 18959                           
 18960                           ;menu.c: 631: lcd_print_once = 0;
 18961  0088EC  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18962                           
 18963                           ;menu.c: 633: transposeMenu.selector = TRANSPOSE_MODE;
 18964  0088EE  0E00               	movlw	0
 18965  0088F0  BE04               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 18966  0088F2  0E01               	movlw	1
 18967  0088F4  0101               	movlb	1	; () banked
 18968  0088F6  6F6A               	movwf	(_transposeMenu+2)& (0+255),b
 18969                           
 18970                           ;menu.c: 635: while(encoder_click == 0) {
 18971  0088F8  D031               	goto	l3609
 18972  0088FA                     
 18973                           ;menu.c: 639: un_block_code();
 18974                           
 18975                           ; BSR set to: 1
 18976  0088FA  ECF4  F04C         	call	_un_block_code	;wreg free
 18977                           
 18978                           ;menu.c: 641: if (lcd_print_once == 0) {
 18979  0088FE  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 18980  008900  D02C               	goto	u60435
 18981                           
 18982                           ;menu.c: 642: clear_row2();
 18983  008902  EC58  F04C         	call	_clear_row2	;wreg free
 18984                           
 18985                           ;menu.c: 643: Lcd_Print_String(LCD_STRINGS[(transposeMenu.selector % transposeMenu.numbe
      +                          r) + transposeMenu.address]);
 18986  008906  0101               	movlb	1	; () banked
 18987  008908  5168               	movf	_transposeMenu& (0+255),w,b
 18988  00890A  6EE6               	movwf	postinc1,c
 18989  00890C  516A               	movf	(_transposeMenu+2)& (0+255),w,b
 18990  00890E  6EE6               	movwf	postinc1,c
 18991  008910  ECA5  F041         	call	___lbmod	;wreg free
 18992  008914  503E               	movf	btemp,w,c
 18993  008916  0101               	movlb	1	; () banked
 18994  008918  2569               	addwf	(_transposeMenu+1)& (0+255),w,b
 18995  00891A  0100               	movlb	0	; () banked
 18996  00891C  6F60               	movwf	___wmul@multiplier& (0+255),b
 18997  00891E  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 18998  008920  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 18999  008922  0E00               	movlw	0
 19000  008924  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19001  008926  0E11               	movlw	17
 19002  008928  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19003  00892A  EC80  F04C         	call	___wmul	;wreg free
 19004  00892E  0E9E               	movlw	low _LCD_STRINGS
 19005  008930  0100               	movlb	0	; () banked
 19006  008932  2560               	addwf	?___wmul& (0+255),w,b
 19007  008934  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19008  008936  0EF3               	movlw	high _LCD_STRINGS
 19009  008938  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19010  00893A  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19011  00893C  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 19012                           
 19013                           ;menu.c: 644: TRANSPOSE_MODE = transposeMenu.selector % transposeMenu.number;
 19014  008940  0101               	movlb	1	; () banked
 19015  008942  5168               	movf	_transposeMenu& (0+255),w,b
 19016  008944  6EE6               	movwf	postinc1,c
 19017  008946  516A               	movf	(_transposeMenu+2)& (0+255),w,b
 19018  008948  6EE6               	movwf	postinc1,c
 19019  00894A  ECA5  F041         	call	___lbmod	;wreg free
 19020  00894E  303E               	rrcf	btemp,w,c
 19021  008950  A0D8               	btfss	status,0,c
 19022  008952  D002               	goto	u60420
 19023  008954  8E04               	bsf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 19024  008956  D001               	goto	u60435
 19025  008958                     u60420:
 19026  008958  9E04               	bcf	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 19027  00895A                     u60435:
 19028                           
 19029                           ;menu.c: 645: }
 19030                           ;menu.c: 646: lcd_print_once = 1;
 19031  00895A  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19032  00895C                     l3609:
 19033  00895C  B605               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 19034  00895E  0012               	return	
 19035  008960  D7CC               	goto	l3610
 19036  008962                     __end_of_Function_B:
 19037                           	opt stack 0
 19038                           tblptru	equ	0xFF8
 19039                           tblptrh	equ	0xFF7
 19040                           tblptrl	equ	0xFF6
 19041                           tablat	equ	0xFF5
 19042                           prodh	equ	0xFF4
 19043                           prodl	equ	0xFF3
 19044                           intcon	equ	0xFF2
 19045                           intcon2	equ	0xFF1
 19046                           postinc0	equ	0xFEE
 19047                           wreg	equ	0xFE8
 19048                           postinc1	equ	0xFE6
 19049                           plusw1	equ	0xFE3
 19050                           fsr1h	equ	0xFE2
 19051                           fsr1l	equ	0xFE1
 19052                           indf2	equ	0xFDF
 19053                           postinc2	equ	0xFDE
 19054                           postdec2	equ	0xFDD
 19055                           plusw2	equ	0xFDB
 19056                           fsr2h	equ	0xFDA
 19057                           fsr2l	equ	0xFD9
 19058                           status	equ	0xFD8
 19059                           
 19060 ;; *************** function _Function_A *****************
 19061 ;; Defined at:
 19062 ;;		line 571 in file "menu.c"
 19063 ;; Parameters:    Size  Location     Type
 19064 ;;		None
 19065 ;; Auto vars:     Size  Location     Type
 19066 ;;		None
 19067 ;; Return value:  Size  Location     Type
 19068 ;;                  1    wreg      void 
 19069 ;; Registers used:
 19070 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19071 ;; Tracked objects:
 19072 ;;		On entry : 0/0
 19073 ;;		On exit  : 0/0
 19074 ;;		Unchanged: 0/0
 19075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19080 ;;Total ram usage:        0 bytes
 19081 ;; Hardware stack levels used:    1
 19082 ;; Hardware stack levels required when called:   17
 19083 ;; This function calls:
 19084 ;;		_Function_A_1
 19085 ;;		_Function_A_2
 19086 ;;		_Function_A_3
 19087 ;;		_Lcd_Print_String
 19088 ;;		___lbmod
 19089 ;;		___wmul
 19090 ;;		_clear_row2
 19091 ;;		_un_block_code
 19092 ;; This function is called by:
 19093 ;;		_menu_lcd
 19094 ;; This function uses a non-reentrant model
 19095 ;;
 19096                           
 19097                           	psect	text58
 19098  00741E                     __ptext58:
 19099                           	opt stack 0
 19100  00741E                     _Function_A:
 19101                           	opt stack 12
 19102                           
 19103                           ;menu.c: 574: which_screen = KEYBOARD_MENU;
 19104                           
 19105                           ;incstack = 0
 19106  00741E  0E03               	movlw	3
 19107  007420  6E4E               	movwf	_which_screen,c
 19108                           
 19109                           ;menu.c: 575: lcd_print_once = 0;
 19110  007422  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19111                           
 19112                           ;menu.c: 577: keyboardMenu.selector = KEYBOARD_MODE;
 19113  007424  C0F3  F176         	movff	_KEYBOARD_MODE,_keyboardMenu+2
 19114                           
 19115                           ;menu.c: 579: while(encoder_click == 0) {
 19116  007428  D04D               	goto	l3595
 19117  00742A                     
 19118                           ;menu.c: 581: un_block_code();
 19119  00742A  ECF4  F04C         	call	_un_block_code	;wreg free
 19120                           
 19121                           ;menu.c: 583: if (lcd_print_once == 0) {
 19122  00742E  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19123  007430  D044               	goto	l3600
 19124                           
 19125                           ;menu.c: 584: clear_row2();
 19126  007432  EC58  F04C         	call	_clear_row2	;wreg free
 19127                           
 19128                           ;menu.c: 585: Lcd_Print_String(LCD_STRINGS[(keyboardMenu.selector % keyboardMenu.number)
      +                           + keyboardMenu.address]);
 19129  007436  0101               	movlb	1	; () banked
 19130  007438  5174               	movf	_keyboardMenu& (0+255),w,b
 19131  00743A  6EE6               	movwf	postinc1,c
 19132  00743C  5176               	movf	(_keyboardMenu+2)& (0+255),w,b
 19133  00743E  6EE6               	movwf	postinc1,c
 19134  007440  ECA5  F041         	call	___lbmod	;wreg free
 19135  007444  503E               	movf	btemp,w,c
 19136  007446  0101               	movlb	1	; () banked
 19137  007448  2575               	addwf	(_keyboardMenu+1)& (0+255),w,b
 19138  00744A  0100               	movlb	0	; () banked
 19139  00744C  6F60               	movwf	___wmul@multiplier& (0+255),b
 19140  00744E  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 19141  007450  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19142  007452  0E00               	movlw	0
 19143  007454  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19144  007456  0E11               	movlw	17
 19145  007458  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19146  00745A  EC80  F04C         	call	___wmul	;wreg free
 19147  00745E  0E9E               	movlw	low _LCD_STRINGS
 19148  007460  0100               	movlb	0	; () banked
 19149  007462  2560               	addwf	?___wmul& (0+255),w,b
 19150  007464  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19151  007466  0EF3               	movlw	high _LCD_STRINGS
 19152  007468  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19153  00746A  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19154  00746C  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 19155                           
 19156                           ;menu.c: 587: }
 19157                           ;menu.c: 590: while(ON_OFF == 1){
 19158  007470  D024               	goto	l3600
 19159  007472                     
 19160                           ;menu.c: 592: un_block_code();
 19161  007472  ECF4  F04C         	call	_un_block_code	;wreg free
 19162                           
 19163                           ;menu.c: 595: if(print_row_2_once == 0){
 19164  007476  B005               	btfsc	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19165  007478  D020               	goto	l3600
 19166                           
 19167                           ;menu.c: 596: clear_row2();
 19168  00747A  EC58  F04C         	call	_clear_row2	;wreg free
 19169                           
 19170                           ;menu.c: 597: Lcd_Print_String(LCD_STRINGS[(keyboardMenu.selector % keyboardMenu.number)
      +                           + keyboardMenu.address]);
 19171  00747E  0101               	movlb	1	; () banked
 19172  007480  5174               	movf	_keyboardMenu& (0+255),w,b
 19173  007482  6EE6               	movwf	postinc1,c
 19174  007484  5176               	movf	(_keyboardMenu+2)& (0+255),w,b
 19175  007486  6EE6               	movwf	postinc1,c
 19176  007488  ECA5  F041         	call	___lbmod	;wreg free
 19177  00748C  503E               	movf	btemp,w,c
 19178  00748E  0101               	movlb	1	; () banked
 19179  007490  2575               	addwf	(_keyboardMenu+1)& (0+255),w,b
 19180  007492  0100               	movlb	0	; () banked
 19181  007494  6F60               	movwf	___wmul@multiplier& (0+255),b
 19182  007496  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 19183  007498  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19184  00749A  0E00               	movlw	0
 19185  00749C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19186  00749E  0E11               	movlw	17
 19187  0074A0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19188  0074A2  EC80  F04C         	call	___wmul	;wreg free
 19189  0074A6  0E9E               	movlw	low _LCD_STRINGS
 19190  0074A8  0100               	movlb	0	; () banked
 19191  0074AA  2560               	addwf	?___wmul& (0+255),w,b
 19192  0074AC  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19193  0074AE  0EF3               	movlw	high _LCD_STRINGS
 19194  0074B0  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19195  0074B2  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19196  0074B4  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 19197                           
 19198                           ;menu.c: 598: print_row_2_once = 1;
 19199  0074B8  8005               	bsf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19200  0074BA                     l3600:
 19201  0074BA  B206               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 19202  0074BC  D7DA               	goto	l3599
 19203                           
 19204                           ;menu.c: 599: }
 19205                           ;menu.c: 600: }
 19206                           ;menu.c: 603: KEYBOARD_MODE = keyboardMenu.selector;
 19207  0074BE  C176  F0F3         	movff	_keyboardMenu+2,_KEYBOARD_MODE
 19208                           
 19209                           ;menu.c: 605: lcd_print_once = 1;
 19210  0074C2  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19211  0074C4                     l3595:
 19212  0074C4  A605               	btfss	_encoder_click/(0+8),_encoder_click& (0+7),c
 19213  0074C6  D7B1               	goto	l3596
 19214                           
 19215                           ;menu.c: 606: }
 19216                           ;menu.c: 611: if(keyboardMenu.selector == MODES) {
 19217  0074C8  0E03               	movlw	3
 19218  0074CA  0101               	movlb	1	; () banked
 19219  0074CC  1976               	xorwf	(_keyboardMenu+2)& (0+255),w,b
 19220  0074CE  B4D8               	btfsc	status,2,c
 19221                           
 19222                           ; BSR set to: 1
 19223                           ;menu.c: 612: Function_A_1();
 19224  0074D0  EC62  F038         	call	_Function_A_1	;wreg free
 19225                           
 19226                           ;menu.c: 613: }
 19227                           ;menu.c: 616: if(keyboardMenu.selector == TRIAD) {
 19228  0074D4  0E06               	movlw	6
 19229  0074D6  0101               	movlb	1	; () banked
 19230  0074D8  1976               	xorwf	(_keyboardMenu+2)& (0+255),w,b
 19231  0074DA  B4D8               	btfsc	status,2,c
 19232                           
 19233                           ; BSR set to: 1
 19234                           ;menu.c: 617: Function_A_2();
 19235  0074DC  ECA4  F039         	call	_Function_A_2	;wreg free
 19236                           
 19237                           ;menu.c: 619: }
 19238                           ;menu.c: 621: if(keyboardMenu.selector == SEVENTH){
 19239  0074E0  0E09               	movlw	9
 19240  0074E2  0101               	movlb	1	; () banked
 19241  0074E4  1976               	xorwf	(_keyboardMenu+2)& (0+255),w,b
 19242  0074E6  A4D8               	btfss	status,2,c
 19243  0074E8  0012               	return	
 19244                           
 19245                           ; BSR set to: 1
 19246                           ;menu.c: 622: Function_A_3();
 19247  0074EA  EC39  F039         	call	_Function_A_3	;wreg free
 19248  0074EE  0012               	return	
 19249  0074F0                     __end_of_Function_A:
 19250                           	opt stack 0
 19251                           tblptru	equ	0xFF8
 19252                           tblptrh	equ	0xFF7
 19253                           tblptrl	equ	0xFF6
 19254                           tablat	equ	0xFF5
 19255                           prodh	equ	0xFF4
 19256                           prodl	equ	0xFF3
 19257                           intcon	equ	0xFF2
 19258                           intcon2	equ	0xFF1
 19259                           postinc0	equ	0xFEE
 19260                           wreg	equ	0xFE8
 19261                           postinc1	equ	0xFE6
 19262                           plusw1	equ	0xFE3
 19263                           fsr1h	equ	0xFE2
 19264                           fsr1l	equ	0xFE1
 19265                           indf2	equ	0xFDF
 19266                           postinc2	equ	0xFDE
 19267                           postdec2	equ	0xFDD
 19268                           plusw2	equ	0xFDB
 19269                           fsr2h	equ	0xFDA
 19270                           fsr2l	equ	0xFD9
 19271                           status	equ	0xFD8
 19272                           
 19273 ;; *************** function _Function_A_3 *****************
 19274 ;; Defined at:
 19275 ;;		line 533 in file "menu.c"
 19276 ;; Parameters:    Size  Location     Type
 19277 ;;		None
 19278 ;; Auto vars:     Size  Location     Type
 19279 ;;		None
 19280 ;; Return value:  Size  Location     Type
 19281 ;;                  1    wreg      void 
 19282 ;; Registers used:
 19283 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19284 ;; Tracked objects:
 19285 ;;		On entry : 0/0
 19286 ;;		On exit  : 0/0
 19287 ;;		Unchanged: 0/0
 19288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19292 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19293 ;;Total ram usage:        0 bytes
 19294 ;; Hardware stack levels used:    1
 19295 ;; Hardware stack levels required when called:   16
 19296 ;; This function calls:
 19297 ;;		_Lcd_Print_String
 19298 ;;		___lbmod
 19299 ;;		___wmul
 19300 ;;		_clear_row1
 19301 ;;		_clear_row2
 19302 ;;		_un_block_code
 19303 ;; This function is called by:
 19304 ;;		_Function_A
 19305 ;; This function uses a non-reentrant model
 19306 ;;
 19307                           
 19308                           	psect	text59
 19309  007272                     __ptext59:
 19310                           	opt stack 0
 19311  007272                     _Function_A_3:
 19312                           	opt stack 12
 19313                           
 19314                           ;menu.c: 534: KEYBOARD_MODE = SEVENTH;
 19315                           
 19316                           ;incstack = 0
 19317  007272  0E09               	movlw	9
 19318  007274  0100               	movlb	0	; () banked
 19319  007276  6FF3               	movwf	_KEYBOARD_MODE& (0+255),b
 19320                           
 19321                           ;menu.c: 535: which_screen = SEVENTHS_MENU;
 19322  007278  0E0B               	movlw	11
 19323  00727A  6E4E               	movwf	_which_screen,c
 19324                           
 19325                           ; BSR set to: 0
 19326                           ;menu.c: 536: lcd_print_once = 0;
 19327  00727C  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19328                           
 19329                           ; BSR set to: 0
 19330                           ;menu.c: 537: encoder_click = 0;
 19331  00727E  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 19332                           
 19333                           ; BSR set to: 0
 19334                           ;menu.c: 539: seventhMenu.selector = which_seventh;
 19335  007280  C0F0  F16D         	movff	_which_seventh,_seventhMenu+2
 19336                           
 19337                           ;menu.c: 541: while(encoder_click == 0) {
 19338  007284  D05E               	goto	l3584
 19339  007286                     
 19340                           ; BSR set to: 0
 19341                           ;menu.c: 543: un_block_code();
 19342                           
 19343                           ; BSR set to: 0
 19344  007286  ECF4  F04C         	call	_un_block_code	;wreg free
 19345                           
 19346                           ;menu.c: 545: if (lcd_print_once == 0) {
 19347  00728A  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19348  00728C  D04D               	goto	l3589
 19349                           
 19350                           ;menu.c: 546: clear_row1();
 19351  00728E  EC6C  F04C         	call	_clear_row1	;wreg free
 19352                           
 19353                           ;menu.c: 547: Lcd_Print_String("Select Seventh:");
 19354  007292  0E2D               	movlw	low STR_26
 19355  007294  0100               	movlb	0	; () banked
 19356  007296  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19357  007298  0EFE               	movlw	high STR_26
 19358  00729A  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19359  00729C  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 19360                           
 19361                           ;menu.c: 548: clear_row2();
 19362  0072A0  EC58  F04C         	call	_clear_row2	;wreg free
 19363                           
 19364                           ;menu.c: 549: Lcd_Print_String(LCD_STRINGS[(seventhMenu.selector % seventhMenu.number) +
      +                           seventhMenu.address]);
 19365  0072A4  0101               	movlb	1	; () banked
 19366  0072A6  516B               	movf	_seventhMenu& (0+255),w,b
 19367  0072A8  6EE6               	movwf	postinc1,c
 19368  0072AA  516D               	movf	(_seventhMenu+2)& (0+255),w,b
 19369  0072AC  6EE6               	movwf	postinc1,c
 19370  0072AE  ECA5  F041         	call	___lbmod	;wreg free
 19371  0072B2  503E               	movf	btemp,w,c
 19372  0072B4  0101               	movlb	1	; () banked
 19373  0072B6  256C               	addwf	(_seventhMenu+1)& (0+255),w,b
 19374  0072B8  0100               	movlb	0	; () banked
 19375  0072BA  6F60               	movwf	___wmul@multiplier& (0+255),b
 19376  0072BC  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 19377  0072BE  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19378  0072C0  0E00               	movlw	0
 19379  0072C2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19380  0072C4  0E11               	movlw	17
 19381  0072C6  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19382  0072C8  EC80  F04C         	call	___wmul	;wreg free
 19383  0072CC  0E9E               	movlw	low _LCD_STRINGS
 19384  0072CE  0100               	movlb	0	; () banked
 19385  0072D0  2560               	addwf	?___wmul& (0+255),w,b
 19386  0072D2  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19387  0072D4  0EF3               	movlw	high _LCD_STRINGS
 19388  0072D6  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19389  0072D8  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19390  0072DA  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 19391                           
 19392                           ;menu.c: 550: }
 19393                           ;menu.c: 553: while(ON_OFF == 1){
 19394  0072DE  D024               	goto	l3589
 19395  0072E0                     
 19396                           ;menu.c: 555: un_block_code();
 19397  0072E0  ECF4  F04C         	call	_un_block_code	;wreg free
 19398                           
 19399                           ;menu.c: 558: if(print_row_2_once == 0){
 19400  0072E4  B005               	btfsc	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19401  0072E6  D020               	goto	l3589
 19402                           
 19403                           ;menu.c: 559: clear_row2();
 19404  0072E8  EC58  F04C         	call	_clear_row2	;wreg free
 19405                           
 19406                           ;menu.c: 560: Lcd_Print_String(LCD_STRINGS[(seventhMenu.selector % seventhMenu.number) +
      +                           seventhMenu.address]);
 19407  0072EC  0101               	movlb	1	; () banked
 19408  0072EE  516B               	movf	_seventhMenu& (0+255),w,b
 19409  0072F0  6EE6               	movwf	postinc1,c
 19410  0072F2  516D               	movf	(_seventhMenu+2)& (0+255),w,b
 19411  0072F4  6EE6               	movwf	postinc1,c
 19412  0072F6  ECA5  F041         	call	___lbmod	;wreg free
 19413  0072FA  503E               	movf	btemp,w,c
 19414  0072FC  0101               	movlb	1	; () banked
 19415  0072FE  256C               	addwf	(_seventhMenu+1)& (0+255),w,b
 19416  007300  0100               	movlb	0	; () banked
 19417  007302  6F60               	movwf	___wmul@multiplier& (0+255),b
 19418  007304  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 19419  007306  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19420  007308  0E00               	movlw	0
 19421  00730A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19422  00730C  0E11               	movlw	17
 19423  00730E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19424  007310  EC80  F04C         	call	___wmul	;wreg free
 19425  007314  0E9E               	movlw	low _LCD_STRINGS
 19426  007316  0100               	movlb	0	; () banked
 19427  007318  2560               	addwf	?___wmul& (0+255),w,b
 19428  00731A  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19429  00731C  0EF3               	movlw	high _LCD_STRINGS
 19430  00731E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19431  007320  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19432  007322  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 19433                           
 19434                           ;menu.c: 561: print_row_2_once = 1;
 19435  007326  8005               	bsf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19436  007328                     l3589:
 19437  007328  B206               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 19438  00732A  D7DA               	goto	l3588
 19439                           
 19440                           ;menu.c: 562: }
 19441                           ;menu.c: 563: }
 19442                           ;menu.c: 565: which_seventh = seventhMenu.selector % seventhMenu.number;
 19443  00732C  0101               	movlb	1	; () banked
 19444  00732E  516B               	movf	_seventhMenu& (0+255),w,b
 19445  007330  6EE6               	movwf	postinc1,c
 19446  007332  516D               	movf	(_seventhMenu+2)& (0+255),w,b
 19447  007334  6EE6               	movwf	postinc1,c
 19448  007336  ECA5  F041         	call	___lbmod	;wreg free
 19449  00733A  503E               	movf	btemp,w,c
 19450  00733C  0100               	movlb	0	; () banked
 19451  00733E  6FF0               	movwf	_which_seventh& (0+255),b
 19452                           
 19453                           ; BSR set to: 0
 19454                           ;menu.c: 566: lcd_print_once = 1;
 19455  007340  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19456  007342                     l3584:
 19457                           
 19458                           ; BSR set to: 0
 19459                           
 19460                           ; BSR set to: 0
 19461  007342  B605               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 19462  007344  0012               	return	
 19463  007346  D79F               	goto	l3585
 19464  007348                     __end_of_Function_A_3:
 19465                           	opt stack 0
 19466                           tblptru	equ	0xFF8
 19467                           tblptrh	equ	0xFF7
 19468                           tblptrl	equ	0xFF6
 19469                           tablat	equ	0xFF5
 19470                           prodh	equ	0xFF4
 19471                           prodl	equ	0xFF3
 19472                           intcon	equ	0xFF2
 19473                           intcon2	equ	0xFF1
 19474                           postinc0	equ	0xFEE
 19475                           wreg	equ	0xFE8
 19476                           postinc1	equ	0xFE6
 19477                           plusw1	equ	0xFE3
 19478                           fsr1h	equ	0xFE2
 19479                           fsr1l	equ	0xFE1
 19480                           indf2	equ	0xFDF
 19481                           postinc2	equ	0xFDE
 19482                           postdec2	equ	0xFDD
 19483                           plusw2	equ	0xFDB
 19484                           fsr2h	equ	0xFDA
 19485                           fsr2l	equ	0xFD9
 19486                           status	equ	0xFD8
 19487                           
 19488 ;; *************** function _Function_A_2 *****************
 19489 ;; Defined at:
 19490 ;;		line 494 in file "menu.c"
 19491 ;; Parameters:    Size  Location     Type
 19492 ;;		None
 19493 ;; Auto vars:     Size  Location     Type
 19494 ;;		None
 19495 ;; Return value:  Size  Location     Type
 19496 ;;                  1    wreg      void 
 19497 ;; Registers used:
 19498 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19499 ;; Tracked objects:
 19500 ;;		On entry : 0/0
 19501 ;;		On exit  : 0/0
 19502 ;;		Unchanged: 0/0
 19503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19508 ;;Total ram usage:        0 bytes
 19509 ;; Hardware stack levels used:    1
 19510 ;; Hardware stack levels required when called:   16
 19511 ;; This function calls:
 19512 ;;		_Lcd_Print_String
 19513 ;;		___lbmod
 19514 ;;		___wmul
 19515 ;;		_clear_row1
 19516 ;;		_clear_row2
 19517 ;;		_un_block_code
 19518 ;; This function is called by:
 19519 ;;		_Function_A
 19520 ;; This function uses a non-reentrant model
 19521 ;;
 19522                           
 19523                           	psect	text60
 19524  007348                     __ptext60:
 19525                           	opt stack 0
 19526  007348                     _Function_A_2:
 19527                           	opt stack 12
 19528                           
 19529                           ;menu.c: 496: KEYBOARD_MODE = TRIAD;
 19530                           
 19531                           ; BSR set to: 0
 19532                           ;incstack = 0
 19533  007348  0E06               	movlw	6
 19534  00734A  0100               	movlb	0	; () banked
 19535  00734C  6FF3               	movwf	_KEYBOARD_MODE& (0+255),b
 19536                           
 19537                           ;menu.c: 497: which_screen = TRIADS_MENU;
 19538  00734E  0E0A               	movlw	10
 19539  007350  6E4E               	movwf	_which_screen,c
 19540                           
 19541                           ; BSR set to: 0
 19542                           ;menu.c: 498: lcd_print_once = 0;
 19543  007352  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19544                           
 19545                           ; BSR set to: 0
 19546                           ;menu.c: 499: encoder_click = 0;
 19547  007354  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 19548                           
 19549                           ; BSR set to: 0
 19550                           ;menu.c: 501: triadMenu.selector = which_triad;
 19551  007356  C0F1  F170         	movff	_which_triad,_triadMenu+2
 19552                           
 19553                           ;menu.c: 503: while(encoder_click == 0) {
 19554  00735A  D05E               	goto	l3573
 19555  00735C                     
 19556                           ; BSR set to: 0
 19557                           ;menu.c: 506: un_block_code();
 19558                           
 19559                           ; BSR set to: 0
 19560  00735C  ECF4  F04C         	call	_un_block_code	;wreg free
 19561                           
 19562                           ;menu.c: 508: if (lcd_print_once == 0) {
 19563  007360  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19564  007362  D04D               	goto	l3578
 19565                           
 19566                           ;menu.c: 509: clear_row1();
 19567  007364  EC6C  F04C         	call	_clear_row1	;wreg free
 19568                           
 19569                           ;menu.c: 510: Lcd_Print_String("Select Triad:");
 19570  007368  0ED2               	movlw	low STR_25
 19571  00736A  0100               	movlb	0	; () banked
 19572  00736C  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19573  00736E  0EFE               	movlw	high STR_25
 19574  007370  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19575  007372  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 19576                           
 19577                           ;menu.c: 511: clear_row2();
 19578  007376  EC58  F04C         	call	_clear_row2	;wreg free
 19579                           
 19580                           ;menu.c: 512: Lcd_Print_String(LCD_STRINGS[(triadMenu.selector % triadMenu.number) + tri
      +                          adMenu.address]);
 19581  00737A  0101               	movlb	1	; () banked
 19582  00737C  516E               	movf	_triadMenu& (0+255),w,b
 19583  00737E  6EE6               	movwf	postinc1,c
 19584  007380  5170               	movf	(_triadMenu+2)& (0+255),w,b
 19585  007382  6EE6               	movwf	postinc1,c
 19586  007384  ECA5  F041         	call	___lbmod	;wreg free
 19587  007388  503E               	movf	btemp,w,c
 19588  00738A  0101               	movlb	1	; () banked
 19589  00738C  256F               	addwf	(_triadMenu+1)& (0+255),w,b
 19590  00738E  0100               	movlb	0	; () banked
 19591  007390  6F60               	movwf	___wmul@multiplier& (0+255),b
 19592  007392  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 19593  007394  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19594  007396  0E00               	movlw	0
 19595  007398  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19596  00739A  0E11               	movlw	17
 19597  00739C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19598  00739E  EC80  F04C         	call	___wmul	;wreg free
 19599  0073A2  0E9E               	movlw	low _LCD_STRINGS
 19600  0073A4  0100               	movlb	0	; () banked
 19601  0073A6  2560               	addwf	?___wmul& (0+255),w,b
 19602  0073A8  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19603  0073AA  0EF3               	movlw	high _LCD_STRINGS
 19604  0073AC  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19605  0073AE  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19606  0073B0  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 19607                           
 19608                           ;menu.c: 513: }
 19609                           ;menu.c: 516: while(ON_OFF == 1){
 19610  0073B4  D024               	goto	l3578
 19611  0073B6                     
 19612                           ;menu.c: 517: un_block_code();
 19613  0073B6  ECF4  F04C         	call	_un_block_code	;wreg free
 19614                           
 19615                           ;menu.c: 520: if(print_row_2_once == 0){
 19616  0073BA  B005               	btfsc	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19617  0073BC  D020               	goto	l3578
 19618                           
 19619                           ;menu.c: 521: clear_row2();
 19620  0073BE  EC58  F04C         	call	_clear_row2	;wreg free
 19621                           
 19622                           ;menu.c: 522: Lcd_Print_String(LCD_STRINGS[(triadMenu.selector % triadMenu.number) + tri
      +                          adMenu.address]);
 19623  0073C2  0101               	movlb	1	; () banked
 19624  0073C4  516E               	movf	_triadMenu& (0+255),w,b
 19625  0073C6  6EE6               	movwf	postinc1,c
 19626  0073C8  5170               	movf	(_triadMenu+2)& (0+255),w,b
 19627  0073CA  6EE6               	movwf	postinc1,c
 19628  0073CC  ECA5  F041         	call	___lbmod	;wreg free
 19629  0073D0  503E               	movf	btemp,w,c
 19630  0073D2  0101               	movlb	1	; () banked
 19631  0073D4  256F               	addwf	(_triadMenu+1)& (0+255),w,b
 19632  0073D6  0100               	movlb	0	; () banked
 19633  0073D8  6F60               	movwf	___wmul@multiplier& (0+255),b
 19634  0073DA  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 19635  0073DC  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19636  0073DE  0E00               	movlw	0
 19637  0073E0  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19638  0073E2  0E11               	movlw	17
 19639  0073E4  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19640  0073E6  EC80  F04C         	call	___wmul	;wreg free
 19641  0073EA  0E9E               	movlw	low _LCD_STRINGS
 19642  0073EC  0100               	movlb	0	; () banked
 19643  0073EE  2560               	addwf	?___wmul& (0+255),w,b
 19644  0073F0  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19645  0073F2  0EF3               	movlw	high _LCD_STRINGS
 19646  0073F4  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19647  0073F6  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19648  0073F8  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 19649                           
 19650                           ;menu.c: 523: print_row_2_once = 1;
 19651  0073FC  8005               	bsf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19652  0073FE                     l3578:
 19653  0073FE  B206               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 19654  007400  D7DA               	goto	l3577
 19655                           
 19656                           ;menu.c: 524: }
 19657                           ;menu.c: 525: }
 19658                           ;menu.c: 527: which_triad = triadMenu.selector % triadMenu.number;
 19659  007402  0101               	movlb	1	; () banked
 19660  007404  516E               	movf	_triadMenu& (0+255),w,b
 19661  007406  6EE6               	movwf	postinc1,c
 19662  007408  5170               	movf	(_triadMenu+2)& (0+255),w,b
 19663  00740A  6EE6               	movwf	postinc1,c
 19664  00740C  ECA5  F041         	call	___lbmod	;wreg free
 19665  007410  503E               	movf	btemp,w,c
 19666  007412  0100               	movlb	0	; () banked
 19667  007414  6FF1               	movwf	_which_triad& (0+255),b
 19668                           
 19669                           ; BSR set to: 0
 19670                           ;menu.c: 528: lcd_print_once = 1;
 19671  007416  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19672  007418                     l3573:
 19673                           
 19674                           ; BSR set to: 0
 19675                           
 19676                           ; BSR set to: 0
 19677  007418  B605               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 19678  00741A  0012               	return	
 19679  00741C  D79F               	goto	l3574
 19680  00741E                     __end_of_Function_A_2:
 19681                           	opt stack 0
 19682                           tblptru	equ	0xFF8
 19683                           tblptrh	equ	0xFF7
 19684                           tblptrl	equ	0xFF6
 19685                           tablat	equ	0xFF5
 19686                           prodh	equ	0xFF4
 19687                           prodl	equ	0xFF3
 19688                           intcon	equ	0xFF2
 19689                           intcon2	equ	0xFF1
 19690                           postinc0	equ	0xFEE
 19691                           wreg	equ	0xFE8
 19692                           postinc1	equ	0xFE6
 19693                           plusw1	equ	0xFE3
 19694                           fsr1h	equ	0xFE2
 19695                           fsr1l	equ	0xFE1
 19696                           indf2	equ	0xFDF
 19697                           postinc2	equ	0xFDE
 19698                           postdec2	equ	0xFDD
 19699                           plusw2	equ	0xFDB
 19700                           fsr2h	equ	0xFDA
 19701                           fsr2l	equ	0xFD9
 19702                           status	equ	0xFD8
 19703                           
 19704 ;; *************** function _Function_A_1 *****************
 19705 ;; Defined at:
 19706 ;;		line 452 in file "menu.c"
 19707 ;; Parameters:    Size  Location     Type
 19708 ;;		None
 19709 ;; Auto vars:     Size  Location     Type
 19710 ;;		None
 19711 ;; Return value:  Size  Location     Type
 19712 ;;                  1    wreg      void 
 19713 ;; Registers used:
 19714 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19715 ;; Tracked objects:
 19716 ;;		On entry : 0/0
 19717 ;;		On exit  : 0/0
 19718 ;;		Unchanged: 0/0
 19719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19723 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19724 ;;Total ram usage:        0 bytes
 19725 ;; Hardware stack levels used:    1
 19726 ;; Hardware stack levels required when called:   16
 19727 ;; This function calls:
 19728 ;;		_Lcd_Print_String
 19729 ;;		___lbmod
 19730 ;;		___wmul
 19731 ;;		_clear_row1
 19732 ;;		_clear_row2
 19733 ;;		_un_block_code
 19734 ;; This function is called by:
 19735 ;;		_Function_A
 19736 ;; This function uses a non-reentrant model
 19737 ;;
 19738                           
 19739                           	psect	text61
 19740  0070C4                     __ptext61:
 19741                           	opt stack 0
 19742  0070C4                     _Function_A_1:
 19743                           	opt stack 12
 19744                           
 19745                           ;menu.c: 454: KEYBOARD_MODE = MODES;
 19746                           
 19747                           ; BSR set to: 0
 19748                           ;incstack = 0
 19749  0070C4  0E03               	movlw	3
 19750  0070C6  0100               	movlb	0	; () banked
 19751  0070C8  6FF3               	movwf	_KEYBOARD_MODE& (0+255),b
 19752                           
 19753                           ;menu.c: 455: which_screen = MODES_MENU;
 19754  0070CA  0E09               	movlw	9
 19755  0070CC  6E4E               	movwf	_which_screen,c
 19756                           
 19757                           ; BSR set to: 0
 19758                           ;menu.c: 457: lcd_print_once = 0;
 19759  0070CE  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19760                           
 19761                           ; BSR set to: 0
 19762                           ;menu.c: 458: print_row_2_once = 0;
 19763  0070D0  9005               	bcf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19764                           
 19765                           ; BSR set to: 0
 19766                           ;menu.c: 459: encoder_click = 0;
 19767  0070D2  9605               	bcf	_encoder_click/(0+8),_encoder_click& (0+7),c
 19768                           
 19769                           ; BSR set to: 0
 19770                           ;menu.c: 461: modeMenu.selector = which_mode;
 19771  0070D4  C0F2  F173         	movff	_which_mode,_modeMenu+2
 19772                           
 19773                           ;menu.c: 463: while(encoder_click == 0) {
 19774  0070D8  D05E               	goto	l3562
 19775  0070DA                     
 19776                           ; BSR set to: 0
 19777                           ;menu.c: 466: un_block_code();
 19778                           
 19779                           ; BSR set to: 0
 19780  0070DA  ECF4  F04C         	call	_un_block_code	;wreg free
 19781                           
 19782                           ;menu.c: 468: if (lcd_print_once == 0) {
 19783  0070DE  B205               	btfsc	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19784  0070E0  D04D               	goto	l3567
 19785                           
 19786                           ;menu.c: 469: clear_row1();
 19787  0070E2  EC6C  F04C         	call	_clear_row1	;wreg free
 19788                           
 19789                           ;menu.c: 470: Lcd_Print_String("Enter Mode:");
 19790  0070E6  0E58               	movlw	low STR_24
 19791  0070E8  0100               	movlb	0	; () banked
 19792  0070EA  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19793  0070EC  0EFF               	movlw	high STR_24
 19794  0070EE  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19795  0070F0  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 19796                           
 19797                           ;menu.c: 471: clear_row2();
 19798  0070F4  EC58  F04C         	call	_clear_row2	;wreg free
 19799                           
 19800                           ;menu.c: 472: Lcd_Print_String(LCD_STRINGS[(modeMenu.selector % modeMenu.number) + modeM
      +                          enu.address]);
 19801  0070F8  0101               	movlb	1	; () banked
 19802  0070FA  5171               	movf	_modeMenu& (0+255),w,b
 19803  0070FC  6EE6               	movwf	postinc1,c
 19804  0070FE  5173               	movf	(_modeMenu+2)& (0+255),w,b
 19805  007100  6EE6               	movwf	postinc1,c
 19806  007102  ECA5  F041         	call	___lbmod	;wreg free
 19807  007106  503E               	movf	btemp,w,c
 19808  007108  0101               	movlb	1	; () banked
 19809  00710A  2572               	addwf	(_modeMenu+1)& (0+255),w,b
 19810  00710C  0100               	movlb	0	; () banked
 19811  00710E  6F60               	movwf	___wmul@multiplier& (0+255),b
 19812  007110  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 19813  007112  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19814  007114  0E00               	movlw	0
 19815  007116  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19816  007118  0E11               	movlw	17
 19817  00711A  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19818  00711C  EC80  F04C         	call	___wmul	;wreg free
 19819  007120  0E9E               	movlw	low _LCD_STRINGS
 19820  007122  0100               	movlb	0	; () banked
 19821  007124  2560               	addwf	?___wmul& (0+255),w,b
 19822  007126  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19823  007128  0EF3               	movlw	high _LCD_STRINGS
 19824  00712A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19825  00712C  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19826  00712E  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 19827                           
 19828                           ;menu.c: 473: }
 19829                           ;menu.c: 476: while(ON_OFF == 1){
 19830  007132  D024               	goto	l3567
 19831  007134                     
 19832                           ;menu.c: 478: un_block_code();
 19833  007134  ECF4  F04C         	call	_un_block_code	;wreg free
 19834                           
 19835                           ;menu.c: 481: if(print_row_2_once == 0){
 19836  007138  B005               	btfsc	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19837  00713A  D020               	goto	l3567
 19838                           
 19839                           ;menu.c: 482: clear_row2();
 19840  00713C  EC58  F04C         	call	_clear_row2	;wreg free
 19841                           
 19842                           ;menu.c: 483: Lcd_Print_String(LCD_STRINGS[(modeMenu.selector % modeMenu.number) + modeM
      +                          enu.address]);
 19843  007140  0101               	movlb	1	; () banked
 19844  007142  5171               	movf	_modeMenu& (0+255),w,b
 19845  007144  6EE6               	movwf	postinc1,c
 19846  007146  5173               	movf	(_modeMenu+2)& (0+255),w,b
 19847  007148  6EE6               	movwf	postinc1,c
 19848  00714A  ECA5  F041         	call	___lbmod	;wreg free
 19849  00714E  503E               	movf	btemp,w,c
 19850  007150  0101               	movlb	1	; () banked
 19851  007152  2572               	addwf	(_modeMenu+1)& (0+255),w,b
 19852  007154  0100               	movlb	0	; () banked
 19853  007156  6F60               	movwf	___wmul@multiplier& (0+255),b
 19854  007158  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 19855  00715A  3761               	rlcf	(___wmul@multiplier+1)& (0+255),f,b
 19856  00715C  0E00               	movlw	0
 19857  00715E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19858  007160  0E11               	movlw	17
 19859  007162  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19860  007164  EC80  F04C         	call	___wmul	;wreg free
 19861  007168  0E9E               	movlw	low _LCD_STRINGS
 19862  00716A  0100               	movlb	0	; () banked
 19863  00716C  2560               	addwf	?___wmul& (0+255),w,b
 19864  00716E  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 19865  007170  0EF3               	movlw	high _LCD_STRINGS
 19866  007172  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19867  007174  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 19868  007176  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 19869                           
 19870                           ;menu.c: 484: print_row_2_once = 1;
 19871  00717A  8005               	bsf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 19872  00717C                     l3567:
 19873  00717C  B206               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 19874  00717E  D7DA               	goto	l3566
 19875                           
 19876                           ;menu.c: 485: }
 19877                           ;menu.c: 486: }
 19878                           ;menu.c: 488: which_mode = modeMenu.selector % modeMenu.number;
 19879  007180  0101               	movlb	1	; () banked
 19880  007182  5171               	movf	_modeMenu& (0+255),w,b
 19881  007184  6EE6               	movwf	postinc1,c
 19882  007186  5173               	movf	(_modeMenu+2)& (0+255),w,b
 19883  007188  6EE6               	movwf	postinc1,c
 19884  00718A  ECA5  F041         	call	___lbmod	;wreg free
 19885  00718E  503E               	movf	btemp,w,c
 19886  007190  0100               	movlb	0	; () banked
 19887  007192  6FF2               	movwf	_which_mode& (0+255),b
 19888                           
 19889                           ; BSR set to: 0
 19890                           ;menu.c: 489: lcd_print_once = 1;
 19891  007194  8205               	bsf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 19892  007196                     l3562:
 19893                           
 19894                           ; BSR set to: 0
 19895                           
 19896                           ; BSR set to: 0
 19897  007196  B605               	btfsc	_encoder_click/(0+8),_encoder_click& (0+7),c
 19898  007198  0012               	return	
 19899  00719A  D79F               	goto	l3563
 19900  00719C                     __end_of_Function_A_1:
 19901                           	opt stack 0
 19902                           tblptru	equ	0xFF8
 19903                           tblptrh	equ	0xFF7
 19904                           tblptrl	equ	0xFF6
 19905                           tablat	equ	0xFF5
 19906                           prodh	equ	0xFF4
 19907                           prodl	equ	0xFF3
 19908                           intcon	equ	0xFF2
 19909                           intcon2	equ	0xFF1
 19910                           postinc0	equ	0xFEE
 19911                           wreg	equ	0xFE8
 19912                           postinc1	equ	0xFE6
 19913                           plusw1	equ	0xFE3
 19914                           fsr1h	equ	0xFE2
 19915                           fsr1l	equ	0xFE1
 19916                           indf2	equ	0xFDF
 19917                           postinc2	equ	0xFDE
 19918                           postdec2	equ	0xFDD
 19919                           plusw2	equ	0xFDB
 19920                           fsr2h	equ	0xFDA
 19921                           fsr2l	equ	0xFD9
 19922                           status	equ	0xFD8
 19923                           
 19924 ;; *************** function _un_block_code *****************
 19925 ;; Defined at:
 19926 ;;		line 419 in file "menu.c"
 19927 ;; Parameters:    Size  Location     Type
 19928 ;;		None
 19929 ;; Auto vars:     Size  Location     Type
 19930 ;;		None
 19931 ;; Return value:  Size  Location     Type
 19932 ;;                  1    wreg      void 
 19933 ;; Registers used:
 19934 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19935 ;; Tracked objects:
 19936 ;;		On entry : 0/0
 19937 ;;		On exit  : 0/0
 19938 ;;		Unchanged: 0/0
 19939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19944 ;;Total ram usage:        0 bytes
 19945 ;; Hardware stack levels used:    1
 19946 ;; Hardware stack levels required when called:   15
 19947 ;; This function calls:
 19948 ;;		_analogInputs
 19949 ;;		_digitalInputs
 19950 ;;		_processEncoderBuxton
 19951 ;; This function is called by:
 19952 ;;		_Function_A_1
 19953 ;;		_Function_A_2
 19954 ;;		_Function_A_3
 19955 ;;		_Function_A
 19956 ;;		_Function_B
 19957 ;;		_Function_C_1
 19958 ;;		_Function_C_2
 19959 ;;		_Function_C_3
 19960 ;;		_Function_C
 19961 ;;		_Function_D_1
 19962 ;;		_Function_D_2
 19963 ;;		_Function_D_3
 19964 ;;		_Function_D_4
 19965 ;;		_Function_D_5
 19966 ;;		_Function_D
 19967 ;;		_Function_E_1
 19968 ;;		_Function_E_2
 19969 ;;		_Function_E
 19970 ;;		_Function_F
 19971 ;;		_Function_G_1
 19972 ;;		_Function_G_2
 19973 ;;		_Function_G_4
 19974 ;;		_Function_G
 19975 ;;		_Function_H
 19976 ;;		_Function_H_1
 19977 ;;		_Function_H_2
 19978 ;;		_Function_H_3
 19979 ;;		_Function_H_4
 19980 ;;		_Function_H_5
 19981 ;;		_Function_H_6_1
 19982 ;;		_Function_H_6_2
 19983 ;;		_Function_H_6
 19984 ;;		_Function_H_7
 19985 ;;		_Function_H_8_1
 19986 ;;		_Function_H_8_2
 19987 ;;		_Function_H_8
 19988 ;;		_Function_H_9_1
 19989 ;;		_Function_H_9_2
 19990 ;;		_Function_H_9_3
 19991 ;;		_Function_H_9_4
 19992 ;;		_Function_H_9
 19993 ;; This function uses a non-reentrant model
 19994 ;;
 19995                           
 19996                           	psect	text62
 19997  0099E8                     __ptext62:
 19998                           	opt stack 0
 19999  0099E8                     _un_block_code:
 20000                           	opt stack 13
 20001                           
 20002                           ;menu.c: 427: if(which_functions_are_unblocked == 0){
 20003                           
 20004                           ; BSR set to: 0
 20005                           ;incstack = 0
 20006  0099E8  A405               	btfss	_which_functions_are_unblocked/(0+8),_which_functions_are_unblocked& (0+7),c
 20007                           
 20008                           ;menu.c: 428: processEncoderBuxton();
 20009  0099EA  EC0A  F000         	call	_processEncoderBuxton	;wreg free
 20010                           
 20011                           ;menu.c: 429: }
 20012                           ;menu.c: 432: if(which_functions_are_unblocked == 1){
 20013  0099EE  A405               	btfss	_which_functions_are_unblocked/(0+8),_which_functions_are_unblocked& (0+7),c
 20014  0099F0  0012               	return	
 20015                           
 20016                           ;menu.c: 433: digitalInputs();
 20017  0099F2  EC6F  F049         	call	_digitalInputs	;wreg free
 20018                           
 20019                           ;menu.c: 434: analogInputs();
 20020  0099F6  ECE8  F049         	call	_analogInputs	;wreg free
 20021                           
 20022                           ;menu.c: 435: processEncoderBuxton();
 20023  0099FA  EC0A  F000         	call	_processEncoderBuxton	;wreg free
 20024  0099FE  0012               	return	
 20025  009A00                     __end_of_un_block_code:
 20026                           	opt stack 0
 20027                           tblptru	equ	0xFF8
 20028                           tblptrh	equ	0xFF7
 20029                           tblptrl	equ	0xFF6
 20030                           tablat	equ	0xFF5
 20031                           prodh	equ	0xFF4
 20032                           prodl	equ	0xFF3
 20033                           intcon	equ	0xFF2
 20034                           intcon2	equ	0xFF1
 20035                           postinc0	equ	0xFEE
 20036                           wreg	equ	0xFE8
 20037                           postinc1	equ	0xFE6
 20038                           plusw1	equ	0xFE3
 20039                           fsr1h	equ	0xFE2
 20040                           fsr1l	equ	0xFE1
 20041                           indf2	equ	0xFDF
 20042                           postinc2	equ	0xFDE
 20043                           postdec2	equ	0xFDD
 20044                           plusw2	equ	0xFDB
 20045                           fsr2h	equ	0xFDA
 20046                           fsr2l	equ	0xFD9
 20047                           status	equ	0xFD8
 20048                           
 20049 ;; *************** function _processEncoderBuxton *****************
 20050 ;; Defined at:
 20051 ;;		line 51 in file "encoder.c"
 20052 ;; Parameters:    Size  Location     Type
 20053 ;;		None
 20054 ;; Auto vars:     Size  Location     Type
 20055 ;;		None
 20056 ;; Return value:  Size  Location     Type
 20057 ;;                  1    wreg      void 
 20058 ;; Registers used:
 20059 ;;		wreg, status,2, status,0
 20060 ;; Tracked objects:
 20061 ;;		On entry : 0/0
 20062 ;;		On exit  : 0/0
 20063 ;;		Unchanged: 0/0
 20064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20065 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20067 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20068 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20069 ;;Total ram usage:        7 bytes
 20070 ;; Hardware stack levels used:    1
 20071 ;; Hardware stack levels required when called:    5
 20072 ;; This function calls:
 20073 ;;		Nothing
 20074 ;; This function is called by:
 20075 ;;		_un_block_code
 20076 ;;		_main
 20077 ;; This function uses a non-reentrant model
 20078 ;;
 20079                           
 20080                           	psect	text63
 20081  000014                     __ptext63:
 20082                           	opt stack 0
 20083  000014                     _processEncoderBuxton:
 20084                           	opt stack 25
 20085                           
 20086                           ;encoder.c: 53: if (encoder_direction == 0x00) {return;}
 20087                           
 20088                           ;incstack = 0
 20089  000014  5035               	movf	_encoder_direction,w,c
 20090  000016  B4D8               	btfsc	status,2,c
 20091  000018  0012               	return	
 20092                           
 20093                           ;encoder.c: 56: if (encoder_direction == 0x10) {
 20094  00001A  0E10               	movlw	16
 20095  00001C  1835               	xorwf	_encoder_direction,w,c
 20096  00001E  A4D8               	btfss	status,2,c
 20097  000020  D3BF               	goto	l937
 20098                           
 20099                           ;encoder.c: 58: lcd_print_once = 0;
 20100  000022  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 20101                           
 20102                           ;encoder.c: 59: print_row_2_once = 0;
 20103  000024  9005               	bcf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 20104                           
 20105                           ;encoder.c: 62: if (which_screen == MAIN_MENU) {
 20106  000026  0E02               	movlw	2
 20107  000028  184E               	xorwf	_which_screen,w,c
 20108  00002A  A4D8               	btfss	status,2,c
 20109  00002C  D01F               	goto	l867
 20110                           
 20111                           ;encoder.c: 63: if(mainMenu.selector < mainMenu.number - 1){
 20112  00002E  0EFF               	movlw	255
 20113  000030  0100               	movlb	0	; () banked
 20114  000032  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20115  000034  0EFF               	movlw	255
 20116  000036  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20117  000038  0101               	movlb	1	; () banked
 20118  00003A  5177               	movf	_mainMenu& (0+255),w,b
 20119  00003C  0100               	movlb	0	; () banked
 20120  00003E  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20121  000040  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20122  000042  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20123  000044  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20124  000046  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20125  000048  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20126  00004A  0101               	movlb	1	; () banked
 20127  00004C  5179               	movf	(_mainMenu+2)& (0+255),w,b
 20128  00004E  0100               	movlb	0	; () banked
 20129  000050  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20130  000052  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20131  000054  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20132  000056  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20133  000058  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20134  00005A  0A80               	xorlw	128
 20135  00005C  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20136  00005E  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20137  000060  0A80               	xorlw	128
 20138  000062  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20139  000064  B0D8               	btfsc	status,0,c
 20140  000066  D002               	goto	l867
 20141                           
 20142                           ; BSR set to: 0
 20143                           ;encoder.c: 64: mainMenu.selector++;
 20144  000068  0101               	movlb	1	; () banked
 20145  00006A  2B79               	incf	(_mainMenu+2)& (0+255),f,b
 20146  00006C                     l867:
 20147                           
 20148                           ;encoder.c: 65: }
 20149                           ;encoder.c: 66: }
 20150                           ;encoder.c: 67: if (which_screen == KEYBOARD_MENU) {
 20151                           
 20152                           ; BSR set to: 1
 20153                           
 20154                           ; BSR set to: 1
 20155  00006C  0E03               	movlw	3
 20156  00006E  184E               	xorwf	_which_screen,w,c
 20157  000070  A4D8               	btfss	status,2,c
 20158  000072  D01F               	goto	l869
 20159                           
 20160                           ;encoder.c: 68: if(keyboardMenu.selector < (keyboardMenu.number - 1)){
 20161  000074  0EFF               	movlw	255
 20162  000076  0100               	movlb	0	; () banked
 20163  000078  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20164  00007A  0EFF               	movlw	255
 20165  00007C  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20166  00007E  0101               	movlb	1	; () banked
 20167  000080  5174               	movf	_keyboardMenu& (0+255),w,b
 20168  000082  0100               	movlb	0	; () banked
 20169  000084  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20170  000086  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20171  000088  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20172  00008A  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20173  00008C  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20174  00008E  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20175  000090  0101               	movlb	1	; () banked
 20176  000092  5176               	movf	(_keyboardMenu+2)& (0+255),w,b
 20177  000094  0100               	movlb	0	; () banked
 20178  000096  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20179  000098  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20180  00009A  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20181  00009C  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20182  00009E  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20183  0000A0  0A80               	xorlw	128
 20184  0000A2  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20185  0000A4  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20186  0000A6  0A80               	xorlw	128
 20187  0000A8  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20188  0000AA  B0D8               	btfsc	status,0,c
 20189  0000AC  D002               	goto	l869
 20190                           
 20191                           ; BSR set to: 0
 20192                           ;encoder.c: 69: keyboardMenu.selector++;
 20193  0000AE  0101               	movlb	1	; () banked
 20194  0000B0  2B76               	incf	(_keyboardMenu+2)& (0+255),f,b
 20195  0000B2                     l869:
 20196                           
 20197                           ;encoder.c: 70: }
 20198                           ;encoder.c: 71: }
 20199                           ;encoder.c: 72: if (which_screen == TRANSPOSE_MENU) {
 20200                           
 20201                           ; BSR set to: 1
 20202                           
 20203                           ; BSR set to: 1
 20204  0000B2  0E04               	movlw	4
 20205  0000B4  184E               	xorwf	_which_screen,w,c
 20206  0000B6  A4D8               	btfss	status,2,c
 20207  0000B8  D01F               	goto	l871
 20208                           
 20209                           ;encoder.c: 73: if(transposeMenu.selector < (transposeMenu.number - 1)){
 20210  0000BA  0EFF               	movlw	255
 20211  0000BC  0100               	movlb	0	; () banked
 20212  0000BE  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20213  0000C0  0EFF               	movlw	255
 20214  0000C2  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20215  0000C4  0101               	movlb	1	; () banked
 20216  0000C6  5168               	movf	_transposeMenu& (0+255),w,b
 20217  0000C8  0100               	movlb	0	; () banked
 20218  0000CA  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20219  0000CC  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20220  0000CE  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20221  0000D0  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20222  0000D2  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20223  0000D4  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20224  0000D6  0101               	movlb	1	; () banked
 20225  0000D8  516A               	movf	(_transposeMenu+2)& (0+255),w,b
 20226  0000DA  0100               	movlb	0	; () banked
 20227  0000DC  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20228  0000DE  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20229  0000E0  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20230  0000E2  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20231  0000E4  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20232  0000E6  0A80               	xorlw	128
 20233  0000E8  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20234  0000EA  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20235  0000EC  0A80               	xorlw	128
 20236  0000EE  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20237  0000F0  B0D8               	btfsc	status,0,c
 20238  0000F2  D002               	goto	l871
 20239                           
 20240                           ; BSR set to: 0
 20241                           ;encoder.c: 74: transposeMenu.selector++;
 20242  0000F4  0101               	movlb	1	; () banked
 20243  0000F6  2B6A               	incf	(_transposeMenu+2)& (0+255),f,b
 20244  0000F8                     l871:
 20245                           
 20246                           ;encoder.c: 75: }
 20247                           ;encoder.c: 76: }
 20248                           ;encoder.c: 77: if (which_screen == DRUM_MENU) {
 20249                           
 20250                           ; BSR set to: 1
 20251                           
 20252                           ; BSR set to: 1
 20253  0000F8  0E05               	movlw	5
 20254  0000FA  184E               	xorwf	_which_screen,w,c
 20255  0000FC  A4D8               	btfss	status,2,c
 20256  0000FE  D01F               	goto	l873
 20257                           
 20258                           ;encoder.c: 78: if(drumMenu.selector < (drumMenu.number - 1)){
 20259  000100  0EFF               	movlw	255
 20260  000102  0100               	movlb	0	; () banked
 20261  000104  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20262  000106  0EFF               	movlw	255
 20263  000108  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20264  00010A  0101               	movlb	1	; () banked
 20265  00010C  5165               	movf	_drumMenu& (0+255),w,b
 20266  00010E  0100               	movlb	0	; () banked
 20267  000110  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20268  000112  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20269  000114  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20270  000116  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20271  000118  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20272  00011A  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20273  00011C  0101               	movlb	1	; () banked
 20274  00011E  5167               	movf	(_drumMenu+2)& (0+255),w,b
 20275  000120  0100               	movlb	0	; () banked
 20276  000122  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20277  000124  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20278  000126  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20279  000128  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20280  00012A  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20281  00012C  0A80               	xorlw	128
 20282  00012E  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20283  000130  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20284  000132  0A80               	xorlw	128
 20285  000134  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20286  000136  B0D8               	btfsc	status,0,c
 20287  000138  D002               	goto	l873
 20288                           
 20289                           ; BSR set to: 0
 20290                           ;encoder.c: 79: drumMenu.selector++;
 20291  00013A  0101               	movlb	1	; () banked
 20292  00013C  2B67               	incf	(_drumMenu+2)& (0+255),f,b
 20293  00013E                     l873:
 20294                           
 20295                           ;encoder.c: 80: }
 20296                           ;encoder.c: 81: }
 20297                           ;encoder.c: 82: if (which_screen == POTENTIOMETER_MENU) {
 20298                           
 20299                           ; BSR set to: 1
 20300                           
 20301                           ; BSR set to: 1
 20302  00013E  0E06               	movlw	6
 20303  000140  184E               	xorwf	_which_screen,w,c
 20304  000142  A4D8               	btfss	status,2,c
 20305  000144  D01F               	goto	l875
 20306                           
 20307                           ;encoder.c: 83: if(potsMenu.selector < (potsMenu.number - 1)){
 20308  000146  0EFF               	movlw	255
 20309  000148  0100               	movlb	0	; () banked
 20310  00014A  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20311  00014C  0EFF               	movlw	255
 20312  00014E  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20313  000150  0101               	movlb	1	; () banked
 20314  000152  5159               	movf	_potsMenu& (0+255),w,b
 20315  000154  0100               	movlb	0	; () banked
 20316  000156  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20317  000158  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20318  00015A  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20319  00015C  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20320  00015E  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20321  000160  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20322  000162  0101               	movlb	1	; () banked
 20323  000164  515B               	movf	(_potsMenu+2)& (0+255),w,b
 20324  000166  0100               	movlb	0	; () banked
 20325  000168  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20326  00016A  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20327  00016C  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20328  00016E  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20329  000170  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20330  000172  0A80               	xorlw	128
 20331  000174  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20332  000176  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20333  000178  0A80               	xorlw	128
 20334  00017A  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20335  00017C  B0D8               	btfsc	status,0,c
 20336  00017E  D002               	goto	l875
 20337                           
 20338                           ; BSR set to: 0
 20339                           ;encoder.c: 84: potsMenu.selector++;
 20340  000180  0101               	movlb	1	; () banked
 20341  000182  2B5B               	incf	(_potsMenu+2)& (0+255),f,b
 20342  000184                     l875:
 20343                           
 20344                           ;encoder.c: 85: }
 20345                           ;encoder.c: 86: }
 20346                           ;encoder.c: 87: if (which_screen == MIDI_CHANNEL_MENU) {
 20347                           
 20348                           ; BSR set to: 1
 20349                           
 20350                           ; BSR set to: 1
 20351  000184  0E07               	movlw	7
 20352  000186  184E               	xorwf	_which_screen,w,c
 20353  000188  A4D8               	btfss	status,2,c
 20354  00018A  D01F               	goto	l877
 20355                           
 20356                           ;encoder.c: 88: if(midiChannelMenu.selector < (midiChannelMenu.number - 1)){
 20357  00018C  0EFF               	movlw	255
 20358  00018E  0100               	movlb	0	; () banked
 20359  000190  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20360  000192  0EFF               	movlw	255
 20361  000194  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20362  000196  0101               	movlb	1	; () banked
 20363  000198  5147               	movf	_midiChannelMenu& (0+255),w,b
 20364  00019A  0100               	movlb	0	; () banked
 20365  00019C  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20366  00019E  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20367  0001A0  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20368  0001A2  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20369  0001A4  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20370  0001A6  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20371  0001A8  0101               	movlb	1	; () banked
 20372  0001AA  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 20373  0001AC  0100               	movlb	0	; () banked
 20374  0001AE  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20375  0001B0  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20376  0001B2  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20377  0001B4  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20378  0001B6  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20379  0001B8  0A80               	xorlw	128
 20380  0001BA  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20381  0001BC  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20382  0001BE  0A80               	xorlw	128
 20383  0001C0  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20384  0001C2  B0D8               	btfsc	status,0,c
 20385  0001C4  D002               	goto	l877
 20386                           
 20387                           ; BSR set to: 0
 20388                           ;encoder.c: 89: midiChannelMenu.selector++;
 20389  0001C6  0101               	movlb	1	; () banked
 20390  0001C8  2B49               	incf	(_midiChannelMenu+2)& (0+255),f,b
 20391  0001CA                     l877:
 20392                           
 20393                           ;encoder.c: 90: }
 20394                           ;encoder.c: 91: }
 20395                           ;encoder.c: 93: if (which_screen == MODES_MENU) {
 20396                           
 20397                           ; BSR set to: 1
 20398                           
 20399                           ; BSR set to: 1
 20400  0001CA  0E09               	movlw	9
 20401  0001CC  184E               	xorwf	_which_screen,w,c
 20402  0001CE  A4D8               	btfss	status,2,c
 20403  0001D0  D01F               	goto	l879
 20404                           
 20405                           ;encoder.c: 94: if(modeMenu.selector < (modeMenu.number - 1)){
 20406  0001D2  0EFF               	movlw	255
 20407  0001D4  0100               	movlb	0	; () banked
 20408  0001D6  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20409  0001D8  0EFF               	movlw	255
 20410  0001DA  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20411  0001DC  0101               	movlb	1	; () banked
 20412  0001DE  5171               	movf	_modeMenu& (0+255),w,b
 20413  0001E0  0100               	movlb	0	; () banked
 20414  0001E2  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20415  0001E4  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20416  0001E6  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20417  0001E8  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20418  0001EA  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20419  0001EC  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20420  0001EE  0101               	movlb	1	; () banked
 20421  0001F0  5173               	movf	(_modeMenu+2)& (0+255),w,b
 20422  0001F2  0100               	movlb	0	; () banked
 20423  0001F4  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20424  0001F6  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20425  0001F8  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20426  0001FA  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20427  0001FC  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20428  0001FE  0A80               	xorlw	128
 20429  000200  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20430  000202  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20431  000204  0A80               	xorlw	128
 20432  000206  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20433  000208  B0D8               	btfsc	status,0,c
 20434  00020A  D002               	goto	l879
 20435                           
 20436                           ; BSR set to: 0
 20437                           ;encoder.c: 95: modeMenu.selector++;
 20438  00020C  0101               	movlb	1	; () banked
 20439  00020E  2B73               	incf	(_modeMenu+2)& (0+255),f,b
 20440  000210                     l879:
 20441                           
 20442                           ;encoder.c: 96: }
 20443                           ;encoder.c: 97: }
 20444                           ;encoder.c: 98: if (which_screen == TRIADS_MENU) {
 20445                           
 20446                           ; BSR set to: 1
 20447                           
 20448                           ; BSR set to: 1
 20449  000210  0E0A               	movlw	10
 20450  000212  184E               	xorwf	_which_screen,w,c
 20451  000214  A4D8               	btfss	status,2,c
 20452  000216  D01F               	goto	l881
 20453                           
 20454                           ;encoder.c: 99: if(triadMenu.selector < (triadMenu.number - 1)){
 20455  000218  0EFF               	movlw	255
 20456  00021A  0100               	movlb	0	; () banked
 20457  00021C  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20458  00021E  0EFF               	movlw	255
 20459  000220  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20460  000222  0101               	movlb	1	; () banked
 20461  000224  516E               	movf	_triadMenu& (0+255),w,b
 20462  000226  0100               	movlb	0	; () banked
 20463  000228  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20464  00022A  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20465  00022C  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20466  00022E  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20467  000230  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20468  000232  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20469  000234  0101               	movlb	1	; () banked
 20470  000236  5170               	movf	(_triadMenu+2)& (0+255),w,b
 20471  000238  0100               	movlb	0	; () banked
 20472  00023A  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20473  00023C  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20474  00023E  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20475  000240  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20476  000242  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20477  000244  0A80               	xorlw	128
 20478  000246  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20479  000248  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20480  00024A  0A80               	xorlw	128
 20481  00024C  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20482  00024E  B0D8               	btfsc	status,0,c
 20483  000250  D002               	goto	l881
 20484                           
 20485                           ; BSR set to: 0
 20486                           ;encoder.c: 100: triadMenu.selector++;
 20487  000252  0101               	movlb	1	; () banked
 20488  000254  2B70               	incf	(_triadMenu+2)& (0+255),f,b
 20489  000256                     l881:
 20490                           
 20491                           ;encoder.c: 101: }
 20492                           ;encoder.c: 102: }
 20493                           ;encoder.c: 103: if (which_screen == SEVENTHS_MENU) {
 20494                           
 20495                           ; BSR set to: 1
 20496                           
 20497                           ; BSR set to: 1
 20498  000256  0E0B               	movlw	11
 20499  000258  184E               	xorwf	_which_screen,w,c
 20500  00025A  A4D8               	btfss	status,2,c
 20501  00025C  D01F               	goto	l883
 20502                           
 20503                           ;encoder.c: 104: if(seventhMenu.selector < (seventhMenu.number - 1)){
 20504  00025E  0EFF               	movlw	255
 20505  000260  0100               	movlb	0	; () banked
 20506  000262  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20507  000264  0EFF               	movlw	255
 20508  000266  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20509  000268  0101               	movlb	1	; () banked
 20510  00026A  516B               	movf	_seventhMenu& (0+255),w,b
 20511  00026C  0100               	movlb	0	; () banked
 20512  00026E  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20513  000270  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20514  000272  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20515  000274  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20516  000276  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20517  000278  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20518  00027A  0101               	movlb	1	; () banked
 20519  00027C  516D               	movf	(_seventhMenu+2)& (0+255),w,b
 20520  00027E  0100               	movlb	0	; () banked
 20521  000280  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20522  000282  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20523  000284  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20524  000286  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20525  000288  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20526  00028A  0A80               	xorlw	128
 20527  00028C  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20528  00028E  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20529  000290  0A80               	xorlw	128
 20530  000292  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20531  000294  B0D8               	btfsc	status,0,c
 20532  000296  D002               	goto	l883
 20533                           
 20534                           ; BSR set to: 0
 20535                           ;encoder.c: 105: seventhMenu.selector++;
 20536  000298  0101               	movlb	1	; () banked
 20537  00029A  2B6D               	incf	(_seventhMenu+2)& (0+255),f,b
 20538  00029C                     l883:
 20539                           
 20540                           ;encoder.c: 106: }
 20541                           ;encoder.c: 107: }
 20542                           ;encoder.c: 108: if (which_screen == DRUMS_CC_TYPE_MENU) {
 20543                           
 20544                           ; BSR set to: 1
 20545                           
 20546                           ; BSR set to: 1
 20547  00029C  0E0C               	movlw	12
 20548  00029E  184E               	xorwf	_which_screen,w,c
 20549  0002A0  A4D8               	btfss	status,2,c
 20550  0002A2  D01F               	goto	l885
 20551                           
 20552                           ;encoder.c: 109: if(drumCCTypeMenu.selector < (drumCCTypeMenu.number - 1)){
 20553  0002A4  0EFF               	movlw	255
 20554  0002A6  0100               	movlb	0	; () banked
 20555  0002A8  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20556  0002AA  0EFF               	movlw	255
 20557  0002AC  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20558  0002AE  0101               	movlb	1	; () banked
 20559  0002B0  5162               	movf	_drumCCTypeMenu& (0+255),w,b
 20560  0002B2  0100               	movlb	0	; () banked
 20561  0002B4  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20562  0002B6  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20563  0002B8  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20564  0002BA  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20565  0002BC  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20566  0002BE  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20567  0002C0  0101               	movlb	1	; () banked
 20568  0002C2  5164               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 20569  0002C4  0100               	movlb	0	; () banked
 20570  0002C6  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20571  0002C8  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20572  0002CA  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20573  0002CC  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20574  0002CE  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20575  0002D0  0A80               	xorlw	128
 20576  0002D2  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20577  0002D4  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20578  0002D6  0A80               	xorlw	128
 20579  0002D8  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20580  0002DA  B0D8               	btfsc	status,0,c
 20581  0002DC  D002               	goto	l885
 20582                           
 20583                           ; BSR set to: 0
 20584                           ;encoder.c: 110: drumCCTypeMenu.selector++;
 20585  0002DE  0101               	movlb	1	; () banked
 20586  0002E0  2B64               	incf	(_drumCCTypeMenu+2)& (0+255),f,b
 20587  0002E2                     l885:
 20588                           
 20589                           ;encoder.c: 111: }
 20590                           ;encoder.c: 112: }
 20591                           ;encoder.c: 114: if (which_screen == DRUMS_NN_MENU) {
 20592                           
 20593                           ; BSR set to: 1
 20594                           
 20595                           ; BSR set to: 1
 20596  0002E2  0E0D               	movlw	13
 20597  0002E4  184E               	xorwf	_which_screen,w,c
 20598  0002E6  A4D8               	btfss	status,2,c
 20599  0002E8  D01F               	goto	l887
 20600                           
 20601                           ;encoder.c: 115: if(drumNNMenu.selector < (drumNNMenu.number - 1)){
 20602  0002EA  0EFF               	movlw	255
 20603  0002EC  0100               	movlb	0	; () banked
 20604  0002EE  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20605  0002F0  0EFF               	movlw	255
 20606  0002F2  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20607  0002F4  0101               	movlb	1	; () banked
 20608  0002F6  515F               	movf	_drumNNMenu& (0+255),w,b
 20609  0002F8  0100               	movlb	0	; () banked
 20610  0002FA  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20611  0002FC  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20612  0002FE  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20613  000300  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20614  000302  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20615  000304  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20616  000306  0101               	movlb	1	; () banked
 20617  000308  5161               	movf	(_drumNNMenu+2)& (0+255),w,b
 20618  00030A  0100               	movlb	0	; () banked
 20619  00030C  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20620  00030E  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20621  000310  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20622  000312  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20623  000314  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20624  000316  0A80               	xorlw	128
 20625  000318  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20626  00031A  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20627  00031C  0A80               	xorlw	128
 20628  00031E  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20629  000320  B0D8               	btfsc	status,0,c
 20630  000322  D002               	goto	l887
 20631                           
 20632                           ; BSR set to: 0
 20633                           ;encoder.c: 116: drumNNMenu.selector++;
 20634  000324  0101               	movlb	1	; () banked
 20635  000326  2B61               	incf	(_drumNNMenu+2)& (0+255),f,b
 20636  000328                     l887:
 20637                           
 20638                           ;encoder.c: 117: }
 20639                           ;encoder.c: 118: }
 20640                           ;encoder.c: 120: if (which_screen == DRUMS_CC_MENU) {
 20641                           
 20642                           ; BSR set to: 1
 20643                           
 20644                           ; BSR set to: 1
 20645  000328  0E0E               	movlw	14
 20646  00032A  184E               	xorwf	_which_screen,w,c
 20647  00032C  A4D8               	btfss	status,2,c
 20648  00032E  D01F               	goto	l889
 20649                           
 20650                           ;encoder.c: 121: if(drumCCMenu.selector < (drumCCMenu.number - 1)){
 20651  000330  0EFF               	movlw	255
 20652  000332  0100               	movlb	0	; () banked
 20653  000334  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20654  000336  0EFF               	movlw	255
 20655  000338  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20656  00033A  0101               	movlb	1	; () banked
 20657  00033C  515C               	movf	_drumCCMenu& (0+255),w,b
 20658  00033E  0100               	movlb	0	; () banked
 20659  000340  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20660  000342  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20661  000344  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20662  000346  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20663  000348  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20664  00034A  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20665  00034C  0101               	movlb	1	; () banked
 20666  00034E  515E               	movf	(_drumCCMenu+2)& (0+255),w,b
 20667  000350  0100               	movlb	0	; () banked
 20668  000352  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20669  000354  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20670  000356  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20671  000358  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20672  00035A  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20673  00035C  0A80               	xorlw	128
 20674  00035E  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20675  000360  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20676  000362  0A80               	xorlw	128
 20677  000364  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20678  000366  B0D8               	btfsc	status,0,c
 20679  000368  D002               	goto	l889
 20680                           
 20681                           ; BSR set to: 0
 20682                           ;encoder.c: 122: drumCCMenu.selector++;
 20683  00036A  0101               	movlb	1	; () banked
 20684  00036C  2B5E               	incf	(_drumCCMenu+2)& (0+255),f,b
 20685  00036E                     l889:
 20686                           
 20687                           ;encoder.c: 123: }
 20688                           ;encoder.c: 124: }
 20689                           ;encoder.c: 126: if (which_screen == POTS_RES_MENU) {
 20690                           
 20691                           ; BSR set to: 1
 20692                           
 20693                           ; BSR set to: 1
 20694  00036E  0E0F               	movlw	15
 20695  000370  184E               	xorwf	_which_screen,w,c
 20696  000372  A4D8               	btfss	status,2,c
 20697  000374  D01F               	goto	l891
 20698                           
 20699                           ;encoder.c: 127: if(potsResoMenu.selector < (potsResoMenu.number - 1)){
 20700  000376  0EFF               	movlw	255
 20701  000378  0100               	movlb	0	; () banked
 20702  00037A  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20703  00037C  0EFF               	movlw	255
 20704  00037E  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20705  000380  0101               	movlb	1	; () banked
 20706  000382  5156               	movf	_potsResoMenu& (0+255),w,b
 20707  000384  0100               	movlb	0	; () banked
 20708  000386  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20709  000388  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20710  00038A  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20711  00038C  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20712  00038E  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20713  000390  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20714  000392  0101               	movlb	1	; () banked
 20715  000394  5158               	movf	(_potsResoMenu+2)& (0+255),w,b
 20716  000396  0100               	movlb	0	; () banked
 20717  000398  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20718  00039A  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20719  00039C  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20720  00039E  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20721  0003A0  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20722  0003A2  0A80               	xorlw	128
 20723  0003A4  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20724  0003A6  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20725  0003A8  0A80               	xorlw	128
 20726  0003AA  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20727  0003AC  B0D8               	btfsc	status,0,c
 20728  0003AE  D002               	goto	l891
 20729                           
 20730                           ; BSR set to: 0
 20731                           ;encoder.c: 128: potsResoMenu.selector++;
 20732  0003B0  0101               	movlb	1	; () banked
 20733  0003B2  2B58               	incf	(_potsResoMenu+2)& (0+255),f,b
 20734  0003B4                     l891:
 20735                           
 20736                           ;encoder.c: 129: }
 20737                           ;encoder.c: 130: }
 20738                           ;encoder.c: 132: if (which_screen == ENCODER_POLARITY_MENU) {
 20739                           
 20740                           ; BSR set to: 1
 20741                           
 20742                           ; BSR set to: 1
 20743  0003B4  0E18               	movlw	24
 20744  0003B6  184E               	xorwf	_which_screen,w,c
 20745  0003B8  A4D8               	btfss	status,2,c
 20746  0003BA  D006               	goto	l893
 20747                           
 20748                           ;encoder.c: 136: if(encoderPolarityMenu.selector == 0){
 20749  0003BC  0101               	movlb	1	; () banked
 20750  0003BE  513A               	movf	(_encoderPolarityMenu+2)& (0+255),w,b
 20751  0003C0  A4D8               	btfss	status,2,c
 20752  0003C2  D002               	goto	l893
 20753                           
 20754                           ; BSR set to: 1
 20755                           ;encoder.c: 137: encoderPolarityMenu.selector = 1;
 20756  0003C4  0E01               	movlw	1
 20757  0003C6  6F3A               	movwf	(_encoderPolarityMenu+2)& (0+255),b
 20758  0003C8                     l893:
 20759                           
 20760                           ;encoder.c: 138: }
 20761                           ;encoder.c: 139: }
 20762                           ;encoder.c: 141: if (which_screen == POTS_ALPHA_MENU) {
 20763                           
 20764                           ; BSR set to: 1
 20765                           
 20766                           ; BSR set to: 1
 20767  0003C8  0E10               	movlw	16
 20768  0003CA  184E               	xorwf	_which_screen,w,c
 20769  0003CC  A4D8               	btfss	status,2,c
 20770  0003CE  D006               	goto	l895
 20771                           
 20772                           ;encoder.c: 142: if(potsAlphaMenu.selector <= 85){
 20773  0003D0  0E56               	movlw	86
 20774  0003D2  0101               	movlb	1	; () banked
 20775  0003D4  6155               	cpfslt	(_potsAlphaMenu+2)& (0+255),b
 20776  0003D6  D002               	goto	l895
 20777                           
 20778                           ; BSR set to: 1
 20779                           ;encoder.c: 143: potsAlphaMenu.selector += 5;
 20780  0003D8  0E05               	movlw	5
 20781  0003DA  2755               	addwf	(_potsAlphaMenu+2)& (0+255),f,b
 20782  0003DC                     l895:
 20783                           
 20784                           ;encoder.c: 144: }
 20785                           ;encoder.c: 145: }
 20786                           ;encoder.c: 147: if (which_screen == POTS_CC_MENU) {
 20787                           
 20788                           ; BSR set to: 1
 20789  0003DC  0E11               	movlw	17
 20790  0003DE  184E               	xorwf	_which_screen,w,c
 20791  0003E0  A4D8               	btfss	status,2,c
 20792  0003E2  D01F               	goto	l897
 20793                           
 20794                           ;encoder.c: 148: if(potsCCMenu.selector < (potsCCMenu.number - 1)){
 20795  0003E4  0EFF               	movlw	255
 20796  0003E6  0100               	movlb	0	; () banked
 20797  0003E8  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20798  0003EA  0EFF               	movlw	255
 20799  0003EC  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20800  0003EE  0101               	movlb	1	; () banked
 20801  0003F0  5150               	movf	_potsCCMenu& (0+255),w,b
 20802  0003F2  0100               	movlb	0	; () banked
 20803  0003F4  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20804  0003F6  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20805  0003F8  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20806  0003FA  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20807  0003FC  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20808  0003FE  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20809  000400  0101               	movlb	1	; () banked
 20810  000402  5152               	movf	(_potsCCMenu+2)& (0+255),w,b
 20811  000404  0100               	movlb	0	; () banked
 20812  000406  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20813  000408  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20814  00040A  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20815  00040C  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20816  00040E  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20817  000410  0A80               	xorlw	128
 20818  000412  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20819  000414  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20820  000416  0A80               	xorlw	128
 20821  000418  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20822  00041A  B0D8               	btfsc	status,0,c
 20823  00041C  D002               	goto	l897
 20824                           
 20825                           ; BSR set to: 0
 20826                           ;encoder.c: 149: potsCCMenu.selector++;
 20827  00041E  0101               	movlb	1	; () banked
 20828  000420  2B52               	incf	(_potsCCMenu+2)& (0+255),f,b
 20829  000422                     l897:
 20830                           
 20831                           ;encoder.c: 150: }
 20832                           ;encoder.c: 151: }
 20833                           ;encoder.c: 153: if (which_screen == SLIDEPOTS_CC_MENU) {
 20834                           
 20835                           ; BSR set to: 1
 20836                           
 20837                           ; BSR set to: 1
 20838  000422  0E12               	movlw	18
 20839  000424  184E               	xorwf	_which_screen,w,c
 20840  000426  A4D8               	btfss	status,2,c
 20841  000428  D01F               	goto	l899
 20842                           
 20843                           ;encoder.c: 154: if(slidepotsCCMenu.selector < (slidepotsCCMenu.number - 1)){
 20844  00042A  0EFF               	movlw	255
 20845  00042C  0100               	movlb	0	; () banked
 20846  00042E  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20847  000430  0EFF               	movlw	255
 20848  000432  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20849  000434  0101               	movlb	1	; () banked
 20850  000436  514D               	movf	_slidepotsCCMenu& (0+255),w,b
 20851  000438  0100               	movlb	0	; () banked
 20852  00043A  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20853  00043C  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20854  00043E  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20855  000440  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20856  000442  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20857  000444  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20858  000446  0101               	movlb	1	; () banked
 20859  000448  514F               	movf	(_slidepotsCCMenu+2)& (0+255),w,b
 20860  00044A  0100               	movlb	0	; () banked
 20861  00044C  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20862  00044E  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20863  000450  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20864  000452  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20865  000454  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20866  000456  0A80               	xorlw	128
 20867  000458  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20868  00045A  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20869  00045C  0A80               	xorlw	128
 20870  00045E  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20871  000460  B0D8               	btfsc	status,0,c
 20872  000462  D002               	goto	l899
 20873                           
 20874                           ; BSR set to: 0
 20875                           ;encoder.c: 155: slidepotsCCMenu.selector++;
 20876  000464  0101               	movlb	1	; () banked
 20877  000466  2B4F               	incf	(_slidepotsCCMenu+2)& (0+255),f,b
 20878  000468                     l899:
 20879                           
 20880                           ;encoder.c: 156: }
 20881                           ;encoder.c: 157: }
 20882                           ;encoder.c: 159: if (which_screen == PROGRAM_CHANGE_MENU) {
 20883                           
 20884                           ; BSR set to: 1
 20885                           
 20886                           ; BSR set to: 1
 20887  000468  0E08               	movlw	8
 20888  00046A  184E               	xorwf	_which_screen,w,c
 20889  00046C  A4D8               	btfss	status,2,c
 20890  00046E  D005               	goto	l901
 20891                           
 20892                           ;encoder.c: 160: if(programChangeMenu.selector < 127){
 20893  000470  0E7F               	movlw	127
 20894  000472  0101               	movlb	1	; () banked
 20895  000474  6146               	cpfslt	(_programChangeMenu+2)& (0+255),b
 20896  000476  D001               	goto	l901
 20897                           
 20898                           ; BSR set to: 1
 20899                           ;encoder.c: 161: programChangeMenu.selector++;
 20900  000478  2B46               	incf	(_programChangeMenu+2)& (0+255),f,b
 20901  00047A                     l901:
 20902                           
 20903                           ;encoder.c: 162: }
 20904                           ;encoder.c: 163: }
 20905                           ;encoder.c: 165: if (which_screen == MAIN_CH_MENU) {
 20906                           
 20907                           ; BSR set to: 1
 20908                           
 20909                           ; BSR set to: 1
 20910  00047A  0E14               	movlw	20
 20911  00047C  184E               	xorwf	_which_screen,w,c
 20912  00047E  A4D8               	btfss	status,2,c
 20913  000480  D005               	goto	l903
 20914                           
 20915                           ;encoder.c: 166: if(mainChannelMenu.selector < 15){
 20916  000482  0E0F               	movlw	15
 20917  000484  0101               	movlb	1	; () banked
 20918  000486  6143               	cpfslt	(_mainChannelMenu+2)& (0+255),b
 20919  000488  D001               	goto	l903
 20920                           
 20921                           ; BSR set to: 1
 20922                           ;encoder.c: 167: mainChannelMenu.selector++;
 20923  00048A  2B43               	incf	(_mainChannelMenu+2)& (0+255),f,b
 20924  00048C                     l903:
 20925                           
 20926                           ;encoder.c: 168: }
 20927                           ;encoder.c: 169: }
 20928                           ;encoder.c: 171: if (which_screen == DRUM_CH_MENU) {
 20929                           
 20930                           ; BSR set to: 1
 20931                           
 20932                           ; BSR set to: 1
 20933  00048C  0E15               	movlw	21
 20934  00048E  184E               	xorwf	_which_screen,w,c
 20935  000490  A4D8               	btfss	status,2,c
 20936  000492  D005               	goto	l905
 20937                           
 20938                           ;encoder.c: 172: if(drumChannelMenu.selector < 15){
 20939  000494  0E0F               	movlw	15
 20940  000496  0101               	movlb	1	; () banked
 20941  000498  6140               	cpfslt	(_drumChannelMenu+2)& (0+255),b
 20942  00049A  D001               	goto	l905
 20943                           
 20944                           ; BSR set to: 1
 20945                           ;encoder.c: 173: drumChannelMenu.selector++;
 20946  00049C  2B40               	incf	(_drumChannelMenu+2)& (0+255),f,b
 20947  00049E                     l905:
 20948                           
 20949                           ;encoder.c: 174: }
 20950                           ;encoder.c: 175: }
 20951                           ;encoder.c: 176: if (which_screen == JOYSTICK_CC_MENU) {
 20952                           
 20953                           ; BSR set to: 1
 20954                           
 20955                           ; BSR set to: 1
 20956  00049E  0E13               	movlw	19
 20957  0004A0  184E               	xorwf	_which_screen,w,c
 20958  0004A2  A4D8               	btfss	status,2,c
 20959  0004A4  D01F               	goto	l907
 20960                           
 20961                           ;encoder.c: 177: if(joystickCCMenu.selector < (joystickCCMenu.number - 1)){
 20962  0004A6  0EFF               	movlw	255
 20963  0004A8  0100               	movlb	0	; () banked
 20964  0004AA  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 20965  0004AC  0EFF               	movlw	255
 20966  0004AE  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 20967  0004B0  0101               	movlb	1	; () banked
 20968  0004B2  514A               	movf	_joystickCCMenu& (0+255),w,b
 20969  0004B4  0100               	movlb	0	; () banked
 20970  0004B6  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 20971  0004B8  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 20972  0004BA  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 20973  0004BC  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 20974  0004BE  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 20975  0004C0  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 20976  0004C2  0101               	movlb	1	; () banked
 20977  0004C4  514C               	movf	(_joystickCCMenu+2)& (0+255),w,b
 20978  0004C6  0100               	movlb	0	; () banked
 20979  0004C8  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 20980  0004CA  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 20981  0004CC  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 20982  0004CE  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 20983  0004D0  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 20984  0004D2  0A80               	xorlw	128
 20985  0004D4  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 20986  0004D6  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 20987  0004D8  0A80               	xorlw	128
 20988  0004DA  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 20989  0004DC  B0D8               	btfsc	status,0,c
 20990  0004DE  D002               	goto	l907
 20991                           
 20992                           ; BSR set to: 0
 20993                           ;encoder.c: 178: joystickCCMenu.selector++;
 20994  0004E0  0101               	movlb	1	; () banked
 20995  0004E2  2B4C               	incf	(_joystickCCMenu+2)& (0+255),f,b
 20996  0004E4                     l907:
 20997                           
 20998                           ;encoder.c: 179: }
 20999                           ;encoder.c: 180: }
 21000                           ;encoder.c: 181: if (which_screen == EEPROM_MENU) {
 21001                           
 21002                           ; BSR set to: 1
 21003                           
 21004                           ; BSR set to: 1
 21005  0004E4  0E16               	movlw	22
 21006  0004E6  184E               	xorwf	_which_screen,w,c
 21007  0004E8  A4D8               	btfss	status,2,c
 21008  0004EA  D01F               	goto	l909
 21009                           
 21010                           ;encoder.c: 182: if(eepromMenu.selector < (eepromMenu.number - 1)){
 21011  0004EC  0EFF               	movlw	255
 21012  0004EE  0100               	movlb	0	; () banked
 21013  0004F0  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 21014  0004F2  0EFF               	movlw	255
 21015  0004F4  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 21016  0004F6  0101               	movlb	1	; () banked
 21017  0004F8  513B               	movf	_eepromMenu& (0+255),w,b
 21018  0004FA  0100               	movlb	0	; () banked
 21019  0004FC  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21020  0004FE  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21021  000500  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21022  000502  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21023  000504  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21024  000506  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21025  000508  0101               	movlb	1	; () banked
 21026  00050A  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 21027  00050C  0100               	movlb	0	; () banked
 21028  00050E  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21029  000510  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21030  000512  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21031  000514  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21032  000516  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21033  000518  0A80               	xorlw	128
 21034  00051A  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21035  00051C  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21036  00051E  0A80               	xorlw	128
 21037  000520  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21038  000522  B0D8               	btfsc	status,0,c
 21039  000524  D002               	goto	l909
 21040                           
 21041                           ; BSR set to: 0
 21042                           ;encoder.c: 183: eepromMenu.selector++;
 21043  000526  0101               	movlb	1	; () banked
 21044  000528  2B3D               	incf	(_eepromMenu+2)& (0+255),f,b
 21045  00052A                     l909:
 21046                           
 21047                           ;encoder.c: 184: }
 21048                           ;encoder.c: 185: }
 21049                           ;encoder.c: 186: if (which_screen == SAVES_MENU) {
 21050                           
 21051                           ; BSR set to: 1
 21052                           
 21053                           ; BSR set to: 1
 21054  00052A  0E17               	movlw	23
 21055  00052C  184E               	xorwf	_which_screen,w,c
 21056  00052E  A4D8               	btfss	status,2,c
 21057  000530  D019               	goto	l911
 21058                           
 21059                           ;encoder.c: 187: if(savesMenu.selector < (savesMenu.number - 1)){
 21060  000532  0EFF               	movlw	255
 21061  000534  0100               	movlb	0	; () banked
 21062  000536  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 21063  000538  0EFF               	movlw	255
 21064  00053A  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 21065  00053C  51E3               	movf	_savesMenu& (0+255),w,b
 21066  00053E  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21067  000540  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21068  000542  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21069  000544  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21070  000546  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21071  000548  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21072  00054A  51E5               	movf	(_savesMenu+2)& (0+255),w,b
 21073  00054C  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21074  00054E  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21075  000550  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21076  000552  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21077  000554  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21078  000556  0A80               	xorlw	128
 21079  000558  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21080  00055A  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21081  00055C  0A80               	xorlw	128
 21082  00055E  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21083  000560  A0D8               	btfss	status,0,c
 21084                           
 21085                           ; BSR set to: 0
 21086                           ;encoder.c: 188: savesMenu.selector++;
 21087  000562  2BE5               	incf	(_savesMenu+2)& (0+255),f,b
 21088  000564                     l911:
 21089                           
 21090                           ;encoder.c: 189: }
 21091                           ;encoder.c: 190: }
 21092                           ;encoder.c: 192: if (which_screen == ARPEGGIATOR_MENU) {
 21093                           
 21094                           ; BSR set to: 0
 21095                           
 21096                           ; BSR set to: 0
 21097  000564  0E19               	movlw	25
 21098  000566  184E               	xorwf	_which_screen,w,c
 21099  000568  A4D8               	btfss	status,2,c
 21100  00056A  D019               	goto	l913
 21101                           
 21102                           ;encoder.c: 193: if(arpeggiatorMenu.selector < (arpeggiatorMenu.number - 1)){
 21103  00056C  0EFF               	movlw	255
 21104  00056E  0100               	movlb	0	; () banked
 21105  000570  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 21106  000572  0EFF               	movlw	255
 21107  000574  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 21108  000576  51E0               	movf	_arpeggiatorMenu& (0+255),w,b
 21109  000578  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21110  00057A  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21111  00057C  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21112  00057E  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21113  000580  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21114  000582  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21115  000584  51E2               	movf	(_arpeggiatorMenu+2)& (0+255),w,b
 21116  000586  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21117  000588  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21118  00058A  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21119  00058C  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21120  00058E  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21121  000590  0A80               	xorlw	128
 21122  000592  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21123  000594  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21124  000596  0A80               	xorlw	128
 21125  000598  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21126  00059A  A0D8               	btfss	status,0,c
 21127                           
 21128                           ; BSR set to: 0
 21129                           ;encoder.c: 194: arpeggiatorMenu.selector++;
 21130  00059C  2BE2               	incf	(_arpeggiatorMenu+2)& (0+255),f,b
 21131  00059E                     l913:
 21132                           
 21133                           ;encoder.c: 195: }
 21134                           ;encoder.c: 196: }
 21135                           ;encoder.c: 198: if (which_screen == ARPEGGIATOR_ON_OFF_MENU) {
 21136                           
 21137                           ; BSR set to: 0
 21138                           
 21139                           ; BSR set to: 0
 21140  00059E  0E1A               	movlw	26
 21141  0005A0  184E               	xorwf	_which_screen,w,c
 21142  0005A2  A4D8               	btfss	status,2,c
 21143  0005A4  D003               	goto	l914
 21144                           
 21145                           ;encoder.c: 199: arpeggiatorOnOffMenu.selector ^= 1;
 21146  0005A6  0E01               	movlw	1
 21147  0005A8  0101               	movlb	1	; () banked
 21148  0005AA  1B37               	xorwf	(_arpeggiatorOnOffMenu+2)& (0+255),f,b
 21149  0005AC                     l914:
 21150                           
 21151                           ;encoder.c: 203: }
 21152                           ;encoder.c: 204: if (which_screen == ARPEGGIATOR_TEMPO_MENU) {
 21153  0005AC  0E1B               	movlw	27
 21154  0005AE  184E               	xorwf	_which_screen,w,c
 21155  0005B0  A4D8               	btfss	status,2,c
 21156  0005B2  D005               	goto	l916
 21157                           
 21158                           ;encoder.c: 205: if(arpeggiatorTempoMenu.selector < 250){
 21159  0005B4  0EFA               	movlw	250
 21160  0005B6  0101               	movlb	1	; () banked
 21161  0005B8  6134               	cpfslt	(_arpeggiatorTempoMenu+2)& (0+255),b
 21162  0005BA  D001               	goto	l916
 21163                           
 21164                           ; BSR set to: 1
 21165                           ;encoder.c: 206: arpeggiatorTempoMenu.selector++;
 21166  0005BC  2B34               	incf	(_arpeggiatorTempoMenu+2)& (0+255),f,b
 21167  0005BE                     l916:
 21168                           
 21169                           ;encoder.c: 207: }
 21170                           ;encoder.c: 208: }
 21171                           ;encoder.c: 209: if (which_screen == ARPEGGIATOR_OCTAVES_MENU) {
 21172                           
 21173                           ; BSR set to: 1
 21174                           
 21175                           ; BSR set to: 1
 21176  0005BE  0E1C               	movlw	28
 21177  0005C0  184E               	xorwf	_which_screen,w,c
 21178  0005C2  A4D8               	btfss	status,2,c
 21179  0005C4  D005               	goto	l918
 21180                           
 21181                           ;encoder.c: 210: if(arpeggiatorOctavesMenu.selector < 4){
 21182  0005C6  0E04               	movlw	4
 21183  0005C8  0101               	movlb	1	; () banked
 21184  0005CA  6131               	cpfslt	(_arpeggiatorOctavesMenu+2)& (0+255),b
 21185  0005CC  D001               	goto	l918
 21186                           
 21187                           ; BSR set to: 1
 21188                           ;encoder.c: 211: arpeggiatorOctavesMenu.selector++;
 21189  0005CE  2B31               	incf	(_arpeggiatorOctavesMenu+2)& (0+255),f,b
 21190  0005D0                     l918:
 21191                           
 21192                           ;encoder.c: 212: }
 21193                           ;encoder.c: 213: }
 21194                           ;encoder.c: 214: if (which_screen == ARPEGGIATOR_ARPEGGIO_TYPE_MENU) {
 21195                           
 21196                           ; BSR set to: 1
 21197                           
 21198                           ; BSR set to: 1
 21199  0005D0  0E1D               	movlw	29
 21200  0005D2  184E               	xorwf	_which_screen,w,c
 21201  0005D4  A4D8               	btfss	status,2,c
 21202  0005D6  D01F               	goto	l920
 21203                           
 21204                           ;encoder.c: 215: if(arpeggiatorTypeMenu.selector < (arpeggiatorTypeMenu.number - 1)){
 21205  0005D8  0EFF               	movlw	255
 21206  0005DA  0100               	movlb	0	; () banked
 21207  0005DC  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 21208  0005DE  0EFF               	movlw	255
 21209  0005E0  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 21210  0005E2  0101               	movlb	1	; () banked
 21211  0005E4  512C               	movf	_arpeggiatorTypeMenu& (0+255),w,b
 21212  0005E6  0100               	movlb	0	; () banked
 21213  0005E8  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21214  0005EA  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21215  0005EC  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21216  0005EE  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21217  0005F0  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21218  0005F2  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21219  0005F4  0101               	movlb	1	; () banked
 21220  0005F6  512E               	movf	(_arpeggiatorTypeMenu+2)& (0+255),w,b
 21221  0005F8  0100               	movlb	0	; () banked
 21222  0005FA  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21223  0005FC  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21224  0005FE  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21225  000600  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21226  000602  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21227  000604  0A80               	xorlw	128
 21228  000606  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21229  000608  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21230  00060A  0A80               	xorlw	128
 21231  00060C  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21232  00060E  B0D8               	btfsc	status,0,c
 21233  000610  D002               	goto	l920
 21234                           
 21235                           ; BSR set to: 0
 21236                           ;encoder.c: 216: arpeggiatorTypeMenu.selector++;
 21237  000612  0101               	movlb	1	; () banked
 21238  000614  2B2E               	incf	(_arpeggiatorTypeMenu+2)& (0+255),f,b
 21239  000616                     l920:
 21240                           
 21241                           ;encoder.c: 217: }
 21242                           ;encoder.c: 218: }
 21243                           ;encoder.c: 219: if (which_screen == ARPEGGIATOR_NOTE_LENGTH_MENU) {
 21244                           
 21245                           ; BSR set to: 1
 21246                           
 21247                           ; BSR set to: 1
 21248  000616  0E1E               	movlw	30
 21249  000618  184E               	xorwf	_which_screen,w,c
 21250  00061A  A4D8               	btfss	status,2,c
 21251  00061C  D01F               	goto	l922
 21252                           
 21253                           ;encoder.c: 220: if(arpeggiatorNoteLengthMenu.selector < (arpeggiatorNoteLengthMenu.numb
      +                          er - 1)){
 21254  00061E  0EFF               	movlw	255
 21255  000620  0100               	movlb	0	; () banked
 21256  000622  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 21257  000624  0EFF               	movlw	255
 21258  000626  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 21259  000628  0101               	movlb	1	; () banked
 21260  00062A  5129               	movf	_arpeggiatorNoteLengthMenu& (0+255),w,b
 21261  00062C  0100               	movlb	0	; () banked
 21262  00062E  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21263  000630  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21264  000632  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21265  000634  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21266  000636  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21267  000638  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21268  00063A  0101               	movlb	1	; () banked
 21269  00063C  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 21270  00063E  0100               	movlb	0	; () banked
 21271  000640  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21272  000642  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21273  000644  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21274  000646  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21275  000648  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21276  00064A  0A80               	xorlw	128
 21277  00064C  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21278  00064E  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21279  000650  0A80               	xorlw	128
 21280  000652  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21281  000654  B0D8               	btfsc	status,0,c
 21282  000656  D002               	goto	l922
 21283                           
 21284                           ; BSR set to: 0
 21285                           ;encoder.c: 221: arpeggiatorNoteLengthMenu.selector++;
 21286  000658  0101               	movlb	1	; () banked
 21287  00065A  2B2B               	incf	(_arpeggiatorNoteLengthMenu+2)& (0+255),f,b
 21288  00065C                     l922:
 21289                           
 21290                           ;encoder.c: 222: }
 21291                           ;encoder.c: 223: }
 21292                           ;encoder.c: 224: if (which_screen == ARPEGGIATOR_LATCH_MENU) {
 21293                           
 21294                           ; BSR set to: 1
 21295                           
 21296                           ; BSR set to: 1
 21297  00065C  0E1F               	movlw	31
 21298  00065E  184E               	xorwf	_which_screen,w,c
 21299  000660  A4D8               	btfss	status,2,c
 21300  000662  D01F               	goto	l924
 21301                           
 21302                           ;encoder.c: 226: if(arpeggiatorLatchMenu.selector < (arpeggiatorLatchMenu.number - 1)){
 21303  000664  0EFF               	movlw	255
 21304  000666  0100               	movlb	0	; () banked
 21305  000668  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 21306  00066A  0EFF               	movlw	255
 21307  00066C  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 21308  00066E  0101               	movlb	1	; () banked
 21309  000670  5126               	movf	_arpeggiatorLatchMenu& (0+255),w,b
 21310  000672  0100               	movlb	0	; () banked
 21311  000674  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21312  000676  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21313  000678  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21314  00067A  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21315  00067C  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21316  00067E  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21317  000680  0101               	movlb	1	; () banked
 21318  000682  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 21319  000684  0100               	movlb	0	; () banked
 21320  000686  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21321  000688  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21322  00068A  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21323  00068C  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21324  00068E  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21325  000690  0A80               	xorlw	128
 21326  000692  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21327  000694  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21328  000696  0A80               	xorlw	128
 21329  000698  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21330  00069A  B0D8               	btfsc	status,0,c
 21331  00069C  D002               	goto	l924
 21332                           
 21333                           ; BSR set to: 0
 21334                           ;encoder.c: 227: arpeggiatorLatchMenu.selector++;
 21335  00069E  0101               	movlb	1	; () banked
 21336  0006A0  2B28               	incf	(_arpeggiatorLatchMenu+2)& (0+255),f,b
 21337  0006A2                     l924:
 21338                           
 21339                           ;encoder.c: 228: }
 21340                           ;encoder.c: 229: }
 21341                           ;encoder.c: 230: if (which_screen == ARPEGGIATOR_LATCH_ON_OFF_MENU) {
 21342                           
 21343                           ; BSR set to: 1
 21344                           
 21345                           ; BSR set to: 1
 21346  0006A2  0E20               	movlw	32
 21347  0006A4  184E               	xorwf	_which_screen,w,c
 21348  0006A6  A4D8               	btfss	status,2,c
 21349  0006A8  D003               	goto	l925
 21350                           
 21351                           ;encoder.c: 231: arpeggiatorLatchOnOffMenu.selector ^= 1;
 21352  0006AA  0E01               	movlw	1
 21353  0006AC  0101               	movlb	1	; () banked
 21354  0006AE  1B25               	xorwf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),f,b
 21355  0006B0                     l925:
 21356                           
 21357                           ;encoder.c: 232: }
 21358                           ;encoder.c: 233: if (which_screen == ARPEGGIATOR_AUTO_LATCH_ON_OFF_MENU) {
 21359  0006B0  0E21               	movlw	33
 21360  0006B2  184E               	xorwf	_which_screen,w,c
 21361  0006B4  A4D8               	btfss	status,2,c
 21362  0006B6  D003               	goto	l926
 21363                           
 21364                           ;encoder.c: 234: arpeggiatorAutoLatchOnOffMenu.selector ^= 1;
 21365  0006B8  0E01               	movlw	1
 21366  0006BA  0101               	movlb	1	; () banked
 21367  0006BC  1B22               	xorwf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),f,b
 21368  0006BE                     l926:
 21369                           
 21370                           ;encoder.c: 235: }
 21371                           ;encoder.c: 236: if (which_screen == ARPEGGIATOR_UN_LATCH_MODE_MENU) {
 21372  0006BE  0E22               	movlw	34
 21373  0006C0  184E               	xorwf	_which_screen,w,c
 21374  0006C2  A4D8               	btfss	status,2,c
 21375  0006C4  D003               	goto	l927
 21376                           
 21377                           ;encoder.c: 237: arpeggiatorUnLatchModeMenu.selector ^= 1;
 21378  0006C6  0E01               	movlw	1
 21379  0006C8  0101               	movlb	1	; () banked
 21380  0006CA  1B1F               	xorwf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),f,b
 21381  0006CC                     l927:
 21382                           
 21383                           ;encoder.c: 238: }
 21384                           ;encoder.c: 239: if (which_screen == ARPEGGIATOR_RANDOMIZE_SKIP_MENU) {
 21385  0006CC  0E23               	movlw	35
 21386  0006CE  184E               	xorwf	_which_screen,w,c
 21387  0006D0  A4D8               	btfss	status,2,c
 21388  0006D2  D01F               	goto	l929
 21389                           
 21390                           ;encoder.c: 240: if(arpeggiatorRandomizeSkipMenu.selector < (arpeggiatorRandomizeSkipMen
      +                          u.number - 1)){
 21391  0006D4  0EFF               	movlw	255
 21392  0006D6  0100               	movlb	0	; () banked
 21393  0006D8  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 21394  0006DA  0EFF               	movlw	255
 21395  0006DC  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 21396  0006DE  0101               	movlb	1	; () banked
 21397  0006E0  511A               	movf	_arpeggiatorRandomizeSkipMenu& (0+255),w,b
 21398  0006E2  0100               	movlb	0	; () banked
 21399  0006E4  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21400  0006E6  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21401  0006E8  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21402  0006EA  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21403  0006EC  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21404  0006EE  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21405  0006F0  0101               	movlb	1	; () banked
 21406  0006F2  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 21407  0006F4  0100               	movlb	0	; () banked
 21408  0006F6  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21409  0006F8  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21410  0006FA  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21411  0006FC  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21412  0006FE  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21413  000700  0A80               	xorlw	128
 21414  000702  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21415  000704  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21416  000706  0A80               	xorlw	128
 21417  000708  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21418  00070A  B0D8               	btfsc	status,0,c
 21419  00070C  D002               	goto	l929
 21420                           
 21421                           ; BSR set to: 0
 21422                           ;encoder.c: 241: arpeggiatorRandomizeSkipMenu.selector++;
 21423  00070E  0101               	movlb	1	; () banked
 21424  000710  2B1C               	incf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),f,b
 21425  000712                     l929:
 21426                           
 21427                           ;encoder.c: 242: }
 21428                           ;encoder.c: 243: }
 21429                           ;encoder.c: 244: if (which_screen == ARPEGGIATOR_RANDOMIZE_TYPE_MENU) {
 21430                           
 21431                           ; BSR set to: 1
 21432                           
 21433                           ; BSR set to: 1
 21434  000712  0E24               	movlw	36
 21435  000714  184E               	xorwf	_which_screen,w,c
 21436  000716  A4D8               	btfss	status,2,c
 21437  000718  D003               	goto	l930
 21438                           
 21439                           ;encoder.c: 245: arpeggiatorRandomizeTypeMenu.selector ^= 1;
 21440  00071A  0E01               	movlw	1
 21441  00071C  0101               	movlb	1	; () banked
 21442  00071E  1B19               	xorwf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),f,b
 21443  000720                     l930:
 21444                           
 21445                           ;encoder.c: 249: }
 21446                           ;encoder.c: 250: if (which_screen == ARPEGGIATOR_SKIP_FIRST_LAST_MENU) {
 21447  000720  0E25               	movlw	37
 21448  000722  184E               	xorwf	_which_screen,w,c
 21449  000724  A4D8               	btfss	status,2,c
 21450  000726  D003               	goto	l931
 21451                           
 21452                           ;encoder.c: 251: arpeggiatorSkipFirstLastMenu.selector ^= 1;
 21453  000728  0E01               	movlw	1
 21454  00072A  0101               	movlb	1	; () banked
 21455  00072C  1B16               	xorwf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),f,b
 21456  00072E                     l931:
 21457                           
 21458                           ;encoder.c: 252: }
 21459                           ;encoder.c: 253: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_MENU) {
 21460  00072E  0E26               	movlw	38
 21461  000730  184E               	xorwf	_which_screen,w,c
 21462  000732  A4D8               	btfss	status,2,c
 21463  000734  D019               	goto	l933
 21464                           
 21465                           ;encoder.c: 254: if(arpeggiatorLastNoteModeMenu.selector < (arpeggiatorLastNoteModeMenu.
      +                          number - 1)){
 21466  000736  0EFF               	movlw	255
 21467  000738  0100               	movlb	0	; () banked
 21468  00073A  6F60               	movwf	??_processEncoderBuxton& (0+255),b
 21469  00073C  0EFF               	movlw	255
 21470  00073E  6F61               	movwf	(??_processEncoderBuxton+1)& (0+255),b
 21471  000740  51DD               	movf	_arpeggiatorLastNoteModeMenu& (0+255),w,b
 21472  000742  6F62               	movwf	(??_processEncoderBuxton+2)& (0+255),b
 21473  000744  6B63               	clrf	(??_processEncoderBuxton+3)& (0+255),b
 21474  000746  5160               	movf	??_processEncoderBuxton& (0+255),w,b
 21475  000748  2762               	addwf	(??_processEncoderBuxton+2)& (0+255),f,b
 21476  00074A  5161               	movf	(??_processEncoderBuxton+1)& (0+255),w,b
 21477  00074C  2363               	addwfc	(??_processEncoderBuxton+3)& (0+255),f,b
 21478  00074E  51DF               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 21479  000750  6F64               	movwf	(??_processEncoderBuxton+4)& (0+255),b
 21480  000752  6B65               	clrf	(??_processEncoderBuxton+5)& (0+255),b
 21481  000754  5162               	movf	(??_processEncoderBuxton+2)& (0+255),w,b
 21482  000756  5D64               	subwf	(??_processEncoderBuxton+4)& (0+255),w,b
 21483  000758  5165               	movf	(??_processEncoderBuxton+5)& (0+255),w,b
 21484  00075A  0A80               	xorlw	128
 21485  00075C  6F66               	movwf	(??_processEncoderBuxton+6)& (0+255),b
 21486  00075E  5163               	movf	(??_processEncoderBuxton+3)& (0+255),w,b
 21487  000760  0A80               	xorlw	128
 21488  000762  5966               	subwfb	(??_processEncoderBuxton+6)& (0+255),w,b
 21489  000764  A0D8               	btfss	status,0,c
 21490                           
 21491                           ; BSR set to: 0
 21492                           ;encoder.c: 255: arpeggiatorLastNoteModeMenu.selector++;
 21493  000766  2BDF               	incf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),f,b
 21494  000768                     l933:
 21495                           
 21496                           ;encoder.c: 256: }
 21497                           ;encoder.c: 257: }
 21498                           ;encoder.c: 258: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_PRESS_MENU) {
 21499                           
 21500                           ; BSR set to: 0
 21501                           
 21502                           ; BSR set to: 0
 21503  000768  0E27               	movlw	39
 21504  00076A  184E               	xorwf	_which_screen,w,c
 21505  00076C  A4D8               	btfss	status,2,c
 21506  00076E  D003               	goto	l934
 21507                           
 21508                           ;encoder.c: 259: arpeggiatorLastNoteModeKeyPressMenu.selector ^= 1;
 21509  000770  0E01               	movlw	1
 21510  000772  0101               	movlb	1	; () banked
 21511  000774  1B13               	xorwf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),f,b
 21512  000776                     l934:
 21513                           
 21514                           ;encoder.c: 260: }
 21515                           ;encoder.c: 261: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_RELEASE_MENU) {
 21516  000776  0E28               	movlw	40
 21517  000778  184E               	xorwf	_which_screen,w,c
 21518  00077A  A4D8               	btfss	status,2,c
 21519  00077C  D003               	goto	l935
 21520                           
 21521                           ;encoder.c: 262: arpeggiatorLastNoteModeKeyReleaseMenu.selector ^= 1;
 21522  00077E  0E01               	movlw	1
 21523  000780  0101               	movlb	1	; () banked
 21524  000782  1B10               	xorwf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),f,b
 21525  000784                     l935:
 21526                           
 21527                           ;encoder.c: 263: }
 21528                           ;encoder.c: 264: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU) {
 21529  000784  0E29               	movlw	41
 21530  000786  184E               	xorwf	_which_screen,w,c
 21531  000788  A4D8               	btfss	status,2,c
 21532  00078A  D003               	goto	l936
 21533                           
 21534                           ;encoder.c: 265: arpeggiatorLastNoteModeTransposeMenu.selector ^= 1;
 21535  00078C  0E01               	movlw	1
 21536  00078E  0101               	movlb	1	; () banked
 21537  000790  1B0D               	xorwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),f,b
 21538  000792                     l936:
 21539                           
 21540                           ;encoder.c: 266: }
 21541                           ;encoder.c: 267: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_RESET_MENU) {
 21542  000792  0E2A               	movlw	42
 21543  000794  184E               	xorwf	_which_screen,w,c
 21544  000796  A4D8               	btfss	status,2,c
 21545  000798  D003               	goto	l937
 21546                           
 21547                           ;encoder.c: 268: arpeggiatorLastNoteModeResetMenu.selector ^= 1;
 21548  00079A  0E01               	movlw	1
 21549  00079C  0101               	movlb	1	; () banked
 21550  00079E  1B0A               	xorwf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),f,b
 21551  0007A0                     l937:
 21552                           
 21553                           ;encoder.c: 269: }
 21554                           ;encoder.c: 270: }
 21555                           ;encoder.c: 273: if (encoder_direction == 0x20) {
 21556                           
 21557                           ; BSR set to: 1
 21558  0007A0  0E20               	movlw	32
 21559  0007A2  1835               	xorwf	_encoder_direction,w,c
 21560  0007A4  A4D8               	btfss	status,2,c
 21561  0007A6  D147               	goto	l1011
 21562                           
 21563                           ;encoder.c: 275: lcd_print_once = 0;
 21564  0007A8  9205               	bcf	_lcd_print_once/(0+8),_lcd_print_once& (0+7),c
 21565                           
 21566                           ;encoder.c: 276: print_row_2_once = 0;
 21567  0007AA  9005               	bcf	_print_row_2_once/(0+8),_print_row_2_once& (0+7),c
 21568                           
 21569                           ;encoder.c: 279: if (which_screen == MAIN_MENU) {
 21570  0007AC  0E02               	movlw	2
 21571  0007AE  184E               	xorwf	_which_screen,w,c
 21572  0007B0  A4D8               	btfss	status,2,c
 21573  0007B2  D004               	goto	l940
 21574                           
 21575                           ;encoder.c: 280: if(mainMenu.selector > 0){
 21576  0007B4  0101               	movlb	1	; () banked
 21577  0007B6  5179               	movf	(_mainMenu+2)& (0+255),w,b
 21578  0007B8  A4D8               	btfss	status,2,c
 21579                           
 21580                           ; BSR set to: 1
 21581                           ;encoder.c: 281: mainMenu.selector--;
 21582  0007BA  0779               	decf	(_mainMenu+2)& (0+255),f,b
 21583  0007BC                     l940:
 21584                           
 21585                           ;encoder.c: 282: }
 21586                           ;encoder.c: 283: }
 21587                           ;encoder.c: 284: if (which_screen == KEYBOARD_MENU) {
 21588                           
 21589                           ; BSR set to: 1
 21590                           
 21591                           ; BSR set to: 1
 21592  0007BC  0E03               	movlw	3
 21593  0007BE  184E               	xorwf	_which_screen,w,c
 21594  0007C0  A4D8               	btfss	status,2,c
 21595  0007C2  D004               	goto	l942
 21596                           
 21597                           ;encoder.c: 285: if(keyboardMenu.selector > 0){
 21598  0007C4  0101               	movlb	1	; () banked
 21599  0007C6  5176               	movf	(_keyboardMenu+2)& (0+255),w,b
 21600  0007C8  A4D8               	btfss	status,2,c
 21601                           
 21602                           ; BSR set to: 1
 21603                           ;encoder.c: 286: keyboardMenu.selector--;
 21604  0007CA  0776               	decf	(_keyboardMenu+2)& (0+255),f,b
 21605  0007CC                     l942:
 21606                           
 21607                           ;encoder.c: 287: }
 21608                           ;encoder.c: 288: }
 21609                           ;encoder.c: 289: if (which_screen == TRANSPOSE_MENU) {
 21610                           
 21611                           ; BSR set to: 1
 21612                           
 21613                           ; BSR set to: 1
 21614  0007CC  0E04               	movlw	4
 21615  0007CE  184E               	xorwf	_which_screen,w,c
 21616  0007D0  A4D8               	btfss	status,2,c
 21617  0007D2  D004               	goto	l944
 21618                           
 21619                           ;encoder.c: 290: if(transposeMenu.selector > 0){
 21620  0007D4  0101               	movlb	1	; () banked
 21621  0007D6  516A               	movf	(_transposeMenu+2)& (0+255),w,b
 21622  0007D8  A4D8               	btfss	status,2,c
 21623                           
 21624                           ; BSR set to: 1
 21625                           ;encoder.c: 291: transposeMenu.selector--;
 21626  0007DA  076A               	decf	(_transposeMenu+2)& (0+255),f,b
 21627  0007DC                     l944:
 21628                           
 21629                           ;encoder.c: 292: }
 21630                           ;encoder.c: 293: }
 21631                           ;encoder.c: 294: if (which_screen == DRUM_MENU) {
 21632                           
 21633                           ; BSR set to: 1
 21634                           
 21635                           ; BSR set to: 1
 21636  0007DC  0E05               	movlw	5
 21637  0007DE  184E               	xorwf	_which_screen,w,c
 21638  0007E0  A4D8               	btfss	status,2,c
 21639  0007E2  D004               	goto	l946
 21640                           
 21641                           ;encoder.c: 295: if(drumMenu.selector > 0){
 21642  0007E4  0101               	movlb	1	; () banked
 21643  0007E6  5167               	movf	(_drumMenu+2)& (0+255),w,b
 21644  0007E8  A4D8               	btfss	status,2,c
 21645                           
 21646                           ; BSR set to: 1
 21647                           ;encoder.c: 296: drumMenu.selector--;
 21648  0007EA  0767               	decf	(_drumMenu+2)& (0+255),f,b
 21649  0007EC                     l946:
 21650                           
 21651                           ;encoder.c: 297: }
 21652                           ;encoder.c: 298: }
 21653                           ;encoder.c: 299: if (which_screen == POTENTIOMETER_MENU) {
 21654                           
 21655                           ; BSR set to: 1
 21656                           
 21657                           ; BSR set to: 1
 21658  0007EC  0E06               	movlw	6
 21659  0007EE  184E               	xorwf	_which_screen,w,c
 21660  0007F0  A4D8               	btfss	status,2,c
 21661  0007F2  D004               	goto	l948
 21662                           
 21663                           ;encoder.c: 300: if(potsMenu.selector > 0){
 21664  0007F4  0101               	movlb	1	; () banked
 21665  0007F6  515B               	movf	(_potsMenu+2)& (0+255),w,b
 21666  0007F8  A4D8               	btfss	status,2,c
 21667                           
 21668                           ; BSR set to: 1
 21669                           ;encoder.c: 301: potsMenu.selector--;
 21670  0007FA  075B               	decf	(_potsMenu+2)& (0+255),f,b
 21671  0007FC                     l948:
 21672                           
 21673                           ;encoder.c: 302: }
 21674                           ;encoder.c: 303: }
 21675                           ;encoder.c: 304: if (which_screen == MIDI_CHANNEL_MENU) {
 21676                           
 21677                           ; BSR set to: 1
 21678                           
 21679                           ; BSR set to: 1
 21680  0007FC  0E07               	movlw	7
 21681  0007FE  184E               	xorwf	_which_screen,w,c
 21682  000800  A4D8               	btfss	status,2,c
 21683  000802  D004               	goto	l950
 21684                           
 21685                           ;encoder.c: 305: if(midiChannelMenu.selector > 0){
 21686  000804  0101               	movlb	1	; () banked
 21687  000806  5149               	movf	(_midiChannelMenu+2)& (0+255),w,b
 21688  000808  A4D8               	btfss	status,2,c
 21689                           
 21690                           ; BSR set to: 1
 21691                           ;encoder.c: 306: midiChannelMenu.selector--;
 21692  00080A  0749               	decf	(_midiChannelMenu+2)& (0+255),f,b
 21693  00080C                     l950:
 21694                           
 21695                           ;encoder.c: 307: }
 21696                           ;encoder.c: 308: }
 21697                           ;encoder.c: 310: if (which_screen == MODES_MENU) {
 21698                           
 21699                           ; BSR set to: 1
 21700                           
 21701                           ; BSR set to: 1
 21702  00080C  0E09               	movlw	9
 21703  00080E  184E               	xorwf	_which_screen,w,c
 21704  000810  A4D8               	btfss	status,2,c
 21705  000812  D004               	goto	l952
 21706                           
 21707                           ;encoder.c: 311: if(modeMenu.selector > 0){
 21708  000814  0101               	movlb	1	; () banked
 21709  000816  5173               	movf	(_modeMenu+2)& (0+255),w,b
 21710  000818  A4D8               	btfss	status,2,c
 21711                           
 21712                           ; BSR set to: 1
 21713                           ;encoder.c: 312: modeMenu.selector--;
 21714  00081A  0773               	decf	(_modeMenu+2)& (0+255),f,b
 21715  00081C                     l952:
 21716                           
 21717                           ;encoder.c: 313: }
 21718                           ;encoder.c: 314: }
 21719                           ;encoder.c: 316: if (which_screen == TRIADS_MENU) {
 21720                           
 21721                           ; BSR set to: 1
 21722                           
 21723                           ; BSR set to: 1
 21724  00081C  0E0A               	movlw	10
 21725  00081E  184E               	xorwf	_which_screen,w,c
 21726  000820  A4D8               	btfss	status,2,c
 21727  000822  D004               	goto	l954
 21728                           
 21729                           ;encoder.c: 317: if(triadMenu.selector > 0){
 21730  000824  0101               	movlb	1	; () banked
 21731  000826  5170               	movf	(_triadMenu+2)& (0+255),w,b
 21732  000828  A4D8               	btfss	status,2,c
 21733                           
 21734                           ; BSR set to: 1
 21735                           ;encoder.c: 318: triadMenu.selector--;
 21736  00082A  0770               	decf	(_triadMenu+2)& (0+255),f,b
 21737  00082C                     l954:
 21738                           
 21739                           ;encoder.c: 319: }
 21740                           ;encoder.c: 320: }
 21741                           ;encoder.c: 321: if (which_screen == SEVENTHS_MENU) {
 21742                           
 21743                           ; BSR set to: 1
 21744                           
 21745                           ; BSR set to: 1
 21746  00082C  0E0B               	movlw	11
 21747  00082E  184E               	xorwf	_which_screen,w,c
 21748  000830  A4D8               	btfss	status,2,c
 21749  000832  D004               	goto	l956
 21750                           
 21751                           ;encoder.c: 322: if(seventhMenu.selector > 0){
 21752  000834  0101               	movlb	1	; () banked
 21753  000836  516D               	movf	(_seventhMenu+2)& (0+255),w,b
 21754  000838  A4D8               	btfss	status,2,c
 21755                           
 21756                           ; BSR set to: 1
 21757                           ;encoder.c: 323: seventhMenu.selector--;
 21758  00083A  076D               	decf	(_seventhMenu+2)& (0+255),f,b
 21759  00083C                     l956:
 21760                           
 21761                           ;encoder.c: 324: }
 21762                           ;encoder.c: 325: }
 21763                           ;encoder.c: 326: if (which_screen == DRUMS_CC_TYPE_MENU) {
 21764                           
 21765                           ; BSR set to: 1
 21766                           
 21767                           ; BSR set to: 1
 21768  00083C  0E0C               	movlw	12
 21769  00083E  184E               	xorwf	_which_screen,w,c
 21770  000840  A4D8               	btfss	status,2,c
 21771  000842  D004               	goto	l958
 21772                           
 21773                           ;encoder.c: 327: if(drumCCTypeMenu.selector > 0){
 21774  000844  0101               	movlb	1	; () banked
 21775  000846  5164               	movf	(_drumCCTypeMenu+2)& (0+255),w,b
 21776  000848  A4D8               	btfss	status,2,c
 21777                           
 21778                           ; BSR set to: 1
 21779                           ;encoder.c: 328: drumCCTypeMenu.selector--;
 21780  00084A  0764               	decf	(_drumCCTypeMenu+2)& (0+255),f,b
 21781  00084C                     l958:
 21782                           
 21783                           ;encoder.c: 329: }
 21784                           ;encoder.c: 330: }
 21785                           ;encoder.c: 332: if (which_screen == DRUMS_NN_MENU) {
 21786                           
 21787                           ; BSR set to: 1
 21788                           
 21789                           ; BSR set to: 1
 21790  00084C  0E0D               	movlw	13
 21791  00084E  184E               	xorwf	_which_screen,w,c
 21792  000850  A4D8               	btfss	status,2,c
 21793  000852  D004               	goto	l960
 21794                           
 21795                           ;encoder.c: 333: if(drumNNMenu.selector > 0){
 21796  000854  0101               	movlb	1	; () banked
 21797  000856  5161               	movf	(_drumNNMenu+2)& (0+255),w,b
 21798  000858  A4D8               	btfss	status,2,c
 21799                           
 21800                           ; BSR set to: 1
 21801                           ;encoder.c: 334: drumNNMenu.selector--;
 21802  00085A  0761               	decf	(_drumNNMenu+2)& (0+255),f,b
 21803  00085C                     l960:
 21804                           
 21805                           ;encoder.c: 335: }
 21806                           ;encoder.c: 336: }
 21807                           ;encoder.c: 338: if (which_screen == DRUMS_CC_MENU) {
 21808                           
 21809                           ; BSR set to: 1
 21810                           
 21811                           ; BSR set to: 1
 21812  00085C  0E0E               	movlw	14
 21813  00085E  184E               	xorwf	_which_screen,w,c
 21814  000860  A4D8               	btfss	status,2,c
 21815  000862  D004               	goto	l962
 21816                           
 21817                           ;encoder.c: 339: if(drumCCMenu.selector > 0){
 21818  000864  0101               	movlb	1	; () banked
 21819  000866  515E               	movf	(_drumCCMenu+2)& (0+255),w,b
 21820  000868  A4D8               	btfss	status,2,c
 21821                           
 21822                           ; BSR set to: 1
 21823                           ;encoder.c: 340: drumCCMenu.selector--;
 21824  00086A  075E               	decf	(_drumCCMenu+2)& (0+255),f,b
 21825  00086C                     l962:
 21826                           
 21827                           ;encoder.c: 341: }
 21828                           ;encoder.c: 342: }
 21829                           ;encoder.c: 344: if (which_screen == POTS_RES_MENU) {
 21830                           
 21831                           ; BSR set to: 1
 21832                           
 21833                           ; BSR set to: 1
 21834  00086C  0E0F               	movlw	15
 21835  00086E  184E               	xorwf	_which_screen,w,c
 21836  000870  A4D8               	btfss	status,2,c
 21837  000872  D004               	goto	l964
 21838                           
 21839                           ;encoder.c: 345: if(potsResoMenu.selector > 0){
 21840  000874  0101               	movlb	1	; () banked
 21841  000876  5158               	movf	(_potsResoMenu+2)& (0+255),w,b
 21842  000878  A4D8               	btfss	status,2,c
 21843                           
 21844                           ; BSR set to: 1
 21845                           ;encoder.c: 346: potsResoMenu.selector--;
 21846  00087A  0758               	decf	(_potsResoMenu+2)& (0+255),f,b
 21847  00087C                     l964:
 21848                           
 21849                           ;encoder.c: 347: }
 21850                           ;encoder.c: 348: }
 21851                           ;encoder.c: 350: if (which_screen == ENCODER_POLARITY_MENU) {
 21852                           
 21853                           ; BSR set to: 1
 21854                           
 21855                           ; BSR set to: 1
 21856  00087C  0E18               	movlw	24
 21857  00087E  184E               	xorwf	_which_screen,w,c
 21858  000880  A4D8               	btfss	status,2,c
 21859  000882  D006               	goto	l966
 21860                           
 21861                           ;encoder.c: 351: if(encoderPolarityMenu.selector == 1){
 21862  000884  0101               	movlb	1	; () banked
 21863  000886  053A               	decf	(_encoderPolarityMenu+2)& (0+255),w,b
 21864  000888  A4D8               	btfss	status,2,c
 21865  00088A  D002               	goto	l966
 21866                           
 21867                           ; BSR set to: 1
 21868                           ;encoder.c: 352: encoderPolarityMenu.selector = 0;
 21869  00088C  0E00               	movlw	0
 21870  00088E  6F3A               	movwf	(_encoderPolarityMenu+2)& (0+255),b
 21871  000890                     l966:
 21872                           
 21873                           ;encoder.c: 353: }
 21874                           ;encoder.c: 354: }
 21875                           ;encoder.c: 356: if (which_screen == POTS_ALPHA_MENU) {
 21876                           
 21877                           ; BSR set to: 1
 21878                           
 21879                           ; BSR set to: 1
 21880  000890  0E10               	movlw	16
 21881  000892  184E               	xorwf	_which_screen,w,c
 21882  000894  A4D8               	btfss	status,2,c
 21883  000896  D006               	goto	l968
 21884                           
 21885                           ;encoder.c: 357: if(potsAlphaMenu.selector >= 15){
 21886  000898  0E0E               	movlw	14
 21887  00089A  0101               	movlb	1	; () banked
 21888  00089C  6555               	cpfsgt	(_potsAlphaMenu+2)& (0+255),b
 21889  00089E  D002               	goto	l968
 21890                           
 21891                           ; BSR set to: 1
 21892                           ;encoder.c: 358: potsAlphaMenu.selector -= 5;
 21893  0008A0  0E05               	movlw	5
 21894  0008A2  5F55               	subwf	(_potsAlphaMenu+2)& (0+255),f,b
 21895  0008A4                     l968:
 21896                           
 21897                           ;encoder.c: 363: if(potsCCMenu.selector > -2){
 21898                           
 21899                           ; BSR set to: 1
 21900  0008A4  0E11               	movlw	17
 21901  0008A6  184E               	xorwf	_which_screen,w,c
 21902  0008A8  A4D8               	btfss	status,2,c
 21903  0008AA  D002               	goto	l970
 21904                           
 21905                           ;encoder.c: 364: potsCCMenu.selector--;
 21906  0008AC  0101               	movlb	1	; () banked
 21907  0008AE  0752               	decf	(_potsCCMenu+2)& (0+255),f,b
 21908  0008B0                     l970:
 21909                           
 21910                           ;encoder.c: 369: if(slidepotsCCMenu.selector > -2){
 21911                           
 21912                           ; BSR set to: 1
 21913                           
 21914                           ; BSR set to: 1
 21915  0008B0  0E12               	movlw	18
 21916  0008B2  184E               	xorwf	_which_screen,w,c
 21917  0008B4  A4D8               	btfss	status,2,c
 21918  0008B6  D002               	goto	l972
 21919                           
 21920                           ;encoder.c: 370: slidepotsCCMenu.selector--;
 21921  0008B8  0101               	movlb	1	; () banked
 21922  0008BA  074F               	decf	(_slidepotsCCMenu+2)& (0+255),f,b
 21923  0008BC                     l972:
 21924                           
 21925                           ;encoder.c: 371: }
 21926                           ;encoder.c: 372: }
 21927                           ;encoder.c: 373: if (which_screen == PROGRAM_CHANGE_MENU) {
 21928                           
 21929                           ; BSR set to: 1
 21930                           
 21931                           ; BSR set to: 1
 21932  0008BC  0E08               	movlw	8
 21933  0008BE  184E               	xorwf	_which_screen,w,c
 21934  0008C0  A4D8               	btfss	status,2,c
 21935  0008C2  D004               	goto	l974
 21936                           
 21937                           ;encoder.c: 374: if(programChangeMenu.selector > 0){
 21938  0008C4  0101               	movlb	1	; () banked
 21939  0008C6  5146               	movf	(_programChangeMenu+2)& (0+255),w,b
 21940  0008C8  A4D8               	btfss	status,2,c
 21941                           
 21942                           ; BSR set to: 1
 21943                           ;encoder.c: 375: programChangeMenu.selector--;
 21944  0008CA  0746               	decf	(_programChangeMenu+2)& (0+255),f,b
 21945  0008CC                     l974:
 21946                           
 21947                           ;encoder.c: 376: }
 21948                           ;encoder.c: 377: }
 21949                           ;encoder.c: 379: if (which_screen == MAIN_CH_MENU) {
 21950                           
 21951                           ; BSR set to: 1
 21952                           
 21953                           ; BSR set to: 1
 21954  0008CC  0E14               	movlw	20
 21955  0008CE  184E               	xorwf	_which_screen,w,c
 21956  0008D0  A4D8               	btfss	status,2,c
 21957  0008D2  D004               	goto	l976
 21958                           
 21959                           ;encoder.c: 380: if(mainChannelMenu.selector > 0){
 21960  0008D4  0101               	movlb	1	; () banked
 21961  0008D6  5143               	movf	(_mainChannelMenu+2)& (0+255),w,b
 21962  0008D8  A4D8               	btfss	status,2,c
 21963                           
 21964                           ; BSR set to: 1
 21965                           ;encoder.c: 381: mainChannelMenu.selector--;
 21966  0008DA  0743               	decf	(_mainChannelMenu+2)& (0+255),f,b
 21967  0008DC                     l976:
 21968                           
 21969                           ;encoder.c: 382: }
 21970                           ;encoder.c: 383: }
 21971                           ;encoder.c: 385: if (which_screen == DRUM_CH_MENU) {
 21972                           
 21973                           ; BSR set to: 1
 21974                           
 21975                           ; BSR set to: 1
 21976  0008DC  0E15               	movlw	21
 21977  0008DE  184E               	xorwf	_which_screen,w,c
 21978  0008E0  A4D8               	btfss	status,2,c
 21979  0008E2  D004               	goto	l978
 21980                           
 21981                           ;encoder.c: 386: if(drumChannelMenu.selector > 0){
 21982  0008E4  0101               	movlb	1	; () banked
 21983  0008E6  5140               	movf	(_drumChannelMenu+2)& (0+255),w,b
 21984  0008E8  A4D8               	btfss	status,2,c
 21985                           
 21986                           ; BSR set to: 1
 21987                           ;encoder.c: 387: drumChannelMenu.selector--;
 21988  0008EA  0740               	decf	(_drumChannelMenu+2)& (0+255),f,b
 21989  0008EC                     l978:
 21990                           
 21991                           ;encoder.c: 392: if(joystickCCMenu.selector > -2){
 21992                           
 21993                           ; BSR set to: 1
 21994                           
 21995                           ; BSR set to: 1
 21996  0008EC  0E13               	movlw	19
 21997  0008EE  184E               	xorwf	_which_screen,w,c
 21998  0008F0  A4D8               	btfss	status,2,c
 21999  0008F2  D002               	goto	l980
 22000                           
 22001                           ;encoder.c: 393: joystickCCMenu.selector--;
 22002  0008F4  0101               	movlb	1	; () banked
 22003  0008F6  074C               	decf	(_joystickCCMenu+2)& (0+255),f,b
 22004  0008F8                     l980:
 22005                           
 22006                           ;encoder.c: 394: }
 22007                           ;encoder.c: 395: }
 22008                           ;encoder.c: 396: if (which_screen == EEPROM_MENU) {
 22009                           
 22010                           ; BSR set to: 1
 22011                           
 22012                           ; BSR set to: 1
 22013  0008F8  0E16               	movlw	22
 22014  0008FA  184E               	xorwf	_which_screen,w,c
 22015  0008FC  A4D8               	btfss	status,2,c
 22016  0008FE  D004               	goto	l982
 22017                           
 22018                           ;encoder.c: 397: if(eepromMenu.selector > 0){
 22019  000900  0101               	movlb	1	; () banked
 22020  000902  513D               	movf	(_eepromMenu+2)& (0+255),w,b
 22021  000904  A4D8               	btfss	status,2,c
 22022                           
 22023                           ; BSR set to: 1
 22024                           ;encoder.c: 398: eepromMenu.selector--;
 22025  000906  073D               	decf	(_eepromMenu+2)& (0+255),f,b
 22026  000908                     l982:
 22027                           
 22028                           ;encoder.c: 399: }
 22029                           ;encoder.c: 400: }
 22030                           ;encoder.c: 401: if (which_screen == SAVES_MENU) {
 22031                           
 22032                           ; BSR set to: 1
 22033                           
 22034                           ; BSR set to: 1
 22035  000908  0E17               	movlw	23
 22036  00090A  184E               	xorwf	_which_screen,w,c
 22037  00090C  A4D8               	btfss	status,2,c
 22038  00090E  D004               	goto	l984
 22039                           
 22040                           ;encoder.c: 402: if(savesMenu.selector > 0){
 22041  000910  0100               	movlb	0	; () banked
 22042  000912  51E5               	movf	(_savesMenu+2)& (0+255),w,b
 22043  000914  A4D8               	btfss	status,2,c
 22044                           
 22045                           ; BSR set to: 0
 22046                           ;encoder.c: 403: savesMenu.selector--;
 22047  000916  07E5               	decf	(_savesMenu+2)& (0+255),f,b
 22048  000918                     l984:
 22049                           
 22050                           ;encoder.c: 404: }
 22051                           ;encoder.c: 405: }
 22052                           ;encoder.c: 406: if (which_screen == ARPEGGIATOR_MENU) {
 22053                           
 22054                           ; BSR set to: 0
 22055                           
 22056                           ; BSR set to: 0
 22057  000918  0E19               	movlw	25
 22058  00091A  184E               	xorwf	_which_screen,w,c
 22059  00091C  A4D8               	btfss	status,2,c
 22060  00091E  D004               	goto	l986
 22061                           
 22062                           ;encoder.c: 407: if(arpeggiatorMenu.selector > 0){
 22063  000920  0100               	movlb	0	; () banked
 22064  000922  51E2               	movf	(_arpeggiatorMenu+2)& (0+255),w,b
 22065  000924  A4D8               	btfss	status,2,c
 22066                           
 22067                           ; BSR set to: 0
 22068                           ;encoder.c: 408: arpeggiatorMenu.selector--;
 22069  000926  07E2               	decf	(_arpeggiatorMenu+2)& (0+255),f,b
 22070  000928                     l986:
 22071                           
 22072                           ;encoder.c: 409: }
 22073                           ;encoder.c: 410: }
 22074                           ;encoder.c: 411: if (which_screen == ARPEGGIATOR_ON_OFF_MENU) {
 22075                           
 22076                           ; BSR set to: 0
 22077                           
 22078                           ; BSR set to: 0
 22079  000928  0E1A               	movlw	26
 22080  00092A  184E               	xorwf	_which_screen,w,c
 22081  00092C  A4D8               	btfss	status,2,c
 22082  00092E  D003               	goto	l987
 22083                           
 22084                           ;encoder.c: 412: arpeggiatorOnOffMenu.selector ^= 1;
 22085  000930  0E01               	movlw	1
 22086  000932  0101               	movlb	1	; () banked
 22087  000934  1B37               	xorwf	(_arpeggiatorOnOffMenu+2)& (0+255),f,b
 22088  000936                     l987:
 22089                           
 22090                           ;encoder.c: 416: }
 22091                           ;encoder.c: 417: if (which_screen == ARPEGGIATOR_TEMPO_MENU) {
 22092  000936  0E1B               	movlw	27
 22093  000938  184E               	xorwf	_which_screen,w,c
 22094  00093A  A4D8               	btfss	status,2,c
 22095  00093C  D005               	goto	l989
 22096                           
 22097                           ;encoder.c: 418: if(arpeggiatorTempoMenu.selector > 25){
 22098  00093E  0E19               	movlw	25
 22099  000940  0101               	movlb	1	; () banked
 22100  000942  6534               	cpfsgt	(_arpeggiatorTempoMenu+2)& (0+255),b
 22101  000944  D001               	goto	l989
 22102                           
 22103                           ; BSR set to: 1
 22104                           ;encoder.c: 419: arpeggiatorTempoMenu.selector--;
 22105  000946  0734               	decf	(_arpeggiatorTempoMenu+2)& (0+255),f,b
 22106  000948                     l989:
 22107                           
 22108                           ;encoder.c: 420: }
 22109                           ;encoder.c: 421: }
 22110                           ;encoder.c: 422: if (which_screen == ARPEGGIATOR_OCTAVES_MENU) {
 22111                           
 22112                           ; BSR set to: 1
 22113                           
 22114                           ; BSR set to: 1
 22115  000948  0E1C               	movlw	28
 22116  00094A  184E               	xorwf	_which_screen,w,c
 22117  00094C  A4D8               	btfss	status,2,c
 22118  00094E  D005               	goto	l991
 22119                           
 22120                           ;encoder.c: 423: if(arpeggiatorOctavesMenu.selector > 1){
 22121  000950  0E01               	movlw	1
 22122  000952  0101               	movlb	1	; () banked
 22123  000954  6531               	cpfsgt	(_arpeggiatorOctavesMenu+2)& (0+255),b
 22124  000956  D001               	goto	l991
 22125                           
 22126                           ; BSR set to: 1
 22127                           ;encoder.c: 424: arpeggiatorOctavesMenu.selector--;
 22128  000958  0731               	decf	(_arpeggiatorOctavesMenu+2)& (0+255),f,b
 22129  00095A                     l991:
 22130                           
 22131                           ;encoder.c: 425: }
 22132                           ;encoder.c: 426: }
 22133                           ;encoder.c: 427: if (which_screen == ARPEGGIATOR_ARPEGGIO_TYPE_MENU) {
 22134                           
 22135                           ; BSR set to: 1
 22136                           
 22137                           ; BSR set to: 1
 22138  00095A  0E1D               	movlw	29
 22139  00095C  184E               	xorwf	_which_screen,w,c
 22140  00095E  A4D8               	btfss	status,2,c
 22141  000960  D004               	goto	l993
 22142                           
 22143                           ;encoder.c: 428: if(arpeggiatorTypeMenu.selector > 0){
 22144  000962  0101               	movlb	1	; () banked
 22145  000964  512E               	movf	(_arpeggiatorTypeMenu+2)& (0+255),w,b
 22146  000966  A4D8               	btfss	status,2,c
 22147                           
 22148                           ; BSR set to: 1
 22149                           ;encoder.c: 429: arpeggiatorTypeMenu.selector--;
 22150  000968  072E               	decf	(_arpeggiatorTypeMenu+2)& (0+255),f,b
 22151  00096A                     l993:
 22152                           
 22153                           ;encoder.c: 430: }
 22154                           ;encoder.c: 431: }
 22155                           ;encoder.c: 432: if (which_screen == ARPEGGIATOR_NOTE_LENGTH_MENU) {
 22156                           
 22157                           ; BSR set to: 1
 22158                           
 22159                           ; BSR set to: 1
 22160  00096A  0E1E               	movlw	30
 22161  00096C  184E               	xorwf	_which_screen,w,c
 22162  00096E  A4D8               	btfss	status,2,c
 22163  000970  D004               	goto	l995
 22164                           
 22165                           ;encoder.c: 433: if(arpeggiatorNoteLengthMenu.selector > 0){
 22166  000972  0101               	movlb	1	; () banked
 22167  000974  512B               	movf	(_arpeggiatorNoteLengthMenu+2)& (0+255),w,b
 22168  000976  A4D8               	btfss	status,2,c
 22169                           
 22170                           ; BSR set to: 1
 22171                           ;encoder.c: 434: arpeggiatorNoteLengthMenu.selector--;
 22172  000978  072B               	decf	(_arpeggiatorNoteLengthMenu+2)& (0+255),f,b
 22173  00097A                     l995:
 22174                           
 22175                           ;encoder.c: 435: }
 22176                           ;encoder.c: 436: }
 22177                           ;encoder.c: 437: if (which_screen == ARPEGGIATOR_LATCH_MENU) {
 22178                           
 22179                           ; BSR set to: 1
 22180                           
 22181                           ; BSR set to: 1
 22182  00097A  0E1F               	movlw	31
 22183  00097C  184E               	xorwf	_which_screen,w,c
 22184  00097E  A4D8               	btfss	status,2,c
 22185  000980  D004               	goto	l997
 22186                           
 22187                           ;encoder.c: 439: if(arpeggiatorLatchMenu.selector > 0){
 22188  000982  0101               	movlb	1	; () banked
 22189  000984  5128               	movf	(_arpeggiatorLatchMenu+2)& (0+255),w,b
 22190  000986  A4D8               	btfss	status,2,c
 22191                           
 22192                           ; BSR set to: 1
 22193                           ;encoder.c: 440: arpeggiatorLatchMenu.selector--;
 22194  000988  0728               	decf	(_arpeggiatorLatchMenu+2)& (0+255),f,b
 22195  00098A                     l997:
 22196                           
 22197                           ;encoder.c: 441: }
 22198                           ;encoder.c: 442: }
 22199                           ;encoder.c: 443: if (which_screen == ARPEGGIATOR_LATCH_ON_OFF_MENU) {
 22200                           
 22201                           ; BSR set to: 1
 22202                           
 22203                           ; BSR set to: 1
 22204  00098A  0E20               	movlw	32
 22205  00098C  184E               	xorwf	_which_screen,w,c
 22206  00098E  A4D8               	btfss	status,2,c
 22207  000990  D003               	goto	l998
 22208                           
 22209                           ;encoder.c: 444: arpeggiatorLatchOnOffMenu.selector ^= 1;
 22210  000992  0E01               	movlw	1
 22211  000994  0101               	movlb	1	; () banked
 22212  000996  1B25               	xorwf	(_arpeggiatorLatchOnOffMenu+2)& (0+255),f,b
 22213  000998                     l998:
 22214                           
 22215                           ;encoder.c: 445: }
 22216                           ;encoder.c: 446: if (which_screen == ARPEGGIATOR_AUTO_LATCH_ON_OFF_MENU) {
 22217  000998  0E21               	movlw	33
 22218  00099A  184E               	xorwf	_which_screen,w,c
 22219  00099C  A4D8               	btfss	status,2,c
 22220  00099E  D003               	goto	l999
 22221                           
 22222                           ;encoder.c: 447: arpeggiatorAutoLatchOnOffMenu.selector ^= 1;
 22223  0009A0  0E01               	movlw	1
 22224  0009A2  0101               	movlb	1	; () banked
 22225  0009A4  1B22               	xorwf	(_arpeggiatorAutoLatchOnOffMenu+2)& (0+255),f,b
 22226  0009A6                     l999:
 22227                           
 22228                           ;encoder.c: 448: }
 22229                           ;encoder.c: 449: if (which_screen == ARPEGGIATOR_UN_LATCH_MODE_MENU) {
 22230  0009A6  0E22               	movlw	34
 22231  0009A8  184E               	xorwf	_which_screen,w,c
 22232  0009AA  A4D8               	btfss	status,2,c
 22233  0009AC  D003               	goto	l1000
 22234                           
 22235                           ;encoder.c: 450: arpeggiatorUnLatchModeMenu.selector ^= 1;
 22236  0009AE  0E01               	movlw	1
 22237  0009B0  0101               	movlb	1	; () banked
 22238  0009B2  1B1F               	xorwf	(_arpeggiatorUnLatchModeMenu+2)& (0+255),f,b
 22239  0009B4                     l1000:
 22240                           
 22241                           ;encoder.c: 451: }
 22242                           ;encoder.c: 452: if (which_screen == ARPEGGIATOR_RANDOMIZE_SKIP_MENU) {
 22243  0009B4  0E23               	movlw	35
 22244  0009B6  184E               	xorwf	_which_screen,w,c
 22245  0009B8  A4D8               	btfss	status,2,c
 22246  0009BA  D004               	goto	l1002
 22247                           
 22248                           ;encoder.c: 453: if(arpeggiatorRandomizeSkipMenu.selector > 0){
 22249  0009BC  0101               	movlb	1	; () banked
 22250  0009BE  511C               	movf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),w,b
 22251  0009C0  A4D8               	btfss	status,2,c
 22252                           
 22253                           ; BSR set to: 1
 22254                           ;encoder.c: 454: arpeggiatorRandomizeSkipMenu.selector--;
 22255  0009C2  071C               	decf	(_arpeggiatorRandomizeSkipMenu+2)& (0+255),f,b
 22256  0009C4                     l1002:
 22257                           
 22258                           ;encoder.c: 455: }
 22259                           ;encoder.c: 456: }
 22260                           ;encoder.c: 457: if (which_screen == ARPEGGIATOR_RANDOMIZE_TYPE_MENU) {
 22261                           
 22262                           ; BSR set to: 1
 22263                           
 22264                           ; BSR set to: 1
 22265  0009C4  0E24               	movlw	36
 22266  0009C6  184E               	xorwf	_which_screen,w,c
 22267  0009C8  A4D8               	btfss	status,2,c
 22268  0009CA  D003               	goto	l1003
 22269                           
 22270                           ;encoder.c: 458: arpeggiatorRandomizeTypeMenu.selector ^= 1;
 22271  0009CC  0E01               	movlw	1
 22272  0009CE  0101               	movlb	1	; () banked
 22273  0009D0  1B19               	xorwf	(_arpeggiatorRandomizeTypeMenu+2)& (0+255),f,b
 22274  0009D2                     l1003:
 22275                           
 22276                           ;encoder.c: 462: }
 22277                           ;encoder.c: 463: if (which_screen == ARPEGGIATOR_SKIP_FIRST_LAST_MENU) {
 22278  0009D2  0E25               	movlw	37
 22279  0009D4  184E               	xorwf	_which_screen,w,c
 22280  0009D6  A4D8               	btfss	status,2,c
 22281  0009D8  D003               	goto	l1004
 22282                           
 22283                           ;encoder.c: 464: arpeggiatorSkipFirstLastMenu.selector ^= 1;
 22284  0009DA  0E01               	movlw	1
 22285  0009DC  0101               	movlb	1	; () banked
 22286  0009DE  1B16               	xorwf	(_arpeggiatorSkipFirstLastMenu+2)& (0+255),f,b
 22287  0009E0                     l1004:
 22288                           
 22289                           ;encoder.c: 465: }
 22290                           ;encoder.c: 466: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_MENU) {
 22291  0009E0  0E26               	movlw	38
 22292  0009E2  184E               	xorwf	_which_screen,w,c
 22293  0009E4  A4D8               	btfss	status,2,c
 22294  0009E6  D004               	goto	l1006
 22295                           
 22296                           ;encoder.c: 467: if(arpeggiatorLastNoteModeMenu.selector > 0){
 22297  0009E8  0100               	movlb	0	; () banked
 22298  0009EA  51DF               	movf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),w,b
 22299  0009EC  A4D8               	btfss	status,2,c
 22300                           
 22301                           ; BSR set to: 0
 22302                           ;encoder.c: 468: arpeggiatorLastNoteModeMenu.selector--;
 22303  0009EE  07DF               	decf	(_arpeggiatorLastNoteModeMenu+2)& (0+255),f,b
 22304  0009F0                     l1006:
 22305                           
 22306                           ;encoder.c: 469: }
 22307                           ;encoder.c: 470: }
 22308                           ;encoder.c: 471: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_PRESS_MENU) {
 22309                           
 22310                           ; BSR set to: 0
 22311                           
 22312                           ; BSR set to: 0
 22313  0009F0  0E27               	movlw	39
 22314  0009F2  184E               	xorwf	_which_screen,w,c
 22315  0009F4  A4D8               	btfss	status,2,c
 22316  0009F6  D003               	goto	l1007
 22317                           
 22318                           ;encoder.c: 472: arpeggiatorLastNoteModeKeyPressMenu.selector ^= 1;
 22319  0009F8  0E01               	movlw	1
 22320  0009FA  0101               	movlb	1	; () banked
 22321  0009FC  1B13               	xorwf	(_arpeggiatorLastNoteModeKeyPressMenu+2)& (0+255),f,b
 22322  0009FE                     l1007:
 22323                           
 22324                           ;encoder.c: 473: }
 22325                           ;encoder.c: 474: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_KEY_RELEASE_MENU) {
 22326  0009FE  0E28               	movlw	40
 22327  000A00  184E               	xorwf	_which_screen,w,c
 22328  000A02  A4D8               	btfss	status,2,c
 22329  000A04  D003               	goto	l1008
 22330                           
 22331                           ;encoder.c: 475: arpeggiatorLastNoteModeKeyReleaseMenu.selector ^= 1;
 22332  000A06  0E01               	movlw	1
 22333  000A08  0101               	movlb	1	; () banked
 22334  000A0A  1B10               	xorwf	(_arpeggiatorLastNoteModeKeyReleaseMenu+2)& (0+255),f,b
 22335  000A0C                     l1008:
 22336                           
 22337                           ;encoder.c: 476: }
 22338                           ;encoder.c: 477: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU) {
 22339  000A0C  0E29               	movlw	41
 22340  000A0E  184E               	xorwf	_which_screen,w,c
 22341  000A10  A4D8               	btfss	status,2,c
 22342  000A12  D003               	goto	l1009
 22343                           
 22344                           ;encoder.c: 478: arpeggiatorLastNoteModeTransposeMenu.selector ^= 1;
 22345  000A14  0E01               	movlw	1
 22346  000A16  0101               	movlb	1	; () banked
 22347  000A18  1B0D               	xorwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),f,b
 22348  000A1A                     l1009:
 22349                           
 22350                           ;encoder.c: 479: }
 22351                           ;encoder.c: 480: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_TRANSPOSE_MENU) {
 22352  000A1A  0E29               	movlw	41
 22353  000A1C  184E               	xorwf	_which_screen,w,c
 22354  000A1E  A4D8               	btfss	status,2,c
 22355  000A20  D003               	goto	l1010
 22356                           
 22357                           ;encoder.c: 481: arpeggiatorLastNoteModeTransposeMenu.selector ^= 1;
 22358  000A22  0E01               	movlw	1
 22359  000A24  0101               	movlb	1	; () banked
 22360  000A26  1B0D               	xorwf	(_arpeggiatorLastNoteModeTransposeMenu+2)& (0+255),f,b
 22361  000A28                     l1010:
 22362                           
 22363                           ;encoder.c: 482: }
 22364                           ;encoder.c: 483: if (which_screen == ARPEGGIATOR_LAST_NOTE_MODE_RESET_MENU) {
 22365  000A28  0E2A               	movlw	42
 22366  000A2A  184E               	xorwf	_which_screen,w,c
 22367  000A2C  A4D8               	btfss	status,2,c
 22368  000A2E  D003               	goto	l1011
 22369                           
 22370                           ;encoder.c: 484: arpeggiatorLastNoteModeResetMenu.selector ^= 1;
 22371  000A30  0E01               	movlw	1
 22372  000A32  0101               	movlb	1	; () banked
 22373  000A34  1B0A               	xorwf	(_arpeggiatorLastNoteModeResetMenu+2)& (0+255),f,b
 22374  000A36                     l1011:
 22375                           
 22376                           ;encoder.c: 485: }
 22377                           ;encoder.c: 486: }
 22378                           ;encoder.c: 488: encoder_direction = 0x00;
 22379                           
 22380                           ; BSR set to: 1
 22381                           
 22382                           ; BSR set to: 1
 22383  000A36  0E00               	movlw	0
 22384  000A38  6E35               	movwf	_encoder_direction,c
 22385  000A3A  0012               	return		;funcret
 22386  000A3C                     __end_of_processEncoderBuxton:
 22387                           	opt stack 0
 22388                           tblptru	equ	0xFF8
 22389                           tblptrh	equ	0xFF7
 22390                           tblptrl	equ	0xFF6
 22391                           tablat	equ	0xFF5
 22392                           prodh	equ	0xFF4
 22393                           prodl	equ	0xFF3
 22394                           intcon	equ	0xFF2
 22395                           intcon2	equ	0xFF1
 22396                           postinc0	equ	0xFEE
 22397                           wreg	equ	0xFE8
 22398                           postinc1	equ	0xFE6
 22399                           plusw1	equ	0xFE3
 22400                           fsr1h	equ	0xFE2
 22401                           fsr1l	equ	0xFE1
 22402                           indf2	equ	0xFDF
 22403                           postinc2	equ	0xFDE
 22404                           postdec2	equ	0xFDD
 22405                           plusw2	equ	0xFDB
 22406                           fsr2h	equ	0xFDA
 22407                           fsr2l	equ	0xFD9
 22408                           status	equ	0xFD8
 22409                           
 22410 ;; *************** function _digitalInputs *****************
 22411 ;; Defined at:
 22412 ;;		line 360 in file "main.c"
 22413 ;; Parameters:    Size  Location     Type
 22414 ;;		None
 22415 ;; Auto vars:     Size  Location     Type
 22416 ;;		None
 22417 ;; Return value:  Size  Location     Type
 22418 ;;                  1    wreg      void 
 22419 ;; Registers used:
 22420 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22421 ;; Tracked objects:
 22422 ;;		On entry : 0/0
 22423 ;;		On exit  : 0/0
 22424 ;;		Unchanged: 0/0
 22425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22430 ;;Total ram usage:        0 bytes
 22431 ;; Hardware stack levels used:    1
 22432 ;; Hardware stack levels required when called:   14
 22433 ;; This function calls:
 22434 ;;		_buttonInputsSerial
 22435 ;;		_keyboardTranspose
 22436 ;;		_processDrumpad
 22437 ;;		_processKeyboard
 22438 ;;		_processOctave
 22439 ;; This function is called by:
 22440 ;;		_setControllerNumbers
 22441 ;;		_un_block_code
 22442 ;;		_Function_C_2
 22443 ;;		_Function_C_3
 22444 ;;		_main
 22445 ;; This function uses a non-reentrant model
 22446 ;;
 22447                           
 22448                           	psect	text64
 22449  0092DE                     __ptext64:
 22450                           	opt stack 0
 22451  0092DE                     _digitalInputs:
 22452                           	opt stack 13
 22453                           
 22454                           ;main.c: 362: buttonInputsSerial();
 22455                           
 22456                           ;incstack = 0
 22457  0092DE  ECBC  F043         	call	_buttonInputsSerial	;wreg free
 22458                           
 22459                           ;main.c: 365: if(button_state_now != button_state_last) {
 22460  0092E2  0100               	movlb	0	; () banked
 22461  0092E4  51D5               	movf	_button_state_last& (0+255),w,b
 22462  0092E6  19D9               	xorwf	_button_state_now& (0+255),w,b
 22463  0092E8  E10A               	bnz	u56700
 22464  0092EA  51D6               	movf	(_button_state_last+1)& (0+255),w,b
 22465  0092EC  19DA               	xorwf	(_button_state_now+1)& (0+255),w,b
 22466  0092EE  E107               	bnz	u56700
 22467  0092F0  51D7               	movf	(_button_state_last+2)& (0+255),w,b
 22468  0092F2  19DB               	xorwf	(_button_state_now+2)& (0+255),w,b
 22469  0092F4  E104               	bnz	u56700
 22470  0092F6  51D8               	movf	(_button_state_last+3)& (0+255),w,b
 22471  0092F8  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 22472  0092FA  B4D8               	btfsc	status,2,c
 22473  0092FC  D00E               	goto	l5010
 22474  0092FE                     u56700:
 22475                           
 22476                           ; BSR set to: 0
 22477                           ;main.c: 366: processOctave();
 22478  0092FE  EC54  F01B         	call	_processOctave	;wreg free
 22479                           
 22480                           ;main.c: 367: keyboardTranspose();
 22481  009302  EC3D  F022         	call	_keyboardTranspose	;wreg free
 22482                           
 22483                           ;main.c: 368: processKeyboard();
 22484  009306  EC5A  F047         	call	_processKeyboard	;wreg free
 22485                           
 22486                           ;main.c: 369: button_state_last = button_state_now;
 22487  00930A  C0D9  F0D5         	movff	_button_state_now,_button_state_last
 22488  00930E  C0DA  F0D6         	movff	_button_state_now+1,_button_state_last+1
 22489  009312  C0DB  F0D7         	movff	_button_state_now+2,_button_state_last+2
 22490  009316  C0DC  F0D8         	movff	_button_state_now+3,_button_state_last+3
 22491  00931A                     l5010:
 22492                           
 22493                           ;main.c: 370: }
 22494                           ;main.c: 373: if(drum_button_state_now != drum_button_state_last) {
 22495  00931A  5037               	movf	_drum_button_state_last,w,c
 22496  00931C  1838               	xorwf	_drum_button_state_now,w,c
 22497  00931E  B4D8               	btfsc	status,2,c
 22498  009320  0012               	return	
 22499                           
 22500                           ;main.c: 374: processOctave();
 22501  009322  EC54  F01B         	call	_processOctave	;wreg free
 22502                           
 22503                           ;main.c: 375: processDrumpad();
 22504  009326  EC6E  F011         	call	_processDrumpad	;wreg free
 22505                           
 22506                           ;main.c: 376: drum_button_state_last = drum_button_state_now;
 22507  00932A  C038  F037         	movff	_drum_button_state_now,_drum_button_state_last
 22508  00932E  0012               	return	
 22509  009330                     __end_of_digitalInputs:
 22510                           	opt stack 0
 22511                           tblptru	equ	0xFF8
 22512                           tblptrh	equ	0xFF7
 22513                           tblptrl	equ	0xFF6
 22514                           tablat	equ	0xFF5
 22515                           prodh	equ	0xFF4
 22516                           prodl	equ	0xFF3
 22517                           intcon	equ	0xFF2
 22518                           intcon2	equ	0xFF1
 22519                           postinc0	equ	0xFEE
 22520                           wreg	equ	0xFE8
 22521                           postinc1	equ	0xFE6
 22522                           plusw1	equ	0xFE3
 22523                           fsr1h	equ	0xFE2
 22524                           fsr1l	equ	0xFE1
 22525                           indf2	equ	0xFDF
 22526                           postinc2	equ	0xFDE
 22527                           postdec2	equ	0xFDD
 22528                           plusw2	equ	0xFDB
 22529                           fsr2h	equ	0xFDA
 22530                           fsr2l	equ	0xFD9
 22531                           status	equ	0xFD8
 22532                           
 22533 ;; *************** function _processOctave *****************
 22534 ;; Defined at:
 22535 ;;		line 280 in file "octave.c"
 22536 ;; Parameters:    Size  Location     Type
 22537 ;;		None
 22538 ;; Auto vars:     Size  Location     Type
 22539 ;;		None
 22540 ;; Return value:  Size  Location     Type
 22541 ;;                  1    wreg      void 
 22542 ;; Registers used:
 22543 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22544 ;; Tracked objects:
 22545 ;;		On entry : 0/0
 22546 ;;		On exit  : 0/0
 22547 ;;		Unchanged: 0/0
 22548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 22549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22551 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22552 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 22553 ;;Total ram usage:        2 bytes
 22554 ;; Hardware stack levels used:    1
 22555 ;; Hardware stack levels required when called:   13
 22556 ;; This function calls:
 22557 ;;		___awmod
 22558 ;;		___wmul
 22559 ;;		_doTheLatch
 22560 ;;		_doTheUnLatch
 22561 ;;		_key_press_release_note_off
 22562 ;;		_printThisNumber
 22563 ;;		_random_pitches
 22564 ;;		_random_pitches_non_repeating
 22565 ;;		_resetArpeggio
 22566 ;;		_strcpy
 22567 ;;		_wait_one_pulse
 22568 ;; This function is called by:
 22569 ;;		_digitalInputs
 22570 ;; This function uses a non-reentrant model
 22571 ;;
 22572                           
 22573                           	psect	text65
 22574  0036A8                     __ptext65:
 22575                           	opt stack 0
 22576  0036A8                     _processOctave:
 22577                           	opt stack 13
 22578                           
 22579                           ;octave.c: 285: if(ARPEGGIO_ON == 1) {
 22580                           
 22581                           ;incstack = 0
 22582  0036A8  AA04               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 22583  0036AA  D044               	goto	l2886
 22584                           
 22585                           ;octave.c: 289: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x01))
 22586  0036AC  0100               	movlb	0	; () banked
 22587  0036AE  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 22588                           
 22589                           ; BSR set to: 0
 22590  0036B0  A038               	btfss	_drum_button_state_now,0,c
 22591  0036B2  D002               	goto	l2881
 22592                           
 22593                           ; BSR set to: 0
 22594                           ;octave.c: 290: {
 22595                           ;octave.c: 297: doTheLatch();
 22596  0036B4  ECC8  F04C         	call	_doTheLatch	;wreg free
 22597  0036B8                     l2881:
 22598                           
 22599                           ;octave.c: 298: }
 22600                           ;octave.c: 302: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x02)) {
 22601  0036B8  0100               	movlb	0	; () banked
 22602  0036BA  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 22603                           
 22604                           ; BSR set to: 0
 22605  0036BC  A238               	btfss	_drum_button_state_now,1,c
 22606  0036BE  D002               	goto	l2882
 22607                           
 22608                           ; BSR set to: 0
 22609                           ;octave.c: 304: doTheUnLatch();
 22610  0036C0  EC0A  F029         	call	_doTheUnLatch	;wreg free
 22611  0036C4                     l2882:
 22612                           
 22613                           ;octave.c: 383: }
 22614                           ;octave.c: 387: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x04)){
 22615  0036C4  0100               	movlb	0	; () banked
 22616  0036C6  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 22617                           
 22618                           ; BSR set to: 0
 22619  0036C8  A438               	btfss	_drum_button_state_now,2,c
 22620  0036CA  D017               	goto	l2883
 22621                           
 22622                           ; BSR set to: 0
 22623                           ;octave.c: 390: if(ARPEGGIO_TYPE == RANDOM) {random_pitches();}
 22624  0036CC  0E05               	movlw	5
 22625  0036CE  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 22626  0036D0  B4D8               	btfsc	status,2,c
 22627                           
 22628                           ; BSR set to: 0
 22629  0036D2  ECD7  F045         	call	_random_pitches	;wreg free
 22630                           
 22631                           ;octave.c: 391: if(ARPEGGIO_TYPE == RANDOM_NON_REPEATING){random_pitches_non_repeating()
      +                          ;}
 22632  0036D6  0E04               	movlw	4
 22633  0036D8  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 22634  0036DA  B4D8               	btfsc	status,2,c
 22635  0036DC  ECB4  F03C         	call	_random_pitches_non_repeating	;wreg free
 22636                           
 22637                           ;octave.c: 393: DISPLAY_MODE = 1;
 22638  0036E0  0E01               	movlw	1
 22639  0036E2  0100               	movlb	0	; () banked
 22640  0036E4  6FEF               	movwf	_DISPLAY_MODE& (0+255),b
 22641                           
 22642                           ; BSR set to: 0
 22643                           ;octave.c: 394: strcpy(string_to_display, "rAnd");
 22644  0036E6  0EFB               	movlw	low _string_to_display
 22645  0036E8  6F60               	movwf	strcpy@to& (0+255),b
 22646  0036EA  0E01               	movlw	high _string_to_display
 22647  0036EC  6F61               	movwf	(strcpy@to+1)& (0+255),b
 22648  0036EE  0EEB               	movlw	low STR_6
 22649  0036F0  6F62               	movwf	strcpy@from& (0+255),b
 22650  0036F2  0EFF               	movlw	high STR_6
 22651  0036F4  6F63               	movwf	(strcpy@from+1)& (0+255),b
 22652  0036F6  ECE4  F04B         	call	_strcpy	;wreg free
 22653  0036FA                     l2883:
 22654                           
 22655                           ;octave.c: 396: }
 22656                           ;octave.c: 400: if((button_state_now & 0x08000000) && (drum_button_state_now & 0x08)){
 22657  0036FA  0100               	movlb	0	; () banked
 22658  0036FC  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 22659                           
 22660                           ; BSR set to: 0
 22661  0036FE  A638               	btfss	_drum_button_state_now,3,c
 22662  003700  D019               	goto	l2886
 22663                           
 22664                           ; BSR set to: 0
 22665                           ;octave.c: 403: wait_one_pulse(LAST_NOTE_MODE_RESET);
 22666  003702  0E00               	movlw	0
 22667  003704  B003               	btfsc	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 22668  003706  0E01               	movlw	1
 22669  003708  EC43  F04C         	call	_wait_one_pulse
 22670                           
 22671                           ;octave.c: 404: note_off_was_sent = 1;
 22672  00370C  8052               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 22673                           
 22674                           ;octave.c: 405: key_press_release_note_off();
 22675  00370E  ECA7  F02E         	call	_key_press_release_note_off	;wreg free
 22676                           
 22677                           ;octave.c: 408: resetArpeggio();
 22678  003712  ECE3  F04A         	call	_resetArpeggio	;wreg free
 22679                           
 22680                           ;octave.c: 411: TIMER_OVERFLOWS = 0;
 22681  003716  0E00               	movlw	0
 22682  003718  6E2D               	movwf	_TIMER_OVERFLOWS,c
 22683                           
 22684                           ;octave.c: 413: DISPLAY_MODE = 1;
 22685  00371A  0E01               	movlw	1
 22686  00371C  0100               	movlb	0	; () banked
 22687  00371E  6FEF               	movwf	_DISPLAY_MODE& (0+255),b
 22688                           
 22689                           ; BSR set to: 0
 22690                           ;octave.c: 414: strcpy(string_to_display, "rSEt");
 22691  003720  0EFB               	movlw	low _string_to_display
 22692  003722  6F60               	movwf	strcpy@to& (0+255),b
 22693  003724  0E01               	movlw	high _string_to_display
 22694  003726  6F61               	movwf	(strcpy@to+1)& (0+255),b
 22695  003728  0EF5               	movlw	low STR_7
 22696  00372A  6F62               	movwf	strcpy@from& (0+255),b
 22697  00372C  0EFF               	movlw	high STR_7
 22698  00372E  6F63               	movwf	(strcpy@from+1)& (0+255),b
 22699  003730  ECE4  F04B         	call	_strcpy	;wreg free
 22700  003734                     l2886:
 22701                           
 22702                           ;octave.c: 415: }
 22703                           ;octave.c: 416: }
 22704                           ;octave.c: 419: if(button_state_now == 0x04000000){
 22705  003734  0E04               	movlw	4
 22706  003736  0100               	movlb	0	; () banked
 22707  003738  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 22708  00373A  11D9               	iorwf	_button_state_now& (0+255),w,b
 22709  00373C  11DA               	iorwf	(_button_state_now+1)& (0+255),w,b
 22710  00373E  11DB               	iorwf	(_button_state_now+2)& (0+255),w,b
 22711  003740  A4D8               	btfss	status,2,c
 22712  003742  D03D               	goto	l2888
 22713                           
 22714                           ; BSR set to: 0
 22715                           ;octave.c: 420: if ((octave * 12 + semitone) <= 60) {
 22716  003744  C03A  F07E         	movff	_semitone,??_processOctave
 22717  003748  6B7F               	clrf	(??_processOctave+1)& (0+255),b
 22718  00374A  BF7E               	btfsc	??_processOctave& (0+255),7,b
 22719  00374C  077F               	decf	(??_processOctave+1)& (0+255),f,b
 22720  00374E  504F               	movf	_octave,w,c
 22721  003750  6F60               	movwf	___wmul@multiplier& (0+255),b
 22722  003752  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 22723  003754  BF60               	btfsc	___wmul@multiplier& (0+255),7,b
 22724  003756  0761               	decf	(___wmul@multiplier+1)& (0+255),f,b
 22725  003758  0E00               	movlw	0
 22726  00375A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22727  00375C  0E0C               	movlw	12
 22728  00375E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22729  003760  EC80  F04C         	call	___wmul	;wreg free
 22730  003764  0100               	movlb	0	; () banked
 22731  003766  517E               	movf	??_processOctave& (0+255),w,b
 22732  003768  2760               	addwf	?___wmul& (0+255),f,b
 22733  00376A  517F               	movf	(??_processOctave+1)& (0+255),w,b
 22734  00376C  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22735  00376E  BF61               	btfsc	(?___wmul+1)& (0+255),7,b
 22736  003770  D006               	goto	u54630
 22737  003772  5161               	movf	(?___wmul+1)& (0+255),w,b
 22738  003774  E124               	bnz	l30402
 22739  003776  0E3D               	movlw	61
 22740  003778  5D60               	subwf	?___wmul& (0+255),w,b
 22741  00377A  B0D8               	btfsc	status,0,c
 22742  00377C  D020               	goto	l2888
 22743  00377E                     u54630:
 22744                           
 22745                           ; BSR set to: 0
 22746                           ;octave.c: 423: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 22747  00377E  A404               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 22748  003780  D00E               	goto	l2889
 22749                           
 22750                           ; BSR set to: 0
 22751  003782  502E               	movf	_NUM_NOTES_PRESSED,w,c
 22752  003784  B4D8               	btfsc	status,2,c
 22753  003786  D00B               	goto	l2889
 22754                           
 22755                           ; BSR set to: 0
 22756                           ;octave.c: 426: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 22757  003788  0E00               	movlw	0
 22758  00378A  B203               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 22759  00378C  0E01               	movlw	1
 22760  00378E  EC43  F04C         	call	_wait_one_pulse
 22761                           
 22762                           ;octave.c: 430: if(note_off_was_sent == 0) {key_press_release_note_off();}
 22763  003792  A052               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 22764  003794  ECA7  F02E         	call	_key_press_release_note_off	;wreg free
 22765                           
 22766                           ;octave.c: 433: suppress_note_off = 1;
 22767  003798  8A02               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 22768                           
 22769                           ;octave.c: 435: flag1 = 1;
 22770  00379A  8402               	bsf	_flag1/(0+8),_flag1& (0+7),c
 22771                           
 22772                           ;octave.c: 436: flag2 = 1;
 22773  00379C  8202               	bsf	_flag2/(0+8),_flag2& (0+7),c
 22774  00379E                     l2889:
 22775                           
 22776                           ;octave.c: 437: }
 22777                           ;octave.c: 439: octave++;
 22778  00379E  2A4F               	incf	_octave,f,c
 22779                           
 22780                           ;octave.c: 440: if (octave > 7) {octave = 7;}
 22781  0037A0  504F               	movf	_octave,w,c
 22782  0037A2  0A80               	xorlw	128
 22783  0037A4  0F78               	addlw	-136
 22784  0037A6  A0D8               	btfss	status,0,c
 22785  0037A8  D002               	goto	l2891
 22786  0037AA  0E07               	movlw	7
 22787  0037AC  6E4F               	movwf	_octave,c
 22788  0037AE                     l2891:
 22789                           
 22790                           ;octave.c: 442: printThisNumber(octave);
 22791  0037AE  504F               	movf	_octave,w,c
 22792  0037B0  0100               	movlb	0	; () banked
 22793  0037B2  6F60               	movwf	printThisNumber@n& (0+255),b
 22794  0037B4  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 22795  0037B6  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 22796  0037B8  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 22797  0037BA  EC22  F04D         	call	_printThisNumber	;wreg free
 22798  0037BE                     l2888:
 22799  0037BE                     l30402:
 22800                           
 22801                           ;octave.c: 443: }
 22802                           ;octave.c: 444: }
 22803                           ;octave.c: 447: if(button_state_now == 0x02000000){
 22804  0037BE  0E02               	movlw	2
 22805  0037C0  0100               	movlb	0	; () banked
 22806  0037C2  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 22807  0037C4  11D9               	iorwf	_button_state_now& (0+255),w,b
 22808  0037C6  11DA               	iorwf	(_button_state_now+1)& (0+255),w,b
 22809  0037C8  11DB               	iorwf	(_button_state_now+2)& (0+255),w,b
 22810  0037CA  A4D8               	btfss	status,2,c
 22811  0037CC  D03A               	goto	l2893
 22812                           
 22813                           ; BSR set to: 0
 22814                           ;octave.c: 448: if ((octave * 12 + semitone) >= 12) {
 22815  0037CE  C03A  F07E         	movff	_semitone,??_processOctave
 22816  0037D2  6B7F               	clrf	(??_processOctave+1)& (0+255),b
 22817  0037D4  BF7E               	btfsc	??_processOctave& (0+255),7,b
 22818  0037D6  077F               	decf	(??_processOctave+1)& (0+255),f,b
 22819  0037D8  504F               	movf	_octave,w,c
 22820  0037DA  6F60               	movwf	___wmul@multiplier& (0+255),b
 22821  0037DC  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 22822  0037DE  BF60               	btfsc	___wmul@multiplier& (0+255),7,b
 22823  0037E0  0761               	decf	(___wmul@multiplier+1)& (0+255),f,b
 22824  0037E2  0E00               	movlw	0
 22825  0037E4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22826  0037E6  0E0C               	movlw	12
 22827  0037E8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22828  0037EA  EC80  F04C         	call	___wmul	;wreg free
 22829  0037EE  0100               	movlb	0	; () banked
 22830  0037F0  517E               	movf	??_processOctave& (0+255),w,b
 22831  0037F2  2760               	addwf	?___wmul& (0+255),f,b
 22832  0037F4  517F               	movf	(??_processOctave+1)& (0+255),w,b
 22833  0037F6  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22834  0037F8  BF61               	btfsc	(?___wmul+1)& (0+255),7,b
 22835  0037FA  D023               	goto	l2893
 22836  0037FC  5161               	movf	(?___wmul+1)& (0+255),w,b
 22837  0037FE  E104               	bnz	u54690
 22838  003800  0E0C               	movlw	12
 22839  003802  5D60               	subwf	?___wmul& (0+255),w,b
 22840  003804  A0D8               	btfss	status,0,c
 22841  003806  D01D               	goto	l2893
 22842  003808                     u54690:
 22843                           
 22844                           ; BSR set to: 0
 22845                           ;octave.c: 451: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 22846  003808  A404               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 22847  00380A  D00E               	goto	l2894
 22848                           
 22849                           ; BSR set to: 0
 22850  00380C  502E               	movf	_NUM_NOTES_PRESSED,w,c
 22851  00380E  B4D8               	btfsc	status,2,c
 22852  003810  D00B               	goto	l2894
 22853                           
 22854                           ; BSR set to: 0
 22855                           ;octave.c: 454: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 22856  003812  0E00               	movlw	0
 22857  003814  B203               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 22858  003816  0E01               	movlw	1
 22859  003818  EC43  F04C         	call	_wait_one_pulse
 22860                           
 22861                           ;octave.c: 458: if(note_off_was_sent == 0) {key_press_release_note_off();}
 22862  00381C  A052               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 22863  00381E  ECA7  F02E         	call	_key_press_release_note_off	;wreg free
 22864                           
 22865                           ;octave.c: 461: suppress_note_off = 1;
 22866  003822  8A02               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 22867                           
 22868                           ;octave.c: 463: flag1 = 1;
 22869  003824  8402               	bsf	_flag1/(0+8),_flag1& (0+7),c
 22870                           
 22871                           ;octave.c: 465: flag2 = 1;
 22872  003826  8202               	bsf	_flag2/(0+8),_flag2& (0+7),c
 22873  003828                     l2894:
 22874                           
 22875                           ;octave.c: 466: }
 22876                           ;octave.c: 468: octave--;
 22877  003828  064F               	decf	_octave,f,c
 22878                           
 22879                           ;octave.c: 469: if (octave < 0) {octave = 0;}
 22880  00382A  AE4F               	btfss	_octave,7,c
 22881  00382C  D002               	goto	l2896
 22882  00382E  0E00               	movlw	0
 22883  003830  6E4F               	movwf	_octave,c
 22884  003832                     l2896:
 22885                           
 22886                           ;octave.c: 471: printThisNumber(octave);
 22887  003832  504F               	movf	_octave,w,c
 22888  003834  0100               	movlb	0	; () banked
 22889  003836  6F60               	movwf	printThisNumber@n& (0+255),b
 22890  003838  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 22891  00383A  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 22892  00383C  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 22893  00383E  EC22  F04D         	call	_printThisNumber	;wreg free
 22894  003842                     l2893:
 22895                           
 22896                           ;octave.c: 473: }
 22897                           ;octave.c: 474: }
 22898                           ;octave.c: 480: if(button_state_now == (0x04000000 | 0x08000000)){
 22899  003842  0E0C               	movlw	12
 22900  003844  0100               	movlb	0	; () banked
 22901  003846  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 22902  003848  11D9               	iorwf	_button_state_now& (0+255),w,b
 22903  00384A  11DA               	iorwf	(_button_state_now+1)& (0+255),w,b
 22904  00384C  11DB               	iorwf	(_button_state_now+2)& (0+255),w,b
 22905  00384E  A4D8               	btfss	status,2,c
 22906  003850  D055               	goto	l2898
 22907                           
 22908                           ; BSR set to: 0
 22909                           ;octave.c: 482: if ((octave * 12 + semitone) < 72) {
 22910  003852  C03A  F07E         	movff	_semitone,??_processOctave
 22911  003856  6B7F               	clrf	(??_processOctave+1)& (0+255),b
 22912  003858  BF7E               	btfsc	??_processOctave& (0+255),7,b
 22913  00385A  077F               	decf	(??_processOctave+1)& (0+255),f,b
 22914  00385C  504F               	movf	_octave,w,c
 22915  00385E  6F60               	movwf	___wmul@multiplier& (0+255),b
 22916  003860  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 22917  003862  BF60               	btfsc	___wmul@multiplier& (0+255),7,b
 22918  003864  0761               	decf	(___wmul@multiplier+1)& (0+255),f,b
 22919  003866  0E00               	movlw	0
 22920  003868  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22921  00386A  0E0C               	movlw	12
 22922  00386C  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22923  00386E  EC80  F04C         	call	___wmul	;wreg free
 22924  003872  0100               	movlb	0	; () banked
 22925  003874  517E               	movf	??_processOctave& (0+255),w,b
 22926  003876  2760               	addwf	?___wmul& (0+255),f,b
 22927  003878  517F               	movf	(??_processOctave+1)& (0+255),w,b
 22928  00387A  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22929  00387C  BF61               	btfsc	(?___wmul+1)& (0+255),7,b
 22930  00387E  D006               	goto	u54750
 22931  003880  5161               	movf	(?___wmul+1)& (0+255),w,b
 22932  003882  E13C               	bnz	l30464
 22933  003884  0E48               	movlw	72
 22934  003886  5D60               	subwf	?___wmul& (0+255),w,b
 22935  003888  B0D8               	btfsc	status,0,c
 22936  00388A  D038               	goto	l2898
 22937  00388C                     u54750:
 22938                           
 22939                           ; BSR set to: 0
 22940                           ;octave.c: 485: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 22941  00388C  A404               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 22942  00388E  D00E               	goto	l2899
 22943                           
 22944                           ; BSR set to: 0
 22945  003890  502E               	movf	_NUM_NOTES_PRESSED,w,c
 22946  003892  B4D8               	btfsc	status,2,c
 22947  003894  D00B               	goto	l2899
 22948                           
 22949                           ; BSR set to: 0
 22950                           ;octave.c: 488: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 22951  003896  0E00               	movlw	0
 22952  003898  B203               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 22953  00389A  0E01               	movlw	1
 22954  00389C  EC43  F04C         	call	_wait_one_pulse
 22955                           
 22956                           ;octave.c: 492: if(note_off_was_sent == 0) {key_press_release_note_off();}
 22957  0038A0  A052               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 22958  0038A2  ECA7  F02E         	call	_key_press_release_note_off	;wreg free
 22959                           
 22960                           ;octave.c: 495: suppress_note_off = 1;
 22961  0038A6  8A02               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 22962                           
 22963                           ;octave.c: 497: flag1 = 1;
 22964  0038A8  8402               	bsf	_flag1/(0+8),_flag1& (0+7),c
 22965                           
 22966                           ;octave.c: 498: flag2 = 1;
 22967  0038AA  8202               	bsf	_flag2/(0+8),_flag2& (0+7),c
 22968  0038AC                     l2899:
 22969                           
 22970                           ;octave.c: 499: }
 22971                           ;octave.c: 501: if (TRANSPOSE_MODE == 0) {
 22972  0038AC  BE04               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 22973  0038AE  D008               	goto	l2902
 22974                           
 22975                           ;octave.c: 502: semitone++;
 22976  0038B0  2A3A               	incf	_semitone,f,c
 22977                           
 22978                           ;octave.c: 503: if (semitone > 12) {semitone = 12;}
 22979  0038B2  503A               	movf	_semitone,w,c
 22980  0038B4  0A80               	xorlw	128
 22981  0038B6  0F73               	addlw	-141
 22982  0038B8  A0D8               	btfss	status,0,c
 22983  0038BA  D002               	goto	l2902
 22984  0038BC  0E0C               	movlw	12
 22985  0038BE  6E3A               	movwf	_semitone,c
 22986  0038C0                     l2902:
 22987                           
 22988                           ;octave.c: 504: }
 22989                           ;octave.c: 506: if (TRANSPOSE_MODE == 1) {
 22990  0038C0  AE04               	btfss	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 22991  0038C2  D014               	goto	l2903
 22992                           
 22993                           ;octave.c: 507: semitone = (semitone +=7) % 12;
 22994  0038C4  0E0C               	movlw	12
 22995  0038C6  6EE6               	movwf	postinc1,c
 22996  0038C8  0E00               	movlw	0
 22997  0038CA  6EE6               	movwf	postinc1,c
 22998  0038CC  0E07               	movlw	7
 22999  0038CE  263A               	addwf	_semitone,f,c
 23000  0038D0  C03A  F07E         	movff	_semitone,??_processOctave
 23001  0038D4  0100               	movlb	0	; () banked
 23002  0038D6  6B7F               	clrf	(??_processOctave+1)& (0+255),b
 23003  0038D8  BF7E               	btfsc	??_processOctave& (0+255),7,b
 23004  0038DA  077F               	decf	(??_processOctave+1)& (0+255),f,b
 23005  0038DC  C07E  FFE6         	movff	??_processOctave,postinc1
 23006  0038E0  C07F  FFE6         	movff	??_processOctave+1,postinc1
 23007  0038E4  ECA8  F034         	call	___awmod	;wreg free
 23008  0038E8  503E               	movf	btemp,w,c
 23009  0038EA  6E3A               	movwf	_semitone,c
 23010  0038EC                     l2903:
 23011                           
 23012                           ;octave.c: 508: }
 23013                           ;octave.c: 510: printThisNumber(semitone);
 23014  0038EC  503A               	movf	_semitone,w,c
 23015  0038EE  0100               	movlb	0	; () banked
 23016  0038F0  6F60               	movwf	printThisNumber@n& (0+255),b
 23017  0038F2  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 23018  0038F4  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 23019  0038F6  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 23020  0038F8  EC22  F04D         	call	_printThisNumber	;wreg free
 23021  0038FC                     l2898:
 23022  0038FC                     l30464:
 23023                           
 23024                           ;octave.c: 511: }
 23025                           ;octave.c: 512: }
 23026                           ;octave.c: 515: if(button_state_now == (0x02000000 | 0x08000000)){
 23027  0038FC  0E0A               	movlw	10
 23028  0038FE  0100               	movlb	0	; () banked
 23029  003900  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 23030  003902  11D9               	iorwf	_button_state_now& (0+255),w,b
 23031  003904  11DA               	iorwf	(_button_state_now+1)& (0+255),w,b
 23032  003906  11DB               	iorwf	(_button_state_now+2)& (0+255),w,b
 23033  003908  A4D8               	btfss	status,2,c
 23034  00390A  0012               	return	
 23035                           
 23036                           ; BSR set to: 0
 23037                           ;octave.c: 517: if ((octave * 12 + semitone) > 0 ) {
 23038  00390C  C03A  F07E         	movff	_semitone,??_processOctave
 23039  003910  6B7F               	clrf	(??_processOctave+1)& (0+255),b
 23040  003912  BF7E               	btfsc	??_processOctave& (0+255),7,b
 23041  003914  077F               	decf	(??_processOctave+1)& (0+255),f,b
 23042  003916  504F               	movf	_octave,w,c
 23043  003918  6F60               	movwf	___wmul@multiplier& (0+255),b
 23044  00391A  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 23045  00391C  BF60               	btfsc	___wmul@multiplier& (0+255),7,b
 23046  00391E  0761               	decf	(___wmul@multiplier+1)& (0+255),f,b
 23047  003920  0E00               	movlw	0
 23048  003922  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23049  003924  0E0C               	movlw	12
 23050  003926  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23051  003928  EC80  F04C         	call	___wmul	;wreg free
 23052  00392C  0100               	movlb	0	; () banked
 23053  00392E  517E               	movf	??_processOctave& (0+255),w,b
 23054  003930  2760               	addwf	?___wmul& (0+255),f,b
 23055  003932  517F               	movf	(??_processOctave+1)& (0+255),w,b
 23056  003934  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 23057  003936  BF61               	btfsc	(?___wmul+1)& (0+255),7,b
 23058  003938  0012               	return	
 23059  00393A  5161               	movf	(?___wmul+1)& (0+255),w,b
 23060  00393C  E103               	bnz	u54830
 23061  00393E  0560               	decf	?___wmul& (0+255),w,b
 23062  003940  A0D8               	btfss	status,0,c
 23063  003942  0012               	return	
 23064  003944                     u54830:
 23065                           
 23066                           ; BSR set to: 0
 23067                           ;octave.c: 521: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 23068  003944  A404               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 23069  003946  D00E               	goto	l2906
 23070                           
 23071                           ; BSR set to: 0
 23072  003948  502E               	movf	_NUM_NOTES_PRESSED,w,c
 23073  00394A  B4D8               	btfsc	status,2,c
 23074  00394C  D00B               	goto	l2906
 23075                           
 23076                           ; BSR set to: 0
 23077                           ;octave.c: 524: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 23078  00394E  0E00               	movlw	0
 23079  003950  B203               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 23080  003952  0E01               	movlw	1
 23081  003954  EC43  F04C         	call	_wait_one_pulse
 23082                           
 23083                           ;octave.c: 528: if(note_off_was_sent == 0) {key_press_release_note_off();}
 23084  003958  A052               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 23085  00395A  ECA7  F02E         	call	_key_press_release_note_off	;wreg free
 23086                           
 23087                           ;octave.c: 531: suppress_note_off = 1;
 23088  00395E  8A02               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 23089                           
 23090                           ;octave.c: 533: flag1 = 1;
 23091  003960  8402               	bsf	_flag1/(0+8),_flag1& (0+7),c
 23092                           
 23093                           ;octave.c: 534: flag2 = 1;
 23094  003962  8202               	bsf	_flag2/(0+8),_flag2& (0+7),c
 23095  003964                     l2906:
 23096                           
 23097                           ;octave.c: 535: }
 23098                           ;octave.c: 537: if (TRANSPOSE_MODE == 0) {
 23099  003964  BE04               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 23100  003966  D008               	goto	l2909
 23101                           
 23102                           ;octave.c: 538: semitone--;
 23103  003968  063A               	decf	_semitone,f,c
 23104                           
 23105                           ;octave.c: 539: if (semitone < -12) {semitone = -12;}
 23106  00396A  503A               	movf	_semitone,w,c
 23107  00396C  0A80               	xorlw	128
 23108  00396E  0F8C               	addlw	140
 23109  003970  B0D8               	btfsc	status,0,c
 23110  003972  D002               	goto	l2909
 23111  003974  0EF4               	movlw	244
 23112  003976  6E3A               	movwf	_semitone,c
 23113  003978                     l2909:
 23114                           
 23115                           ;octave.c: 540: }
 23116                           ;octave.c: 542: if (TRANSPOSE_MODE == 1) {
 23117  003978  AE04               	btfss	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 23118  00397A  D014               	goto	l2910
 23119                           
 23120                           ;octave.c: 543: semitone = (semitone -=7) % 12;
 23121  00397C  0E0C               	movlw	12
 23122  00397E  6EE6               	movwf	postinc1,c
 23123  003980  0E00               	movlw	0
 23124  003982  6EE6               	movwf	postinc1,c
 23125  003984  0EF9               	movlw	249
 23126  003986  263A               	addwf	_semitone,f,c
 23127  003988  C03A  F07E         	movff	_semitone,??_processOctave
 23128  00398C  0100               	movlb	0	; () banked
 23129  00398E  6B7F               	clrf	(??_processOctave+1)& (0+255),b
 23130  003990  BF7E               	btfsc	??_processOctave& (0+255),7,b
 23131  003992  077F               	decf	(??_processOctave+1)& (0+255),f,b
 23132  003994  C07E  FFE6         	movff	??_processOctave,postinc1
 23133  003998  C07F  FFE6         	movff	??_processOctave+1,postinc1
 23134  00399C  ECA8  F034         	call	___awmod	;wreg free
 23135  0039A0  503E               	movf	btemp,w,c
 23136  0039A2  6E3A               	movwf	_semitone,c
 23137  0039A4                     l2910:
 23138                           
 23139                           ;octave.c: 544: }
 23140                           ;octave.c: 546: printThisNumber(semitone);
 23141  0039A4  503A               	movf	_semitone,w,c
 23142  0039A6  0100               	movlb	0	; () banked
 23143  0039A8  6F60               	movwf	printThisNumber@n& (0+255),b
 23144  0039AA  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 23145  0039AC  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 23146  0039AE  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 23147  0039B0  EC22  F04D         	call	_printThisNumber	;wreg free
 23148  0039B4  0012               	return	
 23149  0039B6                     __end_of_processOctave:
 23150                           	opt stack 0
 23151                           tblptru	equ	0xFF8
 23152                           tblptrh	equ	0xFF7
 23153                           tblptrl	equ	0xFF6
 23154                           tablat	equ	0xFF5
 23155                           prodh	equ	0xFF4
 23156                           prodl	equ	0xFF3
 23157                           intcon	equ	0xFF2
 23158                           intcon2	equ	0xFF1
 23159                           postinc0	equ	0xFEE
 23160                           wreg	equ	0xFE8
 23161                           postinc1	equ	0xFE6
 23162                           plusw1	equ	0xFE3
 23163                           fsr1h	equ	0xFE2
 23164                           fsr1l	equ	0xFE1
 23165                           indf2	equ	0xFDF
 23166                           postinc2	equ	0xFDE
 23167                           postdec2	equ	0xFDD
 23168                           plusw2	equ	0xFDB
 23169                           fsr2h	equ	0xFDA
 23170                           fsr2l	equ	0xFD9
 23171                           status	equ	0xFD8
 23172                           
 23173 ;; *************** function _doTheUnLatch *****************
 23174 ;; Defined at:
 23175 ;;		line 200 in file "octave.c"
 23176 ;; Parameters:    Size  Location     Type
 23177 ;;		None
 23178 ;; Auto vars:     Size  Location     Type
 23179 ;;		None
 23180 ;; Return value:  Size  Location     Type
 23181 ;;                  1    wreg      void 
 23182 ;; Registers used:
 23183 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23184 ;; Tracked objects:
 23185 ;;		On entry : 0/0
 23186 ;;		On exit  : 0/0
 23187 ;;		Unchanged: 0/0
 23188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23191 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23192 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23193 ;;Total ram usage:        4 bytes
 23194 ;; Hardware stack levels used:    1
 23195 ;; Hardware stack levels required when called:   12
 23196 ;; This function calls:
 23197 ;;		_playThisNote
 23198 ;;		_playThisNote8
 23199 ;;		_playThisNotePentatonic
 23200 ;;		_strcpy
 23201 ;; This function is called by:
 23202 ;;		_processOctave
 23203 ;;		_Function_H_1
 23204 ;;		_Function_H_6_1
 23205 ;; This function uses a non-reentrant model
 23206 ;;
 23207                           
 23208                           	psect	text66
 23209  005214                     __ptext66:
 23210                           	opt stack 0
 23211  005214                     _doTheUnLatch:
 23212                           	opt stack 13
 23213                           
 23214                           ;octave.c: 202: LATCH = 0;
 23215                           
 23216                           ;incstack = 0
 23217  005214  9404               	bcf	_LATCH/(0+8),_LATCH& (0+7),c
 23218                           
 23219                           ;octave.c: 203: ON_OFF = 0;
 23220  005216  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23221                           
 23222                           ;octave.c: 207: if(NUM_NOTES_PRESSED > 0) {
 23223  005218  502E               	movf	_NUM_NOTES_PRESSED,w,c
 23224  00521A  B4D8               	btfsc	status,2,c
 23225  00521C  D07F               	goto	l2848
 23226                           
 23227                           ;octave.c: 209: static __bit once;
 23228                           ;octave.c: 211: parallel = 25;
 23229  00521E  0E19               	movlw	25
 23230  005220  6E2F               	movwf	_parallel,c
 23231                           
 23232                           ;octave.c: 214: if ((KEYBOARD_MODE == CHROMATIC) || KEYBOARD_MODE == TRIAD || KEYBOARD_M
      +                          ODE == SEVENTH){
 23233  005222  0100               	movlb	0	; () banked
 23234  005224  51F3               	movf	_KEYBOARD_MODE& (0+255),w,b
 23235  005226  B4D8               	btfsc	status,2,c
 23236  005228  D008               	goto	u51370
 23237                           
 23238                           ; BSR set to: 0
 23239  00522A  0E06               	movlw	6
 23240  00522C  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23241  00522E  B4D8               	btfsc	status,2,c
 23242  005230  D004               	goto	u51370
 23243                           
 23244                           ; BSR set to: 0
 23245  005232  0E09               	movlw	9
 23246  005234  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23247  005236  A4D8               	btfss	status,2,c
 23248  005238  D03D               	goto	l2860
 23249  00523A                     u51370:
 23250                           
 23251                           ; BSR set to: 0
 23252                           ;octave.c: 216: if((ARPEGGIO_TYPE == AS_PRESSED) || (ARPEGGIO_TYPE == RANDOM) || (ARPEGG
      +                          IO_TYPE == RANDOM_NON_REPEATING) && (once == 0)){
 23253                           
 23254                           ; BSR set to: 0
 23255  00523A  0E06               	movlw	6
 23256  00523C  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 23257  00523E  B4D8               	btfsc	status,2,c
 23258  005240  D009               	goto	u51410
 23259                           
 23260                           ; BSR set to: 0
 23261  005242  0E05               	movlw	5
 23262  005244  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 23263  005246  B4D8               	btfsc	status,2,c
 23264  005248  D005               	goto	u51410
 23265                           
 23266                           ; BSR set to: 0
 23267  00524A  0E04               	movlw	4
 23268  00524C  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 23269  00524E  B4D8               	btfsc	status,2,c
 23270                           
 23271                           ; BSR set to: 0
 23272  005250  B801               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23273  005252  D005               	goto	l2854
 23274  005254                     u51410:
 23275                           
 23276                           ; BSR set to: 0
 23277                           ;octave.c: 217: playThisNote(ARPEGGIO[0]);
 23278                           
 23279                           ; BSR set to: 0
 23280  005254  0101               	movlb	1	; () banked
 23281  005256  5184               	movf	_ARPEGGIO& (0+255),w,b
 23282  005258  EC26  F034         	call	_playThisNote
 23283                           
 23284                           ;octave.c: 218: once = 1;
 23285  00525C  8801               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23286  00525E                     l2854:
 23287                           
 23288                           ;octave.c: 219: }
 23289                           ;octave.c: 220: if((ARPEGGIO_TYPE == UP) || (ARPEGGIO_TYPE == UP_DOWN) && (once == 0)){
 23290  00525E  5034               	movf	_ARPEGGIO_TYPE,w,c
 23291  005260  B4D8               	btfsc	status,2,c
 23292  005262  D005               	goto	u51440
 23293  005264  0E02               	movlw	2
 23294  005266  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 23295  005268  B4D8               	btfsc	status,2,c
 23296  00526A  B801               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23297  00526C  D005               	goto	l2857
 23298  00526E                     u51440:
 23299                           
 23300                           ;octave.c: 221: playThisNote(ARPEGGIO_SORTED[0]);
 23301  00526E  0102               	movlb	2	; () banked
 23302  005270  5178               	movf	_ARPEGGIO_SORTED& (0+255),w,b
 23303  005272  EC26  F034         	call	_playThisNote
 23304                           
 23305                           ;octave.c: 222: once = 1;
 23306  005276  8801               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23307  005278                     l2857:
 23308                           
 23309                           ;octave.c: 223: }
 23310                           ;octave.c: 224: if((ARPEGGIO_TYPE == DOWN) || (ARPEGGIO_TYPE == DOWN_UP) && (once == 0))
      +                          {
 23311  005278  0434               	decf	_ARPEGGIO_TYPE,w,c
 23312  00527A  B4D8               	btfsc	status,2,c
 23313  00527C  D005               	goto	u51470
 23314  00527E  0E03               	movlw	3
 23315  005280  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 23316  005282  B4D8               	btfsc	status,2,c
 23317  005284  B801               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23318  005286  D016               	goto	l2860
 23319  005288                     u51470:
 23320                           
 23321                           ;octave.c: 225: playThisNote(ARPEGGIO_SORTED[NUM_NOTES_PRESSED - 1]);
 23322  005288  0EFF               	movlw	255
 23323  00528A  0100               	movlb	0	; () banked
 23324  00528C  6F7A               	movwf	??_doTheUnLatch& (0+255),b
 23325  00528E  0EFF               	movlw	255
 23326  005290  6F7B               	movwf	(??_doTheUnLatch+1)& (0+255),b
 23327  005292  502E               	movf	_NUM_NOTES_PRESSED,w,c
 23328  005294  6F7C               	movwf	(??_doTheUnLatch+2)& (0+255),b
 23329  005296  6B7D               	clrf	(??_doTheUnLatch+3)& (0+255),b
 23330  005298  517A               	movf	??_doTheUnLatch& (0+255),w,b
 23331  00529A  277C               	addwf	(??_doTheUnLatch+2)& (0+255),f,b
 23332  00529C  517B               	movf	(??_doTheUnLatch+1)& (0+255),w,b
 23333  00529E  237D               	addwfc	(??_doTheUnLatch+3)& (0+255),f,b
 23334  0052A0  0E78               	movlw	low _ARPEGGIO_SORTED
 23335  0052A2  257C               	addwf	(??_doTheUnLatch+2)& (0+255),w,b
 23336  0052A4  6ED9               	movwf	fsr2l,c
 23337  0052A6  0E02               	movlw	high _ARPEGGIO_SORTED
 23338  0052A8  217D               	addwfc	(??_doTheUnLatch+3)& (0+255),w,b
 23339  0052AA  6EDA               	movwf	fsr2h,c
 23340  0052AC  50DF               	movf	indf2,w,c
 23341  0052AE  EC26  F034         	call	_playThisNote
 23342                           
 23343                           ;octave.c: 226: once = 1;
 23344  0052B2  8801               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23345  0052B4                     l2860:
 23346                           
 23347                           ;octave.c: 227: }
 23348                           ;octave.c: 228: }
 23349                           ;octave.c: 230: if ((KEYBOARD_MODE == MAJOR) || (KEYBOARD_MODE == MINOR) || (KEYBOARD_MO
      +                          DE == MODES) || (KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) || (KEYBOARD_MODE == DIATONIC_TR
      +                          IAD_MINOR)|| (KEYBOARD_MODE == DIATONIC_7TH_MAJOR) || (KEYBOARD_MODE == DIATONIC_7TH_MIN
      +                          OR
 23350  0052B4  0100               	movlb	0	; () banked
 23351  0052B6  05F3               	decf	_KEYBOARD_MODE& (0+255),w,b
 23352  0052B8  B4D8               	btfsc	status,2,c
 23353  0052BA  D019               	goto	u51550
 23354                           
 23355                           ; BSR set to: 0
 23356  0052BC  0E02               	movlw	2
 23357  0052BE  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23358  0052C0  B4D8               	btfsc	status,2,c
 23359  0052C2  D015               	goto	u51550
 23360                           
 23361                           ; BSR set to: 0
 23362  0052C4  0E03               	movlw	3
 23363  0052C6  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23364  0052C8  B4D8               	btfsc	status,2,c
 23365  0052CA  D011               	goto	u51550
 23366                           
 23367                           ; BSR set to: 0
 23368  0052CC  0E07               	movlw	7
 23369  0052CE  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23370  0052D0  B4D8               	btfsc	status,2,c
 23371  0052D2  D00D               	goto	u51550
 23372                           
 23373                           ; BSR set to: 0
 23374  0052D4  0E08               	movlw	8
 23375  0052D6  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23376  0052D8  B4D8               	btfsc	status,2,c
 23377  0052DA  D009               	goto	u51550
 23378                           
 23379                           ; BSR set to: 0
 23380  0052DC  0E0A               	movlw	10
 23381  0052DE  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23382  0052E0  B4D8               	btfsc	status,2,c
 23383  0052E2  D005               	goto	u51550
 23384                           
 23385                           ; BSR set to: 0
 23386  0052E4  0E0B               	movlw	11
 23387  0052E6  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23388  0052E8  B4D8               	btfsc	status,2,c
 23389                           
 23390                           ; BSR set to: 0
 23391  0052EA  B801               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23392  0052EC  D006               	goto	l2863
 23393  0052EE                     u51550:
 23394                           
 23395                           ; BSR set to: 0
 23396                           ;octave.c: 231: playThisNote8(0,0);
 23397                           
 23398                           ; BSR set to: 0
 23399  0052EE  0E00               	movlw	0
 23400  0052F0  6F71               	movwf	playThisNote8@index& (0+255),b
 23401  0052F2  0E00               	movlw	0
 23402  0052F4  ECF1  F013         	call	_playThisNote8
 23403                           
 23404                           ;octave.c: 232: once = 1;
 23405  0052F8  8801               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23406  0052FA                     l2863:
 23407                           
 23408                           ;octave.c: 233: }
 23409                           ;octave.c: 235: if ((KEYBOARD_MODE == PENTATONIC_MAJOR) || (KEYBOARD_MODE == PENTATONIC_
      +                          MINOR) && (once == 0)){
 23410  0052FA  0E04               	movlw	4
 23411  0052FC  0100               	movlb	0	; () banked
 23412  0052FE  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23413  005300  B4D8               	btfsc	status,2,c
 23414  005302  D005               	goto	u51580
 23415                           
 23416                           ; BSR set to: 0
 23417  005304  0E05               	movlw	5
 23418  005306  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23419  005308  B4D8               	btfsc	status,2,c
 23420                           
 23421                           ; BSR set to: 0
 23422  00530A  B801               	btfsc	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23423  00530C  D006               	goto	l2866
 23424  00530E                     u51580:
 23425                           
 23426                           ; BSR set to: 0
 23427                           ;octave.c: 236: playThisNotePentatonic(0,0);
 23428                           
 23429                           ; BSR set to: 0
 23430  00530E  0E00               	movlw	0
 23431  005310  6F71               	movwf	playThisNotePentatonic@index& (0+255),b
 23432  005312  0E00               	movlw	0
 23433  005314  ECBE  F02A         	call	_playThisNotePentatonic
 23434                           
 23435                           ;octave.c: 237: once = 1;
 23436  005318  8801               	bsf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23437  00531A                     l2866:
 23438                           
 23439                           ;octave.c: 238: }
 23440                           ;octave.c: 240: once = 0;
 23441  00531A  9801               	bcf	doTheUnLatch@once/(0+8),doTheUnLatch@once& (0+7),c
 23442  00531C                     l2848:
 23443                           
 23444                           ;octave.c: 241: }
 23445                           ;octave.c: 244: if((UN_LATCH_MODE == 1) && (latch_was_pressed == 1) && (NUM_NOTES_PRESSE
      +                          D > 1)){
 23446  00531C  B204               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 23447  00531E  AE03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 23448  005320  D010               	goto	l2869
 23449  005322  0E01               	movlw	1
 23450  005324  642E               	cpfsgt	_NUM_NOTES_PRESSED,c
 23451  005326  D00D               	goto	l2869
 23452                           
 23453                           ;octave.c: 245: DISPLAY_MODE = 1;
 23454  005328  0E01               	movlw	1
 23455  00532A  0100               	movlb	0	; () banked
 23456  00532C  6FEF               	movwf	_DISPLAY_MODE& (0+255),b
 23457                           
 23458                           ; BSR set to: 0
 23459                           ;octave.c: 246: strcpy(string_to_display, " dEL");
 23460  00532E  0EFB               	movlw	low _string_to_display
 23461  005330  6F60               	movwf	strcpy@to& (0+255),b
 23462  005332  0E01               	movlw	high _string_to_display
 23463  005334  6F61               	movwf	(strcpy@to+1)& (0+255),b
 23464  005336  0EE1               	movlw	low STR_2
 23465  005338  6F62               	movwf	strcpy@from& (0+255),b
 23466  00533A  0EFF               	movlw	high STR_2
 23467  00533C  6F63               	movwf	(strcpy@from+1)& (0+255),b
 23468  00533E  ECE4  F04B         	call	_strcpy	;wreg free
 23469  005342                     l2869:
 23470                           
 23471                           ;octave.c: 247: }
 23472                           ;octave.c: 251: if((UN_LATCH_MODE == 1) && (NUM_NOTES_PRESSED == 1)){
 23473  005342  A204               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 23474  005344  D010               	goto	l2870
 23475  005346  042E               	decf	_NUM_NOTES_PRESSED,w,c
 23476  005348  A4D8               	btfss	status,2,c
 23477  00534A  D00D               	goto	l2870
 23478                           
 23479                           ;octave.c: 252: DISPLAY_MODE = 1;
 23480  00534C  0E01               	movlw	1
 23481  00534E  0100               	movlb	0	; () banked
 23482  005350  6FEF               	movwf	_DISPLAY_MODE& (0+255),b
 23483                           
 23484                           ; BSR set to: 0
 23485                           ;octave.c: 253: strcpy(string_to_display, "LaSt");
 23486  005352  0EFB               	movlw	low _string_to_display
 23487  005354  6F60               	movwf	strcpy@to& (0+255),b
 23488  005356  0E01               	movlw	high _string_to_display
 23489  005358  6F61               	movwf	(strcpy@to+1)& (0+255),b
 23490  00535A  0EFA               	movlw	low STR_3
 23491  00535C  6F62               	movwf	strcpy@from& (0+255),b
 23492  00535E  0EFF               	movlw	high STR_3
 23493  005360  6F63               	movwf	(strcpy@from+1)& (0+255),b
 23494  005362  ECE4  F04B         	call	_strcpy	;wreg free
 23495  005366                     l2870:
 23496                           
 23497                           ;octave.c: 254: }
 23498                           ;octave.c: 258: if((AUTO_LATCH == 1) && (latch_was_pressed == 1) && ((UN_LATCH_MODE == 0
      +                          ) || (UN_LATCH_MODE == 1)) && (NUM_NOTES_PRESSED == 0)){
 23499  005366  B004               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 23500  005368  AE03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 23501  00536A  D018               	goto	l2871
 23502  00536C  A204               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 23503  00536E  D002               	goto	u51670
 23504  005370  A204               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 23505  005372  D014               	goto	l2871
 23506  005374                     u51670:
 23507  005374  502E               	movf	_NUM_NOTES_PRESSED,w,c
 23508  005376  A4D8               	btfss	status,2,c
 23509  005378  D011               	goto	l2871
 23510                           
 23511                           ;octave.c: 259: NUM_NOTES_PRESSED = 0;
 23512  00537A  0E00               	movlw	0
 23513  00537C  6E2E               	movwf	_NUM_NOTES_PRESSED,c
 23514                           
 23515                           ;octave.c: 260: ARRAY_INDEX = 0;
 23516  00537E  0E00               	movlw	0
 23517  005380  0100               	movlb	0	; () banked
 23518  005382  6FEC               	movwf	_ARRAY_INDEX& (0+255),b
 23519                           
 23520                           ;octave.c: 262: DISPLAY_MODE = 1;
 23521  005384  0E01               	movlw	1
 23522  005386  6FEF               	movwf	_DISPLAY_MODE& (0+255),b
 23523                           
 23524                           ; BSR set to: 0
 23525                           ;octave.c: 263: strcpy(string_to_display, "Auto");
 23526  005388  0EFB               	movlw	low _string_to_display
 23527  00538A  6F60               	movwf	strcpy@to& (0+255),b
 23528  00538C  0E01               	movlw	high _string_to_display
 23529  00538E  6F61               	movwf	(strcpy@to+1)& (0+255),b
 23530  005390  0EF0               	movlw	low STR_4
 23531  005392  6F62               	movwf	strcpy@from& (0+255),b
 23532  005394  0EFF               	movlw	high STR_4
 23533  005396  6F63               	movwf	(strcpy@from+1)& (0+255),b
 23534  005398  ECE4  F04B         	call	_strcpy	;wreg free
 23535  00539C                     l2871:
 23536                           
 23537                           ;octave.c: 264: }
 23538                           ;octave.c: 271: if((LATCH == 0) && ((UN_LATCH_MODE == 0) || (UN_LATCH_MODE == 1)) && (NU
      +                          M_NOTES_PRESSED == 0)){
 23539  00539C  B404               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 23540  00539E  0012               	return	
 23541  0053A0  A204               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 23542  0053A2  D002               	goto	u51710
 23543  0053A4  A204               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 23544  0053A6  0012               	return	
 23545  0053A8                     u51710:
 23546  0053A8  502E               	movf	_NUM_NOTES_PRESSED,w,c
 23547  0053AA  A4D8               	btfss	status,2,c
 23548  0053AC  0012               	return	
 23549                           
 23550                           ;octave.c: 272: NUM_NOTES_PRESSED = 0;
 23551  0053AE  0E00               	movlw	0
 23552  0053B0  6E2E               	movwf	_NUM_NOTES_PRESSED,c
 23553                           
 23554                           ;octave.c: 273: ARRAY_INDEX = 0;
 23555  0053B2  0E00               	movlw	0
 23556  0053B4  0100               	movlb	0	; () banked
 23557  0053B6  6FEC               	movwf	_ARRAY_INDEX& (0+255),b
 23558                           
 23559                           ;octave.c: 274: DISPLAY_MODE = 1;
 23560  0053B8  0E01               	movlw	1
 23561  0053BA  6FEF               	movwf	_DISPLAY_MODE& (0+255),b
 23562                           
 23563                           ; BSR set to: 0
 23564                           ;octave.c: 275: strcpy(string_to_display, " oFF");
 23565  0053BC  0EFB               	movlw	low _string_to_display
 23566  0053BE  6F60               	movwf	strcpy@to& (0+255),b
 23567  0053C0  0E01               	movlw	high _string_to_display
 23568  0053C2  6F61               	movwf	(strcpy@to+1)& (0+255),b
 23569  0053C4  0EDC               	movlw	low STR_5
 23570  0053C6  6F62               	movwf	strcpy@from& (0+255),b
 23571  0053C8  0EFF               	movlw	high STR_5
 23572  0053CA  6F63               	movwf	(strcpy@from+1)& (0+255),b
 23573  0053CC  ECE4  F04B         	call	_strcpy	;wreg free
 23574  0053D0  0012               	return	
 23575  0053D2                     __end_of_doTheUnLatch:
 23576                           	opt stack 0
 23577                           tblptru	equ	0xFF8
 23578                           tblptrh	equ	0xFF7
 23579                           tblptrl	equ	0xFF6
 23580                           tablat	equ	0xFF5
 23581                           prodh	equ	0xFF4
 23582                           prodl	equ	0xFF3
 23583                           intcon	equ	0xFF2
 23584                           intcon2	equ	0xFF1
 23585                           postinc0	equ	0xFEE
 23586                           wreg	equ	0xFE8
 23587                           postinc1	equ	0xFE6
 23588                           plusw1	equ	0xFE3
 23589                           fsr1h	equ	0xFE2
 23590                           fsr1l	equ	0xFE1
 23591                           indf2	equ	0xFDF
 23592                           postinc2	equ	0xFDE
 23593                           postdec2	equ	0xFDD
 23594                           plusw2	equ	0xFDB
 23595                           fsr2h	equ	0xFDA
 23596                           fsr2l	equ	0xFD9
 23597                           status	equ	0xFD8
 23598                           
 23599 ;; *************** function _doTheLatch *****************
 23600 ;; Defined at:
 23601 ;;		line 193 in file "octave.c"
 23602 ;; Parameters:    Size  Location     Type
 23603 ;;		None
 23604 ;; Auto vars:     Size  Location     Type
 23605 ;;		None
 23606 ;; Return value:  Size  Location     Type
 23607 ;;                  1    wreg      void 
 23608 ;; Registers used:
 23609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23610 ;; Tracked objects:
 23611 ;;		On entry : 0/0
 23612 ;;		On exit  : 0/0
 23613 ;;		Unchanged: 0/0
 23614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23618 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23619 ;;Total ram usage:        0 bytes
 23620 ;; Hardware stack levels used:    1
 23621 ;; Hardware stack levels required when called:    6
 23622 ;; This function calls:
 23623 ;;		_strcpy
 23624 ;; This function is called by:
 23625 ;;		_processOctave
 23626 ;;		_Function_H_6_1
 23627 ;; This function uses a non-reentrant model
 23628 ;;
 23629                           
 23630                           	psect	text67
 23631  009990                     __ptext67:
 23632                           	opt stack 0
 23633  009990                     _doTheLatch:
 23634                           	opt stack 19
 23635                           
 23636                           ;octave.c: 194: LATCH = 1;
 23637                           
 23638                           ;incstack = 0
 23639  009990  8404               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 23640                           
 23641                           ;octave.c: 195: latch_was_pressed = 1;
 23642  009992  8E03               	bsf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 23643                           
 23644                           ;octave.c: 196: DISPLAY_MODE = 1;
 23645  009994  0E01               	movlw	1
 23646  009996  0100               	movlb	0	; () banked
 23647  009998  6FEF               	movwf	_DISPLAY_MODE& (0+255),b
 23648                           
 23649                           ; BSR set to: 0
 23650                           ;octave.c: 197: strcpy(string_to_display, "HoLd");
 23651  00999A  0EFB               	movlw	low _string_to_display
 23652  00999C  6F60               	movwf	strcpy@to& (0+255),b
 23653  00999E  0E01               	movlw	high _string_to_display
 23654  0099A0  6F61               	movwf	(strcpy@to+1)& (0+255),b
 23655  0099A2  0EE6               	movlw	low STR_1
 23656  0099A4  6F62               	movwf	strcpy@from& (0+255),b
 23657  0099A6  0EFF               	movlw	high STR_1
 23658  0099A8  6F63               	movwf	(strcpy@from+1)& (0+255),b
 23659  0099AA  ECE4  F04B         	call	_strcpy	;wreg free
 23660  0099AE  0012               	return		;funcret
 23661  0099B0                     __end_of_doTheLatch:
 23662                           	opt stack 0
 23663                           tblptru	equ	0xFF8
 23664                           tblptrh	equ	0xFF7
 23665                           tblptrl	equ	0xFF6
 23666                           tablat	equ	0xFF5
 23667                           prodh	equ	0xFF4
 23668                           prodl	equ	0xFF3
 23669                           intcon	equ	0xFF2
 23670                           intcon2	equ	0xFF1
 23671                           postinc0	equ	0xFEE
 23672                           wreg	equ	0xFE8
 23673                           postinc1	equ	0xFE6
 23674                           plusw1	equ	0xFE3
 23675                           fsr1h	equ	0xFE2
 23676                           fsr1l	equ	0xFE1
 23677                           indf2	equ	0xFDF
 23678                           postinc2	equ	0xFDE
 23679                           postdec2	equ	0xFDD
 23680                           plusw2	equ	0xFDB
 23681                           fsr2h	equ	0xFDA
 23682                           fsr2l	equ	0xFD9
 23683                           status	equ	0xFD8
 23684                           
 23685 ;; *************** function _processKeyboard *****************
 23686 ;; Defined at:
 23687 ;;		line 23 in file "keyboard.c"
 23688 ;; Parameters:    Size  Location     Type
 23689 ;;		None
 23690 ;; Auto vars:     Size  Location     Type
 23691 ;;		None
 23692 ;; Return value:  Size  Location     Type
 23693 ;;                  1    wreg      void 
 23694 ;; Registers used:
 23695 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23696 ;; Tracked objects:
 23697 ;;		On entry : 0/0
 23698 ;;		On exit  : 0/0
 23699 ;;		Unchanged: 0/0
 23700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23702 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23704 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23705 ;;Total ram usage:        0 bytes
 23706 ;; Hardware stack levels used:    1
 23707 ;; Hardware stack levels required when called:   13
 23708 ;; This function calls:
 23709 ;;		_keyboard_all_note_efficient
 23710 ;;		_keyboard_eight_note_efficient
 23711 ;;		_keyboard_sharps_only_efficient
 23712 ;; This function is called by:
 23713 ;;		_digitalInputs
 23714 ;; This function uses a non-reentrant model
 23715 ;;
 23716                           
 23717                           	psect	text68
 23718  008EB4                     __ptext68:
 23719                           	opt stack 0
 23720  008EB4                     _processKeyboard:
 23721                           	opt stack 13
 23722                           
 23723                           ;keyboard.c: 35: if ((KEYBOARD_MODE == CHROMATIC) || KEYBOARD_MODE == TRIAD || KEYBOARD_
      +                          MODE == SEVENTH) {keyboard_all_note_efficient();}
 23724                           
 23725                           ;incstack = 0
 23726  008EB4  0100               	movlb	0	; () banked
 23727  008EB6  51F3               	movf	_KEYBOARD_MODE& (0+255),w,b
 23728  008EB8  B4D8               	btfsc	status,2,c
 23729  008EBA  D007               	goto	u52660
 23730                           
 23731                           ; BSR set to: 0
 23732  008EBC  0E06               	movlw	6
 23733  008EBE  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23734  008EC0  B4D8               	btfsc	status,2,c
 23735  008EC2  D003               	goto	u52660
 23736                           
 23737                           ; BSR set to: 0
 23738  008EC4  0E09               	movlw	9
 23739  008EC6  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23740  008EC8  B4D8               	btfsc	status,2,c
 23741  008ECA                     u52660:
 23742                           
 23743                           ; BSR set to: 0
 23744                           
 23745                           ; BSR set to: 0
 23746  008ECA  ECE1  F00E         	call	_keyboard_all_note_efficient	;wreg free
 23747                           
 23748                           ;keyboard.c: 37: if ((KEYBOARD_MODE == MAJOR) || (KEYBOARD_MODE == MINOR) || (KEYBOARD_M
      +                          ODE == MODES) || (KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) || (KEYBOARD_MODE == DIATONIC_T
      +                          RIAD_MINOR)|| (KEYBOARD_MODE == DIATONIC_7TH_MAJOR) || (KEYBOARD_MODE == DIATONIC_7TH_MI
      +                          NOR
 23749  008ECE  0100               	movlb	0	; () banked
 23750  008ED0  05F3               	decf	_KEYBOARD_MODE& (0+255),w,b
 23751  008ED2  B4D8               	btfsc	status,2,c
 23752  008ED4  D017               	goto	u52730
 23753                           
 23754                           ; BSR set to: 0
 23755  008ED6  0E02               	movlw	2
 23756  008ED8  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23757  008EDA  B4D8               	btfsc	status,2,c
 23758  008EDC  D013               	goto	u52730
 23759                           
 23760                           ; BSR set to: 0
 23761  008EDE  0E03               	movlw	3
 23762  008EE0  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23763  008EE2  B4D8               	btfsc	status,2,c
 23764  008EE4  D00F               	goto	u52730
 23765                           
 23766                           ; BSR set to: 0
 23767  008EE6  0E07               	movlw	7
 23768  008EE8  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23769  008EEA  B4D8               	btfsc	status,2,c
 23770  008EEC  D00B               	goto	u52730
 23771                           
 23772                           ; BSR set to: 0
 23773  008EEE  0E08               	movlw	8
 23774  008EF0  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23775  008EF2  B4D8               	btfsc	status,2,c
 23776  008EF4  D007               	goto	u52730
 23777                           
 23778                           ; BSR set to: 0
 23779  008EF6  0E0A               	movlw	10
 23780  008EF8  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23781  008EFA  B4D8               	btfsc	status,2,c
 23782  008EFC  D003               	goto	u52730
 23783                           
 23784                           ; BSR set to: 0
 23785  008EFE  0E0B               	movlw	11
 23786  008F00  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23787  008F02  B4D8               	btfsc	status,2,c
 23788  008F04                     u52730:
 23789                           
 23790                           ; BSR set to: 0
 23791                           
 23792                           ; BSR set to: 0
 23793  008F04  EC0B  F016         	call	_keyboard_eight_note_efficient	;wreg free
 23794                           
 23795                           ;keyboard.c: 39: if ((KEYBOARD_MODE == PENTATONIC_MAJOR) || (KEYBOARD_MODE == PENTATONIC
      +                          _MINOR)) {keyboard_sharps_only_efficient();}
 23796  008F08  0E04               	movlw	4
 23797  008F0A  0100               	movlb	0	; () banked
 23798  008F0C  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23799  008F0E  B4D8               	btfsc	status,2,c
 23800  008F10  D004               	goto	u52750
 23801                           
 23802                           ; BSR set to: 0
 23803  008F12  0E05               	movlw	5
 23804  008F14  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 23805  008F16  A4D8               	btfss	status,2,c
 23806  008F18  0012               	return	
 23807  008F1A                     u52750:
 23808                           
 23809                           ; BSR set to: 0
 23810                           
 23811                           ; BSR set to: 0
 23812  008F1A  EC92  F01F         	call	_keyboard_sharps_only_efficient	;wreg free
 23813  008F1E  0012               	return	
 23814  008F20                     __end_of_processKeyboard:
 23815                           	opt stack 0
 23816                           tblptru	equ	0xFF8
 23817                           tblptrh	equ	0xFF7
 23818                           tblptrl	equ	0xFF6
 23819                           tablat	equ	0xFF5
 23820                           prodh	equ	0xFF4
 23821                           prodl	equ	0xFF3
 23822                           intcon	equ	0xFF2
 23823                           intcon2	equ	0xFF1
 23824                           postinc0	equ	0xFEE
 23825                           wreg	equ	0xFE8
 23826                           postinc1	equ	0xFE6
 23827                           plusw1	equ	0xFE3
 23828                           fsr1h	equ	0xFE2
 23829                           fsr1l	equ	0xFE1
 23830                           indf2	equ	0xFDF
 23831                           postinc2	equ	0xFDE
 23832                           postdec2	equ	0xFDD
 23833                           plusw2	equ	0xFDB
 23834                           fsr2h	equ	0xFDA
 23835                           fsr2l	equ	0xFD9
 23836                           status	equ	0xFD8
 23837                           
 23838 ;; *************** function _keyboard_sharps_only_efficient *****************
 23839 ;; Defined at:
 23840 ;;		line 149 in file "keyboard.c"
 23841 ;; Parameters:    Size  Location     Type
 23842 ;;		None
 23843 ;; Auto vars:     Size  Location     Type
 23844 ;;  index           1   24[BANK0 ] unsigned char 
 23845 ;;  pitch           1   23[BANK0 ] unsigned char 
 23846 ;; Return value:  Size  Location     Type
 23847 ;;                  1    wreg      void 
 23848 ;; Registers used:
 23849 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23850 ;; Tracked objects:
 23851 ;;		On entry : 0/0
 23852 ;;		On exit  : 0/0
 23853 ;;		Unchanged: 0/0
 23854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 23855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23856 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23858 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 23859 ;;Total ram usage:        2 bytes
 23860 ;; Hardware stack levels used:    1
 23861 ;; Hardware stack levels required when called:   11
 23862 ;; This function calls:
 23863 ;;		_playThisNotePentatonic
 23864 ;; This function is called by:
 23865 ;;		_processKeyboard
 23866 ;; This function uses a non-reentrant model
 23867 ;;
 23868                           
 23869                           	psect	text69
 23870  003F24                     __ptext69:
 23871                           	opt stack 0
 23872  003F24                     _keyboard_sharps_only_efficient:
 23873                           	opt stack 14
 23874                           
 23875                           ;keyboard.c: 151: unsigned char pitch;
 23876                           ;keyboard.c: 152: unsigned char index;
 23877                           ;keyboard.c: 155: if((button_state_now & 0x00000002) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW2){
 23878                           
 23879                           ;incstack = 0
 23880  003F24  0100               	movlb	0	; () banked
 23881  003F26  B3D9               	btfsc	_button_state_now& (0+255),1,b
 23882                           
 23883                           ; BSR set to: 0
 23884  003F28  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 23885  003F2A  D00E               	goto	l1425
 23886                           
 23887                           ; BSR set to: 0
 23888  003F2C  B3D1               	btfsc	_keyboard& (0+255),1,b
 23889  003F2E  D00C               	goto	l1425
 23890                           
 23891                           ; BSR set to: 0
 23892                           ;keyboard.c: 156: pitch = Cs;
 23893  003F30  0E01               	movlw	1
 23894  003F32  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23895                           
 23896                           ;keyboard.c: 157: index = 0;
 23897  003F34  0E00               	movlw	0
 23898  003F36  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23899                           
 23900                           ; BSR set to: 0
 23901                           ;keyboard.c: 158: ON_OFF = 1;
 23902  003F38  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23903                           
 23904                           ; BSR set to: 0
 23905                           ;keyboard.c: 159: playThisNotePentatonic(pitch, index);
 23906  003F3A  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 23907  003F3E  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 23908  003F40  ECBE  F02A         	call	_playThisNotePentatonic
 23909                           
 23910                           ;keyboard.c: 160: keyboard.SW2 = 1;
 23911  003F44  0100               	movlb	0	; () banked
 23912  003F46  83D1               	bsf	_keyboard& (0+255),1,b
 23913  003F48                     l1425:
 23914                           
 23915                           ; BSR set to: 0
 23916                           ;keyboard.c: 161: }
 23917                           ;keyboard.c: 162: if((button_state_now & 0x00000008) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW4){
 23918                           
 23919                           ; BSR set to: 0
 23920  003F48  B7D9               	btfsc	_button_state_now& (0+255),3,b
 23921                           
 23922                           ; BSR set to: 0
 23923  003F4A  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 23924  003F4C  D00E               	goto	l1426
 23925                           
 23926                           ; BSR set to: 0
 23927  003F4E  B7D1               	btfsc	_keyboard& (0+255),3,b
 23928  003F50  D00C               	goto	l1426
 23929                           
 23930                           ; BSR set to: 0
 23931                           ;keyboard.c: 163: pitch = Ds;
 23932  003F52  0E03               	movlw	3
 23933  003F54  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23934                           
 23935                           ;keyboard.c: 164: index = 1;
 23936  003F56  0E01               	movlw	1
 23937  003F58  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23938                           
 23939                           ; BSR set to: 0
 23940                           ;keyboard.c: 165: ON_OFF = 1;
 23941  003F5A  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23942                           
 23943                           ; BSR set to: 0
 23944                           ;keyboard.c: 166: playThisNotePentatonic(pitch, index);
 23945  003F5C  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 23946  003F60  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 23947  003F62  ECBE  F02A         	call	_playThisNotePentatonic
 23948                           
 23949                           ;keyboard.c: 167: keyboard.SW4 = 1;
 23950  003F66  0100               	movlb	0	; () banked
 23951  003F68  87D1               	bsf	_keyboard& (0+255),3,b
 23952  003F6A                     l1426:
 23953                           
 23954                           ; BSR set to: 0
 23955                           ;keyboard.c: 168: }
 23956                           ;keyboard.c: 169: if((button_state_now & 0x00000040) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW7){
 23957                           
 23958                           ; BSR set to: 0
 23959  003F6A  BDD9               	btfsc	_button_state_now& (0+255),6,b
 23960                           
 23961                           ; BSR set to: 0
 23962  003F6C  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 23963  003F6E  D00E               	goto	l1427
 23964                           
 23965                           ; BSR set to: 0
 23966  003F70  BDD1               	btfsc	_keyboard& (0+255),6,b
 23967  003F72  D00C               	goto	l1427
 23968                           
 23969                           ; BSR set to: 0
 23970                           ;keyboard.c: 170: pitch = Fs;
 23971  003F74  0E06               	movlw	6
 23972  003F76  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 23973                           
 23974                           ;keyboard.c: 171: index = 2;
 23975  003F78  0E02               	movlw	2
 23976  003F7A  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 23977                           
 23978                           ; BSR set to: 0
 23979                           ;keyboard.c: 172: ON_OFF = 1;
 23980  003F7C  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 23981                           
 23982                           ; BSR set to: 0
 23983                           ;keyboard.c: 173: playThisNotePentatonic(pitch, index);
 23984  003F7E  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 23985  003F82  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 23986  003F84  ECBE  F02A         	call	_playThisNotePentatonic
 23987                           
 23988                           ;keyboard.c: 174: keyboard.SW7 = 1;
 23989  003F88  0100               	movlb	0	; () banked
 23990  003F8A  8DD1               	bsf	_keyboard& (0+255),6,b
 23991  003F8C                     l1427:
 23992                           
 23993                           ; BSR set to: 0
 23994                           ;keyboard.c: 175: }
 23995                           ;keyboard.c: 176: if((button_state_now & 0x00000100) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW9){
 23996                           
 23997                           ; BSR set to: 0
 23998  003F8C  B1DA               	btfsc	(_button_state_now+1)& (0+255),0,b
 23999                           
 24000                           ; BSR set to: 0
 24001  003F8E  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 24002  003F90  D00E               	goto	l1428
 24003                           
 24004                           ; BSR set to: 0
 24005  003F92  B1D2               	btfsc	(_keyboard+1)& (0+255),0,b
 24006  003F94  D00C               	goto	l1428
 24007                           
 24008                           ; BSR set to: 0
 24009                           ;keyboard.c: 177: pitch = Gs;
 24010  003F96  0E08               	movlw	8
 24011  003F98  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24012                           
 24013                           ;keyboard.c: 178: index = 3;
 24014  003F9A  0E03               	movlw	3
 24015  003F9C  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24016                           
 24017                           ; BSR set to: 0
 24018                           ;keyboard.c: 179: ON_OFF = 1;
 24019  003F9E  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24020                           
 24021                           ; BSR set to: 0
 24022                           ;keyboard.c: 180: playThisNotePentatonic(pitch, index);
 24023  003FA0  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24024  003FA4  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24025  003FA6  ECBE  F02A         	call	_playThisNotePentatonic
 24026                           
 24027                           ;keyboard.c: 181: keyboard.SW9 = 1;
 24028  003FAA  0100               	movlb	0	; () banked
 24029  003FAC  81D2               	bsf	(_keyboard+1)& (0+255),0,b
 24030  003FAE                     l1428:
 24031                           
 24032                           ; BSR set to: 0
 24033                           ;keyboard.c: 182: }
 24034                           ;keyboard.c: 183: if((button_state_now & 0x00000400) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW11){
 24035                           
 24036                           ; BSR set to: 0
 24037  003FAE  B5DA               	btfsc	(_button_state_now+1)& (0+255),2,b
 24038                           
 24039                           ; BSR set to: 0
 24040  003FB0  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 24041  003FB2  D00E               	goto	l1429
 24042                           
 24043                           ; BSR set to: 0
 24044  003FB4  B5D2               	btfsc	(_keyboard+1)& (0+255),2,b
 24045  003FB6  D00C               	goto	l1429
 24046                           
 24047                           ; BSR set to: 0
 24048                           ;keyboard.c: 184: pitch = As;
 24049  003FB8  0E0A               	movlw	10
 24050  003FBA  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24051                           
 24052                           ;keyboard.c: 185: index = 4;
 24053  003FBC  0E04               	movlw	4
 24054  003FBE  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24055                           
 24056                           ; BSR set to: 0
 24057                           ;keyboard.c: 186: ON_OFF = 1;
 24058  003FC0  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24059                           
 24060                           ; BSR set to: 0
 24061                           ;keyboard.c: 187: playThisNotePentatonic(pitch, index);
 24062  003FC2  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24063  003FC6  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24064  003FC8  ECBE  F02A         	call	_playThisNotePentatonic
 24065                           
 24066                           ;keyboard.c: 188: keyboard.SW11 = 1;
 24067  003FCC  0100               	movlb	0	; () banked
 24068  003FCE  85D2               	bsf	(_keyboard+1)& (0+255),2,b
 24069  003FD0                     l1429:
 24070                           
 24071                           ; BSR set to: 0
 24072                           ;keyboard.c: 189: }
 24073                           ;keyboard.c: 191: if((button_state_now & 0x00002000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW14){
 24074                           
 24075                           ; BSR set to: 0
 24076  003FD0  BBDA               	btfsc	(_button_state_now+1)& (0+255),5,b
 24077                           
 24078                           ; BSR set to: 0
 24079  003FD2  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 24080  003FD4  D00E               	goto	l1430
 24081                           
 24082                           ; BSR set to: 0
 24083  003FD6  BBD2               	btfsc	(_keyboard+1)& (0+255),5,b
 24084  003FD8  D00C               	goto	l1430
 24085                           
 24086                           ; BSR set to: 0
 24087                           ;keyboard.c: 192: pitch = C2s;
 24088  003FDA  0E0D               	movlw	13
 24089  003FDC  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24090                           
 24091                           ;keyboard.c: 193: index = 5;
 24092  003FDE  0E05               	movlw	5
 24093  003FE0  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24094                           
 24095                           ; BSR set to: 0
 24096                           ;keyboard.c: 194: ON_OFF = 1;
 24097  003FE2  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24098                           
 24099                           ; BSR set to: 0
 24100                           ;keyboard.c: 195: playThisNotePentatonic(pitch, index);
 24101  003FE4  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24102  003FE8  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24103  003FEA  ECBE  F02A         	call	_playThisNotePentatonic
 24104                           
 24105                           ;keyboard.c: 196: keyboard.SW14 = 1;
 24106  003FEE  0100               	movlb	0	; () banked
 24107  003FF0  8BD2               	bsf	(_keyboard+1)& (0+255),5,b
 24108  003FF2                     l1430:
 24109                           
 24110                           ; BSR set to: 0
 24111                           ;keyboard.c: 197: }
 24112                           ;keyboard.c: 198: if((button_state_now & 0x00008000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW16){
 24113                           
 24114                           ; BSR set to: 0
 24115  003FF2  BFDA               	btfsc	(_button_state_now+1)& (0+255),7,b
 24116                           
 24117                           ; BSR set to: 0
 24118  003FF4  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 24119  003FF6  D00E               	goto	l1431
 24120                           
 24121                           ; BSR set to: 0
 24122  003FF8  BFD2               	btfsc	(_keyboard+1)& (0+255),7,b
 24123  003FFA  D00C               	goto	l1431
 24124                           
 24125                           ; BSR set to: 0
 24126                           ;keyboard.c: 199: pitch = D2s;
 24127  003FFC  0E0F               	movlw	15
 24128  003FFE  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24129                           
 24130                           ;keyboard.c: 200: index = 6;
 24131  004000  0E06               	movlw	6
 24132  004002  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24133                           
 24134                           ; BSR set to: 0
 24135                           ;keyboard.c: 201: ON_OFF = 1;
 24136  004004  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24137                           
 24138                           ; BSR set to: 0
 24139                           ;keyboard.c: 202: playThisNotePentatonic(pitch, index);
 24140  004006  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24141  00400A  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24142  00400C  ECBE  F02A         	call	_playThisNotePentatonic
 24143                           
 24144                           ;keyboard.c: 203: keyboard.SW16 = 1;
 24145  004010  0100               	movlb	0	; () banked
 24146  004012  8FD2               	bsf	(_keyboard+1)& (0+255),7,b
 24147  004014                     l1431:
 24148                           
 24149                           ; BSR set to: 0
 24150                           ;keyboard.c: 204: }
 24151                           ;keyboard.c: 205: if((button_state_now & 0x00040000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW19){
 24152                           
 24153                           ; BSR set to: 0
 24154  004014  B5DB               	btfsc	(_button_state_now+2)& (0+255),2,b
 24155                           
 24156                           ; BSR set to: 0
 24157  004016  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 24158  004018  D00E               	goto	l1432
 24159                           
 24160                           ; BSR set to: 0
 24161  00401A  B5D3               	btfsc	(_keyboard+2)& (0+255),2,b
 24162  00401C  D00C               	goto	l1432
 24163                           
 24164                           ; BSR set to: 0
 24165                           ;keyboard.c: 206: pitch = F2s;
 24166  00401E  0E12               	movlw	18
 24167  004020  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24168                           
 24169                           ;keyboard.c: 207: index = 7;
 24170  004022  0E07               	movlw	7
 24171  004024  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24172                           
 24173                           ; BSR set to: 0
 24174                           ;keyboard.c: 208: ON_OFF = 1;
 24175  004026  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24176                           
 24177                           ; BSR set to: 0
 24178                           ;keyboard.c: 209: playThisNotePentatonic(pitch, index);
 24179  004028  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24180  00402C  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24181  00402E  ECBE  F02A         	call	_playThisNotePentatonic
 24182                           
 24183                           ;keyboard.c: 210: keyboard.SW19 = 1;
 24184  004032  0100               	movlb	0	; () banked
 24185  004034  85D3               	bsf	(_keyboard+2)& (0+255),2,b
 24186  004036                     l1432:
 24187                           
 24188                           ; BSR set to: 0
 24189                           ;keyboard.c: 211: }
 24190                           ;keyboard.c: 212: if((button_state_now & 0x00100000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW21){
 24191                           
 24192                           ; BSR set to: 0
 24193  004036  B9DB               	btfsc	(_button_state_now+2)& (0+255),4,b
 24194                           
 24195                           ; BSR set to: 0
 24196  004038  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 24197  00403A  D00E               	goto	l1433
 24198                           
 24199                           ; BSR set to: 0
 24200  00403C  B9D3               	btfsc	(_keyboard+2)& (0+255),4,b
 24201  00403E  D00C               	goto	l1433
 24202                           
 24203                           ; BSR set to: 0
 24204                           ;keyboard.c: 213: pitch = G2s;
 24205  004040  0E14               	movlw	20
 24206  004042  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24207                           
 24208                           ;keyboard.c: 214: index = 8;
 24209  004044  0E08               	movlw	8
 24210  004046  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24211                           
 24212                           ; BSR set to: 0
 24213                           ;keyboard.c: 215: ON_OFF = 1;
 24214  004048  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24215                           
 24216                           ; BSR set to: 0
 24217                           ;keyboard.c: 216: playThisNotePentatonic(pitch, index);
 24218  00404A  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24219  00404E  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24220  004050  ECBE  F02A         	call	_playThisNotePentatonic
 24221                           
 24222                           ;keyboard.c: 217: keyboard.SW21 = 1;
 24223  004054  0100               	movlb	0	; () banked
 24224  004056  89D3               	bsf	(_keyboard+2)& (0+255),4,b
 24225  004058                     l1433:
 24226                           
 24227                           ; BSR set to: 0
 24228                           ;keyboard.c: 218: }
 24229                           ;keyboard.c: 219: if((button_state_now & 0x00400000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW23){
 24230                           
 24231                           ; BSR set to: 0
 24232  004058  BDDB               	btfsc	(_button_state_now+2)& (0+255),6,b
 24233                           
 24234                           ; BSR set to: 0
 24235  00405A  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 24236  00405C  D00E               	goto	l1434
 24237                           
 24238                           ; BSR set to: 0
 24239  00405E  BDD3               	btfsc	(_keyboard+2)& (0+255),6,b
 24240  004060  D00C               	goto	l1434
 24241                           
 24242                           ; BSR set to: 0
 24243                           ;keyboard.c: 220: pitch = A2s;
 24244  004062  0E16               	movlw	22
 24245  004064  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24246                           
 24247                           ;keyboard.c: 221: index = 9;
 24248  004066  0E09               	movlw	9
 24249  004068  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24250                           
 24251                           ; BSR set to: 0
 24252                           ;keyboard.c: 222: ON_OFF = 1;
 24253  00406A  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24254                           
 24255                           ; BSR set to: 0
 24256                           ;keyboard.c: 223: playThisNotePentatonic(pitch, index);
 24257  00406C  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24258  004070  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24259  004072  ECBE  F02A         	call	_playThisNotePentatonic
 24260                           
 24261                           ;keyboard.c: 224: keyboard.SW23 = 1;
 24262  004076  0100               	movlb	0	; () banked
 24263  004078  8DD3               	bsf	(_keyboard+2)& (0+255),6,b
 24264  00407A                     l1434:
 24265                           
 24266                           ; BSR set to: 0
 24267                           ;keyboard.c: 225: }
 24268                           ;keyboard.c: 228: if(((button_state_last & 0x00000002)) && ((button_state_now & 0x000000
      +                          02) == 0) && keyboard.SW2) {
 24269                           
 24270                           ; BSR set to: 0
 24271  00407A  B3D5               	btfsc	_button_state_last& (0+255),1,b
 24272                           
 24273                           ; BSR set to: 0
 24274  00407C  B3D9               	btfsc	_button_state_now& (0+255),1,b
 24275  00407E  D00E               	goto	l1435
 24276                           
 24277                           ; BSR set to: 0
 24278  004080  A3D1               	btfss	_keyboard& (0+255),1,b
 24279  004082  D00C               	goto	l1435
 24280                           
 24281                           ; BSR set to: 0
 24282                           ;keyboard.c: 229: pitch = Cs;
 24283  004084  0E01               	movlw	1
 24284  004086  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24285                           
 24286                           ;keyboard.c: 230: index = 0;
 24287  004088  0E00               	movlw	0
 24288  00408A  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24289                           
 24290                           ; BSR set to: 0
 24291                           ;keyboard.c: 231: ON_OFF = 0;
 24292  00408C  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24293                           
 24294                           ; BSR set to: 0
 24295                           ;keyboard.c: 232: playThisNotePentatonic(pitch, index);
 24296  00408E  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24297  004092  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24298  004094  ECBE  F02A         	call	_playThisNotePentatonic
 24299                           
 24300                           ;keyboard.c: 233: keyboard.SW2 = 0;
 24301  004098  0100               	movlb	0	; () banked
 24302  00409A  93D1               	bcf	_keyboard& (0+255),1,b
 24303  00409C                     l1435:
 24304                           
 24305                           ; BSR set to: 0
 24306                           ;keyboard.c: 234: }
 24307                           ;keyboard.c: 235: if(((button_state_last & 0x00000008)) && ((button_state_now & 0x000000
      +                          08) == 0) && keyboard.SW4) {
 24308                           
 24309                           ; BSR set to: 0
 24310  00409C  B7D5               	btfsc	_button_state_last& (0+255),3,b
 24311                           
 24312                           ; BSR set to: 0
 24313  00409E  B7D9               	btfsc	_button_state_now& (0+255),3,b
 24314  0040A0  D00E               	goto	l1436
 24315                           
 24316                           ; BSR set to: 0
 24317  0040A2  A7D1               	btfss	_keyboard& (0+255),3,b
 24318  0040A4  D00C               	goto	l1436
 24319                           
 24320                           ; BSR set to: 0
 24321                           ;keyboard.c: 236: pitch = Ds;
 24322  0040A6  0E03               	movlw	3
 24323  0040A8  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24324                           
 24325                           ;keyboard.c: 237: index = 1;
 24326  0040AA  0E01               	movlw	1
 24327  0040AC  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24328                           
 24329                           ; BSR set to: 0
 24330                           ;keyboard.c: 238: ON_OFF = 0;
 24331  0040AE  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24332                           
 24333                           ; BSR set to: 0
 24334                           ;keyboard.c: 239: playThisNotePentatonic(pitch, index);
 24335  0040B0  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24336  0040B4  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24337  0040B6  ECBE  F02A         	call	_playThisNotePentatonic
 24338                           
 24339                           ;keyboard.c: 240: keyboard.SW4 = 0;
 24340  0040BA  0100               	movlb	0	; () banked
 24341  0040BC  97D1               	bcf	_keyboard& (0+255),3,b
 24342  0040BE                     l1436:
 24343                           
 24344                           ; BSR set to: 0
 24345                           ;keyboard.c: 241: }
 24346                           ;keyboard.c: 242: if(((button_state_last & 0x00000040)) && ((button_state_now & 0x000000
      +                          40) == 0) && keyboard.SW7) {
 24347                           
 24348                           ; BSR set to: 0
 24349  0040BE  BDD5               	btfsc	_button_state_last& (0+255),6,b
 24350                           
 24351                           ; BSR set to: 0
 24352  0040C0  BDD9               	btfsc	_button_state_now& (0+255),6,b
 24353  0040C2  D00E               	goto	l1437
 24354                           
 24355                           ; BSR set to: 0
 24356  0040C4  ADD1               	btfss	_keyboard& (0+255),6,b
 24357  0040C6  D00C               	goto	l1437
 24358                           
 24359                           ; BSR set to: 0
 24360                           ;keyboard.c: 243: pitch = Fs;
 24361  0040C8  0E06               	movlw	6
 24362  0040CA  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24363                           
 24364                           ;keyboard.c: 244: index = 2;
 24365  0040CC  0E02               	movlw	2
 24366  0040CE  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24367                           
 24368                           ; BSR set to: 0
 24369                           ;keyboard.c: 245: ON_OFF = 0;
 24370  0040D0  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24371                           
 24372                           ; BSR set to: 0
 24373                           ;keyboard.c: 246: playThisNotePentatonic(pitch, index);
 24374  0040D2  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24375  0040D6  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24376  0040D8  ECBE  F02A         	call	_playThisNotePentatonic
 24377                           
 24378                           ;keyboard.c: 247: keyboard.SW7 = 0;
 24379  0040DC  0100               	movlb	0	; () banked
 24380  0040DE  9DD1               	bcf	_keyboard& (0+255),6,b
 24381  0040E0                     l1437:
 24382                           
 24383                           ; BSR set to: 0
 24384                           ;keyboard.c: 248: }
 24385                           ;keyboard.c: 249: if(((button_state_last & 0x00000100)) && ((button_state_now & 0x000001
      +                          00) == 0) && keyboard.SW9) {
 24386                           
 24387                           ; BSR set to: 0
 24388  0040E0  B1D6               	btfsc	(_button_state_last+1)& (0+255),0,b
 24389                           
 24390                           ; BSR set to: 0
 24391  0040E2  B1DA               	btfsc	(_button_state_now+1)& (0+255),0,b
 24392  0040E4  D00E               	goto	l1438
 24393                           
 24394                           ; BSR set to: 0
 24395  0040E6  A1D2               	btfss	(_keyboard+1)& (0+255),0,b
 24396  0040E8  D00C               	goto	l1438
 24397                           
 24398                           ; BSR set to: 0
 24399                           ;keyboard.c: 250: pitch = Gs;
 24400  0040EA  0E08               	movlw	8
 24401  0040EC  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24402                           
 24403                           ;keyboard.c: 251: index = 3;
 24404  0040EE  0E03               	movlw	3
 24405  0040F0  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24406                           
 24407                           ; BSR set to: 0
 24408                           ;keyboard.c: 252: ON_OFF = 0;
 24409  0040F2  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24410                           
 24411                           ; BSR set to: 0
 24412                           ;keyboard.c: 253: playThisNotePentatonic(pitch, index);
 24413  0040F4  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24414  0040F8  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24415  0040FA  ECBE  F02A         	call	_playThisNotePentatonic
 24416                           
 24417                           ;keyboard.c: 254: keyboard.SW9 = 0;
 24418  0040FE  0100               	movlb	0	; () banked
 24419  004100  91D2               	bcf	(_keyboard+1)& (0+255),0,b
 24420  004102                     l1438:
 24421                           
 24422                           ; BSR set to: 0
 24423                           ;keyboard.c: 255: }
 24424                           ;keyboard.c: 256: if(((button_state_last & 0x00000400)) && ((button_state_now & 0x000004
      +                          00) == 0) && keyboard.SW11) {
 24425                           
 24426                           ; BSR set to: 0
 24427  004102  B5D6               	btfsc	(_button_state_last+1)& (0+255),2,b
 24428                           
 24429                           ; BSR set to: 0
 24430  004104  B5DA               	btfsc	(_button_state_now+1)& (0+255),2,b
 24431  004106  D00E               	goto	l1439
 24432                           
 24433                           ; BSR set to: 0
 24434  004108  A5D2               	btfss	(_keyboard+1)& (0+255),2,b
 24435  00410A  D00C               	goto	l1439
 24436                           
 24437                           ; BSR set to: 0
 24438                           ;keyboard.c: 257: pitch = As;
 24439  00410C  0E0A               	movlw	10
 24440  00410E  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24441                           
 24442                           ;keyboard.c: 258: index = 4;
 24443  004110  0E04               	movlw	4
 24444  004112  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24445                           
 24446                           ; BSR set to: 0
 24447                           ;keyboard.c: 259: ON_OFF = 0;
 24448  004114  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24449                           
 24450                           ; BSR set to: 0
 24451                           ;keyboard.c: 260: playThisNotePentatonic(pitch, index);
 24452  004116  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24453  00411A  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24454  00411C  ECBE  F02A         	call	_playThisNotePentatonic
 24455                           
 24456                           ;keyboard.c: 261: keyboard.SW11 = 0;
 24457  004120  0100               	movlb	0	; () banked
 24458  004122  95D2               	bcf	(_keyboard+1)& (0+255),2,b
 24459  004124                     l1439:
 24460                           
 24461                           ; BSR set to: 0
 24462                           ;keyboard.c: 262: }
 24463                           ;keyboard.c: 265: if(((button_state_last & 0x00002000)) && ((button_state_now & 0x000020
      +                          00) == 0) && keyboard.SW14) {
 24464                           
 24465                           ; BSR set to: 0
 24466  004124  BBD6               	btfsc	(_button_state_last+1)& (0+255),5,b
 24467                           
 24468                           ; BSR set to: 0
 24469  004126  BBDA               	btfsc	(_button_state_now+1)& (0+255),5,b
 24470  004128  D00E               	goto	l1440
 24471                           
 24472                           ; BSR set to: 0
 24473  00412A  ABD2               	btfss	(_keyboard+1)& (0+255),5,b
 24474  00412C  D00C               	goto	l1440
 24475                           
 24476                           ; BSR set to: 0
 24477                           ;keyboard.c: 266: pitch = C2s;
 24478  00412E  0E0D               	movlw	13
 24479  004130  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24480                           
 24481                           ;keyboard.c: 267: index = 5;
 24482  004132  0E05               	movlw	5
 24483  004134  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24484                           
 24485                           ; BSR set to: 0
 24486                           ;keyboard.c: 268: ON_OFF = 0;
 24487  004136  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24488                           
 24489                           ; BSR set to: 0
 24490                           ;keyboard.c: 269: playThisNotePentatonic(pitch, index);
 24491  004138  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24492  00413C  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24493  00413E  ECBE  F02A         	call	_playThisNotePentatonic
 24494                           
 24495                           ;keyboard.c: 270: keyboard.SW14 = 0;
 24496  004142  0100               	movlb	0	; () banked
 24497  004144  9BD2               	bcf	(_keyboard+1)& (0+255),5,b
 24498  004146                     l1440:
 24499                           
 24500                           ; BSR set to: 0
 24501                           ;keyboard.c: 271: }
 24502                           ;keyboard.c: 272: if(((button_state_last & 0x00008000)) && ((button_state_now & 0x000080
      +                          00) == 0) && keyboard.SW16) {
 24503                           
 24504                           ; BSR set to: 0
 24505  004146  BFD6               	btfsc	(_button_state_last+1)& (0+255),7,b
 24506                           
 24507                           ; BSR set to: 0
 24508  004148  BFDA               	btfsc	(_button_state_now+1)& (0+255),7,b
 24509  00414A  D00E               	goto	l1441
 24510                           
 24511                           ; BSR set to: 0
 24512  00414C  AFD2               	btfss	(_keyboard+1)& (0+255),7,b
 24513  00414E  D00C               	goto	l1441
 24514                           
 24515                           ; BSR set to: 0
 24516                           ;keyboard.c: 273: pitch = D2s;
 24517  004150  0E0F               	movlw	15
 24518  004152  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24519                           
 24520                           ;keyboard.c: 274: index = 6;
 24521  004154  0E06               	movlw	6
 24522  004156  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24523                           
 24524                           ; BSR set to: 0
 24525                           ;keyboard.c: 275: ON_OFF = 0;
 24526  004158  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24527                           
 24528                           ; BSR set to: 0
 24529                           ;keyboard.c: 276: playThisNotePentatonic(pitch, index);
 24530  00415A  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24531  00415E  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24532  004160  ECBE  F02A         	call	_playThisNotePentatonic
 24533                           
 24534                           ;keyboard.c: 277: keyboard.SW16 = 0;
 24535  004164  0100               	movlb	0	; () banked
 24536  004166  9FD2               	bcf	(_keyboard+1)& (0+255),7,b
 24537  004168                     l1441:
 24538                           
 24539                           ; BSR set to: 0
 24540                           ;keyboard.c: 278: }
 24541                           ;keyboard.c: 279: if(((button_state_last & 0x00040000)) && ((button_state_now & 0x000400
      +                          00) == 0) && keyboard.SW19) {
 24542                           
 24543                           ; BSR set to: 0
 24544  004168  B5D7               	btfsc	(_button_state_last+2)& (0+255),2,b
 24545                           
 24546                           ; BSR set to: 0
 24547  00416A  B5DB               	btfsc	(_button_state_now+2)& (0+255),2,b
 24548  00416C  D00E               	goto	l1442
 24549                           
 24550                           ; BSR set to: 0
 24551  00416E  A5D3               	btfss	(_keyboard+2)& (0+255),2,b
 24552  004170  D00C               	goto	l1442
 24553                           
 24554                           ; BSR set to: 0
 24555                           ;keyboard.c: 280: pitch = F2s;
 24556  004172  0E12               	movlw	18
 24557  004174  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24558                           
 24559                           ;keyboard.c: 281: index = 7;
 24560  004176  0E07               	movlw	7
 24561  004178  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24562                           
 24563                           ; BSR set to: 0
 24564                           ;keyboard.c: 282: ON_OFF = 0;
 24565  00417A  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24566                           
 24567                           ; BSR set to: 0
 24568                           ;keyboard.c: 283: playThisNotePentatonic(pitch, index);
 24569  00417C  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24570  004180  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24571  004182  ECBE  F02A         	call	_playThisNotePentatonic
 24572                           
 24573                           ;keyboard.c: 284: keyboard.SW19 = 0;
 24574  004186  0100               	movlb	0	; () banked
 24575  004188  95D3               	bcf	(_keyboard+2)& (0+255),2,b
 24576  00418A                     l1442:
 24577                           
 24578                           ; BSR set to: 0
 24579                           ;keyboard.c: 285: }
 24580                           ;keyboard.c: 286: if(((button_state_last & 0x00100000)) && ((button_state_now & 0x001000
      +                          00) == 0) && keyboard.SW21) {
 24581                           
 24582                           ; BSR set to: 0
 24583  00418A  B9D7               	btfsc	(_button_state_last+2)& (0+255),4,b
 24584                           
 24585                           ; BSR set to: 0
 24586  00418C  B9DB               	btfsc	(_button_state_now+2)& (0+255),4,b
 24587  00418E  D00E               	goto	l1443
 24588                           
 24589                           ; BSR set to: 0
 24590  004190  A9D3               	btfss	(_keyboard+2)& (0+255),4,b
 24591  004192  D00C               	goto	l1443
 24592                           
 24593                           ; BSR set to: 0
 24594                           ;keyboard.c: 287: pitch = G2s;
 24595  004194  0E14               	movlw	20
 24596  004196  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24597                           
 24598                           ;keyboard.c: 288: index = 8;
 24599  004198  0E08               	movlw	8
 24600  00419A  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24601                           
 24602                           ; BSR set to: 0
 24603                           ;keyboard.c: 289: ON_OFF = 0;
 24604  00419C  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24605                           
 24606                           ; BSR set to: 0
 24607                           ;keyboard.c: 290: playThisNotePentatonic(pitch, index);
 24608  00419E  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24609  0041A2  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24610  0041A4  ECBE  F02A         	call	_playThisNotePentatonic
 24611                           
 24612                           ;keyboard.c: 291: keyboard.SW21 = 0;
 24613  0041A8  0100               	movlb	0	; () banked
 24614  0041AA  99D3               	bcf	(_keyboard+2)& (0+255),4,b
 24615  0041AC                     l1443:
 24616                           
 24617                           ; BSR set to: 0
 24618                           ;keyboard.c: 292: }
 24619                           ;keyboard.c: 293: if(((button_state_last & 0x00400000)) && ((button_state_now & 0x004000
      +                          00) == 0) && keyboard.SW23) {
 24620                           
 24621                           ; BSR set to: 0
 24622  0041AC  ADD7               	btfss	(_button_state_last+2)& (0+255),6,b
 24623  0041AE  0012               	return	
 24624                           
 24625                           ; BSR set to: 0
 24626  0041B0  BDDB               	btfsc	(_button_state_now+2)& (0+255),6,b
 24627  0041B2  0012               	return	
 24628                           
 24629                           ; BSR set to: 0
 24630  0041B4  ADD3               	btfss	(_keyboard+2)& (0+255),6,b
 24631  0041B6  0012               	return	
 24632                           
 24633                           ; BSR set to: 0
 24634                           ;keyboard.c: 294: pitch = A2s;
 24635  0041B8  0E16               	movlw	22
 24636  0041BA  6F77               	movwf	keyboard_sharps_only_efficient@pitch& (0+255),b
 24637                           
 24638                           ;keyboard.c: 295: index = 9;
 24639  0041BC  0E09               	movlw	9
 24640  0041BE  6F78               	movwf	keyboard_sharps_only_efficient@index& (0+255),b
 24641                           
 24642                           ; BSR set to: 0
 24643                           ;keyboard.c: 296: ON_OFF = 0;
 24644  0041C0  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24645                           
 24646                           ; BSR set to: 0
 24647                           ;keyboard.c: 297: playThisNotePentatonic(pitch, index);
 24648  0041C2  C078  F071         	movff	keyboard_sharps_only_efficient@index,playThisNotePentatonic@index
 24649  0041C6  5177               	movf	keyboard_sharps_only_efficient@pitch& (0+255),w,b
 24650  0041C8  ECBE  F02A         	call	_playThisNotePentatonic
 24651                           
 24652                           ;keyboard.c: 298: keyboard.SW23 = 0;
 24653  0041CC  0100               	movlb	0	; () banked
 24654  0041CE  9DD3               	bcf	(_keyboard+2)& (0+255),6,b
 24655  0041D0  0012               	return	
 24656  0041D2                     __end_of_keyboard_sharps_only_efficient:
 24657                           	opt stack 0
 24658                           tblptru	equ	0xFF8
 24659                           tblptrh	equ	0xFF7
 24660                           tblptrl	equ	0xFF6
 24661                           tablat	equ	0xFF5
 24662                           prodh	equ	0xFF4
 24663                           prodl	equ	0xFF3
 24664                           intcon	equ	0xFF2
 24665                           intcon2	equ	0xFF1
 24666                           postinc0	equ	0xFEE
 24667                           wreg	equ	0xFE8
 24668                           postinc1	equ	0xFE6
 24669                           plusw1	equ	0xFE3
 24670                           fsr1h	equ	0xFE2
 24671                           fsr1l	equ	0xFE1
 24672                           indf2	equ	0xFDF
 24673                           postinc2	equ	0xFDE
 24674                           postdec2	equ	0xFDD
 24675                           plusw2	equ	0xFDB
 24676                           fsr2h	equ	0xFDA
 24677                           fsr2l	equ	0xFD9
 24678                           status	equ	0xFD8
 24679                           
 24680 ;; *************** function _playThisNotePentatonic *****************
 24681 ;; Defined at:
 24682 ;;		line 42 in file "keyboard.c"
 24683 ;; Parameters:    Size  Location     Type
 24684 ;;  pitch           1    wreg     unsigned char 
 24685 ;;  index           1   17[BANK0 ] unsigned char 
 24686 ;; Auto vars:     Size  Location     Type
 24687 ;;  pitch           1    0[COMRAM] unsigned char 
 24688 ;;  temp_pitch      1   22[BANK0 ] unsigned char 
 24689 ;; Return value:  Size  Location     Type
 24690 ;;                  1    wreg      void 
 24691 ;; Registers used:
 24692 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24693 ;; Tracked objects:
 24694 ;;		On entry : 0/0
 24695 ;;		On exit  : 0/0
 24696 ;;		Unchanged: 0/0
 24697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 24698 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24699 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24700 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24701 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 24702 ;;Total ram usage:        6 bytes
 24703 ;; Hardware stack levels used:    1
 24704 ;; Hardware stack levels required when called:   10
 24705 ;; This function calls:
 24706 ;;		_add_notes_to_arpeggio
 24707 ;;		_delete_notes_from_arpeggio
 24708 ;;		_finish_arpeggio_setup
 24709 ;;		_key_press_release_note_off
 24710 ;;		_noteOff
 24711 ;;		_noteOn
 24712 ;;		_wait_one_pulse
 24713 ;; This function is called by:
 24714 ;;		_keyboard_sharps_only_efficient
 24715 ;;		_doTheUnLatch
 24716 ;; This function uses a non-reentrant model
 24717 ;;
 24718                           
 24719                           	psect	text70
 24720  00557C                     __ptext70:
 24721                           	opt stack 0
 24722  00557C                     _playThisNotePentatonic:
 24723                           	opt stack 14
 24724                           
 24725                           ;keyboard.c: 44: if(ARPEGGIO_ON == 0){
 24726                           
 24727                           ; BSR set to: 0
 24728                           ;incstack = 0
 24729  00557C  BA04               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 24730  00557E  D058               	goto	l1408
 24731                           
 24732                           ;keyboard.c: 46: if(KEYBOARD_MODE == PENTATONIC_MAJOR) {
 24733  005580  0E04               	movlw	4
 24734  005582  0100               	movlb	0	; () banked
 24735  005584  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 24736  005586  A4D8               	btfss	status,2,c
 24737  005588  D027               	goto	l1405
 24738                           
 24739                           ; BSR set to: 0
 24740                           ;keyboard.c: 47: if(ON_OFF == 1) {noteOn(channel,pentatonic_major_key[index],velocity);}
 24741  00558A  A206               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24742  00558C  D011               	goto	l1404
 24743                           
 24744                           ; BSR set to: 0
 24745  00558E  5050               	movf	_velocity,w,c
 24746  005590  6EE6               	movwf	postinc1,c
 24747  005592  5171               	movf	playThisNotePentatonic@index& (0+255),w,b
 24748  005594  0D01               	mullw	1
 24749  005596  0E92               	movlw	low _pentatonic_major_key
 24750  005598  24F3               	addwf	prodl,w,c
 24751  00559A  6EF6               	movwf	tblptrl,c
 24752  00559C  0EF3               	movlw	high _pentatonic_major_key
 24753  00559E  20F4               	addwfc	prodh,w,c
 24754  0055A0  6EF7               	movwf	tblptrh,c
 24755  0055A2                     	if	0	;There are less than 3 active tblptr bytes
 24756  0055A2                     	endif
 24757  0055A2  0008               	tblrd		*
 24758  0055A4  50F5               	movf	tablat,w,c
 24759  0055A6  6EE6               	movwf	postinc1,c
 24760  0055A8  503D               	movf	_channel,w,c
 24761  0055AA  6EE6               	movwf	postinc1,c
 24762  0055AC  EC10  F046         	call	_noteOn	;wreg free
 24763  0055B0                     l1404:
 24764                           
 24765                           ;keyboard.c: 48: if(ON_OFF == 0) {noteOff(channel,pentatonic_major_key[index],velocity);
      +                          }
 24766  0055B0  B206               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24767  0055B2  D012               	goto	l1405
 24768  0055B4  5050               	movf	_velocity,w,c
 24769  0055B6  6EE6               	movwf	postinc1,c
 24770  0055B8  0100               	movlb	0	; () banked
 24771  0055BA  5171               	movf	playThisNotePentatonic@index& (0+255),w,b
 24772  0055BC  0D01               	mullw	1
 24773  0055BE  0E92               	movlw	low _pentatonic_major_key
 24774  0055C0  24F3               	addwf	prodl,w,c
 24775  0055C2  6EF6               	movwf	tblptrl,c
 24776  0055C4  0EF3               	movlw	high _pentatonic_major_key
 24777  0055C6  20F4               	addwfc	prodh,w,c
 24778  0055C8  6EF7               	movwf	tblptrh,c
 24779  0055CA                     	if	0	;There are less than 3 active tblptr bytes
 24780  0055CA                     	endif
 24781  0055CA  0008               	tblrd		*
 24782  0055CC  50F5               	movf	tablat,w,c
 24783  0055CE  6EE6               	movwf	postinc1,c
 24784  0055D0  503D               	movf	_channel,w,c
 24785  0055D2  6EE6               	movwf	postinc1,c
 24786  0055D4  ECA0  F04A         	call	_noteOff	;wreg free
 24787  0055D8                     l1405:
 24788                           
 24789                           ;keyboard.c: 49: }
 24790                           ;keyboard.c: 51: if(KEYBOARD_MODE == PENTATONIC_MINOR) {
 24791  0055D8  0E05               	movlw	5
 24792  0055DA  0100               	movlb	0	; () banked
 24793  0055DC  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 24794  0055DE  A4D8               	btfss	status,2,c
 24795  0055E0  D027               	goto	l1408
 24796                           
 24797                           ; BSR set to: 0
 24798                           ;keyboard.c: 52: if(ON_OFF == 1) {noteOn(channel,pentatonic_minor_key[index],velocity);}
 24799  0055E2  A206               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24800  0055E4  D011               	goto	l1407
 24801                           
 24802                           ; BSR set to: 0
 24803  0055E6  5050               	movf	_velocity,w,c
 24804  0055E8  6EE6               	movwf	postinc1,c
 24805  0055EA  5171               	movf	playThisNotePentatonic@index& (0+255),w,b
 24806  0055EC  0D01               	mullw	1
 24807  0055EE  0E87               	movlw	low _pentatonic_minor_key
 24808  0055F0  24F3               	addwf	prodl,w,c
 24809  0055F2  6EF6               	movwf	tblptrl,c
 24810  0055F4  0EF3               	movlw	high _pentatonic_minor_key
 24811  0055F6  20F4               	addwfc	prodh,w,c
 24812  0055F8  6EF7               	movwf	tblptrh,c
 24813  0055FA                     	if	0	;There are less than 3 active tblptr bytes
 24814  0055FA                     	endif
 24815  0055FA  0008               	tblrd		*
 24816  0055FC  50F5               	movf	tablat,w,c
 24817  0055FE  6EE6               	movwf	postinc1,c
 24818  005600  503D               	movf	_channel,w,c
 24819  005602  6EE6               	movwf	postinc1,c
 24820  005604  EC10  F046         	call	_noteOn	;wreg free
 24821  005608                     l1407:
 24822                           
 24823                           ;keyboard.c: 53: if(ON_OFF == 0) {noteOff(channel,pentatonic_minor_key[index],velocity);
      +                          }
 24824  005608  B206               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24825  00560A  D012               	goto	l1408
 24826  00560C  5050               	movf	_velocity,w,c
 24827  00560E  6EE6               	movwf	postinc1,c
 24828  005610  0100               	movlb	0	; () banked
 24829  005612  5171               	movf	playThisNotePentatonic@index& (0+255),w,b
 24830  005614  0D01               	mullw	1
 24831  005616  0E87               	movlw	low _pentatonic_minor_key
 24832  005618  24F3               	addwf	prodl,w,c
 24833  00561A  6EF6               	movwf	tblptrl,c
 24834  00561C  0EF3               	movlw	high _pentatonic_minor_key
 24835  00561E  20F4               	addwfc	prodh,w,c
 24836  005620  6EF7               	movwf	tblptrh,c
 24837  005622                     	if	0	;There are less than 3 active tblptr bytes
 24838  005622                     	endif
 24839  005622  0008               	tblrd		*
 24840  005624  50F5               	movf	tablat,w,c
 24841  005626  6EE6               	movwf	postinc1,c
 24842  005628  503D               	movf	_channel,w,c
 24843  00562A  6EE6               	movwf	postinc1,c
 24844  00562C  ECA0  F04A         	call	_noteOff	;wreg free
 24845  005630                     l1408:
 24846                           
 24847                           ;keyboard.c: 54: }
 24848                           ;keyboard.c: 55: }
 24849                           ;keyboard.c: 58: if(ARPEGGIO_ON == 1){
 24850  005630  AA04               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 24851  005632  0012               	return	
 24852                           
 24853                           ;keyboard.c: 60: unsigned char temp_pitch;
 24854                           ;keyboard.c: 62: if(KEYBOARD_MODE == PENTATONIC_MAJOR) {
 24855  005634  0E04               	movlw	4
 24856  005636  0100               	movlb	0	; () banked
 24857  005638  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 24858  00563A  A4D8               	btfss	status,2,c
 24859  00563C  D00B               	goto	l1410
 24860                           
 24861                           ; BSR set to: 0
 24862                           ;keyboard.c: 63: temp_pitch = pentatonic_major_key[index];
 24863  00563E  5171               	movf	playThisNotePentatonic@index& (0+255),w,b
 24864  005640  0D01               	mullw	1
 24865  005642  0E92               	movlw	low _pentatonic_major_key
 24866  005644  24F3               	addwf	prodl,w,c
 24867  005646  6EF6               	movwf	tblptrl,c
 24868  005648  0EF3               	movlw	high _pentatonic_major_key
 24869  00564A  20F4               	addwfc	prodh,w,c
 24870  00564C  6EF7               	movwf	tblptrh,c
 24871  00564E                     	if	0	;There are less than 3 active tblptr bytes
 24872  00564E                     	endif
 24873  00564E  0008               	tblrd		*
 24874  005650  CFF5 F076          	movff	tablat,playThisNotePentatonic@temp_pitch
 24875  005654                     l1410:
 24876                           
 24877                           ; BSR set to: 0
 24878                           ;keyboard.c: 64: }
 24879                           ;keyboard.c: 66: if(KEYBOARD_MODE == PENTATONIC_MINOR) {
 24880                           
 24881                           ; BSR set to: 0
 24882  005654  0E05               	movlw	5
 24883  005656  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 24884  005658  A4D8               	btfss	status,2,c
 24885  00565A  D00B               	goto	l1411
 24886                           
 24887                           ; BSR set to: 0
 24888                           ;keyboard.c: 67: temp_pitch = pentatonic_minor_key[index];
 24889  00565C  5171               	movf	playThisNotePentatonic@index& (0+255),w,b
 24890  00565E  0D01               	mullw	1
 24891  005660  0E87               	movlw	low _pentatonic_minor_key
 24892  005662  24F3               	addwf	prodl,w,c
 24893  005664  6EF6               	movwf	tblptrl,c
 24894  005666  0EF3               	movlw	high _pentatonic_minor_key
 24895  005668  20F4               	addwfc	prodh,w,c
 24896  00566A  6EF7               	movwf	tblptrh,c
 24897  00566C                     	if	0	;There are less than 3 active tblptr bytes
 24898  00566C                     	endif
 24899  00566C  0008               	tblrd		*
 24900  00566E  CFF5 F076          	movff	tablat,playThisNotePentatonic@temp_pitch
 24901  005672                     l1411:
 24902                           
 24903                           ; BSR set to: 0
 24904                           ;keyboard.c: 68: }
 24905                           ;keyboard.c: 70: if(ON_OFF == 1) {
 24906                           
 24907                           ; BSR set to: 0
 24908  005672  A206               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24909  005674  D019               	goto	l1412
 24910                           
 24911                           ; BSR set to: 0
 24912                           ;keyboard.c: 73: TMR0ON = 0;
 24913  005676  9ED5               	bcf	4053,7,c	;volatile
 24914                           
 24915                           ;keyboard.c: 75: parallel = temp_pitch;
 24916  005678  C076  F02F         	movff	playThisNotePentatonic@temp_pitch,_parallel
 24917                           
 24918                           ; BSR set to: 0
 24919                           ;keyboard.c: 78: if(NUM_NOTES_PRESSED > 0){
 24920  00567C  502E               	movf	_NUM_NOTES_PRESSED,w,c
 24921  00567E  B4D8               	btfsc	status,2,c
 24922  005680  D00A               	goto	l1413
 24923                           
 24924                           ; BSR set to: 0
 24925                           ;keyboard.c: 79: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 24926  005682  0E00               	movlw	0
 24927  005684  B603               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 24928  005686  0E01               	movlw	1
 24929  005688  EC43  F04C         	call	_wait_one_pulse
 24930                           
 24931                           ;keyboard.c: 80: if(note_off_was_sent == 0) {key_press_release_note_off();}
 24932  00568C  A052               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 24933  00568E  ECA7  F02E         	call	_key_press_release_note_off	;wreg free
 24934                           
 24935                           ;keyboard.c: 81: TIMER_OVERFLOWS = 0;
 24936  005692  0E00               	movlw	0
 24937  005694  6E2D               	movwf	_TIMER_OVERFLOWS,c
 24938  005696                     l1413:
 24939                           
 24940                           ;keyboard.c: 82: }
 24941                           ;keyboard.c: 84: add_notes_to_arpeggio(temp_pitch);
 24942  005696  0100               	movlb	0	; () banked
 24943  005698  5176               	movf	playThisNotePentatonic@temp_pitch& (0+255),w,b
 24944  00569A  EC28  F035         	call	_add_notes_to_arpeggio
 24945                           
 24946                           ;keyboard.c: 96: if(LATCH == 0) {latch_was_pressed = 0;}
 24947  00569E  A404               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 24948  0056A0  9E03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 24949                           
 24950                           ;keyboard.c: 99: finish_arpeggio_setup();
 24951  0056A2  ECD8  F04C         	call	_finish_arpeggio_setup	;wreg free
 24952                           
 24953                           ;keyboard.c: 102: TMR0ON = 1;
 24954  0056A6  8ED5               	bsf	4053,7,c	;volatile
 24955  0056A8                     l1412:
 24956                           
 24957                           ;keyboard.c: 103: }
 24958                           ;keyboard.c: 105: if((ON_OFF == 0) && (LATCH == 0)) {
 24959  0056A8  B206               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 24960  0056AA  0012               	return	
 24961  0056AC  B404               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 24962  0056AE  0012               	return	
 24963                           
 24964                           ;keyboard.c: 108: TMR0ON = 0;
 24965  0056B0  9ED5               	bcf	4053,7,c	;volatile
 24966                           
 24967                           ;keyboard.c: 111: if(NUM_NOTES_PRESSED > 0){
 24968  0056B2  502E               	movf	_NUM_NOTES_PRESSED,w,c
 24969  0056B4  B4D8               	btfsc	status,2,c
 24970  0056B6  D00A               	goto	l1417
 24971                           
 24972                           ;keyboard.c: 112: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 24973  0056B8  0E00               	movlw	0
 24974  0056BA  B403               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 24975  0056BC  0E01               	movlw	1
 24976  0056BE  EC43  F04C         	call	_wait_one_pulse
 24977                           
 24978                           ;keyboard.c: 113: if(note_off_was_sent == 0) {key_press_release_note_off();}
 24979  0056C2  A052               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 24980  0056C4  ECA7  F02E         	call	_key_press_release_note_off	;wreg free
 24981                           
 24982                           ;keyboard.c: 114: TIMER_OVERFLOWS = 0;
 24983  0056C8  0E00               	movlw	0
 24984  0056CA  6E2D               	movwf	_TIMER_OVERFLOWS,c
 24985  0056CC                     l1417:
 24986                           
 24987                           ;keyboard.c: 115: }
 24988                           ;keyboard.c: 117: delete_notes_from_arpeggio(temp_pitch);
 24989  0056CC  0100               	movlb	0	; () banked
 24990  0056CE  5176               	movf	playThisNotePentatonic@temp_pitch& (0+255),w,b
 24991  0056D0  ECB0  F04B         	call	_delete_notes_from_arpeggio
 24992                           
 24993                           ;keyboard.c: 127: if(temp_pitch == parallel){NUM_NOTES_PRESSED = 0;}
 24994  0056D4  C02F  F072         	movff	_parallel,??_playThisNotePentatonic
 24995  0056D8  0100               	movlb	0	; () banked
 24996  0056DA  6B73               	clrf	(??_playThisNotePentatonic+1)& (0+255),b
 24997  0056DC  BF72               	btfsc	??_playThisNotePentatonic& (0+255),7,b
 24998  0056DE  0773               	decf	(??_playThisNotePentatonic+1)& (0+255),f,b
 24999  0056E0  5176               	movf	playThisNotePentatonic@temp_pitch& (0+255),w,b
 25000  0056E2  6F74               	movwf	(??_playThisNotePentatonic+2)& (0+255),b
 25001  0056E4  6B75               	clrf	(??_playThisNotePentatonic+3)& (0+255),b
 25002  0056E6  5172               	movf	??_playThisNotePentatonic& (0+255),w,b
 25003  0056E8  1974               	xorwf	(??_playThisNotePentatonic+2)& (0+255),w,b
 25004  0056EA  E106               	bnz	l27278
 25005  0056EC  5173               	movf	(??_playThisNotePentatonic+1)& (0+255),w,b
 25006  0056EE  1975               	xorwf	(??_playThisNotePentatonic+3)& (0+255),w,b
 25007  0056F0  A4D8               	btfss	status,2,c
 25008  0056F2  D002               	goto	l1419
 25009                           
 25010                           ; BSR set to: 0
 25011  0056F4  0E00               	movlw	0
 25012  0056F6  6E2E               	movwf	_NUM_NOTES_PRESSED,c
 25013  0056F8                     l1419:
 25014  0056F8                     l27278:
 25015                           
 25016                           ; BSR set to: 0
 25017                           ;keyboard.c: 130: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 25018  0056F8  B004               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 25019                           
 25020                           ; BSR set to: 0
 25021  0056FA  AE03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 25022  0056FC  D001               	goto	l1420
 25023                           
 25024                           ; BSR set to: 0
 25025                           ;keyboard.c: 131: LATCH = 1;
 25026  0056FE  8404               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 25027  005700                     l1420:
 25028                           
 25029                           ; BSR set to: 0
 25030                           ;keyboard.c: 132: }
 25031                           ;keyboard.c: 135: if((UN_LATCH_MODE == 0) && (latch_was_pressed == 1)){
 25032  005700  A204               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 25033                           
 25034                           ; BSR set to: 0
 25035  005702  AE03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 25036  005704  D004               	goto	l1421
 25037                           
 25038                           ; BSR set to: 0
 25039                           ;keyboard.c: 136: NUM_NOTES_PRESSED = 0;
 25040  005706  0E00               	movlw	0
 25041  005708  6E2E               	movwf	_NUM_NOTES_PRESSED,c
 25042                           
 25043                           ;keyboard.c: 137: ARRAY_INDEX = 0;
 25044  00570A  0E00               	movlw	0
 25045  00570C  6FEC               	movwf	_ARRAY_INDEX& (0+255),b
 25046  00570E                     l1421:
 25047                           
 25048                           ; BSR set to: 0
 25049                           ;keyboard.c: 138: }
 25050                           ;keyboard.c: 141: finish_arpeggio_setup();
 25051                           
 25052                           ; BSR set to: 0
 25053  00570E  ECD8  F04C         	call	_finish_arpeggio_setup	;wreg free
 25054                           
 25055                           ;keyboard.c: 144: TMR0ON = 1;
 25056  005712  8ED5               	bsf	4053,7,c	;volatile
 25057  005714  0012               	return	
 25058  005716                     __end_of_playThisNotePentatonic:
 25059                           	opt stack 0
 25060                           tblptru	equ	0xFF8
 25061                           tblptrh	equ	0xFF7
 25062                           tblptrl	equ	0xFF6
 25063                           tablat	equ	0xFF5
 25064                           prodh	equ	0xFF4
 25065                           prodl	equ	0xFF3
 25066                           intcon	equ	0xFF2
 25067                           intcon2	equ	0xFF1
 25068                           postinc0	equ	0xFEE
 25069                           wreg	equ	0xFE8
 25070                           postinc1	equ	0xFE6
 25071                           plusw1	equ	0xFE3
 25072                           fsr1h	equ	0xFE2
 25073                           fsr1l	equ	0xFE1
 25074                           indf2	equ	0xFDF
 25075                           postinc2	equ	0xFDE
 25076                           postdec2	equ	0xFDD
 25077                           plusw2	equ	0xFDB
 25078                           fsr2h	equ	0xFDA
 25079                           fsr2l	equ	0xFD9
 25080                           status	equ	0xFD8
 25081                           
 25082 ;; *************** function _keyboard_eight_note_efficient *****************
 25083 ;; Defined at:
 25084 ;;		line 1378 in file "keyboard.c"
 25085 ;; Parameters:    Size  Location     Type
 25086 ;;		None
 25087 ;; Auto vars:     Size  Location     Type
 25088 ;;  index           1   27[BANK0 ] unsigned char 
 25089 ;;  pitch           1   26[BANK0 ] unsigned char 
 25090 ;; Return value:  Size  Location     Type
 25091 ;;                  1    wreg      void 
 25092 ;; Registers used:
 25093 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25094 ;; Tracked objects:
 25095 ;;		On entry : 0/0
 25096 ;;		On exit  : 0/0
 25097 ;;		Unchanged: 0/0
 25098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 25099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25100 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25102 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 25103 ;;Total ram usage:        2 bytes
 25104 ;; Hardware stack levels used:    1
 25105 ;; Hardware stack levels required when called:   12
 25106 ;; This function calls:
 25107 ;;		_playThisNote8
 25108 ;; This function is called by:
 25109 ;;		_processKeyboard
 25110 ;; This function uses a non-reentrant model
 25111 ;;
 25112                           
 25113                           	psect	text71
 25114  002C16                     __ptext71:
 25115                           	opt stack 0
 25116  002C16                     _keyboard_eight_note_efficient:
 25117                           	opt stack 13
 25118                           
 25119                           ;keyboard.c: 1380: unsigned char pitch;
 25120                           ;keyboard.c: 1381: unsigned char index;
 25121                           ;keyboard.c: 1384: if((button_state_now & 0x00000001) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW1){
 25122                           
 25123                           ;incstack = 0
 25124  002C16  0100               	movlb	0	; () banked
 25125  002C18  B1D9               	btfsc	_button_state_now& (0+255),0,b
 25126                           
 25127                           ; BSR set to: 0
 25128  002C1A  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 25129  002C1C  D00E               	goto	l1746
 25130                           
 25131                           ; BSR set to: 0
 25132  002C1E  B1D1               	btfsc	_keyboard& (0+255),0,b
 25133  002C20  D00C               	goto	l1746
 25134                           
 25135                           ; BSR set to: 0
 25136                           ;keyboard.c: 1385: pitch = C;
 25137  002C22  0E00               	movlw	0
 25138  002C24  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25139                           
 25140                           ;keyboard.c: 1386: index = 0;
 25141  002C26  0E00               	movlw	0
 25142  002C28  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25143                           
 25144                           ; BSR set to: 0
 25145                           ;keyboard.c: 1387: ON_OFF = 1;
 25146  002C2A  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25147                           
 25148                           ; BSR set to: 0
 25149                           ;keyboard.c: 1388: playThisNote8(pitch, index);
 25150  002C2C  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25151  002C30  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25152  002C32  ECF1  F013         	call	_playThisNote8
 25153                           
 25154                           ;keyboard.c: 1389: keyboard.SW1 = 1;
 25155  002C36  0100               	movlb	0	; () banked
 25156  002C38  81D1               	bsf	_keyboard& (0+255),0,b
 25157  002C3A                     l1746:
 25158                           
 25159                           ; BSR set to: 0
 25160                           ;keyboard.c: 1390: }
 25161                           ;keyboard.c: 1391: if((button_state_now & 0x00000004) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW3){
 25162                           
 25163                           ; BSR set to: 0
 25164  002C3A  B5D9               	btfsc	_button_state_now& (0+255),2,b
 25165                           
 25166                           ; BSR set to: 0
 25167  002C3C  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 25168  002C3E  D00E               	goto	l1747
 25169                           
 25170                           ; BSR set to: 0
 25171  002C40  B5D1               	btfsc	_keyboard& (0+255),2,b
 25172  002C42  D00C               	goto	l1747
 25173                           
 25174                           ; BSR set to: 0
 25175                           ;keyboard.c: 1392: pitch = D;
 25176  002C44  0E02               	movlw	2
 25177  002C46  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25178                           
 25179                           ;keyboard.c: 1393: index = 1;
 25180  002C48  0E01               	movlw	1
 25181  002C4A  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25182                           
 25183                           ; BSR set to: 0
 25184                           ;keyboard.c: 1394: ON_OFF = 1;
 25185  002C4C  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25186                           
 25187                           ; BSR set to: 0
 25188                           ;keyboard.c: 1395: playThisNote8(pitch, index);
 25189  002C4E  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25190  002C52  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25191  002C54  ECF1  F013         	call	_playThisNote8
 25192                           
 25193                           ;keyboard.c: 1396: keyboard.SW3 = 1;
 25194  002C58  0100               	movlb	0	; () banked
 25195  002C5A  85D1               	bsf	_keyboard& (0+255),2,b
 25196  002C5C                     l1747:
 25197                           
 25198                           ; BSR set to: 0
 25199                           ;keyboard.c: 1397: }
 25200                           ;keyboard.c: 1398: if((button_state_now & 0x00000010) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW5){
 25201                           
 25202                           ; BSR set to: 0
 25203  002C5C  B9D9               	btfsc	_button_state_now& (0+255),4,b
 25204                           
 25205                           ; BSR set to: 0
 25206  002C5E  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 25207  002C60  D00E               	goto	l1748
 25208                           
 25209                           ; BSR set to: 0
 25210  002C62  B9D1               	btfsc	_keyboard& (0+255),4,b
 25211  002C64  D00C               	goto	l1748
 25212                           
 25213                           ; BSR set to: 0
 25214                           ;keyboard.c: 1399: pitch = E;
 25215  002C66  0E04               	movlw	4
 25216  002C68  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25217                           
 25218                           ;keyboard.c: 1400: index = 2;
 25219  002C6A  0E02               	movlw	2
 25220  002C6C  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25221                           
 25222                           ; BSR set to: 0
 25223                           ;keyboard.c: 1401: ON_OFF = 1;
 25224  002C6E  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25225                           
 25226                           ; BSR set to: 0
 25227                           ;keyboard.c: 1402: playThisNote8(pitch, index);
 25228  002C70  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25229  002C74  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25230  002C76  ECF1  F013         	call	_playThisNote8
 25231                           
 25232                           ;keyboard.c: 1403: keyboard.SW5 = 5;
 25233  002C7A  0100               	movlb	0	; () banked
 25234  002C7C  89D1               	bsf	_keyboard& (0+255),4,b
 25235  002C7E                     l1748:
 25236                           
 25237                           ; BSR set to: 0
 25238                           ;keyboard.c: 1404: }
 25239                           ;keyboard.c: 1405: if((button_state_now & 0x00000020) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW6){
 25240                           
 25241                           ; BSR set to: 0
 25242  002C7E  BBD9               	btfsc	_button_state_now& (0+255),5,b
 25243                           
 25244                           ; BSR set to: 0
 25245  002C80  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 25246  002C82  D00E               	goto	l1749
 25247                           
 25248                           ; BSR set to: 0
 25249  002C84  BBD1               	btfsc	_keyboard& (0+255),5,b
 25250  002C86  D00C               	goto	l1749
 25251                           
 25252                           ; BSR set to: 0
 25253                           ;keyboard.c: 1406: pitch = F;
 25254  002C88  0E05               	movlw	5
 25255  002C8A  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25256                           
 25257                           ;keyboard.c: 1407: index = 3;
 25258  002C8C  0E03               	movlw	3
 25259  002C8E  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25260                           
 25261                           ; BSR set to: 0
 25262                           ;keyboard.c: 1408: ON_OFF = 1;
 25263  002C90  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25264                           
 25265                           ; BSR set to: 0
 25266                           ;keyboard.c: 1409: playThisNote8(pitch, index);
 25267  002C92  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25268  002C96  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25269  002C98  ECF1  F013         	call	_playThisNote8
 25270                           
 25271                           ;keyboard.c: 1410: keyboard.SW6 = 1;
 25272  002C9C  0100               	movlb	0	; () banked
 25273  002C9E  8BD1               	bsf	_keyboard& (0+255),5,b
 25274  002CA0                     l1749:
 25275                           
 25276                           ; BSR set to: 0
 25277                           ;keyboard.c: 1411: }
 25278                           ;keyboard.c: 1412: if((button_state_now & 0x00000080) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW8){
 25279                           
 25280                           ; BSR set to: 0
 25281  002CA0  BFD9               	btfsc	_button_state_now& (0+255),7,b
 25282                           
 25283                           ; BSR set to: 0
 25284  002CA2  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 25285  002CA4  D00E               	goto	l1750
 25286                           
 25287                           ; BSR set to: 0
 25288  002CA6  BFD1               	btfsc	_keyboard& (0+255),7,b
 25289  002CA8  D00C               	goto	l1750
 25290                           
 25291                           ; BSR set to: 0
 25292                           ;keyboard.c: 1413: pitch = G;
 25293  002CAA  0E07               	movlw	7
 25294  002CAC  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25295                           
 25296                           ;keyboard.c: 1414: index = 4;
 25297  002CAE  0E04               	movlw	4
 25298  002CB0  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25299                           
 25300                           ; BSR set to: 0
 25301                           ;keyboard.c: 1415: ON_OFF = 1;
 25302  002CB2  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25303                           
 25304                           ; BSR set to: 0
 25305                           ;keyboard.c: 1416: playThisNote8(pitch, index);
 25306  002CB4  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25307  002CB8  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25308  002CBA  ECF1  F013         	call	_playThisNote8
 25309                           
 25310                           ;keyboard.c: 1417: keyboard.SW8 = 1;
 25311  002CBE  0100               	movlb	0	; () banked
 25312  002CC0  8FD1               	bsf	_keyboard& (0+255),7,b
 25313  002CC2                     l1750:
 25314                           
 25315                           ; BSR set to: 0
 25316                           ;keyboard.c: 1418: }
 25317                           ;keyboard.c: 1419: if((button_state_now & 0x00000200) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW10){
 25318                           
 25319                           ; BSR set to: 0
 25320  002CC2  B3DA               	btfsc	(_button_state_now+1)& (0+255),1,b
 25321                           
 25322                           ; BSR set to: 0
 25323  002CC4  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 25324  002CC6  D00E               	goto	l1751
 25325                           
 25326                           ; BSR set to: 0
 25327  002CC8  B3D2               	btfsc	(_keyboard+1)& (0+255),1,b
 25328  002CCA  D00C               	goto	l1751
 25329                           
 25330                           ; BSR set to: 0
 25331                           ;keyboard.c: 1420: pitch = A;
 25332  002CCC  0E09               	movlw	9
 25333  002CCE  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25334                           
 25335                           ;keyboard.c: 1421: index = 5;
 25336  002CD0  0E05               	movlw	5
 25337  002CD2  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25338                           
 25339                           ; BSR set to: 0
 25340                           ;keyboard.c: 1422: ON_OFF = 1;
 25341  002CD4  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25342                           
 25343                           ; BSR set to: 0
 25344                           ;keyboard.c: 1423: playThisNote8(pitch, index);
 25345  002CD6  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25346  002CDA  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25347  002CDC  ECF1  F013         	call	_playThisNote8
 25348                           
 25349                           ;keyboard.c: 1424: keyboard.SW10 = 1;
 25350  002CE0  0100               	movlb	0	; () banked
 25351  002CE2  83D2               	bsf	(_keyboard+1)& (0+255),1,b
 25352  002CE4                     l1751:
 25353                           
 25354                           ; BSR set to: 0
 25355                           ;keyboard.c: 1425: }
 25356                           ;keyboard.c: 1426: if((button_state_now & 0x00000800) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW12){
 25357                           
 25358                           ; BSR set to: 0
 25359  002CE4  B7DA               	btfsc	(_button_state_now+1)& (0+255),3,b
 25360                           
 25361                           ; BSR set to: 0
 25362  002CE6  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 25363  002CE8  D00E               	goto	l1752
 25364                           
 25365                           ; BSR set to: 0
 25366  002CEA  B7D2               	btfsc	(_keyboard+1)& (0+255),3,b
 25367  002CEC  D00C               	goto	l1752
 25368                           
 25369                           ; BSR set to: 0
 25370                           ;keyboard.c: 1427: pitch = B;
 25371  002CEE  0E0B               	movlw	11
 25372  002CF0  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25373                           
 25374                           ;keyboard.c: 1428: index = 6;
 25375  002CF2  0E06               	movlw	6
 25376  002CF4  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25377                           
 25378                           ; BSR set to: 0
 25379                           ;keyboard.c: 1429: ON_OFF = 1;
 25380  002CF6  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25381                           
 25382                           ; BSR set to: 0
 25383                           ;keyboard.c: 1430: playThisNote8(pitch, index);
 25384  002CF8  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25385  002CFC  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25386  002CFE  ECF1  F013         	call	_playThisNote8
 25387                           
 25388                           ;keyboard.c: 1431: keyboard.SW12 = 1;
 25389  002D02  0100               	movlb	0	; () banked
 25390  002D04  87D2               	bsf	(_keyboard+1)& (0+255),3,b
 25391  002D06                     l1752:
 25392                           
 25393                           ; BSR set to: 0
 25394                           ;keyboard.c: 1432: }
 25395                           ;keyboard.c: 1433: if((button_state_now & 0x00001000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW13){
 25396                           
 25397                           ; BSR set to: 0
 25398  002D06  B9DA               	btfsc	(_button_state_now+1)& (0+255),4,b
 25399                           
 25400                           ; BSR set to: 0
 25401  002D08  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 25402  002D0A  D00E               	goto	l1753
 25403                           
 25404                           ; BSR set to: 0
 25405  002D0C  B9D2               	btfsc	(_keyboard+1)& (0+255),4,b
 25406  002D0E  D00C               	goto	l1753
 25407                           
 25408                           ; BSR set to: 0
 25409                           ;keyboard.c: 1434: pitch = C2;
 25410  002D10  0E0C               	movlw	12
 25411  002D12  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25412                           
 25413                           ;keyboard.c: 1435: index = 7;
 25414  002D14  0E07               	movlw	7
 25415  002D16  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25416                           
 25417                           ; BSR set to: 0
 25418                           ;keyboard.c: 1436: ON_OFF = 1;
 25419  002D18  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25420                           
 25421                           ; BSR set to: 0
 25422                           ;keyboard.c: 1437: playThisNote8(pitch, index);
 25423  002D1A  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25424  002D1E  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25425  002D20  ECF1  F013         	call	_playThisNote8
 25426                           
 25427                           ;keyboard.c: 1438: keyboard.SW13 = 1;
 25428  002D24  0100               	movlb	0	; () banked
 25429  002D26  89D2               	bsf	(_keyboard+1)& (0+255),4,b
 25430  002D28                     l1753:
 25431                           
 25432                           ; BSR set to: 0
 25433                           ;keyboard.c: 1439: }
 25434                           ;keyboard.c: 1440: if((button_state_now & 0x00004000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW15){
 25435                           
 25436                           ; BSR set to: 0
 25437  002D28  BDDA               	btfsc	(_button_state_now+1)& (0+255),6,b
 25438                           
 25439                           ; BSR set to: 0
 25440  002D2A  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 25441  002D2C  D00E               	goto	l1754
 25442                           
 25443                           ; BSR set to: 0
 25444  002D2E  BDD2               	btfsc	(_keyboard+1)& (0+255),6,b
 25445  002D30  D00C               	goto	l1754
 25446                           
 25447                           ; BSR set to: 0
 25448                           ;keyboard.c: 1441: pitch = D2;
 25449  002D32  0E0E               	movlw	14
 25450  002D34  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25451                           
 25452                           ;keyboard.c: 1442: index = 8;
 25453  002D36  0E08               	movlw	8
 25454  002D38  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25455                           
 25456                           ; BSR set to: 0
 25457                           ;keyboard.c: 1443: ON_OFF = 1;
 25458  002D3A  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25459                           
 25460                           ; BSR set to: 0
 25461                           ;keyboard.c: 1444: playThisNote8(pitch, index);
 25462  002D3C  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25463  002D40  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25464  002D42  ECF1  F013         	call	_playThisNote8
 25465                           
 25466                           ;keyboard.c: 1445: keyboard.SW15 = 1;
 25467  002D46  0100               	movlb	0	; () banked
 25468  002D48  8DD2               	bsf	(_keyboard+1)& (0+255),6,b
 25469  002D4A                     l1754:
 25470                           
 25471                           ; BSR set to: 0
 25472                           ;keyboard.c: 1446: }
 25473                           ;keyboard.c: 1447: if((button_state_now & 0x00010000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW17){
 25474                           
 25475                           ; BSR set to: 0
 25476  002D4A  B1DB               	btfsc	(_button_state_now+2)& (0+255),0,b
 25477                           
 25478                           ; BSR set to: 0
 25479  002D4C  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 25480  002D4E  D00E               	goto	l1755
 25481                           
 25482                           ; BSR set to: 0
 25483  002D50  B1D3               	btfsc	(_keyboard+2)& (0+255),0,b
 25484  002D52  D00C               	goto	l1755
 25485                           
 25486                           ; BSR set to: 0
 25487                           ;keyboard.c: 1448: pitch = E2;
 25488  002D54  0E10               	movlw	16
 25489  002D56  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25490                           
 25491                           ;keyboard.c: 1449: index = 9;
 25492  002D58  0E09               	movlw	9
 25493  002D5A  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25494                           
 25495                           ; BSR set to: 0
 25496                           ;keyboard.c: 1450: ON_OFF = 1;
 25497  002D5C  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25498                           
 25499                           ; BSR set to: 0
 25500                           ;keyboard.c: 1451: playThisNote8(pitch, index);
 25501  002D5E  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25502  002D62  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25503  002D64  ECF1  F013         	call	_playThisNote8
 25504                           
 25505                           ;keyboard.c: 1452: keyboard.SW17 = 1;
 25506  002D68  0100               	movlb	0	; () banked
 25507  002D6A  81D3               	bsf	(_keyboard+2)& (0+255),0,b
 25508  002D6C                     l1755:
 25509                           
 25510                           ; BSR set to: 0
 25511                           ;keyboard.c: 1453: }
 25512                           ;keyboard.c: 1454: if((button_state_now & 0x00020000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW18){
 25513                           
 25514                           ; BSR set to: 0
 25515  002D6C  B3DB               	btfsc	(_button_state_now+2)& (0+255),1,b
 25516                           
 25517                           ; BSR set to: 0
 25518  002D6E  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 25519  002D70  D00E               	goto	l1756
 25520                           
 25521                           ; BSR set to: 0
 25522  002D72  B3D3               	btfsc	(_keyboard+2)& (0+255),1,b
 25523  002D74  D00C               	goto	l1756
 25524                           
 25525                           ; BSR set to: 0
 25526                           ;keyboard.c: 1455: pitch = F2;
 25527  002D76  0E11               	movlw	17
 25528  002D78  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25529                           
 25530                           ;keyboard.c: 1456: index = 10;
 25531  002D7A  0E0A               	movlw	10
 25532  002D7C  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25533                           
 25534                           ; BSR set to: 0
 25535                           ;keyboard.c: 1457: ON_OFF = 1;
 25536  002D7E  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25537                           
 25538                           ; BSR set to: 0
 25539                           ;keyboard.c: 1458: playThisNote8(pitch, index);
 25540  002D80  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25541  002D84  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25542  002D86  ECF1  F013         	call	_playThisNote8
 25543                           
 25544                           ;keyboard.c: 1459: keyboard.SW18 = 1;
 25545  002D8A  0100               	movlb	0	; () banked
 25546  002D8C  83D3               	bsf	(_keyboard+2)& (0+255),1,b
 25547  002D8E                     l1756:
 25548                           
 25549                           ; BSR set to: 0
 25550                           ;keyboard.c: 1460: }
 25551                           ;keyboard.c: 1461: if((button_state_now & 0x00080000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW20){
 25552                           
 25553                           ; BSR set to: 0
 25554  002D8E  B7DB               	btfsc	(_button_state_now+2)& (0+255),3,b
 25555                           
 25556                           ; BSR set to: 0
 25557  002D90  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 25558  002D92  D00E               	goto	l1757
 25559                           
 25560                           ; BSR set to: 0
 25561  002D94  B7D3               	btfsc	(_keyboard+2)& (0+255),3,b
 25562  002D96  D00C               	goto	l1757
 25563                           
 25564                           ; BSR set to: 0
 25565                           ;keyboard.c: 1462: pitch = G2;
 25566  002D98  0E13               	movlw	19
 25567  002D9A  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25568                           
 25569                           ;keyboard.c: 1463: index = 11;
 25570  002D9C  0E0B               	movlw	11
 25571  002D9E  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25572                           
 25573                           ; BSR set to: 0
 25574                           ;keyboard.c: 1464: ON_OFF = 1;
 25575  002DA0  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25576                           
 25577                           ; BSR set to: 0
 25578                           ;keyboard.c: 1465: playThisNote8(pitch, index);
 25579  002DA2  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25580  002DA6  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25581  002DA8  ECF1  F013         	call	_playThisNote8
 25582                           
 25583                           ;keyboard.c: 1466: keyboard.SW20 = 1;
 25584  002DAC  0100               	movlb	0	; () banked
 25585  002DAE  87D3               	bsf	(_keyboard+2)& (0+255),3,b
 25586  002DB0                     l1757:
 25587                           
 25588                           ; BSR set to: 0
 25589                           ;keyboard.c: 1467: }
 25590                           ;keyboard.c: 1468: if((button_state_now & 0x00200000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW22){
 25591                           
 25592                           ; BSR set to: 0
 25593  002DB0  BBDB               	btfsc	(_button_state_now+2)& (0+255),5,b
 25594                           
 25595                           ; BSR set to: 0
 25596  002DB2  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 25597  002DB4  D00E               	goto	l1758
 25598                           
 25599                           ; BSR set to: 0
 25600  002DB6  BBD3               	btfsc	(_keyboard+2)& (0+255),5,b
 25601  002DB8  D00C               	goto	l1758
 25602                           
 25603                           ; BSR set to: 0
 25604                           ;keyboard.c: 1469: pitch = A2;
 25605  002DBA  0E15               	movlw	21
 25606  002DBC  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25607                           
 25608                           ;keyboard.c: 1470: index = 12;
 25609  002DBE  0E0C               	movlw	12
 25610  002DC0  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25611                           
 25612                           ; BSR set to: 0
 25613                           ;keyboard.c: 1471: ON_OFF = 1;
 25614  002DC2  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25615                           
 25616                           ; BSR set to: 0
 25617                           ;keyboard.c: 1472: playThisNote8(pitch, index);
 25618  002DC4  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25619  002DC8  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25620  002DCA  ECF1  F013         	call	_playThisNote8
 25621                           
 25622                           ;keyboard.c: 1473: keyboard.SW22 = 1;
 25623  002DCE  0100               	movlb	0	; () banked
 25624  002DD0  8BD3               	bsf	(_keyboard+2)& (0+255),5,b
 25625  002DD2                     l1758:
 25626                           
 25627                           ; BSR set to: 0
 25628                           ;keyboard.c: 1474: }
 25629                           ;keyboard.c: 1475: if((button_state_now & 0x00800000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW24){
 25630                           
 25631                           ; BSR set to: 0
 25632  002DD2  BFDB               	btfsc	(_button_state_now+2)& (0+255),7,b
 25633                           
 25634                           ; BSR set to: 0
 25635  002DD4  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 25636  002DD6  D00E               	goto	l1759
 25637                           
 25638                           ; BSR set to: 0
 25639  002DD8  BFD3               	btfsc	(_keyboard+2)& (0+255),7,b
 25640  002DDA  D00C               	goto	l1759
 25641                           
 25642                           ; BSR set to: 0
 25643                           ;keyboard.c: 1476: pitch = B2;
 25644  002DDC  0E17               	movlw	23
 25645  002DDE  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25646                           
 25647                           ;keyboard.c: 1477: index = 13;
 25648  002DE0  0E0D               	movlw	13
 25649  002DE2  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25650                           
 25651                           ; BSR set to: 0
 25652                           ;keyboard.c: 1478: ON_OFF = 1;
 25653  002DE4  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25654                           
 25655                           ; BSR set to: 0
 25656                           ;keyboard.c: 1479: playThisNote8(pitch, index);
 25657  002DE6  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25658  002DEA  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25659  002DEC  ECF1  F013         	call	_playThisNote8
 25660                           
 25661                           ;keyboard.c: 1480: keyboard.SW24 = 1;
 25662  002DF0  0100               	movlb	0	; () banked
 25663  002DF2  8FD3               	bsf	(_keyboard+2)& (0+255),7,b
 25664  002DF4                     l1759:
 25665                           
 25666                           ; BSR set to: 0
 25667                           ;keyboard.c: 1481: }
 25668                           ;keyboard.c: 1482: if((button_state_now & 0x01000000) && !(button_state_now & 0x08000000
      +                          ) && !keyboard.SW25){
 25669                           
 25670                           ; BSR set to: 0
 25671  002DF4  B1DC               	btfsc	(_button_state_now+3)& (0+255),0,b
 25672                           
 25673                           ; BSR set to: 0
 25674  002DF6  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 25675  002DF8  D00E               	goto	l1760
 25676                           
 25677                           ; BSR set to: 0
 25678  002DFA  B1D4               	btfsc	(_keyboard+3)& (0+255),0,b
 25679  002DFC  D00C               	goto	l1760
 25680                           
 25681                           ; BSR set to: 0
 25682                           ;keyboard.c: 1483: pitch = C3;
 25683  002DFE  0E18               	movlw	24
 25684  002E00  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25685                           
 25686                           ;keyboard.c: 1484: index = 14;
 25687  002E02  0E0E               	movlw	14
 25688  002E04  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25689                           
 25690                           ; BSR set to: 0
 25691                           ;keyboard.c: 1485: ON_OFF = 1;
 25692  002E06  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25693                           
 25694                           ; BSR set to: 0
 25695                           ;keyboard.c: 1486: playThisNote8(pitch, index);
 25696  002E08  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25697  002E0C  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25698  002E0E  ECF1  F013         	call	_playThisNote8
 25699                           
 25700                           ;keyboard.c: 1487: keyboard.SW25 = 1;
 25701  002E12  0100               	movlb	0	; () banked
 25702  002E14  81D4               	bsf	(_keyboard+3)& (0+255),0,b
 25703  002E16                     l1760:
 25704                           
 25705                           ; BSR set to: 0
 25706                           ;keyboard.c: 1488: }
 25707                           ;keyboard.c: 1491: if(((button_state_last & 0x00000001)) && ((button_state_now & 0x00000
      +                          001) == 0) && keyboard.SW1) {
 25708                           
 25709                           ; BSR set to: 0
 25710  002E16  B1D5               	btfsc	_button_state_last& (0+255),0,b
 25711                           
 25712                           ; BSR set to: 0
 25713  002E18  B1D9               	btfsc	_button_state_now& (0+255),0,b
 25714  002E1A  D00E               	goto	l1761
 25715                           
 25716                           ; BSR set to: 0
 25717  002E1C  A1D1               	btfss	_keyboard& (0+255),0,b
 25718  002E1E  D00C               	goto	l1761
 25719                           
 25720                           ; BSR set to: 0
 25721                           ;keyboard.c: 1492: pitch = C;
 25722  002E20  0E00               	movlw	0
 25723  002E22  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25724                           
 25725                           ;keyboard.c: 1493: index = 0;
 25726  002E24  0E00               	movlw	0
 25727  002E26  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25728                           
 25729                           ; BSR set to: 0
 25730                           ;keyboard.c: 1494: ON_OFF = 0;
 25731  002E28  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25732                           
 25733                           ; BSR set to: 0
 25734                           ;keyboard.c: 1495: playThisNote8(pitch, index);
 25735  002E2A  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25736  002E2E  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25737  002E30  ECF1  F013         	call	_playThisNote8
 25738                           
 25739                           ;keyboard.c: 1496: keyboard.SW1 = 0;
 25740  002E34  0100               	movlb	0	; () banked
 25741  002E36  91D1               	bcf	_keyboard& (0+255),0,b
 25742  002E38                     l1761:
 25743                           
 25744                           ; BSR set to: 0
 25745                           ;keyboard.c: 1497: }
 25746                           ;keyboard.c: 1498: if(((button_state_last & 0x00000004)) && ((button_state_now & 0x00000
      +                          004) == 0) && keyboard.SW3) {
 25747                           
 25748                           ; BSR set to: 0
 25749  002E38  B5D5               	btfsc	_button_state_last& (0+255),2,b
 25750                           
 25751                           ; BSR set to: 0
 25752  002E3A  B5D9               	btfsc	_button_state_now& (0+255),2,b
 25753  002E3C  D00E               	goto	l1762
 25754                           
 25755                           ; BSR set to: 0
 25756  002E3E  A5D1               	btfss	_keyboard& (0+255),2,b
 25757  002E40  D00C               	goto	l1762
 25758                           
 25759                           ; BSR set to: 0
 25760                           ;keyboard.c: 1499: pitch = D;
 25761  002E42  0E02               	movlw	2
 25762  002E44  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25763                           
 25764                           ;keyboard.c: 1500: index = 1;
 25765  002E46  0E01               	movlw	1
 25766  002E48  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25767                           
 25768                           ; BSR set to: 0
 25769                           ;keyboard.c: 1501: ON_OFF = 0;
 25770  002E4A  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25771                           
 25772                           ; BSR set to: 0
 25773                           ;keyboard.c: 1502: playThisNote8(pitch, index);
 25774  002E4C  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25775  002E50  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25776  002E52  ECF1  F013         	call	_playThisNote8
 25777                           
 25778                           ;keyboard.c: 1503: keyboard.SW3 = 0;
 25779  002E56  0100               	movlb	0	; () banked
 25780  002E58  95D1               	bcf	_keyboard& (0+255),2,b
 25781  002E5A                     l1762:
 25782                           
 25783                           ; BSR set to: 0
 25784                           ;keyboard.c: 1504: }
 25785                           ;keyboard.c: 1505: if(((button_state_last & 0x00000010)) && ((button_state_now & 0x00000
      +                          010) == 0) && keyboard.SW5) {
 25786                           
 25787                           ; BSR set to: 0
 25788  002E5A  B9D5               	btfsc	_button_state_last& (0+255),4,b
 25789                           
 25790                           ; BSR set to: 0
 25791  002E5C  B9D9               	btfsc	_button_state_now& (0+255),4,b
 25792  002E5E  D00E               	goto	l1763
 25793                           
 25794                           ; BSR set to: 0
 25795  002E60  A9D1               	btfss	_keyboard& (0+255),4,b
 25796  002E62  D00C               	goto	l1763
 25797                           
 25798                           ; BSR set to: 0
 25799                           ;keyboard.c: 1506: pitch = E;
 25800  002E64  0E04               	movlw	4
 25801  002E66  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25802                           
 25803                           ;keyboard.c: 1507: index = 2;
 25804  002E68  0E02               	movlw	2
 25805  002E6A  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25806                           
 25807                           ; BSR set to: 0
 25808                           ;keyboard.c: 1508: ON_OFF = 0;
 25809  002E6C  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25810                           
 25811                           ; BSR set to: 0
 25812                           ;keyboard.c: 1509: playThisNote8(pitch, index);
 25813  002E6E  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25814  002E72  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25815  002E74  ECF1  F013         	call	_playThisNote8
 25816                           
 25817                           ;keyboard.c: 1510: keyboard.SW5 = 0;
 25818  002E78  0100               	movlb	0	; () banked
 25819  002E7A  99D1               	bcf	_keyboard& (0+255),4,b
 25820  002E7C                     l1763:
 25821                           
 25822                           ; BSR set to: 0
 25823                           ;keyboard.c: 1511: }
 25824                           ;keyboard.c: 1512: if(((button_state_last & 0x00000020)) && ((button_state_now & 0x00000
      +                          020) == 0) && keyboard.SW6) {
 25825                           
 25826                           ; BSR set to: 0
 25827  002E7C  BBD5               	btfsc	_button_state_last& (0+255),5,b
 25828                           
 25829                           ; BSR set to: 0
 25830  002E7E  BBD9               	btfsc	_button_state_now& (0+255),5,b
 25831  002E80  D00E               	goto	l1764
 25832                           
 25833                           ; BSR set to: 0
 25834  002E82  ABD1               	btfss	_keyboard& (0+255),5,b
 25835  002E84  D00C               	goto	l1764
 25836                           
 25837                           ; BSR set to: 0
 25838                           ;keyboard.c: 1513: pitch = F;
 25839  002E86  0E05               	movlw	5
 25840  002E88  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25841                           
 25842                           ;keyboard.c: 1514: index = 3;
 25843  002E8A  0E03               	movlw	3
 25844  002E8C  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25845                           
 25846                           ; BSR set to: 0
 25847                           ;keyboard.c: 1515: ON_OFF = 0;
 25848  002E8E  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25849                           
 25850                           ; BSR set to: 0
 25851                           ;keyboard.c: 1516: playThisNote8(pitch, index);
 25852  002E90  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25853  002E94  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25854  002E96  ECF1  F013         	call	_playThisNote8
 25855                           
 25856                           ;keyboard.c: 1517: keyboard.SW6 = 0;
 25857  002E9A  0100               	movlb	0	; () banked
 25858  002E9C  9BD1               	bcf	_keyboard& (0+255),5,b
 25859  002E9E                     l1764:
 25860                           
 25861                           ; BSR set to: 0
 25862                           ;keyboard.c: 1518: }
 25863                           ;keyboard.c: 1519: if(((button_state_last & 0x00000080)) && ((button_state_now & 0x00000
      +                          080) == 0) && keyboard.SW8) {
 25864                           
 25865                           ; BSR set to: 0
 25866  002E9E  BFD5               	btfsc	_button_state_last& (0+255),7,b
 25867                           
 25868                           ; BSR set to: 0
 25869  002EA0  BFD9               	btfsc	_button_state_now& (0+255),7,b
 25870  002EA2  D00E               	goto	l1765
 25871                           
 25872                           ; BSR set to: 0
 25873  002EA4  AFD1               	btfss	_keyboard& (0+255),7,b
 25874  002EA6  D00C               	goto	l1765
 25875                           
 25876                           ; BSR set to: 0
 25877                           ;keyboard.c: 1520: pitch = G;
 25878  002EA8  0E07               	movlw	7
 25879  002EAA  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25880                           
 25881                           ;keyboard.c: 1521: index = 4;
 25882  002EAC  0E04               	movlw	4
 25883  002EAE  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25884                           
 25885                           ; BSR set to: 0
 25886                           ;keyboard.c: 1522: ON_OFF = 0;
 25887  002EB0  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25888                           
 25889                           ; BSR set to: 0
 25890                           ;keyboard.c: 1523: playThisNote8(pitch, index);
 25891  002EB2  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25892  002EB6  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25893  002EB8  ECF1  F013         	call	_playThisNote8
 25894                           
 25895                           ;keyboard.c: 1524: keyboard.SW8 = 0;
 25896  002EBC  0100               	movlb	0	; () banked
 25897  002EBE  9FD1               	bcf	_keyboard& (0+255),7,b
 25898  002EC0                     l1765:
 25899                           
 25900                           ; BSR set to: 0
 25901                           ;keyboard.c: 1525: }
 25902                           ;keyboard.c: 1526: if(((button_state_last & 0x00000200)) && ((button_state_now & 0x00000
      +                          200) == 0) && keyboard.SW10) {
 25903                           
 25904                           ; BSR set to: 0
 25905  002EC0  B3D6               	btfsc	(_button_state_last+1)& (0+255),1,b
 25906                           
 25907                           ; BSR set to: 0
 25908  002EC2  B3DA               	btfsc	(_button_state_now+1)& (0+255),1,b
 25909  002EC4  D00E               	goto	l1766
 25910                           
 25911                           ; BSR set to: 0
 25912  002EC6  A3D2               	btfss	(_keyboard+1)& (0+255),1,b
 25913  002EC8  D00C               	goto	l1766
 25914                           
 25915                           ; BSR set to: 0
 25916                           ;keyboard.c: 1527: pitch = A;
 25917  002ECA  0E09               	movlw	9
 25918  002ECC  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25919                           
 25920                           ;keyboard.c: 1528: index = 5;
 25921  002ECE  0E05               	movlw	5
 25922  002ED0  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25923                           
 25924                           ; BSR set to: 0
 25925                           ;keyboard.c: 1529: ON_OFF = 0;
 25926  002ED2  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25927                           
 25928                           ; BSR set to: 0
 25929                           ;keyboard.c: 1530: playThisNote8(pitch, index);
 25930  002ED4  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25931  002ED8  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25932  002EDA  ECF1  F013         	call	_playThisNote8
 25933                           
 25934                           ;keyboard.c: 1531: keyboard.SW10 = 10;
 25935  002EDE  0100               	movlb	0	; () banked
 25936  002EE0  93D2               	bcf	(_keyboard+1)& (0+255),1,b
 25937  002EE2                     l1766:
 25938                           
 25939                           ; BSR set to: 0
 25940                           ;keyboard.c: 1532: }
 25941                           ;keyboard.c: 1533: if(((button_state_last & 0x00000800)) && ((button_state_now & 0x00000
      +                          800) == 0) && keyboard.SW12) {
 25942                           
 25943                           ; BSR set to: 0
 25944  002EE2  B7D6               	btfsc	(_button_state_last+1)& (0+255),3,b
 25945                           
 25946                           ; BSR set to: 0
 25947  002EE4  B7DA               	btfsc	(_button_state_now+1)& (0+255),3,b
 25948  002EE6  D00E               	goto	l1767
 25949                           
 25950                           ; BSR set to: 0
 25951  002EE8  A7D2               	btfss	(_keyboard+1)& (0+255),3,b
 25952  002EEA  D00C               	goto	l1767
 25953                           
 25954                           ; BSR set to: 0
 25955                           ;keyboard.c: 1534: pitch = B;
 25956  002EEC  0E0B               	movlw	11
 25957  002EEE  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25958                           
 25959                           ;keyboard.c: 1535: index = 6;
 25960  002EF0  0E06               	movlw	6
 25961  002EF2  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 25962                           
 25963                           ; BSR set to: 0
 25964                           ;keyboard.c: 1536: ON_OFF = 0;
 25965  002EF4  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 25966                           
 25967                           ; BSR set to: 0
 25968                           ;keyboard.c: 1537: playThisNote8(pitch, index);
 25969  002EF6  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 25970  002EFA  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 25971  002EFC  ECF1  F013         	call	_playThisNote8
 25972                           
 25973                           ;keyboard.c: 1538: keyboard.SW12 = 0;
 25974  002F00  0100               	movlb	0	; () banked
 25975  002F02  97D2               	bcf	(_keyboard+1)& (0+255),3,b
 25976  002F04                     l1767:
 25977                           
 25978                           ; BSR set to: 0
 25979                           ;keyboard.c: 1539: }
 25980                           ;keyboard.c: 1540: if(((button_state_last & 0x00001000)) && ((button_state_now & 0x00001
      +                          000) == 0) && keyboard.SW13) {
 25981                           
 25982                           ; BSR set to: 0
 25983  002F04  B9D6               	btfsc	(_button_state_last+1)& (0+255),4,b
 25984                           
 25985                           ; BSR set to: 0
 25986  002F06  B9DA               	btfsc	(_button_state_now+1)& (0+255),4,b
 25987  002F08  D00E               	goto	l1768
 25988                           
 25989                           ; BSR set to: 0
 25990  002F0A  A9D2               	btfss	(_keyboard+1)& (0+255),4,b
 25991  002F0C  D00C               	goto	l1768
 25992                           
 25993                           ; BSR set to: 0
 25994                           ;keyboard.c: 1541: pitch = C2;
 25995  002F0E  0E0C               	movlw	12
 25996  002F10  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 25997                           
 25998                           ;keyboard.c: 1542: index = 7;
 25999  002F12  0E07               	movlw	7
 26000  002F14  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 26001                           
 26002                           ; BSR set to: 0
 26003                           ;keyboard.c: 1543: ON_OFF = 0;
 26004  002F16  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26005                           
 26006                           ; BSR set to: 0
 26007                           ;keyboard.c: 1544: playThisNote8(pitch, index);
 26008  002F18  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 26009  002F1C  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 26010  002F1E  ECF1  F013         	call	_playThisNote8
 26011                           
 26012                           ;keyboard.c: 1545: keyboard.SW13 = 0;
 26013  002F22  0100               	movlb	0	; () banked
 26014  002F24  99D2               	bcf	(_keyboard+1)& (0+255),4,b
 26015  002F26                     l1768:
 26016                           
 26017                           ; BSR set to: 0
 26018                           ;keyboard.c: 1546: }
 26019                           ;keyboard.c: 1547: if(((button_state_last & 0x00004000)) && ((button_state_now & 0x00004
      +                          000) == 0) && keyboard.SW15) {
 26020                           
 26021                           ; BSR set to: 0
 26022  002F26  BDD6               	btfsc	(_button_state_last+1)& (0+255),6,b
 26023                           
 26024                           ; BSR set to: 0
 26025  002F28  BDDA               	btfsc	(_button_state_now+1)& (0+255),6,b
 26026  002F2A  D00E               	goto	l1769
 26027                           
 26028                           ; BSR set to: 0
 26029  002F2C  ADD2               	btfss	(_keyboard+1)& (0+255),6,b
 26030  002F2E  D00C               	goto	l1769
 26031                           
 26032                           ; BSR set to: 0
 26033                           ;keyboard.c: 1548: pitch = D2;
 26034  002F30  0E0E               	movlw	14
 26035  002F32  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 26036                           
 26037                           ;keyboard.c: 1549: index = 8;
 26038  002F34  0E08               	movlw	8
 26039  002F36  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 26040                           
 26041                           ; BSR set to: 0
 26042                           ;keyboard.c: 1550: ON_OFF = 0;
 26043  002F38  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26044                           
 26045                           ; BSR set to: 0
 26046                           ;keyboard.c: 1551: playThisNote8(pitch, index);
 26047  002F3A  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 26048  002F3E  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 26049  002F40  ECF1  F013         	call	_playThisNote8
 26050                           
 26051                           ;keyboard.c: 1552: keyboard.SW15 = 0;
 26052  002F44  0100               	movlb	0	; () banked
 26053  002F46  9DD2               	bcf	(_keyboard+1)& (0+255),6,b
 26054  002F48                     l1769:
 26055                           
 26056                           ; BSR set to: 0
 26057                           ;keyboard.c: 1553: }
 26058                           ;keyboard.c: 1554: if(((button_state_last & 0x00010000)) && ((button_state_now & 0x00010
      +                          000) == 0) && keyboard.SW17) {
 26059                           
 26060                           ; BSR set to: 0
 26061  002F48  B1D7               	btfsc	(_button_state_last+2)& (0+255),0,b
 26062                           
 26063                           ; BSR set to: 0
 26064  002F4A  B1DB               	btfsc	(_button_state_now+2)& (0+255),0,b
 26065  002F4C  D00E               	goto	l1770
 26066                           
 26067                           ; BSR set to: 0
 26068  002F4E  A1D3               	btfss	(_keyboard+2)& (0+255),0,b
 26069  002F50  D00C               	goto	l1770
 26070                           
 26071                           ; BSR set to: 0
 26072                           ;keyboard.c: 1555: pitch = E2;
 26073  002F52  0E10               	movlw	16
 26074  002F54  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 26075                           
 26076                           ;keyboard.c: 1556: index = 9;
 26077  002F56  0E09               	movlw	9
 26078  002F58  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 26079                           
 26080                           ; BSR set to: 0
 26081                           ;keyboard.c: 1557: ON_OFF = 0;
 26082  002F5A  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26083                           
 26084                           ; BSR set to: 0
 26085                           ;keyboard.c: 1558: playThisNote8(pitch, index);
 26086  002F5C  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 26087  002F60  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 26088  002F62  ECF1  F013         	call	_playThisNote8
 26089                           
 26090                           ;keyboard.c: 1559: keyboard.SW17 = 0;
 26091  002F66  0100               	movlb	0	; () banked
 26092  002F68  91D3               	bcf	(_keyboard+2)& (0+255),0,b
 26093  002F6A                     l1770:
 26094                           
 26095                           ; BSR set to: 0
 26096                           ;keyboard.c: 1560: }
 26097                           ;keyboard.c: 1561: if(((button_state_last & 0x00020000)) && ((button_state_now & 0x00020
      +                          000) == 0) && keyboard.SW18) {
 26098                           
 26099                           ; BSR set to: 0
 26100  002F6A  B3D7               	btfsc	(_button_state_last+2)& (0+255),1,b
 26101                           
 26102                           ; BSR set to: 0
 26103  002F6C  B3DB               	btfsc	(_button_state_now+2)& (0+255),1,b
 26104  002F6E  D00E               	goto	l1771
 26105                           
 26106                           ; BSR set to: 0
 26107  002F70  A3D3               	btfss	(_keyboard+2)& (0+255),1,b
 26108  002F72  D00C               	goto	l1771
 26109                           
 26110                           ; BSR set to: 0
 26111                           ;keyboard.c: 1562: pitch = F2;
 26112  002F74  0E11               	movlw	17
 26113  002F76  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 26114                           
 26115                           ;keyboard.c: 1563: index = 10;
 26116  002F78  0E0A               	movlw	10
 26117  002F7A  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 26118                           
 26119                           ; BSR set to: 0
 26120                           ;keyboard.c: 1564: ON_OFF = 0;
 26121  002F7C  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26122                           
 26123                           ; BSR set to: 0
 26124                           ;keyboard.c: 1565: playThisNote8(pitch, index);
 26125  002F7E  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 26126  002F82  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 26127  002F84  ECF1  F013         	call	_playThisNote8
 26128                           
 26129                           ;keyboard.c: 1566: keyboard.SW18 = 0;
 26130  002F88  0100               	movlb	0	; () banked
 26131  002F8A  93D3               	bcf	(_keyboard+2)& (0+255),1,b
 26132  002F8C                     l1771:
 26133                           
 26134                           ; BSR set to: 0
 26135                           ;keyboard.c: 1567: }
 26136                           ;keyboard.c: 1568: if(((button_state_last & 0x00080000)) && ((button_state_now & 0x00080
      +                          000) == 0) && keyboard.SW20) {
 26137                           
 26138                           ; BSR set to: 0
 26139  002F8C  B7D7               	btfsc	(_button_state_last+2)& (0+255),3,b
 26140                           
 26141                           ; BSR set to: 0
 26142  002F8E  B7DB               	btfsc	(_button_state_now+2)& (0+255),3,b
 26143  002F90  D00E               	goto	l1772
 26144                           
 26145                           ; BSR set to: 0
 26146  002F92  A7D3               	btfss	(_keyboard+2)& (0+255),3,b
 26147  002F94  D00C               	goto	l1772
 26148                           
 26149                           ; BSR set to: 0
 26150                           ;keyboard.c: 1569: pitch = G2;
 26151  002F96  0E13               	movlw	19
 26152  002F98  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 26153                           
 26154                           ;keyboard.c: 1570: index = 11;
 26155  002F9A  0E0B               	movlw	11
 26156  002F9C  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 26157                           
 26158                           ; BSR set to: 0
 26159                           ;keyboard.c: 1571: ON_OFF = 0;
 26160  002F9E  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26161                           
 26162                           ; BSR set to: 0
 26163                           ;keyboard.c: 1572: playThisNote8(pitch, index);
 26164  002FA0  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 26165  002FA4  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 26166  002FA6  ECF1  F013         	call	_playThisNote8
 26167                           
 26168                           ;keyboard.c: 1573: keyboard.SW20 = 0;
 26169  002FAA  0100               	movlb	0	; () banked
 26170  002FAC  97D3               	bcf	(_keyboard+2)& (0+255),3,b
 26171  002FAE                     l1772:
 26172                           
 26173                           ; BSR set to: 0
 26174                           ;keyboard.c: 1574: }
 26175                           ;keyboard.c: 1575: if(((button_state_last & 0x00200000)) && ((button_state_now & 0x00200
      +                          000) == 0) && keyboard.SW22) {
 26176                           
 26177                           ; BSR set to: 0
 26178  002FAE  BBD7               	btfsc	(_button_state_last+2)& (0+255),5,b
 26179                           
 26180                           ; BSR set to: 0
 26181  002FB0  BBDB               	btfsc	(_button_state_now+2)& (0+255),5,b
 26182  002FB2  D00E               	goto	l1773
 26183                           
 26184                           ; BSR set to: 0
 26185  002FB4  ABD3               	btfss	(_keyboard+2)& (0+255),5,b
 26186  002FB6  D00C               	goto	l1773
 26187                           
 26188                           ; BSR set to: 0
 26189                           ;keyboard.c: 1576: pitch = A2;
 26190  002FB8  0E15               	movlw	21
 26191  002FBA  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 26192                           
 26193                           ;keyboard.c: 1577: index = 12;
 26194  002FBC  0E0C               	movlw	12
 26195  002FBE  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 26196                           
 26197                           ; BSR set to: 0
 26198                           ;keyboard.c: 1578: ON_OFF = 0;
 26199  002FC0  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26200                           
 26201                           ; BSR set to: 0
 26202                           ;keyboard.c: 1579: playThisNote8(pitch, index);
 26203  002FC2  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 26204  002FC6  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 26205  002FC8  ECF1  F013         	call	_playThisNote8
 26206                           
 26207                           ;keyboard.c: 1580: keyboard.SW22 = 0;
 26208  002FCC  0100               	movlb	0	; () banked
 26209  002FCE  9BD3               	bcf	(_keyboard+2)& (0+255),5,b
 26210  002FD0                     l1773:
 26211                           
 26212                           ; BSR set to: 0
 26213                           ;keyboard.c: 1581: }
 26214                           ;keyboard.c: 1582: if(((button_state_last & 0x00800000)) && ((button_state_now & 0x00800
      +                          000) == 0) && keyboard.SW24) {
 26215                           
 26216                           ; BSR set to: 0
 26217  002FD0  BFD7               	btfsc	(_button_state_last+2)& (0+255),7,b
 26218                           
 26219                           ; BSR set to: 0
 26220  002FD2  BFDB               	btfsc	(_button_state_now+2)& (0+255),7,b
 26221  002FD4  D00E               	goto	l1774
 26222                           
 26223                           ; BSR set to: 0
 26224  002FD6  AFD3               	btfss	(_keyboard+2)& (0+255),7,b
 26225  002FD8  D00C               	goto	l1774
 26226                           
 26227                           ; BSR set to: 0
 26228                           ;keyboard.c: 1583: pitch = B2;
 26229  002FDA  0E17               	movlw	23
 26230  002FDC  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 26231                           
 26232                           ;keyboard.c: 1584: index = 13;
 26233  002FDE  0E0D               	movlw	13
 26234  002FE0  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 26235                           
 26236                           ; BSR set to: 0
 26237                           ;keyboard.c: 1585: ON_OFF = 0;
 26238  002FE2  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26239                           
 26240                           ; BSR set to: 0
 26241                           ;keyboard.c: 1586: playThisNote8(pitch, index);
 26242  002FE4  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 26243  002FE8  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 26244  002FEA  ECF1  F013         	call	_playThisNote8
 26245                           
 26246                           ;keyboard.c: 1587: keyboard.SW24 = 0;
 26247  002FEE  0100               	movlb	0	; () banked
 26248  002FF0  9FD3               	bcf	(_keyboard+2)& (0+255),7,b
 26249  002FF2                     l1774:
 26250                           
 26251                           ; BSR set to: 0
 26252                           ;keyboard.c: 1588: }
 26253                           ;keyboard.c: 1589: if(((button_state_last & 0x01000000)) && ((button_state_now & 0x01000
      +                          000) == 0) && keyboard.SW25) {
 26254                           
 26255                           ; BSR set to: 0
 26256  002FF2  A1D8               	btfss	(_button_state_last+3)& (0+255),0,b
 26257  002FF4  0012               	return	
 26258                           
 26259                           ; BSR set to: 0
 26260  002FF6  B1DC               	btfsc	(_button_state_now+3)& (0+255),0,b
 26261  002FF8  0012               	return	
 26262                           
 26263                           ; BSR set to: 0
 26264  002FFA  A1D4               	btfss	(_keyboard+3)& (0+255),0,b
 26265  002FFC  0012               	return	
 26266                           
 26267                           ; BSR set to: 0
 26268                           ;keyboard.c: 1590: pitch = C;
 26269  002FFE  0E00               	movlw	0
 26270  003000  6F7A               	movwf	keyboard_eight_note_efficient@pitch& (0+255),b
 26271                           
 26272                           ;keyboard.c: 1591: index = 14;
 26273  003002  0E0E               	movlw	14
 26274  003004  6F7B               	movwf	keyboard_eight_note_efficient@index& (0+255),b
 26275                           
 26276                           ; BSR set to: 0
 26277                           ;keyboard.c: 1592: ON_OFF = 0;
 26278  003006  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26279                           
 26280                           ; BSR set to: 0
 26281                           ;keyboard.c: 1593: playThisNote8(pitch, index);
 26282  003008  C07B  F071         	movff	keyboard_eight_note_efficient@index,playThisNote8@index
 26283  00300C  517A               	movf	keyboard_eight_note_efficient@pitch& (0+255),w,b
 26284  00300E  ECF1  F013         	call	_playThisNote8
 26285                           
 26286                           ;keyboard.c: 1594: keyboard.SW25 = 0;
 26287  003012  0100               	movlb	0	; () banked
 26288  003014  91D4               	bcf	(_keyboard+3)& (0+255),0,b
 26289  003016  0012               	return	
 26290  003018                     __end_of_keyboard_eight_note_efficient:
 26291                           	opt stack 0
 26292                           tblptru	equ	0xFF8
 26293                           tblptrh	equ	0xFF7
 26294                           tblptrl	equ	0xFF6
 26295                           tablat	equ	0xFF5
 26296                           prodh	equ	0xFF4
 26297                           prodl	equ	0xFF3
 26298                           intcon	equ	0xFF2
 26299                           intcon2	equ	0xFF1
 26300                           postinc0	equ	0xFEE
 26301                           wreg	equ	0xFE8
 26302                           postinc1	equ	0xFE6
 26303                           plusw1	equ	0xFE3
 26304                           fsr1h	equ	0xFE2
 26305                           fsr1l	equ	0xFE1
 26306                           indf2	equ	0xFDF
 26307                           postinc2	equ	0xFDE
 26308                           postdec2	equ	0xFDD
 26309                           plusw2	equ	0xFDB
 26310                           fsr2h	equ	0xFDA
 26311                           fsr2l	equ	0xFD9
 26312                           status	equ	0xFD8
 26313                           
 26314 ;; *************** function _playThisNote8 *****************
 26315 ;; Defined at:
 26316 ;;		line 913 in file "keyboard.c"
 26317 ;; Parameters:    Size  Location     Type
 26318 ;;  pitch           1    wreg     unsigned char 
 26319 ;;  index           1   17[BANK0 ] unsigned char 
 26320 ;; Auto vars:     Size  Location     Type
 26321 ;;  pitch           1   22[BANK0 ] unsigned char 
 26322 ;;  temp_pitch      1   23[BANK0 ] unsigned char 
 26323 ;;  mode_p          2   24[BANK0 ] PTR unsigned char 
 26324 ;;		 -> locrian_key(15), aeolian_key(15), mixolydian_key(15), lydian_key(15), 
 26325 ;;		 -> phrygian_key(15), dorian_key(15), ionian_key(15), 
 26326 ;; Return value:  Size  Location     Type
 26327 ;;                  1    wreg      void 
 26328 ;; Registers used:
 26329 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26330 ;; Tracked objects:
 26331 ;;		On entry : 0/0
 26332 ;;		On exit  : 0/0
 26333 ;;		Unchanged: 0/0
 26334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 26335 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26336 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26337 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26338 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 26339 ;;Total ram usage:        9 bytes
 26340 ;; Hardware stack levels used:    1
 26341 ;; Hardware stack levels required when called:   11
 26342 ;; This function calls:
 26343 ;;		_add_notes_to_arpeggio
 26344 ;;		_delete_notes_from_arpeggio
 26345 ;;		_finish_arpeggio_setup
 26346 ;;		_key_press_release_note_off
 26347 ;;		_noteOff
 26348 ;;		_noteOn
 26349 ;;		_playDiatonicSeventhMajor
 26350 ;;		_playDiatonicSeventhMinor
 26351 ;;		_playDiatonicTriadMajor
 26352 ;;		_playDiatonicTriadMinor
 26353 ;;		_wait_one_pulse
 26354 ;; This function is called by:
 26355 ;;		_keyboard_eight_note_efficient
 26356 ;;		_doTheUnLatch
 26357 ;; This function uses a non-reentrant model
 26358 ;;
 26359                           
 26360                           	psect	text72
 26361  0027E2                     __ptext72:
 26362                           	opt stack 0
 26363  0027E2                     _playThisNote8:
 26364                           	opt stack 13
 26365                           
 26366                           ; BSR set to: 0
 26367                           ;incstack = 0
 26368                           ;playThisNote8@pitch stored from wreg
 26369  0027E2  0100               	movlb	0	; () banked
 26370  0027E4  6F76               	movwf	playThisNote8@pitch& (0+255),b
 26371                           
 26372                           ;keyboard.c: 915: unsigned char *mode_p;
 26373                           ;keyboard.c: 918: switch (which_mode) {
 26374  0027E6  D01E               	goto	l1582
 26375  0027E8                     
 26376                           ;keyboard.c: 920: mode_p = ionian_key;
 26377  0027E8  0E55               	movlw	low _ionian_key
 26378  0027EA  0100               	movlb	0	; () banked
 26379  0027EC  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26380  0027EE  0EFD               	movlw	high _ionian_key
 26381  0027F0  D017               	goto	L11
 26382  0027F2                     
 26383                           ; BSR set to: 0
 26384                           ;keyboard.c: 923: mode_p = dorian_key;
 26385                           
 26386                           ; BSR set to: 0
 26387  0027F2  0E46               	movlw	low _dorian_key
 26388  0027F4  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26389  0027F6  0EFD               	movlw	high _dorian_key
 26390  0027F8  D013               	goto	L11
 26391  0027FA                     
 26392                           ; BSR set to: 0
 26393                           ;keyboard.c: 926: mode_p = phrygian_key;
 26394                           
 26395                           ; BSR set to: 0
 26396  0027FA  0E37               	movlw	low _phrygian_key
 26397  0027FC  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26398  0027FE  0EFD               	movlw	high _phrygian_key
 26399  002800  D00F               	goto	L11
 26400  002802                     
 26401                           ; BSR set to: 0
 26402                           ;keyboard.c: 929: mode_p = lydian_key;
 26403                           
 26404                           ; BSR set to: 0
 26405  002802  0E28               	movlw	low _lydian_key
 26406  002804  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26407  002806  0EFD               	movlw	high _lydian_key
 26408  002808  D00B               	goto	L11
 26409  00280A                     
 26410                           ; BSR set to: 0
 26411                           ;keyboard.c: 932: mode_p = mixolydian_key;
 26412                           
 26413                           ; BSR set to: 0
 26414  00280A  0E19               	movlw	low _mixolydian_key
 26415  00280C  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26416  00280E  0EFD               	movlw	high _mixolydian_key
 26417  002810  D007               	goto	L11
 26418  002812                     
 26419                           ; BSR set to: 0
 26420                           ;keyboard.c: 935: mode_p = aeolian_key;
 26421                           
 26422                           ; BSR set to: 0
 26423  002812  0E0A               	movlw	low _aeolian_key
 26424  002814  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26425  002816  0EFD               	movlw	high _aeolian_key
 26426  002818  D003               	goto	L11
 26427  00281A                     
 26428                           ; BSR set to: 0
 26429                           ;keyboard.c: 938: mode_p = locrian_key;
 26430                           
 26431                           ; BSR set to: 0
 26432  00281A  0EFB               	movlw	low _locrian_key
 26433  00281C  6F78               	movwf	playThisNote8@mode_p& (0+255),b
 26434  00281E  0EFC               	movlw	high _locrian_key
 26435  002820                     L11:
 26436  002820  6F79               	movwf	(playThisNote8@mode_p+1)& (0+255),b
 26437                           
 26438                           ; BSR set to: 0
 26439                           ;keyboard.c: 942: }
 26440                           
 26441                           ; BSR set to: 0
 26442                           ;keyboard.c: 941: break;
 26443                           
 26444                           ;keyboard.c: 940: default:
 26445                           
 26446                           ;keyboard.c: 939: break;
 26447  002822  D017               	goto	l1584
 26448  002824                     l1582:
 26449                           
 26450                           ; BSR set to: 0
 26451  002824  0100               	movlb	0	; () banked
 26452  002826  51F2               	movf	_which_mode& (0+255),w,b
 26453                           
 26454                           ; Switch size 1, requested type "space"
 26455                           ; Number of cases is 7, Range of values is 0 to 6
 26456                           ; switch strategies available:
 26457                           ; Name         Instructions Cycles
 26458                           ; simple_byte           22    12 (average)
 26459                           ;	Chosen strategy is simple_byte
 26460  002828  0A00               	xorlw	0	; case 0
 26461  00282A  B4D8               	btfsc	status,2,c
 26462  00282C  D7DD               	goto	l1583
 26463  00282E  0A01               	xorlw	1	; case 1
 26464  002830  B4D8               	btfsc	status,2,c
 26465  002832  D7DF               	goto	l1585
 26466  002834  0A03               	xorlw	3	; case 2
 26467  002836  B4D8               	btfsc	status,2,c
 26468  002838  D7E0               	goto	l1586
 26469  00283A  0A01               	xorlw	1	; case 3
 26470  00283C  B4D8               	btfsc	status,2,c
 26471  00283E  D7E1               	goto	l1587
 26472  002840  0A07               	xorlw	7	; case 4
 26473  002842  B4D8               	btfsc	status,2,c
 26474  002844  D7E2               	goto	l1588
 26475  002846  0A01               	xorlw	1	; case 5
 26476  002848  B4D8               	btfsc	status,2,c
 26477  00284A  D7E3               	goto	l1589
 26478  00284C  0A03               	xorlw	3	; case 6
 26479  00284E  B4D8               	btfsc	status,2,c
 26480  002850  D7E4               	goto	l1590
 26481  002852                     l1584:
 26482                           
 26483                           ; BSR set to: 0
 26484                           ;keyboard.c: 945: if(ARPEGGIO_ON == 0){
 26485  002852  BA04               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 26486  002854  D0D8               	goto	l1605
 26487                           
 26488                           ; BSR set to: 0
 26489                           ;keyboard.c: 947: if(KEYBOARD_MODE == MAJOR) {
 26490  002856  05F3               	decf	_KEYBOARD_MODE& (0+255),w,b
 26491  002858  A4D8               	btfss	status,2,c
 26492  00285A  D027               	goto	l1595
 26493                           
 26494                           ; BSR set to: 0
 26495                           ;keyboard.c: 948: if(ON_OFF == 1) {noteOn(channel,major_key[index],velocity);}
 26496  00285C  A206               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26497  00285E  D011               	goto	l1594
 26498                           
 26499                           ; BSR set to: 0
 26500  002860  5050               	movf	_velocity,w,c
 26501  002862  6EE6               	movwf	postinc1,c
 26502  002864  5171               	movf	playThisNote8@index& (0+255),w,b
 26503  002866  0D01               	mullw	1
 26504  002868  0E78               	movlw	low _major_key
 26505  00286A  24F3               	addwf	prodl,w,c
 26506  00286C  6EF6               	movwf	tblptrl,c
 26507  00286E  0EF3               	movlw	high _major_key
 26508  002870  20F4               	addwfc	prodh,w,c
 26509  002872  6EF7               	movwf	tblptrh,c
 26510  002874                     	if	0	;There are less than 3 active tblptr bytes
 26511  002874                     	endif
 26512  002874  0008               	tblrd		*
 26513  002876  50F5               	movf	tablat,w,c
 26514  002878  6EE6               	movwf	postinc1,c
 26515  00287A  503D               	movf	_channel,w,c
 26516  00287C  6EE6               	movwf	postinc1,c
 26517  00287E  EC10  F046         	call	_noteOn	;wreg free
 26518  002882                     l1594:
 26519                           
 26520                           ;keyboard.c: 949: if(ON_OFF == 0) {noteOff(channel,major_key[index],velocity);}
 26521  002882  B206               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26522  002884  D012               	goto	l1595
 26523  002886  5050               	movf	_velocity,w,c
 26524  002888  6EE6               	movwf	postinc1,c
 26525  00288A  0100               	movlb	0	; () banked
 26526  00288C  5171               	movf	playThisNote8@index& (0+255),w,b
 26527  00288E  0D01               	mullw	1
 26528  002890  0E78               	movlw	low _major_key
 26529  002892  24F3               	addwf	prodl,w,c
 26530  002894  6EF6               	movwf	tblptrl,c
 26531  002896  0EF3               	movlw	high _major_key
 26532  002898  20F4               	addwfc	prodh,w,c
 26533  00289A  6EF7               	movwf	tblptrh,c
 26534  00289C                     	if	0	;There are less than 3 active tblptr bytes
 26535  00289C                     	endif
 26536  00289C  0008               	tblrd		*
 26537  00289E  50F5               	movf	tablat,w,c
 26538  0028A0  6EE6               	movwf	postinc1,c
 26539  0028A2  503D               	movf	_channel,w,c
 26540  0028A4  6EE6               	movwf	postinc1,c
 26541  0028A6  ECA0  F04A         	call	_noteOff	;wreg free
 26542  0028AA                     l1595:
 26543                           
 26544                           ;keyboard.c: 950: }
 26545                           ;keyboard.c: 952: if(KEYBOARD_MODE == MINOR) {
 26546  0028AA  0E02               	movlw	2
 26547  0028AC  0100               	movlb	0	; () banked
 26548  0028AE  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26549  0028B0  A4D8               	btfss	status,2,c
 26550  0028B2  D027               	goto	l1598
 26551                           
 26552                           ; BSR set to: 0
 26553                           ;keyboard.c: 953: if(ON_OFF == 1) {noteOn(channel,minor_key[index],velocity);}
 26554  0028B4  A206               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26555  0028B6  D011               	goto	l1597
 26556                           
 26557                           ; BSR set to: 0
 26558  0028B8  5050               	movf	_velocity,w,c
 26559  0028BA  6EE6               	movwf	postinc1,c
 26560  0028BC  5171               	movf	playThisNote8@index& (0+255),w,b
 26561  0028BE  0D01               	mullw	1
 26562  0028C0  0E69               	movlw	low _minor_key
 26563  0028C2  24F3               	addwf	prodl,w,c
 26564  0028C4  6EF6               	movwf	tblptrl,c
 26565  0028C6  0EF3               	movlw	high _minor_key
 26566  0028C8  20F4               	addwfc	prodh,w,c
 26567  0028CA  6EF7               	movwf	tblptrh,c
 26568  0028CC                     	if	0	;There are less than 3 active tblptr bytes
 26569  0028CC                     	endif
 26570  0028CC  0008               	tblrd		*
 26571  0028CE  50F5               	movf	tablat,w,c
 26572  0028D0  6EE6               	movwf	postinc1,c
 26573  0028D2  503D               	movf	_channel,w,c
 26574  0028D4  6EE6               	movwf	postinc1,c
 26575  0028D6  EC10  F046         	call	_noteOn	;wreg free
 26576  0028DA                     l1597:
 26577                           
 26578                           ;keyboard.c: 954: if(ON_OFF == 0) {noteOff(channel,minor_key[index],velocity);}
 26579  0028DA  B206               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26580  0028DC  D012               	goto	l1598
 26581  0028DE  5050               	movf	_velocity,w,c
 26582  0028E0  6EE6               	movwf	postinc1,c
 26583  0028E2  0100               	movlb	0	; () banked
 26584  0028E4  5171               	movf	playThisNote8@index& (0+255),w,b
 26585  0028E6  0D01               	mullw	1
 26586  0028E8  0E69               	movlw	low _minor_key
 26587  0028EA  24F3               	addwf	prodl,w,c
 26588  0028EC  6EF6               	movwf	tblptrl,c
 26589  0028EE  0EF3               	movlw	high _minor_key
 26590  0028F0  20F4               	addwfc	prodh,w,c
 26591  0028F2  6EF7               	movwf	tblptrh,c
 26592  0028F4                     	if	0	;There are less than 3 active tblptr bytes
 26593  0028F4                     	endif
 26594  0028F4  0008               	tblrd		*
 26595  0028F6  50F5               	movf	tablat,w,c
 26596  0028F8  6EE6               	movwf	postinc1,c
 26597  0028FA  503D               	movf	_channel,w,c
 26598  0028FC  6EE6               	movwf	postinc1,c
 26599  0028FE  ECA0  F04A         	call	_noteOff	;wreg free
 26600  002902                     l1598:
 26601                           
 26602                           ;keyboard.c: 955: }
 26603                           ;keyboard.c: 957: if(KEYBOARD_MODE == MODES) {
 26604  002902  0E03               	movlw	3
 26605  002904  0100               	movlb	0	; () banked
 26606  002906  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26607  002908  A4D8               	btfss	status,2,c
 26608  00290A  D07D               	goto	l1605
 26609                           
 26610                           ; BSR set to: 0
 26611                           ;keyboard.c: 958: if(index == 0) {
 26612  00290C  5171               	movf	playThisNote8@index& (0+255),w,b
 26613  00290E  A4D8               	btfss	status,2,c
 26614  002910  D033               	goto	l1602
 26615                           
 26616                           ; BSR set to: 0
 26617                           ;keyboard.c: 959: if(ON_OFF == 1) {noteOn(channel,mode_p[index],velocity);}
 26618  002912  A206               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26619  002914  D017               	goto	l1601
 26620                           
 26621                           ; BSR set to: 0
 26622  002916  5050               	movf	_velocity,w,c
 26623  002918  6EE6               	movwf	postinc1,c
 26624  00291A  5171               	movf	playThisNote8@index& (0+255),w,b
 26625  00291C  0D01               	mullw	1
 26626  00291E  C078  F072         	movff	playThisNote8@mode_p,??_playThisNote8
 26627  002922  C079  F073         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 26628  002926  50F3               	movf	prodl,w,c
 26629  002928  2772               	addwf	??_playThisNote8& (0+255),f,b
 26630  00292A  50F4               	movf	prodh,w,c
 26631  00292C  2373               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 26632  00292E  C072  FFF6         	movff	??_playThisNote8,tblptrl
 26633  002932  C073  FFF7         	movff	??_playThisNote8+1,tblptrh
 26634  002936                     	if	0	;tblptru may be non-zero
 26635  002936                     	endif
 26636  002936                     	if	0	;tblptru may be non-zero
 26637  002936                     	endif
 26638  002936  0008               	tblrd		*
 26639  002938  50F5               	movf	tablat,w,c
 26640  00293A  6EE6               	movwf	postinc1,c
 26641  00293C  503D               	movf	_channel,w,c
 26642  00293E  6EE6               	movwf	postinc1,c
 26643  002940  EC10  F046         	call	_noteOn	;wreg free
 26644  002944                     l1601:
 26645                           
 26646                           ;keyboard.c: 960: if(ON_OFF == 0) {noteOff(channel,mode_p[index],velocity);}
 26647  002944  B206               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26648  002946  D018               	goto	l1602
 26649  002948  5050               	movf	_velocity,w,c
 26650  00294A  6EE6               	movwf	postinc1,c
 26651  00294C  0100               	movlb	0	; () banked
 26652  00294E  5171               	movf	playThisNote8@index& (0+255),w,b
 26653  002950  0D01               	mullw	1
 26654  002952  C078  F072         	movff	playThisNote8@mode_p,??_playThisNote8
 26655  002956  C079  F073         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 26656  00295A  50F3               	movf	prodl,w,c
 26657  00295C  2772               	addwf	??_playThisNote8& (0+255),f,b
 26658  00295E  50F4               	movf	prodh,w,c
 26659  002960  2373               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 26660  002962  C072  FFF6         	movff	??_playThisNote8,tblptrl
 26661  002966  C073  FFF7         	movff	??_playThisNote8+1,tblptrh
 26662  00296A                     	if	0	;tblptru may be non-zero
 26663  00296A                     	endif
 26664  00296A                     	if	0	;tblptru may be non-zero
 26665  00296A                     	endif
 26666  00296A  0008               	tblrd		*
 26667  00296C  50F5               	movf	tablat,w,c
 26668  00296E  6EE6               	movwf	postinc1,c
 26669  002970  503D               	movf	_channel,w,c
 26670  002972  6EE6               	movwf	postinc1,c
 26671  002974  ECA0  F04A         	call	_noteOff	;wreg free
 26672  002978                     l1602:
 26673                           
 26674                           ;keyboard.c: 961: }
 26675                           ;keyboard.c: 962: if(index > 0) {
 26676  002978  0100               	movlb	0	; () banked
 26677  00297A  5171               	movf	playThisNote8@index& (0+255),w,b
 26678  00297C  B4D8               	btfsc	status,2,c
 26679  00297E  D043               	goto	l1605
 26680                           
 26681                           ; BSR set to: 0
 26682                           ;keyboard.c: 963: if(ON_OFF == 1) {noteOn(channel,mode_p[0] + mode_p[index],velocity);}
 26683  002980  A206               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26684  002982  D01F               	goto	l1604
 26685                           
 26686                           ; BSR set to: 0
 26687  002984  5050               	movf	_velocity,w,c
 26688  002986  6EE6               	movwf	postinc1,c
 26689  002988  5171               	movf	playThisNote8@index& (0+255),w,b
 26690  00298A  0D01               	mullw	1
 26691  00298C  C078  F072         	movff	playThisNote8@mode_p,??_playThisNote8
 26692  002990  C079  F073         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 26693  002994  50F3               	movf	prodl,w,c
 26694  002996  2772               	addwf	??_playThisNote8& (0+255),f,b
 26695  002998  50F4               	movf	prodh,w,c
 26696  00299A  2373               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 26697  00299C  C072  FFF6         	movff	??_playThisNote8,tblptrl
 26698  0029A0  C073  FFF7         	movff	??_playThisNote8+1,tblptrh
 26699  0029A4                     	if	0	;tblptru may be non-zero
 26700  0029A4                     	endif
 26701  0029A4                     	if	0	;tblptru may be non-zero
 26702  0029A4                     	endif
 26703  0029A4  0008               	tblrd		*
 26704  0029A6  CFF5 F074          	movff	tablat,??_playThisNote8+2
 26705  0029AA  C078  FFF6         	movff	playThisNote8@mode_p,tblptrl
 26706  0029AE  C079  FFF7         	movff	playThisNote8@mode_p+1,tblptrh
 26707  0029B2                     	if	0	;tblptru may be non-zero
 26708  0029B2                     	endif
 26709  0029B2                     	if	0	;tblptru may be non-zero
 26710  0029B2                     	endif
 26711  0029B2  0008               	tblrd		*
 26712  0029B4  50F5               	movf	tablat,w,c
 26713  0029B6  2574               	addwf	(??_playThisNote8+2)& (0+255),w,b
 26714  0029B8  6EE6               	movwf	postinc1,c
 26715  0029BA  503D               	movf	_channel,w,c
 26716  0029BC  6EE6               	movwf	postinc1,c
 26717  0029BE  EC10  F046         	call	_noteOn	;wreg free
 26718  0029C2                     l1604:
 26719                           
 26720                           ;keyboard.c: 964: if(ON_OFF == 0) {noteOff(channel,mode_p[0] + mode_p[index],velocity);}
 26721  0029C2  B206               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26722  0029C4  D020               	goto	l1605
 26723  0029C6  5050               	movf	_velocity,w,c
 26724  0029C8  6EE6               	movwf	postinc1,c
 26725  0029CA  0100               	movlb	0	; () banked
 26726  0029CC  5171               	movf	playThisNote8@index& (0+255),w,b
 26727  0029CE  0D01               	mullw	1
 26728  0029D0  C078  F072         	movff	playThisNote8@mode_p,??_playThisNote8
 26729  0029D4  C079  F073         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 26730  0029D8  50F3               	movf	prodl,w,c
 26731  0029DA  2772               	addwf	??_playThisNote8& (0+255),f,b
 26732  0029DC  50F4               	movf	prodh,w,c
 26733  0029DE  2373               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 26734  0029E0  C072  FFF6         	movff	??_playThisNote8,tblptrl
 26735  0029E4  C073  FFF7         	movff	??_playThisNote8+1,tblptrh
 26736  0029E8                     	if	0	;tblptru may be non-zero
 26737  0029E8                     	endif
 26738  0029E8                     	if	0	;tblptru may be non-zero
 26739  0029E8                     	endif
 26740  0029E8  0008               	tblrd		*
 26741  0029EA  CFF5 F074          	movff	tablat,??_playThisNote8+2
 26742  0029EE  C078  FFF6         	movff	playThisNote8@mode_p,tblptrl
 26743  0029F2  C079  FFF7         	movff	playThisNote8@mode_p+1,tblptrh
 26744  0029F6                     	if	0	;tblptru may be non-zero
 26745  0029F6                     	endif
 26746  0029F6                     	if	0	;tblptru may be non-zero
 26747  0029F6                     	endif
 26748  0029F6  0008               	tblrd		*
 26749  0029F8  50F5               	movf	tablat,w,c
 26750  0029FA  2574               	addwf	(??_playThisNote8+2)& (0+255),w,b
 26751  0029FC  6EE6               	movwf	postinc1,c
 26752  0029FE  503D               	movf	_channel,w,c
 26753  002A00  6EE6               	movwf	postinc1,c
 26754  002A02  ECA0  F04A         	call	_noteOff	;wreg free
 26755  002A06                     l1605:
 26756                           
 26757                           ;keyboard.c: 965: }
 26758                           ;keyboard.c: 966: }
 26759                           ;keyboard.c: 967: }
 26760                           ;keyboard.c: 970: if(ARPEGGIO_ON == 1){
 26761  002A06  AA04               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 26762  002A08  D0DD               	goto	l1619
 26763                           
 26764                           ;keyboard.c: 972: unsigned char temp_pitch;
 26765                           ;keyboard.c: 974: if(KEYBOARD_MODE == MAJOR) {
 26766  002A0A  0100               	movlb	0	; () banked
 26767  002A0C  05F3               	decf	_KEYBOARD_MODE& (0+255),w,b
 26768  002A0E  A4D8               	btfss	status,2,c
 26769  002A10  D00B               	goto	l1607
 26770                           
 26771                           ; BSR set to: 0
 26772                           ;keyboard.c: 975: temp_pitch = major_key[index];
 26773  002A12  5171               	movf	playThisNote8@index& (0+255),w,b
 26774  002A14  0D01               	mullw	1
 26775  002A16  0E78               	movlw	low _major_key
 26776  002A18  24F3               	addwf	prodl,w,c
 26777  002A1A  6EF6               	movwf	tblptrl,c
 26778  002A1C  0EF3               	movlw	high _major_key
 26779  002A1E  20F4               	addwfc	prodh,w,c
 26780  002A20  6EF7               	movwf	tblptrh,c
 26781  002A22                     	if	0	;There are less than 3 active tblptr bytes
 26782  002A22                     	endif
 26783  002A22  0008               	tblrd		*
 26784  002A24  CFF5 F077          	movff	tablat,playThisNote8@temp_pitch
 26785  002A28                     l1607:
 26786                           
 26787                           ; BSR set to: 0
 26788                           ;keyboard.c: 976: }
 26789                           ;keyboard.c: 978: if(KEYBOARD_MODE == MINOR) {
 26790                           
 26791                           ; BSR set to: 0
 26792  002A28  0E02               	movlw	2
 26793  002A2A  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26794  002A2C  A4D8               	btfss	status,2,c
 26795  002A2E  D00B               	goto	l1608
 26796                           
 26797                           ; BSR set to: 0
 26798                           ;keyboard.c: 979: temp_pitch = minor_key[index];
 26799  002A30  5171               	movf	playThisNote8@index& (0+255),w,b
 26800  002A32  0D01               	mullw	1
 26801  002A34  0E69               	movlw	low _minor_key
 26802  002A36  24F3               	addwf	prodl,w,c
 26803  002A38  6EF6               	movwf	tblptrl,c
 26804  002A3A  0EF3               	movlw	high _minor_key
 26805  002A3C  20F4               	addwfc	prodh,w,c
 26806  002A3E  6EF7               	movwf	tblptrh,c
 26807  002A40                     	if	0	;There are less than 3 active tblptr bytes
 26808  002A40                     	endif
 26809  002A40  0008               	tblrd		*
 26810  002A42  CFF5 F077          	movff	tablat,playThisNote8@temp_pitch
 26811  002A46                     l1608:
 26812                           
 26813                           ; BSR set to: 0
 26814                           ;keyboard.c: 980: }
 26815                           ;keyboard.c: 982: if(KEYBOARD_MODE == MODES) {
 26816                           
 26817                           ; BSR set to: 0
 26818  002A46  0E03               	movlw	3
 26819  002A48  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26820  002A4A  A4D8               	btfss	status,2,c
 26821  002A4C  D030               	goto	l1611
 26822                           
 26823                           ; BSR set to: 0
 26824                           ;keyboard.c: 983: if(index == 0){temp_pitch = mode_p[index];}
 26825  002A4E  5171               	movf	playThisNote8@index& (0+255),w,b
 26826  002A50  A4D8               	btfss	status,2,c
 26827  002A52  D011               	goto	l1610
 26828                           
 26829                           ; BSR set to: 0
 26830  002A54  5171               	movf	playThisNote8@index& (0+255),w,b
 26831  002A56  0D01               	mullw	1
 26832  002A58  C078  F072         	movff	playThisNote8@mode_p,??_playThisNote8
 26833  002A5C  C079  F073         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 26834  002A60  50F3               	movf	prodl,w,c
 26835  002A62  2772               	addwf	??_playThisNote8& (0+255),f,b
 26836  002A64  50F4               	movf	prodh,w,c
 26837  002A66  2373               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 26838  002A68  C072  FFF6         	movff	??_playThisNote8,tblptrl
 26839  002A6C  C073  FFF7         	movff	??_playThisNote8+1,tblptrh
 26840  002A70                     	if	0	;tblptru may be non-zero
 26841  002A70                     	endif
 26842  002A70                     	if	0	;tblptru may be non-zero
 26843  002A70                     	endif
 26844  002A70  0008               	tblrd		*
 26845  002A72  CFF5 F077          	movff	tablat,playThisNote8@temp_pitch
 26846  002A76                     l1610:
 26847                           
 26848                           ; BSR set to: 0
 26849                           ;keyboard.c: 984: if(index > 0){temp_pitch = (mode_p[0] + mode_p[index]);}
 26850                           
 26851                           ; BSR set to: 0
 26852  002A76  5171               	movf	playThisNote8@index& (0+255),w,b
 26853  002A78  B4D8               	btfsc	status,2,c
 26854  002A7A  D019               	goto	l1611
 26855                           
 26856                           ; BSR set to: 0
 26857  002A7C  5171               	movf	playThisNote8@index& (0+255),w,b
 26858  002A7E  0D01               	mullw	1
 26859  002A80  C078  F072         	movff	playThisNote8@mode_p,??_playThisNote8
 26860  002A84  C079  F073         	movff	playThisNote8@mode_p+1,??_playThisNote8+1
 26861  002A88  50F3               	movf	prodl,w,c
 26862  002A8A  2772               	addwf	??_playThisNote8& (0+255),f,b
 26863  002A8C  50F4               	movf	prodh,w,c
 26864  002A8E  2373               	addwfc	(??_playThisNote8+1)& (0+255),f,b
 26865  002A90  C072  FFF6         	movff	??_playThisNote8,tblptrl
 26866  002A94  C073  FFF7         	movff	??_playThisNote8+1,tblptrh
 26867  002A98                     	if	0	;tblptru may be non-zero
 26868  002A98                     	endif
 26869  002A98                     	if	0	;tblptru may be non-zero
 26870  002A98                     	endif
 26871  002A98  0008               	tblrd		*
 26872  002A9A  CFF5 F074          	movff	tablat,??_playThisNote8+2
 26873  002A9E  C078  FFF6         	movff	playThisNote8@mode_p,tblptrl
 26874  002AA2  C079  FFF7         	movff	playThisNote8@mode_p+1,tblptrh
 26875  002AA6                     	if	0	;tblptru may be non-zero
 26876  002AA6                     	endif
 26877  002AA6                     	if	0	;tblptru may be non-zero
 26878  002AA6                     	endif
 26879  002AA6  0008               	tblrd		*
 26880  002AA8  50F5               	movf	tablat,w,c
 26881  002AAA  2574               	addwf	(??_playThisNote8+2)& (0+255),w,b
 26882  002AAC  6F77               	movwf	playThisNote8@temp_pitch& (0+255),b
 26883  002AAE                     l1611:
 26884                           
 26885                           ; BSR set to: 0
 26886                           ;keyboard.c: 985: }
 26887                           ;keyboard.c: 987: if(ON_OFF == 1) {
 26888                           
 26889                           ; BSR set to: 0
 26890                           
 26891                           ; BSR set to: 0
 26892  002AAE  A206               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26893  002AB0  D024               	goto	l1612
 26894                           
 26895                           ; BSR set to: 0
 26896                           ;keyboard.c: 990: TMR0ON = 0;
 26897  002AB2  9ED5               	bcf	4053,7,c	;volatile
 26898                           
 26899                           ;keyboard.c: 992: parallel = temp_pitch;
 26900  002AB4  C077  F02F         	movff	playThisNote8@temp_pitch,_parallel
 26901                           
 26902                           ; BSR set to: 0
 26903                           ;keyboard.c: 995: if(NUM_NOTES_PRESSED > 0){
 26904  002AB8  502E               	movf	_NUM_NOTES_PRESSED,w,c
 26905  002ABA  B4D8               	btfsc	status,2,c
 26906  002ABC  D00A               	goto	l1613
 26907                           
 26908                           ; BSR set to: 0
 26909                           ;keyboard.c: 996: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 26910  002ABE  0E00               	movlw	0
 26911  002AC0  B603               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 26912  002AC2  0E01               	movlw	1
 26913  002AC4  EC43  F04C         	call	_wait_one_pulse
 26914                           
 26915                           ;keyboard.c: 997: if(note_off_was_sent == 0) {key_press_release_note_off();}
 26916  002AC8  A052               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 26917  002ACA  ECA7  F02E         	call	_key_press_release_note_off	;wreg free
 26918                           
 26919                           ;keyboard.c: 998: TIMER_OVERFLOWS = 0;
 26920  002ACE  0E00               	movlw	0
 26921  002AD0  6E2D               	movwf	_TIMER_OVERFLOWS,c
 26922  002AD2                     l1613:
 26923                           
 26924                           ;keyboard.c: 999: }
 26925                           ;keyboard.c: 1002: if((KEYBOARD_MODE == MAJOR) | (KEYBOARD_MODE == MINOR) | (KEYBOARD_MO
      +                          DE == MODES)){
 26926  002AD2  0100               	movlb	0	; () banked
 26927  002AD4  05F3               	decf	_KEYBOARD_MODE& (0+255),w,b
 26928  002AD6  B4D8               	btfsc	status,2,c
 26929  002AD8  D008               	goto	u47920
 26930                           
 26931                           ; BSR set to: 0
 26932  002ADA  0E02               	movlw	2
 26933  002ADC  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26934  002ADE  B4D8               	btfsc	status,2,c
 26935  002AE0  D004               	goto	u47920
 26936                           
 26937                           ; BSR set to: 0
 26938  002AE2  0E03               	movlw	3
 26939  002AE4  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 26940  002AE6  A4D8               	btfss	status,2,c
 26941  002AE8  D003               	goto	l1615
 26942  002AEA                     u47920:
 26943                           
 26944                           ; BSR set to: 0
 26945                           ;keyboard.c: 1003: add_notes_to_arpeggio(temp_pitch);
 26946                           
 26947                           ; BSR set to: 0
 26948  002AEA  5177               	movf	playThisNote8@temp_pitch& (0+255),w,b
 26949  002AEC  EC28  F035         	call	_add_notes_to_arpeggio
 26950  002AF0                     l1615:
 26951                           
 26952                           ;keyboard.c: 1004: }
 26953                           ;keyboard.c: 1007: if(LATCH == 0) {latch_was_pressed = 0;}
 26954  002AF0  A404               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 26955  002AF2  9E03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 26956                           
 26957                           ;keyboard.c: 1010: finish_arpeggio_setup();
 26958  002AF4  ECD8  F04C         	call	_finish_arpeggio_setup	;wreg free
 26959                           
 26960                           ;keyboard.c: 1013: TMR0ON = 1;
 26961  002AF8  8ED5               	bsf	4053,7,c	;volatile
 26962  002AFA                     l1612:
 26963                           
 26964                           ;keyboard.c: 1014: }
 26965                           ;keyboard.c: 1016: if((ON_OFF == 0) && (LATCH == 0)) {
 26966  002AFA  A206               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 26967  002AFC  B404               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 26968  002AFE  D062               	goto	l1619
 26969                           
 26970                           ;keyboard.c: 1019: TMR0ON = 0;
 26971  002B00  9ED5               	bcf	4053,7,c	;volatile
 26972                           
 26973                           ;keyboard.c: 1022: if(NUM_NOTES_PRESSED > 0){
 26974  002B02  502E               	movf	_NUM_NOTES_PRESSED,w,c
 26975  002B04  B4D8               	btfsc	status,2,c
 26976  002B06  D00A               	goto	l1620
 26977                           
 26978                           ;keyboard.c: 1023: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 26979  002B08  0E00               	movlw	0
 26980  002B0A  B403               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 26981  002B0C  0E01               	movlw	1
 26982  002B0E  EC43  F04C         	call	_wait_one_pulse
 26983                           
 26984                           ;keyboard.c: 1024: if(note_off_was_sent == 0) {key_press_release_note_off();}
 26985  002B12  A052               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 26986  002B14  ECA7  F02E         	call	_key_press_release_note_off	;wreg free
 26987                           
 26988                           ;keyboard.c: 1025: TIMER_OVERFLOWS = 0;
 26989  002B18  0E00               	movlw	0
 26990  002B1A  6E2D               	movwf	_TIMER_OVERFLOWS,c
 26991  002B1C                     l1620:
 26992                           
 26993                           ;keyboard.c: 1026: }
 26994                           ;keyboard.c: 1029: if((KEYBOARD_MODE == MAJOR) | (KEYBOARD_MODE == MINOR) | (KEYBOARD_MO
      +                          DE == MODES)){
 26995  002B1C  0100               	movlb	0	; () banked
 26996  002B1E  05F3               	decf	_KEYBOARD_MODE& (0+255),w,b
 26997  002B20  B4D8               	btfsc	status,2,c
 26998  002B22  D008               	goto	u48000
 26999                           
 27000                           ; BSR set to: 0
 27001  002B24  0E02               	movlw	2
 27002  002B26  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 27003  002B28  B4D8               	btfsc	status,2,c
 27004  002B2A  D004               	goto	u48000
 27005                           
 27006                           ; BSR set to: 0
 27007  002B2C  0E03               	movlw	3
 27008  002B2E  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 27009  002B30  A4D8               	btfss	status,2,c
 27010  002B32  D003               	goto	l1622
 27011  002B34                     u48000:
 27012                           
 27013                           ; BSR set to: 0
 27014                           ;keyboard.c: 1030: delete_notes_from_arpeggio(temp_pitch);
 27015                           
 27016                           ; BSR set to: 0
 27017  002B34  5177               	movf	playThisNote8@temp_pitch& (0+255),w,b
 27018  002B36  ECB0  F04B         	call	_delete_notes_from_arpeggio
 27019  002B3A                     l1622:
 27020                           
 27021                           ;keyboard.c: 1031: }
 27022                           ;keyboard.c: 1033: if(temp_pitch == parallel){NUM_NOTES_PRESSED = 0;}
 27023  002B3A  C02F  F072         	movff	_parallel,??_playThisNote8
 27024  002B3E  0100               	movlb	0	; () banked
 27025  002B40  6B73               	clrf	(??_playThisNote8+1)& (0+255),b
 27026  002B42  BF72               	btfsc	??_playThisNote8& (0+255),7,b
 27027  002B44  0773               	decf	(??_playThisNote8+1)& (0+255),f,b
 27028  002B46  5177               	movf	playThisNote8@temp_pitch& (0+255),w,b
 27029  002B48  6F74               	movwf	(??_playThisNote8+2)& (0+255),b
 27030  002B4A  6B75               	clrf	(??_playThisNote8+3)& (0+255),b
 27031  002B4C  5172               	movf	??_playThisNote8& (0+255),w,b
 27032  002B4E  1974               	xorwf	(??_playThisNote8+2)& (0+255),w,b
 27033  002B50  E106               	bnz	l27516
 27034  002B52  5173               	movf	(??_playThisNote8+1)& (0+255),w,b
 27035  002B54  1975               	xorwf	(??_playThisNote8+3)& (0+255),w,b
 27036  002B56  A4D8               	btfss	status,2,c
 27037  002B58  D002               	goto	l1625
 27038                           
 27039                           ; BSR set to: 0
 27040  002B5A  0E00               	movlw	0
 27041  002B5C  6E2E               	movwf	_NUM_NOTES_PRESSED,c
 27042  002B5E                     l1625:
 27043  002B5E                     l27516:
 27044                           
 27045                           ; BSR set to: 0
 27046                           ;keyboard.c: 1038: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 27047  002B5E  B004               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 27048                           
 27049                           ; BSR set to: 0
 27050  002B60  AE03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27051  002B62  D001               	goto	l1626
 27052                           
 27053                           ; BSR set to: 0
 27054                           ;keyboard.c: 1039: LATCH = 1;
 27055  002B64  8404               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 27056  002B66                     l1626:
 27057                           
 27058                           ; BSR set to: 0
 27059                           ;keyboard.c: 1040: }
 27060                           ;keyboard.c: 1045: if(((KEYBOARD_MODE == MAJOR) | (KEYBOARD_MODE == MINOR) | (KEYBOARD_M
      +                          ODE == MODES)) && (UN_LATCH_MODE == 0) && (latch_was_pressed == 1)){
 27061                           
 27062                           ; BSR set to: 0
 27063  002B66  05F3               	decf	_KEYBOARD_MODE& (0+255),w,b
 27064  002B68  B4D8               	btfsc	status,2,c
 27065  002B6A  D008               	goto	u48060
 27066                           
 27067                           ; BSR set to: 0
 27068  002B6C  0E02               	movlw	2
 27069  002B6E  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 27070  002B70  B4D8               	btfsc	status,2,c
 27071  002B72  D004               	goto	u48060
 27072                           
 27073                           ; BSR set to: 0
 27074  002B74  0E03               	movlw	3
 27075  002B76  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 27076  002B78  A4D8               	btfss	status,2,c
 27077  002B7A  D007               	goto	l1627
 27078  002B7C                     u48060:
 27079                           
 27080                           ; BSR set to: 0
 27081  002B7C  A204               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 27082                           
 27083                           ; BSR set to: 0
 27084  002B7E  AE03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27085  002B80  D004               	goto	l1627
 27086                           
 27087                           ; BSR set to: 0
 27088                           ;keyboard.c: 1046: NUM_NOTES_PRESSED = 0;
 27089  002B82  0E00               	movlw	0
 27090  002B84  6E2E               	movwf	_NUM_NOTES_PRESSED,c
 27091                           
 27092                           ;keyboard.c: 1047: ARRAY_INDEX = 0;
 27093  002B86  0E00               	movlw	0
 27094  002B88  6FEC               	movwf	_ARRAY_INDEX& (0+255),b
 27095  002B8A                     l1627:
 27096                           
 27097                           ; BSR set to: 0
 27098                           ;keyboard.c: 1048: }
 27099                           ;keyboard.c: 1051: if((KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) | (KEYBOARD_MODE == DIATON
      +                          IC_TRIAD_MINOR) | (KEYBOARD_MODE == DIATONIC_7TH_MAJOR) |(KEYBOARD_MODE == DIATONIC_7TH_
      +                          MINOR) && ((UN_LATCH_MODE == 0) || (UN_LATCH_MODE == 1)) && (latch_was_pressed == 1)){
 27100                           
 27101                           ; BSR set to: 0
 27102  002B8A  0E07               	movlw	7
 27103  002B8C  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 27104  002B8E  B4D8               	btfsc	status,2,c
 27105  002B90  D00C               	goto	u48120
 27106                           
 27107                           ; BSR set to: 0
 27108  002B92  0E08               	movlw	8
 27109  002B94  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 27110  002B96  B4D8               	btfsc	status,2,c
 27111  002B98  D008               	goto	u48120
 27112                           
 27113                           ; BSR set to: 0
 27114  002B9A  0E0A               	movlw	10
 27115  002B9C  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 27116  002B9E  B4D8               	btfsc	status,2,c
 27117  002BA0  D004               	goto	u48120
 27118                           
 27119                           ; BSR set to: 0
 27120  002BA2  0E0B               	movlw	11
 27121  002BA4  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 27122  002BA6  A4D8               	btfss	status,2,c
 27123  002BA8  D00A               	goto	l1630
 27124  002BAA                     u48120:
 27125                           
 27126                           ; BSR set to: 0
 27127  002BAA  A204               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 27128  002BAC  D002               	goto	u48140
 27129                           
 27130                           ; BSR set to: 0
 27131  002BAE  A204               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 27132  002BB0  D006               	goto	l1630
 27133  002BB2                     u48140:
 27134                           
 27135                           ; BSR set to: 0
 27136  002BB2  AE03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27137  002BB4  D004               	goto	l1630
 27138                           
 27139                           ; BSR set to: 0
 27140                           ;keyboard.c: 1052: NUM_NOTES_PRESSED = 0;
 27141  002BB6  0E00               	movlw	0
 27142  002BB8  6E2E               	movwf	_NUM_NOTES_PRESSED,c
 27143                           
 27144                           ;keyboard.c: 1053: ARRAY_INDEX = 0;
 27145  002BBA  0E00               	movlw	0
 27146  002BBC  6FEC               	movwf	_ARRAY_INDEX& (0+255),b
 27147  002BBE                     l1630:
 27148                           
 27149                           ; BSR set to: 0
 27150                           ;keyboard.c: 1054: }
 27151                           ;keyboard.c: 1057: finish_arpeggio_setup();
 27152                           
 27153                           ; BSR set to: 0
 27154  002BBE  ECD8  F04C         	call	_finish_arpeggio_setup	;wreg free
 27155                           
 27156                           ;keyboard.c: 1060: TMR0ON = 1;
 27157  002BC2  8ED5               	bsf	4053,7,c	;volatile
 27158  002BC4                     l1619:
 27159                           
 27160                           ;keyboard.c: 1061: }
 27161                           ;keyboard.c: 1062: }
 27162                           ;keyboard.c: 1064: if(KEYBOARD_MODE == DIATONIC_TRIAD_MAJOR) {
 27163  002BC4  0E07               	movlw	7
 27164  002BC6  0100               	movlb	0	; () banked
 27165  002BC8  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 27166  002BCA  A4D8               	btfss	status,2,c
 27167  002BCC  D005               	goto	l1635
 27168                           
 27169                           ; BSR set to: 0
 27170                           ;keyboard.c: 1065: playDiatonicTriadMajor(pitch, index);
 27171  002BCE  C071  F061         	movff	playThisNote8@index,playDiatonicTriadMajor@index
 27172  002BD2  5176               	movf	playThisNote8@pitch& (0+255),w,b
 27173  002BD4  EC1D  F02D         	call	_playDiatonicTriadMajor
 27174  002BD8                     l1635:
 27175                           
 27176                           ;keyboard.c: 1066: }
 27177                           ;keyboard.c: 1067: if(KEYBOARD_MODE == DIATONIC_TRIAD_MINOR) {
 27178  002BD8  0E08               	movlw	8
 27179  002BDA  0100               	movlb	0	; () banked
 27180  002BDC  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 27181  002BDE  A4D8               	btfss	status,2,c
 27182  002BE0  D005               	goto	l1636
 27183                           
 27184                           ; BSR set to: 0
 27185                           ;keyboard.c: 1068: playDiatonicTriadMinor(pitch, index);
 27186  002BE2  C071  F061         	movff	playThisNote8@index,playDiatonicTriadMinor@index
 27187  002BE6  5176               	movf	playThisNote8@pitch& (0+255),w,b
 27188  002BE8  EC90  F023         	call	_playDiatonicTriadMinor
 27189  002BEC                     l1636:
 27190                           
 27191                           ;keyboard.c: 1069: }
 27192                           ;keyboard.c: 1070: if(KEYBOARD_MODE == DIATONIC_7TH_MAJOR) {
 27193  002BEC  0E0A               	movlw	10
 27194  002BEE  0100               	movlb	0	; () banked
 27195  002BF0  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 27196  002BF2  A4D8               	btfss	status,2,c
 27197  002BF4  D005               	goto	l1637
 27198                           
 27199                           ; BSR set to: 0
 27200                           ;keyboard.c: 1071: playDiatonicSeventhMajor(pitch, index);
 27201  002BF6  C071  F061         	movff	playThisNote8@index,playDiatonicSeventhMajor@index
 27202  002BFA  5176               	movf	playThisNote8@pitch& (0+255),w,b
 27203  002BFC  EC8B  F02B         	call	_playDiatonicSeventhMajor
 27204  002C00                     l1637:
 27205                           
 27206                           ;keyboard.c: 1072: }
 27207                           ;keyboard.c: 1073: if(KEYBOARD_MODE == DIATONIC_7TH_MINOR) {
 27208  002C00  0E0B               	movlw	11
 27209  002C02  0100               	movlb	0	; () banked
 27210  002C04  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 27211  002C06  A4D8               	btfss	status,2,c
 27212  002C08  0012               	return	
 27213                           
 27214                           ; BSR set to: 0
 27215                           ;keyboard.c: 1074: playDiatonicSeventhMinor(pitch, index);
 27216  002C0A  C071  F061         	movff	playThisNote8@index,playDiatonicSeventhMinor@index
 27217  002C0E  5176               	movf	playThisNote8@pitch& (0+255),w,b
 27218  002C10  ECC1  F024         	call	_playDiatonicSeventhMinor
 27219  002C14  0012               	return	
 27220  002C16                     __end_of_playThisNote8:
 27221                           	opt stack 0
 27222                           tblptru	equ	0xFF8
 27223                           tblptrh	equ	0xFF7
 27224                           tblptrl	equ	0xFF6
 27225                           tablat	equ	0xFF5
 27226                           prodh	equ	0xFF4
 27227                           prodl	equ	0xFF3
 27228                           intcon	equ	0xFF2
 27229                           intcon2	equ	0xFF1
 27230                           postinc0	equ	0xFEE
 27231                           wreg	equ	0xFE8
 27232                           postinc1	equ	0xFE6
 27233                           plusw1	equ	0xFE3
 27234                           fsr1h	equ	0xFE2
 27235                           fsr1l	equ	0xFE1
 27236                           indf2	equ	0xFDF
 27237                           postinc2	equ	0xFDE
 27238                           postdec2	equ	0xFDD
 27239                           plusw2	equ	0xFDB
 27240                           fsr2h	equ	0xFDA
 27241                           fsr2l	equ	0xFD9
 27242                           status	equ	0xFD8
 27243                           
 27244 ;; *************** function _playDiatonicTriadMinor *****************
 27245 ;; Defined at:
 27246 ;;		line 1220 in file "keyboard.c"
 27247 ;; Parameters:    Size  Location     Type
 27248 ;;  pitch           1    wreg     unsigned char 
 27249 ;;  index           1    1[BANK0 ] unsigned char 
 27250 ;; Auto vars:     Size  Location     Type
 27251 ;;  pitch           1    6[BANK0 ] unsigned char 
 27252 ;;  i               1    8[BANK0 ] unsigned char 
 27253 ;;  i               1    7[BANK0 ] unsigned char 
 27254 ;; Return value:  Size  Location     Type
 27255 ;;                  1    wreg      void 
 27256 ;; Registers used:
 27257 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27258 ;; Tracked objects:
 27259 ;;		On entry : 0/0
 27260 ;;		On exit  : 0/0
 27261 ;;		Unchanged: 0/0
 27262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 27263 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27264 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27265 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27266 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27267 ;;Total ram usage:        8 bytes
 27268 ;; Hardware stack levels used:    1
 27269 ;; Hardware stack levels required when called:   10
 27270 ;; This function calls:
 27271 ;;		_finish_arpeggio_setup
 27272 ;;		_key_press_release_note_off
 27273 ;;		_noteOff
 27274 ;;		_noteOn
 27275 ;;		_wait_one_pulse
 27276 ;; This function is called by:
 27277 ;;		_playThisNote8
 27278 ;; This function uses a non-reentrant model
 27279 ;;
 27280                           
 27281                           	psect	text73
 27282  004720                     __ptext73:
 27283                           	opt stack 0
 27284  004720                     _playDiatonicTriadMinor:
 27285                           	opt stack 13
 27286                           
 27287                           ;incstack = 0
 27288                           ;playDiatonicTriadMinor@pitch stored from wreg
 27289  004720  0100               	movlb	0	; () banked
 27290  004722  6F66               	movwf	playDiatonicTriadMinor@pitch& (0+255),b
 27291                           
 27292                           ;keyboard.c: 1223: if(ARPEGGIO_ON == 0){
 27293  004724  BA04               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 27294  004726  D08F               	goto	u46500
 27295                           
 27296                           ;keyboard.c: 1224: for(unsigned char i = 0; i<3; i++){
 27297  004728  0E00               	movlw	0
 27298  00472A  0100               	movlb	0	; () banked
 27299  00472C  6F67               	movwf	playDiatonicTriadMinor@i& (0+255),b
 27300  00472E                     l26866:
 27301                           
 27302                           ; BSR set to: 0
 27303  00472E  0E02               	movlw	2
 27304  004730  6567               	cpfsgt	playDiatonicTriadMinor@i& (0+255),b
 27305  004732  D001               	goto	l1689
 27306  004734  D088               	goto	u46500
 27307  004736                     l1689:
 27308                           
 27309                           ; BSR set to: 0
 27310                           ;keyboard.c: 1225: if(i==0){
 27311                           
 27312                           ; BSR set to: 0
 27313  004736  5167               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 27314  004738  A4D8               	btfss	status,2,c
 27315  00473A  D027               	goto	l1693
 27316                           
 27317                           ; BSR set to: 0
 27318                           ;keyboard.c: 1226: if(ON_OFF == 1) {noteOn(channel,diatonic_minor[index][0],velocity);}
 27319  00473C  A206               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27320  00473E  D011               	goto	l1692
 27321                           
 27322                           ; BSR set to: 0
 27323  004740  5050               	movf	_velocity,w,c
 27324  004742  6EE6               	movwf	postinc1,c
 27325  004744  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27326  004746  0D03               	mullw	3
 27327  004748  0EE3               	movlw	low _diatonic_minor
 27328  00474A  24F3               	addwf	prodl,w,c
 27329  00474C  6EF6               	movwf	tblptrl,c
 27330  00474E  0EF2               	movlw	high _diatonic_minor
 27331  004750  20F4               	addwfc	prodh,w,c
 27332  004752  6EF7               	movwf	tblptrh,c
 27333  004754                     	if	0	;There are less than 3 active tblptr bytes
 27334  004754                     	endif
 27335  004754  0008               	tblrd		*
 27336  004756  50F5               	movf	tablat,w,c
 27337  004758  6EE6               	movwf	postinc1,c
 27338  00475A  503D               	movf	_channel,w,c
 27339  00475C  6EE6               	movwf	postinc1,c
 27340  00475E  EC10  F046         	call	_noteOn	;wreg free
 27341  004762                     l1692:
 27342                           
 27343                           ;keyboard.c: 1227: if(ON_OFF == 0) {noteOff(channel,diatonic_minor[index][0],velocity);}
 27344  004762  B206               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27345  004764  D012               	goto	l1693
 27346  004766  5050               	movf	_velocity,w,c
 27347  004768  6EE6               	movwf	postinc1,c
 27348  00476A  0100               	movlb	0	; () banked
 27349  00476C  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27350  00476E  0D03               	mullw	3
 27351  004770  0EE3               	movlw	low _diatonic_minor
 27352  004772  24F3               	addwf	prodl,w,c
 27353  004774  6EF6               	movwf	tblptrl,c
 27354  004776  0EF2               	movlw	high _diatonic_minor
 27355  004778  20F4               	addwfc	prodh,w,c
 27356  00477A  6EF7               	movwf	tblptrh,c
 27357  00477C                     	if	0	;There are less than 3 active tblptr bytes
 27358  00477C                     	endif
 27359  00477C  0008               	tblrd		*
 27360  00477E  50F5               	movf	tablat,w,c
 27361  004780  6EE6               	movwf	postinc1,c
 27362  004782  503D               	movf	_channel,w,c
 27363  004784  6EE6               	movwf	postinc1,c
 27364  004786  ECA0  F04A         	call	_noteOff	;wreg free
 27365  00478A                     l1693:
 27366                           
 27367                           ;keyboard.c: 1228: }
 27368                           ;keyboard.c: 1229: if(i>0){
 27369  00478A  0100               	movlb	0	; () banked
 27370  00478C  5167               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 27371  00478E  B4D8               	btfsc	status,2,c
 27372  004790  D057               	goto	l1696
 27373                           
 27374                           ; BSR set to: 0
 27375                           ;keyboard.c: 1230: if(ON_OFF == 1) noteOn(channel,diatonic_minor[index][0] + diatonic_mi
      +                          nor[index][i],velocity);
 27376  004792  A206               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27377  004794  D029               	goto	l1695
 27378                           
 27379                           ; BSR set to: 0
 27380  004796  5050               	movf	_velocity,w,c
 27381  004798  6EE6               	movwf	postinc1,c
 27382  00479A  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27383  00479C  0D03               	mullw	3
 27384  00479E  0EE3               	movlw	low _diatonic_minor
 27385  0047A0  6F62               	movwf	??_playDiatonicTriadMinor& (0+255),b
 27386  0047A2  0EF2               	movlw	high _diatonic_minor
 27387  0047A4  6F63               	movwf	(??_playDiatonicTriadMinor+1)& (0+255),b
 27388  0047A6  50F3               	movf	prodl,w,c
 27389  0047A8  2762               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 27390  0047AA  50F4               	movf	prodh,w,c
 27391  0047AC  2363               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27392  0047AE  5167               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 27393  0047B0  0D01               	mullw	1
 27394  0047B2  50F3               	movf	prodl,w,c
 27395  0047B4  2762               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 27396  0047B6  50F4               	movf	prodh,w,c
 27397  0047B8  2363               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27398  0047BA  C062  FFF6         	movff	??_playDiatonicTriadMinor,tblptrl
 27399  0047BE  C063  FFF7         	movff	??_playDiatonicTriadMinor+1,tblptrh
 27400  0047C2                     	if	0	;tblptru may be non-zero
 27401  0047C2                     	endif
 27402  0047C2                     	if	0	;tblptru may be non-zero
 27403  0047C2                     	endif
 27404  0047C2  0008               	tblrd		*
 27405  0047C4  CFF5 F064          	movff	tablat,??_playDiatonicTriadMinor+2
 27406  0047C8  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27407  0047CA  0D03               	mullw	3
 27408  0047CC  0EE3               	movlw	low _diatonic_minor
 27409  0047CE  24F3               	addwf	prodl,w,c
 27410  0047D0  6EF6               	movwf	tblptrl,c
 27411  0047D2  0EF2               	movlw	high _diatonic_minor
 27412  0047D4  20F4               	addwfc	prodh,w,c
 27413  0047D6  6EF7               	movwf	tblptrh,c
 27414  0047D8                     	if	0	;There are less than 3 active tblptr bytes
 27415  0047D8                     	endif
 27416  0047D8  0008               	tblrd		*
 27417  0047DA  50F5               	movf	tablat,w,c
 27418  0047DC  2564               	addwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 27419  0047DE  6EE6               	movwf	postinc1,c
 27420  0047E0  503D               	movf	_channel,w,c
 27421  0047E2  6EE6               	movwf	postinc1,c
 27422  0047E4  EC10  F046         	call	_noteOn	;wreg free
 27423  0047E8                     l1695:
 27424                           
 27425                           ;keyboard.c: 1231: if(ON_OFF == 0) noteOff(channel,diatonic_minor[index][0] + diatonic_m
      +                          inor[index][i],velocity);
 27426  0047E8  B206               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27427  0047EA  D02A               	goto	l1696
 27428  0047EC  5050               	movf	_velocity,w,c
 27429  0047EE  6EE6               	movwf	postinc1,c
 27430  0047F0  0100               	movlb	0	; () banked
 27431  0047F2  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27432  0047F4  0D03               	mullw	3
 27433  0047F6  0EE3               	movlw	low _diatonic_minor
 27434  0047F8  6F62               	movwf	??_playDiatonicTriadMinor& (0+255),b
 27435  0047FA  0EF2               	movlw	high _diatonic_minor
 27436  0047FC  6F63               	movwf	(??_playDiatonicTriadMinor+1)& (0+255),b
 27437  0047FE  50F3               	movf	prodl,w,c
 27438  004800  2762               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 27439  004802  50F4               	movf	prodh,w,c
 27440  004804  2363               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27441  004806  5167               	movf	playDiatonicTriadMinor@i& (0+255),w,b
 27442  004808  0D01               	mullw	1
 27443  00480A  50F3               	movf	prodl,w,c
 27444  00480C  2762               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 27445  00480E  50F4               	movf	prodh,w,c
 27446  004810  2363               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27447  004812  C062  FFF6         	movff	??_playDiatonicTriadMinor,tblptrl
 27448  004816  C063  FFF7         	movff	??_playDiatonicTriadMinor+1,tblptrh
 27449  00481A                     	if	0	;tblptru may be non-zero
 27450  00481A                     	endif
 27451  00481A                     	if	0	;tblptru may be non-zero
 27452  00481A                     	endif
 27453  00481A  0008               	tblrd		*
 27454  00481C  CFF5 F064          	movff	tablat,??_playDiatonicTriadMinor+2
 27455  004820  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27456  004822  0D03               	mullw	3
 27457  004824  0EE3               	movlw	low _diatonic_minor
 27458  004826  24F3               	addwf	prodl,w,c
 27459  004828  6EF6               	movwf	tblptrl,c
 27460  00482A  0EF2               	movlw	high _diatonic_minor
 27461  00482C  20F4               	addwfc	prodh,w,c
 27462  00482E  6EF7               	movwf	tblptrh,c
 27463  004830                     	if	0	;There are less than 3 active tblptr bytes
 27464  004830                     	endif
 27465  004830  0008               	tblrd		*
 27466  004832  50F5               	movf	tablat,w,c
 27467  004834  2564               	addwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 27468  004836  6EE6               	movwf	postinc1,c
 27469  004838  503D               	movf	_channel,w,c
 27470  00483A  6EE6               	movwf	postinc1,c
 27471  00483C  ECA0  F04A         	call	_noteOff	;wreg free
 27472  004840                     l1696:
 27473  004840  0100               	movlb	0	; () banked
 27474  004842  2B67               	incf	playDiatonicTriadMinor@i& (0+255),f,b
 27475  004844  D774               	goto	l26866
 27476  004846                     u46500:
 27477                           
 27478                           ;keyboard.c: 1232: }
 27479                           ;keyboard.c: 1233: }
 27480                           ;keyboard.c: 1234: }
 27481                           ;keyboard.c: 1237: if(ARPEGGIO_ON == 1){
 27482                           
 27483                           ; BSR set to: 0
 27484  004846  AA04               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 27485  004848  0012               	return	
 27486                           
 27487                           ;keyboard.c: 1238: if(ON_OFF == 1) {
 27488  00484A  A206               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27489  00484C  D065               	goto	l1698
 27490                           
 27491                           ;keyboard.c: 1240: TMR0ON = 0;
 27492  00484E  9ED5               	bcf	4053,7,c	;volatile
 27493                           
 27494                           ;keyboard.c: 1242: parallel = pitch;
 27495  004850  C066  F02F         	movff	playDiatonicTriadMinor@pitch,_parallel
 27496                           
 27497                           ;keyboard.c: 1245: if(NUM_NOTES_PRESSED > 0){
 27498  004854  502E               	movf	_NUM_NOTES_PRESSED,w,c
 27499  004856  B4D8               	btfsc	status,2,c
 27500  004858  D00A               	goto	l1699
 27501                           
 27502                           ;keyboard.c: 1246: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 27503  00485A  0E00               	movlw	0
 27504  00485C  B603               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 27505  00485E  0E01               	movlw	1
 27506  004860  EC43  F04C         	call	_wait_one_pulse
 27507                           
 27508                           ;keyboard.c: 1247: if(note_off_was_sent == 0) {key_press_release_note_off();}
 27509  004864  A052               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 27510  004866  ECA7  F02E         	call	_key_press_release_note_off	;wreg free
 27511                           
 27512                           ;keyboard.c: 1248: TIMER_OVERFLOWS = 0;
 27513  00486A  0E00               	movlw	0
 27514  00486C  6E2D               	movwf	_TIMER_OVERFLOWS,c
 27515  00486E                     l1699:
 27516                           
 27517                           ;keyboard.c: 1249: }
 27518                           ;keyboard.c: 1251: for(unsigned char i = 0; i<3; i++){
 27519  00486E  0E00               	movlw	0
 27520  004870  0100               	movlb	0	; () banked
 27521  004872  6F68               	movwf	playDiatonicTriadMinor@i_1723& (0+255),b
 27522  004874                     l26910:
 27523                           
 27524                           ; BSR set to: 0
 27525  004874  0E02               	movlw	2
 27526  004876  6568               	cpfsgt	playDiatonicTriadMinor@i_1723& (0+255),b
 27527  004878  D001               	goto	l1701
 27528  00487A  D046               	goto	u46580
 27529  00487C                     l1701:
 27530                           
 27531                           ; BSR set to: 0
 27532                           ;keyboard.c: 1252: if(i==0){ARPEGGIO[i] = diatonic_minor[index][0];}
 27533                           
 27534                           ; BSR set to: 0
 27535  00487C  5168               	movf	playDiatonicTriadMinor@i_1723& (0+255),w,b
 27536  00487E  A4D8               	btfss	status,2,c
 27537  004880  D013               	goto	l1703
 27538                           
 27539                           ; BSR set to: 0
 27540  004882  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27541  004884  0D03               	mullw	3
 27542  004886  0EE3               	movlw	low _diatonic_minor
 27543  004888  24F3               	addwf	prodl,w,c
 27544  00488A  6EF6               	movwf	tblptrl,c
 27545  00488C  0EF2               	movlw	high _diatonic_minor
 27546  00488E  20F4               	addwfc	prodh,w,c
 27547  004890  6EF7               	movwf	tblptrh,c
 27548  004892                     	if	0	;There are less than 3 active tblptr bytes
 27549  004892                     	endif
 27550  004892  5168               	movf	playDiatonicTriadMinor@i_1723& (0+255),w,b
 27551  004894  0D01               	mullw	1
 27552  004896  0E84               	movlw	low _ARPEGGIO
 27553  004898  24F3               	addwf	prodl,w,c
 27554  00489A  6ED9               	movwf	fsr2l,c
 27555  00489C  0E01               	movlw	high _ARPEGGIO
 27556  00489E  20F4               	addwfc	prodh,w,c
 27557  0048A0  6EDA               	movwf	fsr2h,c
 27558  0048A2  0008               	tblrd		*
 27559  0048A4  CFF5 FFDF          	movff	tablat,indf2
 27560  0048A8                     l1703:
 27561                           
 27562                           ; BSR set to: 0
 27563                           ;keyboard.c: 1253: if(i>0){ARPEGGIO[i] = diatonic_minor[index][0] + diatonic_minor[index
      +                          ][i];}
 27564                           
 27565                           ; BSR set to: 0
 27566  0048A8  5168               	movf	playDiatonicTriadMinor@i_1723& (0+255),w,b
 27567  0048AA  B4D8               	btfsc	status,2,c
 27568  0048AC  D02B               	goto	l1704
 27569                           
 27570                           ; BSR set to: 0
 27571  0048AE  5168               	movf	playDiatonicTriadMinor@i_1723& (0+255),w,b
 27572  0048B0  0D01               	mullw	1
 27573  0048B2  0E84               	movlw	low _ARPEGGIO
 27574  0048B4  24F3               	addwf	prodl,w,c
 27575  0048B6  6ED9               	movwf	fsr2l,c
 27576  0048B8  0E01               	movlw	high _ARPEGGIO
 27577  0048BA  20F4               	addwfc	prodh,w,c
 27578  0048BC  6EDA               	movwf	fsr2h,c
 27579  0048BE  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27580  0048C0  0D03               	mullw	3
 27581  0048C2  0EE3               	movlw	low _diatonic_minor
 27582  0048C4  6F62               	movwf	??_playDiatonicTriadMinor& (0+255),b
 27583  0048C6  0EF2               	movlw	high _diatonic_minor
 27584  0048C8  6F63               	movwf	(??_playDiatonicTriadMinor+1)& (0+255),b
 27585  0048CA  50F3               	movf	prodl,w,c
 27586  0048CC  2762               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 27587  0048CE  50F4               	movf	prodh,w,c
 27588  0048D0  2363               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27589  0048D2  5168               	movf	playDiatonicTriadMinor@i_1723& (0+255),w,b
 27590  0048D4  0D01               	mullw	1
 27591  0048D6  50F3               	movf	prodl,w,c
 27592  0048D8  2762               	addwf	??_playDiatonicTriadMinor& (0+255),f,b
 27593  0048DA  50F4               	movf	prodh,w,c
 27594  0048DC  2363               	addwfc	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27595  0048DE  C062  FFF6         	movff	??_playDiatonicTriadMinor,tblptrl
 27596  0048E2  C063  FFF7         	movff	??_playDiatonicTriadMinor+1,tblptrh
 27597  0048E6                     	if	0	;tblptru may be non-zero
 27598  0048E6                     	endif
 27599  0048E6                     	if	0	;tblptru may be non-zero
 27600  0048E6                     	endif
 27601  0048E6  0008               	tblrd		*
 27602  0048E8  CFF5 F064          	movff	tablat,??_playDiatonicTriadMinor+2
 27603  0048EC  5161               	movf	playDiatonicTriadMinor@index& (0+255),w,b
 27604  0048EE  0D03               	mullw	3
 27605  0048F0  0EE3               	movlw	low _diatonic_minor
 27606  0048F2  24F3               	addwf	prodl,w,c
 27607  0048F4  6EF6               	movwf	tblptrl,c
 27608  0048F6  0EF2               	movlw	high _diatonic_minor
 27609  0048F8  20F4               	addwfc	prodh,w,c
 27610  0048FA  6EF7               	movwf	tblptrh,c
 27611  0048FC                     	if	0	;There are less than 3 active tblptr bytes
 27612  0048FC                     	endif
 27613  0048FC  0008               	tblrd		*
 27614  0048FE  50F5               	movf	tablat,w,c
 27615  004900  2564               	addwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 27616  004902  6EDF               	movwf	indf2,c
 27617  004904                     l1704:
 27618                           
 27619                           ; BSR set to: 0
 27620                           
 27621                           ; BSR set to: 0
 27622  004904  2B68               	incf	playDiatonicTriadMinor@i_1723& (0+255),f,b
 27623  004906  D7B6               	goto	l26910
 27624  004908                     u46580:
 27625                           
 27626                           ; BSR set to: 0
 27627                           ;keyboard.c: 1254: }
 27628                           ;keyboard.c: 1256: NUM_NOTES_PRESSED = 3;
 27629                           
 27630                           ; BSR set to: 0
 27631  004908  0E03               	movlw	3
 27632  00490A  6E2E               	movwf	_NUM_NOTES_PRESSED,c
 27633                           
 27634                           ; BSR set to: 0
 27635                           ;keyboard.c: 1259: if(LATCH == 0) {latch_was_pressed = 0;}
 27636  00490C  A404               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 27637                           
 27638                           ; BSR set to: 0
 27639  00490E  9E03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27640                           
 27641                           ; BSR set to: 0
 27642                           ;keyboard.c: 1262: finish_arpeggio_setup();
 27643                           
 27644                           ; BSR set to: 0
 27645  004910  ECD8  F04C         	call	_finish_arpeggio_setup	;wreg free
 27646                           
 27647                           ;keyboard.c: 1264: TMR0ON = 1;
 27648  004914  8ED5               	bsf	4053,7,c	;volatile
 27649                           
 27650                           ;keyboard.c: 1266: return;
 27651  004916  0012               	return	
 27652  004918                     l1698:
 27653                           
 27654                           ;keyboard.c: 1267: }
 27655                           ;keyboard.c: 1269: if((ON_OFF == 0) && (LATCH == 0)) {
 27656  004918  B206               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27657  00491A  0012               	return	
 27658  00491C  B404               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 27659  00491E  0012               	return	
 27660                           
 27661                           ;keyboard.c: 1271: if(NUM_NOTES_PRESSED > 0){
 27662  004920  502E               	movf	_NUM_NOTES_PRESSED,w,c
 27663  004922  B4D8               	btfsc	status,2,c
 27664  004924  D00A               	goto	l1708
 27665                           
 27666                           ;keyboard.c: 1272: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 27667  004926  0E00               	movlw	0
 27668  004928  B403               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 27669  00492A  0E01               	movlw	1
 27670  00492C  EC43  F04C         	call	_wait_one_pulse
 27671                           
 27672                           ;keyboard.c: 1273: if(note_off_was_sent == 0) {key_press_release_note_off();}
 27673  004930  A052               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 27674  004932  ECA7  F02E         	call	_key_press_release_note_off	;wreg free
 27675                           
 27676                           ;keyboard.c: 1274: TIMER_OVERFLOWS = 0;
 27677  004936  0E00               	movlw	0
 27678  004938  6E2D               	movwf	_TIMER_OVERFLOWS,c
 27679  00493A                     l1708:
 27680                           
 27681                           ;keyboard.c: 1275: }
 27682                           ;keyboard.c: 1277: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 27683  00493A  C02F  F062         	movff	_parallel,??_playDiatonicTriadMinor
 27684  00493E  0100               	movlb	0	; () banked
 27685  004940  6B63               	clrf	(??_playDiatonicTriadMinor+1)& (0+255),b
 27686  004942  BF62               	btfsc	??_playDiatonicTriadMinor& (0+255),7,b
 27687  004944  0763               	decf	(??_playDiatonicTriadMinor+1)& (0+255),f,b
 27688  004946  5166               	movf	playDiatonicTriadMinor@pitch& (0+255),w,b
 27689  004948  6F64               	movwf	(??_playDiatonicTriadMinor+2)& (0+255),b
 27690  00494A  6B65               	clrf	(??_playDiatonicTriadMinor+3)& (0+255),b
 27691  00494C  5162               	movf	??_playDiatonicTriadMinor& (0+255),w,b
 27692  00494E  1964               	xorwf	(??_playDiatonicTriadMinor+2)& (0+255),w,b
 27693  004950  E106               	bnz	l26954
 27694  004952  5163               	movf	(??_playDiatonicTriadMinor+1)& (0+255),w,b
 27695  004954  1965               	xorwf	(??_playDiatonicTriadMinor+3)& (0+255),w,b
 27696  004956  A4D8               	btfss	status,2,c
 27697  004958  D002               	goto	l1710
 27698                           
 27699                           ; BSR set to: 0
 27700  00495A  0E00               	movlw	0
 27701  00495C  6E2E               	movwf	_NUM_NOTES_PRESSED,c
 27702  00495E                     l1710:
 27703  00495E                     l26954:
 27704                           
 27705                           ; BSR set to: 0
 27706                           ;keyboard.c: 1279: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 27707  00495E  B004               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 27708                           
 27709                           ; BSR set to: 0
 27710  004960  AE03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27711  004962  D001               	goto	l1711
 27712                           
 27713                           ; BSR set to: 0
 27714                           ;keyboard.c: 1280: LATCH = 1;
 27715  004964  8404               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 27716  004966                     l1711:
 27717                           
 27718                           ; BSR set to: 0
 27719                           ;keyboard.c: 1281: }
 27720                           ;keyboard.c: 1285: if(((UN_LATCH_MODE == 0) || (UN_LATCH_MODE == 1)) && (latch_was_press
      +                          ed == 1)){
 27721  004966  A204               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 27722  004968  D002               	goto	u46680
 27723                           
 27724                           ; BSR set to: 0
 27725  00496A  A204               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 27726  00496C  D006               	goto	l1712
 27727  00496E                     u46680:
 27728                           
 27729                           ; BSR set to: 0
 27730  00496E  AE03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 27731  004970  D004               	goto	l1712
 27732                           
 27733                           ; BSR set to: 0
 27734                           ;keyboard.c: 1286: NUM_NOTES_PRESSED = 0;
 27735  004972  0E00               	movlw	0
 27736  004974  6E2E               	movwf	_NUM_NOTES_PRESSED,c
 27737                           
 27738                           ;keyboard.c: 1287: ARRAY_INDEX = 0;
 27739  004976  0E00               	movlw	0
 27740  004978  6FEC               	movwf	_ARRAY_INDEX& (0+255),b
 27741  00497A                     l1712:
 27742                           
 27743                           ; BSR set to: 0
 27744                           ;keyboard.c: 1288: }
 27745                           ;keyboard.c: 1291: finish_arpeggio_setup();
 27746                           
 27747                           ; BSR set to: 0
 27748  00497A  ECD8  F04C         	call	_finish_arpeggio_setup	;wreg free
 27749                           
 27750                           ;keyboard.c: 1292: TMR0ON = 1;
 27751  00497E  8ED5               	bsf	4053,7,c	;volatile
 27752                           
 27753                           ;keyboard.c: 1294: return;
 27754  004980  0012               	return	
 27755  004982                     __end_of_playDiatonicTriadMinor:
 27756                           	opt stack 0
 27757                           tblptru	equ	0xFF8
 27758                           tblptrh	equ	0xFF7
 27759                           tblptrl	equ	0xFF6
 27760                           tablat	equ	0xFF5
 27761                           prodh	equ	0xFF4
 27762                           prodl	equ	0xFF3
 27763                           intcon	equ	0xFF2
 27764                           intcon2	equ	0xFF1
 27765                           postinc0	equ	0xFEE
 27766                           wreg	equ	0xFE8
 27767                           postinc1	equ	0xFE6
 27768                           plusw1	equ	0xFE3
 27769                           fsr1h	equ	0xFE2
 27770                           fsr1l	equ	0xFE1
 27771                           indf2	equ	0xFDF
 27772                           postinc2	equ	0xFDE
 27773                           postdec2	equ	0xFDD
 27774                           plusw2	equ	0xFDB
 27775                           fsr2h	equ	0xFDA
 27776                           fsr2l	equ	0xFD9
 27777                           status	equ	0xFD8
 27778                           
 27779 ;; *************** function _playDiatonicTriadMajor *****************
 27780 ;; Defined at:
 27781 ;;		line 1078 in file "keyboard.c"
 27782 ;; Parameters:    Size  Location     Type
 27783 ;;  pitch           1    wreg     unsigned char 
 27784 ;;  index           1    1[BANK0 ] unsigned char 
 27785 ;; Auto vars:     Size  Location     Type
 27786 ;;  pitch           1    8[BANK0 ] unsigned char 
 27787 ;;  i               1    7[BANK0 ] unsigned char 
 27788 ;;  i               1    6[BANK0 ] unsigned char 
 27789 ;; Return value:  Size  Location     Type
 27790 ;;                  1    wreg      void 
 27791 ;; Registers used:
 27792 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27793 ;; Tracked objects:
 27794 ;;		On entry : 0/0
 27795 ;;		On exit  : 0/0
 27796 ;;		Unchanged: 0/0
 27797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 27798 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27799 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27800 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27801 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 27802 ;;Total ram usage:        8 bytes
 27803 ;; Hardware stack levels used:    1
 27804 ;; Hardware stack levels required when called:   10
 27805 ;; This function calls:
 27806 ;;		_finish_arpeggio_setup
 27807 ;;		_key_press_release_note_off
 27808 ;;		_noteOff
 27809 ;;		_noteOn
 27810 ;;		_wait_one_pulse
 27811 ;; This function is called by:
 27812 ;;		_playThisNote8
 27813 ;; This function uses a non-reentrant model
 27814 ;;
 27815                           
 27816                           	psect	text74
 27817  005A3A                     __ptext74:
 27818                           	opt stack 0
 27819  005A3A                     _playDiatonicTriadMajor:
 27820                           	opt stack 13
 27821                           
 27822                           ;incstack = 0
 27823                           ;playDiatonicTriadMajor@pitch stored from wreg
 27824  005A3A  0100               	movlb	0	; () banked
 27825  005A3C  6F68               	movwf	playDiatonicTriadMajor@pitch& (0+255),b
 27826                           
 27827                           ;keyboard.c: 1081: if(ARPEGGIO_ON == 0){
 27828  005A3E  BA04               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 27829  005A40  D04B               	goto	u46240
 27830                           
 27831                           ;keyboard.c: 1082: for(unsigned char i = 0; i<3; i++){
 27832  005A42  0E00               	movlw	0
 27833  005A44  0100               	movlb	0	; () banked
 27834  005A46  6F66               	movwf	playDiatonicTriadMajor@i& (0+255),b
 27835  005A48                     l26780:
 27836                           
 27837                           ; BSR set to: 0
 27838  005A48  0E02               	movlw	2
 27839  005A4A  6566               	cpfsgt	playDiatonicTriadMajor@i& (0+255),b
 27840  005A4C  D001               	goto	l1643
 27841  005A4E  D044               	goto	u46240
 27842  005A50                     l1643:
 27843                           
 27844                           ; BSR set to: 0
 27845                           ;keyboard.c: 1083: if(ON_OFF == 1) {noteOn(channel,pitch + diatonic_major[index][i],velo
      +                          city);}
 27846  005A50  A206               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27847  005A52  D01E               	goto	l1645
 27848                           
 27849                           ; BSR set to: 0
 27850  005A54  5050               	movf	_velocity,w,c
 27851  005A56  6EE6               	movwf	postinc1,c
 27852  005A58  5161               	movf	playDiatonicTriadMajor@index& (0+255),w,b
 27853  005A5A  0D03               	mullw	3
 27854  005A5C  0E10               	movlw	low _diatonic_major
 27855  005A5E  6F62               	movwf	??_playDiatonicTriadMajor& (0+255),b
 27856  005A60  0EF3               	movlw	high _diatonic_major
 27857  005A62  6F63               	movwf	(??_playDiatonicTriadMajor+1)& (0+255),b
 27858  005A64  50F3               	movf	prodl,w,c
 27859  005A66  2762               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 27860  005A68  50F4               	movf	prodh,w,c
 27861  005A6A  2363               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 27862  005A6C  5166               	movf	playDiatonicTriadMajor@i& (0+255),w,b
 27863  005A6E  0D01               	mullw	1
 27864  005A70  50F3               	movf	prodl,w,c
 27865  005A72  2762               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 27866  005A74  50F4               	movf	prodh,w,c
 27867  005A76  2363               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 27868  005A78  C062  FFF6         	movff	??_playDiatonicTriadMajor,tblptrl
 27869  005A7C  C063  FFF7         	movff	??_playDiatonicTriadMajor+1,tblptrh
 27870  005A80                     	if	0	;tblptru may be non-zero
 27871  005A80                     	endif
 27872  005A80                     	if	0	;tblptru may be non-zero
 27873  005A80                     	endif
 27874  005A80  0008               	tblrd		*
 27875  005A82  50F5               	movf	tablat,w,c
 27876  005A84  2568               	addwf	playDiatonicTriadMajor@pitch& (0+255),w,b
 27877  005A86  6EE6               	movwf	postinc1,c
 27878  005A88  503D               	movf	_channel,w,c
 27879  005A8A  6EE6               	movwf	postinc1,c
 27880  005A8C  EC10  F046         	call	_noteOn	;wreg free
 27881  005A90                     l1645:
 27882                           
 27883                           ;keyboard.c: 1084: if(ON_OFF == 0) {noteOff(channel,pitch + diatonic_major[index][i],vel
      +                          ocity);}
 27884  005A90  B206               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27885  005A92  D01F               	goto	l1646
 27886  005A94  5050               	movf	_velocity,w,c
 27887  005A96  6EE6               	movwf	postinc1,c
 27888  005A98  0100               	movlb	0	; () banked
 27889  005A9A  5161               	movf	playDiatonicTriadMajor@index& (0+255),w,b
 27890  005A9C  0D03               	mullw	3
 27891  005A9E  0E10               	movlw	low _diatonic_major
 27892  005AA0  6F62               	movwf	??_playDiatonicTriadMajor& (0+255),b
 27893  005AA2  0EF3               	movlw	high _diatonic_major
 27894  005AA4  6F63               	movwf	(??_playDiatonicTriadMajor+1)& (0+255),b
 27895  005AA6  50F3               	movf	prodl,w,c
 27896  005AA8  2762               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 27897  005AAA  50F4               	movf	prodh,w,c
 27898  005AAC  2363               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 27899  005AAE  5166               	movf	playDiatonicTriadMajor@i& (0+255),w,b
 27900  005AB0  0D01               	mullw	1
 27901  005AB2  50F3               	movf	prodl,w,c
 27902  005AB4  2762               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 27903  005AB6  50F4               	movf	prodh,w,c
 27904  005AB8  2363               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 27905  005ABA  C062  FFF6         	movff	??_playDiatonicTriadMajor,tblptrl
 27906  005ABE  C063  FFF7         	movff	??_playDiatonicTriadMajor+1,tblptrh
 27907  005AC2                     	if	0	;tblptru may be non-zero
 27908  005AC2                     	endif
 27909  005AC2                     	if	0	;tblptru may be non-zero
 27910  005AC2                     	endif
 27911  005AC2  0008               	tblrd		*
 27912  005AC4  50F5               	movf	tablat,w,c
 27913  005AC6  2568               	addwf	playDiatonicTriadMajor@pitch& (0+255),w,b
 27914  005AC8  6EE6               	movwf	postinc1,c
 27915  005ACA  503D               	movf	_channel,w,c
 27916  005ACC  6EE6               	movwf	postinc1,c
 27917  005ACE  ECA0  F04A         	call	_noteOff	;wreg free
 27918  005AD2                     l1646:
 27919  005AD2  0100               	movlb	0	; () banked
 27920  005AD4  2B66               	incf	playDiatonicTriadMajor@i& (0+255),f,b
 27921  005AD6  D7B8               	goto	l26780
 27922  005AD8                     u46240:
 27923                           
 27924                           ;keyboard.c: 1085: }
 27925                           ;keyboard.c: 1086: }
 27926                           ;keyboard.c: 1089: if(ARPEGGIO_ON == 1){
 27927                           
 27928                           ; BSR set to: 0
 27929  005AD8  AA04               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 27930  005ADA  0012               	return	
 27931                           
 27932                           ;keyboard.c: 1090: if(ON_OFF == 1) {
 27933  005ADC  A206               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 27934  005ADE  D040               	goto	l1648
 27935                           
 27936                           ;keyboard.c: 1092: TMR0ON = 0;
 27937  005AE0  9ED5               	bcf	4053,7,c	;volatile
 27938                           
 27939                           ;keyboard.c: 1094: parallel = pitch;
 27940  005AE2  C068  F02F         	movff	playDiatonicTriadMajor@pitch,_parallel
 27941                           
 27942                           ;keyboard.c: 1097: if(NUM_NOTES_PRESSED > 0){
 27943  005AE6  502E               	movf	_NUM_NOTES_PRESSED,w,c
 27944  005AE8  B4D8               	btfsc	status,2,c
 27945  005AEA  D00A               	goto	l1649
 27946                           
 27947                           ;keyboard.c: 1098: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 27948  005AEC  0E00               	movlw	0
 27949  005AEE  B603               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 27950  005AF0  0E01               	movlw	1
 27951  005AF2  EC43  F04C         	call	_wait_one_pulse
 27952                           
 27953                           ;keyboard.c: 1099: if(note_off_was_sent == 0) {key_press_release_note_off();}
 27954  005AF6  A052               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 27955  005AF8  ECA7  F02E         	call	_key_press_release_note_off	;wreg free
 27956                           
 27957                           ;keyboard.c: 1100: TIMER_OVERFLOWS = 0;
 27958  005AFC  0E00               	movlw	0
 27959  005AFE  6E2D               	movwf	_TIMER_OVERFLOWS,c
 27960  005B00                     l1649:
 27961                           
 27962                           ;keyboard.c: 1101: }
 27963                           ;keyboard.c: 1103: for(unsigned char i = 0; i<3; i++){
 27964  005B00  0E00               	movlw	0
 27965  005B02  0100               	movlb	0	; () banked
 27966  005B04  6F67               	movwf	playDiatonicTriadMajor@i_1713& (0+255),b
 27967  005B06                     l26810:
 27968                           
 27969                           ; BSR set to: 0
 27970  005B06  0E02               	movlw	2
 27971  005B08  6567               	cpfsgt	playDiatonicTriadMajor@i_1713& (0+255),b
 27972  005B0A  D001               	goto	l1651
 27973  005B0C  D022               	goto	u46300
 27974  005B0E                     l1651:
 27975                           
 27976                           ; BSR set to: 0
 27977                           ;keyboard.c: 1104: ARPEGGIO[i] = pitch + diatonic_major[index][i];
 27978                           
 27979                           ; BSR set to: 0
 27980  005B0E  5167               	movf	playDiatonicTriadMajor@i_1713& (0+255),w,b
 27981  005B10  0D01               	mullw	1
 27982  005B12  0E84               	movlw	low _ARPEGGIO
 27983  005B14  24F3               	addwf	prodl,w,c
 27984  005B16  6ED9               	movwf	fsr2l,c
 27985  005B18  0E01               	movlw	high _ARPEGGIO
 27986  005B1A  20F4               	addwfc	prodh,w,c
 27987  005B1C  6EDA               	movwf	fsr2h,c
 27988  005B1E  5161               	movf	playDiatonicTriadMajor@index& (0+255),w,b
 27989  005B20  0D03               	mullw	3
 27990  005B22  0E10               	movlw	low _diatonic_major
 27991  005B24  6F62               	movwf	??_playDiatonicTriadMajor& (0+255),b
 27992  005B26  0EF3               	movlw	high _diatonic_major
 27993  005B28  6F63               	movwf	(??_playDiatonicTriadMajor+1)& (0+255),b
 27994  005B2A  50F3               	movf	prodl,w,c
 27995  005B2C  2762               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 27996  005B2E  50F4               	movf	prodh,w,c
 27997  005B30  2363               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 27998  005B32  5167               	movf	playDiatonicTriadMajor@i_1713& (0+255),w,b
 27999  005B34  0D01               	mullw	1
 28000  005B36  50F3               	movf	prodl,w,c
 28001  005B38  2762               	addwf	??_playDiatonicTriadMajor& (0+255),f,b
 28002  005B3A  50F4               	movf	prodh,w,c
 28003  005B3C  2363               	addwfc	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 28004  005B3E  C062  FFF6         	movff	??_playDiatonicTriadMajor,tblptrl
 28005  005B42  C063  FFF7         	movff	??_playDiatonicTriadMajor+1,tblptrh
 28006  005B46                     	if	0	;tblptru may be non-zero
 28007  005B46                     	endif
 28008  005B46                     	if	0	;tblptru may be non-zero
 28009  005B46                     	endif
 28010  005B46  0008               	tblrd		*
 28011  005B48  50F5               	movf	tablat,w,c
 28012  005B4A  2568               	addwf	playDiatonicTriadMajor@pitch& (0+255),w,b
 28013  005B4C  6EDF               	movwf	indf2,c
 28014                           
 28015                           ; BSR set to: 0
 28016  005B4E  2B67               	incf	playDiatonicTriadMajor@i_1713& (0+255),f,b
 28017  005B50  D7DA               	goto	l26810
 28018  005B52                     u46300:
 28019                           
 28020                           ; BSR set to: 0
 28021                           ;keyboard.c: 1105: }
 28022                           ;keyboard.c: 1107: NUM_NOTES_PRESSED = 3;
 28023                           
 28024                           ; BSR set to: 0
 28025  005B52  0E03               	movlw	3
 28026  005B54  6E2E               	movwf	_NUM_NOTES_PRESSED,c
 28027                           
 28028                           ; BSR set to: 0
 28029                           ;keyboard.c: 1110: if(LATCH == 0) {latch_was_pressed = 0;}
 28030  005B56  A404               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 28031                           
 28032                           ; BSR set to: 0
 28033  005B58  9E03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 28034                           
 28035                           ; BSR set to: 0
 28036                           ;keyboard.c: 1113: finish_arpeggio_setup();
 28037                           
 28038                           ; BSR set to: 0
 28039  005B5A  ECD8  F04C         	call	_finish_arpeggio_setup	;wreg free
 28040                           
 28041                           ;keyboard.c: 1115: TMR0ON = 1;
 28042  005B5E  8ED5               	bsf	4053,7,c	;volatile
 28043  005B60                     l1648:
 28044                           
 28045                           ;keyboard.c: 1116: }
 28046                           ;keyboard.c: 1118: if((ON_OFF == 0) && (LATCH == 0)) {
 28047  005B60  B206               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28048  005B62  0012               	return	
 28049  005B64  B404               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 28050  005B66  0012               	return	
 28051                           
 28052                           ;keyboard.c: 1120: if(NUM_NOTES_PRESSED > 0){
 28053  005B68  502E               	movf	_NUM_NOTES_PRESSED,w,c
 28054  005B6A  B4D8               	btfsc	status,2,c
 28055  005B6C  D00A               	goto	l1655
 28056                           
 28057                           ;keyboard.c: 1121: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 28058  005B6E  0E00               	movlw	0
 28059  005B70  B403               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 28060  005B72  0E01               	movlw	1
 28061  005B74  EC43  F04C         	call	_wait_one_pulse
 28062                           
 28063                           ;keyboard.c: 1122: if(note_off_was_sent == 0) {key_press_release_note_off();}
 28064  005B78  A052               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 28065  005B7A  ECA7  F02E         	call	_key_press_release_note_off	;wreg free
 28066                           
 28067                           ;keyboard.c: 1123: TIMER_OVERFLOWS = 0;
 28068  005B7E  0E00               	movlw	0
 28069  005B80  6E2D               	movwf	_TIMER_OVERFLOWS,c
 28070  005B82                     l1655:
 28071                           
 28072                           ;keyboard.c: 1124: }
 28073                           ;keyboard.c: 1126: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 28074  005B82  C02F  F062         	movff	_parallel,??_playDiatonicTriadMajor
 28075  005B86  0100               	movlb	0	; () banked
 28076  005B88  6B63               	clrf	(??_playDiatonicTriadMajor+1)& (0+255),b
 28077  005B8A  BF62               	btfsc	??_playDiatonicTriadMajor& (0+255),7,b
 28078  005B8C  0763               	decf	(??_playDiatonicTriadMajor+1)& (0+255),f,b
 28079  005B8E  5168               	movf	playDiatonicTriadMajor@pitch& (0+255),w,b
 28080  005B90  6F64               	movwf	(??_playDiatonicTriadMajor+2)& (0+255),b
 28081  005B92  6B65               	clrf	(??_playDiatonicTriadMajor+3)& (0+255),b
 28082  005B94  5162               	movf	??_playDiatonicTriadMajor& (0+255),w,b
 28083  005B96  1964               	xorwf	(??_playDiatonicTriadMajor+2)& (0+255),w,b
 28084  005B98  E106               	bnz	l26848
 28085  005B9A  5163               	movf	(??_playDiatonicTriadMajor+1)& (0+255),w,b
 28086  005B9C  1965               	xorwf	(??_playDiatonicTriadMajor+3)& (0+255),w,b
 28087  005B9E  A4D8               	btfss	status,2,c
 28088  005BA0  D002               	goto	l1657
 28089                           
 28090                           ; BSR set to: 0
 28091  005BA2  0E00               	movlw	0
 28092  005BA4  6E2E               	movwf	_NUM_NOTES_PRESSED,c
 28093  005BA6                     l1657:
 28094  005BA6                     l26848:
 28095                           
 28096                           ; BSR set to: 0
 28097                           ;keyboard.c: 1128: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 28098  005BA6  B004               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 28099                           
 28100                           ; BSR set to: 0
 28101  005BA8  AE03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 28102  005BAA  D001               	goto	l1658
 28103                           
 28104                           ; BSR set to: 0
 28105                           ;keyboard.c: 1129: LATCH = 1;
 28106  005BAC  8404               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 28107  005BAE                     l1658:
 28108                           
 28109                           ; BSR set to: 0
 28110                           ;keyboard.c: 1130: }
 28111                           ;keyboard.c: 1134: if(((UN_LATCH_MODE == 0) || (UN_LATCH_MODE == 1)) && (latch_was_press
      +                          ed == 1)){
 28112  005BAE  A204               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 28113  005BB0  D002               	goto	u46400
 28114                           
 28115                           ; BSR set to: 0
 28116  005BB2  A204               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 28117  005BB4  D006               	goto	l1659
 28118  005BB6                     u46400:
 28119                           
 28120                           ; BSR set to: 0
 28121  005BB6  AE03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 28122  005BB8  D004               	goto	l1659
 28123                           
 28124                           ; BSR set to: 0
 28125                           ;keyboard.c: 1135: NUM_NOTES_PRESSED = 0;
 28126  005BBA  0E00               	movlw	0
 28127  005BBC  6E2E               	movwf	_NUM_NOTES_PRESSED,c
 28128                           
 28129                           ;keyboard.c: 1136: ARRAY_INDEX = 0;
 28130  005BBE  0E00               	movlw	0
 28131  005BC0  6FEC               	movwf	_ARRAY_INDEX& (0+255),b
 28132  005BC2                     l1659:
 28133                           
 28134                           ; BSR set to: 0
 28135                           ;keyboard.c: 1137: }
 28136                           ;keyboard.c: 1140: finish_arpeggio_setup();
 28137                           
 28138                           ; BSR set to: 0
 28139  005BC2  ECD8  F04C         	call	_finish_arpeggio_setup	;wreg free
 28140                           
 28141                           ;keyboard.c: 1141: TMR0ON = 1;
 28142  005BC6  8ED5               	bsf	4053,7,c	;volatile
 28143  005BC8  0012               	return	
 28144  005BCA                     __end_of_playDiatonicTriadMajor:
 28145                           	opt stack 0
 28146                           tblptru	equ	0xFF8
 28147                           tblptrh	equ	0xFF7
 28148                           tblptrl	equ	0xFF6
 28149                           tablat	equ	0xFF5
 28150                           prodh	equ	0xFF4
 28151                           prodl	equ	0xFF3
 28152                           intcon	equ	0xFF2
 28153                           intcon2	equ	0xFF1
 28154                           postinc0	equ	0xFEE
 28155                           wreg	equ	0xFE8
 28156                           postinc1	equ	0xFE6
 28157                           plusw1	equ	0xFE3
 28158                           fsr1h	equ	0xFE2
 28159                           fsr1l	equ	0xFE1
 28160                           indf2	equ	0xFDF
 28161                           postinc2	equ	0xFDE
 28162                           postdec2	equ	0xFDD
 28163                           plusw2	equ	0xFDB
 28164                           fsr2h	equ	0xFDA
 28165                           fsr2l	equ	0xFD9
 28166                           status	equ	0xFD8
 28167                           
 28168 ;; *************** function _playDiatonicSeventhMinor *****************
 28169 ;; Defined at:
 28170 ;;		line 1299 in file "keyboard.c"
 28171 ;; Parameters:    Size  Location     Type
 28172 ;;  pitch           1    wreg     unsigned char 
 28173 ;;  index           1    1[BANK0 ] unsigned char 
 28174 ;; Auto vars:     Size  Location     Type
 28175 ;;  pitch           1    6[BANK0 ] unsigned char 
 28176 ;;  i               1    8[BANK0 ] unsigned char 
 28177 ;;  i               1    7[BANK0 ] unsigned char 
 28178 ;; Return value:  Size  Location     Type
 28179 ;;                  1    wreg      void 
 28180 ;; Registers used:
 28181 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28182 ;; Tracked objects:
 28183 ;;		On entry : 0/0
 28184 ;;		On exit  : 0/0
 28185 ;;		Unchanged: 0/0
 28186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 28187 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28188 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28189 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28190 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28191 ;;Total ram usage:        8 bytes
 28192 ;; Hardware stack levels used:    1
 28193 ;; Hardware stack levels required when called:   10
 28194 ;; This function calls:
 28195 ;;		_finish_arpeggio_setup
 28196 ;;		_key_press_release_note_off
 28197 ;;		_noteOff
 28198 ;;		_noteOn
 28199 ;;		_wait_one_pulse
 28200 ;; This function is called by:
 28201 ;;		_playThisNote8
 28202 ;; This function uses a non-reentrant model
 28203 ;;
 28204                           
 28205                           	psect	text75
 28206  004982                     __ptext75:
 28207                           	opt stack 0
 28208  004982                     _playDiatonicSeventhMinor:
 28209                           	opt stack 13
 28210                           
 28211                           ;incstack = 0
 28212                           ;playDiatonicSeventhMinor@pitch stored from wreg
 28213  004982  0100               	movlb	0	; () banked
 28214  004984  6F66               	movwf	playDiatonicSeventhMinor@pitch& (0+255),b
 28215                           
 28216                           ;keyboard.c: 1302: if(ARPEGGIO_ON == 0){
 28217  004986  BA04               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 28218  004988  D08F               	goto	u47000
 28219                           
 28220                           ;keyboard.c: 1303: for(unsigned char i = 0; i<4; i++){
 28221  00498A  0E00               	movlw	0
 28222  00498C  0100               	movlb	0	; () banked
 28223  00498E  6F67               	movwf	playDiatonicSeventhMinor@i& (0+255),b
 28224  004990                     l27062:
 28225                           
 28226                           ; BSR set to: 0
 28227  004990  0E03               	movlw	3
 28228  004992  6567               	cpfsgt	playDiatonicSeventhMinor@i& (0+255),b
 28229  004994  D001               	goto	l1718
 28230  004996  D088               	goto	u47000
 28231  004998                     l1718:
 28232                           
 28233                           ; BSR set to: 0
 28234                           ;keyboard.c: 1304: if(i==0){
 28235                           
 28236                           ; BSR set to: 0
 28237  004998  5167               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 28238  00499A  A4D8               	btfss	status,2,c
 28239  00499C  D027               	goto	l1722
 28240                           
 28241                           ; BSR set to: 0
 28242                           ;keyboard.c: 1305: if(ON_OFF == 1) {noteOn(channel,diatonic_seventh_minor[index][0],velo
      +                          city);}
 28243  00499E  A206               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28244  0049A0  D011               	goto	l1721
 28245                           
 28246                           ; BSR set to: 0
 28247  0049A2  5050               	movf	_velocity,w,c
 28248  0049A4  6EE6               	movwf	postinc1,c
 28249  0049A6  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28250  0049A8  0D04               	mullw	4
 28251  0049AA  0E6B               	movlw	low _diatonic_seventh_minor
 28252  0049AC  24F3               	addwf	prodl,w,c
 28253  0049AE  6EF6               	movwf	tblptrl,c
 28254  0049B0  0EF2               	movlw	high _diatonic_seventh_minor
 28255  0049B2  20F4               	addwfc	prodh,w,c
 28256  0049B4  6EF7               	movwf	tblptrh,c
 28257  0049B6                     	if	0	;There are less than 3 active tblptr bytes
 28258  0049B6                     	endif
 28259  0049B6  0008               	tblrd		*
 28260  0049B8  50F5               	movf	tablat,w,c
 28261  0049BA  6EE6               	movwf	postinc1,c
 28262  0049BC  503D               	movf	_channel,w,c
 28263  0049BE  6EE6               	movwf	postinc1,c
 28264  0049C0  EC10  F046         	call	_noteOn	;wreg free
 28265  0049C4                     l1721:
 28266                           
 28267                           ;keyboard.c: 1306: if(ON_OFF == 0) {noteOff(channel,diatonic_seventh_minor[index][0],vel
      +                          ocity);}
 28268  0049C4  B206               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28269  0049C6  D012               	goto	l1722
 28270  0049C8  5050               	movf	_velocity,w,c
 28271  0049CA  6EE6               	movwf	postinc1,c
 28272  0049CC  0100               	movlb	0	; () banked
 28273  0049CE  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28274  0049D0  0D04               	mullw	4
 28275  0049D2  0E6B               	movlw	low _diatonic_seventh_minor
 28276  0049D4  24F3               	addwf	prodl,w,c
 28277  0049D6  6EF6               	movwf	tblptrl,c
 28278  0049D8  0EF2               	movlw	high _diatonic_seventh_minor
 28279  0049DA  20F4               	addwfc	prodh,w,c
 28280  0049DC  6EF7               	movwf	tblptrh,c
 28281  0049DE                     	if	0	;There are less than 3 active tblptr bytes
 28282  0049DE                     	endif
 28283  0049DE  0008               	tblrd		*
 28284  0049E0  50F5               	movf	tablat,w,c
 28285  0049E2  6EE6               	movwf	postinc1,c
 28286  0049E4  503D               	movf	_channel,w,c
 28287  0049E6  6EE6               	movwf	postinc1,c
 28288  0049E8  ECA0  F04A         	call	_noteOff	;wreg free
 28289  0049EC                     l1722:
 28290                           
 28291                           ;keyboard.c: 1307: }
 28292                           ;keyboard.c: 1308: if(i>0){
 28293  0049EC  0100               	movlb	0	; () banked
 28294  0049EE  5167               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 28295  0049F0  B4D8               	btfsc	status,2,c
 28296  0049F2  D057               	goto	l1725
 28297                           
 28298                           ; BSR set to: 0
 28299                           ;keyboard.c: 1309: if(ON_OFF == 1) noteOn(channel,diatonic_seventh_minor[index][0] + dia
      +                          tonic_seventh_minor[index][i],velocity);
 28300  0049F4  A206               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28301  0049F6  D029               	goto	l1724
 28302                           
 28303                           ; BSR set to: 0
 28304  0049F8  5050               	movf	_velocity,w,c
 28305  0049FA  6EE6               	movwf	postinc1,c
 28306  0049FC  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28307  0049FE  0D04               	mullw	4
 28308  004A00  0E6B               	movlw	low _diatonic_seventh_minor
 28309  004A02  6F62               	movwf	??_playDiatonicSeventhMinor& (0+255),b
 28310  004A04  0EF2               	movlw	high _diatonic_seventh_minor
 28311  004A06  6F63               	movwf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 28312  004A08  50F3               	movf	prodl,w,c
 28313  004A0A  2762               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 28314  004A0C  50F4               	movf	prodh,w,c
 28315  004A0E  2363               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28316  004A10  5167               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 28317  004A12  0D01               	mullw	1
 28318  004A14  50F3               	movf	prodl,w,c
 28319  004A16  2762               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 28320  004A18  50F4               	movf	prodh,w,c
 28321  004A1A  2363               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28322  004A1C  C062  FFF6         	movff	??_playDiatonicSeventhMinor,tblptrl
 28323  004A20  C063  FFF7         	movff	??_playDiatonicSeventhMinor+1,tblptrh
 28324  004A24                     	if	0	;tblptru may be non-zero
 28325  004A24                     	endif
 28326  004A24                     	if	0	;tblptru may be non-zero
 28327  004A24                     	endif
 28328  004A24  0008               	tblrd		*
 28329  004A26  CFF5 F064          	movff	tablat,??_playDiatonicSeventhMinor+2
 28330  004A2A  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28331  004A2C  0D04               	mullw	4
 28332  004A2E  0E6B               	movlw	low _diatonic_seventh_minor
 28333  004A30  24F3               	addwf	prodl,w,c
 28334  004A32  6EF6               	movwf	tblptrl,c
 28335  004A34  0EF2               	movlw	high _diatonic_seventh_minor
 28336  004A36  20F4               	addwfc	prodh,w,c
 28337  004A38  6EF7               	movwf	tblptrh,c
 28338  004A3A                     	if	0	;There are less than 3 active tblptr bytes
 28339  004A3A                     	endif
 28340  004A3A  0008               	tblrd		*
 28341  004A3C  50F5               	movf	tablat,w,c
 28342  004A3E  2564               	addwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 28343  004A40  6EE6               	movwf	postinc1,c
 28344  004A42  503D               	movf	_channel,w,c
 28345  004A44  6EE6               	movwf	postinc1,c
 28346  004A46  EC10  F046         	call	_noteOn	;wreg free
 28347  004A4A                     l1724:
 28348                           
 28349                           ;keyboard.c: 1310: if(ON_OFF == 0) noteOff(channel,diatonic_seventh_minor[index][0] + di
      +                          atonic_seventh_minor[index][i],velocity);
 28350  004A4A  B206               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28351  004A4C  D02A               	goto	l1725
 28352  004A4E  5050               	movf	_velocity,w,c
 28353  004A50  6EE6               	movwf	postinc1,c
 28354  004A52  0100               	movlb	0	; () banked
 28355  004A54  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28356  004A56  0D04               	mullw	4
 28357  004A58  0E6B               	movlw	low _diatonic_seventh_minor
 28358  004A5A  6F62               	movwf	??_playDiatonicSeventhMinor& (0+255),b
 28359  004A5C  0EF2               	movlw	high _diatonic_seventh_minor
 28360  004A5E  6F63               	movwf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 28361  004A60  50F3               	movf	prodl,w,c
 28362  004A62  2762               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 28363  004A64  50F4               	movf	prodh,w,c
 28364  004A66  2363               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28365  004A68  5167               	movf	playDiatonicSeventhMinor@i& (0+255),w,b
 28366  004A6A  0D01               	mullw	1
 28367  004A6C  50F3               	movf	prodl,w,c
 28368  004A6E  2762               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 28369  004A70  50F4               	movf	prodh,w,c
 28370  004A72  2363               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28371  004A74  C062  FFF6         	movff	??_playDiatonicSeventhMinor,tblptrl
 28372  004A78  C063  FFF7         	movff	??_playDiatonicSeventhMinor+1,tblptrh
 28373  004A7C                     	if	0	;tblptru may be non-zero
 28374  004A7C                     	endif
 28375  004A7C                     	if	0	;tblptru may be non-zero
 28376  004A7C                     	endif
 28377  004A7C  0008               	tblrd		*
 28378  004A7E  CFF5 F064          	movff	tablat,??_playDiatonicSeventhMinor+2
 28379  004A82  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28380  004A84  0D04               	mullw	4
 28381  004A86  0E6B               	movlw	low _diatonic_seventh_minor
 28382  004A88  24F3               	addwf	prodl,w,c
 28383  004A8A  6EF6               	movwf	tblptrl,c
 28384  004A8C  0EF2               	movlw	high _diatonic_seventh_minor
 28385  004A8E  20F4               	addwfc	prodh,w,c
 28386  004A90  6EF7               	movwf	tblptrh,c
 28387  004A92                     	if	0	;There are less than 3 active tblptr bytes
 28388  004A92                     	endif
 28389  004A92  0008               	tblrd		*
 28390  004A94  50F5               	movf	tablat,w,c
 28391  004A96  2564               	addwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 28392  004A98  6EE6               	movwf	postinc1,c
 28393  004A9A  503D               	movf	_channel,w,c
 28394  004A9C  6EE6               	movwf	postinc1,c
 28395  004A9E  ECA0  F04A         	call	_noteOff	;wreg free
 28396  004AA2                     l1725:
 28397  004AA2  0100               	movlb	0	; () banked
 28398  004AA4  2B67               	incf	playDiatonicSeventhMinor@i& (0+255),f,b
 28399  004AA6  D774               	goto	l27062
 28400  004AA8                     u47000:
 28401                           
 28402                           ;keyboard.c: 1311: }
 28403                           ;keyboard.c: 1312: }
 28404                           ;keyboard.c: 1313: }
 28405                           ;keyboard.c: 1316: if(ARPEGGIO_ON == 1){
 28406                           
 28407                           ; BSR set to: 0
 28408  004AA8  AA04               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 28409  004AAA  0012               	return	
 28410                           
 28411                           ;keyboard.c: 1318: if(ON_OFF == 1) {
 28412  004AAC  A206               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28413  004AAE  D064               	goto	l1727
 28414                           
 28415                           ;keyboard.c: 1320: TMR0ON = 0;
 28416  004AB0  9ED5               	bcf	4053,7,c	;volatile
 28417                           
 28418                           ;keyboard.c: 1322: parallel = pitch;
 28419  004AB2  C066  F02F         	movff	playDiatonicSeventhMinor@pitch,_parallel
 28420                           
 28421                           ;keyboard.c: 1325: if(NUM_NOTES_PRESSED > 0){
 28422  004AB6  502E               	movf	_NUM_NOTES_PRESSED,w,c
 28423  004AB8  B4D8               	btfsc	status,2,c
 28424  004ABA  D00A               	goto	l1728
 28425                           
 28426                           ;keyboard.c: 1326: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 28427  004ABC  0E00               	movlw	0
 28428  004ABE  B603               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 28429  004AC0  0E01               	movlw	1
 28430  004AC2  EC43  F04C         	call	_wait_one_pulse
 28431                           
 28432                           ;keyboard.c: 1327: if(note_off_was_sent == 0) {key_press_release_note_off();}
 28433  004AC6  A052               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 28434  004AC8  ECA7  F02E         	call	_key_press_release_note_off	;wreg free
 28435                           
 28436                           ;keyboard.c: 1328: TIMER_OVERFLOWS = 0;
 28437  004ACC  0E00               	movlw	0
 28438  004ACE  6E2D               	movwf	_TIMER_OVERFLOWS,c
 28439  004AD0                     l1728:
 28440                           
 28441                           ;keyboard.c: 1329: }
 28442                           ;keyboard.c: 1331: for(unsigned char i = 0; i<4; i++){
 28443  004AD0  0E00               	movlw	0
 28444  004AD2  0100               	movlb	0	; () banked
 28445  004AD4  6F68               	movwf	playDiatonicSeventhMinor@i_1728& (0+255),b
 28446  004AD6                     l27106:
 28447                           
 28448                           ; BSR set to: 0
 28449  004AD6  0E03               	movlw	3
 28450  004AD8  6568               	cpfsgt	playDiatonicSeventhMinor@i_1728& (0+255),b
 28451  004ADA  D001               	goto	l1730
 28452  004ADC  D046               	goto	u47080
 28453  004ADE                     l1730:
 28454                           
 28455                           ; BSR set to: 0
 28456                           ;keyboard.c: 1332: if(i==0){ARPEGGIO[i] = diatonic_seventh_minor[index][0];}
 28457                           
 28458                           ; BSR set to: 0
 28459  004ADE  5168               	movf	playDiatonicSeventhMinor@i_1728& (0+255),w,b
 28460  004AE0  A4D8               	btfss	status,2,c
 28461  004AE2  D013               	goto	l1732
 28462                           
 28463                           ; BSR set to: 0
 28464  004AE4  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28465  004AE6  0D04               	mullw	4
 28466  004AE8  0E6B               	movlw	low _diatonic_seventh_minor
 28467  004AEA  24F3               	addwf	prodl,w,c
 28468  004AEC  6EF6               	movwf	tblptrl,c
 28469  004AEE  0EF2               	movlw	high _diatonic_seventh_minor
 28470  004AF0  20F4               	addwfc	prodh,w,c
 28471  004AF2  6EF7               	movwf	tblptrh,c
 28472  004AF4                     	if	0	;There are less than 3 active tblptr bytes
 28473  004AF4                     	endif
 28474  004AF4  5168               	movf	playDiatonicSeventhMinor@i_1728& (0+255),w,b
 28475  004AF6  0D01               	mullw	1
 28476  004AF8  0E84               	movlw	low _ARPEGGIO
 28477  004AFA  24F3               	addwf	prodl,w,c
 28478  004AFC  6ED9               	movwf	fsr2l,c
 28479  004AFE  0E01               	movlw	high _ARPEGGIO
 28480  004B00  20F4               	addwfc	prodh,w,c
 28481  004B02  6EDA               	movwf	fsr2h,c
 28482  004B04  0008               	tblrd		*
 28483  004B06  CFF5 FFDF          	movff	tablat,indf2
 28484  004B0A                     l1732:
 28485                           
 28486                           ; BSR set to: 0
 28487                           ;keyboard.c: 1333: if(i>0){ARPEGGIO[i] = diatonic_seventh_minor[index][0] + diatonic_sev
      +                          enth_minor[index][i];}
 28488                           
 28489                           ; BSR set to: 0
 28490  004B0A  5168               	movf	playDiatonicSeventhMinor@i_1728& (0+255),w,b
 28491  004B0C  B4D8               	btfsc	status,2,c
 28492  004B0E  D02B               	goto	l1733
 28493                           
 28494                           ; BSR set to: 0
 28495  004B10  5168               	movf	playDiatonicSeventhMinor@i_1728& (0+255),w,b
 28496  004B12  0D01               	mullw	1
 28497  004B14  0E84               	movlw	low _ARPEGGIO
 28498  004B16  24F3               	addwf	prodl,w,c
 28499  004B18  6ED9               	movwf	fsr2l,c
 28500  004B1A  0E01               	movlw	high _ARPEGGIO
 28501  004B1C  20F4               	addwfc	prodh,w,c
 28502  004B1E  6EDA               	movwf	fsr2h,c
 28503  004B20  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28504  004B22  0D04               	mullw	4
 28505  004B24  0E6B               	movlw	low _diatonic_seventh_minor
 28506  004B26  6F62               	movwf	??_playDiatonicSeventhMinor& (0+255),b
 28507  004B28  0EF2               	movlw	high _diatonic_seventh_minor
 28508  004B2A  6F63               	movwf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 28509  004B2C  50F3               	movf	prodl,w,c
 28510  004B2E  2762               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 28511  004B30  50F4               	movf	prodh,w,c
 28512  004B32  2363               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28513  004B34  5168               	movf	playDiatonicSeventhMinor@i_1728& (0+255),w,b
 28514  004B36  0D01               	mullw	1
 28515  004B38  50F3               	movf	prodl,w,c
 28516  004B3A  2762               	addwf	??_playDiatonicSeventhMinor& (0+255),f,b
 28517  004B3C  50F4               	movf	prodh,w,c
 28518  004B3E  2363               	addwfc	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28519  004B40  C062  FFF6         	movff	??_playDiatonicSeventhMinor,tblptrl
 28520  004B44  C063  FFF7         	movff	??_playDiatonicSeventhMinor+1,tblptrh
 28521  004B48                     	if	0	;tblptru may be non-zero
 28522  004B48                     	endif
 28523  004B48                     	if	0	;tblptru may be non-zero
 28524  004B48                     	endif
 28525  004B48  0008               	tblrd		*
 28526  004B4A  CFF5 F064          	movff	tablat,??_playDiatonicSeventhMinor+2
 28527  004B4E  5161               	movf	playDiatonicSeventhMinor@index& (0+255),w,b
 28528  004B50  0D04               	mullw	4
 28529  004B52  0E6B               	movlw	low _diatonic_seventh_minor
 28530  004B54  24F3               	addwf	prodl,w,c
 28531  004B56  6EF6               	movwf	tblptrl,c
 28532  004B58  0EF2               	movlw	high _diatonic_seventh_minor
 28533  004B5A  20F4               	addwfc	prodh,w,c
 28534  004B5C  6EF7               	movwf	tblptrh,c
 28535  004B5E                     	if	0	;There are less than 3 active tblptr bytes
 28536  004B5E                     	endif
 28537  004B5E  0008               	tblrd		*
 28538  004B60  50F5               	movf	tablat,w,c
 28539  004B62  2564               	addwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 28540  004B64  6EDF               	movwf	indf2,c
 28541  004B66                     l1733:
 28542                           
 28543                           ; BSR set to: 0
 28544                           
 28545                           ; BSR set to: 0
 28546  004B66  2B68               	incf	playDiatonicSeventhMinor@i_1728& (0+255),f,b
 28547  004B68  D7B6               	goto	l27106
 28548  004B6A                     u47080:
 28549                           
 28550                           ; BSR set to: 0
 28551                           ;keyboard.c: 1334: }
 28552                           ;keyboard.c: 1336: NUM_NOTES_PRESSED = 4;
 28553                           
 28554                           ; BSR set to: 0
 28555  004B6A  0E04               	movlw	4
 28556  004B6C  6E2E               	movwf	_NUM_NOTES_PRESSED,c
 28557                           
 28558                           ; BSR set to: 0
 28559                           ;keyboard.c: 1339: if(LATCH == 0) {latch_was_pressed = 0;}
 28560  004B6E  A404               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 28561                           
 28562                           ; BSR set to: 0
 28563  004B70  9E03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 28564                           
 28565                           ; BSR set to: 0
 28566                           ;keyboard.c: 1342: finish_arpeggio_setup();
 28567                           
 28568                           ; BSR set to: 0
 28569  004B72  ECD8  F04C         	call	_finish_arpeggio_setup	;wreg free
 28570                           
 28571                           ;keyboard.c: 1344: TMR0ON = 1;
 28572  004B76  8ED5               	bsf	4053,7,c	;volatile
 28573  004B78                     l1727:
 28574                           
 28575                           ;keyboard.c: 1345: }
 28576                           ;keyboard.c: 1347: if((ON_OFF == 0) && (LATCH == 0)) {
 28577  004B78  B206               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28578  004B7A  0012               	return	
 28579  004B7C  B404               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 28580  004B7E  0012               	return	
 28581                           
 28582                           ;keyboard.c: 1349: if(NUM_NOTES_PRESSED > 0){
 28583  004B80  502E               	movf	_NUM_NOTES_PRESSED,w,c
 28584  004B82  B4D8               	btfsc	status,2,c
 28585  004B84  D00A               	goto	l1736
 28586                           
 28587                           ;keyboard.c: 1350: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 28588  004B86  0E00               	movlw	0
 28589  004B88  B403               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 28590  004B8A  0E01               	movlw	1
 28591  004B8C  EC43  F04C         	call	_wait_one_pulse
 28592                           
 28593                           ;keyboard.c: 1351: if(note_off_was_sent == 0) {key_press_release_note_off();}
 28594  004B90  A052               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 28595  004B92  ECA7  F02E         	call	_key_press_release_note_off	;wreg free
 28596                           
 28597                           ;keyboard.c: 1352: TIMER_OVERFLOWS = 0;
 28598  004B96  0E00               	movlw	0
 28599  004B98  6E2D               	movwf	_TIMER_OVERFLOWS,c
 28600  004B9A                     l1736:
 28601                           
 28602                           ;keyboard.c: 1353: }
 28603                           ;keyboard.c: 1355: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 28604  004B9A  C02F  F062         	movff	_parallel,??_playDiatonicSeventhMinor
 28605  004B9E  0100               	movlb	0	; () banked
 28606  004BA0  6B63               	clrf	(??_playDiatonicSeventhMinor+1)& (0+255),b
 28607  004BA2  BF62               	btfsc	??_playDiatonicSeventhMinor& (0+255),7,b
 28608  004BA4  0763               	decf	(??_playDiatonicSeventhMinor+1)& (0+255),f,b
 28609  004BA6  5166               	movf	playDiatonicSeventhMinor@pitch& (0+255),w,b
 28610  004BA8  6F64               	movwf	(??_playDiatonicSeventhMinor+2)& (0+255),b
 28611  004BAA  6B65               	clrf	(??_playDiatonicSeventhMinor+3)& (0+255),b
 28612  004BAC  5162               	movf	??_playDiatonicSeventhMinor& (0+255),w,b
 28613  004BAE  1964               	xorwf	(??_playDiatonicSeventhMinor+2)& (0+255),w,b
 28614  004BB0  E106               	bnz	l27150
 28615  004BB2  5163               	movf	(??_playDiatonicSeventhMinor+1)& (0+255),w,b
 28616  004BB4  1965               	xorwf	(??_playDiatonicSeventhMinor+3)& (0+255),w,b
 28617  004BB6  A4D8               	btfss	status,2,c
 28618  004BB8  D002               	goto	l1738
 28619                           
 28620                           ; BSR set to: 0
 28621  004BBA  0E00               	movlw	0
 28622  004BBC  6E2E               	movwf	_NUM_NOTES_PRESSED,c
 28623  004BBE                     l1738:
 28624  004BBE                     l27150:
 28625                           
 28626                           ; BSR set to: 0
 28627                           ;keyboard.c: 1357: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 28628  004BBE  B004               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 28629                           
 28630                           ; BSR set to: 0
 28631  004BC0  AE03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 28632  004BC2  D001               	goto	l1739
 28633                           
 28634                           ; BSR set to: 0
 28635                           ;keyboard.c: 1358: LATCH = 1;
 28636  004BC4  8404               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 28637  004BC6                     l1739:
 28638                           
 28639                           ; BSR set to: 0
 28640                           ;keyboard.c: 1359: }
 28641                           ;keyboard.c: 1363: if(((UN_LATCH_MODE == 0) | (UN_LATCH_MODE == 1)) && (latch_was_presse
      +                          d == 1)){
 28642  004BC6  A204               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 28643  004BC8  D002               	goto	u47180
 28644                           
 28645                           ; BSR set to: 0
 28646  004BCA  A204               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 28647  004BCC  D006               	goto	l1740
 28648  004BCE                     u47180:
 28649                           
 28650                           ; BSR set to: 0
 28651  004BCE  AE03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 28652  004BD0  D004               	goto	l1740
 28653                           
 28654                           ; BSR set to: 0
 28655                           ;keyboard.c: 1364: NUM_NOTES_PRESSED = 0;
 28656  004BD2  0E00               	movlw	0
 28657  004BD4  6E2E               	movwf	_NUM_NOTES_PRESSED,c
 28658                           
 28659                           ;keyboard.c: 1365: ARRAY_INDEX = 0;
 28660  004BD6  0E00               	movlw	0
 28661  004BD8  6FEC               	movwf	_ARRAY_INDEX& (0+255),b
 28662  004BDA                     l1740:
 28663                           
 28664                           ; BSR set to: 0
 28665                           ;keyboard.c: 1366: }
 28666                           ;keyboard.c: 1369: finish_arpeggio_setup();
 28667                           
 28668                           ; BSR set to: 0
 28669  004BDA  ECD8  F04C         	call	_finish_arpeggio_setup	;wreg free
 28670                           
 28671                           ;keyboard.c: 1370: TMR0ON = 1;
 28672  004BDE  8ED5               	bsf	4053,7,c	;volatile
 28673                           
 28674                           ;keyboard.c: 1372: return;
 28675  004BE0  0012               	return	
 28676  004BE2                     __end_of_playDiatonicSeventhMinor:
 28677                           	opt stack 0
 28678                           tblptru	equ	0xFF8
 28679                           tblptrh	equ	0xFF7
 28680                           tblptrl	equ	0xFF6
 28681                           tablat	equ	0xFF5
 28682                           prodh	equ	0xFF4
 28683                           prodl	equ	0xFF3
 28684                           intcon	equ	0xFF2
 28685                           intcon2	equ	0xFF1
 28686                           postinc0	equ	0xFEE
 28687                           wreg	equ	0xFE8
 28688                           postinc1	equ	0xFE6
 28689                           plusw1	equ	0xFE3
 28690                           fsr1h	equ	0xFE2
 28691                           fsr1l	equ	0xFE1
 28692                           indf2	equ	0xFDF
 28693                           postinc2	equ	0xFDE
 28694                           postdec2	equ	0xFDD
 28695                           plusw2	equ	0xFDB
 28696                           fsr2h	equ	0xFDA
 28697                           fsr2l	equ	0xFD9
 28698                           status	equ	0xFD8
 28699                           
 28700 ;; *************** function _playDiatonicSeventhMajor *****************
 28701 ;; Defined at:
 28702 ;;		line 1147 in file "keyboard.c"
 28703 ;; Parameters:    Size  Location     Type
 28704 ;;  pitch           1    wreg     unsigned char 
 28705 ;;  index           1    1[BANK0 ] unsigned char 
 28706 ;; Auto vars:     Size  Location     Type
 28707 ;;  pitch           1    8[BANK0 ] unsigned char 
 28708 ;;  i               1    7[BANK0 ] unsigned char 
 28709 ;;  i               1    6[BANK0 ] unsigned char 
 28710 ;; Return value:  Size  Location     Type
 28711 ;;                  1    wreg      void 
 28712 ;; Registers used:
 28713 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28714 ;; Tracked objects:
 28715 ;;		On entry : 0/0
 28716 ;;		On exit  : 0/0
 28717 ;;		Unchanged: 0/0
 28718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 28719 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28720 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28721 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28722 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 28723 ;;Total ram usage:        8 bytes
 28724 ;; Hardware stack levels used:    1
 28725 ;; Hardware stack levels required when called:   10
 28726 ;; This function calls:
 28727 ;;		_finish_arpeggio_setup
 28728 ;;		_key_press_release_note_off
 28729 ;;		_noteOff
 28730 ;;		_noteOn
 28731 ;;		_wait_one_pulse
 28732 ;; This function is called by:
 28733 ;;		_playThisNote8
 28734 ;; This function uses a non-reentrant model
 28735 ;;
 28736                           
 28737                           	psect	text76
 28738  005716                     __ptext76:
 28739                           	opt stack 0
 28740  005716                     _playDiatonicSeventhMajor:
 28741                           	opt stack 13
 28742                           
 28743                           ;incstack = 0
 28744                           ;playDiatonicSeventhMajor@pitch stored from wreg
 28745  005716  0100               	movlb	0	; () banked
 28746  005718  6F68               	movwf	playDiatonicSeventhMajor@pitch& (0+255),b
 28747                           
 28748                           ;keyboard.c: 1150: if(ARPEGGIO_ON == 0){
 28749  00571A  BA04               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 28750  00571C  D04B               	goto	u46740
 28751                           
 28752                           ;keyboard.c: 1151: for(unsigned char i = 0; i<4; i++){
 28753  00571E  0E00               	movlw	0
 28754  005720  0100               	movlb	0	; () banked
 28755  005722  6F66               	movwf	playDiatonicSeventhMajor@i& (0+255),b
 28756  005724                     l26974:
 28757                           
 28758                           ; BSR set to: 0
 28759  005724  0E03               	movlw	3
 28760  005726  6566               	cpfsgt	playDiatonicSeventhMajor@i& (0+255),b
 28761  005728  D001               	goto	l1666
 28762  00572A  D044               	goto	u46740
 28763  00572C                     l1666:
 28764                           
 28765                           ; BSR set to: 0
 28766                           ;keyboard.c: 1153: if(ON_OFF == 1) {noteOn(channel,pitch + diatonic_seventh_major[index]
      +                          [i],velocity);}
 28767  00572C  A206               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28768  00572E  D01E               	goto	l1668
 28769                           
 28770                           ; BSR set to: 0
 28771  005730  5050               	movf	_velocity,w,c
 28772  005732  6EE6               	movwf	postinc1,c
 28773  005734  5161               	movf	playDiatonicSeventhMajor@index& (0+255),w,b
 28774  005736  0D04               	mullw	4
 28775  005738  0EA7               	movlw	low _diatonic_seventh_major
 28776  00573A  6F62               	movwf	??_playDiatonicSeventhMajor& (0+255),b
 28777  00573C  0EF2               	movlw	high _diatonic_seventh_major
 28778  00573E  6F63               	movwf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 28779  005740  50F3               	movf	prodl,w,c
 28780  005742  2762               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 28781  005744  50F4               	movf	prodh,w,c
 28782  005746  2363               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 28783  005748  5166               	movf	playDiatonicSeventhMajor@i& (0+255),w,b
 28784  00574A  0D01               	mullw	1
 28785  00574C  50F3               	movf	prodl,w,c
 28786  00574E  2762               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 28787  005750  50F4               	movf	prodh,w,c
 28788  005752  2363               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 28789  005754  C062  FFF6         	movff	??_playDiatonicSeventhMajor,tblptrl
 28790  005758  C063  FFF7         	movff	??_playDiatonicSeventhMajor+1,tblptrh
 28791  00575C                     	if	0	;tblptru may be non-zero
 28792  00575C                     	endif
 28793  00575C                     	if	0	;tblptru may be non-zero
 28794  00575C                     	endif
 28795  00575C  0008               	tblrd		*
 28796  00575E  50F5               	movf	tablat,w,c
 28797  005760  2568               	addwf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 28798  005762  6EE6               	movwf	postinc1,c
 28799  005764  503D               	movf	_channel,w,c
 28800  005766  6EE6               	movwf	postinc1,c
 28801  005768  EC10  F046         	call	_noteOn	;wreg free
 28802  00576C                     l1668:
 28803                           
 28804                           ;keyboard.c: 1154: if(ON_OFF == 0) {noteOff(channel,pitch + diatonic_seventh_major[index
      +                          ][i],velocity);}
 28805  00576C  B206               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28806  00576E  D01F               	goto	l1669
 28807  005770  5050               	movf	_velocity,w,c
 28808  005772  6EE6               	movwf	postinc1,c
 28809  005774  0100               	movlb	0	; () banked
 28810  005776  5161               	movf	playDiatonicSeventhMajor@index& (0+255),w,b
 28811  005778  0D04               	mullw	4
 28812  00577A  0EA7               	movlw	low _diatonic_seventh_major
 28813  00577C  6F62               	movwf	??_playDiatonicSeventhMajor& (0+255),b
 28814  00577E  0EF2               	movlw	high _diatonic_seventh_major
 28815  005780  6F63               	movwf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 28816  005782  50F3               	movf	prodl,w,c
 28817  005784  2762               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 28818  005786  50F4               	movf	prodh,w,c
 28819  005788  2363               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 28820  00578A  5166               	movf	playDiatonicSeventhMajor@i& (0+255),w,b
 28821  00578C  0D01               	mullw	1
 28822  00578E  50F3               	movf	prodl,w,c
 28823  005790  2762               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 28824  005792  50F4               	movf	prodh,w,c
 28825  005794  2363               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 28826  005796  C062  FFF6         	movff	??_playDiatonicSeventhMajor,tblptrl
 28827  00579A  C063  FFF7         	movff	??_playDiatonicSeventhMajor+1,tblptrh
 28828  00579E                     	if	0	;tblptru may be non-zero
 28829  00579E                     	endif
 28830  00579E                     	if	0	;tblptru may be non-zero
 28831  00579E                     	endif
 28832  00579E  0008               	tblrd		*
 28833  0057A0  50F5               	movf	tablat,w,c
 28834  0057A2  2568               	addwf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 28835  0057A4  6EE6               	movwf	postinc1,c
 28836  0057A6  503D               	movf	_channel,w,c
 28837  0057A8  6EE6               	movwf	postinc1,c
 28838  0057AA  ECA0  F04A         	call	_noteOff	;wreg free
 28839  0057AE                     l1669:
 28840  0057AE  0100               	movlb	0	; () banked
 28841  0057B0  2B66               	incf	playDiatonicSeventhMajor@i& (0+255),f,b
 28842  0057B2  D7B8               	goto	l26974
 28843  0057B4                     u46740:
 28844                           
 28845                           ;keyboard.c: 1155: }
 28846                           ;keyboard.c: 1156: }
 28847                           ;keyboard.c: 1159: if(ARPEGGIO_ON == 1){
 28848                           
 28849                           ; BSR set to: 0
 28850  0057B4  AA04               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 28851  0057B6  0012               	return	
 28852                           
 28853                           ;keyboard.c: 1160: if(ON_OFF == 1) {
 28854  0057B8  A206               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28855  0057BA  D041               	goto	l1671
 28856                           
 28857                           ;keyboard.c: 1162: TMR0ON = 0;
 28858  0057BC  9ED5               	bcf	4053,7,c	;volatile
 28859                           
 28860                           ;keyboard.c: 1164: parallel = pitch;
 28861  0057BE  C068  F02F         	movff	playDiatonicSeventhMajor@pitch,_parallel
 28862                           
 28863                           ;keyboard.c: 1167: if(NUM_NOTES_PRESSED > 0){
 28864  0057C2  502E               	movf	_NUM_NOTES_PRESSED,w,c
 28865  0057C4  B4D8               	btfsc	status,2,c
 28866  0057C6  D00A               	goto	l1672
 28867                           
 28868                           ;keyboard.c: 1168: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 28869  0057C8  0E00               	movlw	0
 28870  0057CA  B603               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 28871  0057CC  0E01               	movlw	1
 28872  0057CE  EC43  F04C         	call	_wait_one_pulse
 28873                           
 28874                           ;keyboard.c: 1169: if(note_off_was_sent == 0) {key_press_release_note_off();}
 28875  0057D2  A052               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 28876  0057D4  ECA7  F02E         	call	_key_press_release_note_off	;wreg free
 28877                           
 28878                           ;keyboard.c: 1170: TIMER_OVERFLOWS = 0;
 28879  0057D8  0E00               	movlw	0
 28880  0057DA  6E2D               	movwf	_TIMER_OVERFLOWS,c
 28881  0057DC                     l1672:
 28882                           
 28883                           ;keyboard.c: 1171: }
 28884                           ;keyboard.c: 1173: for(unsigned char i = 0; i<4; i++){
 28885  0057DC  0E00               	movlw	0
 28886  0057DE  0100               	movlb	0	; () banked
 28887  0057E0  6F67               	movwf	playDiatonicSeventhMajor@i_1718& (0+255),b
 28888  0057E2                     l27004:
 28889                           
 28890                           ; BSR set to: 0
 28891  0057E2  0E03               	movlw	3
 28892  0057E4  6567               	cpfsgt	playDiatonicSeventhMajor@i_1718& (0+255),b
 28893  0057E6  D001               	goto	l1674
 28894  0057E8  D022               	goto	u46800
 28895  0057EA                     l1674:
 28896                           
 28897                           ; BSR set to: 0
 28898                           ;keyboard.c: 1174: ARPEGGIO[i] = pitch + diatonic_seventh_major[index][i];
 28899                           
 28900                           ; BSR set to: 0
 28901  0057EA  5167               	movf	playDiatonicSeventhMajor@i_1718& (0+255),w,b
 28902  0057EC  0D01               	mullw	1
 28903  0057EE  0E84               	movlw	low _ARPEGGIO
 28904  0057F0  24F3               	addwf	prodl,w,c
 28905  0057F2  6ED9               	movwf	fsr2l,c
 28906  0057F4  0E01               	movlw	high _ARPEGGIO
 28907  0057F6  20F4               	addwfc	prodh,w,c
 28908  0057F8  6EDA               	movwf	fsr2h,c
 28909  0057FA  5161               	movf	playDiatonicSeventhMajor@index& (0+255),w,b
 28910  0057FC  0D04               	mullw	4
 28911  0057FE  0EA7               	movlw	low _diatonic_seventh_major
 28912  005800  6F62               	movwf	??_playDiatonicSeventhMajor& (0+255),b
 28913  005802  0EF2               	movlw	high _diatonic_seventh_major
 28914  005804  6F63               	movwf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 28915  005806  50F3               	movf	prodl,w,c
 28916  005808  2762               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 28917  00580A  50F4               	movf	prodh,w,c
 28918  00580C  2363               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 28919  00580E  5167               	movf	playDiatonicSeventhMajor@i_1718& (0+255),w,b
 28920  005810  0D01               	mullw	1
 28921  005812  50F3               	movf	prodl,w,c
 28922  005814  2762               	addwf	??_playDiatonicSeventhMajor& (0+255),f,b
 28923  005816  50F4               	movf	prodh,w,c
 28924  005818  2363               	addwfc	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 28925  00581A  C062  FFF6         	movff	??_playDiatonicSeventhMajor,tblptrl
 28926  00581E  C063  FFF7         	movff	??_playDiatonicSeventhMajor+1,tblptrh
 28927  005822                     	if	0	;tblptru may be non-zero
 28928  005822                     	endif
 28929  005822                     	if	0	;tblptru may be non-zero
 28930  005822                     	endif
 28931  005822  0008               	tblrd		*
 28932  005824  50F5               	movf	tablat,w,c
 28933  005826  2568               	addwf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 28934  005828  6EDF               	movwf	indf2,c
 28935                           
 28936                           ; BSR set to: 0
 28937  00582A  2B67               	incf	playDiatonicSeventhMajor@i_1718& (0+255),f,b
 28938  00582C  D7DA               	goto	l27004
 28939  00582E                     u46800:
 28940                           
 28941                           ; BSR set to: 0
 28942                           ;keyboard.c: 1175: }
 28943                           ;keyboard.c: 1177: NUM_NOTES_PRESSED = 4;
 28944                           
 28945                           ; BSR set to: 0
 28946  00582E  0E04               	movlw	4
 28947  005830  6E2E               	movwf	_NUM_NOTES_PRESSED,c
 28948                           
 28949                           ; BSR set to: 0
 28950                           ;keyboard.c: 1180: if(LATCH == 0) {latch_was_pressed = 0;}
 28951  005832  A404               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 28952                           
 28953                           ; BSR set to: 0
 28954  005834  9E03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 28955                           
 28956                           ; BSR set to: 0
 28957                           ;keyboard.c: 1183: finish_arpeggio_setup();
 28958                           
 28959                           ; BSR set to: 0
 28960  005836  ECD8  F04C         	call	_finish_arpeggio_setup	;wreg free
 28961                           
 28962                           ;keyboard.c: 1185: TMR0ON = 1;
 28963  00583A  8ED5               	bsf	4053,7,c	;volatile
 28964                           
 28965                           ;keyboard.c: 1187: return;
 28966  00583C  0012               	return	
 28967  00583E                     l1671:
 28968                           
 28969                           ;keyboard.c: 1188: }
 28970                           ;keyboard.c: 1190: if((ON_OFF == 0) && (LATCH == 0)) {
 28971  00583E  B206               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 28972  005840  0012               	return	
 28973  005842  B404               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 28974  005844  0012               	return	
 28975                           
 28976                           ;keyboard.c: 1192: if(NUM_NOTES_PRESSED > 0){
 28977  005846  502E               	movf	_NUM_NOTES_PRESSED,w,c
 28978  005848  B4D8               	btfsc	status,2,c
 28979  00584A  D00A               	goto	l1679
 28980                           
 28981                           ;keyboard.c: 1193: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 28982  00584C  0E00               	movlw	0
 28983  00584E  B403               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 28984  005850  0E01               	movlw	1
 28985  005852  EC43  F04C         	call	_wait_one_pulse
 28986                           
 28987                           ;keyboard.c: 1194: if(note_off_was_sent == 0) {key_press_release_note_off();}
 28988  005856  A052               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 28989  005858  ECA7  F02E         	call	_key_press_release_note_off	;wreg free
 28990                           
 28991                           ;keyboard.c: 1195: TIMER_OVERFLOWS = 0;
 28992  00585C  0E00               	movlw	0
 28993  00585E  6E2D               	movwf	_TIMER_OVERFLOWS,c
 28994  005860                     l1679:
 28995                           
 28996                           ;keyboard.c: 1196: }
 28997                           ;keyboard.c: 1198: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 28998  005860  C02F  F062         	movff	_parallel,??_playDiatonicSeventhMajor
 28999  005864  0100               	movlb	0	; () banked
 29000  005866  6B63               	clrf	(??_playDiatonicSeventhMajor+1)& (0+255),b
 29001  005868  BF62               	btfsc	??_playDiatonicSeventhMajor& (0+255),7,b
 29002  00586A  0763               	decf	(??_playDiatonicSeventhMajor+1)& (0+255),f,b
 29003  00586C  5168               	movf	playDiatonicSeventhMajor@pitch& (0+255),w,b
 29004  00586E  6F64               	movwf	(??_playDiatonicSeventhMajor+2)& (0+255),b
 29005  005870  6B65               	clrf	(??_playDiatonicSeventhMajor+3)& (0+255),b
 29006  005872  5162               	movf	??_playDiatonicSeventhMajor& (0+255),w,b
 29007  005874  1964               	xorwf	(??_playDiatonicSeventhMajor+2)& (0+255),w,b
 29008  005876  E106               	bnz	l27042
 29009  005878  5163               	movf	(??_playDiatonicSeventhMajor+1)& (0+255),w,b
 29010  00587A  1965               	xorwf	(??_playDiatonicSeventhMajor+3)& (0+255),w,b
 29011  00587C  A4D8               	btfss	status,2,c
 29012  00587E  D002               	goto	l1681
 29013                           
 29014                           ; BSR set to: 0
 29015  005880  0E00               	movlw	0
 29016  005882  6E2E               	movwf	_NUM_NOTES_PRESSED,c
 29017  005884                     l1681:
 29018  005884                     l27042:
 29019                           
 29020                           ; BSR set to: 0
 29021                           ;keyboard.c: 1200: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 29022  005884  B004               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 29023                           
 29024                           ; BSR set to: 0
 29025  005886  AE03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 29026  005888  D001               	goto	l1682
 29027                           
 29028                           ; BSR set to: 0
 29029                           ;keyboard.c: 1201: LATCH = 1;
 29030  00588A  8404               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 29031  00588C                     l1682:
 29032                           
 29033                           ; BSR set to: 0
 29034                           ;keyboard.c: 1202: }
 29035                           ;keyboard.c: 1206: if(((UN_LATCH_MODE == 0 || (UN_LATCH_MODE == 1)) && (latch_was_presse
      +                          d == 1))){
 29036  00588C  A204               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 29037  00588E  D002               	goto	u46900
 29038                           
 29039                           ; BSR set to: 0
 29040  005890  A204               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 29041  005892  D006               	goto	l1683
 29042  005894                     u46900:
 29043                           
 29044                           ; BSR set to: 0
 29045  005894  AE03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 29046  005896  D004               	goto	l1683
 29047                           
 29048                           ; BSR set to: 0
 29049                           ;keyboard.c: 1207: NUM_NOTES_PRESSED = 0;
 29050  005898  0E00               	movlw	0
 29051  00589A  6E2E               	movwf	_NUM_NOTES_PRESSED,c
 29052                           
 29053                           ;keyboard.c: 1208: ARRAY_INDEX = 0;
 29054  00589C  0E00               	movlw	0
 29055  00589E  6FEC               	movwf	_ARRAY_INDEX& (0+255),b
 29056  0058A0                     l1683:
 29057                           
 29058                           ; BSR set to: 0
 29059                           ;keyboard.c: 1209: }
 29060                           ;keyboard.c: 1212: finish_arpeggio_setup();
 29061                           
 29062                           ; BSR set to: 0
 29063  0058A0  ECD8  F04C         	call	_finish_arpeggio_setup	;wreg free
 29064                           
 29065                           ;keyboard.c: 1213: TMR0ON = 1;
 29066  0058A4  8ED5               	bsf	4053,7,c	;volatile
 29067                           
 29068                           ;keyboard.c: 1215: return;
 29069  0058A6  0012               	return	
 29070  0058A8                     __end_of_playDiatonicSeventhMajor:
 29071                           	opt stack 0
 29072                           tblptru	equ	0xFF8
 29073                           tblptrh	equ	0xFF7
 29074                           tblptrl	equ	0xFF6
 29075                           tablat	equ	0xFF5
 29076                           prodh	equ	0xFF4
 29077                           prodl	equ	0xFF3
 29078                           intcon	equ	0xFF2
 29079                           intcon2	equ	0xFF1
 29080                           postinc0	equ	0xFEE
 29081                           wreg	equ	0xFE8
 29082                           postinc1	equ	0xFE6
 29083                           plusw1	equ	0xFE3
 29084                           fsr1h	equ	0xFE2
 29085                           fsr1l	equ	0xFE1
 29086                           indf2	equ	0xFDF
 29087                           postinc2	equ	0xFDE
 29088                           postdec2	equ	0xFDD
 29089                           plusw2	equ	0xFDB
 29090                           fsr2h	equ	0xFDA
 29091                           fsr2l	equ	0xFD9
 29092                           status	equ	0xFD8
 29093                           
 29094 ;; *************** function _keyboard_all_note_efficient *****************
 29095 ;; Defined at:
 29096 ;;		line 601 in file "keyboard.c"
 29097 ;; Parameters:    Size  Location     Type
 29098 ;;		None
 29099 ;; Auto vars:     Size  Location     Type
 29100 ;;  pitch           1   22[BANK0 ] unsigned char 
 29101 ;; Return value:  Size  Location     Type
 29102 ;;                  1    wreg      void 
 29103 ;; Registers used:
 29104 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29105 ;; Tracked objects:
 29106 ;;		On entry : 0/0
 29107 ;;		On exit  : 0/0
 29108 ;;		Unchanged: 0/0
 29109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 29110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29111 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29113 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 29114 ;;Total ram usage:        1 bytes
 29115 ;; Hardware stack levels used:    1
 29116 ;; Hardware stack levels required when called:   12
 29117 ;; This function calls:
 29118 ;;		_playThisNote
 29119 ;; This function is called by:
 29120 ;;		_processKeyboard
 29121 ;; This function uses a non-reentrant model
 29122 ;;
 29123                           
 29124                           	psect	text77
 29125  001DC2                     __ptext77:
 29126                           	opt stack 0
 29127  001DC2                     _keyboard_all_note_efficient:
 29128                           	opt stack 13
 29129                           
 29130                           ;keyboard.c: 603: unsigned char pitch;
 29131                           ;keyboard.c: 606: if((button_state_now & 0x00000001) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW1) {
 29132                           
 29133                           ;incstack = 0
 29134  001DC2  0100               	movlb	0	; () banked
 29135  001DC4  B1D9               	btfsc	_button_state_now& (0+255),0,b
 29136                           
 29137                           ; BSR set to: 0
 29138  001DC6  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 29139  001DC8  D00A               	goto	l1529
 29140                           
 29141                           ; BSR set to: 0
 29142  001DCA  B1D1               	btfsc	_keyboard& (0+255),0,b
 29143  001DCC  D008               	goto	l1529
 29144                           
 29145                           ; BSR set to: 0
 29146                           ;keyboard.c: 607: pitch = C;
 29147  001DCE  0E00               	movlw	0
 29148  001DD0  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29149                           
 29150                           ; BSR set to: 0
 29151                           ;keyboard.c: 608: ON_OFF = 1;
 29152  001DD2  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29153                           
 29154                           ; BSR set to: 0
 29155                           ;keyboard.c: 609: playThisNote(pitch);
 29156  001DD4  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29157  001DD6  EC26  F034         	call	_playThisNote
 29158                           
 29159                           ;keyboard.c: 610: keyboard.SW1 = 1;
 29160  001DDA  0100               	movlb	0	; () banked
 29161  001DDC  81D1               	bsf	_keyboard& (0+255),0,b
 29162  001DDE                     l1529:
 29163                           
 29164                           ; BSR set to: 0
 29165                           ;keyboard.c: 611: }
 29166                           ;keyboard.c: 613: if((button_state_now & 0x00000002) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW2) {
 29167                           
 29168                           ; BSR set to: 0
 29169  001DDE  B3D9               	btfsc	_button_state_now& (0+255),1,b
 29170                           
 29171                           ; BSR set to: 0
 29172  001DE0  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 29173  001DE2  D00A               	goto	l1530
 29174                           
 29175                           ; BSR set to: 0
 29176  001DE4  B3D1               	btfsc	_keyboard& (0+255),1,b
 29177  001DE6  D008               	goto	l1530
 29178                           
 29179                           ; BSR set to: 0
 29180                           ;keyboard.c: 614: pitch = Cs;
 29181  001DE8  0E01               	movlw	1
 29182  001DEA  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29183                           
 29184                           ; BSR set to: 0
 29185                           ;keyboard.c: 615: ON_OFF = 1;
 29186  001DEC  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29187                           
 29188                           ; BSR set to: 0
 29189                           ;keyboard.c: 616: playThisNote(pitch);
 29190  001DEE  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29191  001DF0  EC26  F034         	call	_playThisNote
 29192                           
 29193                           ;keyboard.c: 617: keyboard.SW2 = 1;
 29194  001DF4  0100               	movlb	0	; () banked
 29195  001DF6  83D1               	bsf	_keyboard& (0+255),1,b
 29196  001DF8                     l1530:
 29197                           
 29198                           ; BSR set to: 0
 29199                           ;keyboard.c: 618: }
 29200                           ;keyboard.c: 620: if((button_state_now & 0x00000004) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW3) {
 29201                           
 29202                           ; BSR set to: 0
 29203  001DF8  B5D9               	btfsc	_button_state_now& (0+255),2,b
 29204                           
 29205                           ; BSR set to: 0
 29206  001DFA  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 29207  001DFC  D00A               	goto	l1531
 29208                           
 29209                           ; BSR set to: 0
 29210  001DFE  B5D1               	btfsc	_keyboard& (0+255),2,b
 29211  001E00  D008               	goto	l1531
 29212                           
 29213                           ; BSR set to: 0
 29214                           ;keyboard.c: 621: pitch = D;
 29215  001E02  0E02               	movlw	2
 29216  001E04  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29217                           
 29218                           ; BSR set to: 0
 29219                           ;keyboard.c: 622: ON_OFF = 1;
 29220  001E06  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29221                           
 29222                           ; BSR set to: 0
 29223                           ;keyboard.c: 623: playThisNote(pitch);
 29224  001E08  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29225  001E0A  EC26  F034         	call	_playThisNote
 29226                           
 29227                           ;keyboard.c: 624: keyboard.SW3 = 1;
 29228  001E0E  0100               	movlb	0	; () banked
 29229  001E10  85D1               	bsf	_keyboard& (0+255),2,b
 29230  001E12                     l1531:
 29231                           
 29232                           ; BSR set to: 0
 29233                           ;keyboard.c: 625: }
 29234                           ;keyboard.c: 626: if((button_state_now & 0x00000008) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW4) {
 29235                           
 29236                           ; BSR set to: 0
 29237  001E12  B7D9               	btfsc	_button_state_now& (0+255),3,b
 29238                           
 29239                           ; BSR set to: 0
 29240  001E14  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 29241  001E16  D00A               	goto	l1532
 29242                           
 29243                           ; BSR set to: 0
 29244  001E18  B7D1               	btfsc	_keyboard& (0+255),3,b
 29245  001E1A  D008               	goto	l1532
 29246                           
 29247                           ; BSR set to: 0
 29248                           ;keyboard.c: 627: pitch = Ds;
 29249  001E1C  0E03               	movlw	3
 29250  001E1E  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29251                           
 29252                           ; BSR set to: 0
 29253                           ;keyboard.c: 628: ON_OFF = 1;
 29254  001E20  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29255                           
 29256                           ; BSR set to: 0
 29257                           ;keyboard.c: 629: playThisNote(pitch);
 29258  001E22  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29259  001E24  EC26  F034         	call	_playThisNote
 29260                           
 29261                           ;keyboard.c: 630: keyboard.SW4 = 1;
 29262  001E28  0100               	movlb	0	; () banked
 29263  001E2A  87D1               	bsf	_keyboard& (0+255),3,b
 29264  001E2C                     l1532:
 29265                           
 29266                           ; BSR set to: 0
 29267                           ;keyboard.c: 631: }
 29268                           ;keyboard.c: 632: if((button_state_now & 0x00000010) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW5) {
 29269                           
 29270                           ; BSR set to: 0
 29271  001E2C  B9D9               	btfsc	_button_state_now& (0+255),4,b
 29272                           
 29273                           ; BSR set to: 0
 29274  001E2E  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 29275  001E30  D00A               	goto	l1533
 29276                           
 29277                           ; BSR set to: 0
 29278  001E32  B9D1               	btfsc	_keyboard& (0+255),4,b
 29279  001E34  D008               	goto	l1533
 29280                           
 29281                           ; BSR set to: 0
 29282                           ;keyboard.c: 633: pitch = E;
 29283  001E36  0E04               	movlw	4
 29284  001E38  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29285                           
 29286                           ; BSR set to: 0
 29287                           ;keyboard.c: 634: ON_OFF = 1;
 29288  001E3A  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29289                           
 29290                           ; BSR set to: 0
 29291                           ;keyboard.c: 635: playThisNote(pitch);
 29292  001E3C  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29293  001E3E  EC26  F034         	call	_playThisNote
 29294                           
 29295                           ;keyboard.c: 636: keyboard.SW5 = 1;
 29296  001E42  0100               	movlb	0	; () banked
 29297  001E44  89D1               	bsf	_keyboard& (0+255),4,b
 29298  001E46                     l1533:
 29299                           
 29300                           ; BSR set to: 0
 29301                           ;keyboard.c: 637: }
 29302                           ;keyboard.c: 638: if((button_state_now & 0x00000020) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW6) {
 29303                           
 29304                           ; BSR set to: 0
 29305  001E46  BBD9               	btfsc	_button_state_now& (0+255),5,b
 29306                           
 29307                           ; BSR set to: 0
 29308  001E48  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 29309  001E4A  D00A               	goto	l1534
 29310                           
 29311                           ; BSR set to: 0
 29312  001E4C  BBD1               	btfsc	_keyboard& (0+255),5,b
 29313  001E4E  D008               	goto	l1534
 29314                           
 29315                           ; BSR set to: 0
 29316                           ;keyboard.c: 639: pitch = F;
 29317  001E50  0E05               	movlw	5
 29318  001E52  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29319                           
 29320                           ; BSR set to: 0
 29321                           ;keyboard.c: 640: ON_OFF = 1;
 29322  001E54  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29323                           
 29324                           ; BSR set to: 0
 29325                           ;keyboard.c: 641: playThisNote(pitch);
 29326  001E56  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29327  001E58  EC26  F034         	call	_playThisNote
 29328                           
 29329                           ;keyboard.c: 642: keyboard.SW6 = 1;
 29330  001E5C  0100               	movlb	0	; () banked
 29331  001E5E  8BD1               	bsf	_keyboard& (0+255),5,b
 29332  001E60                     l1534:
 29333                           
 29334                           ; BSR set to: 0
 29335                           ;keyboard.c: 643: }
 29336                           ;keyboard.c: 644: if((button_state_now & 0x00000040) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW7) {
 29337                           
 29338                           ; BSR set to: 0
 29339  001E60  BDD9               	btfsc	_button_state_now& (0+255),6,b
 29340                           
 29341                           ; BSR set to: 0
 29342  001E62  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 29343  001E64  D00A               	goto	l1535
 29344                           
 29345                           ; BSR set to: 0
 29346  001E66  BDD1               	btfsc	_keyboard& (0+255),6,b
 29347  001E68  D008               	goto	l1535
 29348                           
 29349                           ; BSR set to: 0
 29350                           ;keyboard.c: 645: pitch = Fs;
 29351  001E6A  0E06               	movlw	6
 29352  001E6C  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29353                           
 29354                           ; BSR set to: 0
 29355                           ;keyboard.c: 646: ON_OFF = 1;
 29356  001E6E  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29357                           
 29358                           ; BSR set to: 0
 29359                           ;keyboard.c: 647: playThisNote(pitch);
 29360  001E70  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29361  001E72  EC26  F034         	call	_playThisNote
 29362                           
 29363                           ;keyboard.c: 648: keyboard.SW7 = 1;
 29364  001E76  0100               	movlb	0	; () banked
 29365  001E78  8DD1               	bsf	_keyboard& (0+255),6,b
 29366  001E7A                     l1535:
 29367                           
 29368                           ; BSR set to: 0
 29369                           ;keyboard.c: 649: }
 29370                           ;keyboard.c: 650: if((button_state_now & 0x00000080) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW8) {
 29371                           
 29372                           ; BSR set to: 0
 29373  001E7A  BFD9               	btfsc	_button_state_now& (0+255),7,b
 29374                           
 29375                           ; BSR set to: 0
 29376  001E7C  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 29377  001E7E  D00A               	goto	l1536
 29378                           
 29379                           ; BSR set to: 0
 29380  001E80  BFD1               	btfsc	_keyboard& (0+255),7,b
 29381  001E82  D008               	goto	l1536
 29382                           
 29383                           ; BSR set to: 0
 29384                           ;keyboard.c: 651: pitch = G;
 29385  001E84  0E07               	movlw	7
 29386  001E86  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29387                           
 29388                           ; BSR set to: 0
 29389                           ;keyboard.c: 652: ON_OFF = 1;
 29390  001E88  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29391                           
 29392                           ; BSR set to: 0
 29393                           ;keyboard.c: 653: playThisNote(pitch);
 29394  001E8A  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29395  001E8C  EC26  F034         	call	_playThisNote
 29396                           
 29397                           ;keyboard.c: 654: keyboard.SW8 = 1;
 29398  001E90  0100               	movlb	0	; () banked
 29399  001E92  8FD1               	bsf	_keyboard& (0+255),7,b
 29400  001E94                     l1536:
 29401                           
 29402                           ; BSR set to: 0
 29403                           ;keyboard.c: 655: }
 29404                           ;keyboard.c: 656: if((button_state_now & 0x00000100) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW9) {
 29405                           
 29406                           ; BSR set to: 0
 29407  001E94  B1DA               	btfsc	(_button_state_now+1)& (0+255),0,b
 29408                           
 29409                           ; BSR set to: 0
 29410  001E96  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 29411  001E98  D00A               	goto	l1537
 29412                           
 29413                           ; BSR set to: 0
 29414  001E9A  B1D2               	btfsc	(_keyboard+1)& (0+255),0,b
 29415  001E9C  D008               	goto	l1537
 29416                           
 29417                           ; BSR set to: 0
 29418                           ;keyboard.c: 657: pitch = Gs;
 29419  001E9E  0E08               	movlw	8
 29420  001EA0  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29421                           
 29422                           ; BSR set to: 0
 29423                           ;keyboard.c: 658: ON_OFF = 1;
 29424  001EA2  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29425                           
 29426                           ; BSR set to: 0
 29427                           ;keyboard.c: 659: playThisNote(pitch);
 29428  001EA4  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29429  001EA6  EC26  F034         	call	_playThisNote
 29430                           
 29431                           ;keyboard.c: 660: keyboard.SW9 = 1;
 29432  001EAA  0100               	movlb	0	; () banked
 29433  001EAC  81D2               	bsf	(_keyboard+1)& (0+255),0,b
 29434  001EAE                     l1537:
 29435                           
 29436                           ; BSR set to: 0
 29437                           ;keyboard.c: 661: }
 29438                           ;keyboard.c: 662: if((button_state_now & 0x00000200) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW10) {
 29439                           
 29440                           ; BSR set to: 0
 29441  001EAE  B3DA               	btfsc	(_button_state_now+1)& (0+255),1,b
 29442                           
 29443                           ; BSR set to: 0
 29444  001EB0  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 29445  001EB2  D00A               	goto	l1538
 29446                           
 29447                           ; BSR set to: 0
 29448  001EB4  B3D2               	btfsc	(_keyboard+1)& (0+255),1,b
 29449  001EB6  D008               	goto	l1538
 29450                           
 29451                           ; BSR set to: 0
 29452                           ;keyboard.c: 663: pitch = A;
 29453  001EB8  0E09               	movlw	9
 29454  001EBA  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29455                           
 29456                           ; BSR set to: 0
 29457                           ;keyboard.c: 664: ON_OFF = 1;
 29458  001EBC  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29459                           
 29460                           ; BSR set to: 0
 29461                           ;keyboard.c: 665: playThisNote(pitch);
 29462  001EBE  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29463  001EC0  EC26  F034         	call	_playThisNote
 29464                           
 29465                           ;keyboard.c: 666: keyboard.SW10 = 1;
 29466  001EC4  0100               	movlb	0	; () banked
 29467  001EC6  83D2               	bsf	(_keyboard+1)& (0+255),1,b
 29468  001EC8                     l1538:
 29469                           
 29470                           ; BSR set to: 0
 29471                           ;keyboard.c: 667: }
 29472                           ;keyboard.c: 668: if((button_state_now & 0x00000400) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW11) {
 29473                           
 29474                           ; BSR set to: 0
 29475  001EC8  B5DA               	btfsc	(_button_state_now+1)& (0+255),2,b
 29476                           
 29477                           ; BSR set to: 0
 29478  001ECA  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 29479  001ECC  D00A               	goto	l1539
 29480                           
 29481                           ; BSR set to: 0
 29482  001ECE  B5D2               	btfsc	(_keyboard+1)& (0+255),2,b
 29483  001ED0  D008               	goto	l1539
 29484                           
 29485                           ; BSR set to: 0
 29486                           ;keyboard.c: 669: pitch = As;
 29487  001ED2  0E0A               	movlw	10
 29488  001ED4  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29489                           
 29490                           ; BSR set to: 0
 29491                           ;keyboard.c: 670: ON_OFF = 1;
 29492  001ED6  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29493                           
 29494                           ; BSR set to: 0
 29495                           ;keyboard.c: 671: playThisNote(pitch);
 29496  001ED8  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29497  001EDA  EC26  F034         	call	_playThisNote
 29498                           
 29499                           ;keyboard.c: 672: keyboard.SW11 = 1;
 29500  001EDE  0100               	movlb	0	; () banked
 29501  001EE0  85D2               	bsf	(_keyboard+1)& (0+255),2,b
 29502  001EE2                     l1539:
 29503                           
 29504                           ; BSR set to: 0
 29505                           ;keyboard.c: 673: }
 29506                           ;keyboard.c: 674: if((button_state_now & 0x00000800) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW12) {
 29507                           
 29508                           ; BSR set to: 0
 29509  001EE2  B7DA               	btfsc	(_button_state_now+1)& (0+255),3,b
 29510                           
 29511                           ; BSR set to: 0
 29512  001EE4  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 29513  001EE6  D00A               	goto	l1540
 29514                           
 29515                           ; BSR set to: 0
 29516  001EE8  B7D2               	btfsc	(_keyboard+1)& (0+255),3,b
 29517  001EEA  D008               	goto	l1540
 29518                           
 29519                           ; BSR set to: 0
 29520                           ;keyboard.c: 675: pitch = B;
 29521  001EEC  0E0B               	movlw	11
 29522  001EEE  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29523                           
 29524                           ; BSR set to: 0
 29525                           ;keyboard.c: 676: ON_OFF = 1;
 29526  001EF0  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29527                           
 29528                           ; BSR set to: 0
 29529                           ;keyboard.c: 677: playThisNote(pitch);
 29530  001EF2  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29531  001EF4  EC26  F034         	call	_playThisNote
 29532                           
 29533                           ;keyboard.c: 678: keyboard.SW12 = 1;
 29534  001EF8  0100               	movlb	0	; () banked
 29535  001EFA  87D2               	bsf	(_keyboard+1)& (0+255),3,b
 29536  001EFC                     l1540:
 29537                           
 29538                           ; BSR set to: 0
 29539                           ;keyboard.c: 679: }
 29540                           ;keyboard.c: 680: if((button_state_now & 0x00001000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW13) {
 29541                           
 29542                           ; BSR set to: 0
 29543  001EFC  B9DA               	btfsc	(_button_state_now+1)& (0+255),4,b
 29544                           
 29545                           ; BSR set to: 0
 29546  001EFE  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 29547  001F00  D00A               	goto	l1541
 29548                           
 29549                           ; BSR set to: 0
 29550  001F02  B9D2               	btfsc	(_keyboard+1)& (0+255),4,b
 29551  001F04  D008               	goto	l1541
 29552                           
 29553                           ; BSR set to: 0
 29554                           ;keyboard.c: 681: pitch = C2;
 29555  001F06  0E0C               	movlw	12
 29556  001F08  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29557                           
 29558                           ; BSR set to: 0
 29559                           ;keyboard.c: 682: ON_OFF = 1;
 29560  001F0A  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29561                           
 29562                           ; BSR set to: 0
 29563                           ;keyboard.c: 683: playThisNote(pitch);
 29564  001F0C  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29565  001F0E  EC26  F034         	call	_playThisNote
 29566                           
 29567                           ;keyboard.c: 684: keyboard.SW13 = 1;
 29568  001F12  0100               	movlb	0	; () banked
 29569  001F14  89D2               	bsf	(_keyboard+1)& (0+255),4,b
 29570  001F16                     l1541:
 29571                           
 29572                           ; BSR set to: 0
 29573                           ;keyboard.c: 685: }
 29574                           ;keyboard.c: 686: if((button_state_now & 0x00002000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW14) {
 29575                           
 29576                           ; BSR set to: 0
 29577  001F16  BBDA               	btfsc	(_button_state_now+1)& (0+255),5,b
 29578                           
 29579                           ; BSR set to: 0
 29580  001F18  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 29581  001F1A  D00A               	goto	l1542
 29582                           
 29583                           ; BSR set to: 0
 29584  001F1C  BBD2               	btfsc	(_keyboard+1)& (0+255),5,b
 29585  001F1E  D008               	goto	l1542
 29586                           
 29587                           ; BSR set to: 0
 29588                           ;keyboard.c: 687: pitch = C2s;
 29589  001F20  0E0D               	movlw	13
 29590  001F22  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29591                           
 29592                           ; BSR set to: 0
 29593                           ;keyboard.c: 688: ON_OFF = 1;
 29594  001F24  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29595                           
 29596                           ; BSR set to: 0
 29597                           ;keyboard.c: 689: playThisNote(pitch);
 29598  001F26  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29599  001F28  EC26  F034         	call	_playThisNote
 29600                           
 29601                           ;keyboard.c: 690: keyboard.SW14 = 1;
 29602  001F2C  0100               	movlb	0	; () banked
 29603  001F2E  8BD2               	bsf	(_keyboard+1)& (0+255),5,b
 29604  001F30                     l1542:
 29605                           
 29606                           ; BSR set to: 0
 29607                           ;keyboard.c: 691: }
 29608                           ;keyboard.c: 692: if((button_state_now & 0x00004000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW15) {
 29609                           
 29610                           ; BSR set to: 0
 29611  001F30  BDDA               	btfsc	(_button_state_now+1)& (0+255),6,b
 29612                           
 29613                           ; BSR set to: 0
 29614  001F32  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 29615  001F34  D00A               	goto	l1543
 29616                           
 29617                           ; BSR set to: 0
 29618  001F36  BDD2               	btfsc	(_keyboard+1)& (0+255),6,b
 29619  001F38  D008               	goto	l1543
 29620                           
 29621                           ; BSR set to: 0
 29622                           ;keyboard.c: 693: pitch = D2;
 29623  001F3A  0E0E               	movlw	14
 29624  001F3C  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29625                           
 29626                           ; BSR set to: 0
 29627                           ;keyboard.c: 694: ON_OFF = 1;
 29628  001F3E  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29629                           
 29630                           ; BSR set to: 0
 29631                           ;keyboard.c: 695: playThisNote(pitch);
 29632  001F40  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29633  001F42  EC26  F034         	call	_playThisNote
 29634                           
 29635                           ;keyboard.c: 696: keyboard.SW15 = 1;
 29636  001F46  0100               	movlb	0	; () banked
 29637  001F48  8DD2               	bsf	(_keyboard+1)& (0+255),6,b
 29638  001F4A                     l1543:
 29639                           
 29640                           ; BSR set to: 0
 29641                           ;keyboard.c: 697: }
 29642                           ;keyboard.c: 698: if((button_state_now & 0x00008000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW16) {
 29643                           
 29644                           ; BSR set to: 0
 29645  001F4A  BFDA               	btfsc	(_button_state_now+1)& (0+255),7,b
 29646                           
 29647                           ; BSR set to: 0
 29648  001F4C  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 29649  001F4E  D00A               	goto	l1544
 29650                           
 29651                           ; BSR set to: 0
 29652  001F50  BFD2               	btfsc	(_keyboard+1)& (0+255),7,b
 29653  001F52  D008               	goto	l1544
 29654                           
 29655                           ; BSR set to: 0
 29656                           ;keyboard.c: 699: pitch = D2s;
 29657  001F54  0E0F               	movlw	15
 29658  001F56  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29659                           
 29660                           ; BSR set to: 0
 29661                           ;keyboard.c: 700: ON_OFF = 1;
 29662  001F58  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29663                           
 29664                           ; BSR set to: 0
 29665                           ;keyboard.c: 701: playThisNote(pitch);
 29666  001F5A  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29667  001F5C  EC26  F034         	call	_playThisNote
 29668                           
 29669                           ;keyboard.c: 702: keyboard.SW16 = 1;
 29670  001F60  0100               	movlb	0	; () banked
 29671  001F62  8FD2               	bsf	(_keyboard+1)& (0+255),7,b
 29672  001F64                     l1544:
 29673                           
 29674                           ; BSR set to: 0
 29675                           ;keyboard.c: 703: }
 29676                           ;keyboard.c: 704: if((button_state_now & 0x00010000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW17) {
 29677                           
 29678                           ; BSR set to: 0
 29679  001F64  B1DB               	btfsc	(_button_state_now+2)& (0+255),0,b
 29680                           
 29681                           ; BSR set to: 0
 29682  001F66  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 29683  001F68  D00A               	goto	l1545
 29684                           
 29685                           ; BSR set to: 0
 29686  001F6A  B1D3               	btfsc	(_keyboard+2)& (0+255),0,b
 29687  001F6C  D008               	goto	l1545
 29688                           
 29689                           ; BSR set to: 0
 29690                           ;keyboard.c: 705: pitch = E2;
 29691  001F6E  0E10               	movlw	16
 29692  001F70  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29693                           
 29694                           ; BSR set to: 0
 29695                           ;keyboard.c: 706: ON_OFF = 1;
 29696  001F72  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29697                           
 29698                           ; BSR set to: 0
 29699                           ;keyboard.c: 707: playThisNote(pitch);
 29700  001F74  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29701  001F76  EC26  F034         	call	_playThisNote
 29702                           
 29703                           ;keyboard.c: 708: keyboard.SW17 = 1;
 29704  001F7A  0100               	movlb	0	; () banked
 29705  001F7C  81D3               	bsf	(_keyboard+2)& (0+255),0,b
 29706  001F7E                     l1545:
 29707                           
 29708                           ; BSR set to: 0
 29709                           ;keyboard.c: 709: }
 29710                           ;keyboard.c: 710: if((button_state_now & 0x00020000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW18) {
 29711                           
 29712                           ; BSR set to: 0
 29713  001F7E  B3DB               	btfsc	(_button_state_now+2)& (0+255),1,b
 29714                           
 29715                           ; BSR set to: 0
 29716  001F80  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 29717  001F82  D00A               	goto	l1546
 29718                           
 29719                           ; BSR set to: 0
 29720  001F84  B3D3               	btfsc	(_keyboard+2)& (0+255),1,b
 29721  001F86  D008               	goto	l1546
 29722                           
 29723                           ; BSR set to: 0
 29724                           ;keyboard.c: 711: pitch = F2;
 29725  001F88  0E11               	movlw	17
 29726  001F8A  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29727                           
 29728                           ; BSR set to: 0
 29729                           ;keyboard.c: 712: ON_OFF = 1;
 29730  001F8C  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29731                           
 29732                           ; BSR set to: 0
 29733                           ;keyboard.c: 713: playThisNote(pitch);
 29734  001F8E  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29735  001F90  EC26  F034         	call	_playThisNote
 29736                           
 29737                           ;keyboard.c: 714: keyboard.SW18 = 1;
 29738  001F94  0100               	movlb	0	; () banked
 29739  001F96  83D3               	bsf	(_keyboard+2)& (0+255),1,b
 29740  001F98                     l1546:
 29741                           
 29742                           ; BSR set to: 0
 29743                           ;keyboard.c: 715: }
 29744                           ;keyboard.c: 716: if((button_state_now & 0x00040000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW19) {
 29745                           
 29746                           ; BSR set to: 0
 29747  001F98  B5DB               	btfsc	(_button_state_now+2)& (0+255),2,b
 29748                           
 29749                           ; BSR set to: 0
 29750  001F9A  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 29751  001F9C  D00A               	goto	l1547
 29752                           
 29753                           ; BSR set to: 0
 29754  001F9E  B5D3               	btfsc	(_keyboard+2)& (0+255),2,b
 29755  001FA0  D008               	goto	l1547
 29756                           
 29757                           ; BSR set to: 0
 29758                           ;keyboard.c: 717: pitch = F2s;
 29759  001FA2  0E12               	movlw	18
 29760  001FA4  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29761                           
 29762                           ; BSR set to: 0
 29763                           ;keyboard.c: 718: ON_OFF = 1;
 29764  001FA6  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29765                           
 29766                           ; BSR set to: 0
 29767                           ;keyboard.c: 719: playThisNote(pitch);
 29768  001FA8  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29769  001FAA  EC26  F034         	call	_playThisNote
 29770                           
 29771                           ;keyboard.c: 720: keyboard.SW19 = 1;
 29772  001FAE  0100               	movlb	0	; () banked
 29773  001FB0  85D3               	bsf	(_keyboard+2)& (0+255),2,b
 29774  001FB2                     l1547:
 29775                           
 29776                           ; BSR set to: 0
 29777                           ;keyboard.c: 721: }
 29778                           ;keyboard.c: 722: if((button_state_now & 0x00080000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW20) {
 29779                           
 29780                           ; BSR set to: 0
 29781  001FB2  B7DB               	btfsc	(_button_state_now+2)& (0+255),3,b
 29782                           
 29783                           ; BSR set to: 0
 29784  001FB4  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 29785  001FB6  D00A               	goto	l1548
 29786                           
 29787                           ; BSR set to: 0
 29788  001FB8  B7D3               	btfsc	(_keyboard+2)& (0+255),3,b
 29789  001FBA  D008               	goto	l1548
 29790                           
 29791                           ; BSR set to: 0
 29792                           ;keyboard.c: 723: pitch = G2;
 29793  001FBC  0E13               	movlw	19
 29794  001FBE  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29795                           
 29796                           ; BSR set to: 0
 29797                           ;keyboard.c: 724: ON_OFF = 1;
 29798  001FC0  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29799                           
 29800                           ; BSR set to: 0
 29801                           ;keyboard.c: 725: playThisNote(pitch);
 29802  001FC2  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29803  001FC4  EC26  F034         	call	_playThisNote
 29804                           
 29805                           ;keyboard.c: 726: keyboard.SW20 = 1;
 29806  001FC8  0100               	movlb	0	; () banked
 29807  001FCA  87D3               	bsf	(_keyboard+2)& (0+255),3,b
 29808  001FCC                     l1548:
 29809                           
 29810                           ; BSR set to: 0
 29811                           ;keyboard.c: 727: }
 29812                           ;keyboard.c: 728: if((button_state_now & 0x00100000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW21) {
 29813                           
 29814                           ; BSR set to: 0
 29815  001FCC  B9DB               	btfsc	(_button_state_now+2)& (0+255),4,b
 29816                           
 29817                           ; BSR set to: 0
 29818  001FCE  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 29819  001FD0  D00A               	goto	l1549
 29820                           
 29821                           ; BSR set to: 0
 29822  001FD2  B9D3               	btfsc	(_keyboard+2)& (0+255),4,b
 29823  001FD4  D008               	goto	l1549
 29824                           
 29825                           ; BSR set to: 0
 29826                           ;keyboard.c: 729: pitch = G2s;
 29827  001FD6  0E14               	movlw	20
 29828  001FD8  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29829                           
 29830                           ; BSR set to: 0
 29831                           ;keyboard.c: 730: ON_OFF = 1;
 29832  001FDA  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29833                           
 29834                           ; BSR set to: 0
 29835                           ;keyboard.c: 731: playThisNote(pitch);
 29836  001FDC  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29837  001FDE  EC26  F034         	call	_playThisNote
 29838                           
 29839                           ;keyboard.c: 732: keyboard.SW21 = 1;
 29840  001FE2  0100               	movlb	0	; () banked
 29841  001FE4  89D3               	bsf	(_keyboard+2)& (0+255),4,b
 29842  001FE6                     l1549:
 29843                           
 29844                           ; BSR set to: 0
 29845                           ;keyboard.c: 733: }
 29846                           ;keyboard.c: 734: if((button_state_now & 0x00200000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW22) {
 29847                           
 29848                           ; BSR set to: 0
 29849  001FE6  BBDB               	btfsc	(_button_state_now+2)& (0+255),5,b
 29850                           
 29851                           ; BSR set to: 0
 29852  001FE8  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 29853  001FEA  D00A               	goto	l1550
 29854                           
 29855                           ; BSR set to: 0
 29856  001FEC  BBD3               	btfsc	(_keyboard+2)& (0+255),5,b
 29857  001FEE  D008               	goto	l1550
 29858                           
 29859                           ; BSR set to: 0
 29860                           ;keyboard.c: 735: pitch = A2;
 29861  001FF0  0E15               	movlw	21
 29862  001FF2  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29863                           
 29864                           ; BSR set to: 0
 29865                           ;keyboard.c: 736: ON_OFF = 1;
 29866  001FF4  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29867                           
 29868                           ; BSR set to: 0
 29869                           ;keyboard.c: 737: playThisNote(pitch);
 29870  001FF6  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29871  001FF8  EC26  F034         	call	_playThisNote
 29872                           
 29873                           ;keyboard.c: 738: keyboard.SW22 = 1;
 29874  001FFC  0100               	movlb	0	; () banked
 29875  001FFE  8BD3               	bsf	(_keyboard+2)& (0+255),5,b
 29876  002000                     l1550:
 29877                           
 29878                           ; BSR set to: 0
 29879                           ;keyboard.c: 739: }
 29880                           ;keyboard.c: 740: if((button_state_now & 0x00400000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW23) {
 29881                           
 29882                           ; BSR set to: 0
 29883  002000  BDDB               	btfsc	(_button_state_now+2)& (0+255),6,b
 29884                           
 29885                           ; BSR set to: 0
 29886  002002  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 29887  002004  D00A               	goto	l1551
 29888                           
 29889                           ; BSR set to: 0
 29890  002006  BDD3               	btfsc	(_keyboard+2)& (0+255),6,b
 29891  002008  D008               	goto	l1551
 29892                           
 29893                           ; BSR set to: 0
 29894                           ;keyboard.c: 741: pitch = A2s;
 29895  00200A  0E16               	movlw	22
 29896  00200C  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29897                           
 29898                           ; BSR set to: 0
 29899                           ;keyboard.c: 742: ON_OFF = 1;
 29900  00200E  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29901                           
 29902                           ; BSR set to: 0
 29903                           ;keyboard.c: 743: playThisNote(pitch);
 29904  002010  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29905  002012  EC26  F034         	call	_playThisNote
 29906                           
 29907                           ;keyboard.c: 744: keyboard.SW23 = 1;
 29908  002016  0100               	movlb	0	; () banked
 29909  002018  8DD3               	bsf	(_keyboard+2)& (0+255),6,b
 29910  00201A                     l1551:
 29911                           
 29912                           ; BSR set to: 0
 29913                           ;keyboard.c: 745: }
 29914                           ;keyboard.c: 746: if((button_state_now & 0x00800000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW24) {
 29915                           
 29916                           ; BSR set to: 0
 29917  00201A  BFDB               	btfsc	(_button_state_now+2)& (0+255),7,b
 29918                           
 29919                           ; BSR set to: 0
 29920  00201C  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 29921  00201E  D00A               	goto	l1552
 29922                           
 29923                           ; BSR set to: 0
 29924  002020  BFD3               	btfsc	(_keyboard+2)& (0+255),7,b
 29925  002022  D008               	goto	l1552
 29926                           
 29927                           ; BSR set to: 0
 29928                           ;keyboard.c: 747: pitch = B2;
 29929  002024  0E17               	movlw	23
 29930  002026  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29931                           
 29932                           ; BSR set to: 0
 29933                           ;keyboard.c: 748: ON_OFF = 1;
 29934  002028  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29935                           
 29936                           ; BSR set to: 0
 29937                           ;keyboard.c: 749: playThisNote(pitch);
 29938  00202A  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29939  00202C  EC26  F034         	call	_playThisNote
 29940                           
 29941                           ;keyboard.c: 750: keyboard.SW24 = 1;
 29942  002030  0100               	movlb	0	; () banked
 29943  002032  8FD3               	bsf	(_keyboard+2)& (0+255),7,b
 29944  002034                     l1552:
 29945                           
 29946                           ; BSR set to: 0
 29947                           ;keyboard.c: 751: }
 29948                           ;keyboard.c: 752: if((button_state_now & 0x01000000) && !(button_state_now & 0x08000000)
      +                           && !keyboard.SW25) {
 29949                           
 29950                           ; BSR set to: 0
 29951  002034  B1DC               	btfsc	(_button_state_now+3)& (0+255),0,b
 29952                           
 29953                           ; BSR set to: 0
 29954  002036  B7DC               	btfsc	(_button_state_now+3)& (0+255),3,b
 29955  002038  D00A               	goto	l1553
 29956                           
 29957                           ; BSR set to: 0
 29958  00203A  B1D4               	btfsc	(_keyboard+3)& (0+255),0,b
 29959  00203C  D008               	goto	l1553
 29960                           
 29961                           ; BSR set to: 0
 29962                           ;keyboard.c: 753: pitch = C3;
 29963  00203E  0E18               	movlw	24
 29964  002040  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29965                           
 29966                           ; BSR set to: 0
 29967                           ;keyboard.c: 754: ON_OFF = 1;
 29968  002042  8206               	bsf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 29969                           
 29970                           ; BSR set to: 0
 29971                           ;keyboard.c: 755: playThisNote(pitch);
 29972  002044  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 29973  002046  EC26  F034         	call	_playThisNote
 29974                           
 29975                           ;keyboard.c: 756: keyboard.SW25 = 1;
 29976  00204A  0100               	movlb	0	; () banked
 29977  00204C  81D4               	bsf	(_keyboard+3)& (0+255),0,b
 29978  00204E                     l1553:
 29979                           
 29980                           ; BSR set to: 0
 29981                           ;keyboard.c: 757: }
 29982                           ;keyboard.c: 760: if(((button_state_last & 0x00000001)) && ((button_state_now & 0x000000
      +                          01) == 0) && keyboard.SW1) {
 29983                           
 29984                           ; BSR set to: 0
 29985  00204E  B1D5               	btfsc	_button_state_last& (0+255),0,b
 29986                           
 29987                           ; BSR set to: 0
 29988  002050  B1D9               	btfsc	_button_state_now& (0+255),0,b
 29989  002052  D00A               	goto	l1554
 29990                           
 29991                           ; BSR set to: 0
 29992  002054  A1D1               	btfss	_keyboard& (0+255),0,b
 29993  002056  D008               	goto	l1554
 29994                           
 29995                           ; BSR set to: 0
 29996                           ;keyboard.c: 761: pitch = C;
 29997  002058  0E00               	movlw	0
 29998  00205A  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 29999                           
 30000                           ; BSR set to: 0
 30001                           ;keyboard.c: 762: ON_OFF = 0;
 30002  00205C  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30003                           
 30004                           ; BSR set to: 0
 30005                           ;keyboard.c: 763: playThisNote(pitch);
 30006  00205E  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30007  002060  EC26  F034         	call	_playThisNote
 30008                           
 30009                           ;keyboard.c: 764: keyboard.SW1 = 0;
 30010  002064  0100               	movlb	0	; () banked
 30011  002066  91D1               	bcf	_keyboard& (0+255),0,b
 30012  002068                     l1554:
 30013                           
 30014                           ; BSR set to: 0
 30015                           ;keyboard.c: 765: }
 30016                           ;keyboard.c: 766: if(((button_state_last & 0x00000002)) && ((button_state_now & 0x000000
      +                          02) == 0) && keyboard.SW2) {
 30017                           
 30018                           ; BSR set to: 0
 30019  002068  B3D5               	btfsc	_button_state_last& (0+255),1,b
 30020                           
 30021                           ; BSR set to: 0
 30022  00206A  B3D9               	btfsc	_button_state_now& (0+255),1,b
 30023  00206C  D00A               	goto	l1555
 30024                           
 30025                           ; BSR set to: 0
 30026  00206E  A3D1               	btfss	_keyboard& (0+255),1,b
 30027  002070  D008               	goto	l1555
 30028                           
 30029                           ; BSR set to: 0
 30030                           ;keyboard.c: 767: pitch = Cs;
 30031  002072  0E01               	movlw	1
 30032  002074  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30033                           
 30034                           ; BSR set to: 0
 30035                           ;keyboard.c: 768: ON_OFF = 0;
 30036  002076  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30037                           
 30038                           ; BSR set to: 0
 30039                           ;keyboard.c: 769: playThisNote(pitch);
 30040  002078  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30041  00207A  EC26  F034         	call	_playThisNote
 30042                           
 30043                           ;keyboard.c: 770: keyboard.SW2 = 0;
 30044  00207E  0100               	movlb	0	; () banked
 30045  002080  93D1               	bcf	_keyboard& (0+255),1,b
 30046  002082                     l1555:
 30047                           
 30048                           ; BSR set to: 0
 30049                           ;keyboard.c: 771: }
 30050                           ;keyboard.c: 772: if(((button_state_last & 0x00000004)) && ((button_state_now & 0x000000
      +                          04) == 0) && keyboard.SW3) {
 30051                           
 30052                           ; BSR set to: 0
 30053  002082  B5D5               	btfsc	_button_state_last& (0+255),2,b
 30054                           
 30055                           ; BSR set to: 0
 30056  002084  B5D9               	btfsc	_button_state_now& (0+255),2,b
 30057  002086  D00A               	goto	l1556
 30058                           
 30059                           ; BSR set to: 0
 30060  002088  A5D1               	btfss	_keyboard& (0+255),2,b
 30061  00208A  D008               	goto	l1556
 30062                           
 30063                           ; BSR set to: 0
 30064                           ;keyboard.c: 773: pitch = D;
 30065  00208C  0E02               	movlw	2
 30066  00208E  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30067                           
 30068                           ; BSR set to: 0
 30069                           ;keyboard.c: 774: ON_OFF = 0;
 30070  002090  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30071                           
 30072                           ; BSR set to: 0
 30073                           ;keyboard.c: 775: playThisNote(pitch);
 30074  002092  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30075  002094  EC26  F034         	call	_playThisNote
 30076                           
 30077                           ;keyboard.c: 776: keyboard.SW3 = 0;
 30078  002098  0100               	movlb	0	; () banked
 30079  00209A  95D1               	bcf	_keyboard& (0+255),2,b
 30080  00209C                     l1556:
 30081                           
 30082                           ; BSR set to: 0
 30083                           ;keyboard.c: 777: }
 30084                           ;keyboard.c: 778: if(((button_state_last & 0x00000008)) && ((button_state_now & 0x000000
      +                          08) == 0) && keyboard.SW4) {
 30085                           
 30086                           ; BSR set to: 0
 30087  00209C  B7D5               	btfsc	_button_state_last& (0+255),3,b
 30088                           
 30089                           ; BSR set to: 0
 30090  00209E  B7D9               	btfsc	_button_state_now& (0+255),3,b
 30091  0020A0  D00A               	goto	l1557
 30092                           
 30093                           ; BSR set to: 0
 30094  0020A2  A7D1               	btfss	_keyboard& (0+255),3,b
 30095  0020A4  D008               	goto	l1557
 30096                           
 30097                           ; BSR set to: 0
 30098                           ;keyboard.c: 779: pitch = Ds;
 30099  0020A6  0E03               	movlw	3
 30100  0020A8  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30101                           
 30102                           ; BSR set to: 0
 30103                           ;keyboard.c: 780: ON_OFF = 0;
 30104  0020AA  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30105                           
 30106                           ; BSR set to: 0
 30107                           ;keyboard.c: 781: playThisNote(pitch);
 30108  0020AC  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30109  0020AE  EC26  F034         	call	_playThisNote
 30110                           
 30111                           ;keyboard.c: 782: keyboard.SW4 = 0;
 30112  0020B2  0100               	movlb	0	; () banked
 30113  0020B4  97D1               	bcf	_keyboard& (0+255),3,b
 30114  0020B6                     l1557:
 30115                           
 30116                           ; BSR set to: 0
 30117                           ;keyboard.c: 783: }
 30118                           ;keyboard.c: 784: if(((button_state_last & 0x00000010)) && ((button_state_now & 0x000000
      +                          10) == 0) && keyboard.SW5) {
 30119                           
 30120                           ; BSR set to: 0
 30121  0020B6  B9D5               	btfsc	_button_state_last& (0+255),4,b
 30122                           
 30123                           ; BSR set to: 0
 30124  0020B8  B9D9               	btfsc	_button_state_now& (0+255),4,b
 30125  0020BA  D00A               	goto	l1558
 30126                           
 30127                           ; BSR set to: 0
 30128  0020BC  A9D1               	btfss	_keyboard& (0+255),4,b
 30129  0020BE  D008               	goto	l1558
 30130                           
 30131                           ; BSR set to: 0
 30132                           ;keyboard.c: 785: pitch = E;
 30133  0020C0  0E04               	movlw	4
 30134  0020C2  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30135                           
 30136                           ; BSR set to: 0
 30137                           ;keyboard.c: 786: ON_OFF = 0;
 30138  0020C4  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30139                           
 30140                           ; BSR set to: 0
 30141                           ;keyboard.c: 787: playThisNote(pitch);
 30142  0020C6  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30143  0020C8  EC26  F034         	call	_playThisNote
 30144                           
 30145                           ;keyboard.c: 788: keyboard.SW5 = 0;
 30146  0020CC  0100               	movlb	0	; () banked
 30147  0020CE  99D1               	bcf	_keyboard& (0+255),4,b
 30148  0020D0                     l1558:
 30149                           
 30150                           ; BSR set to: 0
 30151                           ;keyboard.c: 789: }
 30152                           ;keyboard.c: 790: if(((button_state_last & 0x00000020)) && ((button_state_now & 0x000000
      +                          20) == 0) && keyboard.SW6) {
 30153                           
 30154                           ; BSR set to: 0
 30155  0020D0  BBD5               	btfsc	_button_state_last& (0+255),5,b
 30156                           
 30157                           ; BSR set to: 0
 30158  0020D2  BBD9               	btfsc	_button_state_now& (0+255),5,b
 30159  0020D4  D00A               	goto	l1559
 30160                           
 30161                           ; BSR set to: 0
 30162  0020D6  ABD1               	btfss	_keyboard& (0+255),5,b
 30163  0020D8  D008               	goto	l1559
 30164                           
 30165                           ; BSR set to: 0
 30166                           ;keyboard.c: 791: pitch = F;
 30167  0020DA  0E05               	movlw	5
 30168  0020DC  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30169                           
 30170                           ; BSR set to: 0
 30171                           ;keyboard.c: 792: ON_OFF = 0;
 30172  0020DE  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30173                           
 30174                           ; BSR set to: 0
 30175                           ;keyboard.c: 793: playThisNote(pitch);
 30176  0020E0  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30177  0020E2  EC26  F034         	call	_playThisNote
 30178                           
 30179                           ;keyboard.c: 794: keyboard.SW6 = 0;
 30180  0020E6  0100               	movlb	0	; () banked
 30181  0020E8  9BD1               	bcf	_keyboard& (0+255),5,b
 30182  0020EA                     l1559:
 30183                           
 30184                           ; BSR set to: 0
 30185                           ;keyboard.c: 795: }
 30186                           ;keyboard.c: 796: if(((button_state_last & 0x00000040)) && ((button_state_now & 0x000000
      +                          40) == 0) && keyboard.SW7) {
 30187                           
 30188                           ; BSR set to: 0
 30189  0020EA  BDD5               	btfsc	_button_state_last& (0+255),6,b
 30190                           
 30191                           ; BSR set to: 0
 30192  0020EC  BDD9               	btfsc	_button_state_now& (0+255),6,b
 30193  0020EE  D00A               	goto	l1560
 30194                           
 30195                           ; BSR set to: 0
 30196  0020F0  ADD1               	btfss	_keyboard& (0+255),6,b
 30197  0020F2  D008               	goto	l1560
 30198                           
 30199                           ; BSR set to: 0
 30200                           ;keyboard.c: 797: pitch = Fs;
 30201  0020F4  0E06               	movlw	6
 30202  0020F6  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30203                           
 30204                           ; BSR set to: 0
 30205                           ;keyboard.c: 798: ON_OFF = 0;
 30206  0020F8  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30207                           
 30208                           ; BSR set to: 0
 30209                           ;keyboard.c: 799: playThisNote(pitch);
 30210  0020FA  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30211  0020FC  EC26  F034         	call	_playThisNote
 30212                           
 30213                           ;keyboard.c: 800: keyboard.SW7 = 0;
 30214  002100  0100               	movlb	0	; () banked
 30215  002102  9DD1               	bcf	_keyboard& (0+255),6,b
 30216  002104                     l1560:
 30217                           
 30218                           ; BSR set to: 0
 30219                           ;keyboard.c: 801: }
 30220                           ;keyboard.c: 802: if(((button_state_last & 0x00000080)) && ((button_state_now & 0x000000
      +                          80) == 0) && keyboard.SW8) {
 30221                           
 30222                           ; BSR set to: 0
 30223  002104  BFD5               	btfsc	_button_state_last& (0+255),7,b
 30224                           
 30225                           ; BSR set to: 0
 30226  002106  BFD9               	btfsc	_button_state_now& (0+255),7,b
 30227  002108  D00A               	goto	l1561
 30228                           
 30229                           ; BSR set to: 0
 30230  00210A  AFD1               	btfss	_keyboard& (0+255),7,b
 30231  00210C  D008               	goto	l1561
 30232                           
 30233                           ; BSR set to: 0
 30234                           ;keyboard.c: 803: pitch = G;
 30235  00210E  0E07               	movlw	7
 30236  002110  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30237                           
 30238                           ; BSR set to: 0
 30239                           ;keyboard.c: 804: ON_OFF = 0;
 30240  002112  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30241                           
 30242                           ; BSR set to: 0
 30243                           ;keyboard.c: 805: playThisNote(pitch);
 30244  002114  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30245  002116  EC26  F034         	call	_playThisNote
 30246                           
 30247                           ;keyboard.c: 806: keyboard.SW8 = 0;
 30248  00211A  0100               	movlb	0	; () banked
 30249  00211C  9FD1               	bcf	_keyboard& (0+255),7,b
 30250  00211E                     l1561:
 30251                           
 30252                           ; BSR set to: 0
 30253                           ;keyboard.c: 807: }
 30254                           ;keyboard.c: 808: if(((button_state_last & 0x00000100)) && ((button_state_now & 0x000001
      +                          00) == 0) && keyboard.SW9) {
 30255                           
 30256                           ; BSR set to: 0
 30257  00211E  B1D6               	btfsc	(_button_state_last+1)& (0+255),0,b
 30258                           
 30259                           ; BSR set to: 0
 30260  002120  B1DA               	btfsc	(_button_state_now+1)& (0+255),0,b
 30261  002122  D00A               	goto	l1562
 30262                           
 30263                           ; BSR set to: 0
 30264  002124  A1D2               	btfss	(_keyboard+1)& (0+255),0,b
 30265  002126  D008               	goto	l1562
 30266                           
 30267                           ; BSR set to: 0
 30268                           ;keyboard.c: 809: pitch = Gs;
 30269  002128  0E08               	movlw	8
 30270  00212A  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30271                           
 30272                           ; BSR set to: 0
 30273                           ;keyboard.c: 810: ON_OFF = 0;
 30274  00212C  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30275                           
 30276                           ; BSR set to: 0
 30277                           ;keyboard.c: 811: playThisNote(pitch);
 30278  00212E  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30279  002130  EC26  F034         	call	_playThisNote
 30280                           
 30281                           ;keyboard.c: 812: keyboard.SW9 = 0;
 30282  002134  0100               	movlb	0	; () banked
 30283  002136  91D2               	bcf	(_keyboard+1)& (0+255),0,b
 30284  002138                     l1562:
 30285                           
 30286                           ; BSR set to: 0
 30287                           ;keyboard.c: 813: }
 30288                           ;keyboard.c: 814: if(((button_state_last & 0x00000200)) && ((button_state_now & 0x000002
      +                          00) == 0) && keyboard.SW10) {
 30289                           
 30290                           ; BSR set to: 0
 30291  002138  B3D6               	btfsc	(_button_state_last+1)& (0+255),1,b
 30292                           
 30293                           ; BSR set to: 0
 30294  00213A  B3DA               	btfsc	(_button_state_now+1)& (0+255),1,b
 30295  00213C  D00A               	goto	l1563
 30296                           
 30297                           ; BSR set to: 0
 30298  00213E  A3D2               	btfss	(_keyboard+1)& (0+255),1,b
 30299  002140  D008               	goto	l1563
 30300                           
 30301                           ; BSR set to: 0
 30302                           ;keyboard.c: 815: pitch = A;
 30303  002142  0E09               	movlw	9
 30304  002144  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30305                           
 30306                           ; BSR set to: 0
 30307                           ;keyboard.c: 816: ON_OFF = 0;
 30308  002146  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30309                           
 30310                           ; BSR set to: 0
 30311                           ;keyboard.c: 817: playThisNote(pitch);
 30312  002148  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30313  00214A  EC26  F034         	call	_playThisNote
 30314                           
 30315                           ;keyboard.c: 818: keyboard.SW10 = 0;
 30316  00214E  0100               	movlb	0	; () banked
 30317  002150  93D2               	bcf	(_keyboard+1)& (0+255),1,b
 30318  002152                     l1563:
 30319                           
 30320                           ; BSR set to: 0
 30321                           ;keyboard.c: 819: }
 30322                           ;keyboard.c: 820: if(((button_state_last & 0x00000400)) && ((button_state_now & 0x000004
      +                          00) == 0) && keyboard.SW11) {
 30323                           
 30324                           ; BSR set to: 0
 30325  002152  B5D6               	btfsc	(_button_state_last+1)& (0+255),2,b
 30326                           
 30327                           ; BSR set to: 0
 30328  002154  B5DA               	btfsc	(_button_state_now+1)& (0+255),2,b
 30329  002156  D00A               	goto	l1564
 30330                           
 30331                           ; BSR set to: 0
 30332  002158  A5D2               	btfss	(_keyboard+1)& (0+255),2,b
 30333  00215A  D008               	goto	l1564
 30334                           
 30335                           ; BSR set to: 0
 30336                           ;keyboard.c: 821: pitch = As;
 30337  00215C  0E0A               	movlw	10
 30338  00215E  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30339                           
 30340                           ; BSR set to: 0
 30341                           ;keyboard.c: 822: ON_OFF = 0;
 30342  002160  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30343                           
 30344                           ; BSR set to: 0
 30345                           ;keyboard.c: 823: playThisNote(pitch);
 30346  002162  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30347  002164  EC26  F034         	call	_playThisNote
 30348                           
 30349                           ;keyboard.c: 824: keyboard.SW11 = 0;
 30350  002168  0100               	movlb	0	; () banked
 30351  00216A  95D2               	bcf	(_keyboard+1)& (0+255),2,b
 30352  00216C                     l1564:
 30353                           
 30354                           ; BSR set to: 0
 30355                           ;keyboard.c: 825: }
 30356                           ;keyboard.c: 826: if(((button_state_last & 0x00000800)) && ((button_state_now & 0x000008
      +                          00) == 0) && keyboard.SW12) {
 30357                           
 30358                           ; BSR set to: 0
 30359  00216C  B7D6               	btfsc	(_button_state_last+1)& (0+255),3,b
 30360                           
 30361                           ; BSR set to: 0
 30362  00216E  B7DA               	btfsc	(_button_state_now+1)& (0+255),3,b
 30363  002170  D00A               	goto	l1565
 30364                           
 30365                           ; BSR set to: 0
 30366  002172  A7D2               	btfss	(_keyboard+1)& (0+255),3,b
 30367  002174  D008               	goto	l1565
 30368                           
 30369                           ; BSR set to: 0
 30370                           ;keyboard.c: 827: pitch = B;
 30371  002176  0E0B               	movlw	11
 30372  002178  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30373                           
 30374                           ; BSR set to: 0
 30375                           ;keyboard.c: 828: ON_OFF = 0;
 30376  00217A  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30377                           
 30378                           ; BSR set to: 0
 30379                           ;keyboard.c: 829: playThisNote(pitch);
 30380  00217C  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30381  00217E  EC26  F034         	call	_playThisNote
 30382                           
 30383                           ;keyboard.c: 830: keyboard.SW12 = 0;
 30384  002182  0100               	movlb	0	; () banked
 30385  002184  97D2               	bcf	(_keyboard+1)& (0+255),3,b
 30386  002186                     l1565:
 30387                           
 30388                           ; BSR set to: 0
 30389                           ;keyboard.c: 831: }
 30390                           ;keyboard.c: 832: if(((button_state_last & 0x00001000)) && ((button_state_now & 0x000010
      +                          00) == 0) && keyboard.SW13) {
 30391                           
 30392                           ; BSR set to: 0
 30393  002186  B9D6               	btfsc	(_button_state_last+1)& (0+255),4,b
 30394                           
 30395                           ; BSR set to: 0
 30396  002188  B9DA               	btfsc	(_button_state_now+1)& (0+255),4,b
 30397  00218A  D00A               	goto	l1566
 30398                           
 30399                           ; BSR set to: 0
 30400  00218C  A9D2               	btfss	(_keyboard+1)& (0+255),4,b
 30401  00218E  D008               	goto	l1566
 30402                           
 30403                           ; BSR set to: 0
 30404                           ;keyboard.c: 833: pitch = C2;
 30405  002190  0E0C               	movlw	12
 30406  002192  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30407                           
 30408                           ; BSR set to: 0
 30409                           ;keyboard.c: 834: ON_OFF = 0;
 30410  002194  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30411                           
 30412                           ; BSR set to: 0
 30413                           ;keyboard.c: 835: playThisNote(pitch);
 30414  002196  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30415  002198  EC26  F034         	call	_playThisNote
 30416                           
 30417                           ;keyboard.c: 836: keyboard.SW13 = 0;
 30418  00219C  0100               	movlb	0	; () banked
 30419  00219E  99D2               	bcf	(_keyboard+1)& (0+255),4,b
 30420  0021A0                     l1566:
 30421                           
 30422                           ; BSR set to: 0
 30423                           ;keyboard.c: 837: }
 30424                           ;keyboard.c: 838: if(((button_state_last & 0x00002000)) && ((button_state_now & 0x000020
      +                          00) == 0) && keyboard.SW14) {
 30425                           
 30426                           ; BSR set to: 0
 30427  0021A0  BBD6               	btfsc	(_button_state_last+1)& (0+255),5,b
 30428                           
 30429                           ; BSR set to: 0
 30430  0021A2  BBDA               	btfsc	(_button_state_now+1)& (0+255),5,b
 30431  0021A4  D00A               	goto	l1567
 30432                           
 30433                           ; BSR set to: 0
 30434  0021A6  ABD2               	btfss	(_keyboard+1)& (0+255),5,b
 30435  0021A8  D008               	goto	l1567
 30436                           
 30437                           ; BSR set to: 0
 30438                           ;keyboard.c: 839: pitch = C2s;
 30439  0021AA  0E0D               	movlw	13
 30440  0021AC  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30441                           
 30442                           ; BSR set to: 0
 30443                           ;keyboard.c: 840: ON_OFF = 0;
 30444  0021AE  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30445                           
 30446                           ; BSR set to: 0
 30447                           ;keyboard.c: 841: playThisNote(pitch);
 30448  0021B0  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30449  0021B2  EC26  F034         	call	_playThisNote
 30450                           
 30451                           ;keyboard.c: 842: keyboard.SW14 = 0;
 30452  0021B6  0100               	movlb	0	; () banked
 30453  0021B8  9BD2               	bcf	(_keyboard+1)& (0+255),5,b
 30454  0021BA                     l1567:
 30455                           
 30456                           ; BSR set to: 0
 30457                           ;keyboard.c: 843: }
 30458                           ;keyboard.c: 844: if(((button_state_last & 0x00004000)) && ((button_state_now & 0x000040
      +                          00) == 0) && keyboard.SW15) {
 30459                           
 30460                           ; BSR set to: 0
 30461  0021BA  BDD6               	btfsc	(_button_state_last+1)& (0+255),6,b
 30462                           
 30463                           ; BSR set to: 0
 30464  0021BC  BDDA               	btfsc	(_button_state_now+1)& (0+255),6,b
 30465  0021BE  D00A               	goto	l1568
 30466                           
 30467                           ; BSR set to: 0
 30468  0021C0  ADD2               	btfss	(_keyboard+1)& (0+255),6,b
 30469  0021C2  D008               	goto	l1568
 30470                           
 30471                           ; BSR set to: 0
 30472                           ;keyboard.c: 845: pitch = D2;
 30473  0021C4  0E0E               	movlw	14
 30474  0021C6  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30475                           
 30476                           ; BSR set to: 0
 30477                           ;keyboard.c: 846: ON_OFF = 0;
 30478  0021C8  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30479                           
 30480                           ; BSR set to: 0
 30481                           ;keyboard.c: 847: playThisNote(pitch);
 30482  0021CA  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30483  0021CC  EC26  F034         	call	_playThisNote
 30484                           
 30485                           ;keyboard.c: 848: keyboard.SW15 = 0;
 30486  0021D0  0100               	movlb	0	; () banked
 30487  0021D2  9DD2               	bcf	(_keyboard+1)& (0+255),6,b
 30488  0021D4                     l1568:
 30489                           
 30490                           ; BSR set to: 0
 30491                           ;keyboard.c: 849: }
 30492                           ;keyboard.c: 850: if(((button_state_last & 0x00008000)) && ((button_state_now & 0x000080
      +                          00) == 0) && keyboard.SW16) {
 30493                           
 30494                           ; BSR set to: 0
 30495  0021D4  BFD6               	btfsc	(_button_state_last+1)& (0+255),7,b
 30496                           
 30497                           ; BSR set to: 0
 30498  0021D6  BFDA               	btfsc	(_button_state_now+1)& (0+255),7,b
 30499  0021D8  D00A               	goto	l1569
 30500                           
 30501                           ; BSR set to: 0
 30502  0021DA  AFD2               	btfss	(_keyboard+1)& (0+255),7,b
 30503  0021DC  D008               	goto	l1569
 30504                           
 30505                           ; BSR set to: 0
 30506                           ;keyboard.c: 851: pitch = D2s;
 30507  0021DE  0E0F               	movlw	15
 30508  0021E0  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30509                           
 30510                           ; BSR set to: 0
 30511                           ;keyboard.c: 852: ON_OFF = 0;
 30512  0021E2  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30513                           
 30514                           ; BSR set to: 0
 30515                           ;keyboard.c: 853: playThisNote(pitch);
 30516  0021E4  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30517  0021E6  EC26  F034         	call	_playThisNote
 30518                           
 30519                           ;keyboard.c: 854: keyboard.SW16 = 0;
 30520  0021EA  0100               	movlb	0	; () banked
 30521  0021EC  9FD2               	bcf	(_keyboard+1)& (0+255),7,b
 30522  0021EE                     l1569:
 30523                           
 30524                           ; BSR set to: 0
 30525                           ;keyboard.c: 855: }
 30526                           ;keyboard.c: 856: if(((button_state_last & 0x00010000)) && ((button_state_now & 0x000100
      +                          00) == 0) && keyboard.SW17) {
 30527                           
 30528                           ; BSR set to: 0
 30529  0021EE  B1D7               	btfsc	(_button_state_last+2)& (0+255),0,b
 30530                           
 30531                           ; BSR set to: 0
 30532  0021F0  B1DB               	btfsc	(_button_state_now+2)& (0+255),0,b
 30533  0021F2  D00A               	goto	l1570
 30534                           
 30535                           ; BSR set to: 0
 30536  0021F4  A1D3               	btfss	(_keyboard+2)& (0+255),0,b
 30537  0021F6  D008               	goto	l1570
 30538                           
 30539                           ; BSR set to: 0
 30540                           ;keyboard.c: 857: pitch = E2;
 30541  0021F8  0E10               	movlw	16
 30542  0021FA  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30543                           
 30544                           ; BSR set to: 0
 30545                           ;keyboard.c: 858: ON_OFF = 0;
 30546  0021FC  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30547                           
 30548                           ; BSR set to: 0
 30549                           ;keyboard.c: 859: playThisNote(pitch);
 30550  0021FE  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30551  002200  EC26  F034         	call	_playThisNote
 30552                           
 30553                           ;keyboard.c: 860: keyboard.SW17 = 0;
 30554  002204  0100               	movlb	0	; () banked
 30555  002206  91D3               	bcf	(_keyboard+2)& (0+255),0,b
 30556  002208                     l1570:
 30557                           
 30558                           ; BSR set to: 0
 30559                           ;keyboard.c: 861: }
 30560                           ;keyboard.c: 862: if(((button_state_last & 0x00020000)) && ((button_state_now & 0x000200
      +                          00) == 0) && keyboard.SW18) {
 30561                           
 30562                           ; BSR set to: 0
 30563  002208  B3D7               	btfsc	(_button_state_last+2)& (0+255),1,b
 30564                           
 30565                           ; BSR set to: 0
 30566  00220A  B3DB               	btfsc	(_button_state_now+2)& (0+255),1,b
 30567  00220C  D00A               	goto	l1571
 30568                           
 30569                           ; BSR set to: 0
 30570  00220E  A3D3               	btfss	(_keyboard+2)& (0+255),1,b
 30571  002210  D008               	goto	l1571
 30572                           
 30573                           ; BSR set to: 0
 30574                           ;keyboard.c: 863: pitch = F2;
 30575  002212  0E11               	movlw	17
 30576  002214  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30577                           
 30578                           ; BSR set to: 0
 30579                           ;keyboard.c: 864: ON_OFF = 0;
 30580  002216  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30581                           
 30582                           ; BSR set to: 0
 30583                           ;keyboard.c: 865: playThisNote(pitch);
 30584  002218  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30585  00221A  EC26  F034         	call	_playThisNote
 30586                           
 30587                           ;keyboard.c: 866: keyboard.SW18 = 0;
 30588  00221E  0100               	movlb	0	; () banked
 30589  002220  93D3               	bcf	(_keyboard+2)& (0+255),1,b
 30590  002222                     l1571:
 30591                           
 30592                           ; BSR set to: 0
 30593                           ;keyboard.c: 867: }
 30594                           ;keyboard.c: 868: if(((button_state_last & 0x00040000)) && ((button_state_now & 0x000400
      +                          00) == 0) && keyboard.SW19) {
 30595                           
 30596                           ; BSR set to: 0
 30597  002222  B5D7               	btfsc	(_button_state_last+2)& (0+255),2,b
 30598                           
 30599                           ; BSR set to: 0
 30600  002224  B5DB               	btfsc	(_button_state_now+2)& (0+255),2,b
 30601  002226  D00A               	goto	l1572
 30602                           
 30603                           ; BSR set to: 0
 30604  002228  A5D3               	btfss	(_keyboard+2)& (0+255),2,b
 30605  00222A  D008               	goto	l1572
 30606                           
 30607                           ; BSR set to: 0
 30608                           ;keyboard.c: 869: pitch = F2s;
 30609  00222C  0E12               	movlw	18
 30610  00222E  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30611                           
 30612                           ; BSR set to: 0
 30613                           ;keyboard.c: 870: ON_OFF = 0;
 30614  002230  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30615                           
 30616                           ; BSR set to: 0
 30617                           ;keyboard.c: 871: playThisNote(pitch);
 30618  002232  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30619  002234  EC26  F034         	call	_playThisNote
 30620                           
 30621                           ;keyboard.c: 872: keyboard.SW19 = 0;
 30622  002238  0100               	movlb	0	; () banked
 30623  00223A  95D3               	bcf	(_keyboard+2)& (0+255),2,b
 30624  00223C                     l1572:
 30625                           
 30626                           ; BSR set to: 0
 30627                           ;keyboard.c: 873: }
 30628                           ;keyboard.c: 874: if(((button_state_last & 0x00080000)) && ((button_state_now & 0x000800
      +                          00) == 0) && keyboard.SW20) {
 30629                           
 30630                           ; BSR set to: 0
 30631  00223C  B7D7               	btfsc	(_button_state_last+2)& (0+255),3,b
 30632                           
 30633                           ; BSR set to: 0
 30634  00223E  B7DB               	btfsc	(_button_state_now+2)& (0+255),3,b
 30635  002240  D00A               	goto	l1573
 30636                           
 30637                           ; BSR set to: 0
 30638  002242  A7D3               	btfss	(_keyboard+2)& (0+255),3,b
 30639  002244  D008               	goto	l1573
 30640                           
 30641                           ; BSR set to: 0
 30642                           ;keyboard.c: 875: pitch = G2;
 30643  002246  0E13               	movlw	19
 30644  002248  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30645                           
 30646                           ; BSR set to: 0
 30647                           ;keyboard.c: 876: ON_OFF = 0;
 30648  00224A  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30649                           
 30650                           ; BSR set to: 0
 30651                           ;keyboard.c: 877: playThisNote(pitch);
 30652  00224C  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30653  00224E  EC26  F034         	call	_playThisNote
 30654                           
 30655                           ;keyboard.c: 878: keyboard.SW20 = 0;
 30656  002252  0100               	movlb	0	; () banked
 30657  002254  97D3               	bcf	(_keyboard+2)& (0+255),3,b
 30658  002256                     l1573:
 30659                           
 30660                           ; BSR set to: 0
 30661                           ;keyboard.c: 879: }
 30662                           ;keyboard.c: 880: if(((button_state_last & 0x00100000)) && ((button_state_now & 0x001000
      +                          00) == 0) && keyboard.SW21) {
 30663                           
 30664                           ; BSR set to: 0
 30665  002256  B9D7               	btfsc	(_button_state_last+2)& (0+255),4,b
 30666                           
 30667                           ; BSR set to: 0
 30668  002258  B9DB               	btfsc	(_button_state_now+2)& (0+255),4,b
 30669  00225A  D00A               	goto	l1574
 30670                           
 30671                           ; BSR set to: 0
 30672  00225C  A9D3               	btfss	(_keyboard+2)& (0+255),4,b
 30673  00225E  D008               	goto	l1574
 30674                           
 30675                           ; BSR set to: 0
 30676                           ;keyboard.c: 881: pitch = G2s;
 30677  002260  0E14               	movlw	20
 30678  002262  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30679                           
 30680                           ; BSR set to: 0
 30681                           ;keyboard.c: 882: ON_OFF = 0;
 30682  002264  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30683                           
 30684                           ; BSR set to: 0
 30685                           ;keyboard.c: 883: playThisNote(pitch);
 30686  002266  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30687  002268  EC26  F034         	call	_playThisNote
 30688                           
 30689                           ;keyboard.c: 884: keyboard.SW21 = 0;
 30690  00226C  0100               	movlb	0	; () banked
 30691  00226E  99D3               	bcf	(_keyboard+2)& (0+255),4,b
 30692  002270                     l1574:
 30693                           
 30694                           ; BSR set to: 0
 30695                           ;keyboard.c: 885: }
 30696                           ;keyboard.c: 886: if(((button_state_last & 0x00200000)) && ((button_state_now & 0x002000
      +                          00) == 0) && keyboard.SW22) {
 30697                           
 30698                           ; BSR set to: 0
 30699  002270  BBD7               	btfsc	(_button_state_last+2)& (0+255),5,b
 30700                           
 30701                           ; BSR set to: 0
 30702  002272  BBDB               	btfsc	(_button_state_now+2)& (0+255),5,b
 30703  002274  D00A               	goto	l1575
 30704                           
 30705                           ; BSR set to: 0
 30706  002276  ABD3               	btfss	(_keyboard+2)& (0+255),5,b
 30707  002278  D008               	goto	l1575
 30708                           
 30709                           ; BSR set to: 0
 30710                           ;keyboard.c: 887: pitch = A2;
 30711  00227A  0E15               	movlw	21
 30712  00227C  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30713                           
 30714                           ; BSR set to: 0
 30715                           ;keyboard.c: 888: ON_OFF = 0;
 30716  00227E  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30717                           
 30718                           ; BSR set to: 0
 30719                           ;keyboard.c: 889: playThisNote(pitch);
 30720  002280  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30721  002282  EC26  F034         	call	_playThisNote
 30722                           
 30723                           ;keyboard.c: 890: keyboard.SW22 = 0;
 30724  002286  0100               	movlb	0	; () banked
 30725  002288  9BD3               	bcf	(_keyboard+2)& (0+255),5,b
 30726  00228A                     l1575:
 30727                           
 30728                           ; BSR set to: 0
 30729                           ;keyboard.c: 891: }
 30730                           ;keyboard.c: 892: if(((button_state_last & 0x00400000)) && ((button_state_now & 0x004000
      +                          00) == 0) && keyboard.SW23) {
 30731                           
 30732                           ; BSR set to: 0
 30733  00228A  BDD7               	btfsc	(_button_state_last+2)& (0+255),6,b
 30734                           
 30735                           ; BSR set to: 0
 30736  00228C  BDDB               	btfsc	(_button_state_now+2)& (0+255),6,b
 30737  00228E  D00A               	goto	l1576
 30738                           
 30739                           ; BSR set to: 0
 30740  002290  ADD3               	btfss	(_keyboard+2)& (0+255),6,b
 30741  002292  D008               	goto	l1576
 30742                           
 30743                           ; BSR set to: 0
 30744                           ;keyboard.c: 893: pitch = A2s;
 30745  002294  0E16               	movlw	22
 30746  002296  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30747                           
 30748                           ; BSR set to: 0
 30749                           ;keyboard.c: 894: ON_OFF = 0;
 30750  002298  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30751                           
 30752                           ; BSR set to: 0
 30753                           ;keyboard.c: 895: playThisNote(pitch);
 30754  00229A  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30755  00229C  EC26  F034         	call	_playThisNote
 30756                           
 30757                           ;keyboard.c: 896: keyboard.SW23 = 0;
 30758  0022A0  0100               	movlb	0	; () banked
 30759  0022A2  9DD3               	bcf	(_keyboard+2)& (0+255),6,b
 30760  0022A4                     l1576:
 30761                           
 30762                           ; BSR set to: 0
 30763                           ;keyboard.c: 897: }
 30764                           ;keyboard.c: 898: if(((button_state_last & 0x00800000)) && ((button_state_now & 0x008000
      +                          00) == 0) && keyboard.SW24) {
 30765                           
 30766                           ; BSR set to: 0
 30767  0022A4  BFD7               	btfsc	(_button_state_last+2)& (0+255),7,b
 30768                           
 30769                           ; BSR set to: 0
 30770  0022A6  BFDB               	btfsc	(_button_state_now+2)& (0+255),7,b
 30771  0022A8  D00A               	goto	l1577
 30772                           
 30773                           ; BSR set to: 0
 30774  0022AA  AFD3               	btfss	(_keyboard+2)& (0+255),7,b
 30775  0022AC  D008               	goto	l1577
 30776                           
 30777                           ; BSR set to: 0
 30778                           ;keyboard.c: 899: pitch = B2;
 30779  0022AE  0E17               	movlw	23
 30780  0022B0  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30781                           
 30782                           ; BSR set to: 0
 30783                           ;keyboard.c: 900: ON_OFF = 0;
 30784  0022B2  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30785                           
 30786                           ; BSR set to: 0
 30787                           ;keyboard.c: 901: playThisNote(pitch);
 30788  0022B4  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30789  0022B6  EC26  F034         	call	_playThisNote
 30790                           
 30791                           ;keyboard.c: 902: keyboard.SW24 = 0;
 30792  0022BA  0100               	movlb	0	; () banked
 30793  0022BC  9FD3               	bcf	(_keyboard+2)& (0+255),7,b
 30794  0022BE                     l1577:
 30795                           
 30796                           ; BSR set to: 0
 30797                           ;keyboard.c: 903: }
 30798                           ;keyboard.c: 904: if(((button_state_last & 0x01000000)) && ((button_state_now & 0x010000
      +                          00) == 0) && keyboard.SW25) {
 30799                           
 30800                           ; BSR set to: 0
 30801  0022BE  A1D8               	btfss	(_button_state_last+3)& (0+255),0,b
 30802  0022C0  0012               	return	
 30803                           
 30804                           ; BSR set to: 0
 30805  0022C2  B1DC               	btfsc	(_button_state_now+3)& (0+255),0,b
 30806  0022C4  0012               	return	
 30807                           
 30808                           ; BSR set to: 0
 30809  0022C6  A1D4               	btfss	(_keyboard+3)& (0+255),0,b
 30810  0022C8  0012               	return	
 30811                           
 30812                           ; BSR set to: 0
 30813                           ;keyboard.c: 905: pitch = C3;
 30814  0022CA  0E18               	movlw	24
 30815  0022CC  6F76               	movwf	keyboard_all_note_efficient@pitch& (0+255),b
 30816                           
 30817                           ; BSR set to: 0
 30818                           ;keyboard.c: 906: ON_OFF = 0;
 30819  0022CE  9206               	bcf	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30820                           
 30821                           ; BSR set to: 0
 30822                           ;keyboard.c: 907: playThisNote(pitch);
 30823  0022D0  5176               	movf	keyboard_all_note_efficient@pitch& (0+255),w,b
 30824  0022D2  EC26  F034         	call	_playThisNote
 30825                           
 30826                           ;keyboard.c: 908: keyboard.SW25 = 0;
 30827  0022D6  0100               	movlb	0	; () banked
 30828  0022D8  91D4               	bcf	(_keyboard+3)& (0+255),0,b
 30829  0022DA  0012               	return	
 30830  0022DC                     __end_of_keyboard_all_note_efficient:
 30831                           	opt stack 0
 30832                           tblptru	equ	0xFF8
 30833                           tblptrh	equ	0xFF7
 30834                           tblptrl	equ	0xFF6
 30835                           tablat	equ	0xFF5
 30836                           prodh	equ	0xFF4
 30837                           prodl	equ	0xFF3
 30838                           intcon	equ	0xFF2
 30839                           intcon2	equ	0xFF1
 30840                           postinc0	equ	0xFEE
 30841                           wreg	equ	0xFE8
 30842                           postinc1	equ	0xFE6
 30843                           plusw1	equ	0xFE3
 30844                           fsr1h	equ	0xFE2
 30845                           fsr1l	equ	0xFE1
 30846                           indf2	equ	0xFDF
 30847                           postinc2	equ	0xFDE
 30848                           postdec2	equ	0xFDD
 30849                           plusw2	equ	0xFDB
 30850                           fsr2h	equ	0xFDA
 30851                           fsr2l	equ	0xFD9
 30852                           status	equ	0xFD8
 30853                           
 30854 ;; *************** function _playThisNote *****************
 30855 ;; Defined at:
 30856 ;;		line 504 in file "keyboard.c"
 30857 ;; Parameters:    Size  Location     Type
 30858 ;;  pitch           1    wreg     unsigned char 
 30859 ;; Auto vars:     Size  Location     Type
 30860 ;;  pitch           1   21[BANK0 ] unsigned char 
 30861 ;; Return value:  Size  Location     Type
 30862 ;;                  1    wreg      void 
 30863 ;; Registers used:
 30864 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30865 ;; Tracked objects:
 30866 ;;		On entry : 0/0
 30867 ;;		On exit  : 0/0
 30868 ;;		Unchanged: 0/0
 30869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 30870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30871 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30872 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30873 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 30874 ;;Total ram usage:        5 bytes
 30875 ;; Hardware stack levels used:    1
 30876 ;; Hardware stack levels required when called:   11
 30877 ;; This function calls:
 30878 ;;		_add_notes_to_arpeggio
 30879 ;;		_delete_notes_from_arpeggio
 30880 ;;		_finish_arpeggio_setup
 30881 ;;		_key_press_release_note_off
 30882 ;;		_noteOff
 30883 ;;		_noteOn
 30884 ;;		_playSeventh
 30885 ;;		_playTriad
 30886 ;;		_wait_one_pulse
 30887 ;; This function is called by:
 30888 ;;		_keyboard_all_note_efficient
 30889 ;;		_doTheUnLatch
 30890 ;; This function uses a non-reentrant model
 30891 ;;
 30892                           
 30893                           	psect	text78
 30894  00684C                     __ptext78:
 30895                           	opt stack 0
 30896  00684C                     _playThisNote:
 30897                           	opt stack 13
 30898                           
 30899                           ; BSR set to: 0
 30900                           ;incstack = 0
 30901                           ;playThisNote@pitch stored from wreg
 30902  00684C  0100               	movlb	0	; () banked
 30903  00684E  6F75               	movwf	playThisNote@pitch& (0+255),b
 30904                           
 30905                           ;keyboard.c: 506: if(KEYBOARD_MODE == CHROMATIC) {
 30906  006850  0100               	movlb	0	; () banked
 30907  006852  51F3               	movf	_KEYBOARD_MODE& (0+255),w,b
 30908  006854  A4D8               	btfss	status,2,c
 30909  006856  D06B               	goto	l1519
 30910                           
 30911                           ; BSR set to: 0
 30912                           ;keyboard.c: 509: if(ARPEGGIO_ON == 0){
 30913  006858  BA04               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 30914  00685A  D015               	goto	l1512
 30915                           
 30916                           ; BSR set to: 0
 30917                           ;keyboard.c: 510: if(ON_OFF == 1) {noteOn(channel,pitch,velocity);}
 30918  00685C  A206               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30919  00685E  D008               	goto	l1511
 30920                           
 30921                           ; BSR set to: 0
 30922  006860  5050               	movf	_velocity,w,c
 30923  006862  6EE6               	movwf	postinc1,c
 30924  006864  5175               	movf	playThisNote@pitch& (0+255),w,b
 30925  006866  6EE6               	movwf	postinc1,c
 30926  006868  503D               	movf	_channel,w,c
 30927  00686A  6EE6               	movwf	postinc1,c
 30928  00686C  EC10  F046         	call	_noteOn	;wreg free
 30929  006870                     l1511:
 30930                           
 30931                           ;keyboard.c: 511: if(ON_OFF == 0) {noteOff(channel,pitch,velocity);}
 30932  006870  B206               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30933  006872  D009               	goto	l1512
 30934  006874  5050               	movf	_velocity,w,c
 30935  006876  6EE6               	movwf	postinc1,c
 30936  006878  0100               	movlb	0	; () banked
 30937  00687A  5175               	movf	playThisNote@pitch& (0+255),w,b
 30938  00687C  6EE6               	movwf	postinc1,c
 30939  00687E  503D               	movf	_channel,w,c
 30940  006880  6EE6               	movwf	postinc1,c
 30941  006882  ECA0  F04A         	call	_noteOff	;wreg free
 30942  006886                     l1512:
 30943                           
 30944                           ;keyboard.c: 512: }
 30945                           ;keyboard.c: 515: if(ARPEGGIO_ON == 1){
 30946  006886  AA04               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 30947  006888  D052               	goto	l1519
 30948                           
 30949                           ;keyboard.c: 517: if(ON_OFF == 1){
 30950  00688A  A206               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 30951  00688C  D01A               	goto	l1514
 30952                           
 30953                           ;keyboard.c: 520: TMR0ON = 0;
 30954  00688E  9ED5               	bcf	4053,7,c	;volatile
 30955                           
 30956                           ;keyboard.c: 522: parallel = pitch;
 30957  006890  C075  F02F         	movff	playThisNote@pitch,_parallel
 30958                           
 30959                           ;keyboard.c: 525: if(NUM_NOTES_PRESSED > 0){
 30960  006894  502E               	movf	_NUM_NOTES_PRESSED,w,c
 30961  006896  B4D8               	btfsc	status,2,c
 30962  006898  D00A               	goto	l1515
 30963                           
 30964                           ;keyboard.c: 526: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 30965  00689A  0E00               	movlw	0
 30966  00689C  B603               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 30967  00689E  0E01               	movlw	1
 30968  0068A0  EC43  F04C         	call	_wait_one_pulse
 30969                           
 30970                           ;keyboard.c: 527: if(note_off_was_sent == 0) {key_press_release_note_off();}
 30971  0068A4  A052               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 30972  0068A6  ECA7  F02E         	call	_key_press_release_note_off	;wreg free
 30973                           
 30974                           ;keyboard.c: 528: TIMER_OVERFLOWS = 0;
 30975  0068AA  0E00               	movlw	0
 30976  0068AC  6E2D               	movwf	_TIMER_OVERFLOWS,c
 30977  0068AE                     l1515:
 30978                           
 30979                           ;keyboard.c: 529: }
 30980                           ;keyboard.c: 532: add_notes_to_arpeggio(pitch);
 30981  0068AE  0100               	movlb	0	; () banked
 30982  0068B0  5175               	movf	playThisNote@pitch& (0+255),w,b
 30983  0068B2  EC28  F035         	call	_add_notes_to_arpeggio
 30984                           
 30985                           ;keyboard.c: 535: if(LATCH == 0) {
 30986  0068B6  A404               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 30987                           
 30988                           ;keyboard.c: 536: latch_was_pressed = 0;
 30989  0068B8  9E03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 30990                           
 30991                           ;keyboard.c: 537: }
 30992                           ;keyboard.c: 540: finish_arpeggio_setup();
 30993  0068BA  ECD8  F04C         	call	_finish_arpeggio_setup	;wreg free
 30994                           
 30995                           ;keyboard.c: 543: TMR0ON = 1;
 30996  0068BE  8ED5               	bsf	4053,7,c	;volatile
 30997                           
 30998                           ;keyboard.c: 545: return;
 30999  0068C0  0012               	return	
 31000  0068C2                     l1514:
 31001                           
 31002                           ;keyboard.c: 546: }
 31003                           ;keyboard.c: 549: if((ON_OFF == 0) && (LATCH == 0)){
 31004  0068C2  A206               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31005  0068C4  B404               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 31006  0068C6  D033               	goto	l1519
 31007                           
 31008                           ;keyboard.c: 552: TMR0ON = 0;
 31009  0068C8  9ED5               	bcf	4053,7,c	;volatile
 31010                           
 31011                           ;keyboard.c: 555: if(NUM_NOTES_PRESSED > 0){
 31012  0068CA  502E               	movf	_NUM_NOTES_PRESSED,w,c
 31013  0068CC  B4D8               	btfsc	status,2,c
 31014  0068CE  D00A               	goto	l1520
 31015                           
 31016                           ;keyboard.c: 556: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 31017  0068D0  0E00               	movlw	0
 31018  0068D2  B403               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 31019  0068D4  0E01               	movlw	1
 31020  0068D6  EC43  F04C         	call	_wait_one_pulse
 31021                           
 31022                           ;keyboard.c: 557: if(note_off_was_sent == 0) {key_press_release_note_off();}
 31023  0068DA  A052               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 31024  0068DC  ECA7  F02E         	call	_key_press_release_note_off	;wreg free
 31025                           
 31026                           ;keyboard.c: 558: TIMER_OVERFLOWS = 0;
 31027  0068E0  0E00               	movlw	0
 31028  0068E2  6E2D               	movwf	_TIMER_OVERFLOWS,c
 31029  0068E4                     l1520:
 31030                           
 31031                           ;keyboard.c: 559: }
 31032                           ;keyboard.c: 562: delete_notes_from_arpeggio(pitch);
 31033  0068E4  0100               	movlb	0	; () banked
 31034  0068E6  5175               	movf	playThisNote@pitch& (0+255),w,b
 31035  0068E8  ECB0  F04B         	call	_delete_notes_from_arpeggio
 31036                           
 31037                           ;keyboard.c: 565: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 31038  0068EC  C02F  F071         	movff	_parallel,??_playThisNote
 31039  0068F0  0100               	movlb	0	; () banked
 31040  0068F2  6B72               	clrf	(??_playThisNote+1)& (0+255),b
 31041  0068F4  BF71               	btfsc	??_playThisNote& (0+255),7,b
 31042  0068F6  0772               	decf	(??_playThisNote+1)& (0+255),f,b
 31043  0068F8  5175               	movf	playThisNote@pitch& (0+255),w,b
 31044  0068FA  6F73               	movwf	(??_playThisNote+2)& (0+255),b
 31045  0068FC  6B74               	clrf	(??_playThisNote+3)& (0+255),b
 31046  0068FE  5171               	movf	??_playThisNote& (0+255),w,b
 31047  006900  1973               	xorwf	(??_playThisNote+2)& (0+255),w,b
 31048  006902  E106               	bnz	l27352
 31049  006904  5172               	movf	(??_playThisNote+1)& (0+255),w,b
 31050  006906  1974               	xorwf	(??_playThisNote+3)& (0+255),w,b
 31051  006908  A4D8               	btfss	status,2,c
 31052  00690A  D002               	goto	l1522
 31053                           
 31054                           ; BSR set to: 0
 31055  00690C  0E00               	movlw	0
 31056  00690E  6E2E               	movwf	_NUM_NOTES_PRESSED,c
 31057  006910                     l1522:
 31058  006910                     l27352:
 31059                           
 31060                           ; BSR set to: 0
 31061                           ;keyboard.c: 570: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 31062  006910  B004               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 31063                           
 31064                           ; BSR set to: 0
 31065  006912  AE03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31066  006914  D001               	goto	l1523
 31067                           
 31068                           ; BSR set to: 0
 31069                           ;keyboard.c: 571: LATCH = 1;
 31070  006916  8404               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 31071  006918                     l1523:
 31072                           
 31073                           ; BSR set to: 0
 31074                           ;keyboard.c: 572: }
 31075                           ;keyboard.c: 575: if((UN_LATCH_MODE == 0) && (latch_was_pressed == 1)){
 31076  006918  A204               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 31077                           
 31078                           ; BSR set to: 0
 31079  00691A  AE03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31080  00691C  D004               	goto	l1524
 31081                           
 31082                           ; BSR set to: 0
 31083                           ;keyboard.c: 576: NUM_NOTES_PRESSED = 0;
 31084  00691E  0E00               	movlw	0
 31085  006920  6E2E               	movwf	_NUM_NOTES_PRESSED,c
 31086                           
 31087                           ;keyboard.c: 577: ARRAY_INDEX = 0;
 31088  006922  0E00               	movlw	0
 31089  006924  6FEC               	movwf	_ARRAY_INDEX& (0+255),b
 31090  006926                     l1524:
 31091                           
 31092                           ; BSR set to: 0
 31093                           ;keyboard.c: 578: }
 31094                           ;keyboard.c: 581: finish_arpeggio_setup();
 31095                           
 31096                           ; BSR set to: 0
 31097  006926  ECD8  F04C         	call	_finish_arpeggio_setup	;wreg free
 31098                           
 31099                           ;keyboard.c: 584: TMR0ON = 1;
 31100  00692A  8ED5               	bsf	4053,7,c	;volatile
 31101                           
 31102                           ;keyboard.c: 586: return;
 31103  00692C  0012               	return	
 31104  00692E                     l1519:
 31105                           
 31106                           ;keyboard.c: 587: }
 31107                           ;keyboard.c: 588: }
 31108                           ;keyboard.c: 589: }
 31109                           ;keyboard.c: 591: if(KEYBOARD_MODE == TRIAD) {
 31110  00692E  0E06               	movlw	6
 31111  006930  0100               	movlb	0	; () banked
 31112  006932  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 31113  006934  A4D8               	btfss	status,2,c
 31114  006936  D003               	goto	l1525
 31115                           
 31116                           ; BSR set to: 0
 31117                           ;keyboard.c: 592: playTriad(pitch);
 31118  006938  5175               	movf	playThisNote@pitch& (0+255),w,b
 31119  00693A  ECE5  F02D         	call	_playTriad
 31120  00693E                     l1525:
 31121                           
 31122                           ;keyboard.c: 593: }
 31123                           ;keyboard.c: 595: if(KEYBOARD_MODE == SEVENTH) {
 31124  00693E  0E09               	movlw	9
 31125  006940  0100               	movlb	0	; () banked
 31126  006942  19F3               	xorwf	_KEYBOARD_MODE& (0+255),w,b
 31127  006944  A4D8               	btfss	status,2,c
 31128  006946  0012               	return	
 31129                           
 31130                           ; BSR set to: 0
 31131                           ;keyboard.c: 596: playSeventh(pitch);
 31132  006948  5175               	movf	playThisNote@pitch& (0+255),w,b
 31133  00694A  EC54  F02C         	call	_playSeventh
 31134  00694E  0012               	return	
 31135  006950                     __end_of_playThisNote:
 31136                           	opt stack 0
 31137                           tblptru	equ	0xFF8
 31138                           tblptrh	equ	0xFF7
 31139                           tblptrl	equ	0xFF6
 31140                           tablat	equ	0xFF5
 31141                           prodh	equ	0xFF4
 31142                           prodl	equ	0xFF3
 31143                           intcon	equ	0xFF2
 31144                           intcon2	equ	0xFF1
 31145                           postinc0	equ	0xFEE
 31146                           wreg	equ	0xFE8
 31147                           postinc1	equ	0xFE6
 31148                           plusw1	equ	0xFE3
 31149                           fsr1h	equ	0xFE2
 31150                           fsr1l	equ	0xFE1
 31151                           indf2	equ	0xFDF
 31152                           postinc2	equ	0xFDE
 31153                           postdec2	equ	0xFDD
 31154                           plusw2	equ	0xFDB
 31155                           fsr2h	equ	0xFDA
 31156                           fsr2l	equ	0xFD9
 31157                           status	equ	0xFD8
 31158                           
 31159 ;; *************** function _playTriad *****************
 31160 ;; Defined at:
 31161 ;;		line 302 in file "keyboard.c"
 31162 ;; Parameters:    Size  Location     Type
 31163 ;;  pitch           1    wreg     unsigned char 
 31164 ;; Auto vars:     Size  Location     Type
 31165 ;;  pitch           1    9[BANK0 ] unsigned char 
 31166 ;;  i               1    8[BANK0 ] unsigned char 
 31167 ;;  i               1    7[BANK0 ] unsigned char 
 31168 ;;  triad_p         2    5[BANK0 ] PTR unsigned char 
 31169 ;;		 -> diminished_triad(3), augmented_triad(3), minor_triad(3), major_triad(3), 
 31170 ;; Return value:  Size  Location     Type
 31171 ;;                  1    wreg      void 
 31172 ;; Registers used:
 31173 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, prodl, prodh, cstack
 31174 ;; Tracked objects:
 31175 ;;		On entry : 0/0
 31176 ;;		On exit  : 0/0
 31177 ;;		Unchanged: 0/0
 31178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 31179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31180 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31181 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31182 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31183 ;;Total ram usage:        9 bytes
 31184 ;; Hardware stack levels used:    1
 31185 ;; Hardware stack levels required when called:   10
 31186 ;; This function calls:
 31187 ;;		_finish_arpeggio_setup
 31188 ;;		_key_press_release_note_off
 31189 ;;		_noteOff
 31190 ;;		_noteOn
 31191 ;;		_wait_one_pulse
 31192 ;; This function is called by:
 31193 ;;		_playThisNote
 31194 ;; This function uses a non-reentrant model
 31195 ;;
 31196                           
 31197                           	psect	text79
 31198  005BCA                     __ptext79:
 31199                           	opt stack 0
 31200  005BCA                     _playTriad:
 31201                           	opt stack 13
 31202                           
 31203                           ;incstack = 0
 31204                           ;playTriad@pitch stored from wreg
 31205  005BCA  0100               	movlb	0	; () banked
 31206  005BCC  6F69               	movwf	playTriad@pitch& (0+255),b
 31207                           
 31208                           ;keyboard.c: 304: unsigned char *triad_p;
 31209                           ;keyboard.c: 308: switch (which_triad) {
 31210  005BCE  D012               	goto	l1448
 31211  005BD0                     
 31212                           ;keyboard.c: 310: triad_p = major_triad;
 31213  005BD0  0EE5               	movlw	low _major_triad
 31214  005BD2  0100               	movlb	0	; () banked
 31215  005BD4  6F65               	movwf	playTriad@triad_p& (0+255),b
 31216  005BD6  0E02               	movlw	high _major_triad
 31217  005BD8  D00B               	goto	L14
 31218  005BDA                     
 31219                           ; BSR set to: 0
 31220                           ;keyboard.c: 313: triad_p = minor_triad;
 31221                           
 31222                           ; BSR set to: 0
 31223  005BDA  0EE2               	movlw	low _minor_triad
 31224  005BDC  6F65               	movwf	playTriad@triad_p& (0+255),b
 31225  005BDE  0E02               	movlw	high _minor_triad
 31226  005BE0  D007               	goto	L14
 31227  005BE2                     
 31228                           ; BSR set to: 0
 31229                           ;keyboard.c: 316: triad_p = augmented_triad;
 31230                           
 31231                           ; BSR set to: 0
 31232  005BE2  0EDF               	movlw	low _augmented_triad
 31233  005BE4  6F65               	movwf	playTriad@triad_p& (0+255),b
 31234  005BE6  0E02               	movlw	high _augmented_triad
 31235  005BE8  D003               	goto	L14
 31236  005BEA                     
 31237                           ; BSR set to: 0
 31238                           ;keyboard.c: 319: triad_p = diminished_triad;
 31239                           
 31240                           ; BSR set to: 0
 31241  005BEA  0EDC               	movlw	low _diminished_triad
 31242  005BEC  6F65               	movwf	playTriad@triad_p& (0+255),b
 31243  005BEE  0E02               	movlw	high _diminished_triad
 31244  005BF0                     L14:
 31245  005BF0  6F66               	movwf	(playTriad@triad_p+1)& (0+255),b
 31246                           
 31247                           ; BSR set to: 0
 31248                           ;keyboard.c: 323: }
 31249                           
 31250                           ; BSR set to: 0
 31251                           ;keyboard.c: 322: break;
 31252                           
 31253                           ;keyboard.c: 321: default:
 31254                           
 31255                           ;keyboard.c: 320: break;
 31256  005BF2  D00E               	goto	l1450
 31257  005BF4                     l1448:
 31258                           
 31259                           ; BSR set to: 0
 31260  005BF4  0100               	movlb	0	; () banked
 31261  005BF6  51F1               	movf	_which_triad& (0+255),w,b
 31262                           
 31263                           ; Switch size 1, requested type "space"
 31264                           ; Number of cases is 4, Range of values is 0 to 3
 31265                           ; switch strategies available:
 31266                           ; Name         Instructions Cycles
 31267                           ; simple_byte           13     7 (average)
 31268                           ;	Chosen strategy is simple_byte
 31269  005BF8  0A00               	xorlw	0	; case 0
 31270  005BFA  B4D8               	btfsc	status,2,c
 31271  005BFC  D7E9               	goto	l1449
 31272  005BFE  0A01               	xorlw	1	; case 1
 31273  005C00  B4D8               	btfsc	status,2,c
 31274  005C02  D7EB               	goto	l1451
 31275  005C04  0A03               	xorlw	3	; case 2
 31276  005C06  B4D8               	btfsc	status,2,c
 31277  005C08  D7EC               	goto	l1452
 31278  005C0A  0A01               	xorlw	1	; case 3
 31279  005C0C  B4D8               	btfsc	status,2,c
 31280  005C0E  D7ED               	goto	l1453
 31281  005C10                     l1450:
 31282                           
 31283                           ; BSR set to: 0
 31284                           ;keyboard.c: 335: if(ARPEGGIO_ON == 0){
 31285  005C10  BA04               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 31286  005C12  D030               	goto	u45800
 31287                           
 31288                           ; BSR set to: 0
 31289                           ;keyboard.c: 336: for(unsigned char i = 0; i<3; i++){
 31290  005C14  0E00               	movlw	0
 31291  005C16  6F67               	movwf	playTriad@i& (0+255),b
 31292  005C18                     l26590:
 31293                           
 31294                           ; BSR set to: 0
 31295  005C18  0E02               	movlw	2
 31296  005C1A  6567               	cpfsgt	playTriad@i& (0+255),b
 31297  005C1C  D001               	goto	l1456
 31298  005C1E  D02A               	goto	u45800
 31299  005C20                     l1456:
 31300                           
 31301                           ; BSR set to: 0
 31302                           ;keyboard.c: 337: if(ON_OFF == 1) {noteOn(channel,triad_p[i] + pitch,velocity);}
 31303  005C20  A206               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31304  005C22  D011               	goto	l1458
 31305                           
 31306                           ; BSR set to: 0
 31307  005C24  5050               	movf	_velocity,w,c
 31308  005C26  6EE6               	movwf	postinc1,c
 31309  005C28  5167               	movf	playTriad@i& (0+255),w,b
 31310  005C2A  0D01               	mullw	1
 31311  005C2C  50F3               	movf	prodl,w,c
 31312  005C2E  2565               	addwf	playTriad@triad_p& (0+255),w,b
 31313  005C30  6ED9               	movwf	fsr2l,c
 31314  005C32  50F4               	movf	prodh,w,c
 31315  005C34  2166               	addwfc	(playTriad@triad_p+1)& (0+255),w,b
 31316  005C36  6EDA               	movwf	fsr2h,c
 31317  005C38  50DF               	movf	indf2,w,c
 31318  005C3A  2569               	addwf	playTriad@pitch& (0+255),w,b
 31319  005C3C  6EE6               	movwf	postinc1,c
 31320  005C3E  503D               	movf	_channel,w,c
 31321  005C40  6EE6               	movwf	postinc1,c
 31322  005C42  EC10  F046         	call	_noteOn	;wreg free
 31323  005C46                     l1458:
 31324                           
 31325                           ;keyboard.c: 338: if(ON_OFF == 0) {noteOff(channel,triad_p[i] + pitch,velocity);}
 31326  005C46  B206               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31327  005C48  D012               	goto	l1459
 31328  005C4A  5050               	movf	_velocity,w,c
 31329  005C4C  6EE6               	movwf	postinc1,c
 31330  005C4E  0100               	movlb	0	; () banked
 31331  005C50  5167               	movf	playTriad@i& (0+255),w,b
 31332  005C52  0D01               	mullw	1
 31333  005C54  50F3               	movf	prodl,w,c
 31334  005C56  2565               	addwf	playTriad@triad_p& (0+255),w,b
 31335  005C58  6ED9               	movwf	fsr2l,c
 31336  005C5A  50F4               	movf	prodh,w,c
 31337  005C5C  2166               	addwfc	(playTriad@triad_p+1)& (0+255),w,b
 31338  005C5E  6EDA               	movwf	fsr2h,c
 31339  005C60  50DF               	movf	indf2,w,c
 31340  005C62  2569               	addwf	playTriad@pitch& (0+255),w,b
 31341  005C64  6EE6               	movwf	postinc1,c
 31342  005C66  503D               	movf	_channel,w,c
 31343  005C68  6EE6               	movwf	postinc1,c
 31344  005C6A  ECA0  F04A         	call	_noteOff	;wreg free
 31345  005C6E                     l1459:
 31346  005C6E  0100               	movlb	0	; () banked
 31347  005C70  2B67               	incf	playTriad@i& (0+255),f,b
 31348  005C72  D7D2               	goto	l26590
 31349  005C74                     u45800:
 31350                           
 31351                           ; BSR set to: 0
 31352                           ;keyboard.c: 339: }
 31353                           ;keyboard.c: 340: }
 31354                           ;keyboard.c: 343: if(ARPEGGIO_ON == 1){
 31355                           
 31356                           ; BSR set to: 0
 31357  005C74  AA04               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 31358  005C76  0012               	return	
 31359                           
 31360                           ; BSR set to: 0
 31361                           ;keyboard.c: 344: if(ON_OFF == 1) {
 31362  005C78  A206               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31363  005C7A  D034               	goto	l1461
 31364                           
 31365                           ; BSR set to: 0
 31366                           ;keyboard.c: 346: TMR0ON = 0;
 31367  005C7C  9ED5               	bcf	4053,7,c	;volatile
 31368                           
 31369                           ;keyboard.c: 349: parallel = pitch;
 31370  005C7E  C069  F02F         	movff	playTriad@pitch,_parallel
 31371                           
 31372                           ; BSR set to: 0
 31373                           ;keyboard.c: 352: if(NUM_NOTES_PRESSED > 0){
 31374  005C82  502E               	movf	_NUM_NOTES_PRESSED,w,c
 31375  005C84  B4D8               	btfsc	status,2,c
 31376  005C86  D00A               	goto	l1462
 31377                           
 31378                           ; BSR set to: 0
 31379                           ;keyboard.c: 353: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 31380  005C88  0E00               	movlw	0
 31381  005C8A  B603               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 31382  005C8C  0E01               	movlw	1
 31383  005C8E  EC43  F04C         	call	_wait_one_pulse
 31384                           
 31385                           ;keyboard.c: 354: if(note_off_was_sent == 0) {key_press_release_note_off();}
 31386  005C92  A052               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 31387  005C94  ECA7  F02E         	call	_key_press_release_note_off	;wreg free
 31388                           
 31389                           ;keyboard.c: 355: TIMER_OVERFLOWS = 0;
 31390  005C98  0E00               	movlw	0
 31391  005C9A  6E2D               	movwf	_TIMER_OVERFLOWS,c
 31392  005C9C                     l1462:
 31393                           
 31394                           ;keyboard.c: 356: }
 31395                           ;keyboard.c: 358: for(unsigned char i = 0; i<3; i++){
 31396  005C9C  0E00               	movlw	0
 31397  005C9E  0100               	movlb	0	; () banked
 31398  005CA0  6F68               	movwf	playTriad@i_1691& (0+255),b
 31399  005CA2                     l26620:
 31400                           
 31401                           ; BSR set to: 0
 31402  005CA2  0E02               	movlw	2
 31403  005CA4  6568               	cpfsgt	playTriad@i_1691& (0+255),b
 31404  005CA6  D001               	goto	l1464
 31405  005CA8  D015               	goto	u45860
 31406  005CAA                     l1464:
 31407                           
 31408                           ; BSR set to: 0
 31409                           ;keyboard.c: 359: ARPEGGIO[i] = triad_p[i] + pitch;
 31410                           
 31411                           ; BSR set to: 0
 31412  005CAA  5168               	movf	playTriad@i_1691& (0+255),w,b
 31413  005CAC  0D01               	mullw	1
 31414  005CAE  0E84               	movlw	low _ARPEGGIO
 31415  005CB0  24F3               	addwf	prodl,w,c
 31416  005CB2  6ED9               	movwf	fsr2l,c
 31417  005CB4  0E01               	movlw	high _ARPEGGIO
 31418  005CB6  20F4               	addwfc	prodh,w,c
 31419  005CB8  6EDA               	movwf	fsr2h,c
 31420  005CBA  5168               	movf	playTriad@i_1691& (0+255),w,b
 31421  005CBC  0D01               	mullw	1
 31422  005CBE  50F3               	movf	prodl,w,c
 31423  005CC0  2565               	addwf	playTriad@triad_p& (0+255),w,b
 31424  005CC2  6EE9               	movwf	fsr0l,c
 31425  005CC4  50F4               	movf	prodh,w,c
 31426  005CC6  2166               	addwfc	(playTriad@triad_p+1)& (0+255),w,b
 31427  005CC8  6EEA               	movwf	fsr0h,c
 31428  005CCA  50EF               	movf	indf0,w,c
 31429  005CCC  2569               	addwf	playTriad@pitch& (0+255),w,b
 31430  005CCE  6EDF               	movwf	indf2,c
 31431                           
 31432                           ; BSR set to: 0
 31433  005CD0  2B68               	incf	playTriad@i_1691& (0+255),f,b
 31434  005CD2  D7E7               	goto	l26620
 31435  005CD4                     u45860:
 31436                           
 31437                           ; BSR set to: 0
 31438                           ;keyboard.c: 360: }
 31439                           ;keyboard.c: 362: NUM_NOTES_PRESSED = 3;
 31440                           
 31441                           ; BSR set to: 0
 31442  005CD4  0E03               	movlw	3
 31443  005CD6  6E2E               	movwf	_NUM_NOTES_PRESSED,c
 31444                           
 31445                           ; BSR set to: 0
 31446                           ;keyboard.c: 366: if(LATCH == 0) {latch_was_pressed = 0;}
 31447  005CD8  A404               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 31448                           
 31449                           ; BSR set to: 0
 31450  005CDA  9E03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31451                           
 31452                           ; BSR set to: 0
 31453                           ;keyboard.c: 368: finish_arpeggio_setup();
 31454                           
 31455                           ; BSR set to: 0
 31456  005CDC  ECD8  F04C         	call	_finish_arpeggio_setup	;wreg free
 31457                           
 31458                           ;keyboard.c: 369: TMR0ON = 1;
 31459  005CE0  8ED5               	bsf	4053,7,c	;volatile
 31460                           
 31461                           ;keyboard.c: 371: return;
 31462  005CE2  0012               	return	
 31463  005CE4                     l1461:
 31464                           
 31465                           ; BSR set to: 0
 31466                           ;keyboard.c: 372: }
 31467                           ;keyboard.c: 374: if((ON_OFF == 0) && (LATCH == 0)) {
 31468  005CE4  B206               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31469  005CE6  0012               	return	
 31470                           
 31471                           ; BSR set to: 0
 31472  005CE8  B404               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 31473  005CEA  0012               	return	
 31474                           
 31475                           ; BSR set to: 0
 31476                           ;keyboard.c: 376: if(NUM_NOTES_PRESSED > 0){
 31477  005CEC  502E               	movf	_NUM_NOTES_PRESSED,w,c
 31478  005CEE  B4D8               	btfsc	status,2,c
 31479  005CF0  D00A               	goto	l1469
 31480                           
 31481                           ; BSR set to: 0
 31482                           ;keyboard.c: 377: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 31483  005CF2  0E00               	movlw	0
 31484  005CF4  B403               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 31485  005CF6  0E01               	movlw	1
 31486  005CF8  EC43  F04C         	call	_wait_one_pulse
 31487                           
 31488                           ;keyboard.c: 378: if(note_off_was_sent == 0) {key_press_release_note_off();}
 31489  005CFC  A052               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 31490  005CFE  ECA7  F02E         	call	_key_press_release_note_off	;wreg free
 31491                           
 31492                           ;keyboard.c: 379: TIMER_OVERFLOWS = 0;
 31493  005D02  0E00               	movlw	0
 31494  005D04  6E2D               	movwf	_TIMER_OVERFLOWS,c
 31495  005D06                     l1469:
 31496                           
 31497                           ;keyboard.c: 380: }
 31498                           ;keyboard.c: 383: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 31499  005D06  C02F  F061         	movff	_parallel,??_playTriad
 31500  005D0A  0100               	movlb	0	; () banked
 31501  005D0C  6B62               	clrf	(??_playTriad+1)& (0+255),b
 31502  005D0E  BF61               	btfsc	??_playTriad& (0+255),7,b
 31503  005D10  0762               	decf	(??_playTriad+1)& (0+255),f,b
 31504  005D12  5169               	movf	playTriad@pitch& (0+255),w,b
 31505  005D14  6F63               	movwf	(??_playTriad+2)& (0+255),b
 31506  005D16  6B64               	clrf	(??_playTriad+3)& (0+255),b
 31507  005D18  5161               	movf	??_playTriad& (0+255),w,b
 31508  005D1A  1963               	xorwf	(??_playTriad+2)& (0+255),w,b
 31509  005D1C  E106               	bnz	l26658
 31510  005D1E  5162               	movf	(??_playTriad+1)& (0+255),w,b
 31511  005D20  1964               	xorwf	(??_playTriad+3)& (0+255),w,b
 31512  005D22  A4D8               	btfss	status,2,c
 31513  005D24  D002               	goto	l1471
 31514                           
 31515                           ; BSR set to: 0
 31516  005D26  0E00               	movlw	0
 31517  005D28  6E2E               	movwf	_NUM_NOTES_PRESSED,c
 31518  005D2A                     l1471:
 31519  005D2A                     l26658:
 31520                           
 31521                           ; BSR set to: 0
 31522                           ;keyboard.c: 388: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 31523  005D2A  B004               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 31524                           
 31525                           ; BSR set to: 0
 31526  005D2C  AE03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31527  005D2E  D001               	goto	l1472
 31528                           
 31529                           ; BSR set to: 0
 31530                           ;keyboard.c: 389: LATCH = 1;
 31531  005D30  8404               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 31532  005D32                     l1472:
 31533                           
 31534                           ; BSR set to: 0
 31535                           ;keyboard.c: 390: }
 31536                           ;keyboard.c: 394: if(((UN_LATCH_MODE == 0) || (UN_LATCH_MODE == 1)) && (latch_was_presse
      +                          d == 1)){
 31537  005D32  A204               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 31538  005D34  D002               	goto	u45960
 31539                           
 31540                           ; BSR set to: 0
 31541  005D36  A204               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 31542  005D38  D006               	goto	l1473
 31543  005D3A                     u45960:
 31544                           
 31545                           ; BSR set to: 0
 31546  005D3A  AE03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31547  005D3C  D004               	goto	l1473
 31548                           
 31549                           ; BSR set to: 0
 31550                           ;keyboard.c: 395: NUM_NOTES_PRESSED = 0;
 31551  005D3E  0E00               	movlw	0
 31552  005D40  6E2E               	movwf	_NUM_NOTES_PRESSED,c
 31553                           
 31554                           ;keyboard.c: 396: ARRAY_INDEX = 0;
 31555  005D42  0E00               	movlw	0
 31556  005D44  6FEC               	movwf	_ARRAY_INDEX& (0+255),b
 31557  005D46                     l1473:
 31558                           
 31559                           ; BSR set to: 0
 31560                           ;keyboard.c: 397: }
 31561                           ;keyboard.c: 399: finish_arpeggio_setup();
 31562                           
 31563                           ; BSR set to: 0
 31564  005D46  ECD8  F04C         	call	_finish_arpeggio_setup	;wreg free
 31565                           
 31566                           ;keyboard.c: 400: TMR0ON = 1;
 31567  005D4A  8ED5               	bsf	4053,7,c	;volatile
 31568                           
 31569                           ;keyboard.c: 401: return;
 31570  005D4C  0012               	return	
 31571  005D4E                     __end_of_playTriad:
 31572                           	opt stack 0
 31573                           tblptru	equ	0xFF8
 31574                           tblptrh	equ	0xFF7
 31575                           tblptrl	equ	0xFF6
 31576                           tablat	equ	0xFF5
 31577                           prodh	equ	0xFF4
 31578                           prodl	equ	0xFF3
 31579                           intcon	equ	0xFF2
 31580                           intcon2	equ	0xFF1
 31581                           indf0	equ	0xFEF
 31582                           postinc0	equ	0xFEE
 31583                           fsr0h	equ	0xFEA
 31584                           fsr0l	equ	0xFE9
 31585                           wreg	equ	0xFE8
 31586                           postinc1	equ	0xFE6
 31587                           plusw1	equ	0xFE3
 31588                           fsr1h	equ	0xFE2
 31589                           fsr1l	equ	0xFE1
 31590                           indf2	equ	0xFDF
 31591                           postinc2	equ	0xFDE
 31592                           postdec2	equ	0xFDD
 31593                           plusw2	equ	0xFDB
 31594                           fsr2h	equ	0xFDA
 31595                           fsr2l	equ	0xFD9
 31596                           status	equ	0xFD8
 31597                           
 31598 ;; *************** function _playSeventh *****************
 31599 ;; Defined at:
 31600 ;;		line 406 in file "keyboard.c"
 31601 ;; Parameters:    Size  Location     Type
 31602 ;;  pitch           1    wreg     unsigned char 
 31603 ;; Auto vars:     Size  Location     Type
 31604 ;;  pitch           1    9[BANK0 ] unsigned char 
 31605 ;;  i               1    8[BANK0 ] unsigned char 
 31606 ;;  i               1    7[BANK0 ] unsigned char 
 31607 ;;  seventh_p       2    5[BANK0 ] PTR unsigned char 
 31608 ;;		 -> diminished_7th(4), half_diminished_7th(4), minor_7th(4), major_7th(4), 
 31609 ;;		 -> dominant_7th(4), 
 31610 ;; Return value:  Size  Location     Type
 31611 ;;                  1    wreg      void 
 31612 ;; Registers used:
 31613 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, prodl, prodh, cstack
 31614 ;; Tracked objects:
 31615 ;;		On entry : 0/0
 31616 ;;		On exit  : 0/0
 31617 ;;		Unchanged: 0/0
 31618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 31619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31620 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31621 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31622 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 31623 ;;Total ram usage:        9 bytes
 31624 ;; Hardware stack levels used:    1
 31625 ;; Hardware stack levels required when called:   10
 31626 ;; This function calls:
 31627 ;;		_finish_arpeggio_setup
 31628 ;;		_key_press_release_note_off
 31629 ;;		_noteOff
 31630 ;;		_noteOn
 31631 ;;		_wait_one_pulse
 31632 ;; This function is called by:
 31633 ;;		_playThisNote
 31634 ;; This function uses a non-reentrant model
 31635 ;;
 31636                           
 31637                           	psect	text80
 31638  0058A8                     __ptext80:
 31639                           	opt stack 0
 31640  0058A8                     _playSeventh:
 31641                           	opt stack 13
 31642                           
 31643                           ;incstack = 0
 31644                           ;playSeventh@pitch stored from wreg
 31645  0058A8  0100               	movlb	0	; () banked
 31646  0058AA  6F69               	movwf	playSeventh@pitch& (0+255),b
 31647                           
 31648                           ;keyboard.c: 408: unsigned char *seventh_p;
 31649                           ;keyboard.c: 411: switch (which_seventh) {
 31650  0058AC  D016               	goto	l1478
 31651  0058AE                     
 31652                           ;keyboard.c: 413: seventh_p = dominant_7th;
 31653  0058AE  0ED8               	movlw	low _dominant_7th
 31654  0058B0  0100               	movlb	0	; () banked
 31655  0058B2  6F65               	movwf	playSeventh@seventh_p& (0+255),b
 31656  0058B4  0E02               	movlw	high _dominant_7th
 31657  0058B6  D00F               	goto	L18
 31658  0058B8                     
 31659                           ; BSR set to: 0
 31660                           ;keyboard.c: 416: seventh_p = major_7th;
 31661                           
 31662                           ; BSR set to: 0
 31663  0058B8  0ED4               	movlw	low _major_7th
 31664  0058BA  6F65               	movwf	playSeventh@seventh_p& (0+255),b
 31665  0058BC  0E02               	movlw	high _major_7th
 31666  0058BE  D00B               	goto	L18
 31667  0058C0                     
 31668                           ; BSR set to: 0
 31669                           ;keyboard.c: 419: seventh_p = minor_7th;
 31670                           
 31671                           ; BSR set to: 0
 31672  0058C0  0ED0               	movlw	low _minor_7th
 31673  0058C2  6F65               	movwf	playSeventh@seventh_p& (0+255),b
 31674  0058C4  0E02               	movlw	high _minor_7th
 31675  0058C6  D007               	goto	L18
 31676  0058C8                     
 31677                           ; BSR set to: 0
 31678                           ;keyboard.c: 422: seventh_p = half_diminished_7th;
 31679                           
 31680                           ; BSR set to: 0
 31681  0058C8  0ECC               	movlw	low _half_diminished_7th
 31682  0058CA  6F65               	movwf	playSeventh@seventh_p& (0+255),b
 31683  0058CC  0E02               	movlw	high _half_diminished_7th
 31684  0058CE  D003               	goto	L18
 31685  0058D0                     
 31686                           ; BSR set to: 0
 31687                           ;keyboard.c: 425: seventh_p = diminished_7th;
 31688                           
 31689                           ; BSR set to: 0
 31690  0058D0  0EC8               	movlw	low _diminished_7th
 31691  0058D2  6F65               	movwf	playSeventh@seventh_p& (0+255),b
 31692  0058D4  0E02               	movlw	high _diminished_7th
 31693  0058D6                     L18:
 31694  0058D6  6F66               	movwf	(playSeventh@seventh_p+1)& (0+255),b
 31695                           
 31696                           ; BSR set to: 0
 31697                           ;keyboard.c: 429: }
 31698                           
 31699                           ; BSR set to: 0
 31700                           ;keyboard.c: 428: break;
 31701                           
 31702                           ;keyboard.c: 427: default:
 31703                           
 31704                           ;keyboard.c: 426: break;
 31705  0058D8  D011               	goto	l1480
 31706  0058DA                     l1478:
 31707                           
 31708                           ; BSR set to: 0
 31709  0058DA  0100               	movlb	0	; () banked
 31710  0058DC  51F0               	movf	_which_seventh& (0+255),w,b
 31711                           
 31712                           ; Switch size 1, requested type "space"
 31713                           ; Number of cases is 5, Range of values is 0 to 4
 31714                           ; switch strategies available:
 31715                           ; Name         Instructions Cycles
 31716                           ; simple_byte           16     9 (average)
 31717                           ;	Chosen strategy is simple_byte
 31718  0058DE  0A00               	xorlw	0	; case 0
 31719  0058E0  B4D8               	btfsc	status,2,c
 31720  0058E2  D7E5               	goto	l1479
 31721  0058E4  0A01               	xorlw	1	; case 1
 31722  0058E6  B4D8               	btfsc	status,2,c
 31723  0058E8  D7E7               	goto	l1481
 31724  0058EA  0A03               	xorlw	3	; case 2
 31725  0058EC  B4D8               	btfsc	status,2,c
 31726  0058EE  D7E8               	goto	l1482
 31727  0058F0  0A01               	xorlw	1	; case 3
 31728  0058F2  B4D8               	btfsc	status,2,c
 31729  0058F4  D7E9               	goto	l1483
 31730  0058F6  0A07               	xorlw	7	; case 4
 31731  0058F8  B4D8               	btfsc	status,2,c
 31732  0058FA  D7EA               	goto	l1484
 31733  0058FC                     l1480:
 31734                           
 31735                           ; BSR set to: 0
 31736                           ;keyboard.c: 432: if(ARPEGGIO_ON == 0){
 31737  0058FC  BA04               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 31738  0058FE  D030               	goto	u46020
 31739                           
 31740                           ; BSR set to: 0
 31741                           ;keyboard.c: 433: for(unsigned char i = 0; i<4; i++){
 31742  005900  0E00               	movlw	0
 31743  005902  6F67               	movwf	playSeventh@i& (0+255),b
 31744  005904                     l26692:
 31745                           
 31746                           ; BSR set to: 0
 31747  005904  0E03               	movlw	3
 31748  005906  6567               	cpfsgt	playSeventh@i& (0+255),b
 31749  005908  D001               	goto	l1487
 31750  00590A  D02A               	goto	u46020
 31751  00590C                     l1487:
 31752                           
 31753                           ; BSR set to: 0
 31754                           ;keyboard.c: 434: if(ON_OFF == 1) {noteOn(channel,seventh_p[i] + pitch,velocity);}
 31755  00590C  A206               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31756  00590E  D011               	goto	l1489
 31757                           
 31758                           ; BSR set to: 0
 31759  005910  5050               	movf	_velocity,w,c
 31760  005912  6EE6               	movwf	postinc1,c
 31761  005914  5167               	movf	playSeventh@i& (0+255),w,b
 31762  005916  0D01               	mullw	1
 31763  005918  50F3               	movf	prodl,w,c
 31764  00591A  2565               	addwf	playSeventh@seventh_p& (0+255),w,b
 31765  00591C  6ED9               	movwf	fsr2l,c
 31766  00591E  50F4               	movf	prodh,w,c
 31767  005920  2166               	addwfc	(playSeventh@seventh_p+1)& (0+255),w,b
 31768  005922  6EDA               	movwf	fsr2h,c
 31769  005924  50DF               	movf	indf2,w,c
 31770  005926  2569               	addwf	playSeventh@pitch& (0+255),w,b
 31771  005928  6EE6               	movwf	postinc1,c
 31772  00592A  503D               	movf	_channel,w,c
 31773  00592C  6EE6               	movwf	postinc1,c
 31774  00592E  EC10  F046         	call	_noteOn	;wreg free
 31775  005932                     l1489:
 31776                           
 31777                           ;keyboard.c: 435: if(ON_OFF == 0) {noteOff(channel,seventh_p[i] + pitch,velocity);}
 31778  005932  B206               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31779  005934  D012               	goto	l1490
 31780  005936  5050               	movf	_velocity,w,c
 31781  005938  6EE6               	movwf	postinc1,c
 31782  00593A  0100               	movlb	0	; () banked
 31783  00593C  5167               	movf	playSeventh@i& (0+255),w,b
 31784  00593E  0D01               	mullw	1
 31785  005940  50F3               	movf	prodl,w,c
 31786  005942  2565               	addwf	playSeventh@seventh_p& (0+255),w,b
 31787  005944  6ED9               	movwf	fsr2l,c
 31788  005946  50F4               	movf	prodh,w,c
 31789  005948  2166               	addwfc	(playSeventh@seventh_p+1)& (0+255),w,b
 31790  00594A  6EDA               	movwf	fsr2h,c
 31791  00594C  50DF               	movf	indf2,w,c
 31792  00594E  2569               	addwf	playSeventh@pitch& (0+255),w,b
 31793  005950  6EE6               	movwf	postinc1,c
 31794  005952  503D               	movf	_channel,w,c
 31795  005954  6EE6               	movwf	postinc1,c
 31796  005956  ECA0  F04A         	call	_noteOff	;wreg free
 31797  00595A                     l1490:
 31798  00595A  0100               	movlb	0	; () banked
 31799  00595C  2B67               	incf	playSeventh@i& (0+255),f,b
 31800  00595E  D7D2               	goto	l26692
 31801  005960                     u46020:
 31802                           
 31803                           ; BSR set to: 0
 31804                           ;keyboard.c: 436: }
 31805                           ;keyboard.c: 437: }
 31806                           ;keyboard.c: 440: if(ARPEGGIO_ON == 1){
 31807                           
 31808                           ; BSR set to: 0
 31809  005960  AA04               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 31810  005962  0012               	return	
 31811                           
 31812                           ; BSR set to: 0
 31813                           ;keyboard.c: 442: if(ON_OFF == 1) {
 31814  005964  A206               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31815  005966  D034               	goto	l1492
 31816                           
 31817                           ; BSR set to: 0
 31818                           ;keyboard.c: 444: TMR0ON = 0;
 31819  005968  9ED5               	bcf	4053,7,c	;volatile
 31820                           
 31821                           ;keyboard.c: 447: parallel = pitch;
 31822  00596A  C069  F02F         	movff	playSeventh@pitch,_parallel
 31823                           
 31824                           ; BSR set to: 0
 31825                           ;keyboard.c: 450: if(NUM_NOTES_PRESSED > 0){
 31826  00596E  502E               	movf	_NUM_NOTES_PRESSED,w,c
 31827  005970  B4D8               	btfsc	status,2,c
 31828  005972  D00A               	goto	l1493
 31829                           
 31830                           ; BSR set to: 0
 31831                           ;keyboard.c: 451: wait_one_pulse(LAST_NOTE_MODE_KEY_PRESS);
 31832  005974  0E00               	movlw	0
 31833  005976  B603               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 31834  005978  0E01               	movlw	1
 31835  00597A  EC43  F04C         	call	_wait_one_pulse
 31836                           
 31837                           ;keyboard.c: 452: if(note_off_was_sent == 0) {key_press_release_note_off();}
 31838  00597E  A052               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 31839  005980  ECA7  F02E         	call	_key_press_release_note_off	;wreg free
 31840                           
 31841                           ;keyboard.c: 453: TIMER_OVERFLOWS = 0;
 31842  005984  0E00               	movlw	0
 31843  005986  6E2D               	movwf	_TIMER_OVERFLOWS,c
 31844  005988                     l1493:
 31845                           
 31846                           ;keyboard.c: 454: }
 31847                           ;keyboard.c: 456: for(unsigned char i = 0; i<4; i++){
 31848  005988  0E00               	movlw	0
 31849  00598A  0100               	movlb	0	; () banked
 31850  00598C  6F68               	movwf	playSeventh@i_1696& (0+255),b
 31851  00598E                     l26722:
 31852                           
 31853                           ; BSR set to: 0
 31854  00598E  0E03               	movlw	3
 31855  005990  6568               	cpfsgt	playSeventh@i_1696& (0+255),b
 31856  005992  D001               	goto	l1495
 31857  005994  D015               	goto	u46080
 31858  005996                     l1495:
 31859                           
 31860                           ; BSR set to: 0
 31861                           ;keyboard.c: 457: ARPEGGIO[i] = seventh_p[i] + pitch;
 31862                           
 31863                           ; BSR set to: 0
 31864  005996  5168               	movf	playSeventh@i_1696& (0+255),w,b
 31865  005998  0D01               	mullw	1
 31866  00599A  0E84               	movlw	low _ARPEGGIO
 31867  00599C  24F3               	addwf	prodl,w,c
 31868  00599E  6ED9               	movwf	fsr2l,c
 31869  0059A0  0E01               	movlw	high _ARPEGGIO
 31870  0059A2  20F4               	addwfc	prodh,w,c
 31871  0059A4  6EDA               	movwf	fsr2h,c
 31872  0059A6  5168               	movf	playSeventh@i_1696& (0+255),w,b
 31873  0059A8  0D01               	mullw	1
 31874  0059AA  50F3               	movf	prodl,w,c
 31875  0059AC  2565               	addwf	playSeventh@seventh_p& (0+255),w,b
 31876  0059AE  6EE9               	movwf	fsr0l,c
 31877  0059B0  50F4               	movf	prodh,w,c
 31878  0059B2  2166               	addwfc	(playSeventh@seventh_p+1)& (0+255),w,b
 31879  0059B4  6EEA               	movwf	fsr0h,c
 31880  0059B6  50EF               	movf	indf0,w,c
 31881  0059B8  2569               	addwf	playSeventh@pitch& (0+255),w,b
 31882  0059BA  6EDF               	movwf	indf2,c
 31883                           
 31884                           ; BSR set to: 0
 31885  0059BC  2B68               	incf	playSeventh@i_1696& (0+255),f,b
 31886  0059BE  D7E7               	goto	l26722
 31887  0059C0                     u46080:
 31888                           
 31889                           ; BSR set to: 0
 31890                           ;keyboard.c: 458: }
 31891                           ;keyboard.c: 460: NUM_NOTES_PRESSED = 4;
 31892                           
 31893                           ; BSR set to: 0
 31894  0059C0  0E04               	movlw	4
 31895  0059C2  6E2E               	movwf	_NUM_NOTES_PRESSED,c
 31896                           
 31897                           ; BSR set to: 0
 31898                           ;keyboard.c: 463: if(LATCH == 0) {latch_was_pressed = 0;}
 31899  0059C4  A404               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 31900                           
 31901                           ; BSR set to: 0
 31902  0059C6  9E03               	bcf	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31903                           
 31904                           ; BSR set to: 0
 31905                           ;keyboard.c: 465: finish_arpeggio_setup();
 31906                           
 31907                           ; BSR set to: 0
 31908  0059C8  ECD8  F04C         	call	_finish_arpeggio_setup	;wreg free
 31909                           
 31910                           ;keyboard.c: 466: TMR0ON = 1;
 31911  0059CC  8ED5               	bsf	4053,7,c	;volatile
 31912                           
 31913                           ;keyboard.c: 468: return;
 31914  0059CE  0012               	return	
 31915  0059D0                     l1492:
 31916                           
 31917                           ; BSR set to: 0
 31918                           ;keyboard.c: 469: }
 31919                           ;keyboard.c: 471: if((ON_OFF == 0) && (LATCH == 0)) {
 31920  0059D0  B206               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 31921  0059D2  0012               	return	
 31922                           
 31923                           ; BSR set to: 0
 31924  0059D4  B404               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 31925  0059D6  0012               	return	
 31926                           
 31927                           ; BSR set to: 0
 31928                           ;keyboard.c: 473: if(NUM_NOTES_PRESSED > 0){
 31929  0059D8  502E               	movf	_NUM_NOTES_PRESSED,w,c
 31930  0059DA  B4D8               	btfsc	status,2,c
 31931  0059DC  D00A               	goto	l1500
 31932                           
 31933                           ; BSR set to: 0
 31934                           ;keyboard.c: 474: wait_one_pulse(LAST_NOTE_MODE_KEY_RELEASE);
 31935  0059DE  0E00               	movlw	0
 31936  0059E0  B403               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 31937  0059E2  0E01               	movlw	1
 31938  0059E4  EC43  F04C         	call	_wait_one_pulse
 31939                           
 31940                           ;keyboard.c: 475: if(note_off_was_sent == 0) {key_press_release_note_off();}
 31941  0059E8  A052               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 31942  0059EA  ECA7  F02E         	call	_key_press_release_note_off	;wreg free
 31943                           
 31944                           ;keyboard.c: 476: TIMER_OVERFLOWS = 0;
 31945  0059EE  0E00               	movlw	0
 31946  0059F0  6E2D               	movwf	_TIMER_OVERFLOWS,c
 31947  0059F2                     l1500:
 31948                           
 31949                           ;keyboard.c: 477: }
 31950                           ;keyboard.c: 480: if(pitch == parallel){NUM_NOTES_PRESSED = 0;}
 31951  0059F2  C02F  F061         	movff	_parallel,??_playSeventh
 31952  0059F6  0100               	movlb	0	; () banked
 31953  0059F8  6B62               	clrf	(??_playSeventh+1)& (0+255),b
 31954  0059FA  BF61               	btfsc	??_playSeventh& (0+255),7,b
 31955  0059FC  0762               	decf	(??_playSeventh+1)& (0+255),f,b
 31956  0059FE  5169               	movf	playSeventh@pitch& (0+255),w,b
 31957  005A00  6F63               	movwf	(??_playSeventh+2)& (0+255),b
 31958  005A02  6B64               	clrf	(??_playSeventh+3)& (0+255),b
 31959  005A04  5161               	movf	??_playSeventh& (0+255),w,b
 31960  005A06  1963               	xorwf	(??_playSeventh+2)& (0+255),w,b
 31961  005A08  E106               	bnz	l26760
 31962  005A0A  5162               	movf	(??_playSeventh+1)& (0+255),w,b
 31963  005A0C  1964               	xorwf	(??_playSeventh+3)& (0+255),w,b
 31964  005A0E  A4D8               	btfss	status,2,c
 31965  005A10  D002               	goto	l1502
 31966                           
 31967                           ; BSR set to: 0
 31968  005A12  0E00               	movlw	0
 31969  005A14  6E2E               	movwf	_NUM_NOTES_PRESSED,c
 31970  005A16                     l1502:
 31971  005A16                     l26760:
 31972                           
 31973                           ; BSR set to: 0
 31974                           ;keyboard.c: 485: if((AUTO_LATCH == 1) && (latch_was_pressed == 1)){
 31975  005A16  B004               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 31976                           
 31977                           ; BSR set to: 0
 31978  005A18  AE03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31979  005A1A  D001               	goto	l1503
 31980                           
 31981                           ; BSR set to: 0
 31982                           ;keyboard.c: 486: LATCH = 1;
 31983  005A1C  8404               	bsf	_LATCH/(0+8),_LATCH& (0+7),c
 31984  005A1E                     l1503:
 31985                           
 31986                           ; BSR set to: 0
 31987                           ;keyboard.c: 487: }
 31988                           ;keyboard.c: 491: if(((UN_LATCH_MODE == 0) || (UN_LATCH_MODE == 1)) && (latch_was_presse
      +                          d == 1)){
 31989  005A1E  A204               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 31990  005A20  D002               	goto	u46180
 31991                           
 31992                           ; BSR set to: 0
 31993  005A22  A204               	btfss	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 31994  005A24  D006               	goto	l1504
 31995  005A26                     u46180:
 31996                           
 31997                           ; BSR set to: 0
 31998  005A26  AE03               	btfss	_latch_was_pressed/(0+8),_latch_was_pressed& (0+7),c
 31999  005A28  D004               	goto	l1504
 32000                           
 32001                           ; BSR set to: 0
 32002                           ;keyboard.c: 492: NUM_NOTES_PRESSED = 0;
 32003  005A2A  0E00               	movlw	0
 32004  005A2C  6E2E               	movwf	_NUM_NOTES_PRESSED,c
 32005                           
 32006                           ;keyboard.c: 493: ARRAY_INDEX = 0;
 32007  005A2E  0E00               	movlw	0
 32008  005A30  6FEC               	movwf	_ARRAY_INDEX& (0+255),b
 32009  005A32                     l1504:
 32010                           
 32011                           ; BSR set to: 0
 32012                           ;keyboard.c: 494: }
 32013                           ;keyboard.c: 496: finish_arpeggio_setup();
 32014                           
 32015                           ; BSR set to: 0
 32016  005A32  ECD8  F04C         	call	_finish_arpeggio_setup	;wreg free
 32017                           
 32018                           ;keyboard.c: 497: TMR0ON = 1;
 32019  005A36  8ED5               	bsf	4053,7,c	;volatile
 32020                           
 32021                           ;keyboard.c: 499: return;
 32022  005A38  0012               	return	
 32023  005A3A                     __end_of_playSeventh:
 32024                           	opt stack 0
 32025                           tblptru	equ	0xFF8
 32026                           tblptrh	equ	0xFF7
 32027                           tblptrl	equ	0xFF6
 32028                           tablat	equ	0xFF5
 32029                           prodh	equ	0xFF4
 32030                           prodl	equ	0xFF3
 32031                           intcon	equ	0xFF2
 32032                           intcon2	equ	0xFF1
 32033                           indf0	equ	0xFEF
 32034                           postinc0	equ	0xFEE
 32035                           fsr0h	equ	0xFEA
 32036                           fsr0l	equ	0xFE9
 32037                           wreg	equ	0xFE8
 32038                           postinc1	equ	0xFE6
 32039                           plusw1	equ	0xFE3
 32040                           fsr1h	equ	0xFE2
 32041                           fsr1l	equ	0xFE1
 32042                           indf2	equ	0xFDF
 32043                           postinc2	equ	0xFDE
 32044                           postdec2	equ	0xFDD
 32045                           plusw2	equ	0xFDB
 32046                           fsr2h	equ	0xFDA
 32047                           fsr2l	equ	0xFD9
 32048                           status	equ	0xFD8
 32049                           
 32050 ;; *************** function _noteOn *****************
 32051 ;; Defined at:
 32052 ;;		line 123 in file "midi.c"
 32053 ;; Parameters:    Size  Location     Type
 32054 ;;  channel         1  [STACK] unsigned char 
 32055 ;;  pitch           1  [STACK] unsigned char 
 32056 ;;  velocity        1  [STACK] unsigned char 
 32057 ;; Auto vars:     Size  Location     Type
 32058 ;;		None
 32059 ;; Return value:  Size  Location     Type
 32060 ;;                  1  [STACK] void 
 32061 ;; Registers used:
 32062 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh
 32063 ;; Tracked objects:
 32064 ;;		On entry : 0/0
 32065 ;;		On exit  : 0/0
 32066 ;;		Unchanged: 0/0
 32067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32072 ;;Total ram usage:        0 bytes
 32073 ;; Hardware stack levels used:    1
 32074 ;; Hardware stack levels required when called:    7
 32075 ;; This function calls:
 32076 ;;		_noteOff
 32077 ;;		_sendOut
 32078 ;;		_sendUSB
 32079 ;; This function is called by:
 32080 ;;		_playThisNotePentatonic
 32081 ;;		_playTriad
 32082 ;;		_playSeventh
 32083 ;;		_playThisNote
 32084 ;;		_playThisNote8
 32085 ;;		_playDiatonicTriadMajor
 32086 ;;		_playDiatonicSeventhMajor
 32087 ;;		_playDiatonicTriadMinor
 32088 ;;		_playDiatonicSeventhMinor
 32089 ;;		_playArpeggio
 32090 ;;		_keyboard_all_note
 32091 ;;		_keyboard_eight_note
 32092 ;; This function uses a reentrant model
 32093 ;;
 32094                           
 32095                           	psect	text81
 32096  008C20                     __ptext81:
 32097                           	opt stack 0
 32098  008C20                     _noteOn:
 32099                           	opt stack 6
 32100                           
 32101                           ;midi.c: 125: noteNumber = pitch + semitone + ((octave + 1) * 12);
 32102                           ;stkvar	noteOn@pitch @ sp[(0)+-2]
 32103                           
 32104                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
 32105                           ;incstack = 0
 32106  008C20  0EFE               	movlw	-2
 32107  008C22  CFE3 F049          	movff	plusw1,btemp+11
 32108  008C26  504F               	movf	_octave,w,c
 32109  008C28  0D0C               	mullw	12
 32110  008C2A  50F3               	movf	prodl,w,c
 32111  008C2C  243A               	addwf	_semitone,w,c
 32112  008C2E  2449               	addwf	btemp+11,w,c
 32113  008C30  0F0C               	addlw	12
 32114  008C32  6E3B               	movwf	_noteNumber,c
 32115                           
 32116                           ;midi.c: 126: statusByte = channel | note_on;
 32117                           ;stkvar	noteOn@channel @ sp[(0)+-1]
 32118  008C34  0EFF               	movlw	-1
 32119  008C36  50E3               	movf	plusw1,w,c
 32120  008C38  0990               	iorlw	144
 32121  008C3A  6E3C               	movwf	_statusByte,c
 32122                           
 32123                           ;midi.c: 129: if (velocity == 0) {noteOff(channel, pitch, 0);return;}
 32124                           ;stkvar	noteOn@velocity @ sp[(0)+-3]
 32125  008C3C  0EFD               	movlw	-3
 32126  008C3E  50E3               	movf	plusw1,w,c
 32127  008C40  A4D8               	btfss	status,2,c
 32128  008C42  D00B               	goto	l33012
 32129  008C44  0E00               	movlw	0
 32130  008C46  6EE6               	movwf	postinc1,c
 32131                           
 32132                           ;stkvar	noteOn@pitch @ sp[(-1)+-2]
 32133  008C48  0EFD               	movlw	-3
 32134  008C4A  50E3               	movf	plusw1,w,c
 32135  008C4C  6EE6               	movwf	postinc1,c
 32136                           
 32137                           ;stkvar	noteOn@channel @ sp[(-2)+-1]
 32138  008C4E  0EFD               	movlw	-3
 32139  008C50  50E3               	movf	plusw1,w,c
 32140  008C52  6EE6               	movwf	postinc1,c
 32141  008C54  ECA0  F04A         	call	_noteOff	;wreg free
 32142  008C58  D017               	goto	l484
 32143  008C5A                     l33012:
 32144                           
 32145                           ;midi.c: 132: sendUSB(statusByte, noteNumber, velocity);
 32146                           ;stkvar	noteOn@velocity @ sp[(0)+-3]
 32147  008C5A  0EFD               	movlw	-3
 32148  008C5C  50E3               	movf	plusw1,w,c
 32149  008C5E  6EE6               	movwf	postinc1,c
 32150  008C60  503B               	movf	_noteNumber,w,c
 32151  008C62  6EE6               	movwf	postinc1,c
 32152  008C64  503C               	movf	_statusByte,w,c
 32153  008C66  6EE6               	movwf	postinc1,c
 32154  008C68  EC12  F037         	call	_sendUSB	;wreg free
 32155                           
 32156                           ;midi.c: 135: if(velocity > 0) {
 32157                           ;stkvar	noteOn@velocity @ sp[(0)+-3]
 32158  008C6C  0EFD               	movlw	-3
 32159  008C6E  50E3               	movf	plusw1,w,c
 32160  008C70  B4D8               	btfsc	status,2,c
 32161  008C72  D009               	goto	l33018
 32162                           
 32163                           ;midi.c: 136: sendOut(statusByte, noteNumber, velocity);
 32164                           ;stkvar	noteOn@velocity @ sp[(0)+-3]
 32165  008C74  0EFD               	movlw	-3
 32166  008C76  50E3               	movf	plusw1,w,c
 32167  008C78  6EE6               	movwf	postinc1,c
 32168  008C7A  503B               	movf	_noteNumber,w,c
 32169  008C7C  6EE6               	movwf	postinc1,c
 32170  008C7E  503C               	movf	_statusByte,w,c
 32171  008C80  6EE6               	movwf	postinc1,c
 32172  008C82  EC9B  F036         	call	_sendOut	;wreg free
 32173  008C86                     l33018:
 32174                           
 32175                           ;midi.c: 139: }
 32176                           ;midi.c: 141: note_off_was_sent = 0;
 32177  008C86  9052               	bcf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 32178  008C88                     l484:
 32179                           
 32180                           ; _noteOn: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsiz
      +                          e = 3, vargsize = 0
 32181  008C88  52E5               	movf	postdec1,f,c
 32182  008C8A  52E5               	movf	postdec1,f,c
 32183  008C8C  52E5               	movf	postdec1,f,c
 32184  008C8E  0012               	return		;funcret
 32185  008C90                     __end_of_noteOn:
 32186                           	opt stack 0
 32187                           tblptru	equ	0xFF8
 32188                           tblptrh	equ	0xFF7
 32189                           tblptrl	equ	0xFF6
 32190                           tablat	equ	0xFF5
 32191                           prodh	equ	0xFF4
 32192                           prodl	equ	0xFF3
 32193                           intcon	equ	0xFF2
 32194                           intcon2	equ	0xFF1
 32195                           indf0	equ	0xFEF
 32196                           postinc0	equ	0xFEE
 32197                           fsr0h	equ	0xFEA
 32198                           fsr0l	equ	0xFE9
 32199                           wreg	equ	0xFE8
 32200                           postinc1	equ	0xFE6
 32201                           postdec1	equ	0xFE5
 32202                           plusw1	equ	0xFE3
 32203                           fsr1h	equ	0xFE2
 32204                           fsr1l	equ	0xFE1
 32205                           indf2	equ	0xFDF
 32206                           postinc2	equ	0xFDE
 32207                           postdec2	equ	0xFDD
 32208                           plusw2	equ	0xFDB
 32209                           fsr2h	equ	0xFDA
 32210                           fsr2l	equ	0xFD9
 32211                           status	equ	0xFD8
 32212                           
 32213 ;; *************** function _finish_arpeggio_setup *****************
 32214 ;; Defined at:
 32215 ;;		line 98 in file "arpeggio.c"
 32216 ;; Parameters:    Size  Location     Type
 32217 ;;		None
 32218 ;; Auto vars:     Size  Location     Type
 32219 ;;		None
 32220 ;; Return value:  Size  Location     Type
 32221 ;;                  1    wreg      void 
 32222 ;; Registers used:
 32223 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+10, btemp+11, prodl, prodh, cstack
 32224 ;; Tracked objects:
 32225 ;;		On entry : 0/0
 32226 ;;		On exit  : 0/0
 32227 ;;		Unchanged: 0/0
 32228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32233 ;;Total ram usage:        0 bytes
 32234 ;; Hardware stack levels used:    1
 32235 ;; Hardware stack levels required when called:    9
 32236 ;; This function calls:
 32237 ;;		_resetArpeggio
 32238 ;;		_setupArpeggio
 32239 ;; This function is called by:
 32240 ;;		_playThisNotePentatonic
 32241 ;;		_playTriad
 32242 ;;		_playSeventh
 32243 ;;		_playThisNote
 32244 ;;		_playThisNote8
 32245 ;;		_playDiatonicTriadMajor
 32246 ;;		_playDiatonicSeventhMajor
 32247 ;;		_playDiatonicTriadMinor
 32248 ;;		_playDiatonicSeventhMinor
 32249 ;; This function uses a non-reentrant model
 32250 ;;
 32251                           
 32252                           	psect	text82
 32253  0099B0                     __ptext82:
 32254                           	opt stack 0
 32255  0099B0                     _finish_arpeggio_setup:
 32256                           	opt stack 14
 32257                           
 32258                           ;arpeggio.c: 101: if((ON_OFF == 1) && (RESET_ON_KEY_PRESS == 1)){resetArpeggio();}
 32259                           
 32260                           ;incstack = 0
 32261  0099B0  B206               	btfsc	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32262  0099B2  A804               	btfss	_RESET_ON_KEY_PRESS/(0+8),_RESET_ON_KEY_PRESS& (0+7),c
 32263  0099B4  D002               	goto	l5446
 32264  0099B6  ECE3  F04A         	call	_resetArpeggio	;wreg free
 32265  0099BA                     l5446:
 32266                           
 32267                           ;arpeggio.c: 102: if((ON_OFF == 0) && (RESET_ON_KEY_RELEASE == 1)){resetArpeggio();}
 32268  0099BA  A206               	btfss	_ON_OFF/(0+8),_ON_OFF& (0+7),c
 32269  0099BC  A604               	btfss	_RESET_ON_KEY_RELEASE/(0+8),_RESET_ON_KEY_RELEASE& (0+7),c
 32270  0099BE  D002               	goto	l5447
 32271  0099C0  ECE3  F04A         	call	_resetArpeggio	;wreg free
 32272  0099C4                     l5447:
 32273                           
 32274                           ;arpeggio.c: 105: setupArpeggio();
 32275  0099C4  EC9D  F045         	call	_setupArpeggio	;wreg free
 32276                           
 32277                           ;arpeggio.c: 107: TIMER_OVERFLOWS = 0;
 32278  0099C8  0E00               	movlw	0
 32279  0099CA  6E2D               	movwf	_TIMER_OVERFLOWS,c
 32280  0099CC  0012               	return		;funcret
 32281  0099CE                     __end_of_finish_arpeggio_setup:
 32282                           	opt stack 0
 32283                           tblptru	equ	0xFF8
 32284                           tblptrh	equ	0xFF7
 32285                           tblptrl	equ	0xFF6
 32286                           tablat	equ	0xFF5
 32287                           prodh	equ	0xFF4
 32288                           prodl	equ	0xFF3
 32289                           intcon	equ	0xFF2
 32290                           intcon2	equ	0xFF1
 32291                           indf0	equ	0xFEF
 32292                           postinc0	equ	0xFEE
 32293                           fsr0h	equ	0xFEA
 32294                           fsr0l	equ	0xFE9
 32295                           wreg	equ	0xFE8
 32296                           postinc1	equ	0xFE6
 32297                           postdec1	equ	0xFE5
 32298                           plusw1	equ	0xFE3
 32299                           fsr1h	equ	0xFE2
 32300                           fsr1l	equ	0xFE1
 32301                           indf2	equ	0xFDF
 32302                           postinc2	equ	0xFDE
 32303                           postdec2	equ	0xFDD
 32304                           plusw2	equ	0xFDB
 32305                           fsr2h	equ	0xFDA
 32306                           fsr2l	equ	0xFD9
 32307                           status	equ	0xFD8
 32308                           
 32309 ;; *************** function _setupArpeggio *****************
 32310 ;; Defined at:
 32311 ;;		line 183 in file "arpeggio.c"
 32312 ;; Parameters:    Size  Location     Type
 32313 ;;		None
 32314 ;; Auto vars:     Size  Location     Type
 32315 ;;		None
 32316 ;; Return value:  Size  Location     Type
 32317 ;;                  1    wreg      void 
 32318 ;; Registers used:
 32319 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+10, btemp+11, prodl, prodh, cstack
 32320 ;; Tracked objects:
 32321 ;;		On entry : 0/0
 32322 ;;		On exit  : 0/0
 32323 ;;		Unchanged: 0/0
 32324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32329 ;;Total ram usage:        0 bytes
 32330 ;; Hardware stack levels used:    1
 32331 ;; Hardware stack levels required when called:    8
 32332 ;; This function calls:
 32333 ;;		_copy_array
 32334 ;;		_random_pitches
 32335 ;;		_random_pitches_non_repeating
 32336 ;; This function is called by:
 32337 ;;		_Function_H_4
 32338 ;;		_finish_arpeggio_setup
 32339 ;; This function uses a non-reentrant model
 32340 ;;
 32341                           
 32342                           	psect	text83
 32343  008B3A                     __ptext83:
 32344                           	opt stack 0
 32345  008B3A                     _setupArpeggio:
 32346                           	opt stack 14
 32347                           
 32348                           ;arpeggio.c: 188: if(NUM_NOTES_PRESSED == 0){return;}
 32349                           
 32350                           ;incstack = 0
 32351  008B3A  502E               	movf	_NUM_NOTES_PRESSED,w,c
 32352  008B3C  B4D8               	btfsc	status,2,c
 32353  008B3E  0012               	return	
 32354                           
 32355                           ;arpeggio.c: 191: copy_array();
 32356  008B40  EC59  F048         	call	_copy_array	;wreg free
 32357                           
 32358                           ;arpeggio.c: 194: if(ARPEGGIO_TYPE == RANDOM) {random_pitches();}
 32359  008B44  0E05               	movlw	5
 32360  008B46  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 32361  008B48  B4D8               	btfsc	status,2,c
 32362  008B4A  ECD7  F045         	call	_random_pitches	;wreg free
 32363                           
 32364                           ;arpeggio.c: 195: if(ARPEGGIO_TYPE == RANDOM_NON_REPEATING) {random_pitches_non_repeatin
      +                          g();}
 32365  008B4E  0E04               	movlw	4
 32366  008B50  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 32367  008B52  B4D8               	btfsc	status,2,c
 32368  008B54  ECB4  F03C         	call	_random_pitches_non_repeating	;wreg free
 32369                           
 32370                           ;arpeggio.c: 204: if(ARPEGGIO_TYPE == AS_PRESSED){arpeggioPtr = ARPEGGIO;}
 32371  008B58  0E06               	movlw	6
 32372  008B5A  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 32373  008B5C  A4D8               	btfss	status,2,c
 32374  008B5E  D004               	goto	l5480
 32375  008B60  0E84               	movlw	low _ARPEGGIO
 32376  008B62  6E2A               	movwf	_arpeggioPtr,c
 32377  008B64  0E01               	movlw	high _ARPEGGIO
 32378  008B66  6E2B               	movwf	_arpeggioPtr+1,c
 32379  008B68                     l5480:
 32380                           
 32381                           ;arpeggio.c: 205: if(ARPEGGIO_TYPE == UP | ARPEGGIO_TYPE == UP_DOWN){arpeggioPtr = ARPEG
      +                          GIO_SORTED;}
 32382  008B68  5034               	movf	_ARPEGGIO_TYPE,w,c
 32383  008B6A  B4D8               	btfsc	status,2,c
 32384  008B6C  D004               	goto	u45340
 32385  008B6E  0E02               	movlw	2
 32386  008B70  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 32387  008B72  A4D8               	btfss	status,2,c
 32388  008B74  D004               	goto	l5481
 32389  008B76                     u45340:
 32390  008B76  0E78               	movlw	low _ARPEGGIO_SORTED
 32391  008B78  6E2A               	movwf	_arpeggioPtr,c
 32392  008B7A  0E02               	movlw	high _ARPEGGIO_SORTED
 32393  008B7C  6E2B               	movwf	_arpeggioPtr+1,c
 32394  008B7E                     l5481:
 32395                           
 32396                           ;arpeggio.c: 206: if(ARPEGGIO_TYPE == DOWN | ARPEGGIO_TYPE == DOWN_UP){arpeggioPtr = ARP
      +                          EGGIO_SORTED;}
 32397  008B7E  0434               	decf	_ARPEGGIO_TYPE,w,c
 32398  008B80  B4D8               	btfsc	status,2,c
 32399  008B82  D004               	goto	u45360
 32400  008B84  0E03               	movlw	3
 32401  008B86  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 32402  008B88  A4D8               	btfss	status,2,c
 32403  008B8A  D004               	goto	l5484
 32404  008B8C                     u45360:
 32405  008B8C  0E78               	movlw	low _ARPEGGIO_SORTED
 32406  008B8E  6E2A               	movwf	_arpeggioPtr,c
 32407  008B90  0E02               	movlw	high _ARPEGGIO_SORTED
 32408  008B92  6E2B               	movwf	_arpeggioPtr+1,c
 32409  008B94                     l5484:
 32410                           
 32411                           ;arpeggio.c: 207: if(ARPEGGIO_TYPE == RANDOM | ARPEGGIO_TYPE == RANDOM_NON_REPEATING){ar
      +                          peggioPtr = ARPEGGIO_RANDOM;}
 32412  008B94  0E05               	movlw	5
 32413  008B96  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 32414  008B98  B4D8               	btfsc	status,2,c
 32415  008B9A  D004               	goto	u45380
 32416  008B9C  0E04               	movlw	4
 32417  008B9E  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 32418  008BA0  A4D8               	btfss	status,2,c
 32419  008BA2  0012               	return	
 32420  008BA4                     u45380:
 32421  008BA4  0E68               	movlw	low _ARPEGGIO_RANDOM
 32422  008BA6  6E2A               	movwf	_arpeggioPtr,c
 32423  008BA8  0E02               	movlw	high _ARPEGGIO_RANDOM
 32424  008BAA  6E2B               	movwf	_arpeggioPtr+1,c
 32425  008BAC  0012               	return	
 32426  008BAE                     __end_of_setupArpeggio:
 32427                           	opt stack 0
 32428                           tblptru	equ	0xFF8
 32429                           tblptrh	equ	0xFF7
 32430                           tblptrl	equ	0xFF6
 32431                           tablat	equ	0xFF5
 32432                           prodh	equ	0xFF4
 32433                           prodl	equ	0xFF3
 32434                           intcon	equ	0xFF2
 32435                           intcon2	equ	0xFF1
 32436                           indf0	equ	0xFEF
 32437                           postinc0	equ	0xFEE
 32438                           fsr0h	equ	0xFEA
 32439                           fsr0l	equ	0xFE9
 32440                           wreg	equ	0xFE8
 32441                           postinc1	equ	0xFE6
 32442                           postdec1	equ	0xFE5
 32443                           plusw1	equ	0xFE3
 32444                           fsr1h	equ	0xFE2
 32445                           fsr1l	equ	0xFE1
 32446                           indf2	equ	0xFDF
 32447                           postinc2	equ	0xFDE
 32448                           postdec2	equ	0xFDD
 32449                           plusw2	equ	0xFDB
 32450                           fsr2h	equ	0xFDA
 32451                           fsr2l	equ	0xFD9
 32452                           status	equ	0xFD8
 32453                           
 32454 ;; *************** function _random_pitches_non_repeating *****************
 32455 ;; Defined at:
 32456 ;;		line 265 in file "arpeggio.c"
 32457 ;; Parameters:    Size  Location     Type
 32458 ;;		None
 32459 ;; Auto vars:     Size  Location     Type
 32460 ;;  randomIndex     1  [STACK] unsigned char 
 32461 ;;  temp            1  [STACK] unsigned char 
 32462 ;;  i               1  [STACK] unsigned char 
 32463 ;; Return value:  Size  Location     Type
 32464 ;;                  1  [STACK] void 
 32465 ;; Registers used:
 32466 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+10, btemp+11, prodl
 32467 ;; Tracked objects:
 32468 ;;		On entry : 0/0
 32469 ;;		On exit  : 0/0
 32470 ;;		Unchanged: 0/0
 32471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32476 ;;Total ram usage:        0 bytes
 32477 ;; Hardware stack levels used:    1
 32478 ;; Hardware stack levels required when called:    7
 32479 ;; This function calls:
 32480 ;;		___awmod
 32481 ;;		_rand
 32482 ;; This function is called by:
 32483 ;;		_processOctave
 32484 ;;		_setupArpeggio
 32485 ;;		_playArpeggio
 32486 ;; This function uses a reentrant model
 32487 ;;
 32488                           
 32489                           	psect	text84
 32490  007968                     __ptext84:
 32491                           	opt stack 0
 32492  007968                     _random_pitches_non_repeating:
 32493                           	opt stack 0
 32494                           
 32495                           ; autosize = 3, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
 32496  007968  52E6               	movf	postinc1,f,c
 32497  00796A  52E6               	movf	postinc1,f,c
 32498  00796C  52E6               	movf	postinc1,f,c
 32499                           
 32500                           ;arpeggio.c: 267: if(NUM_NOTES_PRESSED == 0){return;}
 32501                           
 32502                           ;incstack = 0
 32503  00796E  502E               	movf	_NUM_NOTES_PRESSED,w,c
 32504  007970  B4D8               	btfsc	status,2,c
 32505  007972  D04D               	goto	u59830
 32506                           
 32507                           ;arpeggio.c: 269: for(unsigned char i = 0; i < NUM_NOTES_PRESSED; i++) {
 32508                           ;stkvar	random_pitches_non_repeating@i @ sp[(-3)+2]
 32509  007974  0EFF               	movlw	-1
 32510  007976  6AE3               	clrf	plusw1,c
 32511  007978  D043               	goto	l33050
 32512  00797A                     l33040:
 32513                           
 32514                           ;arpeggio.c: 270: unsigned char temp = ARPEGGIO_RANDOM[i];
 32515                           ;stkvar	random_pitches_non_repeating@i @ sp[(-3)+2]
 32516  00797A  0EFF               	movlw	-1
 32517  00797C  50E3               	movf	plusw1,w,c
 32518  00797E  6E3F               	movwf	btemp+1,c
 32519  007980  6A40               	clrf	btemp+2,c
 32520  007982  0E68               	movlw	low _ARPEGGIO_RANDOM
 32521  007984  243F               	addwf	btemp+1,w,c
 32522  007986  6ED9               	movwf	fsr2l,c
 32523  007988  0E02               	movlw	high _ARPEGGIO_RANDOM
 32524  00798A  2040               	addwfc	btemp+2,w,c
 32525  00798C  6EDA               	movwf	fsr2h,c
 32526  00798E  50DF               	movf	indf2,w,c
 32527  007990  6E49               	movwf	btemp+11,c
 32528                           
 32529                           ;stkvar	random_pitches_non_repeating@temp @ sp[(-3)+1]
 32530  007992  0EFE               	movlw	-2
 32531  007994  C049  FFE3         	movff	btemp+11,plusw1
 32532                           
 32533                           ;arpeggio.c: 271: unsigned char randomIndex = rand() % NUM_NOTES_PRESSED;
 32534  007998  502E               	movf	_NUM_NOTES_PRESSED,w,c
 32535  00799A  6EE6               	movwf	postinc1,c
 32536  00799C  0E00               	movlw	0
 32537  00799E  6EE6               	movwf	postinc1,c
 32538  0079A0  EC32  F042         	call	_rand	;wreg free
 32539  0079A4  C03E  FFE6         	movff	btemp,postinc1
 32540  0079A8  C03F  FFE6         	movff	btemp+1,postinc1
 32541  0079AC  ECA8  F034         	call	___awmod	;wreg free
 32542                           
 32543                           ;stkvar	random_pitches_non_repeating@randomIndex @ sp[(-3)+0]
 32544  0079B0  0EFD               	movlw	-3
 32545  0079B2  C03E  FFE3         	movff	btemp,plusw1
 32546                           
 32547                           ;arpeggio.c: 272: ARPEGGIO_RANDOM[i] = ARPEGGIO_RANDOM[randomIndex];
 32548                           ;stkvar	random_pitches_non_repeating@randomIndex @ sp[(-3)+0]
 32549  0079B6  0EFD               	movlw	-3
 32550  0079B8  50E3               	movf	plusw1,w,c
 32551  0079BA  6E3F               	movwf	btemp+1,c
 32552  0079BC  6A40               	clrf	btemp+2,c
 32553  0079BE  0E68               	movlw	low _ARPEGGIO_RANDOM
 32554  0079C0  243F               	addwf	btemp+1,w,c
 32555  0079C2  6ED9               	movwf	fsr2l,c
 32556  0079C4  0E02               	movlw	high _ARPEGGIO_RANDOM
 32557  0079C6  2040               	addwfc	btemp+2,w,c
 32558  0079C8  6EDA               	movwf	fsr2h,c
 32559                           
 32560                           ;stkvar	random_pitches_non_repeating@i @ sp[(-3)+2]
 32561  0079CA  0EFF               	movlw	-1
 32562  0079CC  50E3               	movf	plusw1,w,c
 32563  0079CE  6E3F               	movwf	btemp+1,c
 32564  0079D0  6A40               	clrf	btemp+2,c
 32565  0079D2  0E68               	movlw	low _ARPEGGIO_RANDOM
 32566  0079D4  243F               	addwf	btemp+1,w,c
 32567  0079D6  6EE9               	movwf	fsr0l,c
 32568  0079D8  0E02               	movlw	high _ARPEGGIO_RANDOM
 32569  0079DA  2040               	addwfc	btemp+2,w,c
 32570  0079DC  6EEA               	movwf	fsr0h,c
 32571  0079DE  CFDF FFEF          	movff	indf2,indf0
 32572                           
 32573                           ;arpeggio.c: 273: ARPEGGIO_RANDOM[randomIndex] = temp;
 32574                           ;stkvar	random_pitches_non_repeating@temp @ sp[(-3)+1]
 32575                           ;stkvar	random_pitches_non_repeating@randomIndex @ sp[(-3)+0]
 32576  0079E2  0EFD               	movlw	-3
 32577  0079E4  50E3               	movf	plusw1,w,c
 32578  0079E6  6E3F               	movwf	btemp+1,c
 32579  0079E8  6A40               	clrf	btemp+2,c
 32580  0079EA  0E68               	movlw	low _ARPEGGIO_RANDOM
 32581  0079EC  243F               	addwf	btemp+1,w,c
 32582  0079EE  6ED9               	movwf	fsr2l,c
 32583  0079F0  0E02               	movlw	high _ARPEGGIO_RANDOM
 32584  0079F2  2040               	addwfc	btemp+2,w,c
 32585  0079F4  6EDA               	movwf	fsr2h,c
 32586  0079F6  0EFE               	movlw	-2
 32587  0079F8  CFE3 FFDF          	movff	plusw1,indf2
 32588                           
 32589                           ;stkvar	random_pitches_non_repeating@i @ sp[(-3)+2]
 32590  0079FC  0EFF               	movlw	-1
 32591  0079FE  2AE3               	incf	plusw1,f,c
 32592  007A00                     l33050:
 32593                           
 32594                           ;stkvar	random_pitches_non_repeating@i @ sp[(-3)+2]
 32595  007A00  0EFF               	movlw	-1
 32596  007A02  CFE3 F03E          	movff	plusw1,btemp
 32597  007A06  502E               	movf	_NUM_NOTES_PRESSED,w,c
 32598  007A08  5C3E               	subwf	btemp,w,c
 32599  007A0A  A0D8               	btfss	status,0,c
 32600  007A0C  D7B6               	goto	l33040
 32601  007A0E                     u59830:
 32602                           
 32603                           ; _random_pitches_non_repeating: autosize = 3, savesize = 0, parsavesize = 0, tempsize =
      +                           0 parsize = 0, argsize = 0, vargsize = 0
 32604  007A0E  52E5               	movf	postdec1,f,c
 32605  007A10  52E5               	movf	postdec1,f,c
 32606  007A12  52E5               	movf	postdec1,f,c
 32607  007A14  0012               	return		;funcret
 32608  007A16                     __end_of_random_pitches_non_repeating:
 32609                           	opt stack 0
 32610                           tblptru	equ	0xFF8
 32611                           tblptrh	equ	0xFF7
 32612                           tblptrl	equ	0xFF6
 32613                           tablat	equ	0xFF5
 32614                           prodh	equ	0xFF4
 32615                           prodl	equ	0xFF3
 32616                           intcon	equ	0xFF2
 32617                           intcon2	equ	0xFF1
 32618                           indf0	equ	0xFEF
 32619                           postinc0	equ	0xFEE
 32620                           fsr0h	equ	0xFEA
 32621                           fsr0l	equ	0xFE9
 32622                           wreg	equ	0xFE8
 32623                           postinc1	equ	0xFE6
 32624                           postdec1	equ	0xFE5
 32625                           plusw1	equ	0xFE3
 32626                           fsr1h	equ	0xFE2
 32627                           fsr1l	equ	0xFE1
 32628                           indf2	equ	0xFDF
 32629                           postinc2	equ	0xFDE
 32630                           postdec2	equ	0xFDD
 32631                           plusw2	equ	0xFDB
 32632                           fsr2h	equ	0xFDA
 32633                           fsr2l	equ	0xFD9
 32634                           status	equ	0xFD8
 32635                           
 32636 ;; *************** function _random_pitches *****************
 32637 ;; Defined at:
 32638 ;;		line 254 in file "arpeggio.c"
 32639 ;; Parameters:    Size  Location     Type
 32640 ;;		None
 32641 ;; Auto vars:     Size  Location     Type
 32642 ;;  random_array    1  [STACK] unsigned char 
 32643 ;;  i               1  [STACK] unsigned char 
 32644 ;; Return value:  Size  Location     Type
 32645 ;;                  1  [STACK] void 
 32646 ;; Registers used:
 32647 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+10, btemp+11, prodl
 32648 ;; Tracked objects:
 32649 ;;		On entry : 0/0
 32650 ;;		On exit  : 0/0
 32651 ;;		Unchanged: 0/0
 32652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32656 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32657 ;;Total ram usage:        0 bytes
 32658 ;; Hardware stack levels used:    1
 32659 ;; Hardware stack levels required when called:    7
 32660 ;; This function calls:
 32661 ;;		___awmod
 32662 ;;		_rand
 32663 ;; This function is called by:
 32664 ;;		_processOctave
 32665 ;;		_setupArpeggio
 32666 ;;		_playArpeggio
 32667 ;; This function uses a reentrant model
 32668 ;;
 32669                           
 32670                           	psect	text85
 32671  008BAE                     __ptext85:
 32672                           	opt stack 0
 32673  008BAE                     _random_pitches:
 32674                           	opt stack 0
 32675                           
 32676                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
 32677  008BAE  52E6               	movf	postinc1,f,c
 32678  008BB0  52E6               	movf	postinc1,f,c
 32679                           
 32680                           ;arpeggio.c: 256: if(NUM_NOTES_PRESSED == 0){return;}
 32681                           
 32682                           ;incstack = 0
 32683  008BB2  502E               	movf	_NUM_NOTES_PRESSED,w,c
 32684  008BB4  B4D8               	btfsc	status,2,c
 32685  008BB6  D031               	goto	u59810
 32686                           
 32687                           ;arpeggio.c: 258: for (unsigned char i = 0; i < NUM_NOTES_PRESSED; i++){
 32688                           ;stkvar	random_pitches@i @ sp[(-2)+1]
 32689  008BB8  0EFF               	movlw	-1
 32690  008BBA  6AE3               	clrf	plusw1,c
 32691  008BBC  D027               	goto	l33032
 32692  008BBE                     l33026:
 32693                           
 32694                           ;arpeggio.c: 259: unsigned char random_array_index = rand() % (NUM_NOTES_PRESSED);
 32695  008BBE  502E               	movf	_NUM_NOTES_PRESSED,w,c
 32696  008BC0  6EE6               	movwf	postinc1,c
 32697  008BC2  0E00               	movlw	0
 32698  008BC4  6EE6               	movwf	postinc1,c
 32699  008BC6  EC32  F042         	call	_rand	;wreg free
 32700  008BCA  C03E  FFE6         	movff	btemp,postinc1
 32701  008BCE  C03F  FFE6         	movff	btemp+1,postinc1
 32702  008BD2  ECA8  F034         	call	___awmod	;wreg free
 32703                           
 32704                           ;stkvar	random_pitches@random_array_index @ sp[(-2)+0]
 32705  008BD6  0EFE               	movlw	-2
 32706  008BD8  C03E  FFE3         	movff	btemp,plusw1
 32707                           
 32708                           ;arpeggio.c: 260: ARPEGGIO_RANDOM[i] = ARPEGGIO[random_array_index];
 32709                           ;stkvar	random_pitches@random_array_index @ sp[(-2)+0]
 32710  008BDC  0EFE               	movlw	-2
 32711  008BDE  50E3               	movf	plusw1,w,c
 32712  008BE0  6E3F               	movwf	btemp+1,c
 32713  008BE2  6A40               	clrf	btemp+2,c
 32714  008BE4  0E84               	movlw	low _ARPEGGIO
 32715  008BE6  243F               	addwf	btemp+1,w,c
 32716  008BE8  6ED9               	movwf	fsr2l,c
 32717  008BEA  0E01               	movlw	high _ARPEGGIO
 32718  008BEC  2040               	addwfc	btemp+2,w,c
 32719  008BEE  6EDA               	movwf	fsr2h,c
 32720                           
 32721                           ;stkvar	random_pitches@i @ sp[(-2)+1]
 32722  008BF0  0EFF               	movlw	-1
 32723  008BF2  50E3               	movf	plusw1,w,c
 32724  008BF4  6E3F               	movwf	btemp+1,c
 32725  008BF6  6A40               	clrf	btemp+2,c
 32726  008BF8  0E68               	movlw	low _ARPEGGIO_RANDOM
 32727  008BFA  243F               	addwf	btemp+1,w,c
 32728  008BFC  6EE9               	movwf	fsr0l,c
 32729  008BFE  0E02               	movlw	high _ARPEGGIO_RANDOM
 32730  008C00  2040               	addwfc	btemp+2,w,c
 32731  008C02  6EEA               	movwf	fsr0h,c
 32732  008C04  CFDF FFEF          	movff	indf2,indf0
 32733                           
 32734                           ;stkvar	random_pitches@i @ sp[(-2)+1]
 32735  008C08  0EFF               	movlw	-1
 32736  008C0A  2AE3               	incf	plusw1,f,c
 32737  008C0C                     l33032:
 32738                           
 32739                           ;stkvar	random_pitches@i @ sp[(-2)+1]
 32740  008C0C  0EFF               	movlw	-1
 32741  008C0E  CFE3 F03E          	movff	plusw1,btemp
 32742  008C12  502E               	movf	_NUM_NOTES_PRESSED,w,c
 32743  008C14  5C3E               	subwf	btemp,w,c
 32744  008C16  A0D8               	btfss	status,0,c
 32745  008C18  D7D2               	goto	l33026
 32746  008C1A                     u59810:
 32747                           
 32748                           ; _random_pitches: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0
      +                          , argsize = 0, vargsize = 0
 32749  008C1A  52E5               	movf	postdec1,f,c
 32750  008C1C  52E5               	movf	postdec1,f,c
 32751  008C1E  0012               	return		;funcret
 32752  008C20                     __end_of_random_pitches:
 32753                           	opt stack 0
 32754                           tblptru	equ	0xFF8
 32755                           tblptrh	equ	0xFF7
 32756                           tblptrl	equ	0xFF6
 32757                           tablat	equ	0xFF5
 32758                           prodh	equ	0xFF4
 32759                           prodl	equ	0xFF3
 32760                           intcon	equ	0xFF2
 32761                           intcon2	equ	0xFF1
 32762                           indf0	equ	0xFEF
 32763                           postinc0	equ	0xFEE
 32764                           fsr0h	equ	0xFEA
 32765                           fsr0l	equ	0xFE9
 32766                           wreg	equ	0xFE8
 32767                           postinc1	equ	0xFE6
 32768                           postdec1	equ	0xFE5
 32769                           plusw1	equ	0xFE3
 32770                           fsr1h	equ	0xFE2
 32771                           fsr1l	equ	0xFE1
 32772                           indf2	equ	0xFDF
 32773                           postinc2	equ	0xFDE
 32774                           postdec2	equ	0xFDD
 32775                           plusw2	equ	0xFDB
 32776                           fsr2h	equ	0xFDA
 32777                           fsr2l	equ	0xFD9
 32778                           status	equ	0xFD8
 32779                           
 32780 ;; *************** function _rand *****************
 32781 ;; Defined at:
 32782 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
 32783 ;; Parameters:    Size  Location     Type
 32784 ;;		None
 32785 ;; Auto vars:     Size  Location     Type
 32786 ;;		None
 32787 ;; Return value:  Size  Location     Type
 32788 ;;                  2  [STACK] int 
 32789 ;; Registers used:
 32790 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+
      +10, btemp+11
 32791 ;; Tracked objects:
 32792 ;;		On entry : 0/0
 32793 ;;		On exit  : 0/0
 32794 ;;		Unchanged: 0/0
 32795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32799 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32800 ;;Total ram usage:        0 bytes
 32801 ;; Hardware stack levels used:    1
 32802 ;; Hardware stack levels required when called:    6
 32803 ;; This function calls:
 32804 ;;		___lmul
 32805 ;; This function is called by:
 32806 ;;		_random_pitches
 32807 ;;		_random_pitches_non_repeating
 32808 ;;		_playArpeggio
 32809 ;; This function uses a reentrant model
 32810 ;;
 32811                           
 32812                           	psect	text86
 32813  008464                     __ptext86:
 32814                           	opt stack 0
 32815  008464                     _rand:
 32816                           	opt stack 6
 32817                           
 32818                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize = 0 var
      +                          gsize = 0, retsize = 0
 32819                           ;incstack = 0
 32820  008464  0E6D               	movlw	109
 32821  008466  6EE6               	movwf	postinc1,c
 32822  008468  0E4E               	movlw	78
 32823  00846A  6EE6               	movwf	postinc1,c
 32824  00846C  0EC6               	movlw	198
 32825  00846E  6EE6               	movwf	postinc1,c
 32826  008470  0E41               	movlw	65
 32827  008472  6EE6               	movwf	postinc1,c
 32828  008474  C1F2  FFE6         	movff	_randx,postinc1
 32829  008478  C1F3  FFE6         	movff	_randx+1,postinc1
 32830  00847C  C1F4  FFE6         	movff	_randx+2,postinc1
 32831  008480  C1F5  FFE6         	movff	_randx+3,postinc1
 32832  008484  ECDF  F03A         	call	___lmul	;wreg free
 32833  008488  C03E  F1F2         	movff	btemp,_randx
 32834  00848C  C03F  F1F3         	movff	btemp+1,_randx+1
 32835  008490  C040  F1F4         	movff	btemp+2,_randx+2
 32836  008494  C041  F1F5         	movff	btemp+3,_randx+3
 32837  008498  0E39               	movlw	57
 32838  00849A  0101               	movlb	1	; () banked
 32839  00849C  27F2               	addwf	_randx& (0+255),f,b
 32840  00849E  0E30               	movlw	48
 32841  0084A0  23F3               	addwfc	(_randx+1)& (0+255),f,b
 32842  0084A2  0E00               	movlw	0
 32843  0084A4  23F4               	addwfc	(_randx+2)& (0+255),f,b
 32844  0084A6  0E00               	movlw	0
 32845  0084A8  23F5               	addwfc	(_randx+3)& (0+255),f,b
 32846                           
 32847                           ; BSR set to: 1
 32848  0084AA  0E10               	movlw	16
 32849  0084AC  6E49               	movwf	btemp+11,c
 32850  0084AE  C1F2  F042         	movff	_randx,btemp+4
 32851  0084B2  C1F3  F043         	movff	_randx+1,btemp+5
 32852  0084B6  C1F4  F044         	movff	_randx+2,btemp+6
 32853  0084BA  C1F5  F045         	movff	_randx+3,btemp+7
 32854  0084BE                     u59635:
 32855  0084BE  6649               	tstfsz	btemp+11,c
 32856  0084C0  D001               	goto	u59636
 32857  0084C2  D007               	goto	u59637
 32858  0084C4                     u59636:
 32859  0084C4  3445               	rlcf	btemp+7,w,c
 32860  0084C6  3245               	rrcf	btemp+7,f,c
 32861  0084C8  3244               	rrcf	btemp+6,f,c
 32862  0084CA  3243               	rrcf	btemp+5,f,c
 32863  0084CC  3242               	rrcf	btemp+4,f,c
 32864  0084CE  2E49               	decfsz	btemp+11,f,c
 32865  0084D0  D7F6               	goto	u59635
 32866  0084D2                     u59637:
 32867  0084D2  C042  F03E         	movff	btemp+4,btemp
 32868  0084D6  C043  F03F         	movff	btemp+5,btemp+1
 32869  0084DA  0EFF               	movlw	255
 32870  0084DC  6E48               	movwf	btemp+10,c
 32871  0084DE  0E7F               	movlw	127
 32872  0084E0  6E49               	movwf	btemp+11,c
 32873  0084E2  5048               	movf	btemp+10,w,c
 32874  0084E4  163E               	andwf	btemp,f,c
 32875  0084E6  5049               	movf	btemp+11,w,c
 32876  0084E8  163F               	andwf	btemp+1,f,c
 32877                           
 32878                           ; _rand: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 0, argsize 
      +                          = 0, vargsize = 0
 32879  0084EA  0012               	return		;funcret
 32880  0084EC                     __end_of_rand:
 32881                           	opt stack 0
 32882                           tblptru	equ	0xFF8
 32883                           tblptrh	equ	0xFF7
 32884                           tblptrl	equ	0xFF6
 32885                           tablat	equ	0xFF5
 32886                           prodh	equ	0xFF4
 32887                           prodl	equ	0xFF3
 32888                           intcon	equ	0xFF2
 32889                           intcon2	equ	0xFF1
 32890                           indf0	equ	0xFEF
 32891                           postinc0	equ	0xFEE
 32892                           fsr0h	equ	0xFEA
 32893                           fsr0l	equ	0xFE9
 32894                           wreg	equ	0xFE8
 32895                           postinc1	equ	0xFE6
 32896                           postdec1	equ	0xFE5
 32897                           plusw1	equ	0xFE3
 32898                           fsr1h	equ	0xFE2
 32899                           fsr1l	equ	0xFE1
 32900                           indf2	equ	0xFDF
 32901                           postinc2	equ	0xFDE
 32902                           postdec2	equ	0xFDD
 32903                           plusw2	equ	0xFDB
 32904                           fsr2h	equ	0xFDA
 32905                           fsr2l	equ	0xFD9
 32906                           status	equ	0xFD8
 32907                           
 32908 ;; *************** function ___awmod *****************
 32909 ;; Defined at:
 32910 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 32911 ;; Parameters:    Size  Location     Type
 32912 ;;  dividend        2  [STACK] int 
 32913 ;;  divisor         2  [STACK] int 
 32914 ;; Auto vars:     Size  Location     Type
 32915 ;;  sign            1  [STACK] unsigned char 
 32916 ;;  counter         1  [STACK] unsigned char 
 32917 ;; Return value:  Size  Location     Type
 32918 ;;                  2  [STACK] int 
 32919 ;; Registers used:
 32920 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, prodl
 32921 ;; Tracked objects:
 32922 ;;		On entry : 0/1
 32923 ;;		On exit  : 0/0
 32924 ;;		Unchanged: 0/0
 32925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 32926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 32930 ;;Total ram usage:        0 bytes
 32931 ;; Hardware stack levels used:    1
 32932 ;; Hardware stack levels required when called:    5
 32933 ;; This function calls:
 32934 ;;		Nothing
 32935 ;; This function is called by:
 32936 ;;		_processOctave
 32937 ;;		_displayDigits
 32938 ;;		_int2string
 32939 ;;		_random_pitches
 32940 ;;		_random_pitches_non_repeating
 32941 ;;		_playArpeggio
 32942 ;; This function uses a reentrant model
 32943 ;;
 32944                           
 32945                           	psect	text87
 32946  006950                     __ptext87:
 32947                           	opt stack 0
 32948  006950                     ___awmod:
 32949                           	opt stack 0
 32950                           
 32951                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsize = 4 var
      +                          gsize = 0, retsize = 0
 32952  006950  52E6               	movf	postinc1,f,c
 32953  006952  52E6               	movf	postinc1,f,c
 32954                           
 32955                           ;stkvar	___awmod@sign @ sp[(-2)+0]
 32956                           
 32957                           ;incstack = 0
 32958  006954  0EFE               	movlw	-2
 32959  006956  6AE3               	clrf	plusw1,c
 32960                           
 32961                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 32962  006958  0EFD               	movlw	-3
 32963  00695A  AEE3               	btfss	plusw1,7,c
 32964  00695C  D009               	goto	l32962
 32965                           
 32966                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 32967                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 32968  00695E  0EFC               	movlw	-4
 32969  006960  6CE3               	negf	plusw1,c
 32970  006962  0EFD               	movlw	-3
 32971  006964  1EE3               	comf	plusw1,f,c
 32972  006966  B0D8               	btfsc	status,0,c
 32973  006968  2AE3               	incf	plusw1,f,c
 32974                           
 32975                           ;stkvar	___awmod@sign @ sp[(-2)+0]
 32976  00696A  0EFE               	movlw	-2
 32977  00696C  6AE3               	clrf	plusw1,c
 32978  00696E  2AE3               	incf	plusw1,f,c
 32979  006970                     l32962:
 32980                           
 32981                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32982  006970  0EFB               	movlw	-5
 32983  006972  AEE3               	btfss	plusw1,7,c
 32984  006974  D006               	goto	l32966
 32985                           
 32986                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32987                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32988  006976  0EFA               	movlw	-6
 32989  006978  6CE3               	negf	plusw1,c
 32990  00697A  0EFB               	movlw	-5
 32991  00697C  1EE3               	comf	plusw1,f,c
 32992  00697E  B0D8               	btfsc	status,0,c
 32993  006980  2AE3               	incf	plusw1,f,c
 32994  006982                     l32966:
 32995                           
 32996                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 32997  006982  0EFA               	movlw	-6
 32998  006984  CFE3 F03E          	movff	plusw1,btemp
 32999  006988  0EFB               	movlw	-5
 33000  00698A  50E3               	movf	plusw1,w,c
 33001  00698C  103E               	iorwf	btemp,w,c
 33002  00698E  B4D8               	btfsc	status,2,c
 33003  006990  D04A               	goto	u59760
 33004                           
 33005                           ;stkvar	___awmod@counter @ sp[(-2)+1]
 33006  006992  0EFF               	movlw	-1
 33007  006994  6AE3               	clrf	plusw1,c
 33008  006996  D010               	goto	L19
 33009  006998                     l32970:
 33010                           
 33011                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 33012  006998  0EFA               	movlw	-6
 33013  00699A  50E3               	movf	plusw1,w,c
 33014  00699C  90D8               	bcf	status,0,c
 33015  00699E  34E8               	rlcf	wreg,w,c
 33016  0069A0  6E3E               	movwf	btemp,c
 33017  0069A2  0EFA               	movlw	-6
 33018  0069A4  C03E  FFE3         	movff	btemp,plusw1
 33019  0069A8  0EFB               	movlw	-5
 33020  0069AA  50E3               	movf	plusw1,w,c
 33021  0069AC  34E8               	rlcf	wreg,w,c
 33022  0069AE  6E3E               	movwf	btemp,c
 33023  0069B0  0EFB               	movlw	-5
 33024  0069B2  C03E  FFE3         	movff	btemp,plusw1
 33025                           
 33026                           ;stkvar	___awmod@counter @ sp[(-2)+1]
 33027  0069B6  0EFF               	movlw	-1
 33028  0069B8                     L19:
 33029  0069B8  2AE3               	incf	plusw1,f,c
 33030                           
 33031                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 33032  0069BA  0EFB               	movlw	-5
 33033  0069BC  AEE3               	btfss	plusw1,7,c
 33034  0069BE  D7EC               	goto	l32970
 33035  0069C0                     u59740:
 33036                           
 33037                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 33038  0069C0  0EFA               	movlw	-6
 33039  0069C2  CFE3 F03F          	movff	plusw1,btemp+1
 33040  0069C6  0EFB               	movlw	-5
 33041  0069C8  CFE3 F040          	movff	plusw1,btemp+2
 33042                           
 33043                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 33044  0069CC  0EFC               	movlw	-4
 33045  0069CE  CFE3 F048          	movff	plusw1,btemp+10
 33046  0069D2  0EFD               	movlw	-3
 33047  0069D4  CFE3 F049          	movff	plusw1,btemp+11
 33048  0069D8  503F               	movf	btemp+1,w,c
 33049  0069DA  5C48               	subwf	btemp+10,w,c
 33050  0069DC  5040               	movf	btemp+2,w,c
 33051  0069DE  5849               	subwfb	btemp+11,w,c
 33052  0069E0  A0D8               	btfss	status,0,c
 33053  0069E2  D012               	goto	l32980
 33054                           
 33055                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 33056                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 33057  0069E4  0EFC               	movlw	-4
 33058  0069E6  50E3               	movf	plusw1,w,c
 33059  0069E8  6E3E               	movwf	btemp,c
 33060  0069EA  0EFA               	movlw	-6
 33061  0069EC  50E3               	movf	plusw1,w,c
 33062  0069EE  5E3E               	subwf	btemp,f,c
 33063  0069F0  0EFC               	movlw	-4
 33064  0069F2  C03E  FFE3         	movff	btemp,plusw1
 33065  0069F6  0EFD               	movlw	-3
 33066  0069F8  50E3               	movf	plusw1,w,c
 33067  0069FA  6E3E               	movwf	btemp,c
 33068  0069FC  0EFB               	movlw	-5
 33069  0069FE  50E3               	movf	plusw1,w,c
 33070  006A00  5A3E               	subwfb	btemp,f,c
 33071  006A02  0EFD               	movlw	-3
 33072  006A04  C03E  FFE3         	movff	btemp,plusw1
 33073  006A08                     l32980:
 33074                           
 33075                           ;stkvar	___awmod@divisor @ sp[(-2)+-4]
 33076  006A08  90D8               	bcf	status,0,c
 33077  006A0A  0EFB               	movlw	-5
 33078  006A0C  32E3               	rrcf	plusw1,f,c
 33079  006A0E  0EFA               	movlw	-6
 33080  006A10  32E3               	rrcf	plusw1,f,c
 33081                           
 33082                           ;stkvar	___awmod@counter @ sp[(-2)+1]
 33083  006A12  0EFF               	movlw	-1
 33084  006A14  50E3               	movf	plusw1,w,c
 33085  006A16  6E3E               	movwf	btemp,c
 33086  006A18  0E01               	movlw	1
 33087  006A1A  5E3E               	subwf	btemp,f,c
 33088  006A1C  0EFF               	movlw	-1
 33089  006A1E  C03E  FFE3         	movff	btemp,plusw1
 33090  006A22  A4D8               	btfss	status,2,c
 33091  006A24  D7CD               	goto	u59740
 33092  006A26                     u59760:
 33093                           
 33094                           ;stkvar	___awmod@sign @ sp[(-2)+0]
 33095  006A26  0EFE               	movlw	-2
 33096  006A28  50E3               	movf	plusw1,w,c
 33097  006A2A  B4D8               	btfsc	status,2,c
 33098  006A2C  D006               	goto	l32988
 33099                           
 33100                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 33101                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 33102  006A2E  0EFC               	movlw	-4
 33103  006A30  6CE3               	negf	plusw1,c
 33104  006A32  0EFD               	movlw	-3
 33105  006A34  1EE3               	comf	plusw1,f,c
 33106  006A36  B0D8               	btfsc	status,0,c
 33107  006A38  2AE3               	incf	plusw1,f,c
 33108  006A3A                     l32988:
 33109                           
 33110                           ;stkvar	___awmod@dividend @ sp[(-2)+-2]
 33111  006A3A  0EFC               	movlw	-4
 33112  006A3C  CFE3 F03E          	movff	plusw1,btemp
 33113  006A40  0EFD               	movlw	-3
 33114  006A42  CFE3 F03F          	movff	plusw1,btemp+1
 33115                           
 33116                           ; ___awmod: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 4, argsi
      +                          ze = 4, vargsize = 0
 33117  006A46  0EFA               	movlw	250
 33118  006A48  26E1               	addwf	fsr1l,f,c
 33119  006A4A  0EFF               	movlw	255
 33120  006A4C  22E2               	addwfc	fsr1h,f,c
 33121  006A4E  0012               	return		;funcret
 33122  006A50                     __end_of___awmod:
 33123                           	opt stack 0
 33124                           tblptru	equ	0xFF8
 33125                           tblptrh	equ	0xFF7
 33126                           tblptrl	equ	0xFF6
 33127                           tablat	equ	0xFF5
 33128                           prodh	equ	0xFF4
 33129                           prodl	equ	0xFF3
 33130                           intcon	equ	0xFF2
 33131                           intcon2	equ	0xFF1
 33132                           indf0	equ	0xFEF
 33133                           postinc0	equ	0xFEE
 33134                           fsr0h	equ	0xFEA
 33135                           fsr0l	equ	0xFE9
 33136                           wreg	equ	0xFE8
 33137                           postinc1	equ	0xFE6
 33138                           postdec1	equ	0xFE5
 33139                           plusw1	equ	0xFE3
 33140                           fsr1h	equ	0xFE2
 33141                           fsr1l	equ	0xFE1
 33142                           indf2	equ	0xFDF
 33143                           postinc2	equ	0xFDE
 33144                           postdec2	equ	0xFDD
 33145                           plusw2	equ	0xFDB
 33146                           fsr2h	equ	0xFDA
 33147                           fsr2l	equ	0xFD9
 33148                           status	equ	0xFD8
 33149                           
 33150 ;; *************** function _copy_array *****************
 33151 ;; Defined at:
 33152 ;;		line 210 in file "arpeggio.c"
 33153 ;; Parameters:    Size  Location     Type
 33154 ;;		None
 33155 ;; Auto vars:     Size  Location     Type
 33156 ;;  i               1    0[BANK0 ] unsigned char 
 33157 ;; Return value:  Size  Location     Type
 33158 ;;                  1    wreg      void 
 33159 ;; Registers used:
 33160 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 33161 ;; Tracked objects:
 33162 ;;		On entry : 0/0
 33163 ;;		On exit  : 0/0
 33164 ;;		Unchanged: 0/0
 33165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33167 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33169 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33170 ;;Total ram usage:        1 bytes
 33171 ;; Hardware stack levels used:    1
 33172 ;; Hardware stack levels required when called:    5
 33173 ;; This function calls:
 33174 ;;		Nothing
 33175 ;; This function is called by:
 33176 ;;		_setupArpeggio
 33177 ;; This function uses a non-reentrant model
 33178 ;;
 33179                           
 33180                           	psect	text88
 33181  0090B2                     __ptext88:
 33182                           	opt stack 0
 33183  0090B2                     _copy_array:
 33184                           	opt stack 16
 33185                           
 33186                           ;arpeggio.c: 212: if(NUM_NOTES_PRESSED == 0){return;}
 33187                           
 33188                           ;incstack = 0
 33189  0090B2  502E               	movf	_NUM_NOTES_PRESSED,w,c
 33190  0090B4  B4D8               	btfsc	status,2,c
 33191  0090B6  0012               	return	
 33192                           
 33193                           ;arpeggio.c: 215: for(unsigned char i = 0; i < NUM_NOTES_PRESSED; i++){
 33194  0090B8  0E00               	movlw	0
 33195  0090BA  0100               	movlb	0	; () banked
 33196  0090BC  6F60               	movwf	copy_array@i& (0+255),b
 33197  0090BE  D025               	goto	l5494
 33198  0090C0                     
 33199                           ; BSR set to: 0
 33200                           ;arpeggio.c: 216: ARPEGGIO_SORTED[i] = ARPEGGIO[i];
 33201                           
 33202                           ; BSR set to: 0
 33203  0090C0  5160               	movf	copy_array@i& (0+255),w,b
 33204  0090C2  0D01               	mullw	1
 33205  0090C4  0E84               	movlw	low _ARPEGGIO
 33206  0090C6  24F3               	addwf	prodl,w,c
 33207  0090C8  6ED9               	movwf	fsr2l,c
 33208  0090CA  0E01               	movlw	high _ARPEGGIO
 33209  0090CC  20F4               	addwfc	prodh,w,c
 33210  0090CE  6EDA               	movwf	fsr2h,c
 33211  0090D0  5160               	movf	copy_array@i& (0+255),w,b
 33212  0090D2  0D01               	mullw	1
 33213  0090D4  0E78               	movlw	low _ARPEGGIO_SORTED
 33214  0090D6  24F3               	addwf	prodl,w,c
 33215  0090D8  6EE9               	movwf	fsr0l,c
 33216  0090DA  0E02               	movlw	high _ARPEGGIO_SORTED
 33217  0090DC  20F4               	addwfc	prodh,w,c
 33218  0090DE  6EEA               	movwf	fsr0h,c
 33219  0090E0  CFDF FFEF          	movff	indf2,indf0
 33220                           
 33221                           ;arpeggio.c: 217: ARPEGGIO_RANDOM[i] = ARPEGGIO[i];
 33222  0090E4  5160               	movf	copy_array@i& (0+255),w,b
 33223  0090E6  0D01               	mullw	1
 33224  0090E8  0E84               	movlw	low _ARPEGGIO
 33225  0090EA  24F3               	addwf	prodl,w,c
 33226  0090EC  6ED9               	movwf	fsr2l,c
 33227  0090EE  0E01               	movlw	high _ARPEGGIO
 33228  0090F0  20F4               	addwfc	prodh,w,c
 33229  0090F2  6EDA               	movwf	fsr2h,c
 33230  0090F4  5160               	movf	copy_array@i& (0+255),w,b
 33231  0090F6  0D01               	mullw	1
 33232  0090F8  0E68               	movlw	low _ARPEGGIO_RANDOM
 33233  0090FA  24F3               	addwf	prodl,w,c
 33234  0090FC  6EE9               	movwf	fsr0l,c
 33235  0090FE  0E02               	movlw	high _ARPEGGIO_RANDOM
 33236  009100  20F4               	addwfc	prodh,w,c
 33237  009102  6EEA               	movwf	fsr0h,c
 33238  009104  CFDF FFEF          	movff	indf2,indf0
 33239                           
 33240                           ; BSR set to: 0
 33241  009108  2B60               	incf	copy_array@i& (0+255),f,b
 33242  00910A                     l5494:
 33243                           
 33244                           ; BSR set to: 0
 33245                           
 33246                           ; BSR set to: 0
 33247  00910A  502E               	movf	_NUM_NOTES_PRESSED,w,c
 33248  00910C  5D60               	subwf	copy_array@i& (0+255),w,b
 33249  00910E  B0D8               	btfsc	status,0,c
 33250  009110  0012               	return	
 33251  009112  D7D6               	goto	l5495
 33252  009114                     __end_of_copy_array:
 33253                           	opt stack 0
 33254                           tblptru	equ	0xFF8
 33255                           tblptrh	equ	0xFF7
 33256                           tblptrl	equ	0xFF6
 33257                           tablat	equ	0xFF5
 33258                           prodh	equ	0xFF4
 33259                           prodl	equ	0xFF3
 33260                           intcon	equ	0xFF2
 33261                           intcon2	equ	0xFF1
 33262                           indf0	equ	0xFEF
 33263                           postinc0	equ	0xFEE
 33264                           fsr0h	equ	0xFEA
 33265                           fsr0l	equ	0xFE9
 33266                           wreg	equ	0xFE8
 33267                           postinc1	equ	0xFE6
 33268                           postdec1	equ	0xFE5
 33269                           plusw1	equ	0xFE3
 33270                           fsr1h	equ	0xFE2
 33271                           fsr1l	equ	0xFE1
 33272                           indf2	equ	0xFDF
 33273                           postinc2	equ	0xFDE
 33274                           postdec2	equ	0xFDD
 33275                           plusw2	equ	0xFDB
 33276                           fsr2h	equ	0xFDA
 33277                           fsr2l	equ	0xFD9
 33278                           status	equ	0xFD8
 33279                           
 33280 ;; *************** function _resetArpeggio *****************
 33281 ;; Defined at:
 33282 ;;		line 162 in file "arpeggio.c"
 33283 ;; Parameters:    Size  Location     Type
 33284 ;;		None
 33285 ;; Auto vars:     Size  Location     Type
 33286 ;;		None
 33287 ;; Return value:  Size  Location     Type
 33288 ;;                  1    wreg      void 
 33289 ;; Registers used:
 33290 ;;		wreg, status,2, status,0
 33291 ;; Tracked objects:
 33292 ;;		On entry : 0/0
 33293 ;;		On exit  : 0/0
 33294 ;;		Unchanged: 0/0
 33295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33300 ;;Total ram usage:        0 bytes
 33301 ;; Hardware stack levels used:    1
 33302 ;; Hardware stack levels required when called:    5
 33303 ;; This function calls:
 33304 ;;		Nothing
 33305 ;; This function is called by:
 33306 ;;		_processOctave
 33307 ;;		_finish_arpeggio_setup
 33308 ;; This function uses a non-reentrant model
 33309 ;;
 33310                           
 33311                           	psect	text89
 33312  0095C6                     __ptext89:
 33313                           	opt stack 0
 33314  0095C6                     _resetArpeggio:
 33315                           	opt stack 20
 33316                           
 33317                           ;arpeggio.c: 164: which_note = 0;
 33318                           
 33319                           ;incstack = 0
 33320  0095C6  0E00               	movlw	0
 33321  0095C8  6E32               	movwf	_which_note,c
 33322                           
 33323                           ;arpeggio.c: 165: which_octave = 0;
 33324  0095CA  0E00               	movlw	0
 33325  0095CC  6E31               	movwf	_which_octave,c
 33326                           
 33327                           ;arpeggio.c: 166: last_note = 0;
 33328  0095CE  0E00               	movlw	0
 33329  0095D0  0100               	movlb	0	; () banked
 33330  0095D2  6FED               	movwf	_last_note& (0+255),b
 33331                           
 33332                           ;arpeggio.c: 167: last_octave = 0;
 33333  0095D4  0E00               	movlw	0
 33334  0095D6  0101               	movlb	1	; () banked
 33335  0095D8  6F7E               	movwf	_last_octave& (0+255),b
 33336                           
 33337                           ; BSR set to: 1
 33338                           ;arpeggio.c: 168: overflow = 0;
 33339  0095DA  9802               	bcf	_overflow/(0+8),_overflow& (0+7),c
 33340                           
 33341                           ; BSR set to: 1
 33342                           ;arpeggio.c: 169: octave_overflow = 0;
 33343  0095DC  9602               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 33344                           
 33345                           ; BSR set to: 1
 33346                           ;arpeggio.c: 172: if(ARPEGGIO_TYPE == UP_DOWN && startingDirection == DOWN){
 33347  0095DE  0E02               	movlw	2
 33348  0095E0  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 33349  0095E2  A4D8               	btfss	status,2,c
 33350  0095E4  D005               	goto	l5471
 33351                           
 33352                           ; BSR set to: 1
 33353  0095E6  0433               	decf	_startingDirection,w,c
 33354  0095E8  A4D8               	btfss	status,2,c
 33355  0095EA  D002               	goto	l5471
 33356                           
 33357                           ; BSR set to: 1
 33358                           ;arpeggio.c: 173: ARPEGGIO_TYPE = DOWN_UP;
 33359  0095EC  0E03               	movlw	3
 33360  0095EE  6E34               	movwf	_ARPEGGIO_TYPE,c
 33361  0095F0                     l5471:
 33362                           
 33363                           ; BSR set to: 1
 33364                           ;arpeggio.c: 174: }
 33365                           ;arpeggio.c: 176: if(ARPEGGIO_TYPE == DOWN_UP && startingDirection == UP){
 33366                           
 33367                           ; BSR set to: 1
 33368  0095F0  0E03               	movlw	3
 33369  0095F2  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 33370  0095F4  A4D8               	btfss	status,2,c
 33371  0095F6  0012               	return	
 33372                           
 33373                           ; BSR set to: 1
 33374  0095F8  5033               	movf	_startingDirection,w,c
 33375  0095FA  A4D8               	btfss	status,2,c
 33376  0095FC  0012               	return	
 33377                           
 33378                           ; BSR set to: 1
 33379                           ;arpeggio.c: 177: ARPEGGIO_TYPE = UP_DOWN;
 33380  0095FE  0E02               	movlw	2
 33381  009600  6E34               	movwf	_ARPEGGIO_TYPE,c
 33382  009602  0012               	return	
 33383  009604                     __end_of_resetArpeggio:
 33384                           	opt stack 0
 33385                           tblptru	equ	0xFF8
 33386                           tblptrh	equ	0xFF7
 33387                           tblptrl	equ	0xFF6
 33388                           tablat	equ	0xFF5
 33389                           prodh	equ	0xFF4
 33390                           prodl	equ	0xFF3
 33391                           intcon	equ	0xFF2
 33392                           intcon2	equ	0xFF1
 33393                           indf0	equ	0xFEF
 33394                           postinc0	equ	0xFEE
 33395                           fsr0h	equ	0xFEA
 33396                           fsr0l	equ	0xFE9
 33397                           wreg	equ	0xFE8
 33398                           postinc1	equ	0xFE6
 33399                           postdec1	equ	0xFE5
 33400                           plusw1	equ	0xFE3
 33401                           fsr1h	equ	0xFE2
 33402                           fsr1l	equ	0xFE1
 33403                           indf2	equ	0xFDF
 33404                           postinc2	equ	0xFDE
 33405                           postdec2	equ	0xFDD
 33406                           plusw2	equ	0xFDB
 33407                           fsr2h	equ	0xFDA
 33408                           fsr2l	equ	0xFD9
 33409                           status	equ	0xFD8
 33410                           
 33411 ;; *************** function _delete_notes_from_arpeggio *****************
 33412 ;; Defined at:
 33413 ;;		line 63 in file "arpeggio.c"
 33414 ;; Parameters:    Size  Location     Type
 33415 ;;  pitch           1    wreg     unsigned char 
 33416 ;; Auto vars:     Size  Location     Type
 33417 ;;  pitch           1    9[BANK0 ] unsigned char 
 33418 ;;  INDEX_TO_SHI    1   10[BANK0 ] char 
 33419 ;; Return value:  Size  Location     Type
 33420 ;;                  1    wreg      void 
 33421 ;; Registers used:
 33422 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33423 ;; Tracked objects:
 33424 ;;		On entry : 0/0
 33425 ;;		On exit  : 0/0
 33426 ;;		Unchanged: 0/0
 33427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33429 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33431 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33432 ;;Total ram usage:        2 bytes
 33433 ;; Hardware stack levels used:    1
 33434 ;; Hardware stack levels required when called:    6
 33435 ;; This function calls:
 33436 ;;		_findArrayIndex
 33437 ;;		_rotateArrayLeft
 33438 ;; This function is called by:
 33439 ;;		_playThisNotePentatonic
 33440 ;;		_playThisNote
 33441 ;;		_playThisNote8
 33442 ;; This function uses a non-reentrant model
 33443 ;;
 33444                           
 33445                           	psect	text90
 33446  009760                     __ptext90:
 33447                           	opt stack 0
 33448  009760                     _delete_notes_from_arpeggio:
 33449                           	opt stack 17
 33450                           
 33451                           ; BSR set to: 1
 33452                           ;incstack = 0
 33453                           ;delete_notes_from_arpeggio@pitch stored from wreg
 33454  009760  0100               	movlb	0	; () banked
 33455  009762  6F69               	movwf	delete_notes_from_arpeggio@pitch& (0+255),b
 33456                           
 33457                           ;arpeggio.c: 66: signed char INDEX_TO_SHIFT_LEFT_AT = findArrayIndex(pitch);
 33458  009764  0100               	movlb	0	; () banked
 33459  009766  5169               	movf	delete_notes_from_arpeggio@pitch& (0+255),w,b
 33460  009768  EC02  F04B         	call	_findArrayIndex
 33461  00976C  0100               	movlb	0	; () banked
 33462  00976E  6F6A               	movwf	delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT& (0+255),b
 33463                           
 33464                           ; BSR set to: 0
 33465                           ;arpeggio.c: 77: rotateArrayLeft(INDEX_TO_SHIFT_LEFT_AT);
 33466  009770  516A               	movf	delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT& (0+255),w,b
 33467  009772  ECB1  F044         	call	_rotateArrayLeft
 33468                           
 33469                           ;arpeggio.c: 80: if(NUM_NOTES_PRESSED > 0) {NUM_NOTES_PRESSED--;}
 33470  009776  502E               	movf	_NUM_NOTES_PRESSED,w,c
 33471  009778  A4D8               	btfss	status,2,c
 33472  00977A  062E               	decf	_NUM_NOTES_PRESSED,f,c
 33473                           
 33474                           ;arpeggio.c: 85: if(NUM_NOTES_PRESSED == 0) {ARRAY_INDEX = 0;}
 33475  00977C  502E               	movf	_NUM_NOTES_PRESSED,w,c
 33476  00977E  A4D8               	btfss	status,2,c
 33477  009780  D003               	goto	l5441
 33478  009782  0E00               	movlw	0
 33479  009784  0100               	movlb	0	; () banked
 33480  009786  6FEC               	movwf	_ARRAY_INDEX& (0+255),b
 33481  009788                     l5441:
 33482                           
 33483                           ;arpeggio.c: 88: if(ARRAY_INDEX > 0){ARRAY_INDEX--;}
 33484  009788  0100               	movlb	0	; () banked
 33485  00978A  51EC               	movf	_ARRAY_INDEX& (0+255),w,b
 33486  00978C  B4D8               	btfsc	status,2,c
 33487  00978E  0012               	return	
 33488                           
 33489                           ; BSR set to: 0
 33490  009790  07EC               	decf	_ARRAY_INDEX& (0+255),f,b
 33491  009792  0012               	return	
 33492  009794                     __end_of_delete_notes_from_arpeggio:
 33493                           	opt stack 0
 33494                           tblptru	equ	0xFF8
 33495                           tblptrh	equ	0xFF7
 33496                           tblptrl	equ	0xFF6
 33497                           tablat	equ	0xFF5
 33498                           prodh	equ	0xFF4
 33499                           prodl	equ	0xFF3
 33500                           intcon	equ	0xFF2
 33501                           intcon2	equ	0xFF1
 33502                           indf0	equ	0xFEF
 33503                           postinc0	equ	0xFEE
 33504                           fsr0h	equ	0xFEA
 33505                           fsr0l	equ	0xFE9
 33506                           wreg	equ	0xFE8
 33507                           postinc1	equ	0xFE6
 33508                           postdec1	equ	0xFE5
 33509                           plusw1	equ	0xFE3
 33510                           fsr1h	equ	0xFE2
 33511                           fsr1l	equ	0xFE1
 33512                           indf2	equ	0xFDF
 33513                           postinc2	equ	0xFDE
 33514                           postdec2	equ	0xFDD
 33515                           plusw2	equ	0xFDB
 33516                           fsr2h	equ	0xFDA
 33517                           fsr2l	equ	0xFD9
 33518                           status	equ	0xFD8
 33519                           
 33520 ;; *************** function _findArrayIndex *****************
 33521 ;; Defined at:
 33522 ;;		line 516 in file "arpeggio.c"
 33523 ;; Parameters:    Size  Location     Type
 33524 ;;  pitch_of_key    1    wreg     unsigned char 
 33525 ;; Auto vars:     Size  Location     Type
 33526 ;;  pitch_of_key    1    1[BANK0 ] unsigned char 
 33527 ;;  i               1    2[BANK0 ] unsigned char 
 33528 ;; Return value:  Size  Location     Type
 33529 ;;                  1    wreg      char 
 33530 ;; Registers used:
 33531 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 33532 ;; Tracked objects:
 33533 ;;		On entry : 0/0
 33534 ;;		On exit  : 0/0
 33535 ;;		Unchanged: 0/0
 33536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33538 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33539 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33540 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33541 ;;Total ram usage:        3 bytes
 33542 ;; Hardware stack levels used:    1
 33543 ;; Hardware stack levels required when called:    5
 33544 ;; This function calls:
 33545 ;;		Nothing
 33546 ;; This function is called by:
 33547 ;;		_delete_notes_from_arpeggio
 33548 ;; This function uses a non-reentrant model
 33549 ;;
 33550                           
 33551                           	psect	text91
 33552  009604                     __ptext91:
 33553                           	opt stack 0
 33554  009604                     _findArrayIndex:
 33555                           	opt stack 17
 33556                           
 33557                           ; BSR set to: 0
 33558                           ;incstack = 0
 33559                           ;findArrayIndex@pitch_of_key_release stored from wreg
 33560  009604  0100               	movlb	0	; () banked
 33561  009606  6F61               	movwf	findArrayIndex@pitch_of_key_release& (0+255),b
 33562                           
 33563                           ;arpeggio.c: 518: for (unsigned char i=0;i<MAX_NUM_NOTES;i++){
 33564  009608  0E00               	movlw	0
 33565  00960A  0100               	movlb	0	; () banked
 33566  00960C  6F62               	movwf	findArrayIndex@i& (0+255),b
 33567  00960E                     l26524:
 33568                           
 33569                           ; BSR set to: 0
 33570  00960E  0E9D               	movlw	low _MAX_NUM_NOTES
 33571  009610  6EF6               	movwf	tblptrl,c
 33572  009612                     	if	1	;There is more than 1 active tblptr byte
 33573  009612  0EF3               	movlw	high _MAX_NUM_NOTES
 33574  009614  6EF7               	movwf	tblptrh,c
 33575  009616                     	endif
 33576  009616                     	if	0	;There are less than 3 active tblptr bytes
 33577  009616                     	endif
 33578  009616  0009               	tblrd		*+
 33579  009618  50F5               	movf	tablat,w,c
 33580  00961A  5D62               	subwf	findArrayIndex@i& (0+255),w,b
 33581  00961C  B0D8               	btfsc	status,0,c
 33582  00961E  0012               	return	
 33583                           
 33584                           ; BSR set to: 0
 33585                           ;arpeggio.c: 519: if(ARPEGGIO[i] == pitch_of_key_release){return i;}
 33586                           
 33587                           ; BSR set to: 0
 33588                           
 33589                           ; BSR set to: 0
 33590  009620  5162               	movf	findArrayIndex@i& (0+255),w,b
 33591  009622  0D01               	mullw	1
 33592  009624  0E84               	movlw	low _ARPEGGIO
 33593  009626  24F3               	addwf	prodl,w,c
 33594  009628  6ED9               	movwf	fsr2l,c
 33595  00962A  0E01               	movlw	high _ARPEGGIO
 33596  00962C  20F4               	addwfc	prodh,w,c
 33597  00962E  6EDA               	movwf	fsr2h,c
 33598  009630  5161               	movf	findArrayIndex@pitch_of_key_release& (0+255),w,b
 33599  009632  18DE               	xorwf	postinc2,w,c
 33600  009634  A4D8               	btfss	status,2,c
 33601  009636  D002               	goto	l26534
 33602                           
 33603                           ; BSR set to: 0
 33604  009638  5162               	movf	findArrayIndex@i& (0+255),w,b
 33605                           
 33606                           ; BSR set to: 0
 33607  00963A  0012               	return	
 33608  00963C                     l26534:
 33609                           
 33610                           ; BSR set to: 0
 33611                           
 33612                           ; BSR set to: 0
 33613                           
 33614                           ;arpeggio.c: 520: else{;}
 33615                           
 33616                           ; BSR set to: 0
 33617                           
 33618                           ; BSR set to: 0
 33619  00963C  2B62               	incf	findArrayIndex@i& (0+255),f,b
 33620  00963E  D7E7               	goto	l26524
 33621  009640                     __end_of_findArrayIndex:
 33622                           	opt stack 0
 33623                           tblptru	equ	0xFF8
 33624                           tblptrh	equ	0xFF7
 33625                           tblptrl	equ	0xFF6
 33626                           tablat	equ	0xFF5
 33627                           prodh	equ	0xFF4
 33628                           prodl	equ	0xFF3
 33629                           intcon	equ	0xFF2
 33630                           intcon2	equ	0xFF1
 33631                           indf0	equ	0xFEF
 33632                           postinc0	equ	0xFEE
 33633                           fsr0h	equ	0xFEA
 33634                           fsr0l	equ	0xFE9
 33635                           wreg	equ	0xFE8
 33636                           postinc1	equ	0xFE6
 33637                           postdec1	equ	0xFE5
 33638                           plusw1	equ	0xFE3
 33639                           fsr1h	equ	0xFE2
 33640                           fsr1l	equ	0xFE1
 33641                           indf2	equ	0xFDF
 33642                           postinc2	equ	0xFDE
 33643                           postdec2	equ	0xFDD
 33644                           plusw2	equ	0xFDB
 33645                           fsr2h	equ	0xFDA
 33646                           fsr2l	equ	0xFD9
 33647                           status	equ	0xFD8
 33648                           
 33649 ;; *************** function _add_notes_to_arpeggio *****************
 33650 ;; Defined at:
 33651 ;;		line 39 in file "arpeggio.c"
 33652 ;; Parameters:    Size  Location     Type
 33653 ;;  pitch           1    wreg     unsigned char 
 33654 ;; Auto vars:     Size  Location     Type
 33655 ;;  pitch           1   16[BANK0 ] unsigned char 
 33656 ;; Return value:  Size  Location     Type
 33657 ;;                  1    wreg      void 
 33658 ;; Registers used:
 33659 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33660 ;; Tracked objects:
 33661 ;;		On entry : 0/0
 33662 ;;		On exit  : 0/0
 33663 ;;		Unchanged: 0/0
 33664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33666 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33667 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33668 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33669 ;;Total ram usage:        8 bytes
 33670 ;; Hardware stack levels used:    1
 33671 ;; Hardware stack levels required when called:    6
 33672 ;; This function calls:
 33673 ;;		_rotateArrayLeft
 33674 ;; This function is called by:
 33675 ;;		_playThisNotePentatonic
 33676 ;;		_playThisNote
 33677 ;;		_playThisNote8
 33678 ;; This function uses a non-reentrant model
 33679 ;;
 33680                           
 33681                           	psect	text92
 33682  006A50                     __ptext92:
 33683                           	opt stack 0
 33684  006A50                     _add_notes_to_arpeggio:
 33685                           	opt stack 17
 33686                           
 33687                           ; BSR set to: 0
 33688                           ;incstack = 0
 33689                           ;add_notes_to_arpeggio@pitch stored from wreg
 33690  006A50  0100               	movlb	0	; () banked
 33691  006A52  6F70               	movwf	add_notes_to_arpeggio@pitch& (0+255),b
 33692                           
 33693                           ;arpeggio.c: 43: if(ARRAY_INDEX > (MAX_NUM_NOTES - 1)){
 33694  006A54  0100               	movlb	0	; () banked
 33695  006A56  51EC               	movf	_ARRAY_INDEX& (0+255),w,b
 33696  006A58  6F69               	movwf	??_add_notes_to_arpeggio& (0+255),b
 33697  006A5A  6B6A               	clrf	(??_add_notes_to_arpeggio+1)& (0+255),b
 33698  006A5C  0EFF               	movlw	255
 33699  006A5E  6F6B               	movwf	(??_add_notes_to_arpeggio+2)& (0+255),b
 33700  006A60  0EFF               	movlw	255
 33701  006A62  6F6C               	movwf	(??_add_notes_to_arpeggio+3)& (0+255),b
 33702  006A64  0E9D               	movlw	low _MAX_NUM_NOTES
 33703  006A66  6EF6               	movwf	tblptrl,c
 33704  006A68                     	if	1	;There is more than 1 active tblptr byte
 33705  006A68  0EF3               	movlw	high _MAX_NUM_NOTES
 33706  006A6A  6EF7               	movwf	tblptrh,c
 33707  006A6C                     	endif
 33708  006A6C                     	if	0	;There are less than 3 active tblptr bytes
 33709  006A6C                     	endif
 33710  006A6C  0008               	tblrd		*
 33711  006A6E  50F5               	movf	tablat,w,c
 33712  006A70  6F6D               	movwf	(??_add_notes_to_arpeggio+4)& (0+255),b
 33713  006A72  6B6E               	clrf	(??_add_notes_to_arpeggio+5)& (0+255),b
 33714  006A74  516B               	movf	(??_add_notes_to_arpeggio+2)& (0+255),w,b
 33715  006A76  276D               	addwf	(??_add_notes_to_arpeggio+4)& (0+255),f,b
 33716  006A78  516C               	movf	(??_add_notes_to_arpeggio+3)& (0+255),w,b
 33717  006A7A  236E               	addwfc	(??_add_notes_to_arpeggio+5)& (0+255),f,b
 33718  006A7C  5169               	movf	??_add_notes_to_arpeggio& (0+255),w,b
 33719  006A7E  5D6D               	subwf	(??_add_notes_to_arpeggio+4)& (0+255),w,b
 33720  006A80  516E               	movf	(??_add_notes_to_arpeggio+5)& (0+255),w,b
 33721  006A82  0A80               	xorlw	128
 33722  006A84  6F6F               	movwf	(??_add_notes_to_arpeggio+6)& (0+255),b
 33723  006A86  516A               	movf	(??_add_notes_to_arpeggio+1)& (0+255),w,b
 33724  006A88  0A80               	xorlw	128
 33725  006A8A  596F               	subwfb	(??_add_notes_to_arpeggio+6)& (0+255),w,b
 33726  006A8C  B0D8               	btfsc	status,0,c
 33727  006A8E  D025               	goto	l5434
 33728                           
 33729                           ; BSR set to: 0
 33730                           ;arpeggio.c: 44: ARRAY_INDEX = MAX_NUM_NOTES - 1;
 33731  006A90  0E9D               	movlw	low _MAX_NUM_NOTES
 33732  006A92  6EF6               	movwf	tblptrl,c
 33733  006A94                     	if	1	;There is more than 1 active tblptr byte
 33734  006A94  0EF3               	movlw	high _MAX_NUM_NOTES
 33735  006A96  6EF7               	movwf	tblptrh,c
 33736  006A98                     	endif
 33737  006A98                     	if	0	;There are less than 3 active tblptr bytes
 33738  006A98                     	endif
 33739  006A98  0008               	tblrd		*
 33740  006A9A  CFF5 F069          	movff	tablat,??_add_notes_to_arpeggio
 33741  006A9E  0569               	decf	??_add_notes_to_arpeggio& (0+255),w,b
 33742  006AA0  6FEC               	movwf	_ARRAY_INDEX& (0+255),b
 33743                           
 33744                           ; BSR set to: 0
 33745                           ;arpeggio.c: 45: rotateArrayLeft(0);
 33746  006AA2  0E00               	movlw	0
 33747  006AA4  ECB1  F044         	call	_rotateArrayLeft
 33748                           
 33749                           ;arpeggio.c: 46: ARPEGGIO[MAX_NUM_NOTES - 1] = pitch;
 33750  006AA8  0EFF               	movlw	255
 33751  006AAA  0100               	movlb	0	; () banked
 33752  006AAC  6F69               	movwf	??_add_notes_to_arpeggio& (0+255),b
 33753  006AAE  0EFF               	movlw	255
 33754  006AB0  6F6A               	movwf	(??_add_notes_to_arpeggio+1)& (0+255),b
 33755  006AB2  0E9D               	movlw	low _MAX_NUM_NOTES
 33756  006AB4  6EF6               	movwf	tblptrl,c
 33757  006AB6                     	if	1	;There is more than 1 active tblptr byte
 33758  006AB6  0EF3               	movlw	high _MAX_NUM_NOTES
 33759  006AB8  6EF7               	movwf	tblptrh,c
 33760  006ABA                     	endif
 33761  006ABA                     	if	0	;There are less than 3 active tblptr bytes
 33762  006ABA                     	endif
 33763  006ABA  0008               	tblrd		*
 33764  006ABC  50F5               	movf	tablat,w,c
 33765  006ABE  6F6B               	movwf	(??_add_notes_to_arpeggio+2)& (0+255),b
 33766  006AC0  6B6C               	clrf	(??_add_notes_to_arpeggio+3)& (0+255),b
 33767  006AC2  5169               	movf	??_add_notes_to_arpeggio& (0+255),w,b
 33768  006AC4  276B               	addwf	(??_add_notes_to_arpeggio+2)& (0+255),f,b
 33769  006AC6  516A               	movf	(??_add_notes_to_arpeggio+1)& (0+255),w,b
 33770  006AC8  236C               	addwfc	(??_add_notes_to_arpeggio+3)& (0+255),f,b
 33771  006ACA  0E84               	movlw	low _ARPEGGIO
 33772  006ACC  256B               	addwf	(??_add_notes_to_arpeggio+2)& (0+255),w,b
 33773  006ACE  6ED9               	movwf	fsr2l,c
 33774  006AD0  0E01               	movlw	high _ARPEGGIO
 33775  006AD2  216C               	addwfc	(??_add_notes_to_arpeggio+3)& (0+255),w,b
 33776  006AD4  6EDA               	movwf	fsr2h,c
 33777  006AD6  C070  FFDF         	movff	add_notes_to_arpeggio@pitch,indf2
 33778  006ADA                     l5434:
 33779                           
 33780                           ; BSR set to: 0
 33781                           ;arpeggio.c: 47: }
 33782                           ;arpeggio.c: 49: if(ARRAY_INDEX <= (MAX_NUM_NOTES - 1)){
 33783                           
 33784                           ; BSR set to: 0
 33785  006ADA  51EC               	movf	_ARRAY_INDEX& (0+255),w,b
 33786  006ADC  6F69               	movwf	??_add_notes_to_arpeggio& (0+255),b
 33787  006ADE  6B6A               	clrf	(??_add_notes_to_arpeggio+1)& (0+255),b
 33788  006AE0  0EFF               	movlw	255
 33789  006AE2  6F6B               	movwf	(??_add_notes_to_arpeggio+2)& (0+255),b
 33790  006AE4  0EFF               	movlw	255
 33791  006AE6  6F6C               	movwf	(??_add_notes_to_arpeggio+3)& (0+255),b
 33792  006AE8  0E9D               	movlw	low _MAX_NUM_NOTES
 33793  006AEA  6EF6               	movwf	tblptrl,c
 33794  006AEC                     	if	1	;There is more than 1 active tblptr byte
 33795  006AEC  0EF3               	movlw	high _MAX_NUM_NOTES
 33796  006AEE  6EF7               	movwf	tblptrh,c
 33797  006AF0                     	endif
 33798  006AF0                     	if	0	;There are less than 3 active tblptr bytes
 33799  006AF0                     	endif
 33800  006AF0  0008               	tblrd		*
 33801  006AF2  50F5               	movf	tablat,w,c
 33802  006AF4  6F6D               	movwf	(??_add_notes_to_arpeggio+4)& (0+255),b
 33803  006AF6  6B6E               	clrf	(??_add_notes_to_arpeggio+5)& (0+255),b
 33804  006AF8  516B               	movf	(??_add_notes_to_arpeggio+2)& (0+255),w,b
 33805  006AFA  276D               	addwf	(??_add_notes_to_arpeggio+4)& (0+255),f,b
 33806  006AFC  516C               	movf	(??_add_notes_to_arpeggio+3)& (0+255),w,b
 33807  006AFE  236E               	addwfc	(??_add_notes_to_arpeggio+5)& (0+255),f,b
 33808  006B00  5169               	movf	??_add_notes_to_arpeggio& (0+255),w,b
 33809  006B02  5D6D               	subwf	(??_add_notes_to_arpeggio+4)& (0+255),w,b
 33810  006B04  516E               	movf	(??_add_notes_to_arpeggio+5)& (0+255),w,b
 33811  006B06  0A80               	xorlw	128
 33812  006B08  6F6F               	movwf	(??_add_notes_to_arpeggio+6)& (0+255),b
 33813  006B0A  516A               	movf	(??_add_notes_to_arpeggio+1)& (0+255),w,b
 33814  006B0C  0A80               	xorlw	128
 33815  006B0E  596F               	subwfb	(??_add_notes_to_arpeggio+6)& (0+255),w,b
 33816  006B10  A0D8               	btfss	status,0,c
 33817  006B12  D00B               	goto	l5435
 33818                           
 33819                           ; BSR set to: 0
 33820                           ;arpeggio.c: 51: ARPEGGIO[ARRAY_INDEX] = pitch;
 33821  006B14  51EC               	movf	_ARRAY_INDEX& (0+255),w,b
 33822  006B16  0D01               	mullw	1
 33823  006B18  0E84               	movlw	low _ARPEGGIO
 33824  006B1A  24F3               	addwf	prodl,w,c
 33825  006B1C  6ED9               	movwf	fsr2l,c
 33826  006B1E  0E01               	movlw	high _ARPEGGIO
 33827  006B20  20F4               	addwfc	prodh,w,c
 33828  006B22  6EDA               	movwf	fsr2h,c
 33829  006B24  C070  FFDF         	movff	add_notes_to_arpeggio@pitch,indf2
 33830                           
 33831                           ; BSR set to: 0
 33832                           ;arpeggio.c: 53: ARRAY_INDEX++;
 33833  006B28  2BEC               	incf	_ARRAY_INDEX& (0+255),f,b
 33834  006B2A                     l5435:
 33835                           
 33836                           ; BSR set to: 0
 33837                           ;arpeggio.c: 54: }
 33838                           ;arpeggio.c: 57: NUM_NOTES_PRESSED++;
 33839                           
 33840                           ; BSR set to: 0
 33841  006B2A  2A2E               	incf	_NUM_NOTES_PRESSED,f,c
 33842                           
 33843                           ; BSR set to: 0
 33844                           ;arpeggio.c: 59: if(NUM_NOTES_PRESSED > MAX_NUM_NOTES){NUM_NOTES_PRESSED = MAX_NUM_NOTES
      +                          ;}
 33845  006B2C  0E9D               	movlw	low _MAX_NUM_NOTES
 33846  006B2E  6EF6               	movwf	tblptrl,c
 33847  006B30                     	if	1	;There is more than 1 active tblptr byte
 33848  006B30  0EF3               	movlw	high _MAX_NUM_NOTES
 33849  006B32  6EF7               	movwf	tblptrh,c
 33850  006B34                     	endif
 33851  006B34                     	if	0	;There are less than 3 active tblptr bytes
 33852  006B34                     	endif
 33853  006B34  502E               	movf	_NUM_NOTES_PRESSED,w,c
 33854  006B36  0009               	tblrd		*+
 33855  006B38  5CF5               	subwf	tablat,w,c
 33856  006B3A  B0D8               	btfsc	status,0,c
 33857  006B3C  0012               	return	
 33858                           
 33859                           ; BSR set to: 0
 33860  006B3E  0E9D               	movlw	low _MAX_NUM_NOTES
 33861  006B40  6EF6               	movwf	tblptrl,c
 33862  006B42                     	if	1	;There is more than 1 active tblptr byte
 33863  006B42  0EF3               	movlw	high _MAX_NUM_NOTES
 33864  006B44  6EF7               	movwf	tblptrh,c
 33865  006B46                     	endif
 33866  006B46                     	if	0	;There are less than 3 active tblptr bytes
 33867  006B46                     	endif
 33868  006B46  0008               	tblrd		*
 33869  006B48  CFF5 F02E          	movff	tablat,_NUM_NOTES_PRESSED
 33870  006B4C  0012               	return	
 33871  006B4E                     __end_of_add_notes_to_arpeggio:
 33872                           	opt stack 0
 33873                           tblptru	equ	0xFF8
 33874                           tblptrh	equ	0xFF7
 33875                           tblptrl	equ	0xFF6
 33876                           tablat	equ	0xFF5
 33877                           prodh	equ	0xFF4
 33878                           prodl	equ	0xFF3
 33879                           intcon	equ	0xFF2
 33880                           intcon2	equ	0xFF1
 33881                           indf0	equ	0xFEF
 33882                           postinc0	equ	0xFEE
 33883                           fsr0h	equ	0xFEA
 33884                           fsr0l	equ	0xFE9
 33885                           wreg	equ	0xFE8
 33886                           postinc1	equ	0xFE6
 33887                           postdec1	equ	0xFE5
 33888                           plusw1	equ	0xFE3
 33889                           fsr1h	equ	0xFE2
 33890                           fsr1l	equ	0xFE1
 33891                           indf2	equ	0xFDF
 33892                           postinc2	equ	0xFDE
 33893                           postdec2	equ	0xFDD
 33894                           plusw2	equ	0xFDB
 33895                           fsr2h	equ	0xFDA
 33896                           fsr2l	equ	0xFD9
 33897                           status	equ	0xFD8
 33898                           
 33899 ;; *************** function _rotateArrayLeft *****************
 33900 ;; Defined at:
 33901 ;;		line 584 in file "arpeggio.c"
 33902 ;; Parameters:    Size  Location     Type
 33903 ;;  array_index     1    wreg     unsigned char 
 33904 ;; Auto vars:     Size  Location     Type
 33905 ;;  array_index     1    7[BANK0 ] unsigned char 
 33906 ;;  i               1    8[BANK0 ] unsigned char 
 33907 ;; Return value:  Size  Location     Type
 33908 ;;                  1    wreg      void 
 33909 ;; Registers used:
 33910 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 33911 ;; Tracked objects:
 33912 ;;		On entry : 0/0
 33913 ;;		On exit  : 0/0
 33914 ;;		Unchanged: 0/0
 33915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 33916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33917 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33918 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33919 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 33920 ;;Total ram usage:        9 bytes
 33921 ;; Hardware stack levels used:    1
 33922 ;; Hardware stack levels required when called:    5
 33923 ;; This function calls:
 33924 ;;		Nothing
 33925 ;; This function is called by:
 33926 ;;		_add_notes_to_arpeggio
 33927 ;;		_delete_notes_from_arpeggio
 33928 ;; This function uses a non-reentrant model
 33929 ;;
 33930                           
 33931                           	psect	text93
 33932  008962                     __ptext93:
 33933                           	opt stack 0
 33934  008962                     _rotateArrayLeft:
 33935                           	opt stack 17
 33936                           
 33937                           ; BSR set to: 0
 33938                           ;incstack = 0
 33939                           ;rotateArrayLeft@array_index stored from wreg
 33940  008962  0100               	movlb	0	; () banked
 33941  008964  6F67               	movwf	rotateArrayLeft@array_index& (0+255),b
 33942                           
 33943                           ;arpeggio.c: 607: for(unsigned char i=array_index; i < (MAX_NUM_NOTES - 1) ;i++)
 33944  008966  C067  F068         	movff	rotateArrayLeft@array_index,rotateArrayLeft@i
 33945  00896A  0EFF               	movlw	255
 33946  00896C  0100               	movlb	0	; () banked
 33947  00896E  6F60               	movwf	??_rotateArrayLeft& (0+255),b
 33948  008970  0EFF               	movlw	255
 33949  008972  6F61               	movwf	(??_rotateArrayLeft+1)& (0+255),b
 33950  008974  0E9D               	movlw	low _MAX_NUM_NOTES
 33951  008976  6EF6               	movwf	tblptrl,c
 33952  008978                     	if	1	;There is more than 1 active tblptr byte
 33953  008978  0EF3               	movlw	high _MAX_NUM_NOTES
 33954  00897A  6EF7               	movwf	tblptrh,c
 33955  00897C                     	endif
 33956  00897C                     	if	0	;There are less than 3 active tblptr bytes
 33957  00897C                     	endif
 33958  00897C  0008               	tblrd		*
 33959  00897E  50F5               	movf	tablat,w,c
 33960  008980  6F62               	movwf	(??_rotateArrayLeft+2)& (0+255),b
 33961  008982  6B63               	clrf	(??_rotateArrayLeft+3)& (0+255),b
 33962  008984  5160               	movf	??_rotateArrayLeft& (0+255),w,b
 33963  008986  2762               	addwf	(??_rotateArrayLeft+2)& (0+255),f,b
 33964  008988  5161               	movf	(??_rotateArrayLeft+1)& (0+255),w,b
 33965  00898A  2363               	addwfc	(??_rotateArrayLeft+3)& (0+255),f,b
 33966  00898C  5168               	movf	rotateArrayLeft@i& (0+255),w,b
 33967  00898E  6F64               	movwf	(??_rotateArrayLeft+4)& (0+255),b
 33968  008990  6B65               	clrf	(??_rotateArrayLeft+5)& (0+255),b
 33969  008992  5162               	movf	(??_rotateArrayLeft+2)& (0+255),w,b
 33970  008994  5D64               	subwf	(??_rotateArrayLeft+4)& (0+255),w,b
 33971  008996  5165               	movf	(??_rotateArrayLeft+5)& (0+255),w,b
 33972  008998  0A80               	xorlw	128
 33973  00899A  6F66               	movwf	(??_rotateArrayLeft+6)& (0+255),b
 33974  00899C  5163               	movf	(??_rotateArrayLeft+3)& (0+255),w,b
 33975  00899E  0A80               	xorlw	128
 33976  0089A0  5966               	subwfb	(??_rotateArrayLeft+6)& (0+255),w,b
 33977  0089A2  B0D8               	btfsc	status,0,c
 33978  0089A4  0012               	return	
 33979                           
 33980                           ; BSR set to: 0
 33981                           ;arpeggio.c: 608: {
 33982                           ;arpeggio.c: 609: ARPEGGIO[i]=ARPEGGIO[i+1];
 33983                           
 33984                           ; BSR set to: 0
 33985                           
 33986                           ; BSR set to: 0
 33987  0089A6  5168               	movf	rotateArrayLeft@i& (0+255),w,b
 33988  0089A8  6F60               	movwf	??_rotateArrayLeft& (0+255),b
 33989  0089AA  6B61               	clrf	(??_rotateArrayLeft+1)& (0+255),b
 33990  0089AC  0E01               	movlw	1
 33991  0089AE  2760               	addwf	??_rotateArrayLeft& (0+255),f,b
 33992  0089B0  0E00               	movlw	0
 33993  0089B2  2361               	addwfc	(??_rotateArrayLeft+1)& (0+255),f,b
 33994  0089B4  0E84               	movlw	low _ARPEGGIO
 33995  0089B6  2560               	addwf	??_rotateArrayLeft& (0+255),w,b
 33996  0089B8  6ED9               	movwf	fsr2l,c
 33997  0089BA  0E01               	movlw	high _ARPEGGIO
 33998  0089BC  2161               	addwfc	(??_rotateArrayLeft+1)& (0+255),w,b
 33999  0089BE  6EDA               	movwf	fsr2h,c
 34000  0089C0  5168               	movf	rotateArrayLeft@i& (0+255),w,b
 34001  0089C2  0D01               	mullw	1
 34002  0089C4  0E84               	movlw	low _ARPEGGIO
 34003  0089C6  24F3               	addwf	prodl,w,c
 34004  0089C8  6EE9               	movwf	fsr0l,c
 34005  0089CA  0E01               	movlw	high _ARPEGGIO
 34006  0089CC  20F4               	addwfc	prodh,w,c
 34007  0089CE  6EEA               	movwf	fsr0h,c
 34008  0089D0  CFDF FFEF          	movff	indf2,indf0
 34009                           
 34010                           ; BSR set to: 0
 34011  0089D4  2B68               	incf	rotateArrayLeft@i& (0+255),f,b
 34012                           
 34013                           ; BSR set to: 0
 34014  0089D6  0EFF               	movlw	255
 34015  0089D8  D7CA               	goto	L20
 34016  0089DA                     __end_of_rotateArrayLeft:
 34017                           	opt stack 0
 34018                           tblptru	equ	0xFF8
 34019                           tblptrh	equ	0xFF7
 34020                           tblptrl	equ	0xFF6
 34021                           tablat	equ	0xFF5
 34022                           prodh	equ	0xFF4
 34023                           prodl	equ	0xFF3
 34024                           intcon	equ	0xFF2
 34025                           intcon2	equ	0xFF1
 34026                           indf0	equ	0xFEF
 34027                           postinc0	equ	0xFEE
 34028                           fsr0h	equ	0xFEA
 34029                           fsr0l	equ	0xFE9
 34030                           wreg	equ	0xFE8
 34031                           postinc1	equ	0xFE6
 34032                           postdec1	equ	0xFE5
 34033                           plusw1	equ	0xFE3
 34034                           fsr1h	equ	0xFE2
 34035                           fsr1l	equ	0xFE1
 34036                           indf2	equ	0xFDF
 34037                           postinc2	equ	0xFDE
 34038                           postdec2	equ	0xFDD
 34039                           plusw2	equ	0xFDB
 34040                           fsr2h	equ	0xFDA
 34041                           fsr2l	equ	0xFD9
 34042                           status	equ	0xFD8
 34043                           
 34044 ;; *************** function _processDrumpad *****************
 34045 ;; Defined at:
 34046 ;;		line 21 in file "drum.c"
 34047 ;; Parameters:    Size  Location     Type
 34048 ;;		None
 34049 ;; Auto vars:     Size  Location     Type
 34050 ;;		None
 34051 ;; Return value:  Size  Location     Type
 34052 ;;                  1    wreg      void 
 34053 ;; Registers used:
 34054 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
 34055 ;; Tracked objects:
 34056 ;;		On entry : 0/0
 34057 ;;		On exit  : 0/0
 34058 ;;		Unchanged: 0/0
 34059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34064 ;;Total ram usage:        0 bytes
 34065 ;; Hardware stack levels used:    1
 34066 ;; Hardware stack levels required when called:    9
 34067 ;; This function calls:
 34068 ;;		_controlChange
 34069 ;;		_noteOffDrum
 34070 ;;		_noteOnDrum
 34071 ;; This function is called by:
 34072 ;;		_digitalInputs
 34073 ;; This function uses a non-reentrant model
 34074 ;;
 34075                           
 34076                           	psect	text94
 34077  0022DC                     __ptext94:
 34078                           	opt stack 0
 34079  0022DC                     _processDrumpad:
 34080                           	opt stack 17
 34081                           
 34082                           ;drum.c: 25: if((drum_button_state_now & 0x01) && !(button_state_now & 0x08000000) && !d
      +                          rum.SW1){
 34083                           
 34084                           ; BSR set to: 0
 34085                           ;incstack = 0
 34086  0022DC  A038               	btfss	_drum_button_state_now,0,c
 34087  0022DE  D034               	goto	l2374
 34088  0022E0  0100               	movlb	0	; () banked
 34089  0022E2  A7DC               	btfss	(_button_state_now+3)& (0+255),3,b
 34090                           
 34091                           ; BSR set to: 0
 34092  0022E4  B036               	btfsc	_drum,0,c
 34093  0022E6  D030               	goto	l2374
 34094                           
 34095                           ; BSR set to: 0
 34096                           ;drum.c: 26: drum.SW1 = 1;
 34097  0022E8  8036               	bsf	_drum,0,c
 34098                           
 34099                           ;drum.c: 27: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[0],velocity);}
 34100  0022EA  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34101  0022EC  D007               	goto	l2375
 34102                           
 34103                           ; BSR set to: 0
 34104  0022EE  C1EA  F060         	movff	_DRUM_NOTE,noteOnDrum@pitch
 34105  0022F2  C050  F061         	movff	_velocity,noteOnDrum@velocity
 34106  0022F6  5051               	movf	_drumchannel,w,c
 34107  0022F8  EC45  F049         	call	_noteOnDrum
 34108  0022FC                     l2375:
 34109                           
 34110                           ;drum.c: 28: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[0], 
      +                          127);}
 34111  0022FC  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34112  0022FE  AE01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34113  002300  D008               	goto	l2376
 34114  002302  C0F5  F060         	movff	_DRUM_CC,controlChange@controllerNumber
 34115  002306  0E7F               	movlw	127
 34116  002308  0100               	movlb	0	; () banked
 34117  00230A  6F61               	movwf	controlChange@value& (0+255),b
 34118  00230C  503D               	movf	_channel,w,c
 34119  00230E  EC19  F049         	call	_controlChange
 34120  002312                     l2376:
 34121                           
 34122                           ;drum.c: 29: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T1 == 0) {controlChan
      +                          ge(channel,DRUM_CC[0], 127);}
 34123  002312  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34124  002314  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34125  002316  D00A               	goto	l2377
 34126  002318  B02C               	btfsc	_toggle_state,0,c
 34127  00231A  D008               	goto	l2377
 34128  00231C  C0F5  F060         	movff	_DRUM_CC,controlChange@controllerNumber
 34129  002320  0E7F               	movlw	127
 34130  002322  0100               	movlb	0	; () banked
 34131  002324  6F61               	movwf	controlChange@value& (0+255),b
 34132  002326  503D               	movf	_channel,w,c
 34133  002328  EC19  F049         	call	_controlChange
 34134  00232C                     l2377:
 34135                           
 34136                           ;drum.c: 30: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T1 == 1) {controlChan
      +                          ge(channel,DRUM_CC[0], 0);}
 34137  00232C  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34138  00232E  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34139  002330  D00A               	goto	l2378
 34140  002332  A02C               	btfss	_toggle_state,0,c
 34141  002334  D008               	goto	l2378
 34142  002336  C0F5  F060         	movff	_DRUM_CC,controlChange@controllerNumber
 34143  00233A  0E00               	movlw	0
 34144  00233C  0100               	movlb	0	; () banked
 34145  00233E  6F61               	movwf	controlChange@value& (0+255),b
 34146  002340  503D               	movf	_channel,w,c
 34147  002342  EC19  F049         	call	_controlChange
 34148  002346                     l2378:
 34149                           
 34150                           ;drum.c: 31: toggle_state.T1 ^= 1;
 34151  002346  702C               	btg	_toggle_state,0,c
 34152  002348                     l2374:
 34153                           
 34154                           ;drum.c: 32: }
 34155                           ;drum.c: 33: if(((drum_button_state_now) & 0x02) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW2) {
 34156  002348  A238               	btfss	_drum_button_state_now,1,c
 34157  00234A  D034               	goto	l2379
 34158  00234C  0100               	movlb	0	; () banked
 34159  00234E  A7DC               	btfss	(_button_state_now+3)& (0+255),3,b
 34160                           
 34161                           ; BSR set to: 0
 34162  002350  B236               	btfsc	_drum,1,c
 34163  002352  D030               	goto	l2379
 34164                           
 34165                           ; BSR set to: 0
 34166                           ;drum.c: 34: drum.SW2 = 1;
 34167  002354  8236               	bsf	_drum,1,c
 34168                           
 34169                           ;drum.c: 35: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[1],velocity);}
 34170  002356  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34171  002358  D007               	goto	l2380
 34172                           
 34173                           ; BSR set to: 0
 34174  00235A  C1EB  F060         	movff	_DRUM_NOTE+1,noteOnDrum@pitch
 34175  00235E  C050  F061         	movff	_velocity,noteOnDrum@velocity
 34176  002362  5051               	movf	_drumchannel,w,c
 34177  002364  EC45  F049         	call	_noteOnDrum
 34178  002368                     l2380:
 34179                           
 34180                           ;drum.c: 36: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[1], 
      +                          127);}
 34181  002368  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34182  00236A  AE01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34183  00236C  D008               	goto	l2381
 34184  00236E  C0F6  F060         	movff	_DRUM_CC+1,controlChange@controllerNumber
 34185  002372  0E7F               	movlw	127
 34186  002374  0100               	movlb	0	; () banked
 34187  002376  6F61               	movwf	controlChange@value& (0+255),b
 34188  002378  503D               	movf	_channel,w,c
 34189  00237A  EC19  F049         	call	_controlChange
 34190  00237E                     l2381:
 34191                           
 34192                           ;drum.c: 37: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T2 == 0) {controlChan
      +                          ge(channel,DRUM_CC[1], 127);}
 34193  00237E  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34194  002380  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34195  002382  D00A               	goto	l2382
 34196  002384  B22C               	btfsc	_toggle_state,1,c
 34197  002386  D008               	goto	l2382
 34198  002388  C0F6  F060         	movff	_DRUM_CC+1,controlChange@controllerNumber
 34199  00238C  0E7F               	movlw	127
 34200  00238E  0100               	movlb	0	; () banked
 34201  002390  6F61               	movwf	controlChange@value& (0+255),b
 34202  002392  503D               	movf	_channel,w,c
 34203  002394  EC19  F049         	call	_controlChange
 34204  002398                     l2382:
 34205                           
 34206                           ;drum.c: 38: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T2 == 1) {controlChan
      +                          ge(channel,DRUM_CC[1], 0);}
 34207  002398  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34208  00239A  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34209  00239C  D00A               	goto	l2383
 34210  00239E  A22C               	btfss	_toggle_state,1,c
 34211  0023A0  D008               	goto	l2383
 34212  0023A2  C0F6  F060         	movff	_DRUM_CC+1,controlChange@controllerNumber
 34213  0023A6  0E00               	movlw	0
 34214  0023A8  0100               	movlb	0	; () banked
 34215  0023AA  6F61               	movwf	controlChange@value& (0+255),b
 34216  0023AC  503D               	movf	_channel,w,c
 34217  0023AE  EC19  F049         	call	_controlChange
 34218  0023B2                     l2383:
 34219                           
 34220                           ;drum.c: 39: toggle_state.T2 ^= 1;
 34221  0023B2  722C               	btg	_toggle_state,1,c
 34222  0023B4                     l2379:
 34223                           
 34224                           ;drum.c: 40: }
 34225                           ;drum.c: 41: if(((drum_button_state_now) & 0x04) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW3) {
 34226  0023B4  A438               	btfss	_drum_button_state_now,2,c
 34227  0023B6  D034               	goto	l2384
 34228  0023B8  0100               	movlb	0	; () banked
 34229  0023BA  A7DC               	btfss	(_button_state_now+3)& (0+255),3,b
 34230                           
 34231                           ; BSR set to: 0
 34232  0023BC  B436               	btfsc	_drum,2,c
 34233  0023BE  D030               	goto	l2384
 34234                           
 34235                           ; BSR set to: 0
 34236                           ;drum.c: 42: drum.SW3 = 1;
 34237  0023C0  8436               	bsf	_drum,2,c
 34238                           
 34239                           ;drum.c: 43: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[2],velocity);}
 34240  0023C2  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34241  0023C4  D007               	goto	l2385
 34242                           
 34243                           ; BSR set to: 0
 34244  0023C6  C1EC  F060         	movff	_DRUM_NOTE+2,noteOnDrum@pitch
 34245  0023CA  C050  F061         	movff	_velocity,noteOnDrum@velocity
 34246  0023CE  5051               	movf	_drumchannel,w,c
 34247  0023D0  EC45  F049         	call	_noteOnDrum
 34248  0023D4                     l2385:
 34249                           
 34250                           ;drum.c: 44: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[2], 
      +                          127);}
 34251  0023D4  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34252  0023D6  AE01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34253  0023D8  D008               	goto	l2386
 34254  0023DA  C0F7  F060         	movff	_DRUM_CC+2,controlChange@controllerNumber
 34255  0023DE  0E7F               	movlw	127
 34256  0023E0  0100               	movlb	0	; () banked
 34257  0023E2  6F61               	movwf	controlChange@value& (0+255),b
 34258  0023E4  503D               	movf	_channel,w,c
 34259  0023E6  EC19  F049         	call	_controlChange
 34260  0023EA                     l2386:
 34261                           
 34262                           ;drum.c: 45: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T3 == 0) {controlChan
      +                          ge(channel,DRUM_CC[2], 127);}
 34263  0023EA  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34264  0023EC  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34265  0023EE  D00A               	goto	l2387
 34266  0023F0  B42C               	btfsc	_toggle_state,2,c
 34267  0023F2  D008               	goto	l2387
 34268  0023F4  C0F7  F060         	movff	_DRUM_CC+2,controlChange@controllerNumber
 34269  0023F8  0E7F               	movlw	127
 34270  0023FA  0100               	movlb	0	; () banked
 34271  0023FC  6F61               	movwf	controlChange@value& (0+255),b
 34272  0023FE  503D               	movf	_channel,w,c
 34273  002400  EC19  F049         	call	_controlChange
 34274  002404                     l2387:
 34275                           
 34276                           ;drum.c: 46: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T3 == 1) {controlChan
      +                          ge(channel,DRUM_CC[2], 0);}
 34277  002404  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34278  002406  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34279  002408  D00A               	goto	l2388
 34280  00240A  A42C               	btfss	_toggle_state,2,c
 34281  00240C  D008               	goto	l2388
 34282  00240E  C0F7  F060         	movff	_DRUM_CC+2,controlChange@controllerNumber
 34283  002412  0E00               	movlw	0
 34284  002414  0100               	movlb	0	; () banked
 34285  002416  6F61               	movwf	controlChange@value& (0+255),b
 34286  002418  503D               	movf	_channel,w,c
 34287  00241A  EC19  F049         	call	_controlChange
 34288  00241E                     l2388:
 34289                           
 34290                           ;drum.c: 47: toggle_state.T3 ^= 1;
 34291  00241E  742C               	btg	_toggle_state,2,c
 34292  002420                     l2384:
 34293                           
 34294                           ;drum.c: 48: }
 34295                           ;drum.c: 49: if(((drum_button_state_now) & 0x08) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW4) {
 34296  002420  A638               	btfss	_drum_button_state_now,3,c
 34297  002422  D034               	goto	l2389
 34298  002424  0100               	movlb	0	; () banked
 34299  002426  A7DC               	btfss	(_button_state_now+3)& (0+255),3,b
 34300                           
 34301                           ; BSR set to: 0
 34302  002428  B636               	btfsc	_drum,3,c
 34303  00242A  D030               	goto	l2389
 34304                           
 34305                           ; BSR set to: 0
 34306                           ;drum.c: 50: drum.SW4 = 1;
 34307  00242C  8636               	bsf	_drum,3,c
 34308                           
 34309                           ;drum.c: 51: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[3],velocity);}
 34310  00242E  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34311  002430  D007               	goto	l2390
 34312                           
 34313                           ; BSR set to: 0
 34314  002432  C1ED  F060         	movff	_DRUM_NOTE+3,noteOnDrum@pitch
 34315  002436  C050  F061         	movff	_velocity,noteOnDrum@velocity
 34316  00243A  5051               	movf	_drumchannel,w,c
 34317  00243C  EC45  F049         	call	_noteOnDrum
 34318  002440                     l2390:
 34319                           
 34320                           ;drum.c: 52: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[3], 
      +                          127);}
 34321  002440  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34322  002442  AE01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34323  002444  D008               	goto	l2391
 34324  002446  C0F8  F060         	movff	_DRUM_CC+3,controlChange@controllerNumber
 34325  00244A  0E7F               	movlw	127
 34326  00244C  0100               	movlb	0	; () banked
 34327  00244E  6F61               	movwf	controlChange@value& (0+255),b
 34328  002450  503D               	movf	_channel,w,c
 34329  002452  EC19  F049         	call	_controlChange
 34330  002456                     l2391:
 34331                           
 34332                           ;drum.c: 53: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T4 == 0) {controlChan
      +                          ge(channel,DRUM_CC[3], 127);}
 34333  002456  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34334  002458  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34335  00245A  D00A               	goto	l2392
 34336  00245C  B62C               	btfsc	_toggle_state,3,c
 34337  00245E  D008               	goto	l2392
 34338  002460  C0F8  F060         	movff	_DRUM_CC+3,controlChange@controllerNumber
 34339  002464  0E7F               	movlw	127
 34340  002466  0100               	movlb	0	; () banked
 34341  002468  6F61               	movwf	controlChange@value& (0+255),b
 34342  00246A  503D               	movf	_channel,w,c
 34343  00246C  EC19  F049         	call	_controlChange
 34344  002470                     l2392:
 34345                           
 34346                           ;drum.c: 54: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T4 == 1) {controlChan
      +                          ge(channel,DRUM_CC[3], 0);}
 34347  002470  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34348  002472  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34349  002474  D00A               	goto	l2393
 34350  002476  A62C               	btfss	_toggle_state,3,c
 34351  002478  D008               	goto	l2393
 34352  00247A  C0F8  F060         	movff	_DRUM_CC+3,controlChange@controllerNumber
 34353  00247E  0E00               	movlw	0
 34354  002480  0100               	movlb	0	; () banked
 34355  002482  6F61               	movwf	controlChange@value& (0+255),b
 34356  002484  503D               	movf	_channel,w,c
 34357  002486  EC19  F049         	call	_controlChange
 34358  00248A                     l2393:
 34359                           
 34360                           ;drum.c: 55: toggle_state.T4 ^= 1;
 34361  00248A  762C               	btg	_toggle_state,3,c
 34362  00248C                     l2389:
 34363                           
 34364                           ;drum.c: 56: }
 34365                           ;drum.c: 57: if(((drum_button_state_now) & 0x10) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW5){
 34366  00248C  A838               	btfss	_drum_button_state_now,4,c
 34367  00248E  D034               	goto	l2394
 34368  002490  0100               	movlb	0	; () banked
 34369  002492  A7DC               	btfss	(_button_state_now+3)& (0+255),3,b
 34370                           
 34371                           ; BSR set to: 0
 34372  002494  B836               	btfsc	_drum,4,c
 34373  002496  D030               	goto	l2394
 34374                           
 34375                           ; BSR set to: 0
 34376                           ;drum.c: 58: drum.SW5 = 1;
 34377  002498  8836               	bsf	_drum,4,c
 34378                           
 34379                           ;drum.c: 59: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[4],velocity);}
 34380  00249A  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34381  00249C  D007               	goto	l2395
 34382                           
 34383                           ; BSR set to: 0
 34384  00249E  C1EE  F060         	movff	_DRUM_NOTE+4,noteOnDrum@pitch
 34385  0024A2  C050  F061         	movff	_velocity,noteOnDrum@velocity
 34386  0024A6  5051               	movf	_drumchannel,w,c
 34387  0024A8  EC45  F049         	call	_noteOnDrum
 34388  0024AC                     l2395:
 34389                           
 34390                           ;drum.c: 60: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[4], 
      +                          127);}
 34391  0024AC  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34392  0024AE  AE01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34393  0024B0  D008               	goto	l2396
 34394  0024B2  C0F9  F060         	movff	_DRUM_CC+4,controlChange@controllerNumber
 34395  0024B6  0E7F               	movlw	127
 34396  0024B8  0100               	movlb	0	; () banked
 34397  0024BA  6F61               	movwf	controlChange@value& (0+255),b
 34398  0024BC  503D               	movf	_channel,w,c
 34399  0024BE  EC19  F049         	call	_controlChange
 34400  0024C2                     l2396:
 34401                           
 34402                           ;drum.c: 61: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T5 == 0) {controlChan
      +                          ge(channel,DRUM_CC[4], 127);}
 34403  0024C2  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34404  0024C4  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34405  0024C6  D00A               	goto	l2397
 34406  0024C8  B82C               	btfsc	_toggle_state,4,c
 34407  0024CA  D008               	goto	l2397
 34408  0024CC  C0F9  F060         	movff	_DRUM_CC+4,controlChange@controllerNumber
 34409  0024D0  0E7F               	movlw	127
 34410  0024D2  0100               	movlb	0	; () banked
 34411  0024D4  6F61               	movwf	controlChange@value& (0+255),b
 34412  0024D6  503D               	movf	_channel,w,c
 34413  0024D8  EC19  F049         	call	_controlChange
 34414  0024DC                     l2397:
 34415                           
 34416                           ;drum.c: 62: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T5 == 1) {controlChan
      +                          ge(channel,DRUM_CC[4], 0);}
 34417  0024DC  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34418  0024DE  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34419  0024E0  D00A               	goto	l2398
 34420  0024E2  A82C               	btfss	_toggle_state,4,c
 34421  0024E4  D008               	goto	l2398
 34422  0024E6  C0F9  F060         	movff	_DRUM_CC+4,controlChange@controllerNumber
 34423  0024EA  0E00               	movlw	0
 34424  0024EC  0100               	movlb	0	; () banked
 34425  0024EE  6F61               	movwf	controlChange@value& (0+255),b
 34426  0024F0  503D               	movf	_channel,w,c
 34427  0024F2  EC19  F049         	call	_controlChange
 34428  0024F6                     l2398:
 34429                           
 34430                           ;drum.c: 63: toggle_state.T5 ^= 1;
 34431  0024F6  782C               	btg	_toggle_state,4,c
 34432  0024F8                     l2394:
 34433                           
 34434                           ;drum.c: 64: }
 34435                           ;drum.c: 65: if(((drum_button_state_now) & 0x20) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW6) {
 34436  0024F8  AA38               	btfss	_drum_button_state_now,5,c
 34437  0024FA  D034               	goto	l2399
 34438  0024FC  0100               	movlb	0	; () banked
 34439  0024FE  A7DC               	btfss	(_button_state_now+3)& (0+255),3,b
 34440                           
 34441                           ; BSR set to: 0
 34442  002500  BA36               	btfsc	_drum,5,c
 34443  002502  D030               	goto	l2399
 34444                           
 34445                           ; BSR set to: 0
 34446                           ;drum.c: 66: drum.SW6 = 1;
 34447  002504  8A36               	bsf	_drum,5,c
 34448                           
 34449                           ;drum.c: 67: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[5],velocity);}
 34450  002506  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34451  002508  D007               	goto	l2400
 34452                           
 34453                           ; BSR set to: 0
 34454  00250A  C1EF  F060         	movff	_DRUM_NOTE+5,noteOnDrum@pitch
 34455  00250E  C050  F061         	movff	_velocity,noteOnDrum@velocity
 34456  002512  5051               	movf	_drumchannel,w,c
 34457  002514  EC45  F049         	call	_noteOnDrum
 34458  002518                     l2400:
 34459                           
 34460                           ;drum.c: 68: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[5], 
      +                          127);}
 34461  002518  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34462  00251A  AE01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34463  00251C  D008               	goto	l2401
 34464  00251E  C0FA  F060         	movff	_DRUM_CC+5,controlChange@controllerNumber
 34465  002522  0E7F               	movlw	127
 34466  002524  0100               	movlb	0	; () banked
 34467  002526  6F61               	movwf	controlChange@value& (0+255),b
 34468  002528  503D               	movf	_channel,w,c
 34469  00252A  EC19  F049         	call	_controlChange
 34470  00252E                     l2401:
 34471                           
 34472                           ;drum.c: 69: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T6 == 0) {controlChan
      +                          ge(channel,DRUM_CC[5], 127);}
 34473  00252E  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34474  002530  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34475  002532  D00A               	goto	l2402
 34476  002534  BA2C               	btfsc	_toggle_state,5,c
 34477  002536  D008               	goto	l2402
 34478  002538  C0FA  F060         	movff	_DRUM_CC+5,controlChange@controllerNumber
 34479  00253C  0E7F               	movlw	127
 34480  00253E  0100               	movlb	0	; () banked
 34481  002540  6F61               	movwf	controlChange@value& (0+255),b
 34482  002542  503D               	movf	_channel,w,c
 34483  002544  EC19  F049         	call	_controlChange
 34484  002548                     l2402:
 34485                           
 34486                           ;drum.c: 70: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T6 == 1) {controlChan
      +                          ge(channel,DRUM_CC[5], 0);}
 34487  002548  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34488  00254A  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34489  00254C  D00A               	goto	l2403
 34490  00254E  AA2C               	btfss	_toggle_state,5,c
 34491  002550  D008               	goto	l2403
 34492  002552  C0FA  F060         	movff	_DRUM_CC+5,controlChange@controllerNumber
 34493  002556  0E00               	movlw	0
 34494  002558  0100               	movlb	0	; () banked
 34495  00255A  6F61               	movwf	controlChange@value& (0+255),b
 34496  00255C  503D               	movf	_channel,w,c
 34497  00255E  EC19  F049         	call	_controlChange
 34498  002562                     l2403:
 34499                           
 34500                           ;drum.c: 71: toggle_state.T6 ^= 1;
 34501  002562  7A2C               	btg	_toggle_state,5,c
 34502  002564                     l2399:
 34503                           
 34504                           ;drum.c: 72: }
 34505                           ;drum.c: 73: if(((drum_button_state_now) & 0x40) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW7) {
 34506  002564  AC38               	btfss	_drum_button_state_now,6,c
 34507  002566  D034               	goto	l2404
 34508  002568  0100               	movlb	0	; () banked
 34509  00256A  A7DC               	btfss	(_button_state_now+3)& (0+255),3,b
 34510                           
 34511                           ; BSR set to: 0
 34512  00256C  BC36               	btfsc	_drum,6,c
 34513  00256E  D030               	goto	l2404
 34514                           
 34515                           ; BSR set to: 0
 34516                           ;drum.c: 74: drum.SW7 = 1;
 34517  002570  8C36               	bsf	_drum,6,c
 34518                           
 34519                           ;drum.c: 75: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[6],velocity);}
 34520  002572  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34521  002574  D007               	goto	l2405
 34522                           
 34523                           ; BSR set to: 0
 34524  002576  C1F0  F060         	movff	_DRUM_NOTE+6,noteOnDrum@pitch
 34525  00257A  C050  F061         	movff	_velocity,noteOnDrum@velocity
 34526  00257E  5051               	movf	_drumchannel,w,c
 34527  002580  EC45  F049         	call	_noteOnDrum
 34528  002584                     l2405:
 34529                           
 34530                           ;drum.c: 76: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[6], 
      +                          127);}
 34531  002584  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34532  002586  AE01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34533  002588  D008               	goto	l2406
 34534  00258A  C0FB  F060         	movff	_DRUM_CC+6,controlChange@controllerNumber
 34535  00258E  0E7F               	movlw	127
 34536  002590  0100               	movlb	0	; () banked
 34537  002592  6F61               	movwf	controlChange@value& (0+255),b
 34538  002594  503D               	movf	_channel,w,c
 34539  002596  EC19  F049         	call	_controlChange
 34540  00259A                     l2406:
 34541                           
 34542                           ;drum.c: 77: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T7 == 0) {controlChan
      +                          ge(channel,DRUM_CC[6], 127);}
 34543  00259A  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34544  00259C  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34545  00259E  D00A               	goto	l2407
 34546  0025A0  BC2C               	btfsc	_toggle_state,6,c
 34547  0025A2  D008               	goto	l2407
 34548  0025A4  C0FB  F060         	movff	_DRUM_CC+6,controlChange@controllerNumber
 34549  0025A8  0E7F               	movlw	127
 34550  0025AA  0100               	movlb	0	; () banked
 34551  0025AC  6F61               	movwf	controlChange@value& (0+255),b
 34552  0025AE  503D               	movf	_channel,w,c
 34553  0025B0  EC19  F049         	call	_controlChange
 34554  0025B4                     l2407:
 34555                           
 34556                           ;drum.c: 78: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T7 == 1) {controlChan
      +                          ge(channel,DRUM_CC[6], 0);}
 34557  0025B4  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34558  0025B6  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34559  0025B8  D00A               	goto	l2408
 34560  0025BA  AC2C               	btfss	_toggle_state,6,c
 34561  0025BC  D008               	goto	l2408
 34562  0025BE  C0FB  F060         	movff	_DRUM_CC+6,controlChange@controllerNumber
 34563  0025C2  0E00               	movlw	0
 34564  0025C4  0100               	movlb	0	; () banked
 34565  0025C6  6F61               	movwf	controlChange@value& (0+255),b
 34566  0025C8  503D               	movf	_channel,w,c
 34567  0025CA  EC19  F049         	call	_controlChange
 34568  0025CE                     l2408:
 34569                           
 34570                           ;drum.c: 79: toggle_state.T7 ^= 1;
 34571  0025CE  7C2C               	btg	_toggle_state,6,c
 34572  0025D0                     l2404:
 34573                           
 34574                           ;drum.c: 80: }
 34575                           ;drum.c: 81: if(((drum_button_state_now) & 0x80) && !(button_state_now & 0x08000000) && 
      +                          !drum.SW8) {
 34576  0025D0  AE38               	btfss	_drum_button_state_now,7,c
 34577  0025D2  D034               	goto	l2409
 34578  0025D4  0100               	movlb	0	; () banked
 34579  0025D6  A7DC               	btfss	(_button_state_now+3)& (0+255),3,b
 34580                           
 34581                           ; BSR set to: 0
 34582  0025D8  BE36               	btfsc	_drum,7,c
 34583  0025DA  D030               	goto	l2409
 34584                           
 34585                           ; BSR set to: 0
 34586                           ;drum.c: 82: drum.SW8 = 1;
 34587  0025DC  8E36               	bsf	_drum,7,c
 34588                           
 34589                           ;drum.c: 83: if (DRUM_MODE == 0) {noteOnDrum(drumchannel,DRUM_NOTE[7],velocity);}
 34590  0025DE  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34591  0025E0  D007               	goto	l2410
 34592                           
 34593                           ; BSR set to: 0
 34594  0025E2  C1F1  F060         	movff	_DRUM_NOTE+7,noteOnDrum@pitch
 34595  0025E6  C050  F061         	movff	_velocity,noteOnDrum@velocity
 34596  0025EA  5051               	movf	_drumchannel,w,c
 34597  0025EC  EC45  F049         	call	_noteOnDrum
 34598  0025F0                     l2410:
 34599                           
 34600                           ;drum.c: 84: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[7], 
      +                          127);}
 34601  0025F0  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34602  0025F2  AE01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34603  0025F4  D008               	goto	l2411
 34604  0025F6  C0FC  F060         	movff	_DRUM_CC+7,controlChange@controllerNumber
 34605  0025FA  0E7F               	movlw	127
 34606  0025FC  0100               	movlb	0	; () banked
 34607  0025FE  6F61               	movwf	controlChange@value& (0+255),b
 34608  002600  503D               	movf	_channel,w,c
 34609  002602  EC19  F049         	call	_controlChange
 34610  002606                     l2411:
 34611                           
 34612                           ;drum.c: 85: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T8 == 0) {controlChan
      +                          ge(channel,DRUM_CC[7], 127);}
 34613  002606  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34614  002608  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34615  00260A  D00A               	goto	l2412
 34616  00260C  BE2C               	btfsc	_toggle_state,7,c
 34617  00260E  D008               	goto	l2412
 34618  002610  C0FC  F060         	movff	_DRUM_CC+7,controlChange@controllerNumber
 34619  002614  0E7F               	movlw	127
 34620  002616  0100               	movlb	0	; () banked
 34621  002618  6F61               	movwf	controlChange@value& (0+255),b
 34622  00261A  503D               	movf	_channel,w,c
 34623  00261C  EC19  F049         	call	_controlChange
 34624  002620                     l2412:
 34625                           
 34626                           ;drum.c: 86: if (DRUM_MODE == 1 & CONTROL_MODE == 1 & toggle_state.T8 == 1) {controlChan
      +                          ge(channel,DRUM_CC[7], 0);}
 34627  002620  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34628  002622  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34629  002624  D00A               	goto	l2413
 34630  002626  AE2C               	btfss	_toggle_state,7,c
 34631  002628  D008               	goto	l2413
 34632  00262A  C0FC  F060         	movff	_DRUM_CC+7,controlChange@controllerNumber
 34633  00262E  0E00               	movlw	0
 34634  002630  0100               	movlb	0	; () banked
 34635  002632  6F61               	movwf	controlChange@value& (0+255),b
 34636  002634  503D               	movf	_channel,w,c
 34637  002636  EC19  F049         	call	_controlChange
 34638  00263A                     l2413:
 34639                           
 34640                           ;drum.c: 87: toggle_state.T8 ^= 1;
 34641  00263A  7E2C               	btg	_toggle_state,7,c
 34642  00263C                     l2409:
 34643                           
 34644                           ;drum.c: 88: }
 34645                           ;drum.c: 91: if(((drum_button_state_last & 0x01)) && ((drum_button_state_now & 0x01) == 
      +                          0) && drum.SW1) {
 34646  00263C  B037               	btfsc	_drum_button_state_last,0,c
 34647  00263E  B038               	btfsc	_drum_button_state_now,0,c
 34648  002640  D017               	goto	l2416
 34649  002642  A036               	btfss	_drum,0,c
 34650  002644  D015               	goto	l2416
 34651                           
 34652                           ;drum.c: 92: drum.SW1 = 0;
 34653  002646  9036               	bcf	_drum,0,c
 34654                           
 34655                           ;drum.c: 93: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[0],velocity);}
 34656  002648  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34657  00264A  D007               	goto	l2415
 34658  00264C  C1EA  F060         	movff	_DRUM_NOTE,noteOffDrum@pitch
 34659  002650  C050  F061         	movff	_velocity,noteOffDrum@velocity
 34660  002654  5051               	movf	_drumchannel,w,c
 34661  002656  ECCA  F04B         	call	_noteOffDrum
 34662  00265A                     l2415:
 34663                           
 34664                           ;drum.c: 94: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[0], 
      +                          0);}
 34665  00265A  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34666  00265C  AE01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34667  00265E  D008               	goto	l2416
 34668  002660  C0F5  F060         	movff	_DRUM_CC,controlChange@controllerNumber
 34669  002664  0E00               	movlw	0
 34670  002666  0100               	movlb	0	; () banked
 34671  002668  6F61               	movwf	controlChange@value& (0+255),b
 34672  00266A  503D               	movf	_channel,w,c
 34673  00266C  EC19  F049         	call	_controlChange
 34674  002670                     l2416:
 34675                           
 34676                           ;drum.c: 95: }
 34677                           ;drum.c: 96: if(((drum_button_state_last & 0x02)) && ((drum_button_state_now & 0x02) == 
      +                          0) && drum.SW2) {
 34678  002670  B237               	btfsc	_drum_button_state_last,1,c
 34679  002672  B238               	btfsc	_drum_button_state_now,1,c
 34680  002674  D017               	goto	l2419
 34681  002676  A236               	btfss	_drum,1,c
 34682  002678  D015               	goto	l2419
 34683                           
 34684                           ;drum.c: 97: drum.SW2 = 0;
 34685  00267A  9236               	bcf	_drum,1,c
 34686                           
 34687                           ;drum.c: 98: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[1],velocity);}
 34688  00267C  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34689  00267E  D007               	goto	l2418
 34690  002680  C1EB  F060         	movff	_DRUM_NOTE+1,noteOffDrum@pitch
 34691  002684  C050  F061         	movff	_velocity,noteOffDrum@velocity
 34692  002688  5051               	movf	_drumchannel,w,c
 34693  00268A  ECCA  F04B         	call	_noteOffDrum
 34694  00268E                     l2418:
 34695                           
 34696                           ;drum.c: 99: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[1], 
      +                          0);}
 34697  00268E  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34698  002690  AE01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34699  002692  D008               	goto	l2419
 34700  002694  C0F6  F060         	movff	_DRUM_CC+1,controlChange@controllerNumber
 34701  002698  0E00               	movlw	0
 34702  00269A  0100               	movlb	0	; () banked
 34703  00269C  6F61               	movwf	controlChange@value& (0+255),b
 34704  00269E  503D               	movf	_channel,w,c
 34705  0026A0  EC19  F049         	call	_controlChange
 34706  0026A4                     l2419:
 34707                           
 34708                           ;drum.c: 100: }
 34709                           ;drum.c: 101: if(((drum_button_state_last & 0x04)) && ((drum_button_state_now & 0x04) ==
      +                           0) && drum.SW3) {
 34710  0026A4  B437               	btfsc	_drum_button_state_last,2,c
 34711  0026A6  B438               	btfsc	_drum_button_state_now,2,c
 34712  0026A8  D017               	goto	l2422
 34713  0026AA  A436               	btfss	_drum,2,c
 34714  0026AC  D015               	goto	l2422
 34715                           
 34716                           ;drum.c: 102: drum.SW3 = 0;
 34717  0026AE  9436               	bcf	_drum,2,c
 34718                           
 34719                           ;drum.c: 103: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[2],velocity);}
 34720  0026B0  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34721  0026B2  D007               	goto	l2421
 34722  0026B4  C1EC  F060         	movff	_DRUM_NOTE+2,noteOffDrum@pitch
 34723  0026B8  C050  F061         	movff	_velocity,noteOffDrum@velocity
 34724  0026BC  5051               	movf	_drumchannel,w,c
 34725  0026BE  ECCA  F04B         	call	_noteOffDrum
 34726  0026C2                     l2421:
 34727                           
 34728                           ;drum.c: 104: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[2],
      +                           0);}
 34729  0026C2  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34730  0026C4  AE01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34731  0026C6  D008               	goto	l2422
 34732  0026C8  C0F7  F060         	movff	_DRUM_CC+2,controlChange@controllerNumber
 34733  0026CC  0E00               	movlw	0
 34734  0026CE  0100               	movlb	0	; () banked
 34735  0026D0  6F61               	movwf	controlChange@value& (0+255),b
 34736  0026D2  503D               	movf	_channel,w,c
 34737  0026D4  EC19  F049         	call	_controlChange
 34738  0026D8                     l2422:
 34739                           
 34740                           ;drum.c: 105: }
 34741                           ;drum.c: 106: if(((drum_button_state_last & 0x08)) && ((drum_button_state_now & 0x08) ==
      +                           0) && drum.SW4) {
 34742  0026D8  B637               	btfsc	_drum_button_state_last,3,c
 34743  0026DA  B638               	btfsc	_drum_button_state_now,3,c
 34744  0026DC  D017               	goto	l2425
 34745  0026DE  A636               	btfss	_drum,3,c
 34746  0026E0  D015               	goto	l2425
 34747                           
 34748                           ;drum.c: 107: drum.SW4 = 0;
 34749  0026E2  9636               	bcf	_drum,3,c
 34750                           
 34751                           ;drum.c: 108: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[3],velocity);}
 34752  0026E4  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34753  0026E6  D007               	goto	l2424
 34754  0026E8  C1ED  F060         	movff	_DRUM_NOTE+3,noteOffDrum@pitch
 34755  0026EC  C050  F061         	movff	_velocity,noteOffDrum@velocity
 34756  0026F0  5051               	movf	_drumchannel,w,c
 34757  0026F2  ECCA  F04B         	call	_noteOffDrum
 34758  0026F6                     l2424:
 34759                           
 34760                           ;drum.c: 109: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[3],
      +                           0);}
 34761  0026F6  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34762  0026F8  AE01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34763  0026FA  D008               	goto	l2425
 34764  0026FC  C0F8  F060         	movff	_DRUM_CC+3,controlChange@controllerNumber
 34765  002700  0E00               	movlw	0
 34766  002702  0100               	movlb	0	; () banked
 34767  002704  6F61               	movwf	controlChange@value& (0+255),b
 34768  002706  503D               	movf	_channel,w,c
 34769  002708  EC19  F049         	call	_controlChange
 34770  00270C                     l2425:
 34771                           
 34772                           ;drum.c: 110: }
 34773                           ;drum.c: 111: if(((drum_button_state_last & 0x10)) && ((drum_button_state_now & 0x10) ==
      +                           0) && drum.SW5) {
 34774  00270C  B837               	btfsc	_drum_button_state_last,4,c
 34775  00270E  B838               	btfsc	_drum_button_state_now,4,c
 34776  002710  D017               	goto	l2428
 34777  002712  A836               	btfss	_drum,4,c
 34778  002714  D015               	goto	l2428
 34779                           
 34780                           ;drum.c: 112: drum.SW5 = 0;
 34781  002716  9836               	bcf	_drum,4,c
 34782                           
 34783                           ;drum.c: 113: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[4],velocity);}
 34784  002718  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34785  00271A  D007               	goto	l2427
 34786  00271C  C1EE  F060         	movff	_DRUM_NOTE+4,noteOffDrum@pitch
 34787  002720  C050  F061         	movff	_velocity,noteOffDrum@velocity
 34788  002724  5051               	movf	_drumchannel,w,c
 34789  002726  ECCA  F04B         	call	_noteOffDrum
 34790  00272A                     l2427:
 34791                           
 34792                           ;drum.c: 114: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[4],
      +                           0);}
 34793  00272A  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34794  00272C  AE01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34795  00272E  D008               	goto	l2428
 34796  002730  C0F9  F060         	movff	_DRUM_CC+4,controlChange@controllerNumber
 34797  002734  0E00               	movlw	0
 34798  002736  0100               	movlb	0	; () banked
 34799  002738  6F61               	movwf	controlChange@value& (0+255),b
 34800  00273A  503D               	movf	_channel,w,c
 34801  00273C  EC19  F049         	call	_controlChange
 34802  002740                     l2428:
 34803                           
 34804                           ;drum.c: 115: }
 34805                           ;drum.c: 116: if(((drum_button_state_last & 0x20)) && ((drum_button_state_now & 0x20) ==
      +                           0) && drum.SW6) {
 34806  002740  BA37               	btfsc	_drum_button_state_last,5,c
 34807  002742  BA38               	btfsc	_drum_button_state_now,5,c
 34808  002744  D017               	goto	l2431
 34809  002746  AA36               	btfss	_drum,5,c
 34810  002748  D015               	goto	l2431
 34811                           
 34812                           ;drum.c: 117: drum.SW6 = 0;
 34813  00274A  9A36               	bcf	_drum,5,c
 34814                           
 34815                           ;drum.c: 118: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[5],velocity);}
 34816  00274C  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34817  00274E  D007               	goto	l2430
 34818  002750  C1EF  F060         	movff	_DRUM_NOTE+5,noteOffDrum@pitch
 34819  002754  C050  F061         	movff	_velocity,noteOffDrum@velocity
 34820  002758  5051               	movf	_drumchannel,w,c
 34821  00275A  ECCA  F04B         	call	_noteOffDrum
 34822  00275E                     l2430:
 34823                           
 34824                           ;drum.c: 119: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[5],
      +                           0);}
 34825  00275E  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34826  002760  AE01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34827  002762  D008               	goto	l2431
 34828  002764  C0FA  F060         	movff	_DRUM_CC+5,controlChange@controllerNumber
 34829  002768  0E00               	movlw	0
 34830  00276A  0100               	movlb	0	; () banked
 34831  00276C  6F61               	movwf	controlChange@value& (0+255),b
 34832  00276E  503D               	movf	_channel,w,c
 34833  002770  EC19  F049         	call	_controlChange
 34834  002774                     l2431:
 34835                           
 34836                           ;drum.c: 120: }
 34837                           ;drum.c: 121: if(((drum_button_state_last & 0x40)) && ((drum_button_state_now & 0x40) ==
      +                           0) && drum.SW7) {
 34838  002774  BC37               	btfsc	_drum_button_state_last,6,c
 34839  002776  BC38               	btfsc	_drum_button_state_now,6,c
 34840  002778  D017               	goto	l2434
 34841  00277A  AC36               	btfss	_drum,6,c
 34842  00277C  D015               	goto	l2434
 34843                           
 34844                           ;drum.c: 122: drum.SW7 = 0;
 34845  00277E  9C36               	bcf	_drum,6,c
 34846                           
 34847                           ;drum.c: 123: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[6],velocity);}
 34848  002780  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34849  002782  D007               	goto	l2433
 34850  002784  C1F0  F060         	movff	_DRUM_NOTE+6,noteOffDrum@pitch
 34851  002788  C050  F061         	movff	_velocity,noteOffDrum@velocity
 34852  00278C  5051               	movf	_drumchannel,w,c
 34853  00278E  ECCA  F04B         	call	_noteOffDrum
 34854  002792                     l2433:
 34855                           
 34856                           ;drum.c: 124: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[6],
      +                           0);}
 34857  002792  AC01               	btfss	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34858  002794  AE01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34859  002796  D008               	goto	l2434
 34860  002798  C0FB  F060         	movff	_DRUM_CC+6,controlChange@controllerNumber
 34861  00279C  0E00               	movlw	0
 34862  00279E  0100               	movlb	0	; () banked
 34863  0027A0  6F61               	movwf	controlChange@value& (0+255),b
 34864  0027A2  503D               	movf	_channel,w,c
 34865  0027A4  EC19  F049         	call	_controlChange
 34866  0027A8                     l2434:
 34867                           
 34868                           ;drum.c: 125: }
 34869                           ;drum.c: 126: if(((drum_button_state_last & 0x80)) && ((drum_button_state_now & 0x80) ==
      +                           0) && drum.SW8) {
 34870  0027A8  AE37               	btfss	_drum_button_state_last,7,c
 34871  0027AA  0012               	return	
 34872  0027AC  BE38               	btfsc	_drum_button_state_now,7,c
 34873  0027AE  0012               	return	
 34874  0027B0  AE36               	btfss	_drum,7,c
 34875  0027B2  0012               	return	
 34876                           
 34877                           ;drum.c: 127: drum.SW8 = 0;
 34878  0027B4  9E36               	bcf	_drum,7,c
 34879                           
 34880                           ;drum.c: 128: if (DRUM_MODE == 0) {noteOffDrum(drumchannel,DRUM_NOTE[7],velocity);}
 34881  0027B6  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34882  0027B8  D007               	goto	l2436
 34883  0027BA  C1F1  F060         	movff	_DRUM_NOTE+7,noteOffDrum@pitch
 34884  0027BE  C050  F061         	movff	_velocity,noteOffDrum@velocity
 34885  0027C2  5051               	movf	_drumchannel,w,c
 34886  0027C4  ECCA  F04B         	call	_noteOffDrum
 34887  0027C8                     l2436:
 34888                           
 34889                           ;drum.c: 129: if (DRUM_MODE == 1 & CONTROL_MODE == 0) {controlChange(channel,DRUM_CC[7],
      +                           0);}
 34890  0027C8  BC01               	btfsc	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 34891  0027CA  0012               	return	
 34892  0027CC  AE01               	btfss	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 34893  0027CE  0012               	return	
 34894  0027D0  C0FC  F060         	movff	_DRUM_CC+7,controlChange@controllerNumber
 34895  0027D4  0E00               	movlw	0
 34896  0027D6  0100               	movlb	0	; () banked
 34897  0027D8  6F61               	movwf	controlChange@value& (0+255),b
 34898  0027DA  503D               	movf	_channel,w,c
 34899  0027DC  EC19  F049         	call	_controlChange
 34900  0027E0  0012               	return	
 34901  0027E2                     __end_of_processDrumpad:
 34902                           	opt stack 0
 34903                           tblptru	equ	0xFF8
 34904                           tblptrh	equ	0xFF7
 34905                           tblptrl	equ	0xFF6
 34906                           tablat	equ	0xFF5
 34907                           prodh	equ	0xFF4
 34908                           prodl	equ	0xFF3
 34909                           intcon	equ	0xFF2
 34910                           intcon2	equ	0xFF1
 34911                           indf0	equ	0xFEF
 34912                           postinc0	equ	0xFEE
 34913                           fsr0h	equ	0xFEA
 34914                           fsr0l	equ	0xFE9
 34915                           wreg	equ	0xFE8
 34916                           postinc1	equ	0xFE6
 34917                           postdec1	equ	0xFE5
 34918                           plusw1	equ	0xFE3
 34919                           fsr1h	equ	0xFE2
 34920                           fsr1l	equ	0xFE1
 34921                           indf2	equ	0xFDF
 34922                           postinc2	equ	0xFDE
 34923                           postdec2	equ	0xFDD
 34924                           plusw2	equ	0xFDB
 34925                           fsr2h	equ	0xFDA
 34926                           fsr2l	equ	0xFD9
 34927                           status	equ	0xFD8
 34928                           
 34929 ;; *************** function _noteOnDrum *****************
 34930 ;; Defined at:
 34931 ;;		line 160 in file "midi.c"
 34932 ;; Parameters:    Size  Location     Type
 34933 ;;  channel         1    wreg     unsigned char 
 34934 ;;  pitch           1    0[BANK0 ] unsigned char 
 34935 ;;  velocity        1    1[BANK0 ] unsigned char 
 34936 ;; Auto vars:     Size  Location     Type
 34937 ;;  channel         1    2[BANK0 ] unsigned char 
 34938 ;; Return value:  Size  Location     Type
 34939 ;;                  1    wreg      void 
 34940 ;; Registers used:
 34941 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh
 34942 ;; Tracked objects:
 34943 ;;		On entry : 0/0
 34944 ;;		On exit  : 0/0
 34945 ;;		Unchanged: 0/0
 34946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 34947 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34948 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34950 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 34951 ;;Total ram usage:        3 bytes
 34952 ;; Hardware stack levels used:    1
 34953 ;; Hardware stack levels required when called:    7
 34954 ;; This function calls:
 34955 ;;		_noteOff
 34956 ;;		_sendOut
 34957 ;;		_sendUSB
 34958 ;; This function is called by:
 34959 ;;		_processDrumpad
 34960 ;; This function uses a non-reentrant model
 34961 ;;
 34962                           
 34963                           	psect	text95
 34964  00928A                     __ptext95:
 34965                           	opt stack 0
 34966  00928A                     _noteOnDrum:
 34967                           	opt stack 18
 34968                           
 34969                           ;incstack = 0
 34970                           ;noteOnDrum@channel stored from wreg
 34971  00928A  0100               	movlb	0	; () banked
 34972  00928C  6F62               	movwf	noteOnDrum@channel& (0+255),b
 34973                           
 34974                           ;midi.c: 162: noteNumber = pitch;
 34975  00928E  C060  F03B         	movff	noteOnDrum@pitch,_noteNumber
 34976                           
 34977                           ;midi.c: 163: statusByte = channel | note_on;
 34978  009292  0100               	movlb	0	; () banked
 34979  009294  5162               	movf	noteOnDrum@channel& (0+255),w,b
 34980  009296  0990               	iorlw	144
 34981  009298  6E3C               	movwf	_statusByte,c
 34982                           
 34983                           ; BSR set to: 0
 34984                           ;midi.c: 165: if (velocity == 0) {noteOff(channel, pitch, velocity);return;}
 34985  00929A  5161               	movf	noteOnDrum@velocity& (0+255),w,b
 34986  00929C  A4D8               	btfss	status,2,c
 34987  00929E  D009               	goto	l491
 34988                           
 34989                           ; BSR set to: 0
 34990  0092A0  5161               	movf	noteOnDrum@velocity& (0+255),w,b
 34991  0092A2  6EE6               	movwf	postinc1,c
 34992  0092A4  5160               	movf	noteOnDrum@pitch& (0+255),w,b
 34993  0092A6  6EE6               	movwf	postinc1,c
 34994  0092A8  5162               	movf	noteOnDrum@channel& (0+255),w,b
 34995  0092AA  6EE6               	movwf	postinc1,c
 34996  0092AC  ECA0  F04A         	call	_noteOff	;wreg free
 34997  0092B0  0012               	return	
 34998  0092B2                     l491:
 34999                           
 35000                           ;midi.c: 168: sendUSB(statusByte, noteNumber, velocity);
 35001  0092B2  0100               	movlb	0	; () banked
 35002  0092B4  5161               	movf	noteOnDrum@velocity& (0+255),w,b
 35003  0092B6  6EE6               	movwf	postinc1,c
 35004  0092B8  503B               	movf	_noteNumber,w,c
 35005  0092BA  6EE6               	movwf	postinc1,c
 35006  0092BC  503C               	movf	_statusByte,w,c
 35007  0092BE  6EE6               	movwf	postinc1,c
 35008  0092C0  EC12  F037         	call	_sendUSB	;wreg free
 35009                           
 35010                           ;midi.c: 171: if(velocity > 0) {
 35011  0092C4  0100               	movlb	0	; () banked
 35012  0092C6  5161               	movf	noteOnDrum@velocity& (0+255),w,b
 35013  0092C8  B4D8               	btfsc	status,2,c
 35014  0092CA  0012               	return	
 35015                           
 35016                           ; BSR set to: 0
 35017                           ;midi.c: 172: sendOut(statusByte, noteNumber, velocity);
 35018  0092CC  5161               	movf	noteOnDrum@velocity& (0+255),w,b
 35019  0092CE  6EE6               	movwf	postinc1,c
 35020  0092D0  503B               	movf	_noteNumber,w,c
 35021  0092D2  6EE6               	movwf	postinc1,c
 35022  0092D4  503C               	movf	_statusByte,w,c
 35023  0092D6  6EE6               	movwf	postinc1,c
 35024  0092D8  EC9B  F036         	call	_sendOut	;wreg free
 35025  0092DC  0012               	return	
 35026  0092DE                     __end_of_noteOnDrum:
 35027                           	opt stack 0
 35028                           tblptru	equ	0xFF8
 35029                           tblptrh	equ	0xFF7
 35030                           tblptrl	equ	0xFF6
 35031                           tablat	equ	0xFF5
 35032                           prodh	equ	0xFF4
 35033                           prodl	equ	0xFF3
 35034                           intcon	equ	0xFF2
 35035                           intcon2	equ	0xFF1
 35036                           indf0	equ	0xFEF
 35037                           postinc0	equ	0xFEE
 35038                           fsr0h	equ	0xFEA
 35039                           fsr0l	equ	0xFE9
 35040                           wreg	equ	0xFE8
 35041                           postinc1	equ	0xFE6
 35042                           postdec1	equ	0xFE5
 35043                           plusw1	equ	0xFE3
 35044                           fsr1h	equ	0xFE2
 35045                           fsr1l	equ	0xFE1
 35046                           indf2	equ	0xFDF
 35047                           postinc2	equ	0xFDE
 35048                           postdec2	equ	0xFDD
 35049                           plusw2	equ	0xFDB
 35050                           fsr2h	equ	0xFDA
 35051                           fsr2l	equ	0xFD9
 35052                           status	equ	0xFD8
 35053                           
 35054 ;; *************** function _noteOffDrum *****************
 35055 ;; Defined at:
 35056 ;;		line 145 in file "midi.c"
 35057 ;; Parameters:    Size  Location     Type
 35058 ;;  channel         1    wreg     unsigned char 
 35059 ;;  pitch           1    0[BANK0 ] unsigned char 
 35060 ;;  velocity        1    1[BANK0 ] unsigned char 
 35061 ;; Auto vars:     Size  Location     Type
 35062 ;;  channel         1    2[BANK0 ] unsigned char 
 35063 ;; Return value:  Size  Location     Type
 35064 ;;                  1    wreg      void 
 35065 ;; Registers used:
 35066 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11
 35067 ;; Tracked objects:
 35068 ;;		On entry : 0/0
 35069 ;;		On exit  : 0/0
 35070 ;;		Unchanged: 0/0
 35071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35072 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35073 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35075 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35076 ;;Total ram usage:        3 bytes
 35077 ;; Hardware stack levels used:    1
 35078 ;; Hardware stack levels required when called:    6
 35079 ;; This function calls:
 35080 ;;		_sendOut
 35081 ;;		_sendUSB
 35082 ;; This function is called by:
 35083 ;;		_processDrumpad
 35084 ;; This function uses a non-reentrant model
 35085 ;;
 35086                           
 35087                           	psect	text96
 35088  009794                     __ptext96:
 35089                           	opt stack 0
 35090  009794                     _noteOffDrum:
 35091                           	opt stack 19
 35092                           
 35093                           ;incstack = 0
 35094                           ;noteOffDrum@channel stored from wreg
 35095  009794  0100               	movlb	0	; () banked
 35096  009796  6F62               	movwf	noteOffDrum@channel& (0+255),b
 35097                           
 35098                           ;midi.c: 147: noteNumber = pitch;
 35099  009798  C060  F03B         	movff	noteOffDrum@pitch,_noteNumber
 35100                           
 35101                           ;midi.c: 148: statusByte = channel | note_off;
 35102  00979C  0100               	movlb	0	; () banked
 35103  00979E  5162               	movf	noteOffDrum@channel& (0+255),w,b
 35104  0097A0  0980               	iorlw	128
 35105  0097A2  6E3C               	movwf	_statusByte,c
 35106                           
 35107                           ; BSR set to: 0
 35108                           ;midi.c: 151: sendUSB(statusByte, noteNumber, velocity);
 35109  0097A4  5161               	movf	noteOffDrum@velocity& (0+255),w,b
 35110  0097A6  6EE6               	movwf	postinc1,c
 35111  0097A8  503B               	movf	_noteNumber,w,c
 35112  0097AA  6EE6               	movwf	postinc1,c
 35113  0097AC  503C               	movf	_statusByte,w,c
 35114  0097AE  6EE6               	movwf	postinc1,c
 35115  0097B0  EC12  F037         	call	_sendUSB	;wreg free
 35116                           
 35117                           ;midi.c: 154: sendOut(statusByte, noteNumber, velocity);
 35118  0097B4  0100               	movlb	0	; () banked
 35119  0097B6  5161               	movf	noteOffDrum@velocity& (0+255),w,b
 35120  0097B8  6EE6               	movwf	postinc1,c
 35121  0097BA  503B               	movf	_noteNumber,w,c
 35122  0097BC  6EE6               	movwf	postinc1,c
 35123  0097BE  503C               	movf	_statusByte,w,c
 35124  0097C0  6EE6               	movwf	postinc1,c
 35125  0097C2  EC9B  F036         	call	_sendOut	;wreg free
 35126  0097C6  0012               	return		;funcret
 35127  0097C8                     __end_of_noteOffDrum:
 35128                           	opt stack 0
 35129                           tblptru	equ	0xFF8
 35130                           tblptrh	equ	0xFF7
 35131                           tblptrl	equ	0xFF6
 35132                           tablat	equ	0xFF5
 35133                           prodh	equ	0xFF4
 35134                           prodl	equ	0xFF3
 35135                           intcon	equ	0xFF2
 35136                           intcon2	equ	0xFF1
 35137                           indf0	equ	0xFEF
 35138                           postinc0	equ	0xFEE
 35139                           fsr0h	equ	0xFEA
 35140                           fsr0l	equ	0xFE9
 35141                           wreg	equ	0xFE8
 35142                           postinc1	equ	0xFE6
 35143                           postdec1	equ	0xFE5
 35144                           plusw1	equ	0xFE3
 35145                           fsr1h	equ	0xFE2
 35146                           fsr1l	equ	0xFE1
 35147                           indf2	equ	0xFDF
 35148                           postinc2	equ	0xFDE
 35149                           postdec2	equ	0xFDD
 35150                           plusw2	equ	0xFDB
 35151                           fsr2h	equ	0xFDA
 35152                           fsr2l	equ	0xFD9
 35153                           status	equ	0xFD8
 35154                           
 35155 ;; *************** function _keyboardTranspose *****************
 35156 ;; Defined at:
 35157 ;;		line 28 in file "octave.c"
 35158 ;; Parameters:    Size  Location     Type
 35159 ;;		None
 35160 ;; Auto vars:     Size  Location     Type
 35161 ;;		None
 35162 ;; Return value:  Size  Location     Type
 35163 ;;                  1    wreg      void 
 35164 ;; Registers used:
 35165 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
 35166 ;; Tracked objects:
 35167 ;;		On entry : 0/0
 35168 ;;		On exit  : 0/0
 35169 ;;		Unchanged: 0/0
 35170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35175 ;;Total ram usage:        0 bytes
 35176 ;; Hardware stack levels used:    1
 35177 ;; Hardware stack levels required when called:    8
 35178 ;; This function calls:
 35179 ;;		_key_press_release_note_off
 35180 ;;		_printThisNumber
 35181 ;;		_wait_one_pulse
 35182 ;; This function is called by:
 35183 ;;		_digitalInputs
 35184 ;; This function uses a non-reentrant model
 35185 ;;
 35186                           
 35187                           	psect	text97
 35188  00447A                     __ptext97:
 35189                           	opt stack 0
 35190  00447A                     _keyboardTranspose:
 35191                           	opt stack 18
 35192                           
 35193                           ;octave.c: 30: static signed char semitone_temp;
 35194                           ;octave.c: 31: static __bit keyPress;
 35195                           ;octave.c: 33: if(button_state_now == (0x08000000 | 0x00000001))
 35196                           
 35197                           ;incstack = 0
 35198  00447A  0100               	movlb	0	; () banked
 35199  00447C  05D9               	decf	_button_state_now& (0+255),w,b
 35200  00447E  E109               	bnz	l30152
 35201  004480  0E08               	movlw	8
 35202  004482  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 35203  004484  11DA               	iorwf	(_button_state_now+1)& (0+255),w,b
 35204  004486  11DB               	iorwf	(_button_state_now+2)& (0+255),w,b
 35205  004488  A4D8               	btfss	status,2,c
 35206  00448A  D003               	goto	l2812
 35207                           
 35208                           ; BSR set to: 0
 35209                           ;octave.c: 34: {
 35210                           ;octave.c: 35: semitone_temp = -12;
 35211  00448C  0EF4               	movlw	244
 35212  00448E  6FEB               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35213                           
 35214                           ; BSR set to: 0
 35215                           ;octave.c: 36: keyPress = 1;
 35216  004490  8A01               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35217  004492                     l2812:
 35218  004492                     l30152:
 35219                           
 35220                           ; BSR set to: 0
 35221                           ;octave.c: 37: }
 35222                           ;octave.c: 38: if(button_state_now == (0x08000000 | 0x00000002))
 35223  004492  0E02               	movlw	2
 35224  004494  19D9               	xorwf	_button_state_now& (0+255),w,b
 35225  004496  E109               	bnz	l30158
 35226  004498  0E08               	movlw	8
 35227  00449A  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 35228  00449C  11DA               	iorwf	(_button_state_now+1)& (0+255),w,b
 35229  00449E  11DB               	iorwf	(_button_state_now+2)& (0+255),w,b
 35230  0044A0  A4D8               	btfss	status,2,c
 35231  0044A2  D003               	goto	l2813
 35232                           
 35233                           ; BSR set to: 0
 35234                           ;octave.c: 39: {
 35235                           ;octave.c: 40: semitone_temp = -11;
 35236  0044A4  0EF5               	movlw	245
 35237  0044A6  6FEB               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35238                           
 35239                           ; BSR set to: 0
 35240                           ;octave.c: 41: keyPress = 1;
 35241  0044A8  8A01               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35242  0044AA                     l2813:
 35243  0044AA                     l30158:
 35244                           
 35245                           ; BSR set to: 0
 35246                           ;octave.c: 42: }
 35247                           ;octave.c: 43: if(button_state_now == (0x08000000 | 0x00000004))
 35248  0044AA  0E04               	movlw	4
 35249  0044AC  19D9               	xorwf	_button_state_now& (0+255),w,b
 35250  0044AE  E109               	bnz	l30164
 35251  0044B0  0E08               	movlw	8
 35252  0044B2  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 35253  0044B4  11DA               	iorwf	(_button_state_now+1)& (0+255),w,b
 35254  0044B6  11DB               	iorwf	(_button_state_now+2)& (0+255),w,b
 35255  0044B8  A4D8               	btfss	status,2,c
 35256  0044BA  D003               	goto	l2814
 35257                           
 35258                           ; BSR set to: 0
 35259                           ;octave.c: 44: {
 35260                           ;octave.c: 45: semitone_temp = -10;
 35261  0044BC  0EF6               	movlw	246
 35262  0044BE  6FEB               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35263                           
 35264                           ; BSR set to: 0
 35265                           ;octave.c: 46: keyPress = 1;
 35266  0044C0  8A01               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35267  0044C2                     l2814:
 35268  0044C2                     l30164:
 35269                           
 35270                           ; BSR set to: 0
 35271                           ;octave.c: 47: }
 35272                           ;octave.c: 48: if(button_state_now == (0x08000000 | 0x00000008))
 35273  0044C2  0E08               	movlw	8
 35274  0044C4  19D9               	xorwf	_button_state_now& (0+255),w,b
 35275  0044C6  E109               	bnz	l30170
 35276  0044C8  0E08               	movlw	8
 35277  0044CA  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 35278  0044CC  11DA               	iorwf	(_button_state_now+1)& (0+255),w,b
 35279  0044CE  11DB               	iorwf	(_button_state_now+2)& (0+255),w,b
 35280  0044D0  A4D8               	btfss	status,2,c
 35281  0044D2  D003               	goto	l2815
 35282                           
 35283                           ; BSR set to: 0
 35284                           ;octave.c: 49: {
 35285                           ;octave.c: 50: semitone_temp = -9;
 35286  0044D4  0EF7               	movlw	247
 35287  0044D6  6FEB               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35288                           
 35289                           ; BSR set to: 0
 35290                           ;octave.c: 51: keyPress = 1;
 35291  0044D8  8A01               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35292  0044DA                     l2815:
 35293  0044DA                     l30170:
 35294                           
 35295                           ; BSR set to: 0
 35296                           ;octave.c: 52: }
 35297                           ;octave.c: 53: if(button_state_now == (0x08000000 | 0x00000010))
 35298  0044DA  0E10               	movlw	16
 35299  0044DC  19D9               	xorwf	_button_state_now& (0+255),w,b
 35300  0044DE  E109               	bnz	l30176
 35301  0044E0  0E08               	movlw	8
 35302  0044E2  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 35303  0044E4  11DA               	iorwf	(_button_state_now+1)& (0+255),w,b
 35304  0044E6  11DB               	iorwf	(_button_state_now+2)& (0+255),w,b
 35305  0044E8  A4D8               	btfss	status,2,c
 35306  0044EA  D003               	goto	l2816
 35307                           
 35308                           ; BSR set to: 0
 35309                           ;octave.c: 54: {
 35310                           ;octave.c: 55: semitone_temp = -8;
 35311  0044EC  0EF8               	movlw	248
 35312  0044EE  6FEB               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35313                           
 35314                           ; BSR set to: 0
 35315                           ;octave.c: 56: keyPress = 1;
 35316  0044F0  8A01               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35317  0044F2                     l2816:
 35318  0044F2                     l30176:
 35319                           
 35320                           ; BSR set to: 0
 35321                           ;octave.c: 57: }
 35322                           ;octave.c: 58: if(button_state_now == (0x08000000 | 0x00000020))
 35323  0044F2  0E20               	movlw	32
 35324  0044F4  19D9               	xorwf	_button_state_now& (0+255),w,b
 35325  0044F6  E109               	bnz	l30182
 35326  0044F8  0E08               	movlw	8
 35327  0044FA  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 35328  0044FC  11DA               	iorwf	(_button_state_now+1)& (0+255),w,b
 35329  0044FE  11DB               	iorwf	(_button_state_now+2)& (0+255),w,b
 35330  004500  A4D8               	btfss	status,2,c
 35331  004502  D003               	goto	l2817
 35332                           
 35333                           ; BSR set to: 0
 35334                           ;octave.c: 59: {
 35335                           ;octave.c: 60: semitone_temp = -7;
 35336  004504  0EF9               	movlw	249
 35337  004506  6FEB               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35338                           
 35339                           ; BSR set to: 0
 35340                           ;octave.c: 61: keyPress = 1;
 35341  004508  8A01               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35342  00450A                     l2817:
 35343  00450A                     l30182:
 35344                           
 35345                           ; BSR set to: 0
 35346                           ;octave.c: 62: }
 35347                           ;octave.c: 63: if(button_state_now == (0x08000000 | 0x00000040))
 35348  00450A  0E40               	movlw	64
 35349  00450C  19D9               	xorwf	_button_state_now& (0+255),w,b
 35350  00450E  E109               	bnz	l30188
 35351  004510  0E08               	movlw	8
 35352  004512  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 35353  004514  11DA               	iorwf	(_button_state_now+1)& (0+255),w,b
 35354  004516  11DB               	iorwf	(_button_state_now+2)& (0+255),w,b
 35355  004518  A4D8               	btfss	status,2,c
 35356  00451A  D003               	goto	l2818
 35357                           
 35358                           ; BSR set to: 0
 35359                           ;octave.c: 64: {
 35360                           ;octave.c: 65: semitone_temp = -6;
 35361  00451C  0EFA               	movlw	250
 35362  00451E  6FEB               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35363                           
 35364                           ; BSR set to: 0
 35365                           ;octave.c: 66: keyPress = 1;
 35366  004520  8A01               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35367  004522                     l2818:
 35368  004522                     l30188:
 35369                           
 35370                           ; BSR set to: 0
 35371                           ;octave.c: 67: }
 35372                           ;octave.c: 68: if(button_state_now == (0x08000000 | 0x00000080))
 35373  004522  0E80               	movlw	128
 35374  004524  19D9               	xorwf	_button_state_now& (0+255),w,b
 35375  004526  E109               	bnz	l30194
 35376  004528  0E08               	movlw	8
 35377  00452A  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 35378  00452C  11DA               	iorwf	(_button_state_now+1)& (0+255),w,b
 35379  00452E  11DB               	iorwf	(_button_state_now+2)& (0+255),w,b
 35380  004530  A4D8               	btfss	status,2,c
 35381  004532  D003               	goto	l2819
 35382                           
 35383                           ; BSR set to: 0
 35384                           ;octave.c: 69: {
 35385                           ;octave.c: 70: semitone_temp = -5;
 35386  004534  0EFB               	movlw	251
 35387  004536  6FEB               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35388                           
 35389                           ; BSR set to: 0
 35390                           ;octave.c: 71: keyPress = 1;
 35391  004538  8A01               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35392  00453A                     l2819:
 35393  00453A                     l30194:
 35394                           
 35395                           ; BSR set to: 0
 35396                           ;octave.c: 72: }
 35397                           ;octave.c: 73: if(button_state_now == (0x08000000 | 0x00000100))
 35398  00453A  05DA               	decf	(_button_state_now+1)& (0+255),w,b
 35399  00453C  E109               	bnz	l30200
 35400  00453E  0E08               	movlw	8
 35401  004540  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 35402  004542  11D9               	iorwf	_button_state_now& (0+255),w,b
 35403  004544  11DB               	iorwf	(_button_state_now+2)& (0+255),w,b
 35404  004546  A4D8               	btfss	status,2,c
 35405  004548  D003               	goto	l2820
 35406                           
 35407                           ; BSR set to: 0
 35408                           ;octave.c: 74: {
 35409                           ;octave.c: 75: semitone_temp = -4;
 35410  00454A  0EFC               	movlw	252
 35411  00454C  6FEB               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35412                           
 35413                           ; BSR set to: 0
 35414                           ;octave.c: 76: keyPress = 1;
 35415  00454E  8A01               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35416  004550                     l2820:
 35417  004550                     l30200:
 35418                           
 35419                           ; BSR set to: 0
 35420                           ;octave.c: 77: }
 35421                           ;octave.c: 78: if(button_state_now == (0x08000000 | 0x00000200))
 35422  004550  0E02               	movlw	2
 35423  004552  19DA               	xorwf	(_button_state_now+1)& (0+255),w,b
 35424  004554  E109               	bnz	l30206
 35425  004556  0E08               	movlw	8
 35426  004558  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 35427  00455A  11D9               	iorwf	_button_state_now& (0+255),w,b
 35428  00455C  11DB               	iorwf	(_button_state_now+2)& (0+255),w,b
 35429  00455E  A4D8               	btfss	status,2,c
 35430  004560  D003               	goto	l2821
 35431                           
 35432                           ; BSR set to: 0
 35433                           ;octave.c: 79: {
 35434                           ;octave.c: 80: semitone_temp = -3;
 35435  004562  0EFD               	movlw	253
 35436  004564  6FEB               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35437                           
 35438                           ; BSR set to: 0
 35439                           ;octave.c: 81: keyPress = 1;
 35440  004566  8A01               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35441  004568                     l2821:
 35442  004568                     l30206:
 35443                           
 35444                           ; BSR set to: 0
 35445                           ;octave.c: 82: }
 35446                           ;octave.c: 83: if(button_state_now == (0x08000000 | 0x00000400))
 35447  004568  0E04               	movlw	4
 35448  00456A  19DA               	xorwf	(_button_state_now+1)& (0+255),w,b
 35449  00456C  E109               	bnz	l30212
 35450  00456E  0E08               	movlw	8
 35451  004570  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 35452  004572  11D9               	iorwf	_button_state_now& (0+255),w,b
 35453  004574  11DB               	iorwf	(_button_state_now+2)& (0+255),w,b
 35454  004576  A4D8               	btfss	status,2,c
 35455  004578  D003               	goto	l2822
 35456                           
 35457                           ; BSR set to: 0
 35458                           ;octave.c: 84: {
 35459                           ;octave.c: 85: semitone_temp = -2;
 35460  00457A  0EFE               	movlw	254
 35461  00457C  6FEB               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35462                           
 35463                           ; BSR set to: 0
 35464                           ;octave.c: 86: keyPress = 1;
 35465  00457E  8A01               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35466  004580                     l2822:
 35467  004580                     l30212:
 35468                           
 35469                           ; BSR set to: 0
 35470                           ;octave.c: 87: }
 35471                           ;octave.c: 88: if(button_state_now == (0x08000000 | 0x00000800))
 35472  004580  0E08               	movlw	8
 35473  004582  19DA               	xorwf	(_button_state_now+1)& (0+255),w,b
 35474  004584  E108               	bnz	l30216
 35475  004586  0E08               	movlw	8
 35476  004588  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 35477  00458A  11D9               	iorwf	_button_state_now& (0+255),w,b
 35478  00458C  11DB               	iorwf	(_button_state_now+2)& (0+255),w,b
 35479  00458E  A4D8               	btfss	status,2,c
 35480  004590  D002               	goto	l2823
 35481                           
 35482                           ; BSR set to: 0
 35483                           ;octave.c: 89: {
 35484                           ;octave.c: 90: semitone_temp = -1;
 35485  004592  69EB               	setf	keyboardTranspose@semitone_temp& (0+255),b
 35486                           
 35487                           ;octave.c: 91: keyPress = 1;
 35488  004594  8A01               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35489  004596                     l2823:
 35490  004596                     l30216:
 35491                           
 35492                           ; BSR set to: 0
 35493                           ;octave.c: 92: }
 35494                           ;octave.c: 93: if(button_state_now == (0x08000000 | 0x00001000))
 35495  004596  0E10               	movlw	16
 35496  004598  19DA               	xorwf	(_button_state_now+1)& (0+255),w,b
 35497  00459A  E109               	bnz	l30222
 35498  00459C  0E08               	movlw	8
 35499  00459E  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 35500  0045A0  11D9               	iorwf	_button_state_now& (0+255),w,b
 35501  0045A2  11DB               	iorwf	(_button_state_now+2)& (0+255),w,b
 35502  0045A4  A4D8               	btfss	status,2,c
 35503  0045A6  D003               	goto	l2824
 35504                           
 35505                           ; BSR set to: 0
 35506                           ;octave.c: 94: {
 35507                           ;octave.c: 95: semitone_temp = 0;
 35508  0045A8  0E00               	movlw	0
 35509  0045AA  6FEB               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35510                           
 35511                           ; BSR set to: 0
 35512                           ;octave.c: 96: keyPress = 1;
 35513  0045AC  8A01               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35514  0045AE                     l2824:
 35515  0045AE                     l30222:
 35516                           
 35517                           ; BSR set to: 0
 35518                           ;octave.c: 97: }
 35519                           ;octave.c: 98: if(button_state_now == (0x08000000 | 0x00002000))
 35520  0045AE  0E20               	movlw	32
 35521  0045B0  19DA               	xorwf	(_button_state_now+1)& (0+255),w,b
 35522  0045B2  E109               	bnz	l30228
 35523  0045B4  0E08               	movlw	8
 35524  0045B6  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 35525  0045B8  11D9               	iorwf	_button_state_now& (0+255),w,b
 35526  0045BA  11DB               	iorwf	(_button_state_now+2)& (0+255),w,b
 35527  0045BC  A4D8               	btfss	status,2,c
 35528  0045BE  D003               	goto	l2825
 35529                           
 35530                           ; BSR set to: 0
 35531                           ;octave.c: 99: {
 35532                           ;octave.c: 100: semitone_temp = 1;
 35533  0045C0  0E01               	movlw	1
 35534  0045C2  6FEB               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35535                           
 35536                           ; BSR set to: 0
 35537                           ;octave.c: 101: keyPress = 1;
 35538  0045C4  8A01               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35539  0045C6                     l2825:
 35540  0045C6                     l30228:
 35541                           
 35542                           ; BSR set to: 0
 35543                           ;octave.c: 102: }
 35544                           ;octave.c: 103: if(button_state_now == (0x08000000 | 0x00004000))
 35545  0045C6  0E40               	movlw	64
 35546  0045C8  19DA               	xorwf	(_button_state_now+1)& (0+255),w,b
 35547  0045CA  E109               	bnz	l30234
 35548  0045CC  0E08               	movlw	8
 35549  0045CE  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 35550  0045D0  11D9               	iorwf	_button_state_now& (0+255),w,b
 35551  0045D2  11DB               	iorwf	(_button_state_now+2)& (0+255),w,b
 35552  0045D4  A4D8               	btfss	status,2,c
 35553  0045D6  D003               	goto	l2826
 35554                           
 35555                           ; BSR set to: 0
 35556                           ;octave.c: 104: {
 35557                           ;octave.c: 105: semitone_temp = 2;
 35558  0045D8  0E02               	movlw	2
 35559  0045DA  6FEB               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35560                           
 35561                           ; BSR set to: 0
 35562                           ;octave.c: 106: keyPress = 1;
 35563  0045DC  8A01               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35564  0045DE                     l2826:
 35565  0045DE                     l30234:
 35566                           
 35567                           ; BSR set to: 0
 35568                           ;octave.c: 107: }
 35569                           ;octave.c: 108: if(button_state_now == (0x08000000 | 0x00008000))
 35570  0045DE  0E80               	movlw	128
 35571  0045E0  19DA               	xorwf	(_button_state_now+1)& (0+255),w,b
 35572  0045E2  E109               	bnz	l30240
 35573  0045E4  0E08               	movlw	8
 35574  0045E6  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 35575  0045E8  11D9               	iorwf	_button_state_now& (0+255),w,b
 35576  0045EA  11DB               	iorwf	(_button_state_now+2)& (0+255),w,b
 35577  0045EC  A4D8               	btfss	status,2,c
 35578  0045EE  D003               	goto	l2827
 35579                           
 35580                           ; BSR set to: 0
 35581                           ;octave.c: 109: {
 35582                           ;octave.c: 110: semitone_temp = 3;
 35583  0045F0  0E03               	movlw	3
 35584  0045F2  6FEB               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35585                           
 35586                           ; BSR set to: 0
 35587                           ;octave.c: 111: keyPress = 1;
 35588  0045F4  8A01               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35589  0045F6                     l2827:
 35590  0045F6                     l30240:
 35591                           
 35592                           ; BSR set to: 0
 35593                           ;octave.c: 112: }
 35594                           ;octave.c: 113: if(button_state_now == (0x08000000 | 0x00010000))
 35595  0045F6  05DB               	decf	(_button_state_now+2)& (0+255),w,b
 35596  0045F8  E109               	bnz	l30246
 35597  0045FA  0E08               	movlw	8
 35598  0045FC  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 35599  0045FE  11D9               	iorwf	_button_state_now& (0+255),w,b
 35600  004600  11DA               	iorwf	(_button_state_now+1)& (0+255),w,b
 35601  004602  A4D8               	btfss	status,2,c
 35602  004604  D003               	goto	l2828
 35603                           
 35604                           ; BSR set to: 0
 35605                           ;octave.c: 114: {
 35606                           ;octave.c: 115: semitone_temp = 4;
 35607  004606  0E04               	movlw	4
 35608  004608  6FEB               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35609                           
 35610                           ; BSR set to: 0
 35611                           ;octave.c: 116: keyPress = 1;
 35612  00460A  8A01               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35613  00460C                     l2828:
 35614  00460C                     l30246:
 35615                           
 35616                           ; BSR set to: 0
 35617                           ;octave.c: 117: }
 35618                           ;octave.c: 118: if(button_state_now == (0x08000000 | 0x00020000))
 35619  00460C  0E02               	movlw	2
 35620  00460E  19DB               	xorwf	(_button_state_now+2)& (0+255),w,b
 35621  004610  E109               	bnz	l30252
 35622  004612  0E08               	movlw	8
 35623  004614  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 35624  004616  11D9               	iorwf	_button_state_now& (0+255),w,b
 35625  004618  11DA               	iorwf	(_button_state_now+1)& (0+255),w,b
 35626  00461A  A4D8               	btfss	status,2,c
 35627  00461C  D003               	goto	l2829
 35628                           
 35629                           ; BSR set to: 0
 35630                           ;octave.c: 119: {
 35631                           ;octave.c: 120: semitone_temp = 5;
 35632  00461E  0E05               	movlw	5
 35633  004620  6FEB               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35634                           
 35635                           ; BSR set to: 0
 35636                           ;octave.c: 121: keyPress = 1;
 35637  004622  8A01               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35638  004624                     l2829:
 35639  004624                     l30252:
 35640                           
 35641                           ; BSR set to: 0
 35642                           ;octave.c: 122: }
 35643                           ;octave.c: 123: if(button_state_now == (0x08000000 | 0x00040000))
 35644  004624  0E04               	movlw	4
 35645  004626  19DB               	xorwf	(_button_state_now+2)& (0+255),w,b
 35646  004628  E109               	bnz	l30258
 35647  00462A  0E08               	movlw	8
 35648  00462C  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 35649  00462E  11D9               	iorwf	_button_state_now& (0+255),w,b
 35650  004630  11DA               	iorwf	(_button_state_now+1)& (0+255),w,b
 35651  004632  A4D8               	btfss	status,2,c
 35652  004634  D003               	goto	l2830
 35653                           
 35654                           ; BSR set to: 0
 35655                           ;octave.c: 124: {
 35656                           ;octave.c: 125: semitone_temp = 6;
 35657  004636  0E06               	movlw	6
 35658  004638  6FEB               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35659                           
 35660                           ; BSR set to: 0
 35661                           ;octave.c: 126: keyPress = 1;
 35662  00463A  8A01               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35663  00463C                     l2830:
 35664  00463C                     l30258:
 35665                           
 35666                           ; BSR set to: 0
 35667                           ;octave.c: 127: }
 35668                           ;octave.c: 128: if(button_state_now == (0x08000000 | 0x00080000))
 35669  00463C  0E08               	movlw	8
 35670  00463E  19DB               	xorwf	(_button_state_now+2)& (0+255),w,b
 35671  004640  E109               	bnz	l30264
 35672  004642  0E08               	movlw	8
 35673  004644  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 35674  004646  11D9               	iorwf	_button_state_now& (0+255),w,b
 35675  004648  11DA               	iorwf	(_button_state_now+1)& (0+255),w,b
 35676  00464A  A4D8               	btfss	status,2,c
 35677  00464C  D003               	goto	l2831
 35678                           
 35679                           ; BSR set to: 0
 35680                           ;octave.c: 129: {
 35681                           ;octave.c: 130: semitone_temp = 7;
 35682  00464E  0E07               	movlw	7
 35683  004650  6FEB               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35684                           
 35685                           ; BSR set to: 0
 35686                           ;octave.c: 131: keyPress = 1;
 35687  004652  8A01               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35688  004654                     l2831:
 35689  004654                     l30264:
 35690                           
 35691                           ; BSR set to: 0
 35692                           ;octave.c: 132: }
 35693                           ;octave.c: 133: if(button_state_now == (0x08000000 | 0x00100000))
 35694  004654  0E10               	movlw	16
 35695  004656  19DB               	xorwf	(_button_state_now+2)& (0+255),w,b
 35696  004658  E109               	bnz	l30270
 35697  00465A  0E08               	movlw	8
 35698  00465C  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 35699  00465E  11D9               	iorwf	_button_state_now& (0+255),w,b
 35700  004660  11DA               	iorwf	(_button_state_now+1)& (0+255),w,b
 35701  004662  A4D8               	btfss	status,2,c
 35702  004664  D003               	goto	l2832
 35703                           
 35704                           ; BSR set to: 0
 35705                           ;octave.c: 134: {
 35706                           ;octave.c: 135: semitone_temp = 8;
 35707  004666  0E08               	movlw	8
 35708  004668  6FEB               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35709                           
 35710                           ; BSR set to: 0
 35711                           ;octave.c: 136: keyPress = 1;
 35712  00466A  8A01               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35713  00466C                     l2832:
 35714  00466C                     l30270:
 35715                           
 35716                           ; BSR set to: 0
 35717                           ;octave.c: 137: }
 35718                           ;octave.c: 138: if(button_state_now == (0x08000000 | 0x00200000))
 35719  00466C  0E20               	movlw	32
 35720  00466E  19DB               	xorwf	(_button_state_now+2)& (0+255),w,b
 35721  004670  E109               	bnz	l30276
 35722  004672  0E08               	movlw	8
 35723  004674  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 35724  004676  11D9               	iorwf	_button_state_now& (0+255),w,b
 35725  004678  11DA               	iorwf	(_button_state_now+1)& (0+255),w,b
 35726  00467A  A4D8               	btfss	status,2,c
 35727  00467C  D003               	goto	l2833
 35728                           
 35729                           ; BSR set to: 0
 35730                           ;octave.c: 139: {
 35731                           ;octave.c: 140: semitone_temp = 9;
 35732  00467E  0E09               	movlw	9
 35733  004680  6FEB               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35734                           
 35735                           ; BSR set to: 0
 35736                           ;octave.c: 141: keyPress = 1;
 35737  004682  8A01               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35738  004684                     l2833:
 35739  004684                     l30276:
 35740                           
 35741                           ; BSR set to: 0
 35742                           ;octave.c: 142: }
 35743                           ;octave.c: 143: if(button_state_now == (0x08000000 | 0x00400000))
 35744  004684  0E40               	movlw	64
 35745  004686  19DB               	xorwf	(_button_state_now+2)& (0+255),w,b
 35746  004688  E109               	bnz	l30282
 35747  00468A  0E08               	movlw	8
 35748  00468C  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 35749  00468E  11D9               	iorwf	_button_state_now& (0+255),w,b
 35750  004690  11DA               	iorwf	(_button_state_now+1)& (0+255),w,b
 35751  004692  A4D8               	btfss	status,2,c
 35752  004694  D003               	goto	l2834
 35753                           
 35754                           ; BSR set to: 0
 35755                           ;octave.c: 144: {
 35756                           ;octave.c: 145: semitone_temp = 10;
 35757  004696  0E0A               	movlw	10
 35758  004698  6FEB               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35759                           
 35760                           ; BSR set to: 0
 35761                           ;octave.c: 146: keyPress = 1;
 35762  00469A  8A01               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35763  00469C                     l2834:
 35764  00469C                     l30282:
 35765                           
 35766                           ; BSR set to: 0
 35767                           ;octave.c: 147: }
 35768                           ;octave.c: 148: if(button_state_now == (0x08000000 | 0x00800000))
 35769  00469C  0E80               	movlw	128
 35770  00469E  19DB               	xorwf	(_button_state_now+2)& (0+255),w,b
 35771  0046A0  E109               	bnz	l30288
 35772  0046A2  0E08               	movlw	8
 35773  0046A4  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 35774  0046A6  11D9               	iorwf	_button_state_now& (0+255),w,b
 35775  0046A8  11DA               	iorwf	(_button_state_now+1)& (0+255),w,b
 35776  0046AA  A4D8               	btfss	status,2,c
 35777  0046AC  D003               	goto	l2835
 35778                           
 35779                           ; BSR set to: 0
 35780                           ;octave.c: 149: {
 35781                           ;octave.c: 150: semitone_temp = 11;
 35782  0046AE  0E0B               	movlw	11
 35783  0046B0  6FEB               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35784                           
 35785                           ; BSR set to: 0
 35786                           ;octave.c: 151: keyPress = 1;
 35787  0046B2  8A01               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35788  0046B4                     l2835:
 35789  0046B4                     l30288:
 35790                           
 35791                           ; BSR set to: 0
 35792                           ;octave.c: 152: }
 35793                           ;octave.c: 153: if(button_state_now == (0x08000000 | 0x01000000))
 35794  0046B4  0E09               	movlw	9
 35795  0046B6  19DC               	xorwf	(_button_state_now+3)& (0+255),w,b
 35796  0046B8  11D9               	iorwf	_button_state_now& (0+255),w,b
 35797  0046BA  11DA               	iorwf	(_button_state_now+1)& (0+255),w,b
 35798  0046BC  11DB               	iorwf	(_button_state_now+2)& (0+255),w,b
 35799  0046BE  A4D8               	btfss	status,2,c
 35800  0046C0  D003               	goto	l2836
 35801                           
 35802                           ; BSR set to: 0
 35803                           ;octave.c: 154: {
 35804                           ;octave.c: 155: semitone_temp = 12;
 35805  0046C2  0E0C               	movlw	12
 35806  0046C4  6FEB               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35807                           
 35808                           ; BSR set to: 0
 35809                           ;octave.c: 156: keyPress = 1;
 35810  0046C6  8A01               	bsf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35811  0046C8                     l2836:
 35812                           
 35813                           ; BSR set to: 0
 35814                           ;octave.c: 157: }
 35815                           ;octave.c: 159: if(keyPress == 1) {
 35816                           
 35817                           ; BSR set to: 0
 35818  0046C8  AA01               	btfss	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35819  0046CA  0012               	return	
 35820                           
 35821                           ; BSR set to: 0
 35822                           ;octave.c: 162: if((LATCH == 1) && (NUM_NOTES_PRESSED > 0)) {
 35823  0046CC  A404               	btfss	_LATCH/(0+8),_LATCH& (0+7),c
 35824  0046CE  D00E               	goto	l2838
 35825                           
 35826                           ; BSR set to: 0
 35827  0046D0  502E               	movf	_NUM_NOTES_PRESSED,w,c
 35828  0046D2  B4D8               	btfsc	status,2,c
 35829  0046D4  D00B               	goto	l2838
 35830                           
 35831                           ; BSR set to: 0
 35832                           ;octave.c: 165: wait_one_pulse(LAST_NOTE_MODE_TRANSPOSE);
 35833  0046D6  0E00               	movlw	0
 35834  0046D8  B203               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 35835  0046DA  0E01               	movlw	1
 35836  0046DC  EC43  F04C         	call	_wait_one_pulse
 35837                           
 35838                           ;octave.c: 169: if(note_off_was_sent == 0) {key_press_release_note_off();}
 35839  0046E0  A052               	btfss	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 35840  0046E2  ECA7  F02E         	call	_key_press_release_note_off	;wreg free
 35841                           
 35842                           ;octave.c: 172: suppress_note_off = 1;
 35843  0046E6  8A02               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 35844                           
 35845                           ;octave.c: 174: flag1 = 1;
 35846  0046E8  8402               	bsf	_flag1/(0+8),_flag1& (0+7),c
 35847                           
 35848                           ;octave.c: 176: flag2 = 1;
 35849  0046EA  8202               	bsf	_flag2/(0+8),_flag2& (0+7),c
 35850  0046EC                     l2838:
 35851                           
 35852                           ;octave.c: 177: }
 35853                           ;octave.c: 185: if (semitone_temp > 12) {semitone_temp = 12;}
 35854  0046EC  0100               	movlb	0	; () banked
 35855  0046EE  51EB               	movf	keyboardTranspose@semitone_temp& (0+255),w,b
 35856  0046F0  0A80               	xorlw	128
 35857  0046F2  0F73               	addlw	-141
 35858  0046F4  A0D8               	btfss	status,0,c
 35859  0046F6  D002               	goto	l2840
 35860                           
 35861                           ; BSR set to: 0
 35862  0046F8  0E0C               	movlw	12
 35863  0046FA  6FEB               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35864  0046FC                     l2840:
 35865                           
 35866                           ; BSR set to: 0
 35867                           ;octave.c: 186: if (semitone_temp < -12) {semitone_temp = -12;}
 35868                           
 35869                           ; BSR set to: 0
 35870  0046FC  51EB               	movf	keyboardTranspose@semitone_temp& (0+255),w,b
 35871  0046FE  0A80               	xorlw	128
 35872  004700  0F8C               	addlw	140
 35873  004702  B0D8               	btfsc	status,0,c
 35874  004704  D002               	goto	l2841
 35875                           
 35876                           ; BSR set to: 0
 35877  004706  0EF4               	movlw	244
 35878  004708  6FEB               	movwf	keyboardTranspose@semitone_temp& (0+255),b
 35879  00470A                     l2841:
 35880                           
 35881                           ; BSR set to: 0
 35882                           ;octave.c: 187: semitone = semitone_temp;
 35883                           
 35884                           ; BSR set to: 0
 35885  00470A  C0EB  F03A         	movff	keyboardTranspose@semitone_temp,_semitone
 35886                           
 35887                           ; BSR set to: 0
 35888                           ;octave.c: 188: printThisNumber(semitone);
 35889  00470E  503A               	movf	_semitone,w,c
 35890  004710  6F60               	movwf	printThisNumber@n& (0+255),b
 35891  004712  6B61               	clrf	(printThisNumber@n+1)& (0+255),b
 35892  004714  BF60               	btfsc	printThisNumber@n& (0+255),7,b
 35893  004716  0761               	decf	(printThisNumber@n+1)& (0+255),f,b
 35894  004718  EC22  F04D         	call	_printThisNumber	;wreg free
 35895                           
 35896                           ;octave.c: 189: keyPress = 0;
 35897  00471C  9A01               	bcf	keyboardTranspose@keyPress/(0+8),keyboardTranspose@keyPress& (0+7),c
 35898  00471E  0012               	return	
 35899  004720                     __end_of_keyboardTranspose:
 35900                           	opt stack 0
 35901                           tblptru	equ	0xFF8
 35902                           tblptrh	equ	0xFF7
 35903                           tblptrl	equ	0xFF6
 35904                           tablat	equ	0xFF5
 35905                           prodh	equ	0xFF4
 35906                           prodl	equ	0xFF3
 35907                           intcon	equ	0xFF2
 35908                           intcon2	equ	0xFF1
 35909                           indf0	equ	0xFEF
 35910                           postinc0	equ	0xFEE
 35911                           fsr0h	equ	0xFEA
 35912                           fsr0l	equ	0xFE9
 35913                           wreg	equ	0xFE8
 35914                           postinc1	equ	0xFE6
 35915                           postdec1	equ	0xFE5
 35916                           plusw1	equ	0xFE3
 35917                           fsr1h	equ	0xFE2
 35918                           fsr1l	equ	0xFE1
 35919                           indf2	equ	0xFDF
 35920                           postinc2	equ	0xFDE
 35921                           postdec2	equ	0xFDD
 35922                           plusw2	equ	0xFDB
 35923                           fsr2h	equ	0xFDA
 35924                           fsr2l	equ	0xFD9
 35925                           status	equ	0xFD8
 35926                           
 35927 ;; *************** function _wait_one_pulse *****************
 35928 ;; Defined at:
 35929 ;;		line 20 in file "arpeggio.c"
 35930 ;; Parameters:    Size  Location     Type
 35931 ;;  mode            1    wreg     unsigned char 
 35932 ;; Auto vars:     Size  Location     Type
 35933 ;;  mode            1    0[BANK0 ] unsigned char 
 35934 ;; Return value:  Size  Location     Type
 35935 ;;                  1    wreg      void 
 35936 ;; Registers used:
 35937 ;;		wreg, status,2
 35938 ;; Tracked objects:
 35939 ;;		On entry : 0/0
 35940 ;;		On exit  : 0/0
 35941 ;;		Unchanged: 0/0
 35942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 35943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35944 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35946 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 35947 ;;Total ram usage:        1 bytes
 35948 ;; Hardware stack levels used:    1
 35949 ;; Hardware stack levels required when called:    5
 35950 ;; This function calls:
 35951 ;;		Nothing
 35952 ;; This function is called by:
 35953 ;;		_playThisNotePentatonic
 35954 ;;		_playTriad
 35955 ;;		_playSeventh
 35956 ;;		_playThisNote
 35957 ;;		_playThisNote8
 35958 ;;		_playDiatonicTriadMajor
 35959 ;;		_playDiatonicSeventhMajor
 35960 ;;		_playDiatonicTriadMinor
 35961 ;;		_playDiatonicSeventhMinor
 35962 ;;		_keyboardTranspose
 35963 ;;		_processOctave
 35964 ;; This function uses a non-reentrant model
 35965 ;;
 35966                           
 35967                           	psect	text98
 35968  009886                     __ptext98:
 35969                           	opt stack 0
 35970  009886                     _wait_one_pulse:
 35971                           	opt stack 20
 35972                           
 35973                           ;incstack = 0
 35974                           ;wait_one_pulse@mode stored from wreg
 35975  009886  0100               	movlb	0	; () banked
 35976  009888  6F60               	movwf	wait_one_pulse@mode& (0+255),b
 35977                           
 35978                           ;arpeggio.c: 22: lastNoteMode = mode;
 35979  00988A  0100               	movlb	0	; () banked
 35980  00988C  A160               	btfss	wait_one_pulse@mode& (0+255),0,b
 35981  00988E  D002               	goto	u45560
 35982  009890  8803               	bsf	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 35983  009892  D001               	goto	u45575
 35984  009894                     u45560:
 35985  009894  9803               	bcf	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 35986  009896                     u45575:
 35987                           
 35988                           ;arpeggio.c: 25: if(lastNoteMode == 0) {
 35989  009896  B803               	btfsc	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 35990  009898  D004               	goto	l5426
 35991                           
 35992                           ;arpeggio.c: 26: finishLastNote = 0;
 35993  00989A  9E02               	bcf	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 35994                           
 35995                           ;arpeggio.c: 27: TIMER_OVERFLOWS = 0;
 35996  00989C  0E00               	movlw	0
 35997  00989E  6E2D               	movwf	_TIMER_OVERFLOWS,c
 35998                           
 35999                           ;arpeggio.c: 28: return;
 36000  0098A0  0012               	return	
 36001  0098A2                     l5426:
 36002                           
 36003                           ;arpeggio.c: 29: }
 36004                           ;arpeggio.c: 32: if(lastNoteMode == 1) {
 36005  0098A2  A803               	btfss	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 36006  0098A4  0012               	return	
 36007                           
 36008                           ;arpeggio.c: 33: finishLastNote = 1;
 36009  0098A6  8E02               	bsf	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 36010                           
 36011                           ;arpeggio.c: 34: TMR0ON = 1;
 36012  0098A8  8ED5               	bsf	4053,7,c	;volatile
 36013  0098AA  AE02               	btfss	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 36014  0098AC  0012               	return	
 36015  0098AE  D7FD               	goto	l5430
 36016  0098B0                     __end_of_wait_one_pulse:
 36017                           	opt stack 0
 36018                           tblptru	equ	0xFF8
 36019                           tblptrh	equ	0xFF7
 36020                           tblptrl	equ	0xFF6
 36021                           tablat	equ	0xFF5
 36022                           prodh	equ	0xFF4
 36023                           prodl	equ	0xFF3
 36024                           intcon	equ	0xFF2
 36025                           intcon2	equ	0xFF1
 36026                           indf0	equ	0xFEF
 36027                           postinc0	equ	0xFEE
 36028                           fsr0h	equ	0xFEA
 36029                           fsr0l	equ	0xFE9
 36030                           wreg	equ	0xFE8
 36031                           postinc1	equ	0xFE6
 36032                           postdec1	equ	0xFE5
 36033                           plusw1	equ	0xFE3
 36034                           fsr1h	equ	0xFE2
 36035                           fsr1l	equ	0xFE1
 36036                           indf2	equ	0xFDF
 36037                           postinc2	equ	0xFDE
 36038                           postdec2	equ	0xFDD
 36039                           plusw2	equ	0xFDB
 36040                           fsr2h	equ	0xFDA
 36041                           fsr2l	equ	0xFD9
 36042                           status	equ	0xFD8
 36043                           
 36044 ;; *************** function _printThisNumber *****************
 36045 ;; Defined at:
 36046 ;;		line 21 in file "octave.c"
 36047 ;; Parameters:    Size  Location     Type
 36048 ;;  n               2    0[BANK0 ] int 
 36049 ;; Auto vars:     Size  Location     Type
 36050 ;;		None
 36051 ;; Return value:  Size  Location     Type
 36052 ;;                  1    wreg      void 
 36053 ;; Registers used:
 36054 ;;		wreg, status,2
 36055 ;; Tracked objects:
 36056 ;;		On entry : 0/0
 36057 ;;		On exit  : 0/0
 36058 ;;		Unchanged: 0/0
 36059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 36060 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36063 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36064 ;;Total ram usage:        2 bytes
 36065 ;; Hardware stack levels used:    1
 36066 ;; Hardware stack levels required when called:    5
 36067 ;; This function calls:
 36068 ;;		Nothing
 36069 ;; This function is called by:
 36070 ;;		_keyboardTranspose
 36071 ;;		_processOctave
 36072 ;; This function uses a non-reentrant model
 36073 ;;
 36074                           
 36075                           	psect	text99
 36076  009A44                     __ptext99:
 36077                           	opt stack 0
 36078  009A44                     _printThisNumber:
 36079                           	opt stack 20
 36080                           
 36081                           ;octave.c: 22: DISPLAY_MODE = 0;
 36082                           
 36083                           ;incstack = 0
 36084  009A44  0E00               	movlw	0
 36085  009A46  0100               	movlb	0	; () banked
 36086  009A48  6FEF               	movwf	_DISPLAY_MODE& (0+255),b
 36087                           
 36088                           ;octave.c: 23: DIGIT_MODE = 0;
 36089  009A4A  0E00               	movlw	0
 36090  009A4C  6E39               	movwf	_DIGIT_MODE,c
 36091                           
 36092                           ; BSR set to: 0
 36093                           ;octave.c: 24: number_to_display = n;
 36094  009A4E  C060  F04A         	movff	printThisNumber@n,_number_to_display
 36095  009A52  C061  F04B         	movff	printThisNumber@n+1,_number_to_display+1
 36096                           
 36097                           ; BSR set to: 0
 36098  009A56  0012               	return		;funcret
 36099  009A58                     __end_of_printThisNumber:
 36100                           	opt stack 0
 36101                           tblptru	equ	0xFF8
 36102                           tblptrh	equ	0xFF7
 36103                           tblptrl	equ	0xFF6
 36104                           tablat	equ	0xFF5
 36105                           prodh	equ	0xFF4
 36106                           prodl	equ	0xFF3
 36107                           intcon	equ	0xFF2
 36108                           intcon2	equ	0xFF1
 36109                           indf0	equ	0xFEF
 36110                           postinc0	equ	0xFEE
 36111                           fsr0h	equ	0xFEA
 36112                           fsr0l	equ	0xFE9
 36113                           wreg	equ	0xFE8
 36114                           postinc1	equ	0xFE6
 36115                           postdec1	equ	0xFE5
 36116                           plusw1	equ	0xFE3
 36117                           fsr1h	equ	0xFE2
 36118                           fsr1l	equ	0xFE1
 36119                           indf2	equ	0xFDF
 36120                           postinc2	equ	0xFDE
 36121                           postdec2	equ	0xFDD
 36122                           plusw2	equ	0xFDB
 36123                           fsr2h	equ	0xFDA
 36124                           fsr2l	equ	0xFD9
 36125                           status	equ	0xFD8
 36126                           
 36127 ;; *************** function _buttonInputsSerial *****************
 36128 ;; Defined at:
 36129 ;;		line 307 in file "main.c"
 36130 ;; Parameters:    Size  Location     Type
 36131 ;;		None
 36132 ;; Auto vars:     Size  Location     Type
 36133 ;;  i               1    5[BANK0 ] unsigned char 
 36134 ;;  i               1    4[BANK0 ] unsigned char 
 36135 ;; Return value:  Size  Location     Type
 36136 ;;                  1    wreg      void 
 36137 ;; Registers used:
 36138 ;;		wreg, status,2, status,0, cstack
 36139 ;; Tracked objects:
 36140 ;;		On entry : 0/0
 36141 ;;		On exit  : 0/0
 36142 ;;		Unchanged: 0/0
 36143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 36144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36145 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36146 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36147 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36148 ;;Total ram usage:        6 bytes
 36149 ;; Hardware stack levels used:    1
 36150 ;; Hardware stack levels required when called:    6
 36151 ;; This function calls:
 36152 ;;		_clock
 36153 ;;		_load
 36154 ;; This function is called by:
 36155 ;;		_digitalInputs
 36156 ;; This function uses a non-reentrant model
 36157 ;;
 36158                           
 36159                           	psect	text100
 36160  008778                     __ptext100:
 36161                           	opt stack 0
 36162  008778                     _buttonInputsSerial:
 36163                           	opt stack 20
 36164                           
 36165                           ;main.c: 309: button_state_now = 0;
 36166                           
 36167                           ; BSR set to: 0
 36168                           ;incstack = 0
 36169  008778  0E00               	movlw	0
 36170  00877A  0100               	movlb	0	; () banked
 36171  00877C  6FD9               	movwf	_button_state_now& (0+255),b
 36172  00877E  0E00               	movlw	0
 36173  008780  6FDA               	movwf	(_button_state_now+1)& (0+255),b
 36174  008782  0E00               	movlw	0
 36175  008784  6FDB               	movwf	(_button_state_now+2)& (0+255),b
 36176  008786  0E00               	movlw	0
 36177  008788  6FDC               	movwf	(_button_state_now+3)& (0+255),b
 36178                           
 36179                           ;main.c: 310: drum_button_state_now = 0;
 36180  00878A  0E00               	movlw	0
 36181  00878C  6E38               	movwf	_drum_button_state_now,c
 36182                           
 36183                           ; BSR set to: 0
 36184                           ;main.c: 311: load();
 36185  00878E  EC48  F04D         	call	_load	;wreg free
 36186                           
 36187                           ;main.c: 314: for (unsigned char i = 0;i<12;i++){
 36188  008792  0E00               	movlw	0
 36189  008794  0100               	movlb	0	; () banked
 36190  008796  6F64               	movwf	buttonInputsSerial@i& (0+255),b
 36191  008798                     l30608:
 36192                           
 36193                           ; BSR set to: 0
 36194  008798  0E0B               	movlw	11
 36195  00879A  6564               	cpfsgt	buttonInputsSerial@i& (0+255),b
 36196  00879C  D001               	goto	l4997
 36197  00879E  D009               	goto	u55150
 36198  0087A0                     l4997:
 36199                           
 36200                           ; BSR set to: 0
 36201                           ;main.c: 315: drum_button_state_now = (drum_button_state_now << 1) | (RC4);
 36202                           
 36203                           ; BSR set to: 0
 36204  0087A0  90D8               	bcf	status,0,c
 36205  0087A2  B882               	btfsc	3970,4,c	;volatile
 36206  0087A4  80D8               	bsf	status,0,c
 36207  0087A6  3638               	rlcf	_drum_button_state_now,f,c
 36208                           
 36209                           ; BSR set to: 0
 36210                           ;main.c: 316: clock();
 36211  0087A8  EC4B  F04D         	call	_clock	;wreg free
 36212  0087AC  0100               	movlb	0	; () banked
 36213  0087AE  2B64               	incf	buttonInputsSerial@i& (0+255),f,b
 36214  0087B0  D7F3               	goto	l30608
 36215  0087B2                     u55150:
 36216                           
 36217                           ; BSR set to: 0
 36218                           ;main.c: 317: }
 36219                           ;main.c: 320: for (unsigned char i = 0;i<28;i++){
 36220                           
 36221                           ; BSR set to: 0
 36222  0087B2  0E00               	movlw	0
 36223  0087B4  6F65               	movwf	buttonInputsSerial@i_4482& (0+255),b
 36224  0087B6                     l30622:
 36225                           
 36226                           ; BSR set to: 0
 36227  0087B6  0E1B               	movlw	27
 36228  0087B8  6565               	cpfsgt	buttonInputsSerial@i_4482& (0+255),b
 36229  0087BA  D001               	goto	l4999
 36230  0087BC  0012               	return	
 36231  0087BE                     l4999:
 36232                           
 36233                           ; BSR set to: 0
 36234                           ;main.c: 321: button_state_now = (button_state_now << 1) | (RC4);
 36235                           
 36236                           ; BSR set to: 0
 36237  0087BE  90D8               	bcf	status,0,c
 36238  0087C0  35D9               	rlcf	_button_state_now& (0+255),w,b
 36239  0087C2  6F60               	movwf	??_buttonInputsSerial& (0+255),b
 36240  0087C4  35DA               	rlcf	(_button_state_now+1)& (0+255),w,b
 36241  0087C6  6F61               	movwf	(??_buttonInputsSerial+1)& (0+255),b
 36242  0087C8  35DB               	rlcf	(_button_state_now+2)& (0+255),w,b
 36243  0087CA  6F62               	movwf	(??_buttonInputsSerial+2)& (0+255),b
 36244  0087CC  35DC               	rlcf	(_button_state_now+3)& (0+255),w,b
 36245  0087CE  6F63               	movwf	(??_buttonInputsSerial+3)& (0+255),b
 36246  0087D0  A882               	btfss	3970,4,c	;volatile
 36247  0087D2  D002               	goto	u55170
 36248  0087D4  0E01               	movlw	1
 36249  0087D6  D001               	goto	u55180
 36250  0087D8                     u55170:
 36251  0087D8  0E00               	movlw	0
 36252  0087DA                     u55180:
 36253  0087DA  1160               	iorwf	??_buttonInputsSerial& (0+255),w,b
 36254  0087DC  6FD9               	movwf	_button_state_now& (0+255),b
 36255  0087DE  5161               	movf	(??_buttonInputsSerial+1)& (0+255),w,b
 36256  0087E0  6FDA               	movwf	(_button_state_now+1)& (0+255),b
 36257  0087E2  5162               	movf	(??_buttonInputsSerial+2)& (0+255),w,b
 36258  0087E4  6FDB               	movwf	(_button_state_now+2)& (0+255),b
 36259  0087E6  5163               	movf	(??_buttonInputsSerial+3)& (0+255),w,b
 36260  0087E8  6FDC               	movwf	(_button_state_now+3)& (0+255),b
 36261                           
 36262                           ; BSR set to: 0
 36263                           ;main.c: 322: clock();
 36264  0087EA  EC4B  F04D         	call	_clock	;wreg free
 36265  0087EE  0100               	movlb	0	; () banked
 36266  0087F0  2B65               	incf	buttonInputsSerial@i_4482& (0+255),f,b
 36267  0087F2  D7E1               	goto	l30622
 36268  0087F4                     __end_of_buttonInputsSerial:
 36269                           	opt stack 0
 36270                           tblptru	equ	0xFF8
 36271                           tblptrh	equ	0xFF7
 36272                           tblptrl	equ	0xFF6
 36273                           tablat	equ	0xFF5
 36274                           prodh	equ	0xFF4
 36275                           prodl	equ	0xFF3
 36276                           intcon	equ	0xFF2
 36277                           intcon2	equ	0xFF1
 36278                           indf0	equ	0xFEF
 36279                           postinc0	equ	0xFEE
 36280                           fsr0h	equ	0xFEA
 36281                           fsr0l	equ	0xFE9
 36282                           wreg	equ	0xFE8
 36283                           postinc1	equ	0xFE6
 36284                           postdec1	equ	0xFE5
 36285                           plusw1	equ	0xFE3
 36286                           fsr1h	equ	0xFE2
 36287                           fsr1l	equ	0xFE1
 36288                           indf2	equ	0xFDF
 36289                           postinc2	equ	0xFDE
 36290                           postdec2	equ	0xFDD
 36291                           plusw2	equ	0xFDB
 36292                           fsr2h	equ	0xFDA
 36293                           fsr2l	equ	0xFD9
 36294                           status	equ	0xFD8
 36295                           
 36296 ;; *************** function _load *****************
 36297 ;; Defined at:
 36298 ;;		line 294 in file "main.c"
 36299 ;; Parameters:    Size  Location     Type
 36300 ;;		None
 36301 ;; Auto vars:     Size  Location     Type
 36302 ;;		None
 36303 ;; Return value:  Size  Location     Type
 36304 ;;                  1    wreg      void 
 36305 ;; Registers used:
 36306 ;;		None
 36307 ;; Tracked objects:
 36308 ;;		On entry : 0/0
 36309 ;;		On exit  : 0/0
 36310 ;;		Unchanged: 0/0
 36311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 36312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36316 ;;Total ram usage:        0 bytes
 36317 ;; Hardware stack levels used:    1
 36318 ;; Hardware stack levels required when called:    5
 36319 ;; This function calls:
 36320 ;;		Nothing
 36321 ;; This function is called by:
 36322 ;;		_buttonInputsSerial
 36323 ;; This function uses a non-reentrant model
 36324 ;;
 36325                           
 36326                           	psect	text101
 36327  009A90                     __ptext101:
 36328                           	opt stack 0
 36329  009A90                     _load:
 36330                           	opt stack 20
 36331                           
 36332                           ;main.c: 295: RB1 = 0;
 36333                           
 36334                           ; BSR set to: 0
 36335                           ;incstack = 0
 36336  009A90  9281               	bcf	3969,1,c	;volatile
 36337                           
 36338                           ;main.c: 297: RB1 = 1;
 36339  009A92  8281               	bsf	3969,1,c	;volatile
 36340  009A94  0012               	return		;funcret
 36341  009A96                     __end_of_load:
 36342                           	opt stack 0
 36343                           tblptru	equ	0xFF8
 36344                           tblptrh	equ	0xFF7
 36345                           tblptrl	equ	0xFF6
 36346                           tablat	equ	0xFF5
 36347                           prodh	equ	0xFF4
 36348                           prodl	equ	0xFF3
 36349                           intcon	equ	0xFF2
 36350                           intcon2	equ	0xFF1
 36351                           indf0	equ	0xFEF
 36352                           postinc0	equ	0xFEE
 36353                           fsr0h	equ	0xFEA
 36354                           fsr0l	equ	0xFE9
 36355                           wreg	equ	0xFE8
 36356                           postinc1	equ	0xFE6
 36357                           postdec1	equ	0xFE5
 36358                           plusw1	equ	0xFE3
 36359                           fsr1h	equ	0xFE2
 36360                           fsr1l	equ	0xFE1
 36361                           indf2	equ	0xFDF
 36362                           postinc2	equ	0xFDE
 36363                           postdec2	equ	0xFDD
 36364                           plusw2	equ	0xFDB
 36365                           fsr2h	equ	0xFDA
 36366                           fsr2l	equ	0xFD9
 36367                           status	equ	0xFD8
 36368                           
 36369 ;; *************** function _clock *****************
 36370 ;; Defined at:
 36371 ;;		line 301 in file "main.c"
 36372 ;; Parameters:    Size  Location     Type
 36373 ;;		None
 36374 ;; Auto vars:     Size  Location     Type
 36375 ;;		None
 36376 ;; Return value:  Size  Location     Type
 36377 ;;                  1    wreg      void 
 36378 ;; Registers used:
 36379 ;;		None
 36380 ;; Tracked objects:
 36381 ;;		On entry : 0/0
 36382 ;;		On exit  : 0/0
 36383 ;;		Unchanged: 0/0
 36384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 36385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36388 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36389 ;;Total ram usage:        0 bytes
 36390 ;; Hardware stack levels used:    1
 36391 ;; Hardware stack levels required when called:    5
 36392 ;; This function calls:
 36393 ;;		Nothing
 36394 ;; This function is called by:
 36395 ;;		_buttonInputsSerial
 36396 ;; This function uses a non-reentrant model
 36397 ;;
 36398                           
 36399                           	psect	text102
 36400  009A96                     __ptext102:
 36401                           	opt stack 0
 36402  009A96                     _clock:
 36403                           	opt stack 20
 36404                           
 36405                           ;main.c: 302: RC5 = 1;
 36406                           
 36407                           ;incstack = 0
 36408  009A96  8A82               	bsf	3970,5,c	;volatile
 36409                           
 36410                           ;main.c: 303: RC5 = 0;
 36411  009A98  9A82               	bcf	3970,5,c	;volatile
 36412  009A9A  0012               	return		;funcret
 36413  009A9C                     __end_of_clock:
 36414                           	opt stack 0
 36415                           tblptru	equ	0xFF8
 36416                           tblptrh	equ	0xFF7
 36417                           tblptrl	equ	0xFF6
 36418                           tablat	equ	0xFF5
 36419                           prodh	equ	0xFF4
 36420                           prodl	equ	0xFF3
 36421                           intcon	equ	0xFF2
 36422                           intcon2	equ	0xFF1
 36423                           indf0	equ	0xFEF
 36424                           postinc0	equ	0xFEE
 36425                           fsr0h	equ	0xFEA
 36426                           fsr0l	equ	0xFE9
 36427                           wreg	equ	0xFE8
 36428                           postinc1	equ	0xFE6
 36429                           postdec1	equ	0xFE5
 36430                           plusw1	equ	0xFE3
 36431                           fsr1h	equ	0xFE2
 36432                           fsr1l	equ	0xFE1
 36433                           indf2	equ	0xFDF
 36434                           postinc2	equ	0xFDE
 36435                           postdec2	equ	0xFDD
 36436                           plusw2	equ	0xFDB
 36437                           fsr2h	equ	0xFDA
 36438                           fsr2l	equ	0xFD9
 36439                           status	equ	0xFD8
 36440                           
 36441 ;; *************** function _analogInputs *****************
 36442 ;; Defined at:
 36443 ;;		line 327 in file "main.c"
 36444 ;; Parameters:    Size  Location     Type
 36445 ;;		None
 36446 ;; Auto vars:     Size  Location     Type
 36447 ;;		None
 36448 ;; Return value:  Size  Location     Type
 36449 ;;                  1    wreg      void 
 36450 ;; Registers used:
 36451 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+9, btemp
      ++10, btemp+11, prodl, prodh, cstack
 36452 ;; Tracked objects:
 36453 ;;		On entry : 0/0
 36454 ;;		On exit  : 0/0
 36455 ;;		Unchanged: 0/0
 36456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 36457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36459 ;;      Temps:          0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 36460 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 36461 ;;Total ram usage:        7 bytes
 36462 ;; Hardware stack levels used:    1
 36463 ;; Hardware stack levels required when called:   11
 36464 ;; This function calls:
 36465 ;;		_readPotentiometers
 36466 ;; This function is called by:
 36467 ;;		_setControllerNumbers
 36468 ;;		_un_block_code
 36469 ;;		_Function_C_2
 36470 ;;		_Function_C_3
 36471 ;;		_main
 36472 ;; This function uses a non-reentrant model
 36473 ;;
 36474                           
 36475                           	psect	text103
 36476  0093D0                     __ptext103:
 36477                           	opt stack 0
 36478  0093D0                     _analogInputs:
 36479                           	opt stack 16
 36480                           
 36481                           ;main.c: 343: if(ARPEGGIO_ON == 0) {
 36482                           
 36483                           ;incstack = 0
 36484  0093D0  BA04               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 36485  0093D2  D003               	goto	l5004
 36486                           
 36487                           ;main.c: 344: note_off_was_sent = 1;
 36488  0093D4  8052               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 36489                           
 36490                           ;main.c: 345: readPotentiometers();
 36491  0093D6  EC1E  F005         	call	_readPotentiometers	;wreg free
 36492  0093DA                     l5004:
 36493                           
 36494                           ;main.c: 346: }
 36495                           ;main.c: 349: if(ARPEGGIO_ON == 1) {
 36496  0093DA  AA04               	btfss	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 36497  0093DC  0012               	return	
 36498                           
 36499                           ;main.c: 352: if((TIMER_OVERFLOWS > 0) && (TIMER_OVERFLOWS < (NOTE_LENGTH_PULSES - 2))) 
      +                          {
 36500  0093DE  502D               	movf	_TIMER_OVERFLOWS,w,c
 36501  0093E0  B4D8               	btfsc	status,2,c
 36502  0093E2  0012               	return	
 36503  0093E4  0EFE               	movlw	254
 36504  0093E6  0101               	movlb	1	; () banked
 36505  0093E8  6FA0               	movwf	??_analogInputs& (0+255),b
 36506  0093EA  0EFF               	movlw	255
 36507  0093EC  6FA1               	movwf	(??_analogInputs+1)& (0+255),b
 36508  0093EE  504C               	movf	_NOTE_LENGTH_PULSES,w,c
 36509  0093F0  6FA2               	movwf	(??_analogInputs+2)& (0+255),b
 36510  0093F2  6BA3               	clrf	(??_analogInputs+3)& (0+255),b
 36511  0093F4  51A0               	movf	??_analogInputs& (0+255),w,b
 36512  0093F6  27A2               	addwf	(??_analogInputs+2)& (0+255),f,b
 36513  0093F8  51A1               	movf	(??_analogInputs+1)& (0+255),w,b
 36514  0093FA  23A3               	addwfc	(??_analogInputs+3)& (0+255),f,b
 36515  0093FC  502D               	movf	_TIMER_OVERFLOWS,w,c
 36516  0093FE  6FA4               	movwf	(??_analogInputs+4)& (0+255),b
 36517  009400  6BA5               	clrf	(??_analogInputs+5)& (0+255),b
 36518  009402  51A2               	movf	(??_analogInputs+2)& (0+255),w,b
 36519  009404  5DA4               	subwf	(??_analogInputs+4)& (0+255),w,b
 36520  009406  51A5               	movf	(??_analogInputs+5)& (0+255),w,b
 36521  009408  0A80               	xorlw	128
 36522  00940A  6FA6               	movwf	(??_analogInputs+6)& (0+255),b
 36523  00940C  51A3               	movf	(??_analogInputs+3)& (0+255),w,b
 36524  00940E  0A80               	xorlw	128
 36525  009410  59A6               	subwfb	(??_analogInputs+6)& (0+255),w,b
 36526  009412  B0D8               	btfsc	status,0,c
 36527  009414  0012               	return	
 36528                           
 36529                           ; BSR set to: 1
 36530                           ;main.c: 353: readPotentiometers();
 36531  009416  EC1E  F005         	call	_readPotentiometers	;wreg free
 36532  00941A  0012               	return	
 36533  00941C                     __end_of_analogInputs:
 36534                           	opt stack 0
 36535                           tblptru	equ	0xFF8
 36536                           tblptrh	equ	0xFF7
 36537                           tblptrl	equ	0xFF6
 36538                           tablat	equ	0xFF5
 36539                           prodh	equ	0xFF4
 36540                           prodl	equ	0xFF3
 36541                           intcon	equ	0xFF2
 36542                           intcon2	equ	0xFF1
 36543                           indf0	equ	0xFEF
 36544                           postinc0	equ	0xFEE
 36545                           fsr0h	equ	0xFEA
 36546                           fsr0l	equ	0xFE9
 36547                           wreg	equ	0xFE8
 36548                           postinc1	equ	0xFE6
 36549                           postdec1	equ	0xFE5
 36550                           plusw1	equ	0xFE3
 36551                           fsr1h	equ	0xFE2
 36552                           fsr1l	equ	0xFE1
 36553                           indf2	equ	0xFDF
 36554                           postinc2	equ	0xFDE
 36555                           postdec2	equ	0xFDD
 36556                           plusw2	equ	0xFDB
 36557                           fsr2h	equ	0xFDA
 36558                           fsr2l	equ	0xFD9
 36559                           status	equ	0xFD8
 36560                           
 36561 ;; *************** function _readPotentiometers *****************
 36562 ;; Defined at:
 36563 ;;		line 34 in file "potentiometers.c"
 36564 ;; Parameters:    Size  Location     Type
 36565 ;;		None
 36566 ;; Auto vars:     Size  Location     Type
 36567 ;;  i               1    6[BANK1 ] unsigned char 
 36568 ;;  i               1    4[BANK1 ] unsigned char 
 36569 ;;  i               1    5[BANK1 ] unsigned char 
 36570 ;; Return value:  Size  Location     Type
 36571 ;;                  1    wreg      void 
 36572 ;; Registers used:
 36573 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+9, btemp
      ++10, btemp+11, prodl, prodh, cstack
 36574 ;; Tracked objects:
 36575 ;;		On entry : 0/0
 36576 ;;		On exit  : 0/0
 36577 ;;		Unchanged: 0/0
 36578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 36579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36580 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0
 36581 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 36582 ;;      Totals:         0       5       7       0       0       0       0       0       0       0       0       0       
      +0       0
 36583 ;;Total ram usage:       12 bytes
 36584 ;; Hardware stack levels used:    1
 36585 ;; Hardware stack levels required when called:   10
 36586 ;; This function calls:
 36587 ;;		_ADC_Read
 36588 ;;		___fladd
 36589 ;;		___flmul
 36590 ;;		___flneg
 36591 ;;		___fltol
 36592 ;;		___xxtofl
 36593 ;;		_map
 36594 ;;		_processPotentiometers
 36595 ;; This function is called by:
 36596 ;;		_analogInputs
 36597 ;; This function uses a non-reentrant model
 36598 ;;
 36599                           
 36600                           	psect	text104
 36601  000A3C                     __ptext104:
 36602                           	opt stack 0
 36603  000A3C                     _readPotentiometers:
 36604                           	opt stack 16
 36605                           
 36606                           ;potentiometers.c: 40: for(unsigned char i=0;i<16;i++){
 36607                           
 36608                           ;incstack = 0
 36609  000A3C  0E00               	movlw	0
 36610  000A3E  0101               	movlb	1	; () banked
 36611  000A40  6F9E               	movwf	readPotentiometers@i& (0+255),b
 36612  000A42                     l30500:
 36613                           
 36614                           ; BSR set to: 1
 36615  000A42  0E0F               	movlw	15
 36616  000A44  659E               	cpfsgt	readPotentiometers@i& (0+255),b
 36617  000A46  D001               	goto	l4052
 36618  000A48  D02B               	goto	u54920
 36619  000A4A                     l4052:
 36620                           
 36621                           ; BSR set to: 1
 36622                           ;potentiometers.c: 42: potentiometer_raw[i] = ADC_Read(i);
 36623                           
 36624                           ; BSR set to: 1
 36625  000A4A  519E               	movf	readPotentiometers@i& (0+255),w,b
 36626  000A4C  EC94  F04B         	call	_ADC_Read
 36627  000A50  0101               	movlb	1	; () banked
 36628  000A52  519E               	movf	readPotentiometers@i& (0+255),w,b
 36629  000A54  0D02               	mullw	2
 36630  000A56  0E69               	movlw	low _potentiometer_raw
 36631  000A58  24F3               	addwf	prodl,w,c
 36632  000A5A  6ED9               	movwf	fsr2l,c
 36633  000A5C  0E03               	movlw	high _potentiometer_raw
 36634  000A5E  20F4               	addwfc	prodh,w,c
 36635  000A60  6EDA               	movwf	fsr2h,c
 36636  000A62  0100               	movlb	0	; () banked
 36637  000A64  C060  FFDE         	movff	?_ADC_Read,postinc2
 36638  000A68  C061  FFDD         	movff	?_ADC_Read+1,postdec2
 36639                           
 36640                           ; BSR set to: 0
 36641                           ;potentiometers.c: 51: if (FIRST_READING == 0) {
 36642  000A6C  B006               	btfsc	_FIRST_READING/(0+8),_FIRST_READING& (0+7),c
 36643  000A6E  D015               	goto	l4054
 36644                           
 36645                           ; BSR set to: 0
 36646                           ;potentiometers.c: 52: ema_sum[i] = potentiometer_raw[i];
 36647  000A70  0101               	movlb	1	; () banked
 36648  000A72  519E               	movf	readPotentiometers@i& (0+255),w,b
 36649  000A74  0D02               	mullw	2
 36650  000A76  0E69               	movlw	low _potentiometer_raw
 36651  000A78  24F3               	addwf	prodl,w,c
 36652  000A7A  6ED9               	movwf	fsr2l,c
 36653  000A7C  0E03               	movlw	high _potentiometer_raw
 36654  000A7E  20F4               	addwfc	prodh,w,c
 36655  000A80  6EDA               	movwf	fsr2h,c
 36656  000A82  519E               	movf	readPotentiometers@i& (0+255),w,b
 36657  000A84  0D02               	mullw	2
 36658  000A86  0E40               	movlw	low _ema_sum
 36659  000A88  24F3               	addwf	prodl,w,c
 36660  000A8A  6EE9               	movwf	fsr0l,c
 36661  000A8C  0E02               	movlw	high _ema_sum
 36662  000A8E  20F4               	addwfc	prodh,w,c
 36663  000A90  6EEA               	movwf	fsr0h,c
 36664  000A92  CFDE FFEE          	movff	postinc2,postinc0
 36665  000A96  CFDD FFED          	movff	postdec2,postdec0
 36666  000A9A                     l4054:
 36667                           
 36668                           ; BSR set to: 1
 36669  000A9A  0101               	movlb	1	; () banked
 36670  000A9C  2B9E               	incf	readPotentiometers@i& (0+255),f,b
 36671  000A9E  D7D1               	goto	l30500
 36672  000AA0                     u54920:
 36673                           
 36674                           ; BSR set to: 1
 36675                           ;potentiometers.c: 53: }
 36676                           ;potentiometers.c: 54: }
 36677                           ;potentiometers.c: 57: for(unsigned char i=0;i<16;i++){
 36678                           
 36679                           ; BSR set to: 1
 36680  000AA0  0E00               	movlw	0
 36681  000AA2  6F9D               	movwf	readPotentiometers@i_3437& (0+255),b
 36682  000AA4                     l30516:
 36683                           
 36684                           ; BSR set to: 1
 36685  000AA4  0E0F               	movlw	15
 36686  000AA6  659D               	cpfsgt	readPotentiometers@i_3437& (0+255),b
 36687  000AA8  D001               	goto	l4055
 36688  000AAA  D0A1               	goto	u54940
 36689  000AAC                     l4055:
 36690                           
 36691                           ; BSR set to: 1
 36692                           ;potentiometers.c: 58: ema_sum[i] = (ema_alpha * potentiometer_raw[i]) + ((1 - ema_alpha
      +                          ) * ema_sum[i]);
 36693                           
 36694                           ; BSR set to: 1
 36695  000AAC  519D               	movf	readPotentiometers@i_3437& (0+255),w,b
 36696  000AAE  0D02               	mullw	2
 36697  000AB0  0E40               	movlw	low _ema_sum
 36698  000AB2  24F3               	addwf	prodl,w,c
 36699  000AB4  6ED9               	movwf	fsr2l,c
 36700  000AB6  0E02               	movlw	high _ema_sum
 36701  000AB8  20F4               	addwfc	prodh,w,c
 36702  000ABA  6EDA               	movwf	fsr2h,c
 36703  000ABC  CFDE F060          	movff	postinc2,___xxtofl@val
 36704  000AC0  CFDD F061          	movff	postdec2,___xxtofl@val+1
 36705  000AC4  0100               	movlb	0	; () banked
 36706  000AC6  0E00               	movlw	0
 36707  000AC8  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 36708  000ACA  0EFF               	movlw	-1
 36709  000ACC  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 36710  000ACE  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 36711  000AD0  0E01               	movlw	1
 36712  000AD2  EC14  F030         	call	___xxtofl
 36713  000AD6  C060  F072         	movff	?___xxtofl,___flmul@a
 36714  000ADA  C061  F073         	movff	?___xxtofl+1,___flmul@a+1
 36715  000ADE  C062  F074         	movff	?___xxtofl+2,___flmul@a+2
 36716  000AE2  C063  F075         	movff	?___xxtofl+3,___flmul@a+3
 36717  000AE6  0E00               	movlw	0
 36718  000AE8  0100               	movlb	0	; () banked
 36719  000AEA  6FA8               	movwf	___fladd@a& (0+255),b
 36720  000AEC  0E00               	movlw	0
 36721  000AEE  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 36722  000AF0  0E80               	movlw	128
 36723  000AF2  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 36724  000AF4  0E3F               	movlw	63
 36725  000AF6  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 36726  000AF8  C104  F0A0         	movff	_ema_alpha,___flneg@f1
 36727  000AFC  C105  F0A1         	movff	_ema_alpha+1,___flneg@f1+1
 36728  000B00  C106  F0A2         	movff	_ema_alpha+2,___flneg@f1+2
 36729  000B04  C107  F0A3         	movff	_ema_alpha+3,___flneg@f1+3
 36730  000B08  ECFD  F04B         	call	___flneg	;wreg free
 36731  000B0C  C0A0  F0A4         	movff	?___flneg,___fladd@b
 36732  000B10  C0A1  F0A5         	movff	?___flneg+1,___fladd@b+1
 36733  000B14  C0A2  F0A6         	movff	?___flneg+2,___fladd@b+2
 36734  000B18  C0A3  F0A7         	movff	?___flneg+3,___fladd@b+3
 36735  000B1C  ECB5  F019         	call	___fladd	;wreg free
 36736  000B20  C0A4  F06E         	movff	?___fladd,___flmul@b
 36737  000B24  C0A5  F06F         	movff	?___fladd+1,___flmul@b+1
 36738  000B28  C0A6  F070         	movff	?___fladd+2,___flmul@b+2
 36739  000B2C  C0A7  F071         	movff	?___fladd+3,___flmul@b+3
 36740  000B30  EC0C  F018         	call	___flmul	;wreg free
 36741  000B34  C06E  F199         	movff	?___flmul,_readPotentiometers$5910
 36742  000B38  C06F  F19A         	movff	?___flmul+1,_readPotentiometers$5910+1
 36743  000B3C  C070  F19B         	movff	?___flmul+2,_readPotentiometers$5910+2
 36744  000B40  C071  F19C         	movff	?___flmul+3,_readPotentiometers$5910+3
 36745                           
 36746                           ;potentiometers.c: 58: ema_sum[i] = (ema_alpha * potentiometer_raw[i]) + ((1 - ema_alpha
      +                          ) * ema_sum[i]);
 36747  000B44  C199  F0A8         	movff	_readPotentiometers$5910,___fladd@a
 36748  000B48  C19A  F0A9         	movff	_readPotentiometers$5910+1,___fladd@a+1
 36749  000B4C  C19B  F0AA         	movff	_readPotentiometers$5910+2,___fladd@a+2
 36750  000B50  C19C  F0AB         	movff	_readPotentiometers$5910+3,___fladd@a+3
 36751  000B54  C104  F072         	movff	_ema_alpha,___flmul@a
 36752  000B58  C105  F073         	movff	_ema_alpha+1,___flmul@a+1
 36753  000B5C  C106  F074         	movff	_ema_alpha+2,___flmul@a+2
 36754  000B60  C107  F075         	movff	_ema_alpha+3,___flmul@a+3
 36755  000B64  0101               	movlb	1	; () banked
 36756  000B66  519D               	movf	readPotentiometers@i_3437& (0+255),w,b
 36757  000B68  0D02               	mullw	2
 36758  000B6A  0E69               	movlw	low _potentiometer_raw
 36759  000B6C  24F3               	addwf	prodl,w,c
 36760  000B6E  6ED9               	movwf	fsr2l,c
 36761  000B70  0E03               	movlw	high _potentiometer_raw
 36762  000B72  20F4               	addwfc	prodh,w,c
 36763  000B74  6EDA               	movwf	fsr2h,c
 36764  000B76  CFDE F060          	movff	postinc2,___xxtofl@val
 36765  000B7A  CFDD F061          	movff	postdec2,___xxtofl@val+1
 36766  000B7E  0100               	movlb	0	; () banked
 36767  000B80  0E00               	movlw	0
 36768  000B82  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 36769  000B84  0EFF               	movlw	-1
 36770  000B86  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 36771  000B88  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 36772  000B8A  0E01               	movlw	1
 36773  000B8C  EC14  F030         	call	___xxtofl
 36774  000B90  C060  F06E         	movff	?___xxtofl,___flmul@b
 36775  000B94  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 36776  000B98  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 36777  000B9C  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 36778  000BA0  EC0C  F018         	call	___flmul	;wreg free
 36779  000BA4  C06E  F0A4         	movff	?___flmul,___fladd@b
 36780  000BA8  C06F  F0A5         	movff	?___flmul+1,___fladd@b+1
 36781  000BAC  C070  F0A6         	movff	?___flmul+2,___fladd@b+2
 36782  000BB0  C071  F0A7         	movff	?___flmul+3,___fladd@b+3
 36783  000BB4  ECB5  F019         	call	___fladd	;wreg free
 36784  000BB8  C0A4  F0B8         	movff	?___fladd,___fltol@f1
 36785  000BBC  C0A5  F0B9         	movff	?___fladd+1,___fltol@f1+1
 36786  000BC0  C0A6  F0BA         	movff	?___fladd+2,___fltol@f1+2
 36787  000BC4  C0A7  F0BB         	movff	?___fladd+3,___fltol@f1+3
 36788  000BC8  ECF3  F037         	call	___fltol	;wreg free
 36789  000BCC  0101               	movlb	1	; () banked
 36790  000BCE  519D               	movf	readPotentiometers@i_3437& (0+255),w,b
 36791  000BD0  0D02               	mullw	2
 36792  000BD2  0E40               	movlw	low _ema_sum
 36793  000BD4  24F3               	addwf	prodl,w,c
 36794  000BD6  6ED9               	movwf	fsr2l,c
 36795  000BD8  0E02               	movlw	high _ema_sum
 36796  000BDA  20F4               	addwfc	prodh,w,c
 36797  000BDC  6EDA               	movwf	fsr2h,c
 36798  000BDE  0100               	movlb	0	; () banked
 36799  000BE0  C0B8  FFDE         	movff	?___fltol,postinc2
 36800  000BE4  C0B9  FFDD         	movff	?___fltol+1,postdec2
 36801                           
 36802                           ; BSR set to: 0
 36803  000BE8  0101               	movlb	1	; () banked
 36804  000BEA  2B9D               	incf	readPotentiometers@i_3437& (0+255),f,b
 36805  000BEC  D75B               	goto	l30516
 36806  000BEE                     u54940:
 36807                           
 36808                           ; BSR set to: 1
 36809                           ;potentiometers.c: 59: }
 36810                           ;potentiometers.c: 64: for(unsigned char i = 0; i<16; i++){
 36811                           
 36812                           ; BSR set to: 1
 36813  000BEE  0E00               	movlw	0
 36814  000BF0  6F9F               	movwf	readPotentiometers@i_3438& (0+255),b
 36815  000BF2                     l30528:
 36816                           
 36817                           ; BSR set to: 1
 36818  000BF2  0E0F               	movlw	15
 36819  000BF4  659F               	cpfsgt	readPotentiometers@i_3438& (0+255),b
 36820  000BF6  D001               	goto	l4057
 36821  000BF8  D2D3               	goto	u55130
 36822  000BFA                     l4057:
 36823                           
 36824                           ; BSR set to: 1
 36825                           ;potentiometers.c: 74: static unsigned long count;
 36826                           ;potentiometers.c: 75: count++;
 36827                           
 36828                           ; BSR set to: 1
 36829  000BFA  0E01               	movlw	1
 36830  000BFC  0102               	movlb	2	; () banked
 36831  000BFE  2760               	addwf	readPotentiometers@count& (0+255),f,b
 36832  000C00  0E00               	movlw	0
 36833  000C02  2361               	addwfc	(readPotentiometers@count+1)& (0+255),f,b
 36834  000C04  2362               	addwfc	(readPotentiometers@count+2)& (0+255),f,b
 36835  000C06  2363               	addwfc	(readPotentiometers@count+3)& (0+255),f,b
 36836                           
 36837                           ; BSR set to: 2
 36838                           ;potentiometers.c: 81: if (FIRST_READING == 0) {potentiometer_filtered_last[i] = ema_sum
      +                          [i];}
 36839  000C08  B006               	btfsc	_FIRST_READING/(0+8),_FIRST_READING& (0+7),c
 36840  000C0A  D015               	goto	l4061
 36841                           
 36842                           ; BSR set to: 2
 36843  000C0C  0101               	movlb	1	; () banked
 36844  000C0E  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 36845  000C10  0D02               	mullw	2
 36846  000C12  0E40               	movlw	low _ema_sum
 36847  000C14  24F3               	addwf	prodl,w,c
 36848  000C16  6ED9               	movwf	fsr2l,c
 36849  000C18  0E02               	movlw	high _ema_sum
 36850  000C1A  20F4               	addwfc	prodh,w,c
 36851  000C1C  6EDA               	movwf	fsr2h,c
 36852  000C1E  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 36853  000C20  0D02               	mullw	2
 36854  000C22  0E00               	movlw	low _potentiometer_filtered_last
 36855  000C24  24F3               	addwf	prodl,w,c
 36856  000C26  6EE9               	movwf	fsr0l,c
 36857  000C28  0E02               	movlw	high _potentiometer_filtered_last
 36858  000C2A  20F4               	addwfc	prodh,w,c
 36859  000C2C  6EEA               	movwf	fsr0h,c
 36860  000C2E  CFDE FFEE          	movff	postinc2,postinc0
 36861  000C32  CFDD FFED          	movff	postdec2,postdec0
 36862  000C36                     l4061:
 36863                           
 36864                           ;potentiometers.c: 83: if (((int)(ema_sum[i] - potentiometer_filtered_last[i]) >= HYST_V
      +                          AL) || ((int)(potentiometer_filtered_last[i] - ema_sum[i]) >= HYST_VAL)) {
 36865                           
 36866                           ; BSR set to: 1
 36867  000C36  0101               	movlb	1	; () banked
 36868  000C38  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 36869  000C3A  0D02               	mullw	2
 36870  000C3C  0E40               	movlw	low _ema_sum
 36871  000C3E  24F3               	addwf	prodl,w,c
 36872  000C40  6ED9               	movwf	fsr2l,c
 36873  000C42  0E02               	movlw	high _ema_sum
 36874  000C44  20F4               	addwfc	prodh,w,c
 36875  000C46  6EDA               	movwf	fsr2h,c
 36876  000C48  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 36877  000C4C  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 36878  000C50  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 36879  000C52  0D02               	mullw	2
 36880  000C54  0E00               	movlw	low _potentiometer_filtered_last
 36881  000C56  24F3               	addwf	prodl,w,c
 36882  000C58  6ED9               	movwf	fsr2l,c
 36883  000C5A  0E02               	movlw	high _potentiometer_filtered_last
 36884  000C5C  20F4               	addwfc	prodh,w,c
 36885  000C5E  6EDA               	movwf	fsr2h,c
 36886  000C60  CFDE F0C4          	movff	postinc2,??_readPotentiometers+2
 36887  000C64  CFDD F0C5          	movff	postdec2,??_readPotentiometers+3
 36888  000C68  0100               	movlb	0	; () banked
 36889  000C6A  1FC4               	comf	(??_readPotentiometers+2)& (0+255),f,b
 36890  000C6C  1FC5               	comf	(??_readPotentiometers+3)& (0+255),f,b
 36891  000C6E  4BC4               	infsnz	(??_readPotentiometers+2)& (0+255),f,b
 36892  000C70  2BC5               	incf	(??_readPotentiometers+3)& (0+255),f,b
 36893  000C72  51C2               	movf	??_readPotentiometers& (0+255),w,b
 36894  000C74  27C4               	addwf	(??_readPotentiometers+2)& (0+255),f,b
 36895  000C76  51C3               	movf	(??_readPotentiometers+1)& (0+255),w,b
 36896  000C78  23C5               	addwfc	(??_readPotentiometers+3)& (0+255),f,b
 36897  000C7A  0101               	movlb	1	; () banked
 36898  000C7C  51F6               	movf	_HYST_VAL& (0+255),w,b
 36899  000C7E  0100               	movlb	0	; () banked
 36900  000C80  5DC4               	subwf	(??_readPotentiometers+2)& (0+255),w,b
 36901  000C82  51C5               	movf	(??_readPotentiometers+3)& (0+255),w,b
 36902  000C84  0A80               	xorlw	128
 36903  000C86  6FC6               	movwf	(??_readPotentiometers+4)& (0+255),b
 36904  000C88  0101               	movlb	1	; () banked
 36905  000C8A  51F7               	movf	(_HYST_VAL+1)& (0+255),w,b
 36906  000C8C  0A80               	xorlw	128
 36907  000C8E  0100               	movlb	0	; () banked
 36908  000C90  59C6               	subwfb	(??_readPotentiometers+4)& (0+255),w,b
 36909  000C92  B0D8               	btfsc	status,0,c
 36910  000C94  D030               	goto	u54980
 36911                           
 36912                           ; BSR set to: 0
 36913  000C96  0101               	movlb	1	; () banked
 36914  000C98  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 36915  000C9A  0D02               	mullw	2
 36916  000C9C  0E00               	movlw	low _potentiometer_filtered_last
 36917  000C9E  24F3               	addwf	prodl,w,c
 36918  000CA0  6ED9               	movwf	fsr2l,c
 36919  000CA2  0E02               	movlw	high _potentiometer_filtered_last
 36920  000CA4  20F4               	addwfc	prodh,w,c
 36921  000CA6  6EDA               	movwf	fsr2h,c
 36922  000CA8  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 36923  000CAC  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 36924  000CB0  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 36925  000CB2  0D02               	mullw	2
 36926  000CB4  0E40               	movlw	low _ema_sum
 36927  000CB6  24F3               	addwf	prodl,w,c
 36928  000CB8  6ED9               	movwf	fsr2l,c
 36929  000CBA  0E02               	movlw	high _ema_sum
 36930  000CBC  20F4               	addwfc	prodh,w,c
 36931  000CBE  6EDA               	movwf	fsr2h,c
 36932  000CC0  CFDE F0C4          	movff	postinc2,??_readPotentiometers+2
 36933  000CC4  CFDD F0C5          	movff	postdec2,??_readPotentiometers+3
 36934  000CC8  0100               	movlb	0	; () banked
 36935  000CCA  1FC4               	comf	(??_readPotentiometers+2)& (0+255),f,b
 36936  000CCC  1FC5               	comf	(??_readPotentiometers+3)& (0+255),f,b
 36937  000CCE  4BC4               	infsnz	(??_readPotentiometers+2)& (0+255),f,b
 36938  000CD0  2BC5               	incf	(??_readPotentiometers+3)& (0+255),f,b
 36939  000CD2  51C2               	movf	??_readPotentiometers& (0+255),w,b
 36940  000CD4  27C4               	addwf	(??_readPotentiometers+2)& (0+255),f,b
 36941  000CD6  51C3               	movf	(??_readPotentiometers+1)& (0+255),w,b
 36942  000CD8  23C5               	addwfc	(??_readPotentiometers+3)& (0+255),f,b
 36943  000CDA  0101               	movlb	1	; () banked
 36944  000CDC  51F6               	movf	_HYST_VAL& (0+255),w,b
 36945  000CDE  0100               	movlb	0	; () banked
 36946  000CE0  5DC4               	subwf	(??_readPotentiometers+2)& (0+255),w,b
 36947  000CE2  51C5               	movf	(??_readPotentiometers+3)& (0+255),w,b
 36948  000CE4  0A80               	xorlw	128
 36949  000CE6  6FC6               	movwf	(??_readPotentiometers+4)& (0+255),b
 36950  000CE8  0101               	movlb	1	; () banked
 36951  000CEA  51F7               	movf	(_HYST_VAL+1)& (0+255),w,b
 36952  000CEC  0A80               	xorlw	128
 36953  000CEE  0100               	movlb	0	; () banked
 36954  000CF0  59C6               	subwfb	(??_readPotentiometers+4)& (0+255),w,b
 36955  000CF2  A0D8               	btfss	status,0,c
 36956  000CF4  D240               	goto	l4062
 36957  000CF6                     u54980:
 36958                           
 36959                           ; BSR set to: 0
 36960                           ;potentiometers.c: 86: if((i==iterator_focus) || (iterator_focus==255)) {count = 0; coun
      +                          t_ISR = 0;}
 36961                           
 36962                           ; BSR set to: 0
 36963  000CF6  51FD               	movf	_iterator_focus& (0+255),w,b
 36964  000CF8  0101               	movlb	1	; () banked
 36965  000CFA  199F               	xorwf	readPotentiometers@i_3438& (0+255),w,b
 36966  000CFC  B4D8               	btfsc	status,2,c
 36967  000CFE  D004               	goto	u55000
 36968                           
 36969                           ; BSR set to: 1
 36970  000D00  0100               	movlb	0	; () banked
 36971  000D02  29FD               	incf	_iterator_focus& (0+255),w,b
 36972  000D04  A4D8               	btfss	status,2,c
 36973  000D06  D011               	goto	l4065
 36974  000D08                     u55000:
 36975                           
 36976                           ; BSR set to: 0
 36977  000D08  0E00               	movlw	0
 36978  000D0A  0102               	movlb	2	; () banked
 36979  000D0C  6F60               	movwf	readPotentiometers@count& (0+255),b
 36980  000D0E  0E00               	movlw	0
 36981  000D10  6F61               	movwf	(readPotentiometers@count+1)& (0+255),b
 36982  000D12  0E00               	movlw	0
 36983  000D14  6F62               	movwf	(readPotentiometers@count+2)& (0+255),b
 36984  000D16  0E00               	movlw	0
 36985  000D18  6F63               	movwf	(readPotentiometers@count+3)& (0+255),b
 36986  000D1A  0E00               	movlw	0
 36987  000D1C  6F64               	movwf	_count_ISR& (0+255),b
 36988  000D1E  0E00               	movlw	0
 36989  000D20  6F65               	movwf	(_count_ISR+1)& (0+255),b
 36990  000D22  0E00               	movlw	0
 36991  000D24  6F66               	movwf	(_count_ISR+2)& (0+255),b
 36992  000D26  0E00               	movlw	0
 36993  000D28  6F67               	movwf	(_count_ISR+3)& (0+255),b
 36994  000D2A                     l4065:
 36995                           
 36996                           ;potentiometers.c: 93: if(HYST_VAL == 32) {
 36997                           
 36998                           ; BSR set to: 2
 36999  000D2A  0E20               	movlw	32
 37000  000D2C  0101               	movlb	1	; () banked
 37001  000D2E  19F6               	xorwf	_HYST_VAL& (0+255),w,b
 37002  000D30  11F7               	iorwf	(_HYST_VAL+1)& (0+255),w,b
 37003  000D32  A4D8               	btfss	status,2,c
 37004  000D34  D095               	goto	l4070
 37005                           
 37006                           ; BSR set to: 1
 37007                           ;potentiometers.c: 96: if((int)(ema_sum[i] - potentiometer_filtered_last[i]) >= 32){
 37008  000D36  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37009  000D38  0D02               	mullw	2
 37010  000D3A  0E40               	movlw	low _ema_sum
 37011  000D3C  24F3               	addwf	prodl,w,c
 37012  000D3E  6ED9               	movwf	fsr2l,c
 37013  000D40  0E02               	movlw	high _ema_sum
 37014  000D42  20F4               	addwfc	prodh,w,c
 37015  000D44  6EDA               	movwf	fsr2h,c
 37016  000D46  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 37017  000D4A  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 37018  000D4E  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37019  000D50  0D02               	mullw	2
 37020  000D52  0E00               	movlw	low _potentiometer_filtered_last
 37021  000D54  24F3               	addwf	prodl,w,c
 37022  000D56  6ED9               	movwf	fsr2l,c
 37023  000D58  0E02               	movlw	high _potentiometer_filtered_last
 37024  000D5A  20F4               	addwfc	prodh,w,c
 37025  000D5C  6EDA               	movwf	fsr2h,c
 37026  000D5E  CFDE F0C4          	movff	postinc2,??_readPotentiometers+2
 37027  000D62  CFDD F0C5          	movff	postdec2,??_readPotentiometers+3
 37028  000D66  0100               	movlb	0	; () banked
 37029  000D68  1FC4               	comf	(??_readPotentiometers+2)& (0+255),f,b
 37030  000D6A  1FC5               	comf	(??_readPotentiometers+3)& (0+255),f,b
 37031  000D6C  4BC4               	infsnz	(??_readPotentiometers+2)& (0+255),f,b
 37032  000D6E  2BC5               	incf	(??_readPotentiometers+3)& (0+255),f,b
 37033  000D70  51C2               	movf	??_readPotentiometers& (0+255),w,b
 37034  000D72  27C4               	addwf	(??_readPotentiometers+2)& (0+255),f,b
 37035  000D74  51C3               	movf	(??_readPotentiometers+1)& (0+255),w,b
 37036  000D76  23C5               	addwfc	(??_readPotentiometers+3)& (0+255),f,b
 37037  000D78  BFC5               	btfsc	(??_readPotentiometers+3)& (0+255),7,b
 37038  000D7A  D025               	goto	l4069
 37039  000D7C  51C5               	movf	(??_readPotentiometers+3)& (0+255),w,b
 37040  000D7E  E104               	bnz	u55020
 37041  000D80  0E20               	movlw	32
 37042  000D82  5DC4               	subwf	(??_readPotentiometers+2)& (0+255),w,b
 37043  000D84  A0D8               	btfss	status,0,c
 37044  000D86  D01F               	goto	l4069
 37045  000D88                     u55020:
 37046                           
 37047                           ; BSR set to: 0
 37048                           ;potentiometers.c: 98: ema_sum[i] = (potentiometer_filtered_last[i] + 8);
 37049  000D88  0101               	movlb	1	; () banked
 37050  000D8A  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37051  000D8C  0D02               	mullw	2
 37052  000D8E  0E00               	movlw	low _potentiometer_filtered_last
 37053  000D90  24F3               	addwf	prodl,w,c
 37054  000D92  6ED9               	movwf	fsr2l,c
 37055  000D94  0E02               	movlw	high _potentiometer_filtered_last
 37056  000D96  20F4               	addwfc	prodh,w,c
 37057  000D98  6EDA               	movwf	fsr2h,c
 37058  000D9A  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 37059  000D9E  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 37060  000DA2  0E08               	movlw	8
 37061  000DA4  0100               	movlb	0	; () banked
 37062  000DA6  27C2               	addwf	??_readPotentiometers& (0+255),f,b
 37063  000DA8  0E00               	movlw	0
 37064  000DAA  23C3               	addwfc	(??_readPotentiometers+1)& (0+255),f,b
 37065  000DAC  0101               	movlb	1	; () banked
 37066  000DAE  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37067  000DB0  0D02               	mullw	2
 37068  000DB2  0E40               	movlw	low _ema_sum
 37069  000DB4  24F3               	addwf	prodl,w,c
 37070  000DB6  6ED9               	movwf	fsr2l,c
 37071  000DB8  0E02               	movlw	high _ema_sum
 37072  000DBA  20F4               	addwfc	prodh,w,c
 37073  000DBC  6EDA               	movwf	fsr2h,c
 37074  000DBE  C0C2  FFDE         	movff	??_readPotentiometers,postinc2
 37075  000DC2  C0C3  FFDD         	movff	??_readPotentiometers+1,postdec2
 37076  000DC6                     l4069:
 37077                           
 37078                           ;potentiometers.c: 99: }
 37079                           ;potentiometers.c: 101: if((int)(potentiometer_filtered_last[i] - ema_sum[i]) >= 32){
 37080  000DC6  0101               	movlb	1	; () banked
 37081  000DC8  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37082  000DCA  0D02               	mullw	2
 37083  000DCC  0E00               	movlw	low _potentiometer_filtered_last
 37084  000DCE  24F3               	addwf	prodl,w,c
 37085  000DD0  6ED9               	movwf	fsr2l,c
 37086  000DD2  0E02               	movlw	high _potentiometer_filtered_last
 37087  000DD4  20F4               	addwfc	prodh,w,c
 37088  000DD6  6EDA               	movwf	fsr2h,c
 37089  000DD8  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 37090  000DDC  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 37091  000DE0  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37092  000DE2  0D02               	mullw	2
 37093  000DE4  0E40               	movlw	low _ema_sum
 37094  000DE6  24F3               	addwf	prodl,w,c
 37095  000DE8  6ED9               	movwf	fsr2l,c
 37096  000DEA  0E02               	movlw	high _ema_sum
 37097  000DEC  20F4               	addwfc	prodh,w,c
 37098  000DEE  6EDA               	movwf	fsr2h,c
 37099  000DF0  CFDE F0C4          	movff	postinc2,??_readPotentiometers+2
 37100  000DF4  CFDD F0C5          	movff	postdec2,??_readPotentiometers+3
 37101  000DF8  0100               	movlb	0	; () banked
 37102  000DFA  1FC4               	comf	(??_readPotentiometers+2)& (0+255),f,b
 37103  000DFC  1FC5               	comf	(??_readPotentiometers+3)& (0+255),f,b
 37104  000DFE  4BC4               	infsnz	(??_readPotentiometers+2)& (0+255),f,b
 37105  000E00  2BC5               	incf	(??_readPotentiometers+3)& (0+255),f,b
 37106  000E02  51C2               	movf	??_readPotentiometers& (0+255),w,b
 37107  000E04  27C4               	addwf	(??_readPotentiometers+2)& (0+255),f,b
 37108  000E06  51C3               	movf	(??_readPotentiometers+1)& (0+255),w,b
 37109  000E08  23C5               	addwfc	(??_readPotentiometers+3)& (0+255),f,b
 37110  000E0A  BFC5               	btfsc	(??_readPotentiometers+3)& (0+255),7,b
 37111  000E0C  D029               	goto	l4070
 37112  000E0E  51C5               	movf	(??_readPotentiometers+3)& (0+255),w,b
 37113  000E10  E104               	bnz	u55030
 37114  000E12  0E20               	movlw	32
 37115  000E14  5DC4               	subwf	(??_readPotentiometers+2)& (0+255),w,b
 37116  000E16  A0D8               	btfss	status,0,c
 37117  000E18  D023               	goto	l4070
 37118  000E1A                     u55030:
 37119                           
 37120                           ; BSR set to: 0
 37121                           ;potentiometers.c: 103: ema_sum[i] = (potentiometer_filtered_last[i] - 8);
 37122  000E1A  0EF8               	movlw	248
 37123  000E1C  6FC2               	movwf	??_readPotentiometers& (0+255),b
 37124  000E1E  0EFF               	movlw	255
 37125  000E20  6FC3               	movwf	(??_readPotentiometers+1)& (0+255),b
 37126  000E22  0101               	movlb	1	; () banked
 37127  000E24  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37128  000E26  0D02               	mullw	2
 37129  000E28  0E00               	movlw	low _potentiometer_filtered_last
 37130  000E2A  24F3               	addwf	prodl,w,c
 37131  000E2C  6ED9               	movwf	fsr2l,c
 37132  000E2E  0E02               	movlw	high _potentiometer_filtered_last
 37133  000E30  20F4               	addwfc	prodh,w,c
 37134  000E32  6EDA               	movwf	fsr2h,c
 37135  000E34  CFDE F0C4          	movff	postinc2,??_readPotentiometers+2
 37136  000E38  CFDD F0C5          	movff	postdec2,??_readPotentiometers+3
 37137  000E3C  0100               	movlb	0	; () banked
 37138  000E3E  51C2               	movf	??_readPotentiometers& (0+255),w,b
 37139  000E40  27C4               	addwf	(??_readPotentiometers+2)& (0+255),f,b
 37140  000E42  51C3               	movf	(??_readPotentiometers+1)& (0+255),w,b
 37141  000E44  23C5               	addwfc	(??_readPotentiometers+3)& (0+255),f,b
 37142  000E46  0101               	movlb	1	; () banked
 37143  000E48  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37144  000E4A  0D02               	mullw	2
 37145  000E4C  0E40               	movlw	low _ema_sum
 37146  000E4E  24F3               	addwf	prodl,w,c
 37147  000E50  6ED9               	movwf	fsr2l,c
 37148  000E52  0E02               	movlw	high _ema_sum
 37149  000E54  20F4               	addwfc	prodh,w,c
 37150  000E56  6EDA               	movwf	fsr2h,c
 37151  000E58  C0C4  FFDE         	movff	??_readPotentiometers+2,postinc2
 37152  000E5C  C0C5  FFDD         	movff	??_readPotentiometers+3,postdec2
 37153  000E60                     l4070:
 37154                           
 37155                           ;potentiometers.c: 104: }
 37156                           ;potentiometers.c: 105: }
 37157                           ;potentiometers.c: 107: HYST_VAL = 8;
 37158                           
 37159                           ; BSR set to: 1
 37160                           
 37161                           ; BSR set to: 1
 37162  000E60  0E00               	movlw	0
 37163  000E62  0101               	movlb	1	; () banked
 37164  000E64  6FF7               	movwf	(_HYST_VAL+1)& (0+255),b
 37165  000E66  0E08               	movlw	8
 37166  000E68  6FF6               	movwf	_HYST_VAL& (0+255),b
 37167                           
 37168                           ; BSR set to: 1
 37169                           ;potentiometers.c: 114: if(iterator_focus == 255) {iterator_focus = i;}
 37170  000E6A  0100               	movlb	0	; () banked
 37171  000E6C  29FD               	incf	_iterator_focus& (0+255),w,b
 37172  000E6E  B4D8               	btfsc	status,2,c
 37173                           
 37174                           ; BSR set to: 0
 37175  000E70  C19F  F0FD         	movff	readPotentiometers@i_3438,_iterator_focus
 37176                           
 37177                           ; BSR set to: 0
 37178                           ;potentiometers.c: 115: potentiometer_filtered_now[i] =ema_sum[i];
 37179                           
 37180                           ; BSR set to: 0
 37181  000E74  0101               	movlb	1	; () banked
 37182  000E76  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37183  000E78  0D02               	mullw	2
 37184  000E7A  0E40               	movlw	low _ema_sum
 37185  000E7C  24F3               	addwf	prodl,w,c
 37186  000E7E  6ED9               	movwf	fsr2l,c
 37187  000E80  0E02               	movlw	high _ema_sum
 37188  000E82  20F4               	addwfc	prodh,w,c
 37189  000E84  6EDA               	movwf	fsr2h,c
 37190  000E86  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37191  000E88  0D02               	mullw	2
 37192  000E8A  0E20               	movlw	low _potentiometer_filtered_now
 37193  000E8C  24F3               	addwf	prodl,w,c
 37194  000E8E  6EE9               	movwf	fsr0l,c
 37195  000E90  0E02               	movlw	high _potentiometer_filtered_now
 37196  000E92  20F4               	addwfc	prodh,w,c
 37197  000E94  6EEA               	movwf	fsr0h,c
 37198  000E96  CFDE FFEE          	movff	postinc2,postinc0
 37199  000E9A  CFDD FFED          	movff	postdec2,postdec0
 37200                           
 37201                           ; BSR set to: 1
 37202                           ;potentiometers.c: 118: if(inputPotsArray[i].controller_resolution == 0) {
 37203  000E9E  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37204  000EA0  0D03               	mullw	3
 37205  000EA2  0E88               	movlw	low _inputPotsArray
 37206  000EA4  24F3               	addwf	prodl,w,c
 37207  000EA6  6ED9               	movwf	fsr2l,c
 37208  000EA8  0E02               	movlw	high _inputPotsArray
 37209  000EAA  20F4               	addwfc	prodh,w,c
 37210  000EAC  6EDA               	movwf	fsr2h,c
 37211  000EAE  0102               	movlb	2	; () banked
 37212  000EB0  B0DF               	btfsc	indf2,0,c
 37213  000EB2  D09C               	goto	l4074
 37214                           
 37215                           ; BSR set to: 2
 37216                           ;potentiometers.c: 119: potentiometer_filtered_now[i] = map(potentiometer_filtered_now[i
      +                          ], 0, 0x3F50, 0, 0x3FFF);
 37217  000EB4  0101               	movlb	1	; () banked
 37218  000EB6  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37219  000EB8  0D02               	mullw	2
 37220  000EBA  0E20               	movlw	low _potentiometer_filtered_now
 37221  000EBC  24F3               	addwf	prodl,w,c
 37222  000EBE  6ED9               	movwf	fsr2l,c
 37223  000EC0  0E02               	movlw	high _potentiometer_filtered_now
 37224  000EC2  20F4               	addwfc	prodh,w,c
 37225  000EC4  6EDA               	movwf	fsr2h,c
 37226  000EC6  CFDE F06E          	movff	postinc2,map@x
 37227  000ECA  CFDD F06F          	movff	postdec2,map@x+1
 37228  000ECE  0100               	movlb	0	; () banked
 37229  000ED0  0E00               	movlw	0
 37230  000ED2  BF6F               	btfsc	(map@x+1)& (0+255),7,b
 37231  000ED4  0EFF               	movlw	-1
 37232  000ED6  6F70               	movwf	(map@x+2)& (0+255),b
 37233  000ED8  6F71               	movwf	(map@x+3)& (0+255),b
 37234  000EDA  0E00               	movlw	0
 37235  000EDC  6F72               	movwf	map@in_min& (0+255),b
 37236  000EDE  0E00               	movlw	0
 37237  000EE0  6F73               	movwf	(map@in_min+1)& (0+255),b
 37238  000EE2  0E00               	movlw	0
 37239  000EE4  6F74               	movwf	(map@in_min+2)& (0+255),b
 37240  000EE6  0E00               	movlw	0
 37241  000EE8  6F75               	movwf	(map@in_min+3)& (0+255),b
 37242  000EEA  0E50               	movlw	80
 37243  000EEC  6F76               	movwf	map@in_max& (0+255),b
 37244  000EEE  0E3F               	movlw	63
 37245  000EF0  6F77               	movwf	(map@in_max+1)& (0+255),b
 37246  000EF2  0E00               	movlw	0
 37247  000EF4  6F78               	movwf	(map@in_max+2)& (0+255),b
 37248  000EF6  0E00               	movlw	0
 37249  000EF8  6F79               	movwf	(map@in_max+3)& (0+255),b
 37250  000EFA  0E00               	movlw	0
 37251  000EFC  6F7A               	movwf	map@out_min& (0+255),b
 37252  000EFE  0E00               	movlw	0
 37253  000F00  6F7B               	movwf	(map@out_min+1)& (0+255),b
 37254  000F02  0E00               	movlw	0
 37255  000F04  6F7C               	movwf	(map@out_min+2)& (0+255),b
 37256  000F06  0E00               	movlw	0
 37257  000F08  6F7D               	movwf	(map@out_min+3)& (0+255),b
 37258  000F0A  0EFF               	movlw	255
 37259  000F0C  6F7E               	movwf	map@out_max& (0+255),b
 37260  000F0E  0E3F               	movlw	63
 37261  000F10  6F7F               	movwf	(map@out_max+1)& (0+255),b
 37262  000F12  0E00               	movlw	0
 37263  000F14  6F80               	movwf	(map@out_max+2)& (0+255),b
 37264  000F16  0E00               	movlw	0
 37265  000F18  6F81               	movwf	(map@out_max+3)& (0+255),b
 37266  000F1A  ECA3  F033         	call	_map	;wreg free
 37267  000F1E  0101               	movlb	1	; () banked
 37268  000F20  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37269  000F22  0D02               	mullw	2
 37270  000F24  0E20               	movlw	low _potentiometer_filtered_now
 37271  000F26  24F3               	addwf	prodl,w,c
 37272  000F28  6ED9               	movwf	fsr2l,c
 37273  000F2A  0E02               	movlw	high _potentiometer_filtered_now
 37274  000F2C  20F4               	addwfc	prodh,w,c
 37275  000F2E  6EDA               	movwf	fsr2h,c
 37276  000F30  0100               	movlb	0	; () banked
 37277  000F32  C06E  FFDE         	movff	?_map,postinc2
 37278  000F36  C06F  FFDD         	movff	?_map+1,postdec2
 37279                           
 37280                           ; BSR set to: 0
 37281                           ;potentiometers.c: 120: potentiometer_filtered_now[i] = potentiometer_filtered_now[i] >>
      +                           3;
 37282  000F3A  0101               	movlb	1	; () banked
 37283  000F3C  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37284  000F3E  0D02               	mullw	2
 37285  000F40  0E20               	movlw	low _potentiometer_filtered_now
 37286  000F42  24F3               	addwf	prodl,w,c
 37287  000F44  6ED9               	movwf	fsr2l,c
 37288  000F46  0E02               	movlw	high _potentiometer_filtered_now
 37289  000F48  20F4               	addwfc	prodh,w,c
 37290  000F4A  6EDA               	movwf	fsr2h,c
 37291  000F4C  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 37292  000F50  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 37293  000F54  0100               	movlb	0	; () banked
 37294  000F56  35C3               	rlcf	(??_readPotentiometers+1)& (0+255),w,b
 37295  000F58  33C3               	rrcf	(??_readPotentiometers+1)& (0+255),f,b
 37296  000F5A  33C2               	rrcf	??_readPotentiometers& (0+255),f,b
 37297  000F5C  35C3               	rlcf	(??_readPotentiometers+1)& (0+255),w,b
 37298  000F5E  33C3               	rrcf	(??_readPotentiometers+1)& (0+255),f,b
 37299  000F60  33C2               	rrcf	??_readPotentiometers& (0+255),f,b
 37300  000F62  35C3               	rlcf	(??_readPotentiometers+1)& (0+255),w,b
 37301  000F64  33C3               	rrcf	(??_readPotentiometers+1)& (0+255),f,b
 37302  000F66  33C2               	rrcf	??_readPotentiometers& (0+255),f,b
 37303  000F68  0101               	movlb	1	; () banked
 37304  000F6A  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37305  000F6C  0D02               	mullw	2
 37306  000F6E  0E20               	movlw	low _potentiometer_filtered_now
 37307  000F70  24F3               	addwf	prodl,w,c
 37308  000F72  6ED9               	movwf	fsr2l,c
 37309  000F74  0E02               	movlw	high _potentiometer_filtered_now
 37310  000F76  20F4               	addwfc	prodh,w,c
 37311  000F78  6EDA               	movwf	fsr2h,c
 37312  000F7A  C0C2  FFDE         	movff	??_readPotentiometers,postinc2
 37313  000F7E  C0C3  FFDD         	movff	??_readPotentiometers+1,postdec2
 37314                           
 37315                           ; BSR set to: 1
 37316                           ;potentiometers.c: 124: if(potentiometer_filtered_now[i] < 0){potentiometer_filtered_now
      +                          [i] = 0;}
 37317  000F82  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37318  000F84  0D02               	mullw	2
 37319  000F86  0E20               	movlw	low _potentiometer_filtered_now
 37320  000F88  24F3               	addwf	prodl,w,c
 37321  000F8A  6ED9               	movwf	fsr2l,c
 37322  000F8C  0E02               	movlw	high _potentiometer_filtered_now
 37323  000F8E  20F4               	addwfc	prodh,w,c
 37324  000F90  6EDA               	movwf	fsr2h,c
 37325  000F92  0E01               	movlw	1
 37326  000F94  AEDB               	btfss	plusw2,7,c
 37327  000F96  D00C               	goto	l4073
 37328                           
 37329                           ; BSR set to: 1
 37330  000F98  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37331  000F9A  0D02               	mullw	2
 37332  000F9C  0E20               	movlw	low _potentiometer_filtered_now
 37333  000F9E  24F3               	addwf	prodl,w,c
 37334  000FA0  6ED9               	movwf	fsr2l,c
 37335  000FA2  0E02               	movlw	high _potentiometer_filtered_now
 37336  000FA4  20F4               	addwfc	prodh,w,c
 37337  000FA6  6EDA               	movwf	fsr2h,c
 37338  000FA8  0E00               	movlw	0
 37339  000FAA  6EDE               	movwf	postinc2,c
 37340  000FAC  0E00               	movlw	0
 37341  000FAE  6EDD               	movwf	postdec2,c
 37342  000FB0                     l4073:
 37343                           
 37344                           ; BSR set to: 1
 37345                           ;potentiometers.c: 125: if(potentiometer_filtered_now[i] > 127){potentiometer_filtered_n
      +                          ow[i] = 127;}
 37346  000FB0  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37347  000FB2  0D02               	mullw	2
 37348  000FB4  0E20               	movlw	low _potentiometer_filtered_now
 37349  000FB6  24F3               	addwf	prodl,w,c
 37350  000FB8  6ED9               	movwf	fsr2l,c
 37351  000FBA  0E02               	movlw	high _potentiometer_filtered_now
 37352  000FBC  20F4               	addwfc	prodh,w,c
 37353  000FBE  6EDA               	movwf	fsr2h,c
 37354  000FC0  0E01               	movlw	1
 37355  000FC2  BEDB               	btfsc	plusw2,7,c
 37356  000FC4  D013               	goto	l4074
 37357  000FC6  0E01               	movlw	1
 37358  000FC8  50DB               	movf	plusw2,w,c
 37359  000FCA  E104               	bnz	u55070
 37360  000FCC  0E80               	movlw	128
 37361  000FCE  5CDE               	subwf	postinc2,w,c
 37362  000FD0  A0D8               	btfss	status,0,c
 37363  000FD2  D00C               	goto	l4074
 37364  000FD4                     u55070:
 37365                           
 37366                           ; BSR set to: 1
 37367  000FD4  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37368  000FD6  0D02               	mullw	2
 37369  000FD8  0E20               	movlw	low _potentiometer_filtered_now
 37370  000FDA  24F3               	addwf	prodl,w,c
 37371  000FDC  6ED9               	movwf	fsr2l,c
 37372  000FDE  0E02               	movlw	high _potentiometer_filtered_now
 37373  000FE0  20F4               	addwfc	prodh,w,c
 37374  000FE2  6EDA               	movwf	fsr2h,c
 37375  000FE4  0E7F               	movlw	127
 37376  000FE6  6EDE               	movwf	postinc2,c
 37377  000FE8  0E00               	movlw	0
 37378  000FEA  6EDD               	movwf	postdec2,c
 37379  000FEC                     l4074:
 37380                           
 37381                           ;potentiometers.c: 126: }
 37382                           ;potentiometers.c: 129: if(inputPotsArray[i].controller_resolution == 1) {
 37383                           
 37384                           ; BSR set to: 1
 37385  000FEC  0101               	movlb	1	; () banked
 37386  000FEE  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37387  000FF0  0D03               	mullw	3
 37388  000FF2  0E88               	movlw	low _inputPotsArray
 37389  000FF4  24F3               	addwf	prodl,w,c
 37390  000FF6  6ED9               	movwf	fsr2l,c
 37391  000FF8  0E02               	movlw	high _inputPotsArray
 37392  000FFA  20F4               	addwfc	prodh,w,c
 37393  000FFC  6EDA               	movwf	fsr2h,c
 37394  000FFE  0102               	movlb	2	; () banked
 37395  001000  A0DF               	btfss	indf2,0,c
 37396  001002  D09A               	goto	l4077
 37397                           
 37398                           ; BSR set to: 2
 37399                           ;potentiometers.c: 130: potentiometer_filtered_now[i] = potentiometer_filtered_now[i] <<
      +                           4;
 37400  001004  0101               	movlb	1	; () banked
 37401  001006  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37402  001008  0D02               	mullw	2
 37403  00100A  0E20               	movlw	low _potentiometer_filtered_now
 37404  00100C  24F3               	addwf	prodl,w,c
 37405  00100E  6ED9               	movwf	fsr2l,c
 37406  001010  0E02               	movlw	high _potentiometer_filtered_now
 37407  001012  20F4               	addwfc	prodh,w,c
 37408  001014  6EDA               	movwf	fsr2h,c
 37409  001016  CFDE F0C2          	movff	postinc2,??_readPotentiometers
 37410  00101A  CFDD F0C3          	movff	postdec2,??_readPotentiometers+1
 37411  00101E  0100               	movlb	0	; () banked
 37412  001020  3BC2               	swapf	??_readPotentiometers& (0+255),f,b
 37413  001022  3BC3               	swapf	(??_readPotentiometers+1)& (0+255),f,b
 37414  001024  0EF0               	movlw	240
 37415  001026  17C3               	andwf	(??_readPotentiometers+1)& (0+255),f,b
 37416  001028  51C2               	movf	??_readPotentiometers& (0+255),w,b
 37417  00102A  0B0F               	andlw	15
 37418  00102C  13C3               	iorwf	(??_readPotentiometers+1)& (0+255),f,b
 37419  00102E  0EF0               	movlw	240
 37420  001030  17C2               	andwf	??_readPotentiometers& (0+255),f,b
 37421  001032  0101               	movlb	1	; () banked
 37422  001034  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37423  001036  0D02               	mullw	2
 37424  001038  0E20               	movlw	low _potentiometer_filtered_now
 37425  00103A  24F3               	addwf	prodl,w,c
 37426  00103C  6ED9               	movwf	fsr2l,c
 37427  00103E  0E02               	movlw	high _potentiometer_filtered_now
 37428  001040  20F4               	addwfc	prodh,w,c
 37429  001042  6EDA               	movwf	fsr2h,c
 37430  001044  C0C2  FFDE         	movff	??_readPotentiometers,postinc2
 37431  001048  C0C3  FFDD         	movff	??_readPotentiometers+1,postdec2
 37432                           
 37433                           ; BSR set to: 1
 37434                           ;potentiometers.c: 131: potentiometer_filtered_now[i] = map(potentiometer_filtered_now[i
      +                          ], 0x50, 0x3F00, 0, 0x3FFF);
 37435  00104C  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37436  00104E  0D02               	mullw	2
 37437  001050  0E20               	movlw	low _potentiometer_filtered_now
 37438  001052  24F3               	addwf	prodl,w,c
 37439  001054  6ED9               	movwf	fsr2l,c
 37440  001056  0E02               	movlw	high _potentiometer_filtered_now
 37441  001058  20F4               	addwfc	prodh,w,c
 37442  00105A  6EDA               	movwf	fsr2h,c
 37443  00105C  CFDE F06E          	movff	postinc2,map@x
 37444  001060  CFDD F06F          	movff	postdec2,map@x+1
 37445  001064  0100               	movlb	0	; () banked
 37446  001066  0E00               	movlw	0
 37447  001068  BF6F               	btfsc	(map@x+1)& (0+255),7,b
 37448  00106A  0EFF               	movlw	-1
 37449  00106C  6F70               	movwf	(map@x+2)& (0+255),b
 37450  00106E  6F71               	movwf	(map@x+3)& (0+255),b
 37451  001070  0E50               	movlw	80
 37452  001072  6F72               	movwf	map@in_min& (0+255),b
 37453  001074  0E00               	movlw	0
 37454  001076  6F73               	movwf	(map@in_min+1)& (0+255),b
 37455  001078  0E00               	movlw	0
 37456  00107A  6F74               	movwf	(map@in_min+2)& (0+255),b
 37457  00107C  0E00               	movlw	0
 37458  00107E  6F75               	movwf	(map@in_min+3)& (0+255),b
 37459  001080  0E00               	movlw	0
 37460  001082  6F76               	movwf	map@in_max& (0+255),b
 37461  001084  0E3F               	movlw	63
 37462  001086  6F77               	movwf	(map@in_max+1)& (0+255),b
 37463  001088  0E00               	movlw	0
 37464  00108A  6F78               	movwf	(map@in_max+2)& (0+255),b
 37465  00108C  0E00               	movlw	0
 37466  00108E  6F79               	movwf	(map@in_max+3)& (0+255),b
 37467  001090  0E00               	movlw	0
 37468  001092  6F7A               	movwf	map@out_min& (0+255),b
 37469  001094  0E00               	movlw	0
 37470  001096  6F7B               	movwf	(map@out_min+1)& (0+255),b
 37471  001098  0E00               	movlw	0
 37472  00109A  6F7C               	movwf	(map@out_min+2)& (0+255),b
 37473  00109C  0E00               	movlw	0
 37474  00109E  6F7D               	movwf	(map@out_min+3)& (0+255),b
 37475  0010A0  0EFF               	movlw	255
 37476  0010A2  6F7E               	movwf	map@out_max& (0+255),b
 37477  0010A4  0E3F               	movlw	63
 37478  0010A6  6F7F               	movwf	(map@out_max+1)& (0+255),b
 37479  0010A8  0E00               	movlw	0
 37480  0010AA  6F80               	movwf	(map@out_max+2)& (0+255),b
 37481  0010AC  0E00               	movlw	0
 37482  0010AE  6F81               	movwf	(map@out_max+3)& (0+255),b
 37483  0010B0  ECA3  F033         	call	_map	;wreg free
 37484  0010B4  0101               	movlb	1	; () banked
 37485  0010B6  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37486  0010B8  0D02               	mullw	2
 37487  0010BA  0E20               	movlw	low _potentiometer_filtered_now
 37488  0010BC  24F3               	addwf	prodl,w,c
 37489  0010BE  6ED9               	movwf	fsr2l,c
 37490  0010C0  0E02               	movlw	high _potentiometer_filtered_now
 37491  0010C2  20F4               	addwfc	prodh,w,c
 37492  0010C4  6EDA               	movwf	fsr2h,c
 37493  0010C6  0100               	movlb	0	; () banked
 37494  0010C8  C06E  FFDE         	movff	?_map,postinc2
 37495  0010CC  C06F  FFDD         	movff	?_map+1,postdec2
 37496                           
 37497                           ; BSR set to: 0
 37498                           ;potentiometers.c: 133: if(potentiometer_filtered_now[i] < 0){potentiometer_filtered_now
      +                          [i] = 0;}
 37499  0010D0  0101               	movlb	1	; () banked
 37500  0010D2  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37501  0010D4  0D02               	mullw	2
 37502  0010D6  0E20               	movlw	low _potentiometer_filtered_now
 37503  0010D8  24F3               	addwf	prodl,w,c
 37504  0010DA  6ED9               	movwf	fsr2l,c
 37505  0010DC  0E02               	movlw	high _potentiometer_filtered_now
 37506  0010DE  20F4               	addwfc	prodh,w,c
 37507  0010E0  6EDA               	movwf	fsr2h,c
 37508  0010E2  0E01               	movlw	1
 37509  0010E4  AEDB               	btfss	plusw2,7,c
 37510  0010E6  D00C               	goto	l4076
 37511                           
 37512                           ; BSR set to: 1
 37513  0010E8  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37514  0010EA  0D02               	mullw	2
 37515  0010EC  0E20               	movlw	low _potentiometer_filtered_now
 37516  0010EE  24F3               	addwf	prodl,w,c
 37517  0010F0  6ED9               	movwf	fsr2l,c
 37518  0010F2  0E02               	movlw	high _potentiometer_filtered_now
 37519  0010F4  20F4               	addwfc	prodh,w,c
 37520  0010F6  6EDA               	movwf	fsr2h,c
 37521  0010F8  0E00               	movlw	0
 37522  0010FA  6EDE               	movwf	postinc2,c
 37523  0010FC  0E00               	movlw	0
 37524  0010FE  6EDD               	movwf	postdec2,c
 37525  001100                     l4076:
 37526                           
 37527                           ; BSR set to: 1
 37528                           ;potentiometers.c: 134: if(potentiometer_filtered_now[i] > 0x3FFF){potentiometer_filtere
      +                          d_now[i] = 0x3FFF;}
 37529  001100  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37530  001102  0D02               	mullw	2
 37531  001104  0E20               	movlw	low _potentiometer_filtered_now
 37532  001106  24F3               	addwf	prodl,w,c
 37533  001108  6ED9               	movwf	fsr2l,c
 37534  00110A  0E02               	movlw	high _potentiometer_filtered_now
 37535  00110C  20F4               	addwfc	prodh,w,c
 37536  00110E  6EDA               	movwf	fsr2h,c
 37537  001110  0E01               	movlw	1
 37538  001112  BEDB               	btfsc	plusw2,7,c
 37539  001114  D011               	goto	l4077
 37540  001116  52DE               	movf	postinc2,f,c
 37541  001118  0E40               	movlw	64
 37542  00111A  5CDE               	subwf	postinc2,w,c
 37543  00111C  A0D8               	btfss	status,0,c
 37544  00111E  D00C               	goto	l4077
 37545                           
 37546                           ; BSR set to: 1
 37547  001120  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37548  001122  0D02               	mullw	2
 37549  001124  0E20               	movlw	low _potentiometer_filtered_now
 37550  001126  24F3               	addwf	prodl,w,c
 37551  001128  6ED9               	movwf	fsr2l,c
 37552  00112A  0E02               	movlw	high _potentiometer_filtered_now
 37553  00112C  20F4               	addwfc	prodh,w,c
 37554  00112E  6EDA               	movwf	fsr2h,c
 37555  001130  0EFF               	movlw	255
 37556  001132  6EDE               	movwf	postinc2,c
 37557  001134  0E3F               	movlw	63
 37558  001136  6EDD               	movwf	postdec2,c
 37559  001138                     l4077:
 37560                           
 37561                           ;potentiometers.c: 135: }
 37562                           ;potentiometers.c: 145: if(i==iterator_focus) {processPotentiometers(iterator_focus);}
 37563                           
 37564                           ; BSR set to: 1
 37565                           
 37566                           ; BSR set to: 1
 37567  001138  0100               	movlb	0	; () banked
 37568  00113A  51FD               	movf	_iterator_focus& (0+255),w,b
 37569  00113C  0101               	movlb	1	; () banked
 37570  00113E  199F               	xorwf	readPotentiometers@i_3438& (0+255),w,b
 37571  001140  A4D8               	btfss	status,2,c
 37572  001142  D004               	goto	l4078
 37573                           
 37574                           ; BSR set to: 1
 37575  001144  0100               	movlb	0	; () banked
 37576  001146  51FD               	movf	_iterator_focus& (0+255),w,b
 37577  001148  ECE9  F020         	call	_processPotentiometers
 37578  00114C                     l4078:
 37579                           
 37580                           ;potentiometers.c: 146: potentiometer_filtered_last[i] = ema_sum[i];
 37581  00114C  0101               	movlb	1	; () banked
 37582  00114E  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37583  001150  0D02               	mullw	2
 37584  001152  0E40               	movlw	low _ema_sum
 37585  001154  24F3               	addwf	prodl,w,c
 37586  001156  6ED9               	movwf	fsr2l,c
 37587  001158  0E02               	movlw	high _ema_sum
 37588  00115A  20F4               	addwfc	prodh,w,c
 37589  00115C  6EDA               	movwf	fsr2h,c
 37590  00115E  519F               	movf	readPotentiometers@i_3438& (0+255),w,b
 37591  001160  0D02               	mullw	2
 37592  001162  0E00               	movlw	low _potentiometer_filtered_last
 37593  001164  24F3               	addwf	prodl,w,c
 37594  001166  6EE9               	movwf	fsr0l,c
 37595  001168  0E02               	movlw	high _potentiometer_filtered_last
 37596  00116A  20F4               	addwfc	prodh,w,c
 37597  00116C  6EEA               	movwf	fsr0h,c
 37598  00116E  CFDE FFEE          	movff	postinc2,postinc0
 37599  001172  CFDD FFED          	movff	postdec2,postdec0
 37600  001176                     l4062:
 37601                           
 37602                           ;potentiometers.c: 148: }
 37603                           ;potentiometers.c: 152: if (count_ISR >= number_of_interrupts) {
 37604                           
 37605                           ; BSR set to: 1
 37606  001176  0102               	movlb	2	; () banked
 37607  001178  51C4               	movf	_number_of_interrupts& (0+255),w,b
 37608  00117A  5D64               	subwf	_count_ISR& (0+255),w,b
 37609  00117C  51C5               	movf	(_number_of_interrupts+1)& (0+255),w,b
 37610  00117E  5965               	subwfb	(_count_ISR+1)& (0+255),w,b
 37611  001180  51C6               	movf	(_number_of_interrupts+2)& (0+255),w,b
 37612  001182  5966               	subwfb	(_count_ISR+2)& (0+255),w,b
 37613  001184  51C7               	movf	(_number_of_interrupts+3)& (0+255),w,b
 37614  001186  5967               	subwfb	(_count_ISR+3)& (0+255),w,b
 37615  001188  A0D8               	btfss	status,0,c
 37616  00118A  D007               	goto	l4079
 37617                           
 37618                           ; BSR set to: 2
 37619                           ;potentiometers.c: 154: HYST_VAL = 32;
 37620  00118C  0E00               	movlw	0
 37621  00118E  0101               	movlb	1	; () banked
 37622  001190  6FF7               	movwf	(_HYST_VAL+1)& (0+255),b
 37623  001192  0E20               	movlw	32
 37624  001194  6FF6               	movwf	_HYST_VAL& (0+255),b
 37625                           
 37626                           ; BSR set to: 1
 37627                           ;potentiometers.c: 161: iterator_focus = 255;
 37628  001196  0100               	movlb	0	; () banked
 37629  001198  69FD               	setf	_iterator_focus& (0+255),b
 37630  00119A                     l4079:
 37631                           
 37632                           ; BSR set to: 0
 37633  00119A  0101               	movlb	1	; () banked
 37634  00119C  2B9F               	incf	readPotentiometers@i_3438& (0+255),f,b
 37635  00119E  D529               	goto	l30528
 37636  0011A0                     u55130:
 37637                           
 37638                           ; BSR set to: 1
 37639                           ;potentiometers.c: 162: }
 37640                           ;potentiometers.c: 163: }
 37641                           ;potentiometers.c: 165: FIRST_READING = 1;
 37642  0011A0  8006               	bsf	_FIRST_READING/(0+8),_FIRST_READING& (0+7),c
 37643                           
 37644                           ; BSR set to: 1
 37645  0011A2  0012               	return		;funcret
 37646  0011A4                     __end_of_readPotentiometers:
 37647                           	opt stack 0
 37648                           tblptru	equ	0xFF8
 37649                           tblptrh	equ	0xFF7
 37650                           tblptrl	equ	0xFF6
 37651                           tablat	equ	0xFF5
 37652                           prodh	equ	0xFF4
 37653                           prodl	equ	0xFF3
 37654                           intcon	equ	0xFF2
 37655                           intcon2	equ	0xFF1
 37656                           indf0	equ	0xFEF
 37657                           postinc0	equ	0xFEE
 37658                           postdec0	equ	0xFED
 37659                           fsr0h	equ	0xFEA
 37660                           fsr0l	equ	0xFE9
 37661                           wreg	equ	0xFE8
 37662                           postinc1	equ	0xFE6
 37663                           postdec1	equ	0xFE5
 37664                           plusw1	equ	0xFE3
 37665                           fsr1h	equ	0xFE2
 37666                           fsr1l	equ	0xFE1
 37667                           indf2	equ	0xFDF
 37668                           postinc2	equ	0xFDE
 37669                           postdec2	equ	0xFDD
 37670                           plusw2	equ	0xFDB
 37671                           fsr2h	equ	0xFDA
 37672                           fsr2l	equ	0xFD9
 37673                           status	equ	0xFD8
 37674                           
 37675 ;; *************** function _processPotentiometers *****************
 37676 ;; Defined at:
 37677 ;;		line 169 in file "potentiometers.c"
 37678 ;; Parameters:    Size  Location     Type
 37679 ;;  i               1    wreg     unsigned char 
 37680 ;; Auto vars:     Size  Location     Type
 37681 ;;  i               1    8[BANK0 ] unsigned char 
 37682 ;;  highByte        1    7[BANK0 ] unsigned char 
 37683 ;;  lowByte         1    6[BANK0 ] unsigned char 
 37684 ;; Return value:  Size  Location     Type
 37685 ;;                  1    wreg      void 
 37686 ;; Registers used:
 37687 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
 37688 ;; Tracked objects:
 37689 ;;		On entry : 0/0
 37690 ;;		On exit  : 0/0
 37691 ;;		Unchanged: 0/0
 37692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 37693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37694 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37695 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37696 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 37697 ;;Total ram usage:        6 bytes
 37698 ;; Hardware stack levels used:    1
 37699 ;; Hardware stack levels required when called:    9
 37700 ;; This function calls:
 37701 ;;		_controlChange
 37702 ;;		_pitchBend
 37703 ;; This function is called by:
 37704 ;;		_readPotentiometers
 37705 ;; This function uses a non-reentrant model
 37706 ;;
 37707                           
 37708                           	psect	text105
 37709  0041D2                     __ptext105:
 37710                           	opt stack 0
 37711  0041D2                     _processPotentiometers:
 37712                           	opt stack 16
 37713                           
 37714                           ; BSR set to: 1
 37715                           ;incstack = 0
 37716                           ;processPotentiometers@i stored from wreg
 37717  0041D2  0100               	movlb	0	; () banked
 37718  0041D4  6F68               	movwf	processPotentiometers@i& (0+255),b
 37719                           
 37720                           ;potentiometers.c: 174: number_to_display = potentiometer_filtered_now[i];
 37721  0041D6  0100               	movlb	0	; () banked
 37722  0041D8  5168               	movf	processPotentiometers@i& (0+255),w,b
 37723  0041DA  0D02               	mullw	2
 37724  0041DC  0E20               	movlw	low _potentiometer_filtered_now
 37725  0041DE  24F3               	addwf	prodl,w,c
 37726  0041E0  6ED9               	movwf	fsr2l,c
 37727  0041E2  0E02               	movlw	high _potentiometer_filtered_now
 37728  0041E4  20F4               	addwfc	prodh,w,c
 37729  0041E6  6EDA               	movwf	fsr2h,c
 37730  0041E8  CFDE F04A          	movff	postinc2,_number_to_display
 37731  0041EC  CFDD F04B          	movff	postdec2,_number_to_display+1
 37732                           
 37733                           ;potentiometers.c: 178: if (inputPotsArray[i].controller_resolution == 0){
 37734  0041F0  5168               	movf	processPotentiometers@i& (0+255),w,b
 37735  0041F2  0D03               	mullw	3
 37736  0041F4  0E88               	movlw	low _inputPotsArray
 37737  0041F6  24F3               	addwf	prodl,w,c
 37738  0041F8  6ED9               	movwf	fsr2l,c
 37739  0041FA  0E02               	movlw	high _inputPotsArray
 37740  0041FC  20F4               	addwfc	prodh,w,c
 37741  0041FE  6EDA               	movwf	fsr2h,c
 37742  004200  0102               	movlb	2	; () banked
 37743  004202  B0DF               	btfsc	indf2,0,c
 37744  004204  D088               	goto	l4087
 37745                           
 37746                           ; BSR set to: 2
 37747                           ;potentiometers.c: 181: DISPLAY_MODE = 0;
 37748  004206  0E00               	movlw	0
 37749  004208  0100               	movlb	0	; () banked
 37750  00420A  6FEF               	movwf	_DISPLAY_MODE& (0+255),b
 37751                           
 37752                           ;potentiometers.c: 182: DIGIT_MODE = 0;
 37753  00420C  0E00               	movlw	0
 37754  00420E  6E39               	movwf	_DIGIT_MODE,c
 37755                           
 37756                           ; BSR set to: 0
 37757                           ;potentiometers.c: 186: if(inputPotsArray[i].controller_number >= 0) {
 37758  004210  5168               	movf	processPotentiometers@i& (0+255),w,b
 37759  004212  0D03               	mullw	3
 37760  004214  0E01               	movlw	1
 37761  004216  26F3               	addwf	prodl,f,c
 37762  004218  0E00               	movlw	0
 37763  00421A  22F4               	addwfc	prodh,f,c
 37764  00421C  0E88               	movlw	low _inputPotsArray
 37765  00421E  24F3               	addwf	prodl,w,c
 37766  004220  6ED9               	movwf	fsr2l,c
 37767  004222  0E02               	movlw	high _inputPotsArray
 37768  004224  20F4               	addwfc	prodh,w,c
 37769  004226  6EDA               	movwf	fsr2h,c
 37770  004228  0E00               	movlw	0
 37771  00422A  BEDB               	btfsc	plusw2,7,c
 37772  00422C  D01B               	goto	l4084
 37773                           
 37774                           ; BSR set to: 0
 37775                           ;potentiometers.c: 187: controlChange(channel, inputPotsArray[i].controller_number, pote
      +                          ntiometer_filtered_now[i]);
 37776  00422E  5168               	movf	processPotentiometers@i& (0+255),w,b
 37777  004230  0D03               	mullw	3
 37778  004232  0E01               	movlw	1
 37779  004234  26F3               	addwf	prodl,f,c
 37780  004236  0E00               	movlw	0
 37781  004238  22F4               	addwfc	prodh,f,c
 37782  00423A  0E88               	movlw	low _inputPotsArray
 37783  00423C  24F3               	addwf	prodl,w,c
 37784  00423E  6ED9               	movwf	fsr2l,c
 37785  004240  0E02               	movlw	high _inputPotsArray
 37786  004242  20F4               	addwfc	prodh,w,c
 37787  004244  6EDA               	movwf	fsr2h,c
 37788  004246  50DF               	movf	indf2,w,c
 37789  004248  6F60               	movwf	controlChange@controllerNumber& (0+255),b
 37790  00424A  5168               	movf	processPotentiometers@i& (0+255),w,b
 37791  00424C  0D02               	mullw	2
 37792  00424E  0E20               	movlw	low _potentiometer_filtered_now
 37793  004250  24F3               	addwf	prodl,w,c
 37794  004252  6ED9               	movwf	fsr2l,c
 37795  004254  0E02               	movlw	high _potentiometer_filtered_now
 37796  004256  20F4               	addwfc	prodh,w,c
 37797  004258  6EDA               	movwf	fsr2h,c
 37798  00425A  50DF               	movf	indf2,w,c
 37799  00425C  6F61               	movwf	controlChange@value& (0+255),b
 37800  00425E  503D               	movf	_channel,w,c
 37801  004260  EC19  F049         	call	_controlChange
 37802  004264                     l4084:
 37803                           
 37804                           ;potentiometers.c: 188: }
 37805                           ;potentiometers.c: 191: if(inputPotsArray[i].controller_number == -1) {
 37806  004264  0100               	movlb	0	; () banked
 37807  004266  5168               	movf	processPotentiometers@i& (0+255),w,b
 37808  004268  0D03               	mullw	3
 37809  00426A  0E01               	movlw	1
 37810  00426C  26F3               	addwf	prodl,f,c
 37811  00426E  0E00               	movlw	0
 37812  004270  22F4               	addwfc	prodh,f,c
 37813  004272  0E88               	movlw	low _inputPotsArray
 37814  004274  24F3               	addwf	prodl,w,c
 37815  004276  6ED9               	movwf	fsr2l,c
 37816  004278  0E02               	movlw	high _inputPotsArray
 37817  00427A  20F4               	addwfc	prodh,w,c
 37818  00427C  6EDA               	movwf	fsr2h,c
 37819  00427E  28DE               	incf	postinc2,w,c
 37820  004280  A4D8               	btfss	status,2,c
 37821  004282  D00A               	goto	l4085
 37822                           
 37823                           ; BSR set to: 0
 37824                           ;potentiometers.c: 192: velocity = potentiometer_filtered_now[i];
 37825  004284  5168               	movf	processPotentiometers@i& (0+255),w,b
 37826  004286  0D02               	mullw	2
 37827  004288  0E20               	movlw	low _potentiometer_filtered_now
 37828  00428A  24F3               	addwf	prodl,w,c
 37829  00428C  6ED9               	movwf	fsr2l,c
 37830  00428E  0E02               	movlw	high _potentiometer_filtered_now
 37831  004290  20F4               	addwfc	prodh,w,c
 37832  004292  6EDA               	movwf	fsr2h,c
 37833  004294  50DF               	movf	indf2,w,c
 37834  004296  6E50               	movwf	_velocity,c
 37835  004298                     l4085:
 37836                           
 37837                           ; BSR set to: 0
 37838                           ;potentiometers.c: 193: }
 37839                           ;potentiometers.c: 195: if(inputPotsArray[i].controller_number == -2) {
 37840  004298  5168               	movf	processPotentiometers@i& (0+255),w,b
 37841  00429A  0D03               	mullw	3
 37842  00429C  0E01               	movlw	1
 37843  00429E  26F3               	addwf	prodl,f,c
 37844  0042A0  0E00               	movlw	0
 37845  0042A2  22F4               	addwfc	prodh,f,c
 37846  0042A4  0E88               	movlw	low _inputPotsArray
 37847  0042A6  24F3               	addwf	prodl,w,c
 37848  0042A8  6ED9               	movwf	fsr2l,c
 37849  0042AA  0E02               	movlw	high _inputPotsArray
 37850  0042AC  20F4               	addwfc	prodh,w,c
 37851  0042AE  6EDA               	movwf	fsr2h,c
 37852  0042B0  0EFE               	movlw	254
 37853  0042B2  18DE               	xorwf	postinc2,w,c
 37854  0042B4  A4D8               	btfss	status,2,c
 37855  0042B6  D00F               	goto	l4086
 37856                           
 37857                           ; BSR set to: 0
 37858                           ;potentiometers.c: 196: pitchBend(channel, 0x00, potentiometer_filtered_now[i]);
 37859  0042B8  0E00               	movlw	0
 37860  0042BA  6F60               	movwf	pitchBend@lowByte& (0+255),b
 37861  0042BC  5168               	movf	processPotentiometers@i& (0+255),w,b
 37862  0042BE  0D02               	mullw	2
 37863  0042C0  0E20               	movlw	low _potentiometer_filtered_now
 37864  0042C2  24F3               	addwf	prodl,w,c
 37865  0042C4  6ED9               	movwf	fsr2l,c
 37866  0042C6  0E02               	movlw	high _potentiometer_filtered_now
 37867  0042C8  20F4               	addwfc	prodh,w,c
 37868  0042CA  6EDA               	movwf	fsr2h,c
 37869  0042CC  50DF               	movf	indf2,w,c
 37870  0042CE  6F61               	movwf	pitchBend@highByte& (0+255),b
 37871  0042D0  503D               	movf	_channel,w,c
 37872  0042D2  EC7C  F04A         	call	_pitchBend
 37873  0042D6                     l4086:
 37874                           
 37875                           ;potentiometers.c: 197: }
 37876                           ;potentiometers.c: 200: if(inputPotsArray[i].controller_number == -3) {
 37877  0042D6  0100               	movlb	0	; () banked
 37878  0042D8  5168               	movf	processPotentiometers@i& (0+255),w,b
 37879  0042DA  0D03               	mullw	3
 37880  0042DC  0E01               	movlw	1
 37881  0042DE  26F3               	addwf	prodl,f,c
 37882  0042E0  0E00               	movlw	0
 37883  0042E2  22F4               	addwfc	prodh,f,c
 37884  0042E4  0E88               	movlw	low _inputPotsArray
 37885  0042E6  24F3               	addwf	prodl,w,c
 37886  0042E8  6ED9               	movwf	fsr2l,c
 37887  0042EA  0E02               	movlw	high _inputPotsArray
 37888  0042EC  20F4               	addwfc	prodh,w,c
 37889  0042EE  6EDA               	movwf	fsr2h,c
 37890  0042F0  0EFD               	movlw	253
 37891  0042F2  18DE               	xorwf	postinc2,w,c
 37892  0042F4  A4D8               	btfss	status,2,c
 37893  0042F6  D00F               	goto	l4087
 37894                           
 37895                           ; BSR set to: 0
 37896                           ;potentiometers.c: 201: controlChange(channel, modulation_wheel_MSB, potentiometer_filte
      +                          red_now[i]);
 37897  0042F8  0E01               	movlw	1
 37898  0042FA  6F60               	movwf	controlChange@controllerNumber& (0+255),b
 37899  0042FC  5168               	movf	processPotentiometers@i& (0+255),w,b
 37900  0042FE  0D02               	mullw	2
 37901  004300  0E20               	movlw	low _potentiometer_filtered_now
 37902  004302  24F3               	addwf	prodl,w,c
 37903  004304  6ED9               	movwf	fsr2l,c
 37904  004306  0E02               	movlw	high _potentiometer_filtered_now
 37905  004308  20F4               	addwfc	prodh,w,c
 37906  00430A  6EDA               	movwf	fsr2h,c
 37907  00430C  50DF               	movf	indf2,w,c
 37908  00430E  6F61               	movwf	controlChange@value& (0+255),b
 37909  004310  503D               	movf	_channel,w,c
 37910  004312  EC19  F049         	call	_controlChange
 37911  004316                     l4087:
 37912                           
 37913                           ;potentiometers.c: 202: }
 37914                           ;potentiometers.c: 203: }
 37915                           ;potentiometers.c: 206: if (inputPotsArray[i].controller_resolution == 1){
 37916  004316  0100               	movlb	0	; () banked
 37917  004318  5168               	movf	processPotentiometers@i& (0+255),w,b
 37918  00431A  0D03               	mullw	3
 37919  00431C  0E88               	movlw	low _inputPotsArray
 37920  00431E  24F3               	addwf	prodl,w,c
 37921  004320  6ED9               	movwf	fsr2l,c
 37922  004322  0E02               	movlw	high _inputPotsArray
 37923  004324  20F4               	addwfc	prodh,w,c
 37924  004326  6EDA               	movwf	fsr2h,c
 37925  004328  0102               	movlb	2	; () banked
 37926  00432A  A0DF               	btfss	indf2,0,c
 37927  00432C  0012               	return	
 37928                           
 37929                           ; BSR set to: 2
 37930                           ;potentiometers.c: 209: DISPLAY_MODE = 0;
 37931  00432E  0E00               	movlw	0
 37932  004330  0100               	movlb	0	; () banked
 37933  004332  6FEF               	movwf	_DISPLAY_MODE& (0+255),b
 37934                           
 37935                           ;potentiometers.c: 210: DIGIT_MODE = 2;
 37936  004334  0E02               	movlw	2
 37937  004336  6E39               	movwf	_DIGIT_MODE,c
 37938                           
 37939                           ; BSR set to: 0
 37940                           ;potentiometers.c: 214: unsigned char lowByte = (potentiometer_filtered_now[i]) & 0x7F;
 37941  004338  5168               	movf	processPotentiometers@i& (0+255),w,b
 37942  00433A  0D02               	mullw	2
 37943  00433C  0E20               	movlw	low _potentiometer_filtered_now
 37944  00433E  24F3               	addwf	prodl,w,c
 37945  004340  6ED9               	movwf	fsr2l,c
 37946  004342  0E02               	movlw	high _potentiometer_filtered_now
 37947  004344  20F4               	addwfc	prodh,w,c
 37948  004346  6EDA               	movwf	fsr2h,c
 37949  004348  50DF               	movf	indf2,w,c
 37950  00434A  0B7F               	andlw	127
 37951  00434C  6F66               	movwf	processPotentiometers@lowByte& (0+255),b
 37952                           
 37953                           ; BSR set to: 0
 37954                           ;potentiometers.c: 215: unsigned char highByte = (potentiometer_filtered_now[i] >> 7) & 
      +                          0x7F;
 37955  00434E  5168               	movf	processPotentiometers@i& (0+255),w,b
 37956  004350  0D02               	mullw	2
 37957  004352  0E20               	movlw	low _potentiometer_filtered_now
 37958  004354  24F3               	addwf	prodl,w,c
 37959  004356  6ED9               	movwf	fsr2l,c
 37960  004358  0E02               	movlw	high _potentiometer_filtered_now
 37961  00435A  20F4               	addwfc	prodh,w,c
 37962  00435C  6EDA               	movwf	fsr2h,c
 37963  00435E  CFDE F063          	movff	postinc2,??_processPotentiometers
 37964  004362  CFDD F064          	movff	postdec2,??_processPotentiometers+1
 37965  004366  0E07               	movlw	7
 37966  004368  6F65               	movwf	(??_processPotentiometers+2)& (0+255),b
 37967  00436A                     u51795:
 37968  00436A  3564               	rlcf	(??_processPotentiometers+1)& (0+255),w,b
 37969  00436C  3364               	rrcf	(??_processPotentiometers+1)& (0+255),f,b
 37970  00436E  3363               	rrcf	??_processPotentiometers& (0+255),f,b
 37971  004370  2F65               	decfsz	(??_processPotentiometers+2)& (0+255),f,b
 37972  004372  D7FB               	goto	u51795
 37973  004374  5163               	movf	??_processPotentiometers& (0+255),w,b
 37974  004376  0B7F               	andlw	127
 37975  004378  6F67               	movwf	processPotentiometers@highByte& (0+255),b
 37976                           
 37977                           ; BSR set to: 0
 37978                           ;potentiometers.c: 218: if(inputPotsArray[i].controller_number_two_byte >= 0) {
 37979  00437A  5168               	movf	processPotentiometers@i& (0+255),w,b
 37980  00437C  0D03               	mullw	3
 37981  00437E  0E02               	movlw	2
 37982  004380  26F3               	addwf	prodl,f,c
 37983  004382  0E00               	movlw	0
 37984  004384  22F4               	addwfc	prodh,f,c
 37985  004386  0E88               	movlw	low _inputPotsArray
 37986  004388  24F3               	addwf	prodl,w,c
 37987  00438A  6ED9               	movwf	fsr2l,c
 37988  00438C  0E02               	movlw	high _inputPotsArray
 37989  00438E  20F4               	addwfc	prodh,w,c
 37990  004390  6EDA               	movwf	fsr2h,c
 37991  004392  0E00               	movlw	0
 37992  004394  BEDB               	btfsc	plusw2,7,c
 37993  004396  D028               	goto	l4089
 37994                           
 37995                           ; BSR set to: 0
 37996                           ;potentiometers.c: 219: controlChange(channel, inputPotsArray[i].controller_number_two_b
      +                          yte, highByte);
 37997  004398  5168               	movf	processPotentiometers@i& (0+255),w,b
 37998  00439A  0D03               	mullw	3
 37999  00439C  0E02               	movlw	2
 38000  00439E  26F3               	addwf	prodl,f,c
 38001  0043A0  0E00               	movlw	0
 38002  0043A2  22F4               	addwfc	prodh,f,c
 38003  0043A4  0E88               	movlw	low _inputPotsArray
 38004  0043A6  24F3               	addwf	prodl,w,c
 38005  0043A8  6ED9               	movwf	fsr2l,c
 38006  0043AA  0E02               	movlw	high _inputPotsArray
 38007  0043AC  20F4               	addwfc	prodh,w,c
 38008  0043AE  6EDA               	movwf	fsr2h,c
 38009  0043B0  50DF               	movf	indf2,w,c
 38010  0043B2  6F60               	movwf	controlChange@controllerNumber& (0+255),b
 38011  0043B4  C067  F061         	movff	processPotentiometers@highByte,controlChange@value
 38012  0043B8  503D               	movf	_channel,w,c
 38013  0043BA  EC19  F049         	call	_controlChange
 38014                           
 38015                           ;potentiometers.c: 220: controlChange(channel, inputPotsArray[i].controller_number_two_b
      +                          yte + 32, lowByte);
 38016  0043BE  0100               	movlb	0	; () banked
 38017  0043C0  5168               	movf	processPotentiometers@i& (0+255),w,b
 38018  0043C2  0D03               	mullw	3
 38019  0043C4  0E02               	movlw	2
 38020  0043C6  26F3               	addwf	prodl,f,c
 38021  0043C8  0E00               	movlw	0
 38022  0043CA  22F4               	addwfc	prodh,f,c
 38023  0043CC  0E88               	movlw	low _inputPotsArray
 38024  0043CE  24F3               	addwf	prodl,w,c
 38025  0043D0  6ED9               	movwf	fsr2l,c
 38026  0043D2  0E02               	movlw	high _inputPotsArray
 38027  0043D4  20F4               	addwfc	prodh,w,c
 38028  0043D6  6EDA               	movwf	fsr2h,c
 38029  0043D8  50DF               	movf	indf2,w,c
 38030  0043DA  0F20               	addlw	32
 38031  0043DC  6F60               	movwf	controlChange@controllerNumber& (0+255),b
 38032  0043DE  C066  F061         	movff	processPotentiometers@lowByte,controlChange@value
 38033  0043E2  503D               	movf	_channel,w,c
 38034  0043E4  EC19  F049         	call	_controlChange
 38035  0043E8                     l4089:
 38036                           
 38037                           ;potentiometers.c: 221: }
 38038                           ;potentiometers.c: 223: if(inputPotsArray[i].controller_number_two_byte == -1) {
 38039  0043E8  0100               	movlb	0	; () banked
 38040  0043EA  5168               	movf	processPotentiometers@i& (0+255),w,b
 38041  0043EC  0D03               	mullw	3
 38042  0043EE  0E02               	movlw	2
 38043  0043F0  26F3               	addwf	prodl,f,c
 38044  0043F2  0E00               	movlw	0
 38045  0043F4  22F4               	addwfc	prodh,f,c
 38046  0043F6  0E88               	movlw	low _inputPotsArray
 38047  0043F8  24F3               	addwf	prodl,w,c
 38048  0043FA  6ED9               	movwf	fsr2l,c
 38049  0043FC  0E02               	movlw	high _inputPotsArray
 38050  0043FE  20F4               	addwfc	prodh,w,c
 38051  004400  6EDA               	movwf	fsr2h,c
 38052  004402  28DE               	incf	postinc2,w,c
 38053  004404  B4D8               	btfsc	status,2,c
 38054                           
 38055                           ; BSR set to: 0
 38056                           ;potentiometers.c: 224: velocity = highByte;
 38057  004406  C067  F050         	movff	processPotentiometers@highByte,_velocity
 38058                           
 38059                           ; BSR set to: 0
 38060                           ;potentiometers.c: 225: }
 38061                           ;potentiometers.c: 227: if(inputPotsArray[i].controller_number_two_byte == -2) {
 38062                           
 38063                           ; BSR set to: 0
 38064  00440A  5168               	movf	processPotentiometers@i& (0+255),w,b
 38065  00440C  0D03               	mullw	3
 38066  00440E  0E02               	movlw	2
 38067  004410  26F3               	addwf	prodl,f,c
 38068  004412  0E00               	movlw	0
 38069  004414  22F4               	addwfc	prodh,f,c
 38070  004416  0E88               	movlw	low _inputPotsArray
 38071  004418  24F3               	addwf	prodl,w,c
 38072  00441A  6ED9               	movwf	fsr2l,c
 38073  00441C  0E02               	movlw	high _inputPotsArray
 38074  00441E  20F4               	addwfc	prodh,w,c
 38075  004420  6EDA               	movwf	fsr2h,c
 38076  004422  0EFE               	movlw	254
 38077  004424  18DE               	xorwf	postinc2,w,c
 38078  004426  A4D8               	btfss	status,2,c
 38079  004428  D007               	goto	l4091
 38080                           
 38081                           ; BSR set to: 0
 38082                           ;potentiometers.c: 228: pitchBend(channel, lowByte, highByte);
 38083  00442A  C066  F060         	movff	processPotentiometers@lowByte,pitchBend@lowByte
 38084  00442E  C067  F061         	movff	processPotentiometers@highByte,pitchBend@highByte
 38085  004432  503D               	movf	_channel,w,c
 38086  004434  EC7C  F04A         	call	_pitchBend
 38087  004438                     l4091:
 38088                           
 38089                           ;potentiometers.c: 229: }
 38090                           ;potentiometers.c: 231: if(inputPotsArray[i].controller_number_two_byte == -3) {
 38091  004438  0100               	movlb	0	; () banked
 38092  00443A  5168               	movf	processPotentiometers@i& (0+255),w,b
 38093  00443C  0D03               	mullw	3
 38094  00443E  0E02               	movlw	2
 38095  004440  26F3               	addwf	prodl,f,c
 38096  004442  0E00               	movlw	0
 38097  004444  22F4               	addwfc	prodh,f,c
 38098  004446  0E88               	movlw	low _inputPotsArray
 38099  004448  24F3               	addwf	prodl,w,c
 38100  00444A  6ED9               	movwf	fsr2l,c
 38101  00444C  0E02               	movlw	high _inputPotsArray
 38102  00444E  20F4               	addwfc	prodh,w,c
 38103  004450  6EDA               	movwf	fsr2h,c
 38104  004452  0EFD               	movlw	253
 38105  004454  18DE               	xorwf	postinc2,w,c
 38106  004456  A4D8               	btfss	status,2,c
 38107  004458  0012               	return	
 38108                           
 38109                           ; BSR set to: 0
 38110                           ;potentiometers.c: 232: controlChange(channel, modulation_wheel_MSB, highByte);
 38111  00445A  0E01               	movlw	1
 38112  00445C  6F60               	movwf	controlChange@controllerNumber& (0+255),b
 38113  00445E  C067  F061         	movff	processPotentiometers@highByte,controlChange@value
 38114  004462  503D               	movf	_channel,w,c
 38115  004464  EC19  F049         	call	_controlChange
 38116                           
 38117                           ;potentiometers.c: 233: controlChange(channel, modulation_wheel_MSB + 32, lowByte);
 38118  004468  0E21               	movlw	33
 38119  00446A  0100               	movlb	0	; () banked
 38120  00446C  6F60               	movwf	controlChange@controllerNumber& (0+255),b
 38121  00446E  C066  F061         	movff	processPotentiometers@lowByte,controlChange@value
 38122  004472  503D               	movf	_channel,w,c
 38123  004474  EC19  F049         	call	_controlChange
 38124  004478  0012               	return	
 38125  00447A                     __end_of_processPotentiometers:
 38126                           	opt stack 0
 38127                           tblptru	equ	0xFF8
 38128                           tblptrh	equ	0xFF7
 38129                           tblptrl	equ	0xFF6
 38130                           tablat	equ	0xFF5
 38131                           prodh	equ	0xFF4
 38132                           prodl	equ	0xFF3
 38133                           intcon	equ	0xFF2
 38134                           intcon2	equ	0xFF1
 38135                           indf0	equ	0xFEF
 38136                           postinc0	equ	0xFEE
 38137                           postdec0	equ	0xFED
 38138                           fsr0h	equ	0xFEA
 38139                           fsr0l	equ	0xFE9
 38140                           wreg	equ	0xFE8
 38141                           postinc1	equ	0xFE6
 38142                           postdec1	equ	0xFE5
 38143                           plusw1	equ	0xFE3
 38144                           fsr1h	equ	0xFE2
 38145                           fsr1l	equ	0xFE1
 38146                           indf2	equ	0xFDF
 38147                           postinc2	equ	0xFDE
 38148                           postdec2	equ	0xFDD
 38149                           plusw2	equ	0xFDB
 38150                           fsr2h	equ	0xFDA
 38151                           fsr2l	equ	0xFD9
 38152                           status	equ	0xFD8
 38153                           
 38154 ;; *************** function _pitchBend *****************
 38155 ;; Defined at:
 38156 ;;		line 206 in file "midi.c"
 38157 ;; Parameters:    Size  Location     Type
 38158 ;;  channel         1    wreg     unsigned char 
 38159 ;;  lowByte         1    0[BANK0 ] unsigned char 
 38160 ;;  highByte        1    1[BANK0 ] unsigned char 
 38161 ;; Auto vars:     Size  Location     Type
 38162 ;;  channel         1    2[BANK0 ] unsigned char 
 38163 ;; Return value:  Size  Location     Type
 38164 ;;                  1    wreg      void 
 38165 ;; Registers used:
 38166 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
 38167 ;; Tracked objects:
 38168 ;;		On entry : 0/0
 38169 ;;		On exit  : 0/0
 38170 ;;		Unchanged: 0/0
 38171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38172 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38173 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38175 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38176 ;;Total ram usage:        3 bytes
 38177 ;; Hardware stack levels used:    1
 38178 ;; Hardware stack levels required when called:    8
 38179 ;; This function calls:
 38180 ;;		___lbmod
 38181 ;;		_key_press_release_note_off
 38182 ;;		_sendOut
 38183 ;;		_sendUSB
 38184 ;; This function is called by:
 38185 ;;		_processPotentiometers
 38186 ;; This function uses a non-reentrant model
 38187 ;;
 38188                           
 38189                           	psect	text106
 38190  0094F8                     __ptext106:
 38191                           	opt stack 0
 38192  0094F8                     _pitchBend:
 38193                           	opt stack 16
 38194                           
 38195                           ;incstack = 0
 38196                           ;pitchBend@channel stored from wreg
 38197  0094F8  0100               	movlb	0	; () banked
 38198  0094FA  6F62               	movwf	pitchBend@channel& (0+255),b
 38199                           
 38200                           ;midi.c: 209: if((note_off_was_sent == 0) && ((TIMER_OVERFLOWS % NOTE_LENGTH_PULSES) == 
      +                          0)){
 38201  0094FC  B052               	btfsc	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38202  0094FE  D00A               	goto	l500
 38203  009500  504C               	movf	_NOTE_LENGTH_PULSES,w,c
 38204  009502  6EE6               	movwf	postinc1,c
 38205  009504  502D               	movf	_TIMER_OVERFLOWS,w,c
 38206  009506  6EE6               	movwf	postinc1,c
 38207  009508  ECA5  F041         	call	___lbmod	;wreg free
 38208  00950C  503E               	movf	btemp,w,c
 38209  00950E  B4D8               	btfsc	status,2,c
 38210                           
 38211                           ;midi.c: 211: key_press_release_note_off();
 38212  009510  ECA7  F02E         	call	_key_press_release_note_off	;wreg free
 38213  009514                     l500:
 38214                           
 38215                           ;midi.c: 212: }
 38216                           ;midi.c: 214: statusByte = channel | pitch_bend;
 38217  009514  0100               	movlb	0	; () banked
 38218  009516  5162               	movf	pitchBend@channel& (0+255),w,b
 38219  009518  09E0               	iorlw	224
 38220  00951A  6E3C               	movwf	_statusByte,c
 38221                           
 38222                           ; BSR set to: 0
 38223                           ;midi.c: 217: sendUSB(statusByte, lowByte, highByte);
 38224  00951C  5161               	movf	pitchBend@highByte& (0+255),w,b
 38225  00951E  6EE6               	movwf	postinc1,c
 38226  009520  5160               	movf	pitchBend@lowByte& (0+255),w,b
 38227  009522  6EE6               	movwf	postinc1,c
 38228  009524  503C               	movf	_statusByte,w,c
 38229  009526  6EE6               	movwf	postinc1,c
 38230  009528  EC12  F037         	call	_sendUSB	;wreg free
 38231                           
 38232                           ;midi.c: 220: sendOut(statusByte, lowByte, highByte);
 38233  00952C  0100               	movlb	0	; () banked
 38234  00952E  5161               	movf	pitchBend@highByte& (0+255),w,b
 38235  009530  6EE6               	movwf	postinc1,c
 38236  009532  5160               	movf	pitchBend@lowByte& (0+255),w,b
 38237  009534  6EE6               	movwf	postinc1,c
 38238  009536  503C               	movf	_statusByte,w,c
 38239  009538  6EE6               	movwf	postinc1,c
 38240  00953A  EC9B  F036         	call	_sendOut	;wreg free
 38241  00953E  0012               	return		;funcret
 38242  009540                     __end_of_pitchBend:
 38243                           	opt stack 0
 38244                           tblptru	equ	0xFF8
 38245                           tblptrh	equ	0xFF7
 38246                           tblptrl	equ	0xFF6
 38247                           tablat	equ	0xFF5
 38248                           prodh	equ	0xFF4
 38249                           prodl	equ	0xFF3
 38250                           intcon	equ	0xFF2
 38251                           intcon2	equ	0xFF1
 38252                           indf0	equ	0xFEF
 38253                           postinc0	equ	0xFEE
 38254                           postdec0	equ	0xFED
 38255                           fsr0h	equ	0xFEA
 38256                           fsr0l	equ	0xFE9
 38257                           wreg	equ	0xFE8
 38258                           postinc1	equ	0xFE6
 38259                           postdec1	equ	0xFE5
 38260                           plusw1	equ	0xFE3
 38261                           fsr1h	equ	0xFE2
 38262                           fsr1l	equ	0xFE1
 38263                           indf2	equ	0xFDF
 38264                           postinc2	equ	0xFDE
 38265                           postdec2	equ	0xFDD
 38266                           plusw2	equ	0xFDB
 38267                           fsr2h	equ	0xFDA
 38268                           fsr2l	equ	0xFD9
 38269                           status	equ	0xFD8
 38270                           
 38271 ;; *************** function _controlChange *****************
 38272 ;; Defined at:
 38273 ;;		line 179 in file "midi.c"
 38274 ;; Parameters:    Size  Location     Type
 38275 ;;  channel         1    wreg     unsigned char 
 38276 ;;  controllerNu    1    0[BANK0 ] unsigned char 
 38277 ;;  value           1    1[BANK0 ] unsigned char 
 38278 ;; Auto vars:     Size  Location     Type
 38279 ;;  channel         1    2[BANK0 ] unsigned char 
 38280 ;; Return value:  Size  Location     Type
 38281 ;;                  1    wreg      void 
 38282 ;; Registers used:
 38283 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh, cstack
 38284 ;; Tracked objects:
 38285 ;;		On entry : 0/0
 38286 ;;		On exit  : 0/0
 38287 ;;		Unchanged: 0/0
 38288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38289 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38290 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38292 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38293 ;;Total ram usage:        3 bytes
 38294 ;; Hardware stack levels used:    1
 38295 ;; Hardware stack levels required when called:    8
 38296 ;; This function calls:
 38297 ;;		___lbmod
 38298 ;;		_key_press_release_note_off
 38299 ;;		_sendOut
 38300 ;;		_sendUSB
 38301 ;; This function is called by:
 38302 ;;		_processDrumpad
 38303 ;;		_processPotentiometers
 38304 ;;		_panic_button
 38305 ;; This function uses a non-reentrant model
 38306 ;;
 38307                           
 38308                           	psect	text107
 38309  009232                     __ptext107:
 38310                           	opt stack 0
 38311  009232                     _controlChange:
 38312                           	opt stack 21
 38313                           
 38314                           ;incstack = 0
 38315                           ;controlChange@channel stored from wreg
 38316  009232  0100               	movlb	0	; () banked
 38317  009234  6F62               	movwf	controlChange@channel& (0+255),b
 38318                           
 38319                           ;midi.c: 182: if((note_off_was_sent == 0) && ((TIMER_OVERFLOWS % NOTE_LENGTH_PULSES) == 
      +                          0)){
 38320  009236  B052               	btfsc	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38321  009238  D00A               	goto	l496
 38322  00923A  504C               	movf	_NOTE_LENGTH_PULSES,w,c
 38323  00923C  6EE6               	movwf	postinc1,c
 38324  00923E  502D               	movf	_TIMER_OVERFLOWS,w,c
 38325  009240  6EE6               	movwf	postinc1,c
 38326  009242  ECA5  F041         	call	___lbmod	;wreg free
 38327  009246  503E               	movf	btemp,w,c
 38328  009248  B4D8               	btfsc	status,2,c
 38329                           
 38330                           ;midi.c: 184: key_press_release_note_off();
 38331  00924A  ECA7  F02E         	call	_key_press_release_note_off	;wreg free
 38332  00924E                     l496:
 38333                           
 38334                           ;midi.c: 185: }
 38335                           ;midi.c: 187: statusByte = channel | control_change;
 38336  00924E  0100               	movlb	0	; () banked
 38337  009250  5162               	movf	controlChange@channel& (0+255),w,b
 38338  009252  09B0               	iorlw	176
 38339  009254  6E3C               	movwf	_statusByte,c
 38340                           
 38341                           ; BSR set to: 0
 38342                           ;midi.c: 190: sendUSB(statusByte, controllerNumber, value);
 38343  009256  5161               	movf	controlChange@value& (0+255),w,b
 38344  009258  6EE6               	movwf	postinc1,c
 38345  00925A  5160               	movf	controlChange@controllerNumber& (0+255),w,b
 38346  00925C  6EE6               	movwf	postinc1,c
 38347  00925E  503C               	movf	_statusByte,w,c
 38348  009260  6EE6               	movwf	postinc1,c
 38349  009262  EC12  F037         	call	_sendUSB	;wreg free
 38350                           
 38351                           ;midi.c: 194: GLOBAL_STATUS_BYTE = statusByte;
 38352  009266  C03C  F183         	movff	_statusByte,_GLOBAL_STATUS_BYTE
 38353                           
 38354                           ;midi.c: 195: GLOBAL_CC_NUMBER = controllerNumber;
 38355  00926A  C060  F182         	movff	controlChange@controllerNumber,_GLOBAL_CC_NUMBER
 38356                           
 38357                           ;midi.c: 196: GLOBAL_CC_VALUE = value;
 38358  00926E  C061  F181         	movff	controlChange@value,_GLOBAL_CC_VALUE
 38359                           
 38360                           ;midi.c: 198: CONTROL_CHANGE_IS_BEING_SENT = 1;
 38361  009272  8606               	bsf	_CONTROL_CHANGE_IS_BEING_SENT/(0+8),_CONTROL_CHANGE_IS_BEING_SENT& (0+7),c
 38362                           
 38363                           ;midi.c: 199: sendOut(statusByte, controllerNumber, value);
 38364  009274  0100               	movlb	0	; () banked
 38365  009276  5161               	movf	controlChange@value& (0+255),w,b
 38366  009278  6EE6               	movwf	postinc1,c
 38367  00927A  5160               	movf	controlChange@controllerNumber& (0+255),w,b
 38368  00927C  6EE6               	movwf	postinc1,c
 38369  00927E  503C               	movf	_statusByte,w,c
 38370  009280  6EE6               	movwf	postinc1,c
 38371  009282  EC9B  F036         	call	_sendOut	;wreg free
 38372                           
 38373                           ;midi.c: 202: CONTROL_CHANGE_IS_BEING_SENT = 0;
 38374  009286  9606               	bcf	_CONTROL_CHANGE_IS_BEING_SENT/(0+8),_CONTROL_CHANGE_IS_BEING_SENT& (0+7),c
 38375  009288  0012               	return		;funcret
 38376  00928A                     __end_of_controlChange:
 38377                           	opt stack 0
 38378                           tblptru	equ	0xFF8
 38379                           tblptrh	equ	0xFF7
 38380                           tblptrl	equ	0xFF6
 38381                           tablat	equ	0xFF5
 38382                           prodh	equ	0xFF4
 38383                           prodl	equ	0xFF3
 38384                           intcon	equ	0xFF2
 38385                           intcon2	equ	0xFF1
 38386                           indf0	equ	0xFEF
 38387                           postinc0	equ	0xFEE
 38388                           postdec0	equ	0xFED
 38389                           fsr0h	equ	0xFEA
 38390                           fsr0l	equ	0xFE9
 38391                           wreg	equ	0xFE8
 38392                           postinc1	equ	0xFE6
 38393                           postdec1	equ	0xFE5
 38394                           plusw1	equ	0xFE3
 38395                           fsr1h	equ	0xFE2
 38396                           fsr1l	equ	0xFE1
 38397                           indf2	equ	0xFDF
 38398                           postinc2	equ	0xFDE
 38399                           postdec2	equ	0xFDD
 38400                           plusw2	equ	0xFDB
 38401                           fsr2h	equ	0xFDA
 38402                           fsr2l	equ	0xFD9
 38403                           status	equ	0xFD8
 38404                           
 38405 ;; *************** function _key_press_release_note_off *****************
 38406 ;; Defined at:
 38407 ;;		line 110 in file "arpeggio.c"
 38408 ;; Parameters:    Size  Location     Type
 38409 ;;		None
 38410 ;; Auto vars:     Size  Location     Type
 38411 ;;		None
 38412 ;; Return value:  Size  Location     Type
 38413 ;;                  1    wreg      void 
 38414 ;; Registers used:
 38415 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh
 38416 ;; Tracked objects:
 38417 ;;		On entry : 0/0
 38418 ;;		On exit  : 0/0
 38419 ;;		Unchanged: 0/0
 38420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38424 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38425 ;;Total ram usage:        0 bytes
 38426 ;; Hardware stack levels used:    1
 38427 ;; Hardware stack levels required when called:    7
 38428 ;; This function calls:
 38429 ;;		_noteOff
 38430 ;; This function is called by:
 38431 ;;		_controlChange
 38432 ;;		_pitchBend
 38433 ;;		_programChange
 38434 ;;		_playThisNotePentatonic
 38435 ;;		_playTriad
 38436 ;;		_playSeventh
 38437 ;;		_playThisNote
 38438 ;;		_playThisNote8
 38439 ;;		_playDiatonicTriadMajor
 38440 ;;		_playDiatonicSeventhMajor
 38441 ;;		_playDiatonicTriadMinor
 38442 ;;		_playDiatonicSeventhMinor
 38443 ;;		_keyboardTranspose
 38444 ;;		_processOctave
 38445 ;; This function uses a non-reentrant model
 38446 ;;
 38447                           
 38448                           	psect	text108
 38449  005D4E                     __ptext108:
 38450                           	opt stack 0
 38451  005D4E                     _key_press_release_note_off:
 38452                           	opt stack 21
 38453                           
 38454                           ;arpeggio.c: 113: if((startingDirection == UP) && (ARPEGGIO_TYPE == DOWN_UP)){stored_oct
      +                          ave += (OCTAVES - 1);}
 38455                           
 38456                           ;incstack = 0
 38457  005D4E  5033               	movf	_startingDirection,w,c
 38458  005D50  A4D8               	btfss	status,2,c
 38459  005D52  D006               	goto	l5451
 38460  005D54  0E03               	movlw	3
 38461  005D56  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 38462  005D58  A4D8               	btfss	status,2,c
 38463  005D5A  D002               	goto	l5451
 38464  005D5C  044D               	decf	_OCTAVES,w,c
 38465  005D5E  2630               	addwf	_stored_octave,f,c
 38466  005D60                     l5451:
 38467                           
 38468                           ;arpeggio.c: 115: if((startingDirection == DOWN) && (ARPEGGIO_TYPE == UP_DOWN)){stored_o
      +                          ctave -= (OCTAVES - 1);}
 38469  005D60  0433               	decf	_startingDirection,w,c
 38470  005D62  A4D8               	btfss	status,2,c
 38471  005D64  D006               	goto	l5452
 38472  005D66  0E02               	movlw	2
 38473  005D68  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 38474  005D6A  A4D8               	btfss	status,2,c
 38475  005D6C  D002               	goto	l5452
 38476  005D6E  044D               	decf	_OCTAVES,w,c
 38477  005D70  5E30               	subwf	_stored_octave,f,c
 38478  005D72                     l5452:
 38479                           
 38480                           ;arpeggio.c: 118: TMR0ON = 0;
 38481  005D72  9ED5               	bcf	4053,7,c	;volatile
 38482                           
 38483                           ;arpeggio.c: 122: static signed char temp;
 38484                           ;arpeggio.c: 123: temp = last_note;
 38485  005D74  C0ED  F0E8         	movff	_last_note,key_press_release_note_off@temp
 38486                           
 38487                           ;arpeggio.c: 126: if((last_note != 0)){
 38488  005D78  0100               	movlb	0	; () banked
 38489  005D7A  51ED               	movf	_last_note& (0+255),w,b
 38490  005D7C  B4D8               	btfsc	status,2,c
 38491  005D7E  D07D               	goto	l5455
 38492                           
 38493                           ; BSR set to: 0
 38494                           ;arpeggio.c: 127: if(stored_octave == -3){noteOff(channel, temp - ((OCTAVES - (OCTAVES -
      +                           3)) * 12), velocity);}
 38495  005D80  0EFD               	movlw	253
 38496  005D82  1830               	xorwf	_stored_octave,w,c
 38497  005D84  A4D8               	btfss	status,2,c
 38498  005D86  D00F               	goto	l5456
 38499                           
 38500                           ; BSR set to: 0
 38501  005D88  5050               	movf	_velocity,w,c
 38502  005D8A  6EE6               	movwf	postinc1,c
 38503  005D8C  504D               	movf	_OCTAVES,w,c
 38504  005D8E  0FFD               	addlw	253
 38505  005D90  0800               	sublw	0
 38506  005D92  244D               	addwf	_OCTAVES,w,c
 38507  005D94  0D0C               	mullw	12
 38508  005D96  50F3               	movf	prodl,w,c
 38509  005D98  0800               	sublw	0
 38510  005D9A  25E8               	addwf	key_press_release_note_off@temp& (0+255),w,b
 38511  005D9C  6EE6               	movwf	postinc1,c
 38512  005D9E  503D               	movf	_channel,w,c
 38513  005DA0  6EE6               	movwf	postinc1,c
 38514  005DA2  ECA0  F04A         	call	_noteOff	;wreg free
 38515  005DA6                     l5456:
 38516                           
 38517                           ;arpeggio.c: 128: if(stored_octave == -2){noteOff(channel, temp - ((OCTAVES - (OCTAVES -
      +                           2)) * 12), velocity);}
 38518  005DA6  0EFE               	movlw	254
 38519  005DA8  1830               	xorwf	_stored_octave,w,c
 38520  005DAA  A4D8               	btfss	status,2,c
 38521  005DAC  D010               	goto	l5457
 38522  005DAE  5050               	movf	_velocity,w,c
 38523  005DB0  6EE6               	movwf	postinc1,c
 38524  005DB2  504D               	movf	_OCTAVES,w,c
 38525  005DB4  0FFE               	addlw	254
 38526  005DB6  0800               	sublw	0
 38527  005DB8  244D               	addwf	_OCTAVES,w,c
 38528  005DBA  0D0C               	mullw	12
 38529  005DBC  50F3               	movf	prodl,w,c
 38530  005DBE  0800               	sublw	0
 38531  005DC0  0100               	movlb	0	; () banked
 38532  005DC2  25E8               	addwf	key_press_release_note_off@temp& (0+255),w,b
 38533  005DC4  6EE6               	movwf	postinc1,c
 38534  005DC6  503D               	movf	_channel,w,c
 38535  005DC8  6EE6               	movwf	postinc1,c
 38536  005DCA  ECA0  F04A         	call	_noteOff	;wreg free
 38537  005DCE                     l5457:
 38538                           
 38539                           ;arpeggio.c: 129: if(stored_octave == -1){noteOff(channel, temp - ((OCTAVES - (OCTAVES -
      +                           1)) * 12), velocity);}
 38540  005DCE  2830               	incf	_stored_octave,w,c
 38541  005DD0  A4D8               	btfss	status,2,c
 38542  005DD2  D00F               	goto	l5458
 38543  005DD4  5050               	movf	_velocity,w,c
 38544  005DD6  6EE6               	movwf	postinc1,c
 38545  005DD8  044D               	decf	_OCTAVES,w,c
 38546  005DDA  0800               	sublw	0
 38547  005DDC  244D               	addwf	_OCTAVES,w,c
 38548  005DDE  0D0C               	mullw	12
 38549  005DE0  50F3               	movf	prodl,w,c
 38550  005DE2  0800               	sublw	0
 38551  005DE4  0100               	movlb	0	; () banked
 38552  005DE6  25E8               	addwf	key_press_release_note_off@temp& (0+255),w,b
 38553  005DE8  6EE6               	movwf	postinc1,c
 38554  005DEA  503D               	movf	_channel,w,c
 38555  005DEC  6EE6               	movwf	postinc1,c
 38556  005DEE  ECA0  F04A         	call	_noteOff	;wreg free
 38557  005DF2                     l5458:
 38558                           
 38559                           ;arpeggio.c: 131: if(stored_octave == 0){
 38560  005DF2  5030               	movf	_stored_octave,w,c
 38561  005DF4  A4D8               	btfss	status,2,c
 38562  005DF6  D009               	goto	l5459
 38563                           
 38564                           ;arpeggio.c: 132: noteOff(channel, temp, velocity);
 38565  005DF8  5050               	movf	_velocity,w,c
 38566  005DFA  6EE6               	movwf	postinc1,c
 38567  005DFC  0100               	movlb	0	; () banked
 38568  005DFE  51E8               	movf	key_press_release_note_off@temp& (0+255),w,b
 38569  005E00  6EE6               	movwf	postinc1,c
 38570  005E02  503D               	movf	_channel,w,c
 38571  005E04  6EE6               	movwf	postinc1,c
 38572  005E06  ECA0  F04A         	call	_noteOff	;wreg free
 38573  005E0A                     l5459:
 38574                           
 38575                           ;arpeggio.c: 133: }
 38576                           ;arpeggio.c: 135: if(stored_octave == 1){noteOff(channel, temp + ((OCTAVES - (OCTAVES - 
      +                          1)) * 12), velocity);}
 38577  005E0A  0430               	decf	_stored_octave,w,c
 38578  005E0C  A4D8               	btfss	status,2,c
 38579  005E0E  D00E               	goto	l5460
 38580  005E10  5050               	movf	_velocity,w,c
 38581  005E12  6EE6               	movwf	postinc1,c
 38582  005E14  044D               	decf	_OCTAVES,w,c
 38583  005E16  0800               	sublw	0
 38584  005E18  244D               	addwf	_OCTAVES,w,c
 38585  005E1A  0D0C               	mullw	12
 38586  005E1C  50F3               	movf	prodl,w,c
 38587  005E1E  0100               	movlb	0	; () banked
 38588  005E20  25E8               	addwf	key_press_release_note_off@temp& (0+255),w,b
 38589  005E22  6EE6               	movwf	postinc1,c
 38590  005E24  503D               	movf	_channel,w,c
 38591  005E26  6EE6               	movwf	postinc1,c
 38592  005E28  ECA0  F04A         	call	_noteOff	;wreg free
 38593  005E2C                     l5460:
 38594                           
 38595                           ;arpeggio.c: 136: if(stored_octave == 2){noteOff(channel, temp + ((OCTAVES - (OCTAVES - 
      +                          2)) * 12), velocity);}
 38596  005E2C  0E02               	movlw	2
 38597  005E2E  1830               	xorwf	_stored_octave,w,c
 38598  005E30  A4D8               	btfss	status,2,c
 38599  005E32  D00F               	goto	l5461
 38600  005E34  5050               	movf	_velocity,w,c
 38601  005E36  6EE6               	movwf	postinc1,c
 38602  005E38  504D               	movf	_OCTAVES,w,c
 38603  005E3A  0FFE               	addlw	254
 38604  005E3C  0800               	sublw	0
 38605  005E3E  244D               	addwf	_OCTAVES,w,c
 38606  005E40  0D0C               	mullw	12
 38607  005E42  50F3               	movf	prodl,w,c
 38608  005E44  0100               	movlb	0	; () banked
 38609  005E46  25E8               	addwf	key_press_release_note_off@temp& (0+255),w,b
 38610  005E48  6EE6               	movwf	postinc1,c
 38611  005E4A  503D               	movf	_channel,w,c
 38612  005E4C  6EE6               	movwf	postinc1,c
 38613  005E4E  ECA0  F04A         	call	_noteOff	;wreg free
 38614  005E52                     l5461:
 38615                           
 38616                           ;arpeggio.c: 137: if(stored_octave == 3){noteOff(channel, temp + ((OCTAVES - (OCTAVES - 
      +                          3)) * 12), velocity);}
 38617  005E52  0E03               	movlw	3
 38618  005E54  1830               	xorwf	_stored_octave,w,c
 38619  005E56  A4D8               	btfss	status,2,c
 38620  005E58  D00F               	goto	l5462
 38621  005E5A  5050               	movf	_velocity,w,c
 38622  005E5C  6EE6               	movwf	postinc1,c
 38623  005E5E  504D               	movf	_OCTAVES,w,c
 38624  005E60  0FFD               	addlw	253
 38625  005E62  0800               	sublw	0
 38626  005E64  244D               	addwf	_OCTAVES,w,c
 38627  005E66  0D0C               	mullw	12
 38628  005E68  50F3               	movf	prodl,w,c
 38629  005E6A  0100               	movlb	0	; () banked
 38630  005E6C  25E8               	addwf	key_press_release_note_off@temp& (0+255),w,b
 38631  005E6E  6EE6               	movwf	postinc1,c
 38632  005E70  503D               	movf	_channel,w,c
 38633  005E72  6EE6               	movwf	postinc1,c
 38634  005E74  ECA0  F04A         	call	_noteOff	;wreg free
 38635  005E78                     l5462:
 38636                           
 38637                           ;arpeggio.c: 139: note_off_was_sent = 1;
 38638  005E78  8052               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38639  005E7A                     l5455:
 38640                           
 38641                           ;arpeggio.c: 140: }
 38642                           ;arpeggio.c: 143: if((last_note == 0) && (note_off_was_sent == 0) && (keyboard.SW1 == 1)
      +                          ){noteOff(channel, stored_octave * 12, velocity);note_off_was_sent = 1;}
 38643  005E7A  0100               	movlb	0	; () banked
 38644  005E7C  51ED               	movf	_last_note& (0+255),w,b
 38645  005E7E  B4D8               	btfsc	status,2,c
 38646                           
 38647                           ; BSR set to: 0
 38648  005E80  B052               	btfsc	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38649  005E82  D00D               	goto	l5463
 38650                           
 38651                           ; BSR set to: 0
 38652  005E84  A1D1               	btfss	_keyboard& (0+255),0,b
 38653  005E86  D00B               	goto	l5463
 38654                           
 38655                           ; BSR set to: 0
 38656  005E88  5050               	movf	_velocity,w,c
 38657  005E8A  6EE6               	movwf	postinc1,c
 38658  005E8C  5030               	movf	_stored_octave,w,c
 38659  005E8E  0D0C               	mullw	12
 38660  005E90  50F3               	movf	prodl,w,c
 38661  005E92  6EE6               	movwf	postinc1,c
 38662  005E94  503D               	movf	_channel,w,c
 38663  005E96  6EE6               	movwf	postinc1,c
 38664  005E98  ECA0  F04A         	call	_noteOff	;wreg free
 38665  005E9C  8052               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38666  005E9E                     l5463:
 38667                           
 38668                           ;arpeggio.c: 144: if((last_note == 0) && (note_off_was_sent == 0)){noteOff(channel, stor
      +                          ed_octave * 12, velocity);note_off_was_sent = 1;}
 38669  005E9E  0100               	movlb	0	; () banked
 38670  005EA0  51ED               	movf	_last_note& (0+255),w,b
 38671  005EA2  B4D8               	btfsc	status,2,c
 38672                           
 38673                           ; BSR set to: 0
 38674  005EA4  B052               	btfsc	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38675  005EA6  D00B               	goto	l5464
 38676                           
 38677                           ; BSR set to: 0
 38678  005EA8  5050               	movf	_velocity,w,c
 38679  005EAA  6EE6               	movwf	postinc1,c
 38680  005EAC  5030               	movf	_stored_octave,w,c
 38681  005EAE  0D0C               	mullw	12
 38682  005EB0  50F3               	movf	prodl,w,c
 38683  005EB2  6EE6               	movwf	postinc1,c
 38684  005EB4  503D               	movf	_channel,w,c
 38685  005EB6  6EE6               	movwf	postinc1,c
 38686  005EB8  ECA0  F04A         	call	_noteOff	;wreg free
 38687  005EBC  8052               	bsf	_note_off_was_sent/(0+8),_note_off_was_sent& (0+7),c
 38688  005EBE                     l5464:
 38689                           
 38690                           ;arpeggio.c: 146: TMR0ON = 1;
 38691  005EBE  8ED5               	bsf	4053,7,c	;volatile
 38692  005EC0  0012               	return		;funcret
 38693  005EC2                     __end_of_key_press_release_note_off:
 38694                           	opt stack 0
 38695                           tblptru	equ	0xFF8
 38696                           tblptrh	equ	0xFF7
 38697                           tblptrl	equ	0xFF6
 38698                           tablat	equ	0xFF5
 38699                           prodh	equ	0xFF4
 38700                           prodl	equ	0xFF3
 38701                           intcon	equ	0xFF2
 38702                           intcon2	equ	0xFF1
 38703                           indf0	equ	0xFEF
 38704                           postinc0	equ	0xFEE
 38705                           postdec0	equ	0xFED
 38706                           fsr0h	equ	0xFEA
 38707                           fsr0l	equ	0xFE9
 38708                           wreg	equ	0xFE8
 38709                           postinc1	equ	0xFE6
 38710                           postdec1	equ	0xFE5
 38711                           plusw1	equ	0xFE3
 38712                           fsr1h	equ	0xFE2
 38713                           fsr1l	equ	0xFE1
 38714                           indf2	equ	0xFDF
 38715                           postinc2	equ	0xFDE
 38716                           postdec2	equ	0xFDD
 38717                           plusw2	equ	0xFDB
 38718                           fsr2h	equ	0xFDA
 38719                           fsr2l	equ	0xFD9
 38720                           status	equ	0xFD8
 38721                           
 38722 ;; *************** function _noteOff *****************
 38723 ;; Defined at:
 38724 ;;		line 109 in file "midi.c"
 38725 ;; Parameters:    Size  Location     Type
 38726 ;;  channel         1  [STACK] unsigned char 
 38727 ;;  pitch           1  [STACK] unsigned char 
 38728 ;;  velocity        1  [STACK] unsigned char 
 38729 ;; Auto vars:     Size  Location     Type
 38730 ;;		None
 38731 ;; Return value:  Size  Location     Type
 38732 ;;                  1  [STACK] void 
 38733 ;; Registers used:
 38734 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11, prodl, p
      +rodh
 38735 ;; Tracked objects:
 38736 ;;		On entry : 0/0
 38737 ;;		On exit  : 0/0
 38738 ;;		Unchanged: 0/0
 38739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38743 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38744 ;;Total ram usage:        0 bytes
 38745 ;; Hardware stack levels used:    1
 38746 ;; Hardware stack levels required when called:    6
 38747 ;; This function calls:
 38748 ;;		_sendOut
 38749 ;;		_sendUSB
 38750 ;; This function is called by:
 38751 ;;		_noteOn
 38752 ;;		_noteOnDrum
 38753 ;;		_playThisNotePentatonic
 38754 ;;		_playTriad
 38755 ;;		_playSeventh
 38756 ;;		_playThisNote
 38757 ;;		_playThisNote8
 38758 ;;		_playDiatonicTriadMajor
 38759 ;;		_playDiatonicSeventhMajor
 38760 ;;		_playDiatonicTriadMinor
 38761 ;;		_playDiatonicSeventhMinor
 38762 ;;		_key_press_release_note_off
 38763 ;;		_playArpeggio
 38764 ;;		_keyboard_all_note
 38765 ;;		_keyboard_eight_note
 38766 ;; This function uses a reentrant model
 38767 ;;
 38768                           
 38769                           	psect	text109
 38770  009540                     __ptext109:
 38771                           	opt stack 0
 38772  009540                     _noteOff:
 38773                           	opt stack 6
 38774                           
 38775                           ;midi.c: 111: noteNumber = pitch + semitone + ((octave + 1)* 12);
 38776                           ;stkvar	noteOff@pitch @ sp[(0)+-2]
 38777                           
 38778                           ; autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
 38779                           ;incstack = 0
 38780  009540  0EFE               	movlw	-2
 38781  009542  CFE3 F049          	movff	plusw1,btemp+11
 38782  009546  504F               	movf	_octave,w,c
 38783  009548  0D0C               	mullw	12
 38784  00954A  50F3               	movf	prodl,w,c
 38785  00954C  243A               	addwf	_semitone,w,c
 38786  00954E  2449               	addwf	btemp+11,w,c
 38787  009550  0F0C               	addlw	12
 38788  009552  6E3B               	movwf	_noteNumber,c
 38789                           
 38790                           ;midi.c: 112: statusByte = channel | note_off;
 38791                           ;stkvar	noteOff@channel @ sp[(0)+-1]
 38792  009554  0EFF               	movlw	-1
 38793  009556  50E3               	movf	plusw1,w,c
 38794  009558  0980               	iorlw	128
 38795  00955A  6E3C               	movwf	_statusByte,c
 38796                           
 38797                           ;midi.c: 116: sendUSB(statusByte, noteNumber, 0);
 38798  00955C  0E00               	movlw	0
 38799  00955E  6EE6               	movwf	postinc1,c
 38800  009560  503B               	movf	_noteNumber,w,c
 38801  009562  6EE6               	movwf	postinc1,c
 38802  009564  503C               	movf	_statusByte,w,c
 38803  009566  6EE6               	movwf	postinc1,c
 38804  009568  EC12  F037         	call	_sendUSB	;wreg free
 38805                           
 38806                           ;midi.c: 119: sendOut(statusByte, noteNumber, 0);
 38807  00956C  0E00               	movlw	0
 38808  00956E  6EE6               	movwf	postinc1,c
 38809  009570  503B               	movf	_noteNumber,w,c
 38810  009572  6EE6               	movwf	postinc1,c
 38811  009574  503C               	movf	_statusByte,w,c
 38812  009576  6EE6               	movwf	postinc1,c
 38813  009578  EC9B  F036         	call	_sendOut	;wreg free
 38814                           
 38815                           ; _noteOff: autosize = 0, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsi
      +                          ze = 3, vargsize = 0
 38816  00957C  52E5               	movf	postdec1,f,c
 38817  00957E  52E5               	movf	postdec1,f,c
 38818  009580  52E5               	movf	postdec1,f,c
 38819  009582  0012               	return		;funcret
 38820  009584                     __end_of_noteOff:
 38821                           	opt stack 0
 38822                           tblptru	equ	0xFF8
 38823                           tblptrh	equ	0xFF7
 38824                           tblptrl	equ	0xFF6
 38825                           tablat	equ	0xFF5
 38826                           prodh	equ	0xFF4
 38827                           prodl	equ	0xFF3
 38828                           intcon	equ	0xFF2
 38829                           intcon2	equ	0xFF1
 38830                           indf0	equ	0xFEF
 38831                           postinc0	equ	0xFEE
 38832                           postdec0	equ	0xFED
 38833                           fsr0h	equ	0xFEA
 38834                           fsr0l	equ	0xFE9
 38835                           wreg	equ	0xFE8
 38836                           postinc1	equ	0xFE6
 38837                           postdec1	equ	0xFE5
 38838                           plusw1	equ	0xFE3
 38839                           fsr1h	equ	0xFE2
 38840                           fsr1l	equ	0xFE1
 38841                           indf2	equ	0xFDF
 38842                           postinc2	equ	0xFDE
 38843                           postdec2	equ	0xFDD
 38844                           plusw2	equ	0xFDB
 38845                           fsr2h	equ	0xFDA
 38846                           fsr2l	equ	0xFD9
 38847                           status	equ	0xFD8
 38848                           
 38849 ;; *************** function _sendUSB *****************
 38850 ;; Defined at:
 38851 ;;		line 75 in file "midi.c"
 38852 ;; Parameters:    Size  Location     Type
 38853 ;;  message1        1  [STACK] unsigned char 
 38854 ;;  message2        1  [STACK] unsigned char 
 38855 ;;  message3        1  [STACK] unsigned char 
 38856 ;; Auto vars:     Size  Location     Type
 38857 ;;  ii              1  [STACK] unsigned char 
 38858 ;;  i               1  [STACK] unsigned char 
 38859 ;;  midiMessage     3  [STACK] unsigned char [3]
 38860 ;; Return value:  Size  Location     Type
 38861 ;;                  1  [STACK] void 
 38862 ;; Registers used:
 38863 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+9, btemp+10, btemp+11
 38864 ;; Tracked objects:
 38865 ;;		On entry : 0/0
 38866 ;;		On exit  : 0/0
 38867 ;;		Unchanged: 0/0
 38868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 38869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38872 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 38873 ;;Total ram usage:        0 bytes
 38874 ;; Hardware stack levels used:    1
 38875 ;; Hardware stack levels required when called:    5
 38876 ;; This function calls:
 38877 ;;		Nothing
 38878 ;; This function is called by:
 38879 ;;		_noteOff
 38880 ;;		_noteOn
 38881 ;;		_noteOffDrum
 38882 ;;		_noteOnDrum
 38883 ;;		_controlChange
 38884 ;;		_pitchBend
 38885 ;;		_programChange
 38886 ;; This function uses a reentrant model
 38887 ;;
 38888                           
 38889                           	psect	text110
 38890  006E24                     __ptext110:
 38891                           	opt stack 0
 38892  006E24                     _sendUSB:
 38893                           	opt stack 0
 38894                           
 38895                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
 38896  006E24  0E05               	movlw	5
 38897  006E26  26E1               	addwf	fsr1l,f,c
 38898  006E28  0E00               	movlw	0
 38899  006E2A  22E2               	addwfc	fsr1h,f,c
 38900                           
 38901                           ;midi.c: 77: unsigned char midiMessage[3];
 38902                           ;midi.c: 79: midiMessage[0]=message1;
 38903                           ;stkvar	sendUSB@message1 @ sp[(-5)+-1]
 38904                           ;stkvar	sendUSB@midiMessage @ sp[(-5)+2]
 38905                           
 38906                           ;incstack = 0
 38907  006E2C  0EFA               	movlw	-6
 38908  006E2E  CFE3 F03E          	movff	plusw1,btemp
 38909  006E32  0EFD               	movlw	-3
 38910  006E34  C03E  FFE3         	movff	btemp,plusw1
 38911                           
 38912                           ;midi.c: 80: midiMessage[1]=message2;
 38913                           ;stkvar	sendUSB@message2 @ sp[(-5)+-2]
 38914                           ;stkvar	sendUSB@midiMessage @ sp[(-5)+2]
 38915  006E38  0EFE               	movlw	254
 38916  006E3A  24E1               	addwf	fsr1l,w,c
 38917  006E3C  6ED9               	movwf	fsr2l,c
 38918  006E3E  0EFF               	movlw	255
 38919  006E40  20E2               	addwfc	fsr1h,w,c
 38920  006E42  6EDA               	movwf	fsr2h,c
 38921  006E44  0EF9               	movlw	-7
 38922  006E46  CFE3 FFDF          	movff	plusw1,indf2
 38923                           
 38924                           ;midi.c: 81: midiMessage[2]=message3;
 38925                           ;stkvar	sendUSB@message3 @ sp[(-5)+-3]
 38926                           ;stkvar	sendUSB@midiMessage @ sp[(-5)+2]
 38927  006E4A  0EFF               	movlw	255
 38928  006E4C  24E1               	addwf	fsr1l,w,c
 38929  006E4E  6ED9               	movwf	fsr2l,c
 38930  006E50  0EFF               	movlw	255
 38931  006E52  20E2               	addwfc	fsr1h,w,c
 38932  006E54  6EDA               	movwf	fsr2h,c
 38933  006E56  0EF8               	movlw	-8
 38934  006E58  CFE3 FFDF          	movff	plusw1,indf2
 38935                           
 38936                           ;midi.c: 83: RA5 = 0;
 38937  006E5C  9A80               	bcf	3968,5,c	;volatile
 38938                           
 38939                           ;midi.c: 84: RB2 = 1;
 38940  006E5E  8481               	bsf	3969,2,c	;volatile
 38941                           
 38942                           ;midi.c: 85: _delay((unsigned long)((50)*(20000000/4000000.0)));
 38943  006E60  0E53               	movlw	83
 38944  006E62                     u67637:
 38945  006E62  2EE8               	decfsz	wreg,f,c
 38946  006E64  D7FE               	bra	u67637
 38947  006E66  F000               	nop	
 38948                           
 38949                           ;midi.c: 87: for(unsigned char i=0;i<3;i++){
 38950                           ;stkvar	sendUSB@i @ sp[(-5)+1]
 38951  006E68  0EFC               	movlw	-4
 38952  006E6A  6AE3               	clrf	plusw1,c
 38953  006E6C                     l31400:
 38954                           
 38955                           ;midi.c: 88: for(unsigned char ii=0;ii<8;ii++){
 38956                           ;stkvar	sendUSB@ii @ sp[(-5)+0]
 38957  006E6C  0EFB               	movlw	-5
 38958  006E6E  6AE3               	clrf	plusw1,c
 38959  006E70                     l31406:
 38960                           
 38961                           ;midi.c: 91: RE2 = !!(midiMessage[i] & (1 << ii));
 38962                           ;stkvar	sendUSB@i @ sp[(-5)+1]
 38963  006E70  0EFC               	movlw	-4
 38964  006E72  CFE3 F049          	movff	plusw1,btemp+11
 38965                           
 38966                           ;stkvar	sendUSB@midiMessage @ sp[(-5)+2]
 38967  006E76  0EFD               	movlw	253
 38968  006E78  24E1               	addwf	fsr1l,w,c
 38969  006E7A  6E3F               	movwf	btemp+1,c
 38970  006E7C  0EFF               	movlw	255
 38971  006E7E  20E2               	addwfc	fsr1h,w,c
 38972  006E80  6E40               	movwf	btemp+2,c
 38973  006E82  5049               	movf	btemp+11,w,c
 38974  006E84  243F               	addwf	btemp+1,w,c
 38975  006E86  6ED9               	movwf	fsr2l,c
 38976  006E88  0E00               	movlw	0
 38977  006E8A  2040               	addwfc	btemp+2,w,c
 38978  006E8C  6EDA               	movwf	fsr2h,c
 38979  006E8E  50DF               	movf	indf2,w,c
 38980  006E90  6E49               	movwf	btemp+11,c
 38981                           
 38982                           ;stkvar	sendUSB@ii @ sp[(-5)+0]
 38983  006E92  0EFB               	movlw	-5
 38984  006E94  CFE3 F048          	movff	plusw1,btemp+10
 38985  006E98  0E01               	movlw	1
 38986  006E9A  6E47               	movwf	btemp+9,c
 38987  006E9C  2A48               	incf	btemp+10,f,c
 38988  006E9E  D002               	goto	u57104
 38989  006EA0                     u57105:
 38990  006EA0  90D8               	bcf	status,0,c
 38991  006EA2  3647               	rlcf	btemp+9,f,c
 38992  006EA4                     u57104:
 38993  006EA4  2E48               	decfsz	btemp+10,f,c
 38994  006EA6  D7FC               	goto	u57105
 38995  006EA8  5047               	movf	btemp+9,w,c
 38996  006EAA  1449               	andwf	btemp+11,w,c
 38997  006EAC  0900               	iorlw	0
 38998  006EAE  B4D8               	btfsc	status,2,c
 38999  006EB0  D002               	goto	u57110
 39000  006EB2  8484               	bsf	3972,2,c	;volatile
 39001  006EB4  D001               	goto	u57125
 39002  006EB6                     u57110:
 39003  006EB6  9484               	bcf	3972,2,c	;volatile
 39004  006EB8                     u57125:
 39005                           
 39006                           ;midi.c: 93: _delay((unsigned long)((50)*(20000000/4000000.0)));
 39007  006EB8  0E53               	movlw	83
 39008  006EBA                     u67647:
 39009  006EBA  2EE8               	decfsz	wreg,f,c
 39010  006EBC  D7FE               	bra	u67647
 39011  006EBE  F000               	nop	
 39012                           
 39013                           ;midi.c: 95: RA5 = 1;
 39014  006EC0  8A80               	bsf	3968,5,c	;volatile
 39015                           
 39016                           ;midi.c: 96: _delay((unsigned long)((50)*(20000000/4000000.0)));
 39017  006EC2  0E53               	movlw	83
 39018  006EC4                     u67657:
 39019  006EC4  2EE8               	decfsz	wreg,f,c
 39020  006EC6  D7FE               	bra	u67657
 39021  006EC8  F000               	nop	
 39022                           
 39023                           ;midi.c: 98: RA5 = 0;
 39024  006ECA  9A80               	bcf	3968,5,c	;volatile
 39025                           
 39026                           ;midi.c: 99: _delay((unsigned long)((50)*(20000000/4000000.0)));
 39027  006ECC  0E53               	movlw	83
 39028  006ECE                     u67667:
 39029  006ECE  2EE8               	decfsz	wreg,f,c
 39030  006ED0  D7FE               	bra	u67667
 39031  006ED2  F000               	nop	
 39032                           
 39033                           ;stkvar	sendUSB@ii @ sp[(-5)+0]
 39034  006ED4  0EFB               	movlw	-5
 39035  006ED6  2AE3               	incf	plusw1,f,c
 39036                           
 39037                           ;stkvar	sendUSB@ii @ sp[(-5)+0]
 39038  006ED8  0EFB               	movlw	-5
 39039  006EDA  CFE3 F03E          	movff	plusw1,btemp
 39040  006EDE  0E07               	movlw	7
 39041  006EE0  643E               	cpfsgt	btemp,c
 39042  006EE2  D7C6               	goto	l31406
 39043                           
 39044                           ;stkvar	sendUSB@i @ sp[(-5)+1]
 39045  006EE4  0EFC               	movlw	-4
 39046  006EE6  2AE3               	incf	plusw1,f,c
 39047                           
 39048                           ;stkvar	sendUSB@i @ sp[(-5)+1]
 39049  006EE8  0EFC               	movlw	-4
 39050  006EEA  CFE3 F03E          	movff	plusw1,btemp
 39051  006EEE  0E02               	movlw	2
 39052  006EF0  643E               	cpfsgt	btemp,c
 39053  006EF2  D7BC               	goto	l31400
 39054                           
 39055                           ;midi.c: 100: }
 39056                           ;midi.c: 101: }
 39057                           ;midi.c: 103: RB2 = 0;
 39058  006EF4  9481               	bcf	3969,2,c	;volatile
 39059                           
 39060                           ;midi.c: 104: _delay((unsigned long)((50)*(20000000/4000000.0)));
 39061  006EF6  0E53               	movlw	83
 39062  006EF8                     u67677:
 39063  006EF8  2EE8               	decfsz	wreg,f,c
 39064  006EFA  D7FE               	bra	u67677
 39065  006EFC  F000               	nop	
 39066                           
 39067                           ; _sendUSB: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsi
      +                          ze = 3, vargsize = 0
 39068  006EFE  0EF8               	movlw	248
 39069  006F00  26E1               	addwf	fsr1l,f,c
 39070  006F02  0EFF               	movlw	255
 39071  006F04  22E2               	addwfc	fsr1h,f,c
 39072  006F06  0012               	return		;funcret
 39073  006F08                     __end_of_sendUSB:
 39074                           	opt stack 0
 39075                           tblptru	equ	0xFF8
 39076                           tblptrh	equ	0xFF7
 39077                           tblptrl	equ	0xFF6
 39078                           tablat	equ	0xFF5
 39079                           prodh	equ	0xFF4
 39080                           prodl	equ	0xFF3
 39081                           intcon	equ	0xFF2
 39082                           intcon2	equ	0xFF1
 39083                           indf0	equ	0xFEF
 39084                           postinc0	equ	0xFEE
 39085                           postdec0	equ	0xFED
 39086                           fsr0h	equ	0xFEA
 39087                           fsr0l	equ	0xFE9
 39088                           wreg	equ	0xFE8
 39089                           postinc1	equ	0xFE6
 39090                           postdec1	equ	0xFE5
 39091                           plusw1	equ	0xFE3
 39092                           fsr1h	equ	0xFE2
 39093                           fsr1l	equ	0xFE1
 39094                           indf2	equ	0xFDF
 39095                           postinc2	equ	0xFDE
 39096                           postdec2	equ	0xFDD
 39097                           plusw2	equ	0xFDB
 39098                           fsr2h	equ	0xFDA
 39099                           fsr2l	equ	0xFD9
 39100                           status	equ	0xFD8
 39101                           
 39102 ;; *************** function _sendOut *****************
 39103 ;; Defined at:
 39104 ;;		line 35 in file "midi.c"
 39105 ;; Parameters:    Size  Location     Type
 39106 ;;  message1        1  [STACK] unsigned char 
 39107 ;;  message2        1  [STACK] unsigned char 
 39108 ;;  message3        1  [STACK] unsigned char 
 39109 ;; Auto vars:     Size  Location     Type
 39110 ;;  i               1  [STACK] unsigned char 
 39111 ;;  midiMessage     3  [STACK] unsigned char [3]
 39112 ;;  number_of_mi    1  [STACK] unsigned char 
 39113 ;; Return value:  Size  Location     Type
 39114 ;;                  1  [STACK] void 
 39115 ;; Registers used:
 39116 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+11
 39117 ;; Tracked objects:
 39118 ;;		On entry : 0/0
 39119 ;;		On exit  : 0/0
 39120 ;;		Unchanged: 0/0
 39121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 39122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39125 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39126 ;;Total ram usage:        0 bytes
 39127 ;; Hardware stack levels used:    1
 39128 ;; Hardware stack levels required when called:    5
 39129 ;; This function calls:
 39130 ;;		Nothing
 39131 ;; This function is called by:
 39132 ;;		_noteOff
 39133 ;;		_noteOn
 39134 ;;		_noteOffDrum
 39135 ;;		_noteOnDrum
 39136 ;;		_controlChange
 39137 ;;		_pitchBend
 39138 ;;		_programChange
 39139 ;; This function uses a reentrant model
 39140 ;;
 39141                           
 39142                           	psect	text111
 39143  006D36                     __ptext111:
 39144                           	opt stack 0
 39145  006D36                     _sendOut:
 39146                           	opt stack 0
 39147                           
 39148                           ; autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsize = 3 var
      +                          gsize = 0, retsize = 0
 39149  006D36  0E05               	movlw	5
 39150  006D38  26E1               	addwf	fsr1l,f,c
 39151  006D3A  0E00               	movlw	0
 39152  006D3C  22E2               	addwfc	fsr1h,f,c
 39153                           
 39154                           ;midi.c: 37: unsigned char midiMessage[3];
 39155                           ;midi.c: 38: unsigned char number_of_midi_message_bytes;
 39156                           ;midi.c: 40: midiMessage[0]=message1;
 39157                           ;stkvar	sendOut@message1 @ sp[(-5)+-1]
 39158                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 39159                           
 39160                           ;incstack = 0
 39161  006D3E  0EFA               	movlw	-6
 39162  006D40  CFE3 F03E          	movff	plusw1,btemp
 39163  006D44  0EFC               	movlw	-4
 39164  006D46  C03E  FFE3         	movff	btemp,plusw1
 39165                           
 39166                           ;midi.c: 41: midiMessage[1]=message2;
 39167                           ;stkvar	sendOut@message2 @ sp[(-5)+-2]
 39168                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 39169  006D4A  0EFD               	movlw	253
 39170  006D4C  24E1               	addwf	fsr1l,w,c
 39171  006D4E  6ED9               	movwf	fsr2l,c
 39172  006D50  0EFF               	movlw	255
 39173  006D52  20E2               	addwfc	fsr1h,w,c
 39174  006D54  6EDA               	movwf	fsr2h,c
 39175  006D56  0EF9               	movlw	-7
 39176  006D58  CFE3 FFDF          	movff	plusw1,indf2
 39177                           
 39178                           ;midi.c: 42: midiMessage[2]=message3;
 39179                           ;stkvar	sendOut@message3 @ sp[(-5)+-3]
 39180                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 39181  006D5C  0EFE               	movlw	254
 39182  006D5E  24E1               	addwf	fsr1l,w,c
 39183  006D60  6ED9               	movwf	fsr2l,c
 39184  006D62  0EFF               	movlw	255
 39185  006D64  20E2               	addwfc	fsr1h,w,c
 39186  006D66  6EDA               	movwf	fsr2h,c
 39187  006D68  0EF8               	movlw	-8
 39188  006D6A  CFE3 FFDF          	movff	plusw1,indf2
 39189                           
 39190                           ;midi.c: 52: if(CONTROL_CHANGE_IS_BEING_SENT == 1) {
 39191  006D6E  A606               	btfss	_CONTROL_CHANGE_IS_BEING_SENT/(0+8),_CONTROL_CHANGE_IS_BEING_SENT& (0+7),c
 39192  006D70  D018               	goto	l31366
 39193                           
 39194                           ;midi.c: 53: midiMessage[0] = channel | control_change;
 39195  006D72  C03D  F049         	movff	_channel,btemp+11
 39196  006D76  0EB0               	movlw	176
 39197  006D78  1249               	iorwf	btemp+11,f,c
 39198                           
 39199                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 39200  006D7A  0EFC               	movlw	-4
 39201  006D7C  C049  FFE3         	movff	btemp+11,plusw1
 39202                           
 39203                           ;midi.c: 54: midiMessage[1] = GLOBAL_CC_NUMBER;
 39204                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 39205  006D80  0EFD               	movlw	253
 39206  006D82  24E1               	addwf	fsr1l,w,c
 39207  006D84  6ED9               	movwf	fsr2l,c
 39208  006D86  0EFF               	movlw	255
 39209  006D88  20E2               	addwfc	fsr1h,w,c
 39210  006D8A  6EDA               	movwf	fsr2h,c
 39211  006D8C  C182  FFDF         	movff	_GLOBAL_CC_NUMBER,indf2
 39212                           
 39213                           ;midi.c: 55: midiMessage[2] = GLOBAL_CC_VALUE;
 39214                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 39215  006D90  0EFE               	movlw	254
 39216  006D92  24E1               	addwf	fsr1l,w,c
 39217  006D94  6ED9               	movwf	fsr2l,c
 39218  006D96  0EFF               	movlw	255
 39219  006D98  20E2               	addwfc	fsr1h,w,c
 39220  006D9A  6EDA               	movwf	fsr2h,c
 39221  006D9C  C181  FFDF         	movff	_GLOBAL_CC_VALUE,indf2
 39222                           
 39223                           ;midi.c: 56: CONTROL_CHANGE_IS_BEING_SENT = 0;
 39224  006DA0  9606               	bcf	_CONTROL_CHANGE_IS_BEING_SENT/(0+8),_CONTROL_CHANGE_IS_BEING_SENT& (0+7),c
 39225  006DA2                     l31366:
 39226                           
 39227                           ;midi.c: 57: }
 39228                           ;midi.c: 60: if(midiMessage[0] == (channel | program_change)){number_of_midi_message_byt
      +                          es = 2;}
 39229                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 39230  006DA2  C03D  F049         	movff	_channel,btemp+11
 39231  006DA6  0EC0               	movlw	192
 39232  006DA8  1249               	iorwf	btemp+11,f,c
 39233  006DAA  0EFC               	movlw	-4
 39234  006DAC  50E3               	movf	plusw1,w,c
 39235  006DAE  1849               	xorwf	btemp+11,w,c
 39236  006DB0  A4D8               	btfss	status,2,c
 39237  006DB2  D003               	goto	l31370
 39238                           
 39239                           ;stkvar	sendOut@number_of_midi_message_bytes @ sp[(-5)+4]
 39240  006DB4  0EFF               	movlw	-1
 39241  006DB6  6AE3               	clrf	plusw1,c
 39242  006DB8  D003               	goto	L21
 39243  006DBA                     l31370:
 39244                           
 39245                           ;midi.c: 61: else{number_of_midi_message_bytes = 3;}
 39246                           ;stkvar	sendOut@number_of_midi_message_bytes @ sp[(-5)+4]
 39247  006DBA  0EFF               	movlw	-1
 39248  006DBC  6AE3               	clrf	plusw1,c
 39249  006DBE  80E3               	bsf	plusw1,0,c
 39250  006DC0                     L21:
 39251  006DC0  82E3               	bsf	plusw1,1,c	;indir
 39252                           
 39253                           ;midi.c: 64: for(unsigned char i=0;i<number_of_midi_message_bytes;i++){
 39254                           ;stkvar	sendOut@i @ sp[(-5)+0]
 39255  006DC2  0EFB               	movlw	-5
 39256  006DC4  6AE3               	clrf	plusw1,c
 39257  006DC6  D01D               	goto	l31380
 39258  006DC8                     l31374:
 39259                           
 39260                           ;midi.c: 65: TXREG = midiMessage[i];
 39261                           ;stkvar	sendOut@i @ sp[(-5)+0]
 39262  006DC8  0EFB               	movlw	-5
 39263  006DCA  CFE3 F049          	movff	plusw1,btemp+11
 39264                           
 39265                           ;stkvar	sendOut@midiMessage @ sp[(-5)+1]
 39266  006DCE  0EFC               	movlw	252
 39267  006DD0  24E1               	addwf	fsr1l,w,c
 39268  006DD2  6E3F               	movwf	btemp+1,c
 39269  006DD4  0EFF               	movlw	255
 39270  006DD6  20E2               	addwfc	fsr1h,w,c
 39271  006DD8  6E40               	movwf	btemp+2,c
 39272  006DDA  5049               	movf	btemp+11,w,c
 39273  006DDC  243F               	addwf	btemp+1,w,c
 39274  006DDE  6ED9               	movwf	fsr2l,c
 39275  006DE0  0E00               	movlw	0
 39276  006DE2  2040               	addwfc	btemp+2,w,c
 39277  006DE4  6EDA               	movwf	fsr2h,c
 39278  006DE6  50DF               	movf	indf2,w,c
 39279  006DE8  6EAD               	movwf	4013,c	;volatile
 39280  006DEA                     l466:
 39281  006DEA  A2AC               	btfss	4012,1,c	;volatile
 39282  006DEC  D7FE               	goto	l466
 39283                           
 39284                           ;midi.c: 68: TXIF = 0;
 39285  006DEE  989E               	bcf	3998,4,c	;volatile
 39286                           
 39287                           ;midi.c: 69: _delay((unsigned long)((320)*(20000000/4000000.0)));
 39288  006DF0  0EE4               	movlw	228
 39289  006DF2                     u67687:
 39290  006DF2  D000               	nop2	
 39291  006DF4  D000               	nop2	
 39292  006DF6  2EE8               	decfsz	wreg,f,c
 39293  006DF8  D7FC               	bra	u67687
 39294  006DFA  D000               	nop2	
 39295  006DFC  D000               	nop2	
 39296                           
 39297                           ;stkvar	sendOut@i @ sp[(-5)+0]
 39298  006DFE  0EFB               	movlw	-5
 39299  006E00  2AE3               	incf	plusw1,f,c
 39300  006E02                     l31380:
 39301                           
 39302                           ;stkvar	sendOut@number_of_midi_message_bytes @ sp[(-5)+4]
 39303                           ;stkvar	sendOut@i @ sp[(-5)+0]
 39304  006E02  50E1               	movf	fsr1l,w,c
 39305  006E04  0FFB               	addlw	-5
 39306  006E06  6ED9               	movwf	fsr2l,c
 39307  006E08  50E2               	movf	fsr1h,w,c
 39308  006E0A  6EDA               	movwf	fsr2h,c
 39309  006E0C  0EFF               	movlw	255
 39310  006E0E  22DA               	addwfc	fsr2h,f,c
 39311  006E10  0EFF               	movlw	-1
 39312  006E12  50E3               	movf	plusw1,w,c
 39313  006E14  5CDE               	subwf	postinc2,w,c
 39314  006E16  A0D8               	btfss	status,0,c
 39315  006E18  D7D7               	goto	l31374
 39316                           
 39317                           ; _sendOut: autosize = 5, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 3, argsi
      +                          ze = 3, vargsize = 0
 39318  006E1A  0EF8               	movlw	248
 39319  006E1C  26E1               	addwf	fsr1l,f,c
 39320  006E1E  0EFF               	movlw	255
 39321  006E20  22E2               	addwfc	fsr1h,f,c
 39322  006E22  0012               	return		;funcret
 39323  006E24                     __end_of_sendOut:
 39324                           	opt stack 0
 39325                           tblptru	equ	0xFF8
 39326                           tblptrh	equ	0xFF7
 39327                           tblptrl	equ	0xFF6
 39328                           tablat	equ	0xFF5
 39329                           prodh	equ	0xFF4
 39330                           prodl	equ	0xFF3
 39331                           intcon	equ	0xFF2
 39332                           intcon2	equ	0xFF1
 39333                           indf0	equ	0xFEF
 39334                           postinc0	equ	0xFEE
 39335                           postdec0	equ	0xFED
 39336                           fsr0h	equ	0xFEA
 39337                           fsr0l	equ	0xFE9
 39338                           wreg	equ	0xFE8
 39339                           postinc1	equ	0xFE6
 39340                           postdec1	equ	0xFE5
 39341                           plusw1	equ	0xFE3
 39342                           fsr1h	equ	0xFE2
 39343                           fsr1l	equ	0xFE1
 39344                           indf2	equ	0xFDF
 39345                           postinc2	equ	0xFDE
 39346                           postdec2	equ	0xFDD
 39347                           plusw2	equ	0xFDB
 39348                           fsr2h	equ	0xFDA
 39349                           fsr2l	equ	0xFD9
 39350                           status	equ	0xFD8
 39351                           
 39352 ;; *************** function ___lbmod *****************
 39353 ;; Defined at:
 39354 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lbmod.c"
 39355 ;; Parameters:    Size  Location     Type
 39356 ;;  dividend        1  [STACK] unsigned char 
 39357 ;;  divisor         1  [STACK] unsigned char 
 39358 ;; Auto vars:     Size  Location     Type
 39359 ;;  rem             1  [STACK] unsigned char 
 39360 ;;  counter         1  [STACK] unsigned char 
 39361 ;; Return value:  Size  Location     Type
 39362 ;;                  1  [STACK] unsigned char 
 39363 ;; Registers used:
 39364 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+10, btemp+11
 39365 ;; Tracked objects:
 39366 ;;		On entry : 0/1
 39367 ;;		On exit  : 0/0
 39368 ;;		Unchanged: 0/0
 39369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 39370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39374 ;;Total ram usage:        0 bytes
 39375 ;; Hardware stack levels used:    1
 39376 ;; Hardware stack levels required when called:    5
 39377 ;; This function calls:
 39378 ;;		Nothing
 39379 ;; This function is called by:
 39380 ;;		_controlChange
 39381 ;;		_pitchBend
 39382 ;;		_programChange
 39383 ;;		_menu_lcd
 39384 ;;		_Function_A_1
 39385 ;;		_Function_A_2
 39386 ;;		_Function_A_3
 39387 ;;		_Function_A
 39388 ;;		_Function_B
 39389 ;;		_Function_C_1
 39390 ;;		_Function_C_2
 39391 ;;		_Function_C_3
 39392 ;;		_Function_C
 39393 ;;		_Function_D_1
 39394 ;;		_Function_D_3
 39395 ;;		_Function_D_4
 39396 ;;		_Function_D_5
 39397 ;;		_Function_D
 39398 ;;		_Function_E
 39399 ;;		_Function_G_1
 39400 ;;		_Function_G_2
 39401 ;;		_Function_G_4
 39402 ;;		_Function_G
 39403 ;;		_Function_H
 39404 ;;		_Function_H_4
 39405 ;;		_Function_H_5
 39406 ;;		_Function_H_6
 39407 ;;		_Function_H_8
 39408 ;;		_Function_H_9_1
 39409 ;;		_Function_H_9_2
 39410 ;;		_Function_H_9_3
 39411 ;;		_Function_H_9_4
 39412 ;;		_Function_H_9
 39413 ;;		_ISR
 39414 ;; This function uses a reentrant model
 39415 ;;
 39416                           
 39417                           	psect	text112
 39418  00834A                     __ptext112:
 39419                           	opt stack 0
 39420  00834A                     ___lbmod:
 39421                           	opt stack 0
 39422                           
 39423                           ; autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsize = 2 var
      +                          gsize = 0, retsize = 0
 39424  00834A  52E6               	movf	postinc1,f,c
 39425  00834C  52E6               	movf	postinc1,f,c
 39426                           
 39427                           ;stkvar	___lbmod@counter @ sp[(-2)+1]
 39428                           
 39429                           ;incstack = 0
 39430  00834E  0EFF               	movlw	-1
 39431  008350  6AE3               	clrf	plusw1,c
 39432  008352  86E3               	bsf	plusw1,3,c
 39433                           
 39434                           ;stkvar	___lbmod@rem @ sp[(-2)+0]
 39435  008354  0EFE               	movlw	-2
 39436  008356  6AE3               	clrf	plusw1,c
 39437  008358                     l33978:
 39438                           
 39439                           ;stkvar	___lbmod@dividend @ sp[(-2)+-1]
 39440  008358  0EFD               	movlw	-3
 39441  00835A  CFE3 F049          	movff	plusw1,btemp+11
 39442                           
 39443                           ;stkvar	___lbmod@rem @ sp[(-2)+0]
 39444  00835E  0EFE               	movlw	-2
 39445  008360  CFE3 F048          	movff	plusw1,btemp+10
 39446  008364  90D8               	bcf	status,0,c
 39447  008366  3449               	rlcf	btemp+11,w,c
 39448  008368  3448               	rlcf	btemp+10,w,c
 39449  00836A  6E49               	movwf	btemp+11,c
 39450                           
 39451                           ;stkvar	___lbmod@rem @ sp[(-2)+0]
 39452  00836C  0EFE               	movlw	-2
 39453  00836E  C049  FFE3         	movff	btemp+11,plusw1
 39454                           
 39455                           ;stkvar	___lbmod@dividend @ sp[(-2)+-1]
 39456  008372  50E1               	movf	fsr1l,w,c
 39457  008374  0FFD               	addlw	-3
 39458  008376  6ED9               	movwf	fsr2l,c
 39459  008378  50E2               	movf	fsr1h,w,c
 39460  00837A  6EDA               	movwf	fsr2h,c
 39461  00837C  0EFF               	movlw	255
 39462  00837E  22DA               	addwfc	fsr2h,f,c
 39463  008380  90D8               	bcf	status,0,c
 39464  008382  36DF               	rlcf	indf2,f,c
 39465                           
 39466                           ;stkvar	___lbmod@divisor @ sp[(-2)+-2]
 39467                           ;stkvar	___lbmod@rem @ sp[(-2)+0]
 39468  008384  50E1               	movf	fsr1l,w,c
 39469  008386  0FFE               	addlw	-2
 39470  008388  6ED9               	movwf	fsr2l,c
 39471  00838A  50E2               	movf	fsr1h,w,c
 39472  00838C  6EDA               	movwf	fsr2h,c
 39473  00838E  0EFF               	movlw	255
 39474  008390  22DA               	addwfc	fsr2h,f,c
 39475  008392  0EFC               	movlw	-4
 39476  008394  50E3               	movf	plusw1,w,c
 39477  008396  5CDE               	subwf	postinc2,w,c
 39478  008398  A0D8               	btfss	status,0,c
 39479  00839A  D00C               	goto	l33986
 39480                           
 39481                           ;stkvar	___lbmod@divisor @ sp[(-2)+-2]
 39482  00839C  0EFC               	movlw	-4
 39483  00839E  CFE3 F049          	movff	plusw1,btemp+11
 39484                           
 39485                           ;stkvar	___lbmod@rem @ sp[(-2)+0]
 39486  0083A2  50E1               	movf	fsr1l,w,c
 39487  0083A4  0FFE               	addlw	-2
 39488  0083A6  6ED9               	movwf	fsr2l,c
 39489  0083A8  50E2               	movf	fsr1h,w,c
 39490  0083AA  6EDA               	movwf	fsr2h,c
 39491  0083AC  0EFF               	movlw	255
 39492  0083AE  22DA               	addwfc	fsr2h,f,c
 39493  0083B0  5049               	movf	btemp+11,w,c
 39494  0083B2  5EDF               	subwf	indf2,f,c
 39495  0083B4                     l33986:
 39496                           
 39497                           ;stkvar	___lbmod@counter @ sp[(-2)+1]
 39498  0083B4  0EFF               	movlw	-1
 39499  0083B6  50E3               	movf	plusw1,w,c
 39500  0083B8  6E3E               	movwf	btemp,c
 39501  0083BA  0E01               	movlw	1
 39502  0083BC  5E3E               	subwf	btemp,f,c
 39503  0083BE  0EFF               	movlw	-1
 39504  0083C0  C03E  FFE3         	movff	btemp,plusw1
 39505  0083C4  A4D8               	btfss	status,2,c
 39506  0083C6  D7C8               	goto	l33978
 39507                           
 39508                           ;stkvar	___lbmod@rem @ sp[(-2)+0]
 39509  0083C8  0EFE               	movlw	-2
 39510  0083CA  CFE3 F03E          	movff	plusw1,btemp
 39511                           
 39512                           ; ___lbmod: autosize = 2, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 2, argsi
      +                          ze = 2, vargsize = 0
 39513  0083CE  52E5               	movf	postdec1,f,c
 39514  0083D0  52E5               	movf	postdec1,f,c
 39515  0083D2  52E5               	movf	postdec1,f,c
 39516  0083D4  52E5               	movf	postdec1,f,c
 39517  0083D6  0012               	return		;funcret
 39518  0083D8                     __end_of___lbmod:
 39519                           	opt stack 0
 39520                           tblptru	equ	0xFF8
 39521                           tblptrh	equ	0xFF7
 39522                           tblptrl	equ	0xFF6
 39523                           tablat	equ	0xFF5
 39524                           prodh	equ	0xFF4
 39525                           prodl	equ	0xFF3
 39526                           intcon	equ	0xFF2
 39527                           intcon2	equ	0xFF1
 39528                           indf0	equ	0xFEF
 39529                           postinc0	equ	0xFEE
 39530                           postdec0	equ	0xFED
 39531                           fsr0h	equ	0xFEA
 39532                           fsr0l	equ	0xFE9
 39533                           wreg	equ	0xFE8
 39534                           postinc1	equ	0xFE6
 39535                           postdec1	equ	0xFE5
 39536                           plusw1	equ	0xFE3
 39537                           fsr1h	equ	0xFE2
 39538                           fsr1l	equ	0xFE1
 39539                           indf2	equ	0xFDF
 39540                           postinc2	equ	0xFDE
 39541                           postdec2	equ	0xFDD
 39542                           plusw2	equ	0xFDB
 39543                           fsr2h	equ	0xFDA
 39544                           fsr2l	equ	0xFD9
 39545                           status	equ	0xFD8
 39546                           
 39547 ;; *************** function _map *****************
 39548 ;; Defined at:
 39549 ;;		line 29 in file "potentiometers.c"
 39550 ;; Parameters:    Size  Location     Type
 39551 ;;  x               4   14[BANK0 ] long 
 39552 ;;  in_min          4   18[BANK0 ] long 
 39553 ;;  in_max          4   22[BANK0 ] long 
 39554 ;;  out_min         4   26[BANK0 ] long 
 39555 ;;  out_max         4   30[BANK0 ] long 
 39556 ;; Auto vars:     Size  Location     Type
 39557 ;;		None
 39558 ;; Return value:  Size  Location     Type
 39559 ;;                  4   14[BANK0 ] long 
 39560 ;; Registers used:
 39561 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, cstack
 39562 ;; Tracked objects:
 39563 ;;		On entry : 0/0
 39564 ;;		On exit  : 0/0
 39565 ;;		Unchanged: 0/0
 39566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 39567 ;;      Params:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39569 ;;      Temps:          0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39570 ;;      Totals:         0      40       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39571 ;;Total ram usage:       40 bytes
 39572 ;; Hardware stack levels used:    1
 39573 ;; Hardware stack levels required when called:    6
 39574 ;; This function calls:
 39575 ;;		___aldiv
 39576 ;;		___lmul
 39577 ;; This function is called by:
 39578 ;;		_readPotentiometers
 39579 ;; This function uses a non-reentrant model
 39580 ;;
 39581                           
 39582                           	psect	text113
 39583  006746                     __ptext113:
 39584                           	opt stack 0
 39585  006746                     _map:
 39586                           	opt stack 19
 39587                           
 39588                           ;potentiometers.c: 30: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + o
      +                          ut_min;
 39589                           
 39590                           ;incstack = 0
 39591  006746  C07A  F082         	movff	map@out_min,??_map
 39592  00674A  C07B  F083         	movff	map@out_min+1,??_map+1
 39593  00674E  C07C  F084         	movff	map@out_min+2,??_map+2
 39594  006752  C07D  F085         	movff	map@out_min+3,??_map+3
 39595  006756  0100               	movlb	0	; () banked
 39596  006758  1F82               	comf	??_map& (0+255),f,b
 39597  00675A  1F83               	comf	(??_map+1)& (0+255),f,b
 39598  00675C  1F84               	comf	(??_map+2)& (0+255),f,b
 39599  00675E  1F85               	comf	(??_map+3)& (0+255),f,b
 39600  006760  2B82               	incf	??_map& (0+255),f,b
 39601  006762  0E00               	movlw	0
 39602  006764  2383               	addwfc	(??_map+1)& (0+255),f,b
 39603  006766  2384               	addwfc	(??_map+2)& (0+255),f,b
 39604  006768  2385               	addwfc	(??_map+3)& (0+255),f,b
 39605  00676A  517E               	movf	map@out_max& (0+255),w,b
 39606  00676C  2582               	addwf	??_map& (0+255),w,b
 39607  00676E  6F86               	movwf	(??_map+4)& (0+255),b
 39608  006770  517F               	movf	(map@out_max+1)& (0+255),w,b
 39609  006772  2183               	addwfc	(??_map+1)& (0+255),w,b
 39610  006774  6F87               	movwf	(??_map+5)& (0+255),b
 39611  006776  5180               	movf	(map@out_max+2)& (0+255),w,b
 39612  006778  2184               	addwfc	(??_map+2)& (0+255),w,b
 39613  00677A  6F88               	movwf	(??_map+6)& (0+255),b
 39614  00677C  5181               	movf	(map@out_max+3)& (0+255),w,b
 39615  00677E  2185               	addwfc	(??_map+3)& (0+255),w,b
 39616  006780  6F89               	movwf	(??_map+7)& (0+255),b
 39617  006782  C086  FFE6         	movff	??_map+4,postinc1
 39618  006786  C087  FFE6         	movff	??_map+5,postinc1
 39619  00678A  C088  FFE6         	movff	??_map+6,postinc1
 39620  00678E  C089  FFE6         	movff	??_map+7,postinc1
 39621  006792  C072  F08A         	movff	map@in_min,??_map+8
 39622  006796  C073  F08B         	movff	map@in_min+1,??_map+9
 39623  00679A  C074  F08C         	movff	map@in_min+2,??_map+10
 39624  00679E  C075  F08D         	movff	map@in_min+3,??_map+11
 39625  0067A2  1F8A               	comf	(??_map+8)& (0+255),f,b
 39626  0067A4  1F8B               	comf	(??_map+9)& (0+255),f,b
 39627  0067A6  1F8C               	comf	(??_map+10)& (0+255),f,b
 39628  0067A8  1F8D               	comf	(??_map+11)& (0+255),f,b
 39629  0067AA  2B8A               	incf	(??_map+8)& (0+255),f,b
 39630  0067AC  0E00               	movlw	0
 39631  0067AE  238B               	addwfc	(??_map+9)& (0+255),f,b
 39632  0067B0  238C               	addwfc	(??_map+10)& (0+255),f,b
 39633  0067B2  238D               	addwfc	(??_map+11)& (0+255),f,b
 39634  0067B4  516E               	movf	map@x& (0+255),w,b
 39635  0067B6  258A               	addwf	(??_map+8)& (0+255),w,b
 39636  0067B8  6F8E               	movwf	(??_map+12)& (0+255),b
 39637  0067BA  516F               	movf	(map@x+1)& (0+255),w,b
 39638  0067BC  218B               	addwfc	(??_map+9)& (0+255),w,b
 39639  0067BE  6F8F               	movwf	(??_map+13)& (0+255),b
 39640  0067C0  5170               	movf	(map@x+2)& (0+255),w,b
 39641  0067C2  218C               	addwfc	(??_map+10)& (0+255),w,b
 39642  0067C4  6F90               	movwf	(??_map+14)& (0+255),b
 39643  0067C6  5171               	movf	(map@x+3)& (0+255),w,b
 39644  0067C8  218D               	addwfc	(??_map+11)& (0+255),w,b
 39645  0067CA  6F91               	movwf	(??_map+15)& (0+255),b
 39646  0067CC  C08E  FFE6         	movff	??_map+12,postinc1
 39647  0067D0  C08F  FFE6         	movff	??_map+13,postinc1
 39648  0067D4  C090  FFE6         	movff	??_map+14,postinc1
 39649  0067D8  C091  FFE6         	movff	??_map+15,postinc1
 39650  0067DC  ECDF  F03A         	call	___lmul	;wreg free
 39651  0067E0  C03E  F060         	movff	btemp,___aldiv@dividend
 39652  0067E4  C03F  F061         	movff	btemp+1,___aldiv@dividend+1
 39653  0067E8  C040  F062         	movff	btemp+2,___aldiv@dividend+2
 39654  0067EC  C041  F063         	movff	btemp+3,___aldiv@dividend+3
 39655  0067F0  C072  F092         	movff	map@in_min,??_map+16
 39656  0067F4  C073  F093         	movff	map@in_min+1,??_map+17
 39657  0067F8  C074  F094         	movff	map@in_min+2,??_map+18
 39658  0067FC  C075  F095         	movff	map@in_min+3,??_map+19
 39659  006800  0100               	movlb	0	; () banked
 39660  006802  1F92               	comf	(??_map+16)& (0+255),f,b
 39661  006804  1F93               	comf	(??_map+17)& (0+255),f,b
 39662  006806  1F94               	comf	(??_map+18)& (0+255),f,b
 39663  006808  1F95               	comf	(??_map+19)& (0+255),f,b
 39664  00680A  2B92               	incf	(??_map+16)& (0+255),f,b
 39665  00680C  0E00               	movlw	0
 39666  00680E  2393               	addwfc	(??_map+17)& (0+255),f,b
 39667  006810  2394               	addwfc	(??_map+18)& (0+255),f,b
 39668  006812  2395               	addwfc	(??_map+19)& (0+255),f,b
 39669  006814  5176               	movf	map@in_max& (0+255),w,b
 39670  006816  2592               	addwf	(??_map+16)& (0+255),w,b
 39671  006818  6F64               	movwf	___aldiv@divisor& (0+255),b
 39672  00681A  5177               	movf	(map@in_max+1)& (0+255),w,b
 39673  00681C  2193               	addwfc	(??_map+17)& (0+255),w,b
 39674  00681E  6F65               	movwf	(___aldiv@divisor+1)& (0+255),b
 39675  006820  5178               	movf	(map@in_max+2)& (0+255),w,b
 39676  006822  2194               	addwfc	(??_map+18)& (0+255),w,b
 39677  006824  6F66               	movwf	(___aldiv@divisor+2)& (0+255),b
 39678  006826  5179               	movf	(map@in_max+3)& (0+255),w,b
 39679  006828  2195               	addwfc	(??_map+19)& (0+255),w,b
 39680  00682A  6F67               	movwf	(___aldiv@divisor+3)& (0+255),b
 39681  00682C  EC78  F03A         	call	___aldiv	;wreg free
 39682  006830  0100               	movlb	0	; () banked
 39683  006832  517A               	movf	map@out_min& (0+255),w,b
 39684  006834  2560               	addwf	?___aldiv& (0+255),w,b
 39685  006836  6F6E               	movwf	?_map& (0+255),b
 39686  006838  517B               	movf	(map@out_min+1)& (0+255),w,b
 39687  00683A  2161               	addwfc	(?___aldiv+1)& (0+255),w,b
 39688  00683C  6F6F               	movwf	(?_map+1)& (0+255),b
 39689  00683E  517C               	movf	(map@out_min+2)& (0+255),w,b
 39690  006840  2162               	addwfc	(?___aldiv+2)& (0+255),w,b
 39691  006842  6F70               	movwf	(?_map+2)& (0+255),b
 39692  006844  517D               	movf	(map@out_min+3)& (0+255),w,b
 39693  006846  2163               	addwfc	(?___aldiv+3)& (0+255),w,b
 39694  006848  6F71               	movwf	(?_map+3)& (0+255),b
 39695  00684A  0012               	return	
 39696  00684C                     __end_of_map:
 39697                           	opt stack 0
 39698                           tblptru	equ	0xFF8
 39699                           tblptrh	equ	0xFF7
 39700                           tblptrl	equ	0xFF6
 39701                           tablat	equ	0xFF5
 39702                           prodh	equ	0xFF4
 39703                           prodl	equ	0xFF3
 39704                           intcon	equ	0xFF2
 39705                           intcon2	equ	0xFF1
 39706                           indf0	equ	0xFEF
 39707                           postinc0	equ	0xFEE
 39708                           postdec0	equ	0xFED
 39709                           fsr0h	equ	0xFEA
 39710                           fsr0l	equ	0xFE9
 39711                           wreg	equ	0xFE8
 39712                           postinc1	equ	0xFE6
 39713                           postdec1	equ	0xFE5
 39714                           plusw1	equ	0xFE3
 39715                           fsr1h	equ	0xFE2
 39716                           fsr1l	equ	0xFE1
 39717                           indf2	equ	0xFDF
 39718                           postinc2	equ	0xFDE
 39719                           postdec2	equ	0xFDD
 39720                           plusw2	equ	0xFDB
 39721                           fsr2h	equ	0xFDA
 39722                           fsr2l	equ	0xFD9
 39723                           status	equ	0xFD8
 39724                           
 39725 ;; *************** function ___lmul *****************
 39726 ;; Defined at:
 39727 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 39728 ;; Parameters:    Size  Location     Type
 39729 ;;  multiplier      4  [STACK] unsigned long 
 39730 ;;  multiplicand    4  [STACK] unsigned long 
 39731 ;; Auto vars:     Size  Location     Type
 39732 ;;  product         4  [STACK] unsigned long 
 39733 ;; Return value:  Size  Location     Type
 39734 ;;                  4  [STACK] unsigned long 
 39735 ;; Registers used:
 39736 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3
 39737 ;; Tracked objects:
 39738 ;;		On entry : 0/0
 39739 ;;		On exit  : 0/0
 39740 ;;		Unchanged: 0/0
 39741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 39742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39746 ;;Total ram usage:        0 bytes
 39747 ;; Hardware stack levels used:    1
 39748 ;; Hardware stack levels required when called:    5
 39749 ;; This function calls:
 39750 ;;		Nothing
 39751 ;; This function is called by:
 39752 ;;		_map
 39753 ;;		_rand
 39754 ;; This function uses a reentrant model
 39755 ;;
 39756                           
 39757                           	psect	text114
 39758  0075BE                     __ptext114:
 39759                           	opt stack 0
 39760  0075BE                     ___lmul:
 39761                           	opt stack 0
 39762                           
 39763                           ; BSR set to: 0
 39764                           ; autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 8, argsize = 8 var
      +                          gsize = 0, retsize = 0
 39765  0075BE  52E6               	movf	postinc1,f,c
 39766  0075C0  52E6               	movf	postinc1,f,c
 39767  0075C2  52E6               	movf	postinc1,f,c
 39768  0075C4  52E6               	movf	postinc1,f,c
 39769                           
 39770                           ;stkvar	___lmul@product @ sp[(-4)+0]
 39771                           
 39772                           ;incstack = 0
 39773  0075C6  0EFC               	movlw	-4
 39774  0075C8  6AE3               	clrf	plusw1,c
 39775  0075CA  0EFD               	movlw	-3
 39776  0075CC  6AE3               	clrf	plusw1,c
 39777  0075CE  0EFE               	movlw	-2
 39778  0075D0  6AE3               	clrf	plusw1,c
 39779  0075D2  0EFF               	movlw	-1
 39780  0075D4  6AE3               	clrf	plusw1,c
 39781  0075D6                     l5676:
 39782                           
 39783                           ;stkvar	___lmul@multiplier @ sp[(-4)+-4]
 39784  0075D6  0EF8               	movlw	-8
 39785  0075D8  A0E3               	btfss	plusw1,0,c
 39786  0075DA  D024               	goto	l32054
 39787                           
 39788                           ;stkvar	___lmul@multiplicand @ sp[(-4)+-8]
 39789                           ;stkvar	___lmul@product @ sp[(-4)+0]
 39790  0075DC  0EFC               	movlw	-4
 39791  0075DE  50E3               	movf	plusw1,w,c
 39792  0075E0  6E3E               	movwf	btemp,c
 39793  0075E2  0EF4               	movlw	-12
 39794  0075E4  50E3               	movf	plusw1,w,c
 39795  0075E6  263E               	addwf	btemp,f,c
 39796  0075E8  0EFC               	movlw	-4
 39797  0075EA  C03E  FFE3         	movff	btemp,plusw1
 39798  0075EE  0EFD               	movlw	-3
 39799  0075F0  50E3               	movf	plusw1,w,c
 39800  0075F2  6E3E               	movwf	btemp,c
 39801  0075F4  0EF5               	movlw	-11
 39802  0075F6  50E3               	movf	plusw1,w,c
 39803  0075F8  223E               	addwfc	btemp,f,c
 39804  0075FA  0EFD               	movlw	-3
 39805  0075FC  C03E  FFE3         	movff	btemp,plusw1
 39806  007600  0EFE               	movlw	-2
 39807  007602  50E3               	movf	plusw1,w,c
 39808  007604  6E3E               	movwf	btemp,c
 39809  007606  0EF6               	movlw	-10
 39810  007608  50E3               	movf	plusw1,w,c
 39811  00760A  223E               	addwfc	btemp,f,c
 39812  00760C  0EFE               	movlw	-2
 39813  00760E  C03E  FFE3         	movff	btemp,plusw1
 39814  007612  0EFF               	movlw	-1
 39815  007614  50E3               	movf	plusw1,w,c
 39816  007616  6E3E               	movwf	btemp,c
 39817  007618  0EF7               	movlw	-9
 39818  00761A  50E3               	movf	plusw1,w,c
 39819  00761C  223E               	addwfc	btemp,f,c
 39820  00761E  0EFF               	movlw	-1
 39821  007620  C03E  FFE3         	movff	btemp,plusw1
 39822  007624                     l32054:
 39823                           
 39824                           ;stkvar	___lmul@multiplicand @ sp[(-4)+-8]
 39825  007624  90D8               	bcf	status,0,c
 39826  007626  0EF4               	movlw	-12
 39827  007628  36E3               	rlcf	plusw1,f,c
 39828  00762A  0EF5               	movlw	-11
 39829  00762C  36E3               	rlcf	plusw1,f,c
 39830  00762E  0EF6               	movlw	-10
 39831  007630  36E3               	rlcf	plusw1,f,c
 39832  007632  0EF7               	movlw	-9
 39833  007634  36E3               	rlcf	plusw1,f,c
 39834                           
 39835                           ;stkvar	___lmul@multiplier @ sp[(-4)+-4]
 39836  007636  90D8               	bcf	status,0,c
 39837  007638  0EFB               	movlw	-5
 39838  00763A  32E3               	rrcf	plusw1,f,c
 39839  00763C  0EFA               	movlw	-6
 39840  00763E  32E3               	rrcf	plusw1,f,c
 39841  007640  0EF9               	movlw	-7
 39842  007642  32E3               	rrcf	plusw1,f,c
 39843  007644  0EF8               	movlw	-8
 39844  007646  32E3               	rrcf	plusw1,f,c
 39845                           
 39846                           ;stkvar	___lmul@multiplier @ sp[(-4)+-4]
 39847  007648  0EF8               	movlw	-8
 39848  00764A  50E3               	movf	plusw1,w,c
 39849  00764C  E1C4               	bnz	l5676
 39850  00764E  0EF9               	movlw	-7
 39851  007650  50E3               	movf	plusw1,w,c
 39852  007652  E1C1               	bnz	l5676
 39853  007654  0EFA               	movlw	-6
 39854  007656  50E3               	movf	plusw1,w,c
 39855  007658  E1BE               	bnz	l5676
 39856  00765A  0EFB               	movlw	-5
 39857  00765C  50E3               	movf	plusw1,w,c
 39858  00765E  A4D8               	btfss	status,2,c
 39859  007660  D7BA               	goto	l5676
 39860                           
 39861                           ;stkvar	___lmul@product @ sp[(-4)+0]
 39862  007662  0EFC               	movlw	-4
 39863  007664  CFE3 F03E          	movff	plusw1,btemp
 39864  007668  0EFD               	movlw	-3
 39865  00766A  CFE3 F03F          	movff	plusw1,btemp+1
 39866  00766E  0EFE               	movlw	-2
 39867  007670  CFE3 F040          	movff	plusw1,btemp+2
 39868  007674  0EFF               	movlw	-1
 39869  007676  CFE3 F041          	movff	plusw1,btemp+3
 39870                           
 39871                           ; ___lmul: autosize = 4, savesize = 0, parsavesize = 0, tempsize = 0 parsize = 8, argsiz
      +                          e = 8, vargsize = 0
 39872  00767A  0EF4               	movlw	244
 39873  00767C  26E1               	addwf	fsr1l,f,c
 39874  00767E  0EFF               	movlw	255
 39875  007680  22E2               	addwfc	fsr1h,f,c
 39876  007682  0012               	return		;funcret
 39877  007684                     __end_of___lmul:
 39878                           	opt stack 0
 39879                           tblptru	equ	0xFF8
 39880                           tblptrh	equ	0xFF7
 39881                           tblptrl	equ	0xFF6
 39882                           tablat	equ	0xFF5
 39883                           prodh	equ	0xFF4
 39884                           prodl	equ	0xFF3
 39885                           intcon	equ	0xFF2
 39886                           intcon2	equ	0xFF1
 39887                           indf0	equ	0xFEF
 39888                           postinc0	equ	0xFEE
 39889                           postdec0	equ	0xFED
 39890                           fsr0h	equ	0xFEA
 39891                           fsr0l	equ	0xFE9
 39892                           wreg	equ	0xFE8
 39893                           postinc1	equ	0xFE6
 39894                           postdec1	equ	0xFE5
 39895                           plusw1	equ	0xFE3
 39896                           fsr1h	equ	0xFE2
 39897                           fsr1l	equ	0xFE1
 39898                           indf2	equ	0xFDF
 39899                           postinc2	equ	0xFDE
 39900                           postdec2	equ	0xFDD
 39901                           plusw2	equ	0xFDB
 39902                           fsr2h	equ	0xFDA
 39903                           fsr2l	equ	0xFD9
 39904                           status	equ	0xFD8
 39905                           
 39906 ;; *************** function ___aldiv *****************
 39907 ;; Defined at:
 39908 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
 39909 ;; Parameters:    Size  Location     Type
 39910 ;;  dividend        4    0[BANK0 ] long 
 39911 ;;  divisor         4    4[BANK0 ] long 
 39912 ;; Auto vars:     Size  Location     Type
 39913 ;;  quotient        4   10[BANK0 ] long 
 39914 ;;  sign            1    9[BANK0 ] unsigned char 
 39915 ;;  counter         1    8[BANK0 ] unsigned char 
 39916 ;; Return value:  Size  Location     Type
 39917 ;;                  4    0[BANK0 ] long 
 39918 ;; Registers used:
 39919 ;;		wreg, status,2, status,0
 39920 ;; Tracked objects:
 39921 ;;		On entry : 0/0
 39922 ;;		On exit  : 0/0
 39923 ;;		Unchanged: 0/0
 39924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 39925 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39926 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39928 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 39929 ;;Total ram usage:       14 bytes
 39930 ;; Hardware stack levels used:    1
 39931 ;; Hardware stack levels required when called:    5
 39932 ;; This function calls:
 39933 ;;		Nothing
 39934 ;; This function is called by:
 39935 ;;		_map
 39936 ;; This function uses a non-reentrant model
 39937 ;;
 39938                           
 39939                           	psect	text115
 39940  0074F0                     __ptext115:
 39941                           	opt stack 0
 39942  0074F0                     ___aldiv:
 39943                           	opt stack 19
 39944                           
 39945                           ;incstack = 0
 39946  0074F0  0E00               	movlw	0
 39947  0074F2  0100               	movlb	0	; () banked
 39948  0074F4  6F69               	movwf	___aldiv@sign& (0+255),b
 39949                           
 39950                           ; BSR set to: 0
 39951  0074F6  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 39952  0074F8  D00A               	goto	l5720
 39953                           
 39954                           ; BSR set to: 0
 39955  0074FA  1F67               	comf	(___aldiv@divisor+3)& (0+255),f,b
 39956  0074FC  1F66               	comf	(___aldiv@divisor+2)& (0+255),f,b
 39957  0074FE  1F65               	comf	(___aldiv@divisor+1)& (0+255),f,b
 39958  007500  6D64               	negf	___aldiv@divisor& (0+255),b
 39959  007502  0E00               	movlw	0
 39960  007504  2365               	addwfc	(___aldiv@divisor+1)& (0+255),f,b
 39961  007506  2366               	addwfc	(___aldiv@divisor+2)& (0+255),f,b
 39962  007508  2367               	addwfc	(___aldiv@divisor+3)& (0+255),f,b
 39963                           
 39964                           ; BSR set to: 0
 39965  00750A  0E01               	movlw	1
 39966  00750C  6F69               	movwf	___aldiv@sign& (0+255),b
 39967  00750E                     l5720:
 39968                           
 39969                           ; BSR set to: 0
 39970                           
 39971                           ; BSR set to: 0
 39972  00750E  AF63               	btfss	(___aldiv@dividend+3)& (0+255),7,b
 39973  007510  D00A               	goto	l5721
 39974                           
 39975                           ; BSR set to: 0
 39976  007512  1F63               	comf	(___aldiv@dividend+3)& (0+255),f,b
 39977  007514  1F62               	comf	(___aldiv@dividend+2)& (0+255),f,b
 39978  007516  1F61               	comf	(___aldiv@dividend+1)& (0+255),f,b
 39979  007518  6D60               	negf	___aldiv@dividend& (0+255),b
 39980  00751A  0E00               	movlw	0
 39981  00751C  2361               	addwfc	(___aldiv@dividend+1)& (0+255),f,b
 39982  00751E  2362               	addwfc	(___aldiv@dividend+2)& (0+255),f,b
 39983  007520  2363               	addwfc	(___aldiv@dividend+3)& (0+255),f,b
 39984                           
 39985                           ; BSR set to: 0
 39986  007522  0E01               	movlw	1
 39987  007524  1B69               	xorwf	___aldiv@sign& (0+255),f,b
 39988  007526                     l5721:
 39989                           
 39990                           ; BSR set to: 0
 39991                           
 39992                           ; BSR set to: 0
 39993  007526  0E00               	movlw	0
 39994  007528  6F6A               	movwf	___aldiv@quotient& (0+255),b
 39995  00752A  0E00               	movlw	0
 39996  00752C  6F6B               	movwf	(___aldiv@quotient+1)& (0+255),b
 39997  00752E  0E00               	movlw	0
 39998  007530  6F6C               	movwf	(___aldiv@quotient+2)& (0+255),b
 39999  007532  0E00               	movlw	0
 40000  007534  6F6D               	movwf	(___aldiv@quotient+3)& (0+255),b
 40001                           
 40002                           ; BSR set to: 0
 40003  007536  5164               	movf	___aldiv@divisor& (0+255),w,b
 40004  007538  1165               	iorwf	(___aldiv@divisor+1)& (0+255),w,b
 40005  00753A  1166               	iorwf	(___aldiv@divisor+2)& (0+255),w,b
 40006  00753C  1167               	iorwf	(___aldiv@divisor+3)& (0+255),w,b
 40007  00753E  B4D8               	btfsc	status,2,c
 40008  007540  D02A               	goto	l5728
 40009                           
 40010                           ; BSR set to: 0
 40011  007542  0E01               	movlw	1
 40012  007544  6F68               	movwf	___aldiv@counter& (0+255),b
 40013  007546  D006               	goto	l5723
 40014  007548                     
 40015                           ; BSR set to: 0
 40016                           
 40017                           ; BSR set to: 0
 40018  007548  90D8               	bcf	status,0,c
 40019  00754A  3764               	rlcf	___aldiv@divisor& (0+255),f,b
 40020  00754C  3765               	rlcf	(___aldiv@divisor+1)& (0+255),f,b
 40021  00754E  3766               	rlcf	(___aldiv@divisor+2)& (0+255),f,b
 40022  007550  3767               	rlcf	(___aldiv@divisor+3)& (0+255),f,b
 40023  007552  2B68               	incf	___aldiv@counter& (0+255),f,b
 40024  007554                     l5723:
 40025                           
 40026                           ; BSR set to: 0
 40027                           
 40028                           ; BSR set to: 0
 40029  007554  AF67               	btfss	(___aldiv@divisor+3)& (0+255),7,b
 40030  007556  D7F8               	goto	l5724
 40031  007558                     u48240:
 40032                           
 40033                           ; BSR set to: 0
 40034                           
 40035                           ; BSR set to: 0
 40036                           
 40037                           ; BSR set to: 0
 40038  007558  90D8               	bcf	status,0,c
 40039  00755A  376A               	rlcf	___aldiv@quotient& (0+255),f,b
 40040  00755C  376B               	rlcf	(___aldiv@quotient+1)& (0+255),f,b
 40041  00755E  376C               	rlcf	(___aldiv@quotient+2)& (0+255),f,b
 40042  007560  376D               	rlcf	(___aldiv@quotient+3)& (0+255),f,b
 40043                           
 40044                           ; BSR set to: 0
 40045  007562  5164               	movf	___aldiv@divisor& (0+255),w,b
 40046  007564  5D60               	subwf	___aldiv@dividend& (0+255),w,b
 40047  007566  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
 40048  007568  5961               	subwfb	(___aldiv@dividend+1)& (0+255),w,b
 40049  00756A  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
 40050  00756C  5962               	subwfb	(___aldiv@dividend+2)& (0+255),w,b
 40051  00756E  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
 40052  007570  5963               	subwfb	(___aldiv@dividend+3)& (0+255),w,b
 40053  007572  A0D8               	btfss	status,0,c
 40054  007574  D009               	goto	l5727
 40055                           
 40056                           ; BSR set to: 0
 40057  007576  5164               	movf	___aldiv@divisor& (0+255),w,b
 40058  007578  5F60               	subwf	___aldiv@dividend& (0+255),f,b
 40059  00757A  5165               	movf	(___aldiv@divisor+1)& (0+255),w,b
 40060  00757C  5B61               	subwfb	(___aldiv@dividend+1)& (0+255),f,b
 40061  00757E  5166               	movf	(___aldiv@divisor+2)& (0+255),w,b
 40062  007580  5B62               	subwfb	(___aldiv@dividend+2)& (0+255),f,b
 40063  007582  5167               	movf	(___aldiv@divisor+3)& (0+255),w,b
 40064  007584  5B63               	subwfb	(___aldiv@dividend+3)& (0+255),f,b
 40065                           
 40066                           ; BSR set to: 0
 40067  007586  816A               	bsf	___aldiv@quotient& (0+255),0,b
 40068  007588                     l5727:
 40069                           
 40070                           ; BSR set to: 0
 40071                           
 40072                           ; BSR set to: 0
 40073  007588  90D8               	bcf	status,0,c
 40074  00758A  3367               	rrcf	(___aldiv@divisor+3)& (0+255),f,b
 40075  00758C  3366               	rrcf	(___aldiv@divisor+2)& (0+255),f,b
 40076  00758E  3365               	rrcf	(___aldiv@divisor+1)& (0+255),f,b
 40077  007590  3364               	rrcf	___aldiv@divisor& (0+255),f,b
 40078                           
 40079                           ; BSR set to: 0
 40080  007592  2F68               	decfsz	___aldiv@counter& (0+255),f,b
 40081  007594  D7E1               	goto	u48240
 40082  007596                     l5728:
 40083                           
 40084                           ; BSR set to: 0
 40085                           
 40086                           ; BSR set to: 0
 40087                           
 40088                           ; BSR set to: 0
 40089  007596  5169               	movf	___aldiv@sign& (0+255),w,b
 40090  007598  B4D8               	btfsc	status,2,c
 40091  00759A  D008               	goto	l5729
 40092                           
 40093                           ; BSR set to: 0
 40094  00759C  1F6D               	comf	(___aldiv@quotient+3)& (0+255),f,b
 40095  00759E  1F6C               	comf	(___aldiv@quotient+2)& (0+255),f,b
 40096  0075A0  1F6B               	comf	(___aldiv@quotient+1)& (0+255),f,b
 40097  0075A2  6D6A               	negf	___aldiv@quotient& (0+255),b
 40098  0075A4  0E00               	movlw	0
 40099  0075A6  236B               	addwfc	(___aldiv@quotient+1)& (0+255),f,b
 40100  0075A8  236C               	addwfc	(___aldiv@quotient+2)& (0+255),f,b
 40101  0075AA  236D               	addwfc	(___aldiv@quotient+3)& (0+255),f,b
 40102  0075AC                     l5729:
 40103                           
 40104                           ; BSR set to: 0
 40105                           
 40106                           ; BSR set to: 0
 40107  0075AC  C06A  F060         	movff	___aldiv@quotient,?___aldiv
 40108  0075B0  C06B  F061         	movff	___aldiv@quotient+1,?___aldiv+1
 40109  0075B4  C06C  F062         	movff	___aldiv@quotient+2,?___aldiv+2
 40110  0075B8  C06D  F063         	movff	___aldiv@quotient+3,?___aldiv+3
 40111  0075BC  0012               	return	
 40112  0075BE                     __end_of___aldiv:
 40113                           	opt stack 0
 40114                           tblptru	equ	0xFF8
 40115                           tblptrh	equ	0xFF7
 40116                           tblptrl	equ	0xFF6
 40117                           tablat	equ	0xFF5
 40118                           prodh	equ	0xFF4
 40119                           prodl	equ	0xFF3
 40120                           intcon	equ	0xFF2
 40121                           intcon2	equ	0xFF1
 40122                           indf0	equ	0xFEF
 40123                           postinc0	equ	0xFEE
 40124                           postdec0	equ	0xFED
 40125                           fsr0h	equ	0xFEA
 40126                           fsr0l	equ	0xFE9
 40127                           wreg	equ	0xFE8
 40128                           postinc1	equ	0xFE6
 40129                           postdec1	equ	0xFE5
 40130                           plusw1	equ	0xFE3
 40131                           fsr1h	equ	0xFE2
 40132                           fsr1l	equ	0xFE1
 40133                           indf2	equ	0xFDF
 40134                           postinc2	equ	0xFDE
 40135                           postdec2	equ	0xFDD
 40136                           plusw2	equ	0xFDB
 40137                           fsr2h	equ	0xFDA
 40138                           fsr2l	equ	0xFD9
 40139                           status	equ	0xFD8
 40140                           
 40141 ;; *************** function ___xxtofl *****************
 40142 ;; Defined at:
 40143 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\xxtofl.c"
 40144 ;; Parameters:    Size  Location     Type
 40145 ;;  sign            1    wreg     unsigned char 
 40146 ;;  val             4    0[BANK0 ] long 
 40147 ;; Auto vars:     Size  Location     Type
 40148 ;;  sign            1    8[BANK0 ] unsigned char 
 40149 ;;  arg             4   10[BANK0 ] unsigned long 
 40150 ;;  exp             1    9[BANK0 ] unsigned char 
 40151 ;; Return value:  Size  Location     Type
 40152 ;;                  4    0[BANK0 ] unsigned char 
 40153 ;; Registers used:
 40154 ;;		wreg, status,2, status,0
 40155 ;; Tracked objects:
 40156 ;;		On entry : 0/0
 40157 ;;		On exit  : 0/0
 40158 ;;		Unchanged: 0/0
 40159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40160 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40161 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40162 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40163 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40164 ;;Total ram usage:       14 bytes
 40165 ;; Hardware stack levels used:    1
 40166 ;; Hardware stack levels required when called:    5
 40167 ;; This function calls:
 40168 ;;		Nothing
 40169 ;; This function is called by:
 40170 ;;		_calculate_alpha
 40171 ;;		_readPotentiometers
 40172 ;;		_calculate_pulse_length
 40173 ;; This function uses a non-reentrant model
 40174 ;;
 40175                           
 40176                           	psect	text116
 40177  006028                     __ptext116:
 40178                           	opt stack 0
 40179  006028                     ___xxtofl:
 40180                           	opt stack 22
 40181                           
 40182                           ; BSR set to: 0
 40183                           ;incstack = 0
 40184                           ;___xxtofl@sign stored from wreg
 40185  006028  0100               	movlb	0	; () banked
 40186  00602A  6F68               	movwf	___xxtofl@sign& (0+255),b
 40187  00602C  0100               	movlb	0	; () banked
 40188  00602E  5168               	movf	___xxtofl@sign& (0+255),w,b
 40189  006030  A4D8               	btfss	status,2,c
 40190                           
 40191                           ; BSR set to: 0
 40192  006032  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 40193  006034  D01A               	goto	l6226
 40194                           
 40195                           ; BSR set to: 0
 40196  006036  C060  F064         	movff	___xxtofl@val,??___xxtofl
 40197  00603A  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 40198  00603E  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 40199  006042  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 40200  006046  1F64               	comf	??___xxtofl& (0+255),f,b
 40201  006048  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 40202  00604A  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 40203  00604C  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 40204  00604E  2B64               	incf	??___xxtofl& (0+255),f,b
 40205  006050  0E00               	movlw	0
 40206  006052  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 40207  006054  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 40208  006056  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 40209  006058  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 40210  00605C  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 40211  006060  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 40212  006064  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 40213  006068  D008               	goto	l6227
 40214  00606A                     l6226:
 40215                           
 40216                           ; BSR set to: 0
 40217  00606A  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 40218  00606E  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 40219  006072  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 40220  006076  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 40221  00607A                     l6227:
 40222                           
 40223                           ; BSR set to: 0
 40224                           
 40225                           ; BSR set to: 0
 40226  00607A  5160               	movf	___xxtofl@val& (0+255),w,b
 40227  00607C  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 40228  00607E  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 40229  006080  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 40230  006082  A4D8               	btfss	status,2,c
 40231  006084  D009               	goto	l6228
 40232                           
 40233                           ; BSR set to: 0
 40234  006086  0E00               	movlw	0
 40235  006088  6F60               	movwf	?___xxtofl& (0+255),b
 40236  00608A  0E00               	movlw	0
 40237  00608C  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 40238  00608E  0E00               	movlw	0
 40239  006090  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 40240  006092  0E00               	movlw	0
 40241  006094  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 40242                           
 40243                           ; BSR set to: 0
 40244  006096  0012               	return	
 40245  006098                     l6228:
 40246                           
 40247                           ; BSR set to: 0
 40248                           
 40249                           ; BSR set to: 0
 40250  006098  0E96               	movlw	150
 40251  00609A  6F69               	movwf	___xxtofl@exp& (0+255),b
 40252  00609C  D006               	goto	l6230
 40253  00609E                     
 40254                           ; BSR set to: 0
 40255                           
 40256                           ; BSR set to: 0
 40257  00609E  2B69               	incf	___xxtofl@exp& (0+255),f,b
 40258  0060A0  90D8               	bcf	status,0,c
 40259  0060A2  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 40260  0060A4  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 40261  0060A6  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 40262  0060A8  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 40263  0060AA                     l6230:
 40264                           
 40265                           ; BSR set to: 0
 40266                           
 40267                           ; BSR set to: 0
 40268  0060AA  0E00               	movlw	0
 40269  0060AC  156A               	andwf	___xxtofl@arg& (0+255),w,b
 40270  0060AE  6F64               	movwf	??___xxtofl& (0+255),b
 40271  0060B0  0E00               	movlw	0
 40272  0060B2  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 40273  0060B4  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 40274  0060B6  0E00               	movlw	0
 40275  0060B8  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 40276  0060BA  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 40277  0060BC  0EFE               	movlw	254
 40278  0060BE  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 40279  0060C0  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 40280  0060C2  5164               	movf	??___xxtofl& (0+255),w,b
 40281  0060C4  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 40282  0060C6  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 40283  0060C8  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 40284  0060CA  B4D8               	btfsc	status,2,c
 40285  0060CC  D00D               	goto	l6233
 40286  0060CE  D7E7               	goto	l6231
 40287  0060D0                     
 40288                           ; BSR set to: 0
 40289                           
 40290                           ; BSR set to: 0
 40291  0060D0  2B69               	incf	___xxtofl@exp& (0+255),f,b
 40292                           
 40293                           ; BSR set to: 0
 40294  0060D2  0E01               	movlw	1
 40295  0060D4  276A               	addwf	___xxtofl@arg& (0+255),f,b
 40296  0060D6  0E00               	movlw	0
 40297  0060D8  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 40298  0060DA  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 40299  0060DC  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 40300                           
 40301                           ; BSR set to: 0
 40302  0060DE  90D8               	bcf	status,0,c
 40303  0060E0  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 40304  0060E2  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 40305  0060E4  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 40306  0060E6  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 40307  0060E8                     l6233:
 40308                           
 40309                           ; BSR set to: 0
 40310  0060E8  0E00               	movlw	0
 40311  0060EA  156A               	andwf	___xxtofl@arg& (0+255),w,b
 40312  0060EC  6F64               	movwf	??___xxtofl& (0+255),b
 40313  0060EE  0E00               	movlw	0
 40314  0060F0  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 40315  0060F2  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 40316  0060F4  0E00               	movlw	0
 40317  0060F6  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 40318  0060F8  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 40319  0060FA  0EFF               	movlw	255
 40320  0060FC  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 40321  0060FE  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 40322  006100  5164               	movf	??___xxtofl& (0+255),w,b
 40323  006102  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 40324  006104  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 40325  006106  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 40326  006108  B4D8               	btfsc	status,2,c
 40327  00610A  D007               	goto	l6236
 40328  00610C  D7E1               	goto	l6234
 40329  00610E                     
 40330                           ; BSR set to: 0
 40331                           
 40332                           ; BSR set to: 0
 40333  00610E  0769               	decf	___xxtofl@exp& (0+255),f,b
 40334  006110  90D8               	bcf	status,0,c
 40335  006112  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 40336  006114  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 40337  006116  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 40338  006118  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 40339  00611A                     l6236:
 40340                           
 40341                           ; BSR set to: 0
 40342                           
 40343                           ; BSR set to: 0
 40344  00611A  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 40345  00611C  D003               	goto	u52560
 40346                           
 40347                           ; BSR set to: 0
 40348  00611E  0E02               	movlw	2
 40349  006120  6169               	cpfslt	___xxtofl@exp& (0+255),b
 40350  006122  D7F5               	goto	l6237
 40351  006124                     u52560:
 40352                           
 40353                           ; BSR set to: 0
 40354                           
 40355                           ; BSR set to: 0
 40356  006124  B169               	btfsc	___xxtofl@exp& (0+255),0,b
 40357  006126  D008               	goto	l6241
 40358                           
 40359                           ; BSR set to: 0
 40360  006128  0EFF               	movlw	255
 40361  00612A  176A               	andwf	___xxtofl@arg& (0+255),f,b
 40362  00612C  0EFF               	movlw	255
 40363  00612E  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 40364  006130  0E7F               	movlw	127
 40365  006132  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 40366  006134  0EFF               	movlw	255
 40367  006136  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 40368  006138                     l6241:
 40369                           
 40370                           ; BSR set to: 0
 40371  006138  90D8               	bcf	status,0,c
 40372  00613A  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 40373  00613C  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 40374  006140  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 40375  006142  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 40376  006144  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 40377  006146  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 40378  00614A  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 40379  00614C  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 40380  00614E  6B64               	clrf	??___xxtofl& (0+255),b
 40381  006150  5164               	movf	??___xxtofl& (0+255),w,b
 40382  006152  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 40383  006154  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 40384  006156  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 40385  006158  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 40386  00615A  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 40387  00615C  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 40388  00615E  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 40389                           
 40390                           ; BSR set to: 0
 40391  006160  5168               	movf	___xxtofl@sign& (0+255),w,b
 40392  006162  A4D8               	btfss	status,2,c
 40393                           
 40394                           ; BSR set to: 0
 40395  006164  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 40396  006166  D001               	goto	l6242
 40397                           
 40398                           ; BSR set to: 0
 40399  006168  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 40400  00616A                     l6242:
 40401                           
 40402                           ; BSR set to: 0
 40403                           
 40404                           ; BSR set to: 0
 40405  00616A  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 40406  00616E  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 40407  006172  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 40408  006176  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 40409  00617A  0012               	return	
 40410  00617C                     __end_of___xxtofl:
 40411                           	opt stack 0
 40412                           tblptru	equ	0xFF8
 40413                           tblptrh	equ	0xFF7
 40414                           tblptrl	equ	0xFF6
 40415                           tablat	equ	0xFF5
 40416                           prodh	equ	0xFF4
 40417                           prodl	equ	0xFF3
 40418                           intcon	equ	0xFF2
 40419                           intcon2	equ	0xFF1
 40420                           indf0	equ	0xFEF
 40421                           postinc0	equ	0xFEE
 40422                           postdec0	equ	0xFED
 40423                           fsr0h	equ	0xFEA
 40424                           fsr0l	equ	0xFE9
 40425                           wreg	equ	0xFE8
 40426                           postinc1	equ	0xFE6
 40427                           postdec1	equ	0xFE5
 40428                           plusw1	equ	0xFE3
 40429                           fsr1h	equ	0xFE2
 40430                           fsr1l	equ	0xFE1
 40431                           indf2	equ	0xFDF
 40432                           postinc2	equ	0xFDE
 40433                           postdec2	equ	0xFDD
 40434                           plusw2	equ	0xFDB
 40435                           fsr2h	equ	0xFDA
 40436                           fsr2l	equ	0xFD9
 40437                           status	equ	0xFD8
 40438                           
 40439 ;; *************** function ___fltol *****************
 40440 ;; Defined at:
 40441 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fltol.c"
 40442 ;; Parameters:    Size  Location     Type
 40443 ;;  f1              4   88[BANK0 ] unsigned char 
 40444 ;; Auto vars:     Size  Location     Type
 40445 ;;  exp1            1   97[BANK0 ] unsigned char 
 40446 ;;  sign1           1   96[BANK0 ] unsigned char 
 40447 ;; Return value:  Size  Location     Type
 40448 ;;                  4   88[BANK0 ] long 
 40449 ;; Registers used:
 40450 ;;		wreg, status,2, status,0
 40451 ;; Tracked objects:
 40452 ;;		On entry : 0/0
 40453 ;;		On exit  : 0/0
 40454 ;;		Unchanged: 0/0
 40455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40456 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40457 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40458 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40459 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40460 ;;Total ram usage:       10 bytes
 40461 ;; Hardware stack levels used:    1
 40462 ;; Hardware stack levels required when called:    5
 40463 ;; This function calls:
 40464 ;;		Nothing
 40465 ;; This function is called by:
 40466 ;;		_readPotentiometers
 40467 ;;		_calculate_pulse_length
 40468 ;; This function uses a non-reentrant model
 40469 ;;
 40470                           
 40471                           	psect	text117
 40472  006FE6                     __ptext117:
 40473                           	opt stack 0
 40474  006FE6                     ___fltol:
 40475                           	opt stack 22
 40476                           
 40477                           ; BSR set to: 0
 40478                           ;incstack = 0
 40479  006FE6  0100               	movlb	0	; () banked
 40480  006FE8  35BA               	rlcf	(___fltol@f1+2)& (0+255),w,b
 40481  006FEA  35BB               	rlcf	(___fltol@f1+3)& (0+255),w,b
 40482  006FEC  6FC1               	movwf	___fltol@exp1& (0+255),b
 40483  006FEE  51C1               	movf	___fltol@exp1& (0+255),w,b
 40484  006FF0  A4D8               	btfss	status,2,c
 40485  006FF2  D009               	goto	l5894
 40486                           
 40487                           ; BSR set to: 0
 40488  006FF4  0E00               	movlw	0
 40489  006FF6  6FB8               	movwf	?___fltol& (0+255),b
 40490  006FF8  0E00               	movlw	0
 40491  006FFA  6FB9               	movwf	(?___fltol+1)& (0+255),b
 40492  006FFC  0E00               	movlw	0
 40493  006FFE  6FBA               	movwf	(?___fltol+2)& (0+255),b
 40494  007000  0E00               	movlw	0
 40495  007002  6FBB               	movwf	(?___fltol+3)& (0+255),b
 40496                           
 40497                           ; BSR set to: 0
 40498  007004  0012               	return	
 40499  007006                     l5894:
 40500                           
 40501                           ; BSR set to: 0
 40502                           
 40503                           ; BSR set to: 0
 40504  007006  C0B8  F0BC         	movff	___fltol@f1,??___fltol
 40505  00700A  C0B9  F0BD         	movff	___fltol@f1+1,??___fltol+1
 40506  00700E  C0BA  F0BE         	movff	___fltol@f1+2,??___fltol+2
 40507  007012  C0BB  F0BF         	movff	___fltol@f1+3,??___fltol+3
 40508  007016  0E20               	movlw	32
 40509  007018  D005               	goto	u52440
 40510  00701A                     u52445:
 40511  00701A  90D8               	bcf	status,0,c
 40512  00701C  33BF               	rrcf	(??___fltol+3)& (0+255),f,b
 40513  00701E  33BE               	rrcf	(??___fltol+2)& (0+255),f,b
 40514  007020  33BD               	rrcf	(??___fltol+1)& (0+255),f,b
 40515  007022  33BC               	rrcf	??___fltol& (0+255),f,b
 40516  007024                     u52440:
 40517  007024  2EE8               	decfsz	wreg,f,c
 40518  007026  D7F9               	goto	u52445
 40519  007028  51BC               	movf	??___fltol& (0+255),w,b
 40520  00702A  6FC0               	movwf	___fltol@sign1& (0+255),b
 40521                           
 40522                           ; BSR set to: 0
 40523  00702C  8FBA               	bsf	(___fltol@f1+2)& (0+255),7,b
 40524                           
 40525                           ; BSR set to: 0
 40526  00702E  0EFF               	movlw	255
 40527  007030  17B8               	andwf	___fltol@f1& (0+255),f,b
 40528  007032  0EFF               	movlw	255
 40529  007034  17B9               	andwf	(___fltol@f1+1)& (0+255),f,b
 40530  007036  0EFF               	movlw	255
 40531  007038  17BA               	andwf	(___fltol@f1+2)& (0+255),f,b
 40532  00703A  0E00               	movlw	0
 40533  00703C  17BB               	andwf	(___fltol@f1+3)& (0+255),f,b
 40534                           
 40535                           ; BSR set to: 0
 40536  00703E  0E96               	movlw	150
 40537  007040  5FC1               	subwf	___fltol@exp1& (0+255),f,b
 40538                           
 40539                           ; BSR set to: 0
 40540  007042  AFC1               	btfss	___fltol@exp1& (0+255),7,b
 40541  007044  D016               	goto	l5896
 40542                           
 40543                           ; BSR set to: 0
 40544  007046  51C1               	movf	___fltol@exp1& (0+255),w,b
 40545  007048  0A80               	xorlw	128
 40546  00704A  0F97               	addlw	151
 40547  00704C  B0D8               	btfsc	status,0,c
 40548  00704E  D009               	goto	l5897
 40549                           
 40550                           ; BSR set to: 0
 40551  007050  0E00               	movlw	0
 40552  007052  6FB8               	movwf	?___fltol& (0+255),b
 40553  007054  0E00               	movlw	0
 40554  007056  6FB9               	movwf	(?___fltol+1)& (0+255),b
 40555  007058  0E00               	movlw	0
 40556  00705A  6FBA               	movwf	(?___fltol+2)& (0+255),b
 40557  00705C  0E00               	movlw	0
 40558  00705E  6FBB               	movwf	(?___fltol+3)& (0+255),b
 40559                           
 40560                           ; BSR set to: 0
 40561  007060  0012               	return	
 40562  007062                     l5897:
 40563                           
 40564                           ; BSR set to: 0
 40565                           
 40566                           ; BSR set to: 0
 40567                           
 40568                           ; BSR set to: 0
 40569  007062  90D8               	bcf	status,0,c
 40570  007064  33BB               	rrcf	(___fltol@f1+3)& (0+255),f,b
 40571  007066  33BA               	rrcf	(___fltol@f1+2)& (0+255),f,b
 40572  007068  33B9               	rrcf	(___fltol@f1+1)& (0+255),f,b
 40573  00706A  33B8               	rrcf	___fltol@f1& (0+255),f,b
 40574                           
 40575                           ; BSR set to: 0
 40576  00706C  3FC1               	incfsz	___fltol@exp1& (0+255),f,b
 40577  00706E  D7F9               	goto	l5897
 40578                           
 40579                           ; BSR set to: 0
 40580  007070  D015               	goto	u52480
 40581  007072                     l5896:
 40582                           
 40583                           ; BSR set to: 0
 40584                           
 40585                           ; BSR set to: 0
 40586  007072  0E1F               	movlw	31
 40587  007074  65C1               	cpfsgt	___fltol@exp1& (0+255),b
 40588  007076  D00F               	goto	l5902
 40589                           
 40590                           ; BSR set to: 0
 40591  007078  0E00               	movlw	0
 40592  00707A  6FB8               	movwf	?___fltol& (0+255),b
 40593  00707C  0E00               	movlw	0
 40594  00707E  6FB9               	movwf	(?___fltol+1)& (0+255),b
 40595  007080  0E00               	movlw	0
 40596  007082  6FBA               	movwf	(?___fltol+2)& (0+255),b
 40597  007084  0E00               	movlw	0
 40598  007086  6FBB               	movwf	(?___fltol+3)& (0+255),b
 40599                           
 40600                           ; BSR set to: 0
 40601  007088  0012               	return	
 40602  00708A                     
 40603                           ; BSR set to: 0
 40604                           
 40605                           ; BSR set to: 0
 40606  00708A  90D8               	bcf	status,0,c
 40607  00708C  37B8               	rlcf	___fltol@f1& (0+255),f,b
 40608  00708E  37B9               	rlcf	(___fltol@f1+1)& (0+255),f,b
 40609  007090  37BA               	rlcf	(___fltol@f1+2)& (0+255),f,b
 40610  007092  37BB               	rlcf	(___fltol@f1+3)& (0+255),f,b
 40611  007094  07C1               	decf	___fltol@exp1& (0+255),f,b
 40612  007096                     l5902:
 40613                           
 40614                           ; BSR set to: 0
 40615                           
 40616                           ; BSR set to: 0
 40617  007096  51C1               	movf	___fltol@exp1& (0+255),w,b
 40618  007098  A4D8               	btfss	status,2,c
 40619  00709A  D7F7               	goto	l5903
 40620  00709C                     u52480:
 40621                           
 40622                           ; BSR set to: 0
 40623                           
 40624                           ; BSR set to: 0
 40625                           
 40626                           ; BSR set to: 0
 40627  00709C  51C0               	movf	___fltol@sign1& (0+255),w,b
 40628  00709E  B4D8               	btfsc	status,2,c
 40629  0070A0  D008               	goto	l5905
 40630                           
 40631                           ; BSR set to: 0
 40632  0070A2  1FBB               	comf	(___fltol@f1+3)& (0+255),f,b
 40633  0070A4  1FBA               	comf	(___fltol@f1+2)& (0+255),f,b
 40634  0070A6  1FB9               	comf	(___fltol@f1+1)& (0+255),f,b
 40635  0070A8  6DB8               	negf	___fltol@f1& (0+255),b
 40636  0070AA  0E00               	movlw	0
 40637  0070AC  23B9               	addwfc	(___fltol@f1+1)& (0+255),f,b
 40638  0070AE  23BA               	addwfc	(___fltol@f1+2)& (0+255),f,b
 40639  0070B0  23BB               	addwfc	(___fltol@f1+3)& (0+255),f,b
 40640  0070B2                     l5905:
 40641                           
 40642                           ; BSR set to: 0
 40643                           
 40644                           ; BSR set to: 0
 40645  0070B2  C0B8  F0B8         	movff	___fltol@f1,?___fltol
 40646  0070B6  C0B9  F0B9         	movff	___fltol@f1+1,?___fltol+1
 40647  0070BA  C0BA  F0BA         	movff	___fltol@f1+2,?___fltol+2
 40648  0070BE  C0BB  F0BB         	movff	___fltol@f1+3,?___fltol+3
 40649  0070C2  0012               	return	
 40650  0070C4                     __end_of___fltol:
 40651                           	opt stack 0
 40652                           tblptru	equ	0xFF8
 40653                           tblptrh	equ	0xFF7
 40654                           tblptrl	equ	0xFF6
 40655                           tablat	equ	0xFF5
 40656                           prodh	equ	0xFF4
 40657                           prodl	equ	0xFF3
 40658                           intcon	equ	0xFF2
 40659                           intcon2	equ	0xFF1
 40660                           indf0	equ	0xFEF
 40661                           postinc0	equ	0xFEE
 40662                           postdec0	equ	0xFED
 40663                           fsr0h	equ	0xFEA
 40664                           fsr0l	equ	0xFE9
 40665                           wreg	equ	0xFE8
 40666                           postinc1	equ	0xFE6
 40667                           postdec1	equ	0xFE5
 40668                           plusw1	equ	0xFE3
 40669                           fsr1h	equ	0xFE2
 40670                           fsr1l	equ	0xFE1
 40671                           indf2	equ	0xFDF
 40672                           postinc2	equ	0xFDE
 40673                           postdec2	equ	0xFDD
 40674                           plusw2	equ	0xFDB
 40675                           fsr2h	equ	0xFDA
 40676                           fsr2l	equ	0xFD9
 40677                           status	equ	0xFD8
 40678                           
 40679 ;; *************** function ___flneg *****************
 40680 ;; Defined at:
 40681 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flneg.c"
 40682 ;; Parameters:    Size  Location     Type
 40683 ;;  f1              4   64[BANK0 ] long 
 40684 ;; Auto vars:     Size  Location     Type
 40685 ;;		None
 40686 ;; Return value:  Size  Location     Type
 40687 ;;                  4   64[BANK0 ] long 
 40688 ;; Registers used:
 40689 ;;		wreg, status,2, status,0
 40690 ;; Tracked objects:
 40691 ;;		On entry : 0/0
 40692 ;;		On exit  : 0/0
 40693 ;;		Unchanged: 0/0
 40694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40695 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40698 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40699 ;;Total ram usage:        4 bytes
 40700 ;; Hardware stack levels used:    1
 40701 ;; Hardware stack levels required when called:    5
 40702 ;; This function calls:
 40703 ;;		Nothing
 40704 ;; This function is called by:
 40705 ;;		_readPotentiometers
 40706 ;;		_calculate_pulse_length
 40707 ;; This function uses a non-reentrant model
 40708 ;;
 40709                           
 40710                           	psect	text118
 40711  0097FA                     __ptext118:
 40712                           	opt stack 0
 40713  0097FA                     ___flneg:
 40714                           	opt stack 22
 40715                           
 40716                           ; BSR set to: 0
 40717                           ;incstack = 0
 40718  0097FA  0100               	movlb	0	; () banked
 40719  0097FC  51A0               	movf	___flneg@f1& (0+255),w,b
 40720  0097FE  11A1               	iorwf	(___flneg@f1+1)& (0+255),w,b
 40721  009800  11A2               	iorwf	(___flneg@f1+2)& (0+255),w,b
 40722  009802  11A3               	iorwf	(___flneg@f1+3)& (0+255),w,b
 40723  009804  B4D8               	btfsc	status,2,c
 40724  009806  D008               	goto	l5871
 40725                           
 40726                           ; BSR set to: 0
 40727  009808  0E00               	movlw	0
 40728  00980A  1BA0               	xorwf	___flneg@f1& (0+255),f,b
 40729  00980C  0E00               	movlw	0
 40730  00980E  1BA1               	xorwf	(___flneg@f1+1)& (0+255),f,b
 40731  009810  0E00               	movlw	0
 40732  009812  1BA2               	xorwf	(___flneg@f1+2)& (0+255),f,b
 40733  009814  0E80               	movlw	128
 40734  009816  1BA3               	xorwf	(___flneg@f1+3)& (0+255),f,b
 40735  009818                     l5871:
 40736                           
 40737                           ; BSR set to: 0
 40738                           
 40739                           ; BSR set to: 0
 40740  009818  C0A0  F0A0         	movff	___flneg@f1,?___flneg
 40741  00981C  C0A1  F0A1         	movff	___flneg@f1+1,?___flneg+1
 40742  009820  C0A2  F0A2         	movff	___flneg@f1+2,?___flneg+2
 40743  009824  C0A3  F0A3         	movff	___flneg@f1+3,?___flneg+3
 40744  009828  0012               	return	
 40745  00982A                     __end_of___flneg:
 40746                           	opt stack 0
 40747                           tblptru	equ	0xFF8
 40748                           tblptrh	equ	0xFF7
 40749                           tblptrl	equ	0xFF6
 40750                           tablat	equ	0xFF5
 40751                           prodh	equ	0xFF4
 40752                           prodl	equ	0xFF3
 40753                           intcon	equ	0xFF2
 40754                           intcon2	equ	0xFF1
 40755                           indf0	equ	0xFEF
 40756                           postinc0	equ	0xFEE
 40757                           postdec0	equ	0xFED
 40758                           fsr0h	equ	0xFEA
 40759                           fsr0l	equ	0xFE9
 40760                           wreg	equ	0xFE8
 40761                           postinc1	equ	0xFE6
 40762                           postdec1	equ	0xFE5
 40763                           plusw1	equ	0xFE3
 40764                           fsr1h	equ	0xFE2
 40765                           fsr1l	equ	0xFE1
 40766                           indf2	equ	0xFDF
 40767                           postinc2	equ	0xFDE
 40768                           postdec2	equ	0xFDD
 40769                           plusw2	equ	0xFDB
 40770                           fsr2h	equ	0xFDA
 40771                           fsr2l	equ	0xFD9
 40772                           status	equ	0xFD8
 40773                           
 40774 ;; *************** function ___flmul *****************
 40775 ;; Defined at:
 40776 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcmul.c"
 40777 ;; Parameters:    Size  Location     Type
 40778 ;;  b               4   14[BANK0 ] long 
 40779 ;;  a               4   18[BANK0 ] long 
 40780 ;; Auto vars:     Size  Location     Type
 40781 ;;  prod            4   33[BANK0 ] struct .
 40782 ;;  grs             4   28[BANK0 ] unsigned long 
 40783 ;;  temp            2   37[BANK0 ] struct .
 40784 ;;  bexp            1   32[BANK0 ] unsigned char 
 40785 ;;  aexp            1   27[BANK0 ] unsigned char 
 40786 ;;  sign            1   26[BANK0 ] unsigned char 
 40787 ;; Return value:  Size  Location     Type
 40788 ;;                  4   14[BANK0 ] unsigned char 
 40789 ;; Registers used:
 40790 ;;		wreg, status,2, status,0, prodl, prodh
 40791 ;; Tracked objects:
 40792 ;;		On entry : 0/0
 40793 ;;		On exit  : 0/0
 40794 ;;		Unchanged: 0/0
 40795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 40796 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40797 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40798 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40799 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0
 40800 ;;Total ram usage:       25 bytes
 40801 ;; Hardware stack levels used:    1
 40802 ;; Hardware stack levels required when called:    5
 40803 ;; This function calls:
 40804 ;;		Nothing
 40805 ;; This function is called by:
 40806 ;;		_readPotentiometers
 40807 ;;		_calculate_pulse_length
 40808 ;; This function uses a non-reentrant model
 40809 ;;
 40810                           
 40811                           	psect	text119
 40812  003018                     __ptext119:
 40813                           	opt stack 0
 40814  003018                     ___flmul:
 40815                           	opt stack 22
 40816                           
 40817                           ; BSR set to: 0
 40818                           ;incstack = 0
 40819  003018  0100               	movlb	0	; () banked
 40820  00301A  5171               	movf	(___flmul@b+3)& (0+255),w,b
 40821  00301C  0B80               	andlw	128
 40822  00301E  6F7A               	movwf	___flmul@sign& (0+255),b
 40823  003020  5171               	movf	(___flmul@b+3)& (0+255),w,b
 40824  003022  2571               	addwf	(___flmul@b+3)& (0+255),w,b
 40825  003024  6F80               	movwf	___flmul@bexp& (0+255),b
 40826                           
 40827                           ; BSR set to: 0
 40828  003026  BF70               	btfsc	(___flmul@b+2)& (0+255),7,b
 40829                           
 40830                           ; BSR set to: 0
 40831  003028  8180               	bsf	___flmul@bexp& (0+255),0,b
 40832                           
 40833                           ; BSR set to: 0
 40834                           
 40835                           ; BSR set to: 0
 40836  00302A  5180               	movf	___flmul@bexp& (0+255),w,b
 40837  00302C  B4D8               	btfsc	status,2,c
 40838  00302E  D00D               	goto	l6192
 40839                           
 40840                           ; BSR set to: 0
 40841  003030  2980               	incf	___flmul@bexp& (0+255),w,b
 40842  003032  A4D8               	btfss	status,2,c
 40843  003034  D008               	goto	l6193
 40844                           
 40845                           ; BSR set to: 0
 40846  003036  0E00               	movlw	0
 40847  003038  6F6E               	movwf	___flmul@b& (0+255),b
 40848  00303A  0E00               	movlw	0
 40849  00303C  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 40850  00303E  0E00               	movlw	0
 40851  003040  6F70               	movwf	(___flmul@b+2)& (0+255),b
 40852  003042  0E00               	movlw	0
 40853  003044  6F71               	movwf	(___flmul@b+3)& (0+255),b
 40854  003046                     l6193:
 40855                           
 40856                           ; BSR set to: 0
 40857                           
 40858                           ; BSR set to: 0
 40859  003046  8F70               	bsf	(___flmul@b+2)& (0+255),7,b
 40860  003048  D008               	goto	l6194
 40861  00304A                     l6192:
 40862                           
 40863                           ; BSR set to: 0
 40864                           
 40865                           ; BSR set to: 0
 40866  00304A  0E00               	movlw	0
 40867  00304C  6F6E               	movwf	___flmul@b& (0+255),b
 40868  00304E  0E00               	movlw	0
 40869  003050  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 40870  003052  0E00               	movlw	0
 40871  003054  6F70               	movwf	(___flmul@b+2)& (0+255),b
 40872  003056  0E00               	movlw	0
 40873  003058  6F71               	movwf	(___flmul@b+3)& (0+255),b
 40874  00305A                     l6194:
 40875                           
 40876                           ; BSR set to: 0
 40877                           
 40878                           ; BSR set to: 0
 40879  00305A  5175               	movf	(___flmul@a+3)& (0+255),w,b
 40880  00305C  0B80               	andlw	128
 40881  00305E  1B7A               	xorwf	___flmul@sign& (0+255),f,b
 40882                           
 40883                           ; BSR set to: 0
 40884  003060  5175               	movf	(___flmul@a+3)& (0+255),w,b
 40885  003062  2575               	addwf	(___flmul@a+3)& (0+255),w,b
 40886  003064  6F7B               	movwf	___flmul@aexp& (0+255),b
 40887                           
 40888                           ; BSR set to: 0
 40889  003066  BF74               	btfsc	(___flmul@a+2)& (0+255),7,b
 40890                           
 40891                           ; BSR set to: 0
 40892  003068  817B               	bsf	___flmul@aexp& (0+255),0,b
 40893                           
 40894                           ; BSR set to: 0
 40895                           
 40896                           ; BSR set to: 0
 40897  00306A  517B               	movf	___flmul@aexp& (0+255),w,b
 40898  00306C  B4D8               	btfsc	status,2,c
 40899  00306E  D00D               	goto	l6196
 40900                           
 40901                           ; BSR set to: 0
 40902  003070  297B               	incf	___flmul@aexp& (0+255),w,b
 40903  003072  A4D8               	btfss	status,2,c
 40904  003074  D008               	goto	l6197
 40905                           
 40906                           ; BSR set to: 0
 40907  003076  0E00               	movlw	0
 40908  003078  6F72               	movwf	___flmul@a& (0+255),b
 40909  00307A  0E00               	movlw	0
 40910  00307C  6F73               	movwf	(___flmul@a+1)& (0+255),b
 40911  00307E  0E00               	movlw	0
 40912  003080  6F74               	movwf	(___flmul@a+2)& (0+255),b
 40913  003082  0E00               	movlw	0
 40914  003084  6F75               	movwf	(___flmul@a+3)& (0+255),b
 40915  003086                     l6197:
 40916                           
 40917                           ; BSR set to: 0
 40918                           
 40919                           ; BSR set to: 0
 40920  003086  8F74               	bsf	(___flmul@a+2)& (0+255),7,b
 40921  003088  D008               	goto	l6198
 40922  00308A                     l6196:
 40923                           
 40924                           ; BSR set to: 0
 40925                           
 40926                           ; BSR set to: 0
 40927  00308A  0E00               	movlw	0
 40928  00308C  6F72               	movwf	___flmul@a& (0+255),b
 40929  00308E  0E00               	movlw	0
 40930  003090  6F73               	movwf	(___flmul@a+1)& (0+255),b
 40931  003092  0E00               	movlw	0
 40932  003094  6F74               	movwf	(___flmul@a+2)& (0+255),b
 40933  003096  0E00               	movlw	0
 40934  003098  6F75               	movwf	(___flmul@a+3)& (0+255),b
 40935  00309A                     l6198:
 40936                           
 40937                           ; BSR set to: 0
 40938  00309A  517B               	movf	___flmul@aexp& (0+255),w,b
 40939  00309C  B4D8               	btfsc	status,2,c
 40940  00309E  D003               	goto	u52300
 40941                           
 40942                           ; BSR set to: 0
 40943  0030A0  5180               	movf	___flmul@bexp& (0+255),w,b
 40944  0030A2  A4D8               	btfss	status,2,c
 40945  0030A4  D009               	goto	l6199
 40946  0030A6                     u52300:
 40947                           
 40948                           ; BSR set to: 0
 40949                           
 40950                           ; BSR set to: 0
 40951  0030A6  0E00               	movlw	0
 40952  0030A8  6F6E               	movwf	?___flmul& (0+255),b
 40953  0030AA  0E00               	movlw	0
 40954  0030AC  6F6F               	movwf	(?___flmul+1)& (0+255),b
 40955  0030AE  0E00               	movlw	0
 40956  0030B0  6F70               	movwf	(?___flmul+2)& (0+255),b
 40957  0030B2  0E00               	movlw	0
 40958  0030B4  6F71               	movwf	(?___flmul+3)& (0+255),b
 40959                           
 40960                           ; BSR set to: 0
 40961  0030B6  0012               	return	
 40962  0030B8                     l6199:
 40963                           
 40964                           ; BSR set to: 0
 40965                           
 40966                           ; BSR set to: 0
 40967  0030B8  5174               	movf	(___flmul@a+2)& (0+255),w,b
 40968  0030BA  036E               	mulwf	___flmul@b& (0+255),b
 40969  0030BC  CFF3 F085          	movff	prodl,___flmul@temp
 40970  0030C0  CFF4 F086          	movff	prodh,___flmul@temp+1
 40971                           
 40972                           ; BSR set to: 0
 40973  0030C4  5185               	movf	___flmul@temp& (0+255),w,b
 40974  0030C6  6F7C               	movwf	___flmul@grs& (0+255),b
 40975  0030C8  6B7D               	clrf	(___flmul@grs+1)& (0+255),b
 40976  0030CA  6B7E               	clrf	(___flmul@grs+2)& (0+255),b
 40977  0030CC  6B7F               	clrf	(___flmul@grs+3)& (0+255),b
 40978                           
 40979                           ; BSR set to: 0
 40980  0030CE  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 40981  0030D0  6F81               	movwf	___flmul@prod& (0+255),b
 40982  0030D2  6B82               	clrf	(___flmul@prod+1)& (0+255),b
 40983  0030D4  6B83               	clrf	(___flmul@prod+2)& (0+255),b
 40984  0030D6  6B84               	clrf	(___flmul@prod+3)& (0+255),b
 40985  0030D8  5173               	movf	(___flmul@a+1)& (0+255),w,b
 40986  0030DA  036F               	mulwf	(___flmul@b+1)& (0+255),b
 40987  0030DC  CFF3 F085          	movff	prodl,___flmul@temp
 40988  0030E0  CFF4 F086          	movff	prodh,___flmul@temp+1
 40989                           
 40990                           ; BSR set to: 0
 40991  0030E4  5185               	movf	___flmul@temp& (0+255),w,b
 40992  0030E6  277C               	addwf	___flmul@grs& (0+255),f,b
 40993  0030E8  0E00               	movlw	0
 40994  0030EA  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 40995  0030EC  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 40996  0030EE  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 40997                           
 40998                           ; BSR set to: 0
 40999  0030F0  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 41000  0030F2  2781               	addwf	___flmul@prod& (0+255),f,b
 41001  0030F4  0E00               	movlw	0
 41002  0030F6  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 41003  0030F8  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 41004  0030FA  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 41005  0030FC  5172               	movf	___flmul@a& (0+255),w,b
 41006  0030FE  0370               	mulwf	(___flmul@b+2)& (0+255),b
 41007  003100  CFF3 F085          	movff	prodl,___flmul@temp
 41008  003104  CFF4 F086          	movff	prodh,___flmul@temp+1
 41009                           
 41010                           ; BSR set to: 0
 41011  003108  5185               	movf	___flmul@temp& (0+255),w,b
 41012  00310A  277C               	addwf	___flmul@grs& (0+255),f,b
 41013  00310C  0E00               	movlw	0
 41014  00310E  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 41015  003110  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 41016  003112  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 41017                           
 41018                           ; BSR set to: 0
 41019  003114  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 41020  003116  2781               	addwf	___flmul@prod& (0+255),f,b
 41021  003118  0E00               	movlw	0
 41022  00311A  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 41023  00311C  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 41024  00311E  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 41025                           
 41026                           ; BSR set to: 0
 41027  003120  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 41028  003124  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 41029  003128  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 41030  00312C  6B7C               	clrf	___flmul@grs& (0+255),b
 41031                           
 41032                           ; BSR set to: 0
 41033  00312E  5172               	movf	___flmul@a& (0+255),w,b
 41034  003130  036F               	mulwf	(___flmul@b+1)& (0+255),b
 41035  003132  CFF3 F085          	movff	prodl,___flmul@temp
 41036  003136  CFF4 F086          	movff	prodh,___flmul@temp+1
 41037                           
 41038                           ; BSR set to: 0
 41039  00313A  5185               	movf	___flmul@temp& (0+255),w,b
 41040  00313C  277C               	addwf	___flmul@grs& (0+255),f,b
 41041  00313E  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 41042  003140  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 41043  003142  0E00               	movlw	0
 41044  003144  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 41045  003146  0E00               	movlw	0
 41046  003148  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 41047                           
 41048                           ; BSR set to: 0
 41049  00314A  5173               	movf	(___flmul@a+1)& (0+255),w,b
 41050  00314C  036E               	mulwf	___flmul@b& (0+255),b
 41051  00314E  CFF3 F085          	movff	prodl,___flmul@temp
 41052  003152  CFF4 F086          	movff	prodh,___flmul@temp+1
 41053                           
 41054                           ; BSR set to: 0
 41055  003156  5185               	movf	___flmul@temp& (0+255),w,b
 41056  003158  277C               	addwf	___flmul@grs& (0+255),f,b
 41057  00315A  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 41058  00315C  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 41059  00315E  0E00               	movlw	0
 41060  003160  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 41061  003162  0E00               	movlw	0
 41062  003164  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 41063                           
 41064                           ; BSR set to: 0
 41065  003166  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 41066  00316A  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 41067  00316E  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 41068  003172  6B7C               	clrf	___flmul@grs& (0+255),b
 41069  003174  5172               	movf	___flmul@a& (0+255),w,b
 41070  003176  036E               	mulwf	___flmul@b& (0+255),b
 41071  003178  CFF3 F085          	movff	prodl,___flmul@temp
 41072  00317C  CFF4 F086          	movff	prodh,___flmul@temp+1
 41073                           
 41074                           ; BSR set to: 0
 41075  003180  5185               	movf	___flmul@temp& (0+255),w,b
 41076  003182  277C               	addwf	___flmul@grs& (0+255),f,b
 41077  003184  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 41078  003186  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 41079  003188  0E00               	movlw	0
 41080  00318A  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 41081  00318C  0E00               	movlw	0
 41082  00318E  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 41083                           
 41084                           ; BSR set to: 0
 41085  003190  5174               	movf	(___flmul@a+2)& (0+255),w,b
 41086  003192  036F               	mulwf	(___flmul@b+1)& (0+255),b
 41087  003194  CFF3 F085          	movff	prodl,___flmul@temp
 41088  003198  CFF4 F086          	movff	prodh,___flmul@temp+1
 41089  00319C  5185               	movf	___flmul@temp& (0+255),w,b
 41090  00319E  2781               	addwf	___flmul@prod& (0+255),f,b
 41091  0031A0  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 41092  0031A2  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 41093  0031A4  0E00               	movlw	0
 41094  0031A6  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 41095  0031A8  0E00               	movlw	0
 41096  0031AA  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 41097                           
 41098                           ; BSR set to: 0
 41099  0031AC  5173               	movf	(___flmul@a+1)& (0+255),w,b
 41100  0031AE  0370               	mulwf	(___flmul@b+2)& (0+255),b
 41101  0031B0  CFF3 F085          	movff	prodl,___flmul@temp
 41102  0031B4  CFF4 F086          	movff	prodh,___flmul@temp+1
 41103                           
 41104                           ; BSR set to: 0
 41105  0031B8  5185               	movf	___flmul@temp& (0+255),w,b
 41106  0031BA  2781               	addwf	___flmul@prod& (0+255),f,b
 41107  0031BC  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 41108  0031BE  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 41109  0031C0  0E00               	movlw	0
 41110  0031C2  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 41111  0031C4  0E00               	movlw	0
 41112  0031C6  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 41113  0031C8  5174               	movf	(___flmul@a+2)& (0+255),w,b
 41114  0031CA  0370               	mulwf	(___flmul@b+2)& (0+255),b
 41115  0031CC  CFF3 F085          	movff	prodl,___flmul@temp
 41116  0031D0  CFF4 F086          	movff	prodh,___flmul@temp+1
 41117                           
 41118                           ; BSR set to: 0
 41119  0031D4  5185               	movf	___flmul@temp& (0+255),w,b
 41120  0031D6  6F76               	movwf	??___flmul& (0+255),b
 41121  0031D8  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 41122  0031DA  6F77               	movwf	(??___flmul+1)& (0+255),b
 41123  0031DC  6B78               	clrf	(??___flmul+2)& (0+255),b
 41124  0031DE  6B79               	clrf	(??___flmul+3)& (0+255),b
 41125  0031E0  C078  F079         	movff	??___flmul+2,??___flmul+3
 41126  0031E4  C077  F078         	movff	??___flmul+1,??___flmul+2
 41127  0031E8  C076  F077         	movff	??___flmul,??___flmul+1
 41128  0031EC  6B76               	clrf	??___flmul& (0+255),b
 41129  0031EE  5176               	movf	??___flmul& (0+255),w,b
 41130  0031F0  2781               	addwf	___flmul@prod& (0+255),f,b
 41131  0031F2  5177               	movf	(??___flmul+1)& (0+255),w,b
 41132  0031F4  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 41133  0031F6  5178               	movf	(??___flmul+2)& (0+255),w,b
 41134  0031F8  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 41135  0031FA  5179               	movf	(??___flmul+3)& (0+255),w,b
 41136  0031FC  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 41137                           
 41138                           ; BSR set to: 0
 41139  0031FE  C07C  F076         	movff	___flmul@grs,??___flmul
 41140  003202  C07D  F077         	movff	___flmul@grs+1,??___flmul+1
 41141  003206  C07E  F078         	movff	___flmul@grs+2,??___flmul+2
 41142  00320A  C07F  F079         	movff	___flmul@grs+3,??___flmul+3
 41143  00320E  0E19               	movlw	25
 41144  003210  D005               	goto	u52310
 41145  003212                     u52315:
 41146  003212  90D8               	bcf	status,0,c
 41147  003214  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 41148  003216  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 41149  003218  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 41150  00321A  3376               	rrcf	??___flmul& (0+255),f,b
 41151  00321C                     u52310:
 41152  00321C  2EE8               	decfsz	wreg,f,c
 41153  00321E  D7F9               	goto	u52315
 41154  003220  5176               	movf	??___flmul& (0+255),w,b
 41155  003222  2781               	addwf	___flmul@prod& (0+255),f,b
 41156  003224  5177               	movf	(??___flmul+1)& (0+255),w,b
 41157  003226  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 41158  003228  5178               	movf	(??___flmul+2)& (0+255),w,b
 41159  00322A  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 41160  00322C  5179               	movf	(??___flmul+3)& (0+255),w,b
 41161  00322E  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 41162                           
 41163                           ; BSR set to: 0
 41164  003230  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 41165  003234  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 41166  003238  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 41167  00323C  6B7C               	clrf	___flmul@grs& (0+255),b
 41168                           
 41169                           ; BSR set to: 0
 41170  00323E  517B               	movf	___flmul@aexp& (0+255),w,b
 41171  003240  C080  F076         	movff	___flmul@bexp,??___flmul
 41172  003244  6B77               	clrf	(??___flmul+1)& (0+255),b
 41173  003246  2776               	addwf	??___flmul& (0+255),f,b
 41174  003248  0E00               	movlw	0
 41175  00324A  2377               	addwfc	(??___flmul+1)& (0+255),f,b
 41176  00324C  0E82               	movlw	130
 41177  00324E  2576               	addwf	??___flmul& (0+255),w,b
 41178  003250  6F85               	movwf	___flmul@temp& (0+255),b
 41179  003252  0EFF               	movlw	255
 41180  003254  2177               	addwfc	(??___flmul+1)& (0+255),w,b
 41181  003256  6F86               	movwf	(___flmul@temp+1)& (0+255),b
 41182  003258  D00F               	goto	l6203
 41183  00325A                     
 41184                           ; BSR set to: 0
 41185                           
 41186                           ; BSR set to: 0
 41187  00325A  90D8               	bcf	status,0,c
 41188  00325C  3781               	rlcf	___flmul@prod& (0+255),f,b
 41189  00325E  3782               	rlcf	(___flmul@prod+1)& (0+255),f,b
 41190  003260  3783               	rlcf	(___flmul@prod+2)& (0+255),f,b
 41191  003262  3784               	rlcf	(___flmul@prod+3)& (0+255),f,b
 41192                           
 41193                           ; BSR set to: 0
 41194  003264  BF7F               	btfsc	(___flmul@grs+3)& (0+255),7,b
 41195                           
 41196                           ; BSR set to: 0
 41197  003266  8181               	bsf	___flmul@prod& (0+255),0,b
 41198                           
 41199                           ; BSR set to: 0
 41200  003268  90D8               	bcf	status,0,c
 41201  00326A  377C               	rlcf	___flmul@grs& (0+255),f,b
 41202  00326C  377D               	rlcf	(___flmul@grs+1)& (0+255),f,b
 41203  00326E  377E               	rlcf	(___flmul@grs+2)& (0+255),f,b
 41204  003270  377F               	rlcf	(___flmul@grs+3)& (0+255),f,b
 41205  003272  0785               	decf	___flmul@temp& (0+255),f,b
 41206  003274  A0D8               	btfss	status,0,c
 41207  003276  0786               	decf	(___flmul@temp+1)& (0+255),f,b
 41208  003278                     l6203:
 41209                           
 41210                           ; BSR set to: 0
 41211                           
 41212                           ; BSR set to: 0
 41213  003278  AF83               	btfss	(___flmul@prod+2)& (0+255),7,b
 41214  00327A  D7EF               	goto	l6204
 41215                           
 41216                           ; BSR set to: 0
 41217                           
 41218                           ; BSR set to: 0
 41219  00327C  0E00               	movlw	0
 41220  00327E  6F7B               	movwf	___flmul@aexp& (0+255),b
 41221                           
 41222                           ; BSR set to: 0
 41223  003280  AF7F               	btfss	(___flmul@grs+3)& (0+255),7,b
 41224  003282  D016               	goto	l6210
 41225                           
 41226                           ; BSR set to: 0
 41227  003284  0EFF               	movlw	255
 41228  003286  157C               	andwf	___flmul@grs& (0+255),w,b
 41229  003288  6F76               	movwf	??___flmul& (0+255),b
 41230  00328A  0EFF               	movlw	255
 41231  00328C  157D               	andwf	(___flmul@grs+1)& (0+255),w,b
 41232  00328E  6F77               	movwf	(??___flmul+1)& (0+255),b
 41233  003290  0EFF               	movlw	255
 41234  003292  157E               	andwf	(___flmul@grs+2)& (0+255),w,b
 41235  003294  6F78               	movwf	(??___flmul+2)& (0+255),b
 41236  003296  0E7F               	movlw	127
 41237  003298  157F               	andwf	(___flmul@grs+3)& (0+255),w,b
 41238  00329A  6F79               	movwf	(??___flmul+3)& (0+255),b
 41239  00329C  5176               	movf	??___flmul& (0+255),w,b
 41240  00329E  1177               	iorwf	(??___flmul+1)& (0+255),w,b
 41241  0032A0  1178               	iorwf	(??___flmul+2)& (0+255),w,b
 41242  0032A2  1179               	iorwf	(??___flmul+3)& (0+255),w,b
 41243  0032A4  A4D8               	btfss	status,2,c
 41244  0032A6  D002               	goto	u52360
 41245                           
 41246                           ; BSR set to: 0
 41247                           
 41248                           ; BSR set to: 0
 41249  0032A8  A181               	btfss	___flmul@prod& (0+255),0,b
 41250  0032AA  D002               	goto	l6210
 41251  0032AC                     u52360:
 41252                           
 41253                           ; BSR set to: 0
 41254  0032AC  0E01               	movlw	1
 41255  0032AE  6F7B               	movwf	___flmul@aexp& (0+255),b
 41256  0032B0                     l6210:
 41257                           
 41258                           ; BSR set to: 0
 41259                           
 41260                           ; BSR set to: 0
 41261                           
 41262                           ; BSR set to: 0
 41263  0032B0  517B               	movf	___flmul@aexp& (0+255),w,b
 41264  0032B2  B4D8               	btfsc	status,2,c
 41265  0032B4  D01F               	goto	l6212
 41266                           
 41267                           ; BSR set to: 0
 41268  0032B6  0E01               	movlw	1
 41269  0032B8  2781               	addwf	___flmul@prod& (0+255),f,b
 41270  0032BA  0E00               	movlw	0
 41271  0032BC  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 41272  0032BE  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 41273  0032C0  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 41274                           
 41275                           ; BSR set to: 0
 41276  0032C2  A184               	btfss	(___flmul@prod+3)& (0+255),0,b
 41277  0032C4  D017               	goto	l6212
 41278                           
 41279                           ; BSR set to: 0
 41280  0032C6  C081  F076         	movff	___flmul@prod,??___flmul
 41281  0032CA  C082  F077         	movff	___flmul@prod+1,??___flmul+1
 41282  0032CE  C083  F078         	movff	___flmul@prod+2,??___flmul+2
 41283  0032D2  C084  F079         	movff	___flmul@prod+3,??___flmul+3
 41284  0032D6  3579               	rlcf	(??___flmul+3)& (0+255),w,b
 41285  0032D8  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 41286  0032DA  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 41287  0032DC  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 41288  0032DE  3376               	rrcf	??___flmul& (0+255),f,b
 41289  0032E0  C076  F081         	movff	??___flmul,___flmul@prod
 41290  0032E4  C077  F082         	movff	??___flmul+1,___flmul@prod+1
 41291  0032E8  C078  F083         	movff	??___flmul+2,___flmul@prod+2
 41292  0032EC  C079  F084         	movff	??___flmul+3,___flmul@prod+3
 41293                           
 41294                           ; BSR set to: 0
 41295  0032F0  4B85               	infsnz	___flmul@temp& (0+255),f,b
 41296  0032F2  2B86               	incf	(___flmul@temp+1)& (0+255),f,b
 41297  0032F4                     l6212:
 41298                           
 41299                           ; BSR set to: 0
 41300                           
 41301                           ; BSR set to: 0
 41302                           
 41303                           ; BSR set to: 0
 41304  0032F4  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 41305  0032F6  D00D               	goto	l6213
 41306  0032F8  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 41307  0032FA  E103               	bnz	u52390
 41308  0032FC  2985               	incf	___flmul@temp& (0+255),w,b
 41309  0032FE  A0D8               	btfss	status,0,c
 41310  003300  D008               	goto	l6213
 41311  003302                     u52390:
 41312                           
 41313                           ; BSR set to: 0
 41314  003302  0E00               	movlw	0
 41315  003304  6F81               	movwf	___flmul@prod& (0+255),b
 41316  003306  0E00               	movlw	0
 41317  003308  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 41318  00330A  0E80               	movlw	128
 41319  00330C  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 41320  00330E  0E7F               	movlw	127
 41321  003310  D020               	goto	L22
 41322  003312                     l6213:
 41323                           
 41324                           ; BSR set to: 0
 41325                           
 41326                           ; BSR set to: 0
 41327  003312  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 41328  003314  D005               	goto	u52400
 41329  003316  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 41330  003318  E10E               	bnz	l6215
 41331  00331A  0585               	decf	___flmul@temp& (0+255),w,b
 41332  00331C  B0D8               	btfsc	status,0,c
 41333  00331E  D00B               	goto	l6215
 41334  003320                     u52400:
 41335                           
 41336                           ; BSR set to: 0
 41337  003320  0E00               	movlw	0
 41338  003322  6F81               	movwf	___flmul@prod& (0+255),b
 41339  003324  0E00               	movlw	0
 41340  003326  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 41341  003328  0E00               	movlw	0
 41342  00332A  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 41343  00332C  0E00               	movlw	0
 41344  00332E  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 41345  003330  0E00               	movlw	0
 41346  003332  6F7A               	movwf	___flmul@sign& (0+255),b
 41347  003334  D00F               	goto	l6216
 41348  003336                     l6215:
 41349                           
 41350                           ; BSR set to: 0
 41351  003336  C085  F080         	movff	___flmul@temp,___flmul@bexp
 41352                           
 41353                           ; BSR set to: 0
 41354  00333A  0EFF               	movlw	255
 41355  00333C  1781               	andwf	___flmul@prod& (0+255),f,b
 41356  00333E  0EFF               	movlw	255
 41357  003340  1782               	andwf	(___flmul@prod+1)& (0+255),f,b
 41358  003342  0E7F               	movlw	127
 41359  003344  1783               	andwf	(___flmul@prod+2)& (0+255),f,b
 41360  003346  0E00               	movlw	0
 41361  003348  1784               	andwf	(___flmul@prod+3)& (0+255),f,b
 41362                           
 41363                           ; BSR set to: 0
 41364  00334A  B180               	btfsc	___flmul@bexp& (0+255),0,b
 41365                           
 41366                           ; BSR set to: 0
 41367  00334C  8F83               	bsf	(___flmul@prod+2)& (0+255),7,b
 41368                           
 41369                           ; BSR set to: 0
 41370                           
 41371                           ; BSR set to: 0
 41372  00334E  90D8               	bcf	status,0,c
 41373  003350  3180               	rrcf	___flmul@bexp& (0+255),w,b
 41374  003352                     L22:
 41375  003352  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 41376  003354                     l6216:
 41377                           
 41378                           ; BSR set to: 0
 41379                           
 41380                           ; BSR set to: 0
 41381                           
 41382                           ; BSR set to: 0
 41383  003354  517A               	movf	___flmul@sign& (0+255),w,b
 41384  003356  1384               	iorwf	(___flmul@prod+3)& (0+255),f,b
 41385                           
 41386                           ; BSR set to: 0
 41387  003358  C081  F06E         	movff	___flmul@prod,?___flmul
 41388  00335C  C082  F06F         	movff	___flmul@prod+1,?___flmul+1
 41389  003360  C083  F070         	movff	___flmul@prod+2,?___flmul+2
 41390  003364  C084  F071         	movff	___flmul@prod+3,?___flmul+3
 41391  003368  0012               	return	
 41392  00336A                     __end_of___flmul:
 41393                           	opt stack 0
 41394                           tblptru	equ	0xFF8
 41395                           tblptrh	equ	0xFF7
 41396                           tblptrl	equ	0xFF6
 41397                           tablat	equ	0xFF5
 41398                           prodh	equ	0xFF4
 41399                           prodl	equ	0xFF3
 41400                           intcon	equ	0xFF2
 41401                           intcon2	equ	0xFF1
 41402                           indf0	equ	0xFEF
 41403                           postinc0	equ	0xFEE
 41404                           postdec0	equ	0xFED
 41405                           fsr0h	equ	0xFEA
 41406                           fsr0l	equ	0xFE9
 41407                           wreg	equ	0xFE8
 41408                           postinc1	equ	0xFE6
 41409                           postdec1	equ	0xFE5
 41410                           plusw1	equ	0xFE3
 41411                           fsr1h	equ	0xFE2
 41412                           fsr1l	equ	0xFE1
 41413                           indf2	equ	0xFDF
 41414                           postinc2	equ	0xFDE
 41415                           postdec2	equ	0xFDD
 41416                           plusw2	equ	0xFDB
 41417                           fsr2h	equ	0xFDA
 41418                           fsr2l	equ	0xFD9
 41419                           status	equ	0xFD8
 41420                           
 41421 ;; *************** function ___fladd *****************
 41422 ;; Defined at:
 41423 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
 41424 ;; Parameters:    Size  Location     Type
 41425 ;;  b               4   68[BANK0 ] unsigned char 
 41426 ;;  a               4   72[BANK0 ] unsigned char 
 41427 ;; Auto vars:     Size  Location     Type
 41428 ;;  grs             1   87[BANK0 ] unsigned char 
 41429 ;;  bexp            1   86[BANK0 ] unsigned char 
 41430 ;;  aexp            1   85[BANK0 ] unsigned char 
 41431 ;;  signs           1   84[BANK0 ] unsigned char 
 41432 ;; Return value:  Size  Location     Type
 41433 ;;                  4   68[BANK0 ] unsigned char 
 41434 ;; Registers used:
 41435 ;;		wreg, status,2, status,0
 41436 ;; Tracked objects:
 41437 ;;		On entry : 0/0
 41438 ;;		On exit  : 0/0
 41439 ;;		Unchanged: 0/0
 41440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 41441 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41442 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41443 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41444 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
 41445 ;;Total ram usage:       20 bytes
 41446 ;; Hardware stack levels used:    1
 41447 ;; Hardware stack levels required when called:    5
 41448 ;; This function calls:
 41449 ;;		Nothing
 41450 ;; This function is called by:
 41451 ;;		_readPotentiometers
 41452 ;;		_calculate_pulse_length
 41453 ;; This function uses a non-reentrant model
 41454 ;;
 41455                           
 41456                           	psect	text120
 41457  00336A                     __ptext120:
 41458                           	opt stack 0
 41459  00336A                     ___fladd:
 41460                           	opt stack 22
 41461                           
 41462                           ; BSR set to: 0
 41463                           ;incstack = 0
 41464  00336A  0100               	movlb	0	; () banked
 41465  00336C  51A7               	movf	(___fladd@b+3)& (0+255),w,b
 41466  00336E  0B80               	andlw	128
 41467  003370  6FB4               	movwf	___fladd@signs& (0+255),b
 41468  003372  51A7               	movf	(___fladd@b+3)& (0+255),w,b
 41469  003374  25A7               	addwf	(___fladd@b+3)& (0+255),w,b
 41470  003376  6FB6               	movwf	___fladd@bexp& (0+255),b
 41471                           
 41472                           ; BSR set to: 0
 41473  003378  BFA6               	btfsc	(___fladd@b+2)& (0+255),7,b
 41474                           
 41475                           ; BSR set to: 0
 41476  00337A  81B6               	bsf	___fladd@bexp& (0+255),0,b
 41477                           
 41478                           ; BSR set to: 0
 41479                           
 41480                           ; BSR set to: 0
 41481  00337C  51B6               	movf	___fladd@bexp& (0+255),w,b
 41482  00337E  B4D8               	btfsc	status,2,c
 41483  003380  D00D               	goto	l6101
 41484                           
 41485                           ; BSR set to: 0
 41486  003382  29B6               	incf	___fladd@bexp& (0+255),w,b
 41487  003384  A4D8               	btfss	status,2,c
 41488  003386  D008               	goto	l6102
 41489                           
 41490                           ; BSR set to: 0
 41491  003388  0E00               	movlw	0
 41492  00338A  6FA4               	movwf	___fladd@b& (0+255),b
 41493  00338C  0E00               	movlw	0
 41494  00338E  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 41495  003390  0E00               	movlw	0
 41496  003392  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 41497  003394  0E00               	movlw	0
 41498  003396  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 41499  003398                     l6102:
 41500                           
 41501                           ; BSR set to: 0
 41502                           
 41503                           ; BSR set to: 0
 41504  003398  8FA6               	bsf	(___fladd@b+2)& (0+255),7,b
 41505  00339A  D006               	goto	L23
 41506  00339C                     l6101:
 41507                           
 41508                           ; BSR set to: 0
 41509                           
 41510                           ; BSR set to: 0
 41511  00339C  0E00               	movlw	0
 41512  00339E  6FA4               	movwf	___fladd@b& (0+255),b
 41513  0033A0  0E00               	movlw	0
 41514  0033A2  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 41515  0033A4  0E00               	movlw	0
 41516  0033A6  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 41517  0033A8                     L23:
 41518  0033A8  0E00               	movlw	0
 41519  0033AA  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 41520                           
 41521                           ; BSR set to: 0
 41522                           
 41523                           ; BSR set to: 0
 41524  0033AC  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 41525  0033AE  0B80               	andlw	128
 41526  0033B0  6FB5               	movwf	___fladd@aexp& (0+255),b
 41527                           
 41528                           ; BSR set to: 0
 41529  0033B2  51B4               	movf	___fladd@signs& (0+255),w,b
 41530  0033B4  19B5               	xorwf	___fladd@aexp& (0+255),w,b
 41531  0033B6  A4D8               	btfss	status,2,c
 41532                           
 41533                           ; BSR set to: 0
 41534  0033B8  8DB4               	bsf	___fladd@signs& (0+255),6,b
 41535                           
 41536                           ; BSR set to: 0
 41537                           
 41538                           ; BSR set to: 0
 41539  0033BA  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 41540  0033BC  25AB               	addwf	(___fladd@a+3)& (0+255),w,b
 41541  0033BE  6FB5               	movwf	___fladd@aexp& (0+255),b
 41542                           
 41543                           ; BSR set to: 0
 41544  0033C0  BFAA               	btfsc	(___fladd@a+2)& (0+255),7,b
 41545                           
 41546                           ; BSR set to: 0
 41547  0033C2  81B5               	bsf	___fladd@aexp& (0+255),0,b
 41548                           
 41549                           ; BSR set to: 0
 41550                           
 41551                           ; BSR set to: 0
 41552  0033C4  51B5               	movf	___fladd@aexp& (0+255),w,b
 41553  0033C6  B4D8               	btfsc	status,2,c
 41554  0033C8  D00D               	goto	l6106
 41555                           
 41556                           ; BSR set to: 0
 41557  0033CA  29B5               	incf	___fladd@aexp& (0+255),w,b
 41558  0033CC  A4D8               	btfss	status,2,c
 41559  0033CE  D008               	goto	l6107
 41560                           
 41561                           ; BSR set to: 0
 41562  0033D0  0E00               	movlw	0
 41563  0033D2  6FA8               	movwf	___fladd@a& (0+255),b
 41564  0033D4  0E00               	movlw	0
 41565  0033D6  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 41566  0033D8  0E00               	movlw	0
 41567  0033DA  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 41568  0033DC  0E00               	movlw	0
 41569  0033DE  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 41570  0033E0                     l6107:
 41571                           
 41572                           ; BSR set to: 0
 41573                           
 41574                           ; BSR set to: 0
 41575  0033E0  8FAA               	bsf	(___fladd@a+2)& (0+255),7,b
 41576  0033E2  D006               	goto	L24
 41577  0033E4                     l6106:
 41578                           
 41579                           ; BSR set to: 0
 41580                           
 41581                           ; BSR set to: 0
 41582  0033E4  0E00               	movlw	0
 41583  0033E6  6FA8               	movwf	___fladd@a& (0+255),b
 41584  0033E8  0E00               	movlw	0
 41585  0033EA  6FA9               	movwf	(___fladd@a+1)& (0+255),b
 41586  0033EC  0E00               	movlw	0
 41587  0033EE  6FAA               	movwf	(___fladd@a+2)& (0+255),b
 41588  0033F0                     L24:
 41589  0033F0  0E00               	movlw	0
 41590  0033F2  6FAB               	movwf	(___fladd@a+3)& (0+255),b
 41591                           
 41592                           ; BSR set to: 0
 41593                           
 41594                           ; BSR set to: 0
 41595  0033F4  51B6               	movf	___fladd@bexp& (0+255),w,b
 41596  0033F6  5DB5               	subwf	___fladd@aexp& (0+255),w,b
 41597  0033F8  B0D8               	btfsc	status,0,c
 41598  0033FA  D022               	goto	l6109
 41599                           
 41600                           ; BSR set to: 0
 41601  0033FC  ADB4               	btfss	___fladd@signs& (0+255),6,b
 41602  0033FE  D002               	goto	l6110
 41603                           
 41604                           ; BSR set to: 0
 41605  003400  0E80               	movlw	128
 41606  003402  1BB4               	xorwf	___fladd@signs& (0+255),f,b
 41607  003404                     l6110:
 41608                           
 41609                           ; BSR set to: 0
 41610                           
 41611                           ; BSR set to: 0
 41612  003404  C0B6  F0B7         	movff	___fladd@bexp,___fladd@grs
 41613                           
 41614                           ; BSR set to: 0
 41615  003408  C0B5  F0B6         	movff	___fladd@aexp,___fladd@bexp
 41616                           
 41617                           ; BSR set to: 0
 41618  00340C  C0B7  F0B5         	movff	___fladd@grs,___fladd@aexp
 41619                           
 41620                           ; BSR set to: 0
 41621  003410  C0A4  F0B7         	movff	___fladd@b,___fladd@grs
 41622                           
 41623                           ; BSR set to: 0
 41624  003414  C0A8  F0A4         	movff	___fladd@a,___fladd@b
 41625                           
 41626                           ; BSR set to: 0
 41627  003418  C0B7  F0A8         	movff	___fladd@grs,___fladd@a
 41628                           
 41629                           ; BSR set to: 0
 41630  00341C  C0A5  F0B7         	movff	___fladd@b+1,___fladd@grs
 41631                           
 41632                           ; BSR set to: 0
 41633  003420  C0A9  F0A5         	movff	___fladd@a+1,___fladd@b+1
 41634                           
 41635                           ; BSR set to: 0
 41636  003424  C0B7  F0A9         	movff	___fladd@grs,___fladd@a+1
 41637                           
 41638                           ; BSR set to: 0
 41639  003428  C0A6  F0B7         	movff	___fladd@b+2,___fladd@grs
 41640                           
 41641                           ; BSR set to: 0
 41642  00342C  C0AA  F0A6         	movff	___fladd@a+2,___fladd@b+2
 41643                           
 41644                           ; BSR set to: 0
 41645  003430  C0B7  F0AA         	movff	___fladd@grs,___fladd@a+2
 41646                           
 41647                           ; BSR set to: 0
 41648  003434  C0A7  F0B7         	movff	___fladd@b+3,___fladd@grs
 41649                           
 41650                           ; BSR set to: 0
 41651  003438  C0AB  F0A7         	movff	___fladd@a+3,___fladd@b+3
 41652                           
 41653                           ; BSR set to: 0
 41654  00343C  C0B7  F0AB         	movff	___fladd@grs,___fladd@a+3
 41655  003440                     l6109:
 41656                           
 41657                           ; BSR set to: 0
 41658                           
 41659                           ; BSR set to: 0
 41660  003440  0E00               	movlw	0
 41661  003442  6FB7               	movwf	___fladd@grs& (0+255),b
 41662                           
 41663                           ; BSR set to: 0
 41664  003444  51B6               	movf	___fladd@bexp& (0+255),w,b
 41665  003446  6FAC               	movwf	??___fladd& (0+255),b
 41666  003448  6BAD               	clrf	(??___fladd+1)& (0+255),b
 41667  00344A  1FAC               	comf	??___fladd& (0+255),f,b
 41668  00344C  1FAD               	comf	(??___fladd+1)& (0+255),f,b
 41669  00344E  4BAC               	infsnz	??___fladd& (0+255),f,b
 41670  003450  2BAD               	incf	(??___fladd+1)& (0+255),f,b
 41671  003452  51B5               	movf	___fladd@aexp& (0+255),w,b
 41672  003454  6FAE               	movwf	(??___fladd+2)& (0+255),b
 41673  003456  6BAF               	clrf	(??___fladd+3)& (0+255),b
 41674  003458  51AC               	movf	??___fladd& (0+255),w,b
 41675  00345A  27AE               	addwf	(??___fladd+2)& (0+255),f,b
 41676  00345C  51AD               	movf	(??___fladd+1)& (0+255),w,b
 41677  00345E  23AF               	addwfc	(??___fladd+3)& (0+255),f,b
 41678  003460  BFAF               	btfsc	(??___fladd+3)& (0+255),7,b
 41679  003462  D02C               	goto	l6113
 41680  003464  51AF               	movf	(??___fladd+3)& (0+255),w,b
 41681  003466  E104               	bnz	u51930
 41682  003468  0E1A               	movlw	26
 41683  00346A  5DAE               	subwf	(??___fladd+2)& (0+255),w,b
 41684  00346C  A0D8               	btfss	status,0,c
 41685  00346E  D026               	goto	l6113
 41686  003470                     u51930:
 41687                           
 41688                           ; BSR set to: 0
 41689  003470  51A4               	movf	___fladd@b& (0+255),w,b
 41690  003472  11A5               	iorwf	(___fladd@b+1)& (0+255),w,b
 41691  003474  11A6               	iorwf	(___fladd@b+2)& (0+255),w,b
 41692  003476  11A7               	iorwf	(___fladd@b+3)& (0+255),w,b
 41693  003478  B4D8               	btfsc	status,2,c
 41694  00347A  D002               	goto	u51940
 41695  00347C  0E01               	movlw	1
 41696  00347E  D001               	goto	u51950
 41697  003480                     u51940:
 41698  003480  0E00               	movlw	0
 41699  003482                     u51950:
 41700  003482  6FB7               	movwf	___fladd@grs& (0+255),b
 41701                           
 41702                           ; BSR set to: 0
 41703  003484  0E00               	movlw	0
 41704  003486  6FA4               	movwf	___fladd@b& (0+255),b
 41705  003488  0E00               	movlw	0
 41706  00348A  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 41707  00348C  0E00               	movlw	0
 41708  00348E  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 41709  003490  0E00               	movlw	0
 41710  003492  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 41711                           
 41712                           ; BSR set to: 0
 41713  003494  C0B5  F0B6         	movff	___fladd@aexp,___fladd@bexp
 41714  003498  D015               	goto	u51980
 41715  00349A                     l6114:
 41716                           
 41717                           ; BSR set to: 0
 41718  00349A  A1B7               	btfss	___fladd@grs& (0+255),0,b
 41719  00349C  D005               	goto	l6115
 41720                           
 41721                           ; BSR set to: 0
 41722  00349E  90D8               	bcf	status,0,c
 41723  0034A0  31B7               	rrcf	___fladd@grs& (0+255),w,b
 41724  0034A2  0901               	iorlw	1
 41725  0034A4  6FB7               	movwf	___fladd@grs& (0+255),b
 41726  0034A6  D002               	goto	l6116
 41727  0034A8                     l6115:
 41728                           
 41729                           ; BSR set to: 0
 41730                           
 41731                           ; BSR set to: 0
 41732  0034A8  90D8               	bcf	status,0,c
 41733  0034AA  33B7               	rrcf	___fladd@grs& (0+255),f,b
 41734  0034AC                     l6116:
 41735                           
 41736                           ; BSR set to: 0
 41737                           
 41738                           ; BSR set to: 0
 41739  0034AC  B1A4               	btfsc	___fladd@b& (0+255),0,b
 41740                           
 41741                           ; BSR set to: 0
 41742  0034AE  8FB7               	bsf	___fladd@grs& (0+255),7,b
 41743                           
 41744                           ; BSR set to: 0
 41745                           
 41746                           ; BSR set to: 0
 41747  0034B0  35A7               	rlcf	(___fladd@b+3)& (0+255),w,b
 41748  0034B2  33A7               	rrcf	(___fladd@b+3)& (0+255),f,b
 41749  0034B4  33A6               	rrcf	(___fladd@b+2)& (0+255),f,b
 41750  0034B6  33A5               	rrcf	(___fladd@b+1)& (0+255),f,b
 41751  0034B8  33A4               	rrcf	___fladd@b& (0+255),f,b
 41752                           
 41753                           ; BSR set to: 0
 41754  0034BA  2BB6               	incf	___fladd@bexp& (0+255),f,b
 41755  0034BC                     l6113:
 41756                           
 41757                           ; BSR set to: 0
 41758  0034BC  51B5               	movf	___fladd@aexp& (0+255),w,b
 41759  0034BE  5DB6               	subwf	___fladd@bexp& (0+255),w,b
 41760  0034C0  A0D8               	btfss	status,0,c
 41761  0034C2  D7EB               	goto	l6114
 41762  0034C4                     u51980:
 41763                           
 41764                           ; BSR set to: 0
 41765                           
 41766                           ; BSR set to: 0
 41767  0034C4  BDB4               	btfsc	___fladd@signs& (0+255),6,b
 41768  0034C6  D029               	goto	l6119
 41769                           
 41770                           ; BSR set to: 0
 41771  0034C8  51B6               	movf	___fladd@bexp& (0+255),w,b
 41772  0034CA  A4D8               	btfss	status,2,c
 41773  0034CC  D009               	goto	l6120
 41774                           
 41775                           ; BSR set to: 0
 41776  0034CE  0E00               	movlw	0
 41777  0034D0  6FA4               	movwf	?___fladd& (0+255),b
 41778  0034D2  0E00               	movlw	0
 41779  0034D4  6FA5               	movwf	(?___fladd+1)& (0+255),b
 41780  0034D6  0E00               	movlw	0
 41781  0034D8  6FA6               	movwf	(?___fladd+2)& (0+255),b
 41782  0034DA  0E00               	movlw	0
 41783  0034DC  6FA7               	movwf	(?___fladd+3)& (0+255),b
 41784                           
 41785                           ; BSR set to: 0
 41786  0034DE  0012               	return	
 41787  0034E0                     l6120:
 41788                           
 41789                           ; BSR set to: 0
 41790                           
 41791                           ; BSR set to: 0
 41792  0034E0  51A8               	movf	___fladd@a& (0+255),w,b
 41793  0034E2  27A4               	addwf	___fladd@b& (0+255),f,b
 41794  0034E4  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 41795  0034E6  23A5               	addwfc	(___fladd@b+1)& (0+255),f,b
 41796  0034E8  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 41797  0034EA  23A6               	addwfc	(___fladd@b+2)& (0+255),f,b
 41798  0034EC  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 41799  0034EE  23A7               	addwfc	(___fladd@b+3)& (0+255),f,b
 41800                           
 41801                           ; BSR set to: 0
 41802  0034F0  A1A7               	btfss	(___fladd@b+3)& (0+255),0,b
 41803  0034F2  D083               	goto	u52110
 41804                           
 41805                           ; BSR set to: 0
 41806  0034F4  A1B7               	btfss	___fladd@grs& (0+255),0,b
 41807  0034F6  D006               	goto	l6123
 41808                           
 41809                           ; BSR set to: 0
 41810  0034F8  90D8               	bcf	status,0,c
 41811  0034FA  33B7               	rrcf	___fladd@grs& (0+255),f,b
 41812  0034FC  51B7               	movf	___fladd@grs& (0+255),w,b
 41813  0034FE  0901               	iorlw	1
 41814  003500  6FB7               	movwf	___fladd@grs& (0+255),b
 41815  003502  D002               	goto	l6124
 41816  003504                     l6123:
 41817                           
 41818                           ; BSR set to: 0
 41819                           
 41820                           ; BSR set to: 0
 41821  003504  90D8               	bcf	status,0,c
 41822  003506  33B7               	rrcf	___fladd@grs& (0+255),f,b
 41823  003508                     l6124:
 41824                           
 41825                           ; BSR set to: 0
 41826                           
 41827                           ; BSR set to: 0
 41828  003508  B1A4               	btfsc	___fladd@b& (0+255),0,b
 41829                           
 41830                           ; BSR set to: 0
 41831  00350A  8FB7               	bsf	___fladd@grs& (0+255),7,b
 41832                           
 41833                           ; BSR set to: 0
 41834                           
 41835                           ; BSR set to: 0
 41836  00350C  35A7               	rlcf	(___fladd@b+3)& (0+255),w,b
 41837  00350E  33A7               	rrcf	(___fladd@b+3)& (0+255),f,b
 41838  003510  33A6               	rrcf	(___fladd@b+2)& (0+255),f,b
 41839  003512  33A5               	rrcf	(___fladd@b+1)& (0+255),f,b
 41840  003514  33A4               	rrcf	___fladd@b& (0+255),f,b
 41841                           
 41842                           ; BSR set to: 0
 41843  003516  2BB6               	incf	___fladd@bexp& (0+255),f,b
 41844                           
 41845                           ; BSR set to: 0
 41846  003518  D070               	goto	u52110
 41847  00351A                     l6119:
 41848                           
 41849                           ; BSR set to: 0
 41850                           
 41851                           ; BSR set to: 0
 41852  00351A  51A8               	movf	___fladd@a& (0+255),w,b
 41853  00351C  5DA4               	subwf	___fladd@b& (0+255),w,b
 41854  00351E  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 41855  003520  59A5               	subwfb	(___fladd@b+1)& (0+255),w,b
 41856  003522  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 41857  003524  59A6               	subwfb	(___fladd@b+2)& (0+255),w,b
 41858  003526  51A7               	movf	(___fladd@b+3)& (0+255),w,b
 41859  003528  0A80               	xorlw	128
 41860  00352A  6FAC               	movwf	??___fladd& (0+255),b
 41861  00352C  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 41862  00352E  0A80               	xorlw	128
 41863  003530  59AC               	subwfb	??___fladd& (0+255),w,b
 41864  003532  B0D8               	btfsc	status,0,c
 41865  003534  D036               	goto	l6127
 41866                           
 41867                           ; BSR set to: 0
 41868  003536  C0A4  F0AC         	movff	___fladd@b,??___fladd
 41869  00353A  C0A5  F0AD         	movff	___fladd@b+1,??___fladd+1
 41870  00353E  C0A6  F0AE         	movff	___fladd@b+2,??___fladd+2
 41871  003542  C0A7  F0AF         	movff	___fladd@b+3,??___fladd+3
 41872  003546  1FAC               	comf	??___fladd& (0+255),f,b
 41873  003548  1FAD               	comf	(??___fladd+1)& (0+255),f,b
 41874  00354A  1FAE               	comf	(??___fladd+2)& (0+255),f,b
 41875  00354C  1FAF               	comf	(??___fladd+3)& (0+255),f,b
 41876  00354E  2BAC               	incf	??___fladd& (0+255),f,b
 41877  003550  0E00               	movlw	0
 41878  003552  23AD               	addwfc	(??___fladd+1)& (0+255),f,b
 41879  003554  23AE               	addwfc	(??___fladd+2)& (0+255),f,b
 41880  003556  23AF               	addwfc	(??___fladd+3)& (0+255),f,b
 41881  003558  51A8               	movf	___fladd@a& (0+255),w,b
 41882  00355A  25AC               	addwf	??___fladd& (0+255),w,b
 41883  00355C  6FB0               	movwf	(??___fladd+4)& (0+255),b
 41884  00355E  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 41885  003560  21AD               	addwfc	(??___fladd+1)& (0+255),w,b
 41886  003562  6FB1               	movwf	(??___fladd+5)& (0+255),b
 41887  003564  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 41888  003566  21AE               	addwfc	(??___fladd+2)& (0+255),w,b
 41889  003568  6FB2               	movwf	(??___fladd+6)& (0+255),b
 41890  00356A  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 41891  00356C  21AF               	addwfc	(??___fladd+3)& (0+255),w,b
 41892  00356E  6FB3               	movwf	(??___fladd+7)& (0+255),b
 41893  003570  0EFF               	movlw	255
 41894  003572  25B0               	addwf	(??___fladd+4)& (0+255),w,b
 41895  003574  6FA4               	movwf	___fladd@b& (0+255),b
 41896  003576  0EFF               	movlw	255
 41897  003578  21B1               	addwfc	(??___fladd+5)& (0+255),w,b
 41898  00357A  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 41899  00357C  0EFF               	movlw	255
 41900  00357E  21B2               	addwfc	(??___fladd+6)& (0+255),w,b
 41901  003580  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 41902  003582  0EFF               	movlw	255
 41903  003584  21B3               	addwfc	(??___fladd+7)& (0+255),w,b
 41904  003586  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 41905  003588  0E80               	movlw	128
 41906  00358A  1BB4               	xorwf	___fladd@signs& (0+255),f,b
 41907                           
 41908                           ; BSR set to: 0
 41909  00358C  6DB7               	negf	___fladd@grs& (0+255),b
 41910                           
 41911                           ; BSR set to: 0
 41912  00358E  51B7               	movf	___fladd@grs& (0+255),w,b
 41913  003590  A4D8               	btfss	status,2,c
 41914  003592  D00F               	goto	l6129
 41915                           
 41916                           ; BSR set to: 0
 41917  003594  0E01               	movlw	1
 41918  003596  27A4               	addwf	___fladd@b& (0+255),f,b
 41919  003598  0E00               	movlw	0
 41920  00359A  23A5               	addwfc	(___fladd@b+1)& (0+255),f,b
 41921  00359C  23A6               	addwfc	(___fladd@b+2)& (0+255),f,b
 41922  00359E  23A7               	addwfc	(___fladd@b+3)& (0+255),f,b
 41923                           
 41924                           ; BSR set to: 0
 41925  0035A0  D008               	goto	l6129
 41926  0035A2                     l6127:
 41927                           
 41928                           ; BSR set to: 0
 41929                           
 41930                           ; BSR set to: 0
 41931  0035A2  51A8               	movf	___fladd@a& (0+255),w,b
 41932  0035A4  5FA4               	subwf	___fladd@b& (0+255),f,b
 41933  0035A6  51A9               	movf	(___fladd@a+1)& (0+255),w,b
 41934  0035A8  5BA5               	subwfb	(___fladd@b+1)& (0+255),f,b
 41935  0035AA  51AA               	movf	(___fladd@a+2)& (0+255),w,b
 41936  0035AC  5BA6               	subwfb	(___fladd@b+2)& (0+255),f,b
 41937  0035AE  51AB               	movf	(___fladd@a+3)& (0+255),w,b
 41938  0035B0  5BA7               	subwfb	(___fladd@b+3)& (0+255),f,b
 41939  0035B2                     l6129:
 41940                           
 41941                           ; BSR set to: 0
 41942  0035B2  51A4               	movf	___fladd@b& (0+255),w,b
 41943  0035B4  11A5               	iorwf	(___fladd@b+1)& (0+255),w,b
 41944  0035B6  11A6               	iorwf	(___fladd@b+2)& (0+255),w,b
 41945  0035B8  11A7               	iorwf	(___fladd@b+3)& (0+255),w,b
 41946  0035BA  A4D8               	btfss	status,2,c
 41947  0035BC  D01C               	goto	l6136
 41948                           
 41949                           ; BSR set to: 0
 41950  0035BE  51B7               	movf	___fladd@grs& (0+255),w,b
 41951  0035C0  A4D8               	btfss	status,2,c
 41952  0035C2  D019               	goto	l6136
 41953                           
 41954                           ; BSR set to: 0
 41955  0035C4  0E00               	movlw	0
 41956  0035C6  6FA4               	movwf	?___fladd& (0+255),b
 41957  0035C8  0E00               	movlw	0
 41958  0035CA  6FA5               	movwf	(?___fladd+1)& (0+255),b
 41959  0035CC  0E00               	movlw	0
 41960  0035CE  6FA6               	movwf	(?___fladd+2)& (0+255),b
 41961  0035D0  0E00               	movlw	0
 41962  0035D2  6FA7               	movwf	(?___fladd+3)& (0+255),b
 41963                           
 41964                           ; BSR set to: 0
 41965  0035D4  0012               	return	
 41966  0035D6                     
 41967                           ; BSR set to: 0
 41968                           
 41969                           ; BSR set to: 0
 41970  0035D6  90D8               	bcf	status,0,c
 41971  0035D8  37A4               	rlcf	___fladd@b& (0+255),f,b
 41972  0035DA  37A5               	rlcf	(___fladd@b+1)& (0+255),f,b
 41973  0035DC  37A6               	rlcf	(___fladd@b+2)& (0+255),f,b
 41974  0035DE  37A7               	rlcf	(___fladd@b+3)& (0+255),f,b
 41975                           
 41976                           ; BSR set to: 0
 41977  0035E0  BFB7               	btfsc	___fladd@grs& (0+255),7,b
 41978                           
 41979                           ; BSR set to: 0
 41980  0035E2  81A4               	bsf	___fladd@b& (0+255),0,b
 41981                           
 41982                           ; BSR set to: 0
 41983                           
 41984                           ; BSR set to: 0
 41985  0035E4  A1B7               	btfss	___fladd@grs& (0+255),0,b
 41986  0035E6  D002               	goto	l6134
 41987                           
 41988                           ; BSR set to: 0
 41989  0035E8  80D8               	bsf	status,0,c
 41990  0035EA  D001               	goto	L25
 41991  0035EC                     l6134:
 41992                           
 41993                           ; BSR set to: 0
 41994                           
 41995                           ; BSR set to: 0
 41996  0035EC  90D8               	bcf	status,0,c
 41997  0035EE                     L25:
 41998  0035EE  37B7               	rlcf	___fladd@grs& (0+255),f,b
 41999                           
 42000                           ; BSR set to: 0
 42001                           
 42002                           ; BSR set to: 0
 42003  0035F0  51B6               	movf	___fladd@bexp& (0+255),w,b
 42004  0035F2  A4D8               	btfss	status,2,c
 42005                           
 42006                           ; BSR set to: 0
 42007  0035F4  07B6               	decf	___fladd@bexp& (0+255),f,b
 42008  0035F6                     l6136:
 42009                           
 42010                           ; BSR set to: 0
 42011                           
 42012                           ; BSR set to: 0
 42013                           
 42014                           ; BSR set to: 0
 42015  0035F6  AFA6               	btfss	(___fladd@b+2)& (0+255),7,b
 42016  0035F8  D7EE               	goto	l6132
 42017  0035FA                     u52110:
 42018                           
 42019                           ; BSR set to: 0
 42020                           
 42021                           ; BSR set to: 0
 42022                           
 42023                           ; BSR set to: 0
 42024  0035FA  0E00               	movlw	0
 42025  0035FC  6FB5               	movwf	___fladd@aexp& (0+255),b
 42026                           
 42027                           ; BSR set to: 0
 42028  0035FE  AFB7               	btfss	___fladd@grs& (0+255),7,b
 42029  003600  D00A               	goto	l6141
 42030                           
 42031                           ; BSR set to: 0
 42032  003602  C0B7  F0AC         	movff	___fladd@grs,??___fladd
 42033  003606  0E7F               	movlw	127
 42034  003608  17AC               	andwf	??___fladd& (0+255),f,b
 42035  00360A  A4D8               	btfss	status,2,c
 42036  00360C  D002               	goto	u52140
 42037                           
 42038                           ; BSR set to: 0
 42039                           
 42040                           ; BSR set to: 0
 42041  00360E  A1A4               	btfss	___fladd@b& (0+255),0,b
 42042  003610  D002               	goto	l6141
 42043  003612                     u52140:
 42044                           
 42045                           ; BSR set to: 0
 42046  003612  0E01               	movlw	1
 42047  003614  6FB5               	movwf	___fladd@aexp& (0+255),b
 42048  003616                     l6141:
 42049                           
 42050                           ; BSR set to: 0
 42051                           
 42052                           ; BSR set to: 0
 42053                           
 42054                           ; BSR set to: 0
 42055  003616  51B5               	movf	___fladd@aexp& (0+255),w,b
 42056  003618  B4D8               	btfsc	status,2,c
 42057  00361A  D020               	goto	l6144
 42058                           
 42059                           ; BSR set to: 0
 42060  00361C  0E01               	movlw	1
 42061  00361E  27A4               	addwf	___fladd@b& (0+255),f,b
 42062  003620  0E00               	movlw	0
 42063  003622  23A5               	addwfc	(___fladd@b+1)& (0+255),f,b
 42064  003624  23A6               	addwfc	(___fladd@b+2)& (0+255),f,b
 42065  003626  23A7               	addwfc	(___fladd@b+3)& (0+255),f,b
 42066                           
 42067                           ; BSR set to: 0
 42068  003628  A1A7               	btfss	(___fladd@b+3)& (0+255),0,b
 42069  00362A  D018               	goto	l6144
 42070                           
 42071                           ; BSR set to: 0
 42072  00362C  C0A4  F0AC         	movff	___fladd@b,??___fladd
 42073  003630  C0A5  F0AD         	movff	___fladd@b+1,??___fladd+1
 42074  003634  C0A6  F0AE         	movff	___fladd@b+2,??___fladd+2
 42075  003638  C0A7  F0AF         	movff	___fladd@b+3,??___fladd+3
 42076  00363C  35AF               	rlcf	(??___fladd+3)& (0+255),w,b
 42077  00363E  33AF               	rrcf	(??___fladd+3)& (0+255),f,b
 42078  003640  33AE               	rrcf	(??___fladd+2)& (0+255),f,b
 42079  003642  33AD               	rrcf	(??___fladd+1)& (0+255),f,b
 42080  003644  33AC               	rrcf	??___fladd& (0+255),f,b
 42081  003646  C0AC  F0A4         	movff	??___fladd,___fladd@b
 42082  00364A  C0AD  F0A5         	movff	??___fladd+1,___fladd@b+1
 42083  00364E  C0AE  F0A6         	movff	??___fladd+2,___fladd@b+2
 42084  003652  C0AF  F0A7         	movff	??___fladd+3,___fladd@b+3
 42085  003656  29B6               	incf	___fladd@bexp& (0+255),w,b
 42086  003658  A4D8               	btfss	status,2,c
 42087                           
 42088                           ; BSR set to: 0
 42089  00365A  2BB6               	incf	___fladd@bexp& (0+255),f,b
 42090  00365C                     l6144:
 42091                           
 42092                           ; BSR set to: 0
 42093                           
 42094                           ; BSR set to: 0
 42095                           
 42096                           ; BSR set to: 0
 42097                           
 42098                           ; BSR set to: 0
 42099  00365C  29B6               	incf	___fladd@bexp& (0+255),w,b
 42100  00365E  B4D8               	btfsc	status,2,c
 42101  003660  D003               	goto	u52190
 42102                           
 42103                           ; BSR set to: 0
 42104  003662  51B6               	movf	___fladd@bexp& (0+255),w,b
 42105  003664  A4D8               	btfss	status,2,c
 42106  003666  D00D               	goto	l6148
 42107  003668                     u52190:
 42108                           
 42109                           ; BSR set to: 0
 42110                           
 42111                           ; BSR set to: 0
 42112  003668  0E00               	movlw	0
 42113  00366A  6FA4               	movwf	___fladd@b& (0+255),b
 42114  00366C  0E00               	movlw	0
 42115  00366E  6FA5               	movwf	(___fladd@b+1)& (0+255),b
 42116  003670  0E00               	movlw	0
 42117  003672  6FA6               	movwf	(___fladd@b+2)& (0+255),b
 42118  003674  0E00               	movlw	0
 42119  003676  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 42120  003678  51B6               	movf	___fladd@bexp& (0+255),w,b
 42121  00367A  A4D8               	btfss	status,2,c
 42122  00367C  D002               	goto	l6148
 42123                           
 42124                           ; BSR set to: 0
 42125  00367E  0E00               	movlw	0
 42126  003680  6FB4               	movwf	___fladd@signs& (0+255),b
 42127  003682                     l6148:
 42128                           
 42129                           ; BSR set to: 0
 42130                           
 42131                           ; BSR set to: 0
 42132                           
 42133                           ; BSR set to: 0
 42134  003682  A1B6               	btfss	___fladd@bexp& (0+255),0,b
 42135  003684  D002               	goto	l6149
 42136                           
 42137                           ; BSR set to: 0
 42138  003686  8FA6               	bsf	(___fladd@b+2)& (0+255),7,b
 42139  003688  D001               	goto	l6150
 42140  00368A                     l6149:
 42141                           
 42142                           ; BSR set to: 0
 42143                           
 42144                           ; BSR set to: 0
 42145  00368A  9FA6               	bcf	(___fladd@b+2)& (0+255),7,b
 42146  00368C                     l6150:
 42147                           
 42148                           ; BSR set to: 0
 42149                           
 42150                           ; BSR set to: 0
 42151  00368C  90D8               	bcf	status,0,c
 42152  00368E  31B6               	rrcf	___fladd@bexp& (0+255),w,b
 42153  003690  6FA7               	movwf	(___fladd@b+3)& (0+255),b
 42154                           
 42155                           ; BSR set to: 0
 42156  003692  BFB4               	btfsc	___fladd@signs& (0+255),7,b
 42157                           
 42158                           ; BSR set to: 0
 42159  003694  8FA7               	bsf	(___fladd@b+3)& (0+255),7,b
 42160                           
 42161                           ; BSR set to: 0
 42162                           
 42163                           ; BSR set to: 0
 42164  003696  C0A4  F0A4         	movff	___fladd@b,?___fladd
 42165  00369A  C0A5  F0A5         	movff	___fladd@b+1,?___fladd+1
 42166  00369E  C0A6  F0A6         	movff	___fladd@b+2,?___fladd+2
 42167  0036A2  C0A7  F0A7         	movff	___fladd@b+3,?___fladd+3
 42168  0036A6  0012               	return	
 42169  0036A8                     __end_of___fladd:
 42170                           	opt stack 0
 42171                           tblptru	equ	0xFF8
 42172                           tblptrh	equ	0xFF7
 42173                           tblptrl	equ	0xFF6
 42174                           tablat	equ	0xFF5
 42175                           prodh	equ	0xFF4
 42176                           prodl	equ	0xFF3
 42177                           intcon	equ	0xFF2
 42178                           intcon2	equ	0xFF1
 42179                           indf0	equ	0xFEF
 42180                           postinc0	equ	0xFEE
 42181                           postdec0	equ	0xFED
 42182                           fsr0h	equ	0xFEA
 42183                           fsr0l	equ	0xFE9
 42184                           wreg	equ	0xFE8
 42185                           postinc1	equ	0xFE6
 42186                           postdec1	equ	0xFE5
 42187                           plusw1	equ	0xFE3
 42188                           fsr1h	equ	0xFE2
 42189                           fsr1l	equ	0xFE1
 42190                           indf2	equ	0xFDF
 42191                           postinc2	equ	0xFDE
 42192                           postdec2	equ	0xFDD
 42193                           plusw2	equ	0xFDB
 42194                           fsr2h	equ	0xFDA
 42195                           fsr2l	equ	0xFD9
 42196                           status	equ	0xFD8
 42197                           
 42198 ;; *************** function _ADC_Read *****************
 42199 ;; Defined at:
 42200 ;;		line 35 in file "adc.c"
 42201 ;; Parameters:    Size  Location     Type
 42202 ;;  adc_channel     1    wreg     unsigned char 
 42203 ;; Auto vars:     Size  Location     Type
 42204 ;;  adc_channel     1    4[BANK0 ] unsigned char 
 42205 ;; Return value:  Size  Location     Type
 42206 ;;                  2    0[BANK0 ] unsigned int 
 42207 ;; Registers used:
 42208 ;;		wreg, status,2, status,0
 42209 ;; Tracked objects:
 42210 ;;		On entry : 0/0
 42211 ;;		On exit  : 0/0
 42212 ;;		Unchanged: 0/0
 42213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42214 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42215 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42216 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42217 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42218 ;;Total ram usage:        5 bytes
 42219 ;; Hardware stack levels used:    1
 42220 ;; Hardware stack levels required when called:    5
 42221 ;; This function calls:
 42222 ;;		Nothing
 42223 ;; This function is called by:
 42224 ;;		_readPotentiometers
 42225 ;; This function uses a non-reentrant model
 42226 ;;
 42227                           
 42228                           	psect	text121
 42229  009728                     __ptext121:
 42230                           	opt stack 0
 42231  009728                     _ADC_Read:
 42232                           	opt stack 20
 42233                           
 42234                           ; BSR set to: 0
 42235                           ;incstack = 0
 42236                           ;ADC_Read@adc_channel stored from wreg
 42237  009728  0100               	movlb	0	; () banked
 42238  00972A  6F64               	movwf	ADC_Read@adc_channel& (0+255),b
 42239                           
 42240                           ;adc.c: 52: adc_channel &= 0x0F;
 42241  00972C  0E0F               	movlw	15
 42242  00972E  0100               	movlb	0	; () banked
 42243  009730  1764               	andwf	ADC_Read@adc_channel& (0+255),f,b
 42244                           
 42245                           ;adc.c: 53: ADCON0 &= 0x00000001;
 42246  009732  0E01               	movlw	1
 42247  009734  16C2               	andwf	4034,f,c	;volatile
 42248                           
 42249                           ;adc.c: 54: PORTA = (adc_channel << 1);
 42250  009736  5164               	movf	ADC_Read@adc_channel& (0+255),w,b
 42251  009738  2564               	addwf	ADC_Read@adc_channel& (0+255),w,b
 42252  00973A  6E80               	movwf	3968,c	;volatile
 42253                           
 42254                           ; BSR set to: 0
 42255                           ;adc.c: 56: _delay((unsigned long)((20)*(20000000/4000000.0)));
 42256  00973C  0E21               	movlw	33
 42257  00973E                     u67697:
 42258  00973E  2EE8               	decfsz	wreg,f,c
 42259  009740  D7FE               	bra	u67697
 42260  009742  F000               	nop	
 42261                           
 42262                           ;adc.c: 57: GO_nDONE = 1;
 42263  009744  82C2               	bsf	4034,1,c	;volatile
 42264  009746  B2C2               	btfsc	4034,1,c	;volatile
 42265  009748  D7FE               	goto	l94
 42266                           
 42267                           ;adc.c: 59: return ((ADRESH<<8)+ADRESL);
 42268  00974A  50C4               	movf	4036,w,c	;volatile
 42269  00974C  0100               	movlb	0	; () banked
 42270  00974E  6F63               	movwf	(??_ADC_Read+1)& (0+255),b
 42271  009750  6B62               	clrf	??_ADC_Read& (0+255),b
 42272  009752  50C3               	movf	4035,w,c	;volatile
 42273  009754  2562               	addwf	??_ADC_Read& (0+255),w,b
 42274  009756  6F60               	movwf	?_ADC_Read& (0+255),b
 42275  009758  0E00               	movlw	0
 42276  00975A  2163               	addwfc	(??_ADC_Read+1)& (0+255),w,b
 42277  00975C  6F61               	movwf	(?_ADC_Read+1)& (0+255),b
 42278  00975E  0012               	return	
 42279  009760                     __end_of_ADC_Read:
 42280                           	opt stack 0
 42281                           tblptru	equ	0xFF8
 42282                           tblptrh	equ	0xFF7
 42283                           tblptrl	equ	0xFF6
 42284                           tablat	equ	0xFF5
 42285                           prodh	equ	0xFF4
 42286                           prodl	equ	0xFF3
 42287                           intcon	equ	0xFF2
 42288                           intcon2	equ	0xFF1
 42289                           indf0	equ	0xFEF
 42290                           postinc0	equ	0xFEE
 42291                           postdec0	equ	0xFED
 42292                           fsr0h	equ	0xFEA
 42293                           fsr0l	equ	0xFE9
 42294                           wreg	equ	0xFE8
 42295                           postinc1	equ	0xFE6
 42296                           postdec1	equ	0xFE5
 42297                           plusw1	equ	0xFE3
 42298                           fsr1h	equ	0xFE2
 42299                           fsr1l	equ	0xFE1
 42300                           indf2	equ	0xFDF
 42301                           postinc2	equ	0xFDE
 42302                           postdec2	equ	0xFDD
 42303                           plusw2	equ	0xFDB
 42304                           fsr2h	equ	0xFDA
 42305                           fsr2l	equ	0xFD9
 42306                           status	equ	0xFD8
 42307                           
 42308 ;; *************** function _clear_row2 *****************
 42309 ;; Defined at:
 42310 ;;		line 79 in file "menu.c"
 42311 ;; Parameters:    Size  Location     Type
 42312 ;;		None
 42313 ;; Auto vars:     Size  Location     Type
 42314 ;;		None
 42315 ;; Return value:  Size  Location     Type
 42316 ;;                  1    wreg      void 
 42317 ;; Registers used:
 42318 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 42319 ;; Tracked objects:
 42320 ;;		On entry : 0/0
 42321 ;;		On exit  : 0/0
 42322 ;;		Unchanged: 0/0
 42323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42327 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42328 ;;Total ram usage:        0 bytes
 42329 ;; Hardware stack levels used:    1
 42330 ;; Hardware stack levels required when called:    8
 42331 ;; This function calls:
 42332 ;;		_Lcd_Print_String
 42333 ;;		_Lcd_Set_Cursor
 42334 ;; This function is called by:
 42335 ;;		_Function_A_1
 42336 ;;		_Function_A_2
 42337 ;;		_Function_A_3
 42338 ;;		_Function_A
 42339 ;;		_Function_B
 42340 ;;		_Function_C_1
 42341 ;;		_Function_C_2
 42342 ;;		_Function_C_3
 42343 ;;		_Function_C
 42344 ;;		_Function_D_1
 42345 ;;		_Function_D_3
 42346 ;;		_Function_D_4
 42347 ;;		_Function_D_5
 42348 ;;		_Function_D
 42349 ;;		_Function_E
 42350 ;;		_Function_F
 42351 ;;		_Function_G_1
 42352 ;;		_Function_G_2
 42353 ;;		_Function_G_3
 42354 ;;		_Function_G_4
 42355 ;;		_Function_G
 42356 ;;		_Function_H
 42357 ;;		_Function_H_1
 42358 ;;		_Function_H_2
 42359 ;;		_Function_H_3
 42360 ;;		_Function_H_4
 42361 ;;		_Function_H_5
 42362 ;;		_Function_H_6_1
 42363 ;;		_Function_H_6_2
 42364 ;;		_Function_H_6
 42365 ;;		_Function_H_7
 42366 ;;		_Function_H_8_1
 42367 ;;		_Function_H_8_2
 42368 ;;		_Function_H_8
 42369 ;;		_Function_H_9_1
 42370 ;;		_Function_H_9_2
 42371 ;;		_Function_H_9_3
 42372 ;;		_Function_H_9_4
 42373 ;;		_Function_H_9
 42374 ;; This function uses a non-reentrant model
 42375 ;;
 42376                           
 42377                           	psect	text122
 42378  0098B0                     __ptext122:
 42379                           	opt stack 0
 42380  0098B0                     _clear_row2:
 42381                           	opt stack 20
 42382                           
 42383                           ;menu.c: 80: Lcd_Set_Cursor(2,1);
 42384                           
 42385                           ; BSR set to: 0
 42386                           ;incstack = 0
 42387  0098B0  0E01               	movlw	1
 42388  0098B2  0100               	movlb	0	; () banked
 42389  0098B4  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 42390  0098B6  0E02               	movlw	2
 42391  0098B8  EC8A  F048         	call	_Lcd_Set_Cursor
 42392                           
 42393                           ;menu.c: 81: Lcd_Print_String("                ");
 42394  0098BC  0E64               	movlw	low STR_10
 42395  0098BE  0100               	movlb	0	; () banked
 42396  0098C0  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 42397  0098C2  0EFD               	movlw	high STR_10
 42398  0098C4  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 42399  0098C6  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 42400                           
 42401                           ;menu.c: 82: Lcd_Set_Cursor(2,1);
 42402  0098CA  0E01               	movlw	1
 42403  0098CC  0100               	movlb	0	; () banked
 42404  0098CE  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 42405  0098D0  0E02               	movlw	2
 42406  0098D2  EC8A  F048         	call	_Lcd_Set_Cursor
 42407  0098D6  0012               	return		;funcret
 42408  0098D8                     __end_of_clear_row2:
 42409                           	opt stack 0
 42410                           tblptru	equ	0xFF8
 42411                           tblptrh	equ	0xFF7
 42412                           tblptrl	equ	0xFF6
 42413                           tablat	equ	0xFF5
 42414                           prodh	equ	0xFF4
 42415                           prodl	equ	0xFF3
 42416                           intcon	equ	0xFF2
 42417                           intcon2	equ	0xFF1
 42418                           indf0	equ	0xFEF
 42419                           postinc0	equ	0xFEE
 42420                           postdec0	equ	0xFED
 42421                           fsr0h	equ	0xFEA
 42422                           fsr0l	equ	0xFE9
 42423                           wreg	equ	0xFE8
 42424                           postinc1	equ	0xFE6
 42425                           postdec1	equ	0xFE5
 42426                           plusw1	equ	0xFE3
 42427                           fsr1h	equ	0xFE2
 42428                           fsr1l	equ	0xFE1
 42429                           indf2	equ	0xFDF
 42430                           postinc2	equ	0xFDE
 42431                           postdec2	equ	0xFDD
 42432                           plusw2	equ	0xFDB
 42433                           fsr2h	equ	0xFDA
 42434                           fsr2l	equ	0xFD9
 42435                           status	equ	0xFD8
 42436                           
 42437 ;; *************** function _clear_row1 *****************
 42438 ;; Defined at:
 42439 ;;		line 72 in file "menu.c"
 42440 ;; Parameters:    Size  Location     Type
 42441 ;;		None
 42442 ;; Auto vars:     Size  Location     Type
 42443 ;;		None
 42444 ;; Return value:  Size  Location     Type
 42445 ;;                  1    wreg      void 
 42446 ;; Registers used:
 42447 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 42448 ;; Tracked objects:
 42449 ;;		On entry : 0/0
 42450 ;;		On exit  : 0/0
 42451 ;;		Unchanged: 0/0
 42452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42457 ;;Total ram usage:        0 bytes
 42458 ;; Hardware stack levels used:    1
 42459 ;; Hardware stack levels required when called:    8
 42460 ;; This function calls:
 42461 ;;		_Lcd_Print_String
 42462 ;;		_Lcd_Set_Cursor
 42463 ;; This function is called by:
 42464 ;;		_exitFunction
 42465 ;;		_exitSave
 42466 ;;		_exitLoad
 42467 ;;		_eepromExit
 42468 ;;		_Function_A_1
 42469 ;;		_Function_A_2
 42470 ;;		_Function_A_3
 42471 ;;		_Function_C_1
 42472 ;;		_Function_C_2
 42473 ;;		_Function_C_3
 42474 ;;		_Function_D_1
 42475 ;;		_Function_D_3
 42476 ;;		_Function_D_4
 42477 ;;		_Function_D_5
 42478 ;;		_Function_G_1
 42479 ;;		_Function_G_2
 42480 ;;		_Function_G_3
 42481 ;;		_Function_G_4
 42482 ;;		_Function_H_4
 42483 ;;		_Function_H_5
 42484 ;;		_Function_H_6_1
 42485 ;;		_Function_H_6_2
 42486 ;;		_Function_H_7
 42487 ;;		_Function_H_8_1
 42488 ;;		_Function_H_9_1
 42489 ;;		_Function_H_9_2
 42490 ;;		_Function_H_9_3
 42491 ;;		_Function_H_9_4
 42492 ;;		_Function_H_9
 42493 ;; This function uses a non-reentrant model
 42494 ;;
 42495                           
 42496                           	psect	text123
 42497  0098D8                     __ptext123:
 42498                           	opt stack 0
 42499  0098D8                     _clear_row1:
 42500                           	opt stack 20
 42501                           
 42502                           ;menu.c: 73: Lcd_Set_Cursor(1,1);
 42503                           
 42504                           ;incstack = 0
 42505  0098D8  0E01               	movlw	1
 42506  0098DA  0100               	movlb	0	; () banked
 42507  0098DC  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 42508  0098DE  0E01               	movlw	1
 42509  0098E0  EC8A  F048         	call	_Lcd_Set_Cursor
 42510                           
 42511                           ;menu.c: 74: Lcd_Print_String("                ");
 42512  0098E4  0E64               	movlw	low STR_10
 42513  0098E6  0100               	movlb	0	; () banked
 42514  0098E8  6F68               	movwf	Lcd_Print_String@a& (0+255),b
 42515  0098EA  0EFD               	movlw	high STR_10
 42516  0098EC  6F69               	movwf	(Lcd_Print_String@a+1)& (0+255),b
 42517  0098EE  ECB8  F042         	call	_Lcd_Print_String	;wreg free
 42518                           
 42519                           ;menu.c: 75: Lcd_Set_Cursor(1,1);
 42520  0098F2  0E01               	movlw	1
 42521  0098F4  0100               	movlb	0	; () banked
 42522  0098F6  6F63               	movwf	Lcd_Set_Cursor@b& (0+255),b
 42523  0098F8  0E01               	movlw	1
 42524  0098FA  EC8A  F048         	call	_Lcd_Set_Cursor
 42525  0098FE  0012               	return		;funcret
 42526  009900                     __end_of_clear_row1:
 42527                           	opt stack 0
 42528                           tblptru	equ	0xFF8
 42529                           tblptrh	equ	0xFF7
 42530                           tblptrl	equ	0xFF6
 42531                           tablat	equ	0xFF5
 42532                           prodh	equ	0xFF4
 42533                           prodl	equ	0xFF3
 42534                           intcon	equ	0xFF2
 42535                           intcon2	equ	0xFF1
 42536                           indf0	equ	0xFEF
 42537                           postinc0	equ	0xFEE
 42538                           postdec0	equ	0xFED
 42539                           fsr0h	equ	0xFEA
 42540                           fsr0l	equ	0xFE9
 42541                           wreg	equ	0xFE8
 42542                           postinc1	equ	0xFE6
 42543                           postdec1	equ	0xFE5
 42544                           plusw1	equ	0xFE3
 42545                           fsr1h	equ	0xFE2
 42546                           fsr1l	equ	0xFE1
 42547                           indf2	equ	0xFDF
 42548                           postinc2	equ	0xFDE
 42549                           postdec2	equ	0xFDD
 42550                           plusw2	equ	0xFDB
 42551                           fsr2h	equ	0xFDA
 42552                           fsr2l	equ	0xFD9
 42553                           status	equ	0xFD8
 42554                           
 42555 ;; *************** function _Lcd_Set_Cursor *****************
 42556 ;; Defined at:
 42557 ;;		line 66 in file "lcd.c"
 42558 ;; Parameters:    Size  Location     Type
 42559 ;;  a               1    wreg     unsigned char 
 42560 ;;  b               1    3[BANK0 ] unsigned char 
 42561 ;; Auto vars:     Size  Location     Type
 42562 ;;  a               1    4[BANK0 ] unsigned char 
 42563 ;;  temp            1    7[BANK0 ] unsigned char 
 42564 ;;  y               1    6[BANK0 ] unsigned char 
 42565 ;;  z               1    5[BANK0 ] unsigned char 
 42566 ;; Return value:  Size  Location     Type
 42567 ;;                  1    wreg      void 
 42568 ;; Registers used:
 42569 ;;		wreg, status,2, status,0, cstack
 42570 ;; Tracked objects:
 42571 ;;		On entry : 0/0
 42572 ;;		On exit  : 0/0
 42573 ;;		Unchanged: 0/0
 42574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42575 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42576 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42578 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42579 ;;Total ram usage:        5 bytes
 42580 ;; Hardware stack levels used:    1
 42581 ;; Hardware stack levels required when called:    7
 42582 ;; This function calls:
 42583 ;;		_Lcd_Cmd
 42584 ;; This function is called by:
 42585 ;;		_clear_row1
 42586 ;;		_clear_row2
 42587 ;;		_setControllerNumbers
 42588 ;;		_menu_lcd
 42589 ;;		_Function_C_2
 42590 ;;		_Function_C_3
 42591 ;;		_Function_D_2
 42592 ;;		_Function_E_1
 42593 ;;		_Function_E_2
 42594 ;;		_Function_F
 42595 ;;		_Function_H_2
 42596 ;;		_Function_H_3
 42597 ;; This function uses a non-reentrant model
 42598 ;;
 42599                           
 42600                           	psect	text124
 42601  009114                     __ptext124:
 42602                           	opt stack 0
 42603  009114                     _Lcd_Set_Cursor:
 42604                           	opt stack 20
 42605                           
 42606                           ;incstack = 0
 42607                           ;Lcd_Set_Cursor@a stored from wreg
 42608  009114  0100               	movlb	0	; () banked
 42609  009116  6F64               	movwf	Lcd_Set_Cursor@a& (0+255),b
 42610                           
 42611                           ;lcd.c: 69: TMR2ON = 0;
 42612  009118  94CA               	bcf	4042,2,c	;volatile
 42613                           
 42614                           ;lcd.c: 70: PORTC &= 0xF0;
 42615  00911A  0EF0               	movlw	240
 42616  00911C  1682               	andwf	3970,f,c	;volatile
 42617                           
 42618                           ;lcd.c: 72: char temp,z,y;
 42619                           ;lcd.c: 73: if(a== 1)
 42620  00911E  0100               	movlb	0	; () banked
 42621  009120  0564               	decf	Lcd_Set_Cursor@a& (0+255),w,b
 42622  009122  A4D8               	btfss	status,2,c
 42623  009124  D011               	goto	l40
 42624                           
 42625                           ; BSR set to: 0
 42626                           ;lcd.c: 74: {
 42627                           ;lcd.c: 75: temp = 0x80 + b - 1;
 42628  009126  5163               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 42629  009128  0F7F               	addlw	127
 42630  00912A  6F67               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 42631                           
 42632                           ;lcd.c: 76: z = temp>>4;
 42633  00912C  3967               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 42634  00912E  0B0F               	andlw	15
 42635  009130  6F65               	movwf	Lcd_Set_Cursor@z& (0+255),b
 42636                           
 42637                           ;lcd.c: 77: y = temp & 0x0F;
 42638  009132  5167               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 42639  009134  0B0F               	andlw	15
 42640  009136  6F66               	movwf	Lcd_Set_Cursor@y& (0+255),b
 42641                           
 42642                           ; BSR set to: 0
 42643                           ;lcd.c: 78: Lcd_Cmd(z);
 42644  009138  5165               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 42645  00913A  EC94  F04C         	call	_Lcd_Cmd
 42646                           
 42647                           ;lcd.c: 79: Lcd_Cmd(y);
 42648  00913E  0100               	movlb	0	; () banked
 42649  009140  5166               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 42650  009142  EC94  F04C         	call	_Lcd_Cmd
 42651                           
 42652                           ;lcd.c: 80: }
 42653  009146  D015               	goto	l42
 42654  009148                     l40:
 42655                           
 42656                           ;lcd.c: 81: else if(a== 2)
 42657  009148  0E02               	movlw	2
 42658  00914A  0100               	movlb	0	; () banked
 42659  00914C  1964               	xorwf	Lcd_Set_Cursor@a& (0+255),w,b
 42660  00914E  A4D8               	btfss	status,2,c
 42661  009150  D010               	goto	l42
 42662                           
 42663                           ; BSR set to: 0
 42664                           ;lcd.c: 82: {
 42665                           ;lcd.c: 83: temp = 0xC0 + b - 1;
 42666  009152  5163               	movf	Lcd_Set_Cursor@b& (0+255),w,b
 42667  009154  0FBF               	addlw	191
 42668  009156  6F67               	movwf	Lcd_Set_Cursor@temp& (0+255),b
 42669                           
 42670                           ;lcd.c: 84: z = temp>>4;
 42671  009158  3967               	swapf	Lcd_Set_Cursor@temp& (0+255),w,b
 42672  00915A  0B0F               	andlw	15
 42673  00915C  6F65               	movwf	Lcd_Set_Cursor@z& (0+255),b
 42674                           
 42675                           ;lcd.c: 85: y = temp & 0x0F;
 42676  00915E  5167               	movf	Lcd_Set_Cursor@temp& (0+255),w,b
 42677  009160  0B0F               	andlw	15
 42678  009162  6F66               	movwf	Lcd_Set_Cursor@y& (0+255),b
 42679                           
 42680                           ; BSR set to: 0
 42681                           ;lcd.c: 86: Lcd_Cmd(z);
 42682  009164  5165               	movf	Lcd_Set_Cursor@z& (0+255),w,b
 42683  009166  EC94  F04C         	call	_Lcd_Cmd
 42684                           
 42685                           ;lcd.c: 87: Lcd_Cmd(y);
 42686  00916A  0100               	movlb	0	; () banked
 42687  00916C  5166               	movf	Lcd_Set_Cursor@y& (0+255),w,b
 42688  00916E  EC94  F04C         	call	_Lcd_Cmd
 42689  009172                     l42:
 42690                           
 42691                           ;lcd.c: 88: }
 42692                           ;lcd.c: 91: TMR2ON = 1;
 42693  009172  84CA               	bsf	4042,2,c	;volatile
 42694  009174  0012               	return		;funcret
 42695  009176                     __end_of_Lcd_Set_Cursor:
 42696                           	opt stack 0
 42697                           tblptru	equ	0xFF8
 42698                           tblptrh	equ	0xFF7
 42699                           tblptrl	equ	0xFF6
 42700                           tablat	equ	0xFF5
 42701                           prodh	equ	0xFF4
 42702                           prodl	equ	0xFF3
 42703                           intcon	equ	0xFF2
 42704                           intcon2	equ	0xFF1
 42705                           indf0	equ	0xFEF
 42706                           postinc0	equ	0xFEE
 42707                           postdec0	equ	0xFED
 42708                           fsr0h	equ	0xFEA
 42709                           fsr0l	equ	0xFE9
 42710                           wreg	equ	0xFE8
 42711                           postinc1	equ	0xFE6
 42712                           postdec1	equ	0xFE5
 42713                           plusw1	equ	0xFE3
 42714                           fsr1h	equ	0xFE2
 42715                           fsr1l	equ	0xFE1
 42716                           indf2	equ	0xFDF
 42717                           postinc2	equ	0xFDE
 42718                           postdec2	equ	0xFDD
 42719                           plusw2	equ	0xFDB
 42720                           fsr2h	equ	0xFDA
 42721                           fsr2l	equ	0xFD9
 42722                           status	equ	0xFD8
 42723                           
 42724 ;; *************** function _Lcd_Print_String *****************
 42725 ;; Defined at:
 42726 ;;		line 128 in file "lcd.c"
 42727 ;; Parameters:    Size  Location     Type
 42728 ;;  a               2    8[BANK0 ] PTR unsigned char 
 42729 ;;		 -> STR_75(16), STR_74(12), STR_73(10), STR_72(12), 
 42730 ;;		 -> STR_71(10), STR_70(12), STR_69(10), STR_68(12), 
 42731 ;;		 -> STR_67(10), STR_66(12), STR_65(13), STR_64(15), 
 42732 ;;		 -> STR_63(15), STR_62(16), STR_60(14), STR_58(12), 
 42733 ;;		 -> STR_57(15), STR_55(14), STR_53(15), STR_52(17), 
 42734 ;;		 -> STR_51(9), STR_50(10), STR_49(13), STR_48(13), 
 42735 ;;		 -> STR_47(17), STR_46(14), STR_45(14), STR_42(15), 
 42736 ;;		 -> STR_40(16), STR_39(17), STR_38(13), STR_37(17), 
 42737 ;;		 -> STR_36(8), STR_35(8), STR_34(12), STR_33(17), 
 42738 ;;		 -> STR_32(15), STR_31(14), STR_30(17), STR_29(15), 
 42739 ;;		 -> STR_28(17), STR_27(14), STR_26(16), STR_25(14), 
 42740 ;;		 -> STR_24(12), LCD_STRINGS(2397), STR_23(13), STR_22(17), 
 42741 ;;		 -> STR_21(16), STR_20(5), STR_19(11), STR_18(11), 
 42742 ;;		 -> STR_17(11), STR_16(10), STR_15(11), STR_14(11), 
 42743 ;;		 -> STR_13(11), STR_12(10), string2display(5), STR_11(17), 
 42744 ;;		 -> STR_10(17), 
 42745 ;; Auto vars:     Size  Location     Type
 42746 ;;  i               2   12[BANK0 ] int 
 42747 ;; Return value:  Size  Location     Type
 42748 ;;                  1    wreg      void 
 42749 ;; Registers used:
 42750 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 42751 ;; Tracked objects:
 42752 ;;		On entry : 0/0
 42753 ;;		On exit  : 0/0
 42754 ;;		Unchanged: 0/0
 42755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42756 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42757 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42758 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42759 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42760 ;;Total ram usage:        6 bytes
 42761 ;; Hardware stack levels used:    1
 42762 ;; Hardware stack levels required when called:    7
 42763 ;; This function calls:
 42764 ;;		_Lcd_Print_Char
 42765 ;; This function is called by:
 42766 ;;		_clear_row1
 42767 ;;		_clear_row2
 42768 ;;		_setControllerNumbers
 42769 ;;		_exitFunction
 42770 ;;		_exitSave
 42771 ;;		_exitLoad
 42772 ;;		_eepromExit
 42773 ;;		_menu_lcd
 42774 ;;		_Function_A_1
 42775 ;;		_Function_A_2
 42776 ;;		_Function_A_3
 42777 ;;		_Function_A
 42778 ;;		_Function_B
 42779 ;;		_Function_C_1
 42780 ;;		_Function_C_2
 42781 ;;		_Function_C_3
 42782 ;;		_Function_C
 42783 ;;		_Function_D_1
 42784 ;;		_Function_D_2
 42785 ;;		_Function_D_3
 42786 ;;		_Function_D_4
 42787 ;;		_Function_D_5
 42788 ;;		_Function_D
 42789 ;;		_Function_E_1
 42790 ;;		_Function_E_2
 42791 ;;		_Function_E
 42792 ;;		_Function_F
 42793 ;;		_Function_G_1
 42794 ;;		_Function_G_2
 42795 ;;		_Function_G_3
 42796 ;;		_Function_G_4
 42797 ;;		_Function_G
 42798 ;;		_Function_H
 42799 ;;		_Function_H_1
 42800 ;;		_Function_H_2
 42801 ;;		_Function_H_3
 42802 ;;		_Function_H_4
 42803 ;;		_Function_H_5
 42804 ;;		_Function_H_6_1
 42805 ;;		_Function_H_6_2
 42806 ;;		_Function_H_6
 42807 ;;		_Function_H_7
 42808 ;;		_Function_H_8_1
 42809 ;;		_Function_H_8_2
 42810 ;;		_Function_H_8
 42811 ;;		_Function_H_9_1
 42812 ;;		_Function_H_9_2
 42813 ;;		_Function_H_9_3
 42814 ;;		_Function_H_9_4
 42815 ;;		_Function_H_9
 42816 ;; This function uses a non-reentrant model
 42817 ;;
 42818                           
 42819                           	psect	text125
 42820  008570                     __ptext125:
 42821                           	opt stack 0
 42822  008570                     _Lcd_Print_String:
 42823                           	opt stack 20
 42824                           
 42825                           ;lcd.c: 131: TMR2ON = 0;
 42826                           
 42827                           ;incstack = 0
 42828  008570  94CA               	bcf	4042,2,c	;volatile
 42829                           
 42830                           ;lcd.c: 132: PORTC &= 0xF0;
 42831  008572  0EF0               	movlw	240
 42832  008574  1682               	andwf	3970,f,c	;volatile
 42833                           
 42834                           ;lcd.c: 134: int i;
 42835                           ;lcd.c: 135: for(i=0;a[i]!='\0';i++)
 42836  008576  0E00               	movlw	0
 42837  008578  0100               	movlb	0	; () banked
 42838  00857A  6F6D               	movwf	(Lcd_Print_String@i+1)& (0+255),b
 42839  00857C  0E00               	movlw	0
 42840  00857E  6F6C               	movwf	Lcd_Print_String@i& (0+255),b
 42841  008580  D01D               	goto	l58
 42842  008582                     
 42843                           ;lcd.c: 136: Lcd_Print_Char(a[i]);
 42844                           
 42845                           ; BSR set to: 0
 42846  008582  0100               	movlb	0	; () banked
 42847  008584  516C               	movf	Lcd_Print_String@i& (0+255),w,b
 42848  008586  2568               	addwf	Lcd_Print_String@a& (0+255),w,b
 42849  008588  6F6A               	movwf	??_Lcd_Print_String& (0+255),b
 42850  00858A  516D               	movf	(Lcd_Print_String@i+1)& (0+255),w,b
 42851  00858C  2169               	addwfc	(Lcd_Print_String@a+1)& (0+255),w,b
 42852  00858E  6F6B               	movwf	(??_Lcd_Print_String+1)& (0+255),b
 42853  008590  C06A  FFF6         	movff	??_Lcd_Print_String,tblptrl
 42854  008594  C06B  FFF7         	movff	??_Lcd_Print_String+1,tblptrh
 42855  008598  0E00               	movlw	low (__mediumconst shr (0+16))
 42856  00859A  6EF8               	movwf	tblptru,c
 42857  00859C  0E0C               	movlw	(high __ramtop+-1)
 42858  00859E  64F7               	cpfsgt	tblptrh,c
 42859  0085A0  D003               	bra	u55227
 42860  0085A2  0008               	tblrd		*
 42861  0085A4  50F5               	movf	tablat,w,c
 42862  0085A6  D005               	bra	u55220
 42863  0085A8                     u55227:
 42864  0085A8  CFF6 FFE9          	movff	tblptrl,fsr0l
 42865  0085AC  CFF7 FFEA          	movff	tblptrh,fsr0h
 42866  0085B0  50EF               	movf	indf0,w,c
 42867  0085B2                     u55220:
 42868  0085B2  ECFA  F042         	call	_Lcd_Print_Char
 42869  0085B6  0100               	movlb	0	; () banked
 42870  0085B8  4B6C               	infsnz	Lcd_Print_String@i& (0+255),f,b
 42871  0085BA  2B6D               	incf	(Lcd_Print_String@i+1)& (0+255),f,b
 42872  0085BC                     l58:
 42873                           
 42874                           ; BSR set to: 0
 42875                           
 42876                           ; BSR set to: 0
 42877  0085BC  516C               	movf	Lcd_Print_String@i& (0+255),w,b
 42878  0085BE  2568               	addwf	Lcd_Print_String@a& (0+255),w,b
 42879  0085C0  6F6A               	movwf	??_Lcd_Print_String& (0+255),b
 42880  0085C2  516D               	movf	(Lcd_Print_String@i+1)& (0+255),w,b
 42881  0085C4  2169               	addwfc	(Lcd_Print_String@a+1)& (0+255),w,b
 42882  0085C6  6F6B               	movwf	(??_Lcd_Print_String+1)& (0+255),b
 42883  0085C8  C06A  FFF6         	movff	??_Lcd_Print_String,tblptrl
 42884  0085CC  C06B  FFF7         	movff	??_Lcd_Print_String+1,tblptrh
 42885  0085D0  0E00               	movlw	low (__mediumconst shr (0+16))
 42886  0085D2  6EF8               	movwf	tblptru,c
 42887  0085D4  0E0C               	movlw	(high __ramtop+-1)
 42888  0085D6  64F7               	cpfsgt	tblptrh,c
 42889  0085D8  D003               	bra	u55237
 42890  0085DA  0008               	tblrd		*
 42891  0085DC  50F5               	movf	tablat,w,c
 42892  0085DE  D005               	bra	u55230
 42893  0085E0                     u55237:
 42894  0085E0  CFF6 FFE9          	movff	tblptrl,fsr0l
 42895  0085E4  CFF7 FFEA          	movff	tblptrh,fsr0h
 42896  0085E8  50EF               	movf	indf0,w,c
 42897  0085EA                     u55230:
 42898  0085EA  0900               	iorlw	0
 42899  0085EC  A4D8               	btfss	status,2,c
 42900  0085EE  D7C9               	goto	l59
 42901                           
 42902                           ;lcd.c: 139: TMR2ON = 1;
 42903  0085F0  84CA               	bsf	4042,2,c	;volatile
 42904  0085F2  0012               	return		;funcret
 42905  0085F4                     __end_of_Lcd_Print_String:
 42906                           	opt stack 0
 42907                           tblptru	equ	0xFF8
 42908                           tblptrh	equ	0xFF7
 42909                           tblptrl	equ	0xFF6
 42910                           tablat	equ	0xFF5
 42911                           prodh	equ	0xFF4
 42912                           prodl	equ	0xFF3
 42913                           intcon	equ	0xFF2
 42914                           intcon2	equ	0xFF1
 42915                           indf0	equ	0xFEF
 42916                           postinc0	equ	0xFEE
 42917                           postdec0	equ	0xFED
 42918                           fsr0h	equ	0xFEA
 42919                           fsr0l	equ	0xFE9
 42920                           wreg	equ	0xFE8
 42921                           postinc1	equ	0xFE6
 42922                           postdec1	equ	0xFE5
 42923                           plusw1	equ	0xFE3
 42924                           fsr1h	equ	0xFE2
 42925                           fsr1l	equ	0xFE1
 42926                           indf2	equ	0xFDF
 42927                           postinc2	equ	0xFDE
 42928                           postdec2	equ	0xFDD
 42929                           plusw2	equ	0xFDB
 42930                           fsr2h	equ	0xFDA
 42931                           fsr2l	equ	0xFD9
 42932                           status	equ	0xFD8
 42933                           
 42934 ;; *************** function _Lcd_Print_Char *****************
 42935 ;; Defined at:
 42936 ;;		line 112 in file "lcd.c"
 42937 ;; Parameters:    Size  Location     Type
 42938 ;;  data            1    wreg     unsigned char 
 42939 ;; Auto vars:     Size  Location     Type
 42940 ;;  data            1    3[BANK0 ] unsigned char 
 42941 ;;  i               2    6[BANK0 ] int 
 42942 ;;  i               2    4[BANK0 ] int 
 42943 ;;  Upper_Nibble    1    2[BANK0 ] unsigned char 
 42944 ;;  Lower_Nibble    1    1[BANK0 ] unsigned char 
 42945 ;; Return value:  Size  Location     Type
 42946 ;;                  1    wreg      void 
 42947 ;; Registers used:
 42948 ;;		wreg, status,2, status,0, cstack
 42949 ;; Tracked objects:
 42950 ;;		On entry : 0/0
 42951 ;;		On exit  : 0/0
 42952 ;;		Unchanged: 0/0
 42953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 42954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42955 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42957 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 42958 ;;Total ram usage:        7 bytes
 42959 ;; Hardware stack levels used:    1
 42960 ;; Hardware stack levels required when called:    6
 42961 ;; This function calls:
 42962 ;;		_Lcd_SetBit
 42963 ;; This function is called by:
 42964 ;;		_Lcd_Print_String
 42965 ;; This function uses a non-reentrant model
 42966 ;;
 42967                           
 42968                           	psect	text126
 42969  0085F4                     __ptext126:
 42970                           	opt stack 0
 42971  0085F4                     _Lcd_Print_Char:
 42972                           	opt stack 20
 42973                           
 42974                           ;incstack = 0
 42975                           ;Lcd_Print_Char@data stored from wreg
 42976  0085F4  0100               	movlb	0	; () banked
 42977  0085F6  6F63               	movwf	Lcd_Print_Char@data& (0+255),b
 42978                           
 42979                           ;lcd.c: 114: char Lower_Nibble,Upper_Nibble;
 42980                           ;lcd.c: 115: Lower_Nibble = data&0x0F;
 42981  0085F8  0100               	movlb	0	; () banked
 42982  0085FA  5163               	movf	Lcd_Print_Char@data& (0+255),w,b
 42983  0085FC  0B0F               	andlw	15
 42984  0085FE  6F61               	movwf	Lcd_Print_Char@Lower_Nibble& (0+255),b
 42985                           
 42986                           ;lcd.c: 116: Upper_Nibble = data&0xF0;
 42987  008600  5163               	movf	Lcd_Print_Char@data& (0+255),w,b
 42988  008602  0BF0               	andlw	240
 42989  008604  6F62               	movwf	Lcd_Print_Char@Upper_Nibble& (0+255),b
 42990                           
 42991                           ; BSR set to: 0
 42992                           ;lcd.c: 117: RE0 = 1;
 42993  008606  8084               	bsf	3972,0,c	;volatile
 42994                           
 42995                           ; BSR set to: 0
 42996                           ;lcd.c: 118: Lcd_SetBit(Upper_Nibble>>4);
 42997  008608  3962               	swapf	Lcd_Print_Char@Upper_Nibble& (0+255),w,b
 42998  00860A  0B0F               	andlw	15
 42999  00860C  EC15  F04C         	call	_Lcd_SetBit
 43000                           
 43001                           ;lcd.c: 119: RE1 = 1;
 43002  008610  8284               	bsf	3972,1,c	;volatile
 43003                           
 43004                           ;lcd.c: 120: for(int i=2130483; i<=0; i--) __nop();
 43005  008612  0E82               	movlw	130
 43006  008614  0100               	movlb	0	; () banked
 43007  008616  6F65               	movwf	(Lcd_Print_Char@i+1)& (0+255),b
 43008  008618  0E33               	movlw	51
 43009  00861A  6F64               	movwf	Lcd_Print_Char@i& (0+255),b
 43010                           
 43011                           ; BSR set to: 0
 43012  00861C  BF65               	btfsc	(Lcd_Print_Char@i+1)& (0+255),7,b
 43013  00861E  D003               	goto	l51
 43014  008620  5165               	movf	(Lcd_Print_Char@i+1)& (0+255),w,b
 43015  008622  E10D               	bnz	l52
 43016  008624  D009               	goto	L26
 43017  008626                     l51:
 43018                           
 43019                           ; BSR set to: 0
 43020  008626  F000               	nop	
 43021  008628  0100               	movlb	0	; () banked
 43022  00862A  0764               	decf	Lcd_Print_Char@i& (0+255),f,b
 43023  00862C  A0D8               	btfss	status,0,c
 43024  00862E  0765               	decf	(Lcd_Print_Char@i+1)& (0+255),f,b
 43025                           
 43026                           ; BSR set to: 0
 43027  008630  BF65               	btfsc	(Lcd_Print_Char@i+1)& (0+255),7,b
 43028  008632  D7F9               	goto	l51
 43029  008634  5165               	movf	(Lcd_Print_Char@i+1)& (0+255),w,b
 43030  008636  E103               	bnz	u52610
 43031  008638                     L26:
 43032  008638  0564               	decf	Lcd_Print_Char@i& (0+255),w,b
 43033  00863A  A0D8               	btfss	status,0,c
 43034  00863C  D7F4               	goto	l51
 43035  00863E                     u52610:
 43036  00863E                     l52:
 43037                           
 43038                           ; BSR set to: 0
 43039                           ;lcd.c: 121: RE1 = 0;
 43040  00863E  9284               	bcf	3972,1,c	;volatile
 43041                           
 43042                           ; BSR set to: 0
 43043                           ;lcd.c: 122: Lcd_SetBit(Lower_Nibble);
 43044  008640  5161               	movf	Lcd_Print_Char@Lower_Nibble& (0+255),w,b
 43045  008642  EC15  F04C         	call	_Lcd_SetBit
 43046                           
 43047                           ;lcd.c: 123: RE1 = 1;
 43048  008646  8284               	bsf	3972,1,c	;volatile
 43049                           
 43050                           ;lcd.c: 124: for(int i=2130483; i<=0; i--) __nop();
 43051  008648  0E82               	movlw	130
 43052  00864A  0100               	movlb	0	; () banked
 43053  00864C  6F67               	movwf	(Lcd_Print_Char@i_59+1)& (0+255),b
 43054  00864E  0E33               	movlw	51
 43055  008650  6F66               	movwf	Lcd_Print_Char@i_59& (0+255),b
 43056                           
 43057                           ; BSR set to: 0
 43058  008652  BF67               	btfsc	(Lcd_Print_Char@i_59+1)& (0+255),7,b
 43059  008654  D003               	goto	l53
 43060  008656  5167               	movf	(Lcd_Print_Char@i_59+1)& (0+255),w,b
 43061  008658  E10D               	bnz	l54
 43062  00865A  D009               	goto	L27
 43063  00865C                     l53:
 43064                           
 43065                           ; BSR set to: 0
 43066  00865C  F000               	nop	
 43067  00865E  0100               	movlb	0	; () banked
 43068  008660  0766               	decf	Lcd_Print_Char@i_59& (0+255),f,b
 43069  008662  A0D8               	btfss	status,0,c
 43070  008664  0767               	decf	(Lcd_Print_Char@i_59+1)& (0+255),f,b
 43071                           
 43072                           ; BSR set to: 0
 43073  008666  BF67               	btfsc	(Lcd_Print_Char@i_59+1)& (0+255),7,b
 43074  008668  D7F9               	goto	l53
 43075  00866A  5167               	movf	(Lcd_Print_Char@i_59+1)& (0+255),w,b
 43076  00866C  E103               	bnz	u52630
 43077  00866E                     L27:
 43078  00866E  0566               	decf	Lcd_Print_Char@i_59& (0+255),w,b
 43079  008670  A0D8               	btfss	status,0,c
 43080  008672  D7F4               	goto	l53
 43081  008674                     u52630:
 43082  008674                     l54:
 43083                           
 43084                           ; BSR set to: 0
 43085                           ;lcd.c: 125: RE1 = 0;
 43086  008674  9284               	bcf	3972,1,c	;volatile
 43087                           
 43088                           ; BSR set to: 0
 43089  008676  0012               	return		;funcret
 43090  008678                     __end_of_Lcd_Print_Char:
 43091                           	opt stack 0
 43092                           tblptru	equ	0xFF8
 43093                           tblptrh	equ	0xFF7
 43094                           tblptrl	equ	0xFF6
 43095                           tablat	equ	0xFF5
 43096                           prodh	equ	0xFF4
 43097                           prodl	equ	0xFF3
 43098                           intcon	equ	0xFF2
 43099                           intcon2	equ	0xFF1
 43100                           indf0	equ	0xFEF
 43101                           postinc0	equ	0xFEE
 43102                           postdec0	equ	0xFED
 43103                           fsr0h	equ	0xFEA
 43104                           fsr0l	equ	0xFE9
 43105                           wreg	equ	0xFE8
 43106                           postinc1	equ	0xFE6
 43107                           postdec1	equ	0xFE5
 43108                           plusw1	equ	0xFE3
 43109                           fsr1h	equ	0xFE2
 43110                           fsr1l	equ	0xFE1
 43111                           indf2	equ	0xFDF
 43112                           postinc2	equ	0xFDE
 43113                           postdec2	equ	0xFDD
 43114                           plusw2	equ	0xFDB
 43115                           fsr2h	equ	0xFDA
 43116                           fsr2l	equ	0xFD9
 43117                           status	equ	0xFD8
 43118                           
 43119 ;; *************** function _initializeSaveSlotsOnce *****************
 43120 ;; Defined at:
 43121 ;;		line 28 in file "eeprom.c"
 43122 ;; Parameters:    Size  Location     Type
 43123 ;;		None
 43124 ;; Auto vars:     Size  Location     Type
 43125 ;;  initializeSl    1   84[BANK0 ] unsigned char 
 43126 ;; Return value:  Size  Location     Type
 43127 ;;                  1    wreg      void 
 43128 ;; Registers used:
 43129 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 43130 ;; Tracked objects:
 43131 ;;		On entry : 0/0
 43132 ;;		On exit  : 0/0
 43133 ;;		Unchanged: 0/0
 43134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43136 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43138 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43139 ;;Total ram usage:        1 bytes
 43140 ;; Hardware stack levels used:    1
 43141 ;; Hardware stack levels required when called:    7
 43142 ;; This function calls:
 43143 ;;		_Busy_eep
 43144 ;;		_Read_b_eep
 43145 ;;		_Write_b_eep
 43146 ;;		_saveToEEPROM
 43147 ;; This function is called by:
 43148 ;;		_main
 43149 ;; This function uses a non-reentrant model
 43150 ;;
 43151                           
 43152                           	psect	text127
 43153  009466                     __ptext127:
 43154                           	opt stack 0
 43155  009466                     _initializeSaveSlotsOnce:
 43156                           	opt stack 23
 43157                           
 43158                           ;eeprom.c: 30: unsigned char initializeSlotsOnce = Read_b_eep(0x01);
 43159                           
 43160                           ; BSR set to: 0
 43161                           ;incstack = 0
 43162  009466  0E00               	movlw	0
 43163  009468  0100               	movlb	0	; () banked
 43164  00946A  6F61               	movwf	(Read_b_eep@badd+1)& (0+255),b
 43165  00946C  0E01               	movlw	1
 43166  00946E  6F60               	movwf	Read_b_eep@badd& (0+255),b
 43167  009470  ECE7  F04C         	call	_Read_b_eep	;wreg free
 43168  009474  0100               	movlb	0	; () banked
 43169  009476  6FB4               	movwf	initializeSaveSlotsOnce@initializeSlotsOnce& (0+255),b
 43170                           
 43171                           ; BSR set to: 0
 43172                           ;eeprom.c: 32: if (initializeSlotsOnce == 0x24) {
 43173  009478  0E24               	movlw	36
 43174  00947A  19B4               	xorwf	initializeSaveSlotsOnce@initializeSlotsOnce& (0+255),w,b
 43175  00947C  A4D8               	btfss	status,2,c
 43176  00947E  0012               	return	
 43177                           
 43178                           ; BSR set to: 0
 43179                           ;eeprom.c: 33: saveToEEPROM(SLOT1);
 43180  009480  0E01               	movlw	1
 43181  009482  EC10  F028         	call	_saveToEEPROM
 43182                           
 43183                           ;eeprom.c: 34: saveToEEPROM(SLOT2);
 43184  009486  0E02               	movlw	2
 43185  009488  EC10  F028         	call	_saveToEEPROM
 43186                           
 43187                           ;eeprom.c: 35: saveToEEPROM(SLOT3);
 43188  00948C  0E03               	movlw	3
 43189  00948E  EC10  F028         	call	_saveToEEPROM
 43190                           
 43191                           ;eeprom.c: 36: saveToEEPROM(SLOT4);
 43192  009492  0E04               	movlw	4
 43193  009494  EC10  F028         	call	_saveToEEPROM
 43194                           
 43195                           ;eeprom.c: 37: (Busy_eep(), Write_b_eep(0x01,0x48));
 43196  009498  EC4E  F04D         	call	_Busy_eep	;wreg free
 43197  00949C  0E00               	movlw	0
 43198  00949E  0100               	movlb	0	; () banked
 43199  0094A0  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 43200  0094A2  0E01               	movlw	1
 43201  0094A4  6F60               	movwf	Write_b_eep@badd& (0+255),b
 43202  0094A6  0E48               	movlw	72
 43203  0094A8  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 43204  0094AA  ECC2  F04A         	call	_Write_b_eep	;wreg free
 43205  0094AE  0012               	return	
 43206  0094B0                     __end_of_initializeSaveSlotsOnce:
 43207                           	opt stack 0
 43208                           tblptru	equ	0xFF8
 43209                           tblptrh	equ	0xFF7
 43210                           tblptrl	equ	0xFF6
 43211                           tablat	equ	0xFF5
 43212                           prodh	equ	0xFF4
 43213                           prodl	equ	0xFF3
 43214                           intcon	equ	0xFF2
 43215                           intcon2	equ	0xFF1
 43216                           indf0	equ	0xFEF
 43217                           postinc0	equ	0xFEE
 43218                           postdec0	equ	0xFED
 43219                           fsr0h	equ	0xFEA
 43220                           fsr0l	equ	0xFE9
 43221                           wreg	equ	0xFE8
 43222                           postinc1	equ	0xFE6
 43223                           postdec1	equ	0xFE5
 43224                           plusw1	equ	0xFE3
 43225                           fsr1h	equ	0xFE2
 43226                           fsr1l	equ	0xFE1
 43227                           indf2	equ	0xFDF
 43228                           postinc2	equ	0xFDE
 43229                           postdec2	equ	0xFDD
 43230                           plusw2	equ	0xFDB
 43231                           fsr2h	equ	0xFDA
 43232                           fsr2l	equ	0xFD9
 43233                           status	equ	0xFD8
 43234                           
 43235 ;; *************** function _saveToEEPROM *****************
 43236 ;; Defined at:
 43237 ;;		line 198 in file "eeprom.c"
 43238 ;; Parameters:    Size  Location     Type
 43239 ;;  slotNumber      1    wreg     unsigned char 
 43240 ;; Auto vars:     Size  Location     Type
 43241 ;;  slotNumber      1   81[BANK0 ] unsigned char 
 43242 ;;  byte_count      2   82[BANK0 ] unsigned int 
 43243 ;;  to_save        75    4[BANK0 ] unsigned char [75]
 43244 ;;  baseAddress     2   79[BANK0 ] unsigned int 
 43245 ;; Return value:  Size  Location     Type
 43246 ;;                  1    wreg      void 
 43247 ;; Registers used:
 43248 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 43249 ;; Tracked objects:
 43250 ;;		On entry : 0/0
 43251 ;;		On exit  : 0/0
 43252 ;;		Unchanged: 0/0
 43253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43255 ;;      Locals:         0      80       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43257 ;;      Totals:         0      80       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43258 ;;Total ram usage:       80 bytes
 43259 ;; Hardware stack levels used:    1
 43260 ;; Hardware stack levels required when called:    6
 43261 ;; This function calls:
 43262 ;;		_Busy_eep
 43263 ;;		_Write_b_eep
 43264 ;; This function is called by:
 43265 ;;		_Function_G_1
 43266 ;;		_initializeSaveSlotsOnce
 43267 ;; This function uses a non-reentrant model
 43268 ;;
 43269                           
 43270                           	psect	text128
 43271  005020                     __ptext128:
 43272                           	opt stack 0
 43273  005020                     _saveToEEPROM:
 43274                           	opt stack 21
 43275                           
 43276                           ;incstack = 0
 43277                           ;saveToEEPROM@slotNumber stored from wreg
 43278  005020  0100               	movlb	0	; () banked
 43279  005022  6FB1               	movwf	saveToEEPROM@slotNumber& (0+255),b
 43280                           
 43281                           ;eeprom.c: 200: unsigned int baseAddress = 0;
 43282  005024  0E00               	movlw	0
 43283  005026  0100               	movlb	0	; () banked
 43284  005028  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 43285  00502A  0E00               	movlw	0
 43286  00502C  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 43287                           
 43288                           ; BSR set to: 0
 43289                           ;eeprom.c: 203: if (slotNumber == SLOT1) {baseAddress = 128;}
 43290  00502E  05B1               	decf	saveToEEPROM@slotNumber& (0+255),w,b
 43291  005030  A4D8               	btfss	status,2,c
 43292  005032  D004               	goto	l4483
 43293                           
 43294                           ; BSR set to: 0
 43295  005034  0E00               	movlw	0
 43296  005036  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 43297  005038  0E80               	movlw	128
 43298  00503A  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 43299  00503C                     l4483:
 43300                           
 43301                           ; BSR set to: 0
 43302                           ;eeprom.c: 204: if (slotNumber == SLOT2) {baseAddress = 256;}
 43303                           
 43304                           ; BSR set to: 0
 43305  00503C  0E02               	movlw	2
 43306  00503E  19B1               	xorwf	saveToEEPROM@slotNumber& (0+255),w,b
 43307  005040  A4D8               	btfss	status,2,c
 43308  005042  D004               	goto	l4484
 43309                           
 43310                           ; BSR set to: 0
 43311  005044  0E01               	movlw	1
 43312  005046  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 43313  005048  0E00               	movlw	0
 43314  00504A  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 43315  00504C                     l4484:
 43316                           
 43317                           ; BSR set to: 0
 43318                           ;eeprom.c: 205: if (slotNumber == SLOT3) {baseAddress = 384;}
 43319                           
 43320                           ; BSR set to: 0
 43321  00504C  0E03               	movlw	3
 43322  00504E  19B1               	xorwf	saveToEEPROM@slotNumber& (0+255),w,b
 43323  005050  A4D8               	btfss	status,2,c
 43324  005052  D004               	goto	l4485
 43325                           
 43326                           ; BSR set to: 0
 43327  005054  0E01               	movlw	1
 43328  005056  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 43329  005058  0E80               	movlw	128
 43330  00505A  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 43331  00505C                     l4485:
 43332                           
 43333                           ; BSR set to: 0
 43334                           ;eeprom.c: 206: if (slotNumber == SLOT4) {baseAddress = 512;}
 43335                           
 43336                           ; BSR set to: 0
 43337  00505C  0E04               	movlw	4
 43338  00505E  19B1               	xorwf	saveToEEPROM@slotNumber& (0+255),w,b
 43339  005060  A4D8               	btfss	status,2,c
 43340  005062  D004               	goto	l4486
 43341                           
 43342                           ; BSR set to: 0
 43343  005064  0E02               	movlw	2
 43344  005066  6FB0               	movwf	(saveToEEPROM@baseAddress+1)& (0+255),b
 43345  005068  0E00               	movlw	0
 43346  00506A  6FAF               	movwf	saveToEEPROM@baseAddress& (0+255),b
 43347  00506C                     l4486:
 43348                           
 43349                           ; BSR set to: 0
 43350                           ;eeprom.c: 209: unsigned char to_save[75];
 43351                           ;eeprom.c: 214: to_save[0] = KEYBOARD_MODE;
 43352                           
 43353                           ; BSR set to: 0
 43354  00506C  C0F3  F064         	movff	_KEYBOARD_MODE,saveToEEPROM@to_save
 43355                           
 43356                           ; BSR set to: 0
 43357                           ;eeprom.c: 215: to_save[1] = which_mode;
 43358  005070  C0F2  F065         	movff	_which_mode,saveToEEPROM@to_save+1
 43359                           
 43360                           ; BSR set to: 0
 43361                           ;eeprom.c: 216: to_save[2] = which_triad;
 43362  005074  C0F1  F066         	movff	_which_triad,saveToEEPROM@to_save+2
 43363                           
 43364                           ; BSR set to: 0
 43365                           ;eeprom.c: 217: to_save[3] = which_seventh;
 43366  005078  C0F0  F067         	movff	_which_seventh,saveToEEPROM@to_save+3
 43367                           
 43368                           ;eeprom.c: 220: to_save[4] = TRANSPOSE_MODE;
 43369  00507C  0E00               	movlw	0
 43370  00507E  BE04               	btfsc	_TRANSPOSE_MODE/(0+8),_TRANSPOSE_MODE& (0+7),c
 43371  005080  0E01               	movlw	1
 43372  005082  6F68               	movwf	(saveToEEPROM@to_save+4)& (0+255),b
 43373                           
 43374                           ;eeprom.c: 223: to_save[5] = DRUM_MODE;
 43375  005084  0E00               	movlw	0
 43376  005086  BE01               	btfsc	_DRUM_MODE/(0+8),_DRUM_MODE& (0+7),c
 43377  005088  0E01               	movlw	1
 43378  00508A  6F69               	movwf	(saveToEEPROM@to_save+5)& (0+255),b
 43379                           
 43380                           ;eeprom.c: 224: to_save[6] = CONTROL_MODE;
 43381  00508C  0E00               	movlw	0
 43382  00508E  BC01               	btfsc	_CONTROL_MODE/(0+8),_CONTROL_MODE& (0+7),c
 43383  005090  0E01               	movlw	1
 43384  005092  6F6A               	movwf	(saveToEEPROM@to_save+6)& (0+255),b
 43385                           
 43386                           ; BSR set to: 0
 43387                           ;eeprom.c: 227: to_save[7] = DRUM_NOTE[0];
 43388  005094  C1EA  F06B         	movff	_DRUM_NOTE,saveToEEPROM@to_save+7
 43389                           
 43390                           ; BSR set to: 0
 43391                           ;eeprom.c: 228: to_save[8] = DRUM_NOTE[1];
 43392  005098  C1EB  F06C         	movff	_DRUM_NOTE+1,saveToEEPROM@to_save+8
 43393                           
 43394                           ; BSR set to: 0
 43395                           ;eeprom.c: 229: to_save[9] = DRUM_NOTE[2];
 43396  00509C  C1EC  F06D         	movff	_DRUM_NOTE+2,saveToEEPROM@to_save+9
 43397                           
 43398                           ; BSR set to: 0
 43399                           ;eeprom.c: 230: to_save[10] = DRUM_NOTE[3];
 43400  0050A0  C1ED  F06E         	movff	_DRUM_NOTE+3,saveToEEPROM@to_save+10
 43401                           
 43402                           ; BSR set to: 0
 43403                           ;eeprom.c: 231: to_save[11] = DRUM_NOTE[4];
 43404  0050A4  C1EE  F06F         	movff	_DRUM_NOTE+4,saveToEEPROM@to_save+11
 43405                           
 43406                           ; BSR set to: 0
 43407                           ;eeprom.c: 232: to_save[12] = DRUM_NOTE[5];
 43408  0050A8  C1EF  F070         	movff	_DRUM_NOTE+5,saveToEEPROM@to_save+12
 43409                           
 43410                           ; BSR set to: 0
 43411                           ;eeprom.c: 233: to_save[13] = DRUM_NOTE[6];
 43412  0050AC  C1F0  F071         	movff	_DRUM_NOTE+6,saveToEEPROM@to_save+13
 43413                           
 43414                           ; BSR set to: 0
 43415                           ;eeprom.c: 234: to_save[14] = DRUM_NOTE[7];
 43416  0050B0  C1F1  F072         	movff	_DRUM_NOTE+7,saveToEEPROM@to_save+14
 43417                           
 43418                           ; BSR set to: 0
 43419                           ;eeprom.c: 237: to_save[15] = DRUM_CC[0];
 43420  0050B4  C0F5  F073         	movff	_DRUM_CC,saveToEEPROM@to_save+15
 43421                           
 43422                           ; BSR set to: 0
 43423                           ;eeprom.c: 238: to_save[16] = DRUM_CC[1];
 43424  0050B8  C0F6  F074         	movff	_DRUM_CC+1,saveToEEPROM@to_save+16
 43425                           
 43426                           ; BSR set to: 0
 43427                           ;eeprom.c: 239: to_save[17] = DRUM_CC[2];
 43428  0050BC  C0F7  F075         	movff	_DRUM_CC+2,saveToEEPROM@to_save+17
 43429                           
 43430                           ; BSR set to: 0
 43431                           ;eeprom.c: 240: to_save[18] = DRUM_CC[3];
 43432  0050C0  C0F8  F076         	movff	_DRUM_CC+3,saveToEEPROM@to_save+18
 43433                           
 43434                           ; BSR set to: 0
 43435                           ;eeprom.c: 241: to_save[19] = DRUM_CC[4];
 43436  0050C4  C0F9  F077         	movff	_DRUM_CC+4,saveToEEPROM@to_save+19
 43437                           
 43438                           ; BSR set to: 0
 43439                           ;eeprom.c: 242: to_save[20] = DRUM_CC[5];
 43440  0050C8  C0FA  F078         	movff	_DRUM_CC+5,saveToEEPROM@to_save+20
 43441                           
 43442                           ; BSR set to: 0
 43443                           ;eeprom.c: 243: to_save[21] = DRUM_CC[6];
 43444  0050CC  C0FB  F079         	movff	_DRUM_CC+6,saveToEEPROM@to_save+21
 43445                           
 43446                           ; BSR set to: 0
 43447                           ;eeprom.c: 244: to_save[22] = DRUM_CC[7];
 43448  0050D0  C0FC  F07A         	movff	_DRUM_CC+7,saveToEEPROM@to_save+22
 43449                           
 43450                           ;eeprom.c: 247: to_save[23] = POT_MODE;
 43451  0050D4  0E00               	movlw	0
 43452  0050D6  BE05               	btfsc	_POT_MODE/(0+8),_POT_MODE& (0+7),c
 43453  0050D8  0E01               	movlw	1
 43454  0050DA  6F7B               	movwf	(saveToEEPROM@to_save+23)& (0+255),b
 43455                           
 43456                           ; BSR set to: 0
 43457                           ;eeprom.c: 250: to_save[24] = inputPotsArray[0].controller_number;
 43458  0050DC  C289  F07C         	movff	_inputPotsArray+1,saveToEEPROM@to_save+24
 43459                           
 43460                           ; BSR set to: 0
 43461                           ;eeprom.c: 251: to_save[25] = inputPotsArray[0].controller_number_two_byte;
 43462  0050E0  C28A  F07D         	movff	_inputPotsArray+2,saveToEEPROM@to_save+25
 43463                           
 43464                           ; BSR set to: 0
 43465                           ;eeprom.c: 253: to_save[26] = inputPotsArray[1].controller_number;
 43466  0050E4  C28C  F07E         	movff	_inputPotsArray+4,saveToEEPROM@to_save+26
 43467                           
 43468                           ; BSR set to: 0
 43469                           ;eeprom.c: 254: to_save[27] = inputPotsArray[1].controller_number_two_byte;
 43470  0050E8  C28D  F07F         	movff	_inputPotsArray+5,saveToEEPROM@to_save+27
 43471                           
 43472                           ; BSR set to: 0
 43473                           ;eeprom.c: 256: to_save[28] = inputPotsArray[2].controller_number;
 43474  0050EC  C28F  F080         	movff	_inputPotsArray+7,saveToEEPROM@to_save+28
 43475                           
 43476                           ; BSR set to: 0
 43477                           ;eeprom.c: 257: to_save[29] = inputPotsArray[2].controller_number_two_byte;
 43478  0050F0  C290  F081         	movff	_inputPotsArray+8,saveToEEPROM@to_save+29
 43479                           
 43480                           ; BSR set to: 0
 43481                           ;eeprom.c: 259: to_save[30] = inputPotsArray[3].controller_number;
 43482  0050F4  C292  F082         	movff	_inputPotsArray+10,saveToEEPROM@to_save+30
 43483                           
 43484                           ; BSR set to: 0
 43485                           ;eeprom.c: 260: to_save[31] = inputPotsArray[3].controller_number_two_byte;
 43486  0050F8  C293  F083         	movff	_inputPotsArray+11,saveToEEPROM@to_save+31
 43487                           
 43488                           ; BSR set to: 0
 43489                           ;eeprom.c: 262: to_save[32] = inputPotsArray[4].controller_number;
 43490  0050FC  C295  F084         	movff	_inputPotsArray+13,saveToEEPROM@to_save+32
 43491                           
 43492                           ; BSR set to: 0
 43493                           ;eeprom.c: 263: to_save[33] = inputPotsArray[4].controller_number_two_byte;
 43494  005100  C296  F085         	movff	_inputPotsArray+14,saveToEEPROM@to_save+33
 43495                           
 43496                           ; BSR set to: 0
 43497                           ;eeprom.c: 265: to_save[34] = inputPotsArray[5].controller_number;
 43498  005104  C298  F086         	movff	_inputPotsArray+16,saveToEEPROM@to_save+34
 43499                           
 43500                           ; BSR set to: 0
 43501                           ;eeprom.c: 266: to_save[35] = inputPotsArray[5].controller_number_two_byte;
 43502  005108  C299  F087         	movff	_inputPotsArray+17,saveToEEPROM@to_save+35
 43503                           
 43504                           ; BSR set to: 0
 43505                           ;eeprom.c: 268: to_save[36] = inputPotsArray[6].controller_number;
 43506  00510C  C29B  F088         	movff	_inputPotsArray+19,saveToEEPROM@to_save+36
 43507                           
 43508                           ; BSR set to: 0
 43509                           ;eeprom.c: 269: to_save[37] = inputPotsArray[6].controller_number_two_byte;
 43510  005110  C29C  F089         	movff	_inputPotsArray+20,saveToEEPROM@to_save+37
 43511                           
 43512                           ; BSR set to: 0
 43513                           ;eeprom.c: 273: to_save[38] = inputPotsArray[7].controller_number;
 43514  005114  C29E  F08A         	movff	_inputPotsArray+22,saveToEEPROM@to_save+38
 43515                           
 43516                           ; BSR set to: 0
 43517                           ;eeprom.c: 274: to_save[39] = inputPotsArray[7].controller_number_two_byte;
 43518  005118  C29F  F08B         	movff	_inputPotsArray+23,saveToEEPROM@to_save+39
 43519                           
 43520                           ; BSR set to: 0
 43521                           ;eeprom.c: 276: to_save[40] = inputPotsArray[8].controller_number;
 43522  00511C  C2A1  F08C         	movff	_inputPotsArray+25,saveToEEPROM@to_save+40
 43523                           
 43524                           ; BSR set to: 0
 43525                           ;eeprom.c: 277: to_save[41] = inputPotsArray[8].controller_number_two_byte;
 43526  005120  C2A2  F08D         	movff	_inputPotsArray+26,saveToEEPROM@to_save+41
 43527                           
 43528                           ; BSR set to: 0
 43529                           ;eeprom.c: 279: to_save[42] = inputPotsArray[9].controller_number;
 43530  005124  C2A4  F08E         	movff	_inputPotsArray+28,saveToEEPROM@to_save+42
 43531                           
 43532                           ; BSR set to: 0
 43533                           ;eeprom.c: 280: to_save[43] = inputPotsArray[9].controller_number_two_byte;
 43534  005128  C2A5  F08F         	movff	_inputPotsArray+29,saveToEEPROM@to_save+43
 43535                           
 43536                           ; BSR set to: 0
 43537                           ;eeprom.c: 282: to_save[44] = inputPotsArray[10].controller_number;
 43538  00512C  C2A7  F090         	movff	_inputPotsArray+31,saveToEEPROM@to_save+44
 43539                           
 43540                           ; BSR set to: 0
 43541                           ;eeprom.c: 283: to_save[45] = inputPotsArray[10].controller_number_two_byte;
 43542  005130  C2A8  F091         	movff	_inputPotsArray+32,saveToEEPROM@to_save+45
 43543                           
 43544                           ; BSR set to: 0
 43545                           ;eeprom.c: 285: to_save[46] = inputPotsArray[11].controller_number;
 43546  005134  C2AA  F092         	movff	_inputPotsArray+34,saveToEEPROM@to_save+46
 43547                           
 43548                           ; BSR set to: 0
 43549                           ;eeprom.c: 286: to_save[47] = inputPotsArray[11].controller_number_two_byte;
 43550  005138  C2AB  F093         	movff	_inputPotsArray+35,saveToEEPROM@to_save+47
 43551                           
 43552                           ; BSR set to: 0
 43553                           ;eeprom.c: 288: to_save[48] = inputPotsArray[12].controller_number;
 43554  00513C  C2AD  F094         	movff	_inputPotsArray+37,saveToEEPROM@to_save+48
 43555                           
 43556                           ; BSR set to: 0
 43557                           ;eeprom.c: 289: to_save[49] = inputPotsArray[12].controller_number_two_byte;
 43558  005140  C2AE  F095         	movff	_inputPotsArray+38,saveToEEPROM@to_save+49
 43559                           
 43560                           ; BSR set to: 0
 43561                           ;eeprom.c: 291: to_save[50] = inputPotsArray[13].controller_number;
 43562  005144  C2B0  F096         	movff	_inputPotsArray+40,saveToEEPROM@to_save+50
 43563                           
 43564                           ; BSR set to: 0
 43565                           ;eeprom.c: 292: to_save[51] = inputPotsArray[13].controller_number_two_byte;
 43566  005148  C2B1  F097         	movff	_inputPotsArray+41,saveToEEPROM@to_save+51
 43567                           
 43568                           ; BSR set to: 0
 43569                           ;eeprom.c: 294: to_save[52] = inputPotsArray[14].controller_number;
 43570  00514C  C2B3  F098         	movff	_inputPotsArray+43,saveToEEPROM@to_save+52
 43571                           
 43572                           ; BSR set to: 0
 43573                           ;eeprom.c: 295: to_save[53] = inputPotsArray[14].controller_number_two_byte;
 43574  005150  C2B4  F099         	movff	_inputPotsArray+44,saveToEEPROM@to_save+53
 43575                           
 43576                           ; BSR set to: 0
 43577                           ;eeprom.c: 297: to_save[54] = inputPotsArray[15].controller_number;
 43578  005154  C2B6  F09A         	movff	_inputPotsArray+46,saveToEEPROM@to_save+54
 43579                           
 43580                           ; BSR set to: 0
 43581                           ;eeprom.c: 298: to_save[55] = inputPotsArray[15].controller_number_two_byte;
 43582  005158  C2B7  F09B         	movff	_inputPotsArray+47,saveToEEPROM@to_save+55
 43583                           
 43584                           ; BSR set to: 0
 43585                           ;eeprom.c: 302: to_save[56] = channel;
 43586  00515C  C03D  F09C         	movff	_channel,saveToEEPROM@to_save+56
 43587                           
 43588                           ; BSR set to: 0
 43589                           ;eeprom.c: 303: to_save[57] = drumchannel;
 43590  005160  C051  F09D         	movff	_drumchannel,saveToEEPROM@to_save+57
 43591                           
 43592                           ; BSR set to: 0
 43593                           ;eeprom.c: 306: to_save[58] = octave;
 43594  005164  C04F  F09E         	movff	_octave,saveToEEPROM@to_save+58
 43595                           
 43596                           ; BSR set to: 0
 43597                           ;eeprom.c: 307: to_save[59] = semitone;
 43598  005168  C03A  F09F         	movff	_semitone,saveToEEPROM@to_save+59
 43599                           
 43600                           ; BSR set to: 0
 43601                           ;eeprom.c: 310: to_save[60] = patch_number;
 43602  00516C  C0F4  F0A0         	movff	_patch_number,saveToEEPROM@to_save+60
 43603                           
 43604                           ;eeprom.c: 313: to_save[61] = ARPEGGIO_ON;
 43605  005170  0E00               	movlw	0
 43606  005172  BA04               	btfsc	_ARPEGGIO_ON/(0+8),_ARPEGGIO_ON& (0+7),c
 43607  005174  0E01               	movlw	1
 43608  005176  6FA1               	movwf	(saveToEEPROM@to_save+61)& (0+255),b
 43609                           
 43610                           ; BSR set to: 0
 43611                           ;eeprom.c: 314: to_save[62] = BPM;
 43612  005178  C0FF  F0A2         	movff	_BPM,saveToEEPROM@to_save+62
 43613                           
 43614                           ; BSR set to: 0
 43615                           ;eeprom.c: 315: to_save[63] = OCTAVES;
 43616  00517C  C04D  F0A3         	movff	_OCTAVES,saveToEEPROM@to_save+63
 43617                           
 43618                           ; BSR set to: 0
 43619                           ;eeprom.c: 316: to_save[64] = ARPEGGIO_TYPE;
 43620  005180  C034  F0A4         	movff	_ARPEGGIO_TYPE,saveToEEPROM@to_save+64
 43621                           
 43622                           ; BSR set to: 0
 43623                           ;eeprom.c: 317: to_save[65] = NOTE_LENGTH_PULSES;
 43624  005184  C04C  F0A5         	movff	_NOTE_LENGTH_PULSES,saveToEEPROM@to_save+65
 43625                           
 43626                           ;eeprom.c: 318: to_save[66] = LATCH;
 43627  005188  0E00               	movlw	0
 43628  00518A  B404               	btfsc	_LATCH/(0+8),_LATCH& (0+7),c
 43629  00518C  0E01               	movlw	1
 43630  00518E  6FA6               	movwf	(saveToEEPROM@to_save+66)& (0+255),b
 43631                           
 43632                           ;eeprom.c: 319: to_save[67] = AUTO_LATCH;
 43633  005190  0E00               	movlw	0
 43634  005192  B004               	btfsc	_AUTO_LATCH/(0+8),_AUTO_LATCH& (0+7),c
 43635  005194  0E01               	movlw	1
 43636  005196  6FA7               	movwf	(saveToEEPROM@to_save+67)& (0+255),b
 43637                           
 43638                           ;eeprom.c: 320: to_save[68] = UN_LATCH_MODE;
 43639  005198  0E00               	movlw	0
 43640  00519A  B204               	btfsc	_UN_LATCH_MODE/(0+8),_UN_LATCH_MODE& (0+7),c
 43641  00519C  0E01               	movlw	1
 43642  00519E  6FA8               	movwf	(saveToEEPROM@to_save+68)& (0+255),b
 43643                           
 43644                           ;eeprom.c: 321: to_save[69] = AUTO_RANDOMIZE;
 43645  0051A0  0E00               	movlw	0
 43646  0051A2  BC03               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 43647  0051A4  0E01               	movlw	1
 43648  0051A6  6FA9               	movwf	(saveToEEPROM@to_save+69)& (0+255),b
 43649                           
 43650                           ;eeprom.c: 322: to_save[70] = skipFirstLast;
 43651  0051A8  0E00               	movlw	0
 43652  0051AA  BA03               	btfsc	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 43653  0051AC  0E01               	movlw	1
 43654  0051AE  6FAA               	movwf	(saveToEEPROM@to_save+70)& (0+255),b
 43655                           
 43656                           ;eeprom.c: 323: to_save[71] = LAST_NOTE_MODE_KEY_PRESS;
 43657  0051B0  0E00               	movlw	0
 43658  0051B2  B603               	btfsc	_LAST_NOTE_MODE_KEY_PRESS/(0+8),_LAST_NOTE_MODE_KEY_PRESS& (0+7),c
 43659  0051B4  0E01               	movlw	1
 43660  0051B6  6FAB               	movwf	(saveToEEPROM@to_save+71)& (0+255),b
 43661                           
 43662                           ;eeprom.c: 324: to_save[72] = LAST_NOTE_MODE_KEY_RELEASE;
 43663  0051B8  0E00               	movlw	0
 43664  0051BA  B403               	btfsc	_LAST_NOTE_MODE_KEY_RELEASE/(0+8),_LAST_NOTE_MODE_KEY_RELEASE& (0+7),c
 43665  0051BC  0E01               	movlw	1
 43666  0051BE  6FAC               	movwf	(saveToEEPROM@to_save+72)& (0+255),b
 43667                           
 43668                           ;eeprom.c: 325: to_save[73] = LAST_NOTE_MODE_TRANSPOSE;
 43669  0051C0  0E00               	movlw	0
 43670  0051C2  B203               	btfsc	_LAST_NOTE_MODE_TRANSPOSE/(0+8),_LAST_NOTE_MODE_TRANSPOSE& (0+7),c
 43671  0051C4  0E01               	movlw	1
 43672  0051C6  6FAD               	movwf	(saveToEEPROM@to_save+73)& (0+255),b
 43673                           
 43674                           ;eeprom.c: 326: to_save[74] = LAST_NOTE_MODE_RESET;
 43675  0051C8  0E00               	movlw	0
 43676  0051CA  B003               	btfsc	_LAST_NOTE_MODE_RESET/(0+8),_LAST_NOTE_MODE_RESET& (0+7),c
 43677  0051CC  0E01               	movlw	1
 43678  0051CE  6FAE               	movwf	(saveToEEPROM@to_save+74)& (0+255),b
 43679                           
 43680                           ;eeprom.c: 329: for (unsigned int byte_count = 0; byte_count < 75; byte_count++){
 43681  0051D0  0E00               	movlw	0
 43682  0051D2  6FB3               	movwf	(saveToEEPROM@byte_count+1)& (0+255),b
 43683  0051D4  0E00               	movlw	0
 43684  0051D6  6FB2               	movwf	saveToEEPROM@byte_count& (0+255),b
 43685  0051D8                     l31778:
 43686                           
 43687                           ; BSR set to: 0
 43688  0051D8  51B3               	movf	(saveToEEPROM@byte_count+1)& (0+255),w,b
 43689  0051DA  E11B               	bnz	l4489
 43690  0051DC  0E4B               	movlw	75
 43691  0051DE  5DB2               	subwf	saveToEEPROM@byte_count& (0+255),w,b
 43692  0051E0  B0D8               	btfsc	status,0,c
 43693  0051E2  0012               	return	
 43694                           
 43695                           ; BSR set to: 0
 43696                           ;eeprom.c: 330: (Busy_eep(), Write_b_eep((byte_count + baseAddress),to_save[byte_count])
      +                          );
 43697                           
 43698                           ; BSR set to: 0
 43699                           
 43700                           ; BSR set to: 0
 43701  0051E4  EC4E  F04D         	call	_Busy_eep	;wreg free
 43702  0051E8  0100               	movlb	0	; () banked
 43703  0051EA  51AF               	movf	saveToEEPROM@baseAddress& (0+255),w,b
 43704  0051EC  25B2               	addwf	saveToEEPROM@byte_count& (0+255),w,b
 43705  0051EE  6F60               	movwf	Write_b_eep@badd& (0+255),b
 43706  0051F0  51B0               	movf	(saveToEEPROM@baseAddress+1)& (0+255),w,b
 43707  0051F2  21B3               	addwfc	(saveToEEPROM@byte_count+1)& (0+255),w,b
 43708  0051F4  6F61               	movwf	(Write_b_eep@badd+1)& (0+255),b
 43709  0051F6  0E64               	movlw	low saveToEEPROM@to_save
 43710  0051F8  25B2               	addwf	saveToEEPROM@byte_count& (0+255),w,b
 43711  0051FA  6ED9               	movwf	fsr2l,c
 43712  0051FC  0E00               	movlw	high saveToEEPROM@to_save
 43713  0051FE  21B3               	addwfc	(saveToEEPROM@byte_count+1)& (0+255),w,b
 43714  005200  6EDA               	movwf	fsr2h,c
 43715  005202  50DF               	movf	indf2,w,c
 43716  005204  6F62               	movwf	Write_b_eep@bdat& (0+255),b
 43717  005206  ECC2  F04A         	call	_Write_b_eep	;wreg free
 43718  00520A  0100               	movlb	0	; () banked
 43719  00520C  4BB2               	infsnz	saveToEEPROM@byte_count& (0+255),f,b
 43720  00520E  2BB3               	incf	(saveToEEPROM@byte_count+1)& (0+255),f,b
 43721  005210  D7E3               	goto	l31778
 43722  005212                     l4489:
 43723                           
 43724                           ; BSR set to: 0
 43725  005212  0012               	return		;funcret
 43726  005214                     __end_of_saveToEEPROM:
 43727                           	opt stack 0
 43728                           tblptru	equ	0xFF8
 43729                           tblptrh	equ	0xFF7
 43730                           tblptrl	equ	0xFF6
 43731                           tablat	equ	0xFF5
 43732                           prodh	equ	0xFF4
 43733                           prodl	equ	0xFF3
 43734                           intcon	equ	0xFF2
 43735                           intcon2	equ	0xFF1
 43736                           indf0	equ	0xFEF
 43737                           postinc0	equ	0xFEE
 43738                           postdec0	equ	0xFED
 43739                           fsr0h	equ	0xFEA
 43740                           fsr0l	equ	0xFE9
 43741                           wreg	equ	0xFE8
 43742                           postinc1	equ	0xFE6
 43743                           postdec1	equ	0xFE5
 43744                           plusw1	equ	0xFE3
 43745                           fsr1h	equ	0xFE2
 43746                           fsr1l	equ	0xFE1
 43747                           indf2	equ	0xFDF
 43748                           postinc2	equ	0xFDE
 43749                           postdec2	equ	0xFDD
 43750                           plusw2	equ	0xFDB
 43751                           fsr2h	equ	0xFDA
 43752                           fsr2l	equ	0xFD9
 43753                           status	equ	0xFD8
 43754                           
 43755 ;; *************** function _Write_b_eep *****************
 43756 ;; Defined at:
 43757 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\EEP\write_B.c"
 43758 ;; Parameters:    Size  Location     Type
 43759 ;;  badd            2    0[BANK0 ] unsigned int 
 43760 ;;  bdat            1    2[BANK0 ] unsigned char 
 43761 ;; Auto vars:     Size  Location     Type
 43762 ;;  GIE_BIT_VAL     1    3[BANK0 ] unsigned char 
 43763 ;; Return value:  Size  Location     Type
 43764 ;;                  1    wreg      void 
 43765 ;; Registers used:
 43766 ;;		wreg, status,2, status,0
 43767 ;; Tracked objects:
 43768 ;;		On entry : 0/0
 43769 ;;		On exit  : 0/0
 43770 ;;		Unchanged: 0/0
 43771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43772 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43773 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43775 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43776 ;;Total ram usage:        4 bytes
 43777 ;; Hardware stack levels used:    1
 43778 ;; Hardware stack levels required when called:    5
 43779 ;; This function calls:
 43780 ;;		Nothing
 43781 ;; This function is called by:
 43782 ;;		_Function_D_2
 43783 ;;		_Function_G_1
 43784 ;;		_Function_G_2
 43785 ;;		_Function_G_3
 43786 ;;		_Function_G_4
 43787 ;;		_initializeSaveSlotsOnce
 43788 ;;		_saveToEEPROM
 43789 ;; This function uses a non-reentrant model
 43790 ;;
 43791                           
 43792                           	psect	text129
 43793  009584                     __ptext129:
 43794                           	opt stack 0
 43795  009584                     _Write_b_eep:
 43796                           	opt stack 22
 43797                           
 43798                           ; BSR set to: 0
 43799                           ;incstack = 0
 43800  009584  0E00               	movlw	0
 43801  009586  0100               	movlb	0	; () banked
 43802  009588  6F63               	movwf	Write_b_eep@GIE_BIT_VAL& (0+255),b
 43803                           
 43804                           ; BSR set to: 0
 43805  00958A  5161               	movf	(Write_b_eep@badd+1)& (0+255),w,b
 43806  00958C  0B03               	andlw	3
 43807  00958E  6EAA               	movwf	4010,c	;volatile
 43808                           
 43809                           ; BSR set to: 0
 43810  009590  C060  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 43811                           
 43812                           ; BSR set to: 0
 43813  009594  C062  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 43814                           
 43815                           ; BSR set to: 0
 43816  009598  9EA6               	bcf	4006,7,c	;volsfr
 43817                           
 43818                           ; BSR set to: 0
 43819  00959A  9CA6               	bcf	4006,6,c	;volsfr
 43820                           
 43821                           ; BSR set to: 0
 43822  00959C  84A6               	bsf	4006,2,c	;volsfr
 43823                           
 43824                           ; BSR set to: 0
 43825  00959E  0E00               	movlw	0
 43826  0095A0  BEF2               	btfsc	intcon,7,c	;volatile
 43827  0095A2  0E01               	movlw	1
 43828  0095A4  6F63               	movwf	Write_b_eep@GIE_BIT_VAL& (0+255),b
 43829                           
 43830                           ; BSR set to: 0
 43831  0095A6  9EF2               	bcf	intcon,7,c	;volatile
 43832                           
 43833                           ; BSR set to: 0
 43834  0095A8  0E55               	movlw	85
 43835  0095AA  6EA7               	movwf	4007,c	;volsfr
 43836                           
 43837                           ; BSR set to: 0
 43838  0095AC  0EAA               	movlw	170
 43839  0095AE  6EA7               	movwf	4007,c	;volsfr
 43840                           
 43841                           ; BSR set to: 0
 43842  0095B0  82A6               	bsf	4006,1,c	;volsfr
 43843  0095B2                     
 43844                           ; BSR set to: 0
 43845  0095B2  B2A6               	btfsc	4006,1,c	;volsfr
 43846  0095B4  D7FE               	goto	l5662
 43847  0095B6  0100               	movlb	0	; () banked
 43848  0095B8  B163               	btfsc	Write_b_eep@GIE_BIT_VAL& (0+255),0,b
 43849  0095BA  D002               	bra	u57055
 43850  0095BC  9EF2               	bcf	intcon,7,c	;volatile
 43851  0095BE  D001               	bra	u57056
 43852  0095C0                     u57055:
 43853  0095C0  8EF2               	bsf	intcon,7,c	;volatile
 43854  0095C2                     u57056:
 43855  0095C2  94A6               	bcf	4006,2,c	;volsfr
 43856  0095C4  0012               	return		;funcret
 43857  0095C6                     __end_of_Write_b_eep:
 43858                           	opt stack 0
 43859                           tblptru	equ	0xFF8
 43860                           tblptrh	equ	0xFF7
 43861                           tblptrl	equ	0xFF6
 43862                           tablat	equ	0xFF5
 43863                           prodh	equ	0xFF4
 43864                           prodl	equ	0xFF3
 43865                           intcon	equ	0xFF2
 43866                           intcon2	equ	0xFF1
 43867                           indf0	equ	0xFEF
 43868                           postinc0	equ	0xFEE
 43869                           postdec0	equ	0xFED
 43870                           fsr0h	equ	0xFEA
 43871                           fsr0l	equ	0xFE9
 43872                           wreg	equ	0xFE8
 43873                           postinc1	equ	0xFE6
 43874                           postdec1	equ	0xFE5
 43875                           plusw1	equ	0xFE3
 43876                           fsr1h	equ	0xFE2
 43877                           fsr1l	equ	0xFE1
 43878                           indf2	equ	0xFDF
 43879                           postinc2	equ	0xFDE
 43880                           postdec2	equ	0xFDD
 43881                           plusw2	equ	0xFDB
 43882                           fsr2h	equ	0xFDA
 43883                           fsr2l	equ	0xFD9
 43884                           status	equ	0xFD8
 43885                           
 43886 ;; *************** function _Busy_eep *****************
 43887 ;; Defined at:
 43888 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\EEP\busy_eep.c"
 43889 ;; Parameters:    Size  Location     Type
 43890 ;;		None
 43891 ;; Auto vars:     Size  Location     Type
 43892 ;;		None
 43893 ;; Return value:  Size  Location     Type
 43894 ;;                  1    wreg      void 
 43895 ;; Registers used:
 43896 ;;		None
 43897 ;; Tracked objects:
 43898 ;;		On entry : 0/0
 43899 ;;		On exit  : 0/0
 43900 ;;		Unchanged: 0/0
 43901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43905 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43906 ;;Total ram usage:        0 bytes
 43907 ;; Hardware stack levels used:    1
 43908 ;; Hardware stack levels required when called:    5
 43909 ;; This function calls:
 43910 ;;		Nothing
 43911 ;; This function is called by:
 43912 ;;		_Function_D_2
 43913 ;;		_Function_G_1
 43914 ;;		_Function_G_2
 43915 ;;		_Function_G_3
 43916 ;;		_Function_G_4
 43917 ;;		_initializeSaveSlotsOnce
 43918 ;;		_saveToEEPROM
 43919 ;; This function uses a non-reentrant model
 43920 ;;
 43921                           
 43922                           	psect	text130
 43923  009A9C                     __ptext130:
 43924                           	opt stack 0
 43925  009A9C                     _Busy_eep:
 43926                           	opt stack 22
 43927                           
 43928                           ;incstack = 0
 43929  009A9C  B2A6               	btfsc	4006,1,c	;volsfr
 43930  009A9E  D7FE               	goto	_Busy_eep
 43931  009AA0  0012               	return	
 43932  009AA2                     __end_of_Busy_eep:
 43933                           	opt stack 0
 43934                           tblptru	equ	0xFF8
 43935                           tblptrh	equ	0xFF7
 43936                           tblptrl	equ	0xFF6
 43937                           tablat	equ	0xFF5
 43938                           prodh	equ	0xFF4
 43939                           prodl	equ	0xFF3
 43940                           intcon	equ	0xFF2
 43941                           intcon2	equ	0xFF1
 43942                           indf0	equ	0xFEF
 43943                           postinc0	equ	0xFEE
 43944                           postdec0	equ	0xFED
 43945                           fsr0h	equ	0xFEA
 43946                           fsr0l	equ	0xFE9
 43947                           wreg	equ	0xFE8
 43948                           postinc1	equ	0xFE6
 43949                           postdec1	equ	0xFE5
 43950                           plusw1	equ	0xFE3
 43951                           fsr1h	equ	0xFE2
 43952                           fsr1l	equ	0xFE1
 43953                           indf2	equ	0xFDF
 43954                           postinc2	equ	0xFDE
 43955                           postdec2	equ	0xFDD
 43956                           plusw2	equ	0xFDB
 43957                           fsr2h	equ	0xFDA
 43958                           fsr2l	equ	0xFD9
 43959                           status	equ	0xFD8
 43960                           
 43961 ;; *************** function _Read_b_eep *****************
 43962 ;; Defined at:
 43963 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\pic18\plib\EEP\read_B.c"
 43964 ;; Parameters:    Size  Location     Type
 43965 ;;  badd            2    0[BANK0 ] unsigned int 
 43966 ;; Auto vars:     Size  Location     Type
 43967 ;;		None
 43968 ;; Return value:  Size  Location     Type
 43969 ;;                  1    wreg      unsigned char 
 43970 ;; Registers used:
 43971 ;;		wreg, status,2, status,0
 43972 ;; Tracked objects:
 43973 ;;		On entry : 0/0
 43974 ;;		On exit  : 0/0
 43975 ;;		Unchanged: 0/0
 43976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 43977 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43980 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 43981 ;;Total ram usage:        2 bytes
 43982 ;; Hardware stack levels used:    1
 43983 ;; Hardware stack levels required when called:    5
 43984 ;; This function calls:
 43985 ;;		Nothing
 43986 ;; This function is called by:
 43987 ;;		_initializeSaveSlotsOnce
 43988 ;;		_selectSlotOnBoot
 43989 ;;		_loadFromEEPROM
 43990 ;;		_main
 43991 ;; This function uses a non-reentrant model
 43992 ;;
 43993                           
 43994                           	psect	text131
 43995  0099CE                     __ptext131:
 43996                           	opt stack 0
 43997  0099CE                     _Read_b_eep:
 43998                           	opt stack 23
 43999                           
 44000                           ;incstack = 0
 44001  0099CE  0100               	movlb	0	; () banked
 44002  0099D0  5161               	movf	(Read_b_eep@badd+1)& (0+255),w,b
 44003  0099D2  0B03               	andlw	3
 44004  0099D4  6EAA               	movwf	4010,c	;volatile
 44005                           
 44006                           ; BSR set to: 0
 44007  0099D6  C060  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 44008                           
 44009                           ; BSR set to: 0
 44010  0099DA  9CA6               	bcf	4006,6,c	;volsfr
 44011                           
 44012                           ; BSR set to: 0
 44013  0099DC  9EA6               	bcf	4006,7,c	;volsfr
 44014                           
 44015                           ; BSR set to: 0
 44016  0099DE  80A6               	bsf	4006,0,c	;volsfr
 44017                           
 44018                           ; BSR set to: 0
 44019  0099E0  F000               	nop	
 44020  0099E2  F000               	nop	
 44021  0099E4  50A8               	movf	4008,w,c	;volatile
 44022  0099E6  0012               	return	
 44023  0099E8                     __end_of_Read_b_eep:
 44024                           	opt stack 0
 44025                           tblptru	equ	0xFF8
 44026                           tblptrh	equ	0xFF7
 44027                           tblptrl	equ	0xFF6
 44028                           tablat	equ	0xFF5
 44029                           prodh	equ	0xFF4
 44030                           prodl	equ	0xFF3
 44031                           intcon	equ	0xFF2
 44032                           intcon2	equ	0xFF1
 44033                           indf0	equ	0xFEF
 44034                           postinc0	equ	0xFEE
 44035                           postdec0	equ	0xFED
 44036                           fsr0h	equ	0xFEA
 44037                           fsr0l	equ	0xFE9
 44038                           wreg	equ	0xFE8
 44039                           postinc1	equ	0xFE6
 44040                           postdec1	equ	0xFE5
 44041                           plusw1	equ	0xFE3
 44042                           fsr1h	equ	0xFE2
 44043                           fsr1l	equ	0xFE1
 44044                           indf2	equ	0xFDF
 44045                           postinc2	equ	0xFDE
 44046                           postdec2	equ	0xFDD
 44047                           plusw2	equ	0xFDB
 44048                           fsr2h	equ	0xFDA
 44049                           fsr2l	equ	0xFD9
 44050                           status	equ	0xFD8
 44051                           
 44052 ;; *************** function _initializeMenuArray *****************
 44053 ;; Defined at:
 44054 ;;		line 27 in file "menu.c"
 44055 ;; Parameters:    Size  Location     Type
 44056 ;;		None
 44057 ;; Auto vars:     Size  Location     Type
 44058 ;;  i               1    8[BANK0 ] unsigned char 
 44059 ;;  NumberOfElem    1    7[BANK0 ] unsigned char 
 44060 ;; Return value:  Size  Location     Type
 44061 ;;                  1    wreg      void 
 44062 ;; Registers used:
 44063 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 44064 ;; Tracked objects:
 44065 ;;		On entry : 0/0
 44066 ;;		On exit  : 0/0
 44067 ;;		Unchanged: 0/0
 44068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44070 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44071 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44072 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44073 ;;Total ram usage:        3 bytes
 44074 ;; Hardware stack levels used:    1
 44075 ;; Hardware stack levels required when called:    6
 44076 ;; This function calls:
 44077 ;;		___wmul
 44078 ;; This function is called by:
 44079 ;;		_main
 44080 ;; This function uses a non-reentrant model
 44081 ;;
 44082                           
 44083                           	psect	text132
 44084  004E1E                     __ptext132:
 44085                           	opt stack 0
 44086  004E1E                     _initializeMenuArray:
 44087                           	opt stack 24
 44088                           
 44089                           ;menu.c: 30: unsigned char NumberOfElements = sizeof(menuArray)/sizeof(menuArray[0]);
 44090                           
 44091                           ;incstack = 0
 44092  004E1E  0E23               	movlw	35
 44093  004E20  0100               	movlb	0	; () banked
 44094  004E22  6F67               	movwf	initializeMenuArray@NumberOfElements& (0+255),b
 44095                           
 44096                           ;menu.c: 33: for(unsigned char i = 1;i<NumberOfElements;i++) {
 44097  004E24  0E01               	movlw	1
 44098  004E26  6F68               	movwf	initializeMenuArray@i& (0+255),b
 44099  004E28  D03C               	goto	l3449
 44100  004E2A                     
 44101                           ; BSR set to: 0
 44102                           ;menu.c: 34: menuArray[i].address = menuArray[i-1].address + menuArray[i-1].number;
 44103                           
 44104                           ; BSR set to: 0
 44105  004E2A  5168               	movf	initializeMenuArray@i& (0+255),w,b
 44106  004E2C  0D03               	mullw	3
 44107  004E2E  0E01               	movlw	1
 44108  004E30  26F3               	addwf	prodl,f,c
 44109  004E32  0E00               	movlw	0
 44110  004E34  22F4               	addwfc	prodh,f,c
 44111  004E36  0E00               	movlw	low _menuArray
 44112  004E38  24F3               	addwf	prodl,w,c
 44113  004E3A  6ED9               	movwf	fsr2l,c
 44114  004E3C  0E03               	movlw	high _menuArray
 44115  004E3E  20F4               	addwfc	prodh,w,c
 44116  004E40  6EDA               	movwf	fsr2h,c
 44117  004E42  0EFF               	movlw	255
 44118  004E44  2568               	addwf	initializeMenuArray@i& (0+255),w,b
 44119  004E46  6F60               	movwf	___wmul@multiplier& (0+255),b
 44120  004E48  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 44121  004E4A  0EFF               	movlw	255
 44122  004E4C  2361               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
 44123  004E4E  0E00               	movlw	0
 44124  004E50  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 44125  004E52  0E03               	movlw	3
 44126  004E54  6F62               	movwf	___wmul@multiplicand& (0+255),b
 44127  004E56  EC80  F04C         	call	___wmul	;wreg free
 44128  004E5A  0E00               	movlw	low _menuArray
 44129  004E5C  0100               	movlb	0	; () banked
 44130  004E5E  2560               	addwf	?___wmul& (0+255),w,b
 44131  004E60  6EE9               	movwf	fsr0l,c
 44132  004E62  0E03               	movlw	high _menuArray
 44133  004E64  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 44134  004E66  6EEA               	movwf	fsr0h,c
 44135  004E68  50EF               	movf	indf0,w,c
 44136  004E6A  6F66               	movwf	??_initializeMenuArray& (0+255),b
 44137  004E6C  0EFF               	movlw	255
 44138  004E6E  2568               	addwf	initializeMenuArray@i& (0+255),w,b
 44139  004E70  6F60               	movwf	___wmul@multiplier& (0+255),b
 44140  004E72  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
 44141  004E74  0EFF               	movlw	255
 44142  004E76  2361               	addwfc	(___wmul@multiplier+1)& (0+255),f,b
 44143  004E78  0E00               	movlw	0
 44144  004E7A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 44145  004E7C  0E03               	movlw	3
 44146  004E7E  6F62               	movwf	___wmul@multiplicand& (0+255),b
 44147  004E80  EC80  F04C         	call	___wmul	;wreg free
 44148  004E84  0E01               	movlw	1
 44149  004E86  0100               	movlb	0	; () banked
 44150  004E88  2760               	addwf	?___wmul& (0+255),f,b
 44151  004E8A  0E00               	movlw	0
 44152  004E8C  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 44153  004E8E  0E00               	movlw	low _menuArray
 44154  004E90  2560               	addwf	?___wmul& (0+255),w,b
 44155  004E92  6EE9               	movwf	fsr0l,c
 44156  004E94  0E03               	movlw	high _menuArray
 44157  004E96  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 44158  004E98  6EEA               	movwf	fsr0h,c
 44159  004E9A  50EF               	movf	indf0,w,c
 44160  004E9C  2566               	addwf	??_initializeMenuArray& (0+255),w,b
 44161  004E9E  6EDF               	movwf	indf2,c
 44162                           
 44163                           ; BSR set to: 0
 44164  004EA0  2B68               	incf	initializeMenuArray@i& (0+255),f,b
 44165  004EA2                     l3449:
 44166                           
 44167                           ; BSR set to: 0
 44168                           
 44169                           ; BSR set to: 0
 44170  004EA2  5167               	movf	initializeMenuArray@NumberOfElements& (0+255),w,b
 44171  004EA4  5D68               	subwf	initializeMenuArray@i& (0+255),w,b
 44172  004EA6  A0D8               	btfss	status,0,c
 44173  004EA8  D7C0               	goto	l3450
 44174                           
 44175                           ; BSR set to: 0
 44176                           ;menu.c: 35: }
 44177                           ;menu.c: 38: mainMenu = menuArray[0];
 44178  004EAA  C300  F177         	movff	_menuArray,_mainMenu
 44179  004EAE  C301  F178         	movff	_menuArray+1,_mainMenu+1
 44180  004EB2  C302  F179         	movff	_menuArray+2,_mainMenu+2
 44181                           
 44182                           ;menu.c: 39: keyboardMenu = menuArray[1];
 44183  004EB6  C303  F174         	movff	_menuArray+3,_keyboardMenu
 44184  004EBA  C304  F175         	movff	_menuArray+4,_keyboardMenu+1
 44185  004EBE  C305  F176         	movff	_menuArray+5,_keyboardMenu+2
 44186                           
 44187                           ;menu.c: 40: modeMenu = menuArray[2];
 44188  004EC2  C306  F171         	movff	_menuArray+6,_modeMenu
 44189  004EC6  C307  F172         	movff	_menuArray+7,_modeMenu+1
 44190  004ECA  C308  F173         	movff	_menuArray+8,_modeMenu+2
 44191                           
 44192                           ;menu.c: 41: triadMenu = menuArray[3];
 44193  004ECE  C309  F16E         	movff	_menuArray+9,_triadMenu
 44194  004ED2  C30A  F16F         	movff	_menuArray+10,_triadMenu+1
 44195  004ED6  C30B  F170         	movff	_menuArray+11,_triadMenu+2
 44196                           
 44197                           ;menu.c: 42: seventhMenu = menuArray[4];
 44198  004EDA  C30C  F16B         	movff	_menuArray+12,_seventhMenu
 44199  004EDE  C30D  F16C         	movff	_menuArray+13,_seventhMenu+1
 44200  004EE2  C30E  F16D         	movff	_menuArray+14,_seventhMenu+2
 44201                           
 44202                           ;menu.c: 43: transposeMenu = menuArray[5];
 44203  004EE6  C30F  F168         	movff	_menuArray+15,_transposeMenu
 44204  004EEA  C310  F169         	movff	_menuArray+16,_transposeMenu+1
 44205  004EEE  C311  F16A         	movff	_menuArray+17,_transposeMenu+2
 44206                           
 44207                           ;menu.c: 44: drumMenu = menuArray[6];
 44208  004EF2  C312  F165         	movff	_menuArray+18,_drumMenu
 44209  004EF6  C313  F166         	movff	_menuArray+19,_drumMenu+1
 44210  004EFA  C314  F167         	movff	_menuArray+20,_drumMenu+2
 44211                           
 44212                           ;menu.c: 45: drumCCTypeMenu = menuArray[7];
 44213  004EFE  C315  F162         	movff	_menuArray+21,_drumCCTypeMenu
 44214  004F02  C316  F163         	movff	_menuArray+22,_drumCCTypeMenu+1
 44215  004F06  C317  F164         	movff	_menuArray+23,_drumCCTypeMenu+2
 44216                           
 44217                           ;menu.c: 46: drumNNMenu = menuArray[8];
 44218  004F0A  C318  F15F         	movff	_menuArray+24,_drumNNMenu
 44219  004F0E  C319  F160         	movff	_menuArray+25,_drumNNMenu+1
 44220  004F12  C31A  F161         	movff	_menuArray+26,_drumNNMenu+2
 44221                           
 44222                           ;menu.c: 47: drumCCMenu = menuArray[9];
 44223  004F16  C31B  F15C         	movff	_menuArray+27,_drumCCMenu
 44224  004F1A  C31C  F15D         	movff	_menuArray+28,_drumCCMenu+1
 44225  004F1E  C31D  F15E         	movff	_menuArray+29,_drumCCMenu+2
 44226                           
 44227                           ;menu.c: 48: potsMenu = menuArray[10];
 44228  004F22  C31E  F159         	movff	_menuArray+30,_potsMenu
 44229  004F26  C31F  F15A         	movff	_menuArray+31,_potsMenu+1
 44230  004F2A  C320  F15B         	movff	_menuArray+32,_potsMenu+2
 44231                           
 44232                           ;menu.c: 49: potsResoMenu = menuArray[11];
 44233  004F2E  C321  F156         	movff	_menuArray+33,_potsResoMenu
 44234  004F32  C322  F157         	movff	_menuArray+34,_potsResoMenu+1
 44235  004F36  C323  F158         	movff	_menuArray+35,_potsResoMenu+2
 44236                           
 44237                           ;menu.c: 50: potsCCMenu = menuArray[12];
 44238  004F3A  C324  F150         	movff	_menuArray+36,_potsCCMenu
 44239  004F3E  C325  F151         	movff	_menuArray+37,_potsCCMenu+1
 44240  004F42  C326  F152         	movff	_menuArray+38,_potsCCMenu+2
 44241                           
 44242                           ;menu.c: 51: slidepotsCCMenu = menuArray[13];
 44243  004F46  C327  F14D         	movff	_menuArray+39,_slidepotsCCMenu
 44244  004F4A  C328  F14E         	movff	_menuArray+40,_slidepotsCCMenu+1
 44245  004F4E  C329  F14F         	movff	_menuArray+41,_slidepotsCCMenu+2
 44246                           
 44247                           ;menu.c: 52: joystickCCMenu = menuArray[14];
 44248  004F52  C32A  F14A         	movff	_menuArray+42,_joystickCCMenu
 44249  004F56  C32B  F14B         	movff	_menuArray+43,_joystickCCMenu+1
 44250  004F5A  C32C  F14C         	movff	_menuArray+44,_joystickCCMenu+2
 44251                           
 44252                           ;menu.c: 53: midiChannelMenu = menuArray[15];
 44253  004F5E  C32D  F147         	movff	_menuArray+45,_midiChannelMenu
 44254  004F62  C32E  F148         	movff	_menuArray+46,_midiChannelMenu+1
 44255  004F66  C32F  F149         	movff	_menuArray+47,_midiChannelMenu+2
 44256                           
 44257                           ;menu.c: 54: eepromMenu = menuArray[16];
 44258  004F6A  C330  F13B         	movff	_menuArray+48,_eepromMenu
 44259  004F6E  C331  F13C         	movff	_menuArray+49,_eepromMenu+1
 44260  004F72  C332  F13D         	movff	_menuArray+50,_eepromMenu+2
 44261                           
 44262                           ;menu.c: 55: savesMenu = menuArray[17];
 44263  004F76  C333  F0E3         	movff	_menuArray+51,_savesMenu
 44264  004F7A  C334  F0E4         	movff	_menuArray+52,_savesMenu+1
 44265  004F7E  C335  F0E5         	movff	_menuArray+53,_savesMenu+2
 44266                           
 44267                           ;menu.c: 56: encoderPolarityMenu = menuArray[18];
 44268  004F82  C336  F138         	movff	_menuArray+54,_encoderPolarityMenu
 44269  004F86  C337  F139         	movff	_menuArray+55,_encoderPolarityMenu+1
 44270  004F8A  C338  F13A         	movff	_menuArray+56,_encoderPolarityMenu+2
 44271                           
 44272                           ;menu.c: 57: arpeggiatorMenu = menuArray[19];
 44273  004F8E  C339  F0E0         	movff	_menuArray+57,_arpeggiatorMenu
 44274  004F92  C33A  F0E1         	movff	_menuArray+58,_arpeggiatorMenu+1
 44275  004F96  C33B  F0E2         	movff	_menuArray+59,_arpeggiatorMenu+2
 44276                           
 44277                           ;menu.c: 58: arpeggiatorOnOffMenu = menuArray[20];
 44278  004F9A  C33C  F135         	movff	_menuArray+60,_arpeggiatorOnOffMenu
 44279  004F9E  C33D  F136         	movff	_menuArray+61,_arpeggiatorOnOffMenu+1
 44280  004FA2  C33E  F137         	movff	_menuArray+62,_arpeggiatorOnOffMenu+2
 44281                           
 44282                           ;menu.c: 59: arpeggiatorTypeMenu = menuArray[21];
 44283  004FA6  C33F  F12C         	movff	_menuArray+63,_arpeggiatorTypeMenu
 44284  004FAA  C340  F12D         	movff	_menuArray+64,_arpeggiatorTypeMenu+1
 44285  004FAE  C341  F12E         	movff	_menuArray+65,_arpeggiatorTypeMenu+2
 44286                           
 44287                           ;menu.c: 60: arpeggiatorNoteLengthMenu = menuArray[22];
 44288  004FB2  C342  F129         	movff	_menuArray+66,_arpeggiatorNoteLengthMenu
 44289  004FB6  C343  F12A         	movff	_menuArray+67,_arpeggiatorNoteLengthMenu+1
 44290  004FBA  C344  F12B         	movff	_menuArray+68,_arpeggiatorNoteLengthMenu+2
 44291                           
 44292                           ;menu.c: 61: arpeggiatorLatchMenu = menuArray[23];
 44293  004FBE  C345  F126         	movff	_menuArray+69,_arpeggiatorLatchMenu
 44294  004FC2  C346  F127         	movff	_menuArray+70,_arpeggiatorLatchMenu+1
 44295  004FC6  C347  F128         	movff	_menuArray+71,_arpeggiatorLatchMenu+2
 44296                           
 44297                           ;menu.c: 62: arpeggiatorLatchOnOffMenu = menuArray[24];
 44298  004FCA  C348  F123         	movff	_menuArray+72,_arpeggiatorLatchOnOffMenu
 44299  004FCE  C349  F124         	movff	_menuArray+73,_arpeggiatorLatchOnOffMenu+1
 44300  004FD2  C34A  F125         	movff	_menuArray+74,_arpeggiatorLatchOnOffMenu+2
 44301                           
 44302                           ;menu.c: 63: arpeggiatorAutoLatchOnOffMenu = menuArray[25];
 44303  004FD6  C34B  F120         	movff	_menuArray+75,_arpeggiatorAutoLatchOnOffMenu
 44304  004FDA  C34C  F121         	movff	_menuArray+76,_arpeggiatorAutoLatchOnOffMenu+1
 44305  004FDE  C34D  F122         	movff	_menuArray+77,_arpeggiatorAutoLatchOnOffMenu+2
 44306                           
 44307                           ;menu.c: 64: arpeggiatorUnLatchModeMenu = menuArray[26];
 44308  004FE2  C34E  F11D         	movff	_menuArray+78,_arpeggiatorUnLatchModeMenu
 44309  004FE6  C34F  F11E         	movff	_menuArray+79,_arpeggiatorUnLatchModeMenu+1
 44310  004FEA  C350  F11F         	movff	_menuArray+80,_arpeggiatorUnLatchModeMenu+2
 44311                           
 44312                           ;menu.c: 65: arpeggiatorRandomizeSkipMenu = menuArray[27];
 44313  004FEE  C351  F11A         	movff	_menuArray+81,_arpeggiatorRandomizeSkipMenu
 44314  004FF2  C352  F11B         	movff	_menuArray+82,_arpeggiatorRandomizeSkipMenu+1
 44315  004FF6  C353  F11C         	movff	_menuArray+83,_arpeggiatorRandomizeSkipMenu+2
 44316                           
 44317                           ;menu.c: 66: arpeggiatorRandomizeTypeMenu = menuArray[28];
 44318  004FFA  C354  F117         	movff	_menuArray+84,_arpeggiatorRandomizeTypeMenu
 44319  004FFE  C355  F118         	movff	_menuArray+85,_arpeggiatorRandomizeTypeMenu+1
 44320  005002  C356  F119         	movff	_menuArray+86,_arpeggiatorRandomizeTypeMenu+2
 44321                           
 44322                           ;menu.c: 67: arpeggiatorSkipFirstLastMenu = menuArray[29];
 44323  005006  C357  F114         	movff	_menuArray+87,_arpeggiatorSkipFirstLastMenu
 44324  00500A  C358  F115         	movff	_menuArray+88,_arpeggiatorSkipFirstLastMenu+1
 44325  00500E  C359  F116         	movff	_menuArray+89,_arpeggiatorSkipFirstLastMenu+2
 44326                           
 44327                           ;menu.c: 68: arpeggiatorLastNoteModeMenu = menuArray[30];
 44328  005012  C35A  F0DD         	movff	_menuArray+90,_arpeggiatorLastNoteModeMenu
 44329  005016  C35B  F0DE         	movff	_menuArray+91,_arpeggiatorLastNoteModeMenu+1
 44330  00501A  C35C  F0DF         	movff	_menuArray+92,_arpeggiatorLastNoteModeMenu+2
 44331                           
 44332                           ; BSR set to: 0
 44333  00501E  0012               	return		;funcret
 44334  005020                     __end_of_initializeMenuArray:
 44335                           	opt stack 0
 44336                           tblptru	equ	0xFF8
 44337                           tblptrh	equ	0xFF7
 44338                           tblptrl	equ	0xFF6
 44339                           tablat	equ	0xFF5
 44340                           prodh	equ	0xFF4
 44341                           prodl	equ	0xFF3
 44342                           intcon	equ	0xFF2
 44343                           intcon2	equ	0xFF1
 44344                           indf0	equ	0xFEF
 44345                           postinc0	equ	0xFEE
 44346                           postdec0	equ	0xFED
 44347                           fsr0h	equ	0xFEA
 44348                           fsr0l	equ	0xFE9
 44349                           wreg	equ	0xFE8
 44350                           postinc1	equ	0xFE6
 44351                           postdec1	equ	0xFE5
 44352                           plusw1	equ	0xFE3
 44353                           fsr1h	equ	0xFE2
 44354                           fsr1l	equ	0xFE1
 44355                           indf2	equ	0xFDF
 44356                           postinc2	equ	0xFDE
 44357                           postdec2	equ	0xFDD
 44358                           plusw2	equ	0xFDB
 44359                           fsr2h	equ	0xFDA
 44360                           fsr2l	equ	0xFD9
 44361                           status	equ	0xFD8
 44362                           
 44363 ;; *************** function ___wmul *****************
 44364 ;; Defined at:
 44365 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 44366 ;; Parameters:    Size  Location     Type
 44367 ;;  multiplier      2    0[BANK0 ] unsigned int 
 44368 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 44369 ;; Auto vars:     Size  Location     Type
 44370 ;;  product         2    4[BANK0 ] unsigned int 
 44371 ;; Return value:  Size  Location     Type
 44372 ;;                  2    0[BANK0 ] unsigned int 
 44373 ;; Registers used:
 44374 ;;		wreg, status,2, status,0, prodl, prodh
 44375 ;; Tracked objects:
 44376 ;;		On entry : 0/0
 44377 ;;		On exit  : 0/0
 44378 ;;		Unchanged: 0/0
 44379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44380 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44381 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44383 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44384 ;;Total ram usage:        6 bytes
 44385 ;; Hardware stack levels used:    1
 44386 ;; Hardware stack levels required when called:    5
 44387 ;; This function calls:
 44388 ;;		Nothing
 44389 ;; This function is called by:
 44390 ;;		_processOctave
 44391 ;;		_initializeMenuArray
 44392 ;;		_menu_lcd
 44393 ;;		_Function_A_1
 44394 ;;		_Function_A_2
 44395 ;;		_Function_A_3
 44396 ;;		_Function_A
 44397 ;;		_Function_B
 44398 ;;		_Function_C_1
 44399 ;;		_Function_C_2
 44400 ;;		_Function_C_3
 44401 ;;		_Function_C
 44402 ;;		_Function_D_1
 44403 ;;		_Function_D_3
 44404 ;;		_Function_D_4
 44405 ;;		_Function_D_5
 44406 ;;		_Function_D
 44407 ;;		_Function_E
 44408 ;;		_Function_G_1
 44409 ;;		_Function_G_2
 44410 ;;		_Function_G_4
 44411 ;;		_Function_G
 44412 ;;		_Function_H
 44413 ;;		_Function_H_4
 44414 ;;		_Function_H_5
 44415 ;;		_Function_H_6
 44416 ;;		_Function_H_8
 44417 ;;		_Function_H_9_1
 44418 ;;		_Function_H_9_2
 44419 ;;		_Function_H_9_3
 44420 ;;		_Function_H_9_4
 44421 ;;		_Function_H_9
 44422 ;; This function uses a non-reentrant model
 44423 ;;
 44424                           
 44425                           	psect	text133
 44426  009900                     __ptext133:
 44427                           	opt stack 0
 44428  009900                     ___wmul:
 44429                           	opt stack 24
 44430                           
 44431                           ; BSR set to: 0
 44432                           ;incstack = 0
 44433  009900  0100               	movlb	0	; () banked
 44434  009902  5160               	movf	___wmul@multiplier& (0+255),w,b
 44435  009904  0362               	mulwf	___wmul@multiplicand& (0+255),b
 44436  009906  CFF3 F064          	movff	prodl,___wmul@product
 44437  00990A  CFF4 F065          	movff	prodh,___wmul@product+1
 44438  00990E  5160               	movf	___wmul@multiplier& (0+255),w,b
 44439  009910  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 44440  009912  50F3               	movf	prodl,w,c
 44441  009914  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 44442  009916  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 44443  009918  0362               	mulwf	___wmul@multiplicand& (0+255),b
 44444  00991A  50F3               	movf	prodl,w,c
 44445  00991C  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 44446                           
 44447                           ; BSR set to: 0
 44448  00991E  C064  F060         	movff	___wmul@product,?___wmul
 44449  009922  C065  F061         	movff	___wmul@product+1,?___wmul+1
 44450  009926  0012               	return	
 44451  009928                     __end_of___wmul:
 44452                           	opt stack 0
 44453                           tblptru	equ	0xFF8
 44454                           tblptrh	equ	0xFF7
 44455                           tblptrl	equ	0xFF6
 44456                           tablat	equ	0xFF5
 44457                           prodh	equ	0xFF4
 44458                           prodl	equ	0xFF3
 44459                           intcon	equ	0xFF2
 44460                           intcon2	equ	0xFF1
 44461                           indf0	equ	0xFEF
 44462                           postinc0	equ	0xFEE
 44463                           postdec0	equ	0xFED
 44464                           fsr0h	equ	0xFEA
 44465                           fsr0l	equ	0xFE9
 44466                           wreg	equ	0xFE8
 44467                           postinc1	equ	0xFE6
 44468                           postdec1	equ	0xFE5
 44469                           plusw1	equ	0xFE3
 44470                           fsr1h	equ	0xFE2
 44471                           fsr1l	equ	0xFE1
 44472                           indf2	equ	0xFDF
 44473                           postinc2	equ	0xFDE
 44474                           postdec2	equ	0xFDD
 44475                           plusw2	equ	0xFDB
 44476                           fsr2h	equ	0xFDA
 44477                           fsr2l	equ	0xFD9
 44478                           status	equ	0xFD8
 44479                           
 44480 ;; *************** function _displayTest *****************
 44481 ;; Defined at:
 44482 ;;		line 32 in file "segment.c"
 44483 ;; Parameters:    Size  Location     Type
 44484 ;;		None
 44485 ;; Auto vars:     Size  Location     Type
 44486 ;;		None
 44487 ;; Return value:  Size  Location     Type
 44488 ;;                  1    wreg      void 
 44489 ;; Registers used:
 44490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 44491 ;; Tracked objects:
 44492 ;;		On entry : 0/0
 44493 ;;		On exit  : 0/0
 44494 ;;		Unchanged: 0/0
 44495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44498 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44499 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44500 ;;Total ram usage:        2 bytes
 44501 ;; Hardware stack levels used:    1
 44502 ;; Hardware stack levels required when called:    6
 44503 ;; This function calls:
 44504 ;;		_strcpy
 44505 ;; This function is called by:
 44506 ;;		_main
 44507 ;; This function uses a non-reentrant model
 44508 ;;
 44509                           
 44510                           	psect	text134
 44511  008678                     __ptext134:
 44512                           	opt stack 0
 44513  008678                     _displayTest:
 44514                           	opt stack 24
 44515                           
 44516                           ;segment.c: 38: DISPLAY_MODE = 1;
 44517                           
 44518                           ; BSR set to: 0
 44519                           ;incstack = 0
 44520  008678  0E01               	movlw	1
 44521  00867A  0100               	movlb	0	; () banked
 44522  00867C  6FEF               	movwf	_DISPLAY_MODE& (0+255),b
 44523                           
 44524                           ; BSR set to: 0
 44525                           ;segment.c: 39: strcpy(string_to_display,"tESt");
 44526  00867E  0EFB               	movlw	low _string_to_display
 44527  008680  6F60               	movwf	strcpy@to& (0+255),b
 44528  008682  0E01               	movlw	high _string_to_display
 44529  008684  6F61               	movwf	(strcpy@to+1)& (0+255),b
 44530  008686  0ED7               	movlw	low STR_8
 44531  008688  6F62               	movwf	strcpy@from& (0+255),b
 44532  00868A  0EFF               	movlw	high STR_8
 44533  00868C  6F63               	movwf	(strcpy@from+1)& (0+255),b
 44534  00868E  ECE4  F04B         	call	_strcpy	;wreg free
 44535                           
 44536                           ;segment.c: 41: _delay((unsigned long)((500)*(20000000/4000.0)));
 44537  008692  0E0D               	movlw	13
 44538  008694  0100               	movlb	0	; () banked
 44539  008696  6F67               	movwf	(??_displayTest+1)& (0+255),b
 44540  008698  0EAF               	movlw	175
 44541  00869A  6F66               	movwf	??_displayTest& (0+255),b
 44542  00869C  0EB6               	movlw	182
 44543  00869E                     u67707:
 44544  00869E  2EE8               	decfsz	wreg,f,c
 44545  0086A0  D7FE               	bra	u67707
 44546  0086A2  2F66               	decfsz	??_displayTest& (0+255),f,b
 44547  0086A4  D7FC               	bra	u67707
 44548  0086A6  2F67               	decfsz	(??_displayTest+1)& (0+255),f,b
 44549  0086A8  D7FA               	bra	u67707
 44550  0086AA  F000               	nop	
 44551                           
 44552                           ;segment.c: 43: DISPLAY_MODE = 0;
 44553  0086AC  0E00               	movlw	0
 44554  0086AE  0100               	movlb	0	; () banked
 44555  0086B0  6FEF               	movwf	_DISPLAY_MODE& (0+255),b
 44556                           
 44557                           ; BSR set to: 0
 44558                           ;segment.c: 44: DIGIT_MODE = 0;
 44559  0086B2  0E00               	movlw	0
 44560  0086B4  6E39               	movwf	_DIGIT_MODE,c
 44561                           
 44562                           ; BSR set to: 0
 44563                           ;segment.c: 45: number_to_display = 8888;
 44564  0086B6  0E22               	movlw	34
 44565  0086B8  6E4B               	movwf	_number_to_display+1,c
 44566  0086BA  0EB8               	movlw	184
 44567  0086BC  6E4A               	movwf	_number_to_display,c
 44568                           
 44569                           ; BSR set to: 0
 44570                           ;segment.c: 46: light_decimal_points = 1;
 44571  0086BE  8406               	bsf	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 44572                           
 44573                           ; BSR set to: 0
 44574                           ;segment.c: 47: _delay((unsigned long)((1000)*(20000000/4000.0)));
 44575  0086C0  0E1A               	movlw	26
 44576  0086C2  0100               	movlb	0	; () banked
 44577  0086C4  6F67               	movwf	(??_displayTest+1)& (0+255),b
 44578  0086C6  0E5E               	movlw	94
 44579  0086C8  6F66               	movwf	??_displayTest& (0+255),b
 44580  0086CA  0E6E               	movlw	110
 44581  0086CC                     u67717:
 44582  0086CC  2EE8               	decfsz	wreg,f,c
 44583  0086CE  D7FE               	bra	u67717
 44584  0086D0  2F66               	decfsz	??_displayTest& (0+255),f,b
 44585  0086D2  D7FC               	bra	u67717
 44586  0086D4  2F67               	decfsz	(??_displayTest+1)& (0+255),f,b
 44587  0086D6  D7FA               	bra	u67717
 44588  0086D8  F000               	nop	
 44589                           
 44590                           ;segment.c: 48: light_decimal_points = 0;
 44591  0086DA  9406               	bcf	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 44592                           
 44593                           ;segment.c: 50: DISPLAY_MODE = 1;
 44594  0086DC  0E01               	movlw	1
 44595  0086DE  0100               	movlb	0	; () banked
 44596  0086E0  6FEF               	movwf	_DISPLAY_MODE& (0+255),b
 44597                           
 44598                           ; BSR set to: 0
 44599                           ;segment.c: 51: strcpy(string_to_display,"    ");
 44600  0086E2  0EFB               	movlw	low _string_to_display
 44601  0086E4  6F60               	movwf	strcpy@to& (0+255),b
 44602  0086E6  0E01               	movlw	high _string_to_display
 44603  0086E8  6F61               	movwf	(strcpy@to+1)& (0+255),b
 44604  0086EA  0E70               	movlw	low (STR_10+12)
 44605  0086EC  6F62               	movwf	strcpy@from& (0+255),b
 44606  0086EE  0EFD               	movlw	high (STR_10+12)
 44607  0086F0  6F63               	movwf	(strcpy@from+1)& (0+255),b
 44608  0086F2  ECE4  F04B         	call	_strcpy	;wreg free
 44609  0086F6  0012               	return		;funcret
 44610  0086F8                     __end_of_displayTest:
 44611                           	opt stack 0
 44612                           tblptru	equ	0xFF8
 44613                           tblptrh	equ	0xFF7
 44614                           tblptrl	equ	0xFF6
 44615                           tablat	equ	0xFF5
 44616                           prodh	equ	0xFF4
 44617                           prodl	equ	0xFF3
 44618                           intcon	equ	0xFF2
 44619                           intcon2	equ	0xFF1
 44620                           indf0	equ	0xFEF
 44621                           postinc0	equ	0xFEE
 44622                           postdec0	equ	0xFED
 44623                           fsr0h	equ	0xFEA
 44624                           fsr0l	equ	0xFE9
 44625                           wreg	equ	0xFE8
 44626                           postinc1	equ	0xFE6
 44627                           postdec1	equ	0xFE5
 44628                           plusw1	equ	0xFE3
 44629                           fsr1h	equ	0xFE2
 44630                           fsr1l	equ	0xFE1
 44631                           indf2	equ	0xFDF
 44632                           postinc2	equ	0xFDE
 44633                           postdec2	equ	0xFDD
 44634                           plusw2	equ	0xFDB
 44635                           fsr2h	equ	0xFDA
 44636                           fsr2l	equ	0xFD9
 44637                           status	equ	0xFD8
 44638                           
 44639 ;; *************** function _strcpy *****************
 44640 ;; Defined at:
 44641 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\strcpy.c"
 44642 ;; Parameters:    Size  Location     Type
 44643 ;;  to              2    0[BANK0 ] PTR unsigned char 
 44644 ;;		 -> string_to_display(5), 
 44645 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 44646 ;;		 -> STR_61(5), STR_59(5), STR_56(5), STR_54(5), 
 44647 ;;		 -> STR_44(5), STR_43(5), STR_41(5), STR_9(5), 
 44648 ;;		 -> STR_8(5), STR_7(5), STR_6(5), STR_5(5), 
 44649 ;;		 -> STR_4(5), STR_3(5), STR_2(5), STR_1(5), 
 44650 ;; Auto vars:     Size  Location     Type
 44651 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 44652 ;;		 -> string_to_display(5), 
 44653 ;; Return value:  Size  Location     Type
 44654 ;;                  2    0[BANK0 ] PTR unsigned char 
 44655 ;; Registers used:
 44656 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 44657 ;; Tracked objects:
 44658 ;;		On entry : 0/0
 44659 ;;		On exit  : 0/0
 44660 ;;		Unchanged: 0/0
 44661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44662 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44663 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44665 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44666 ;;Total ram usage:        6 bytes
 44667 ;; Hardware stack levels used:    1
 44668 ;; Hardware stack levels required when called:    5
 44669 ;; This function calls:
 44670 ;;		Nothing
 44671 ;; This function is called by:
 44672 ;;		_doTheLatch
 44673 ;;		_doTheUnLatch
 44674 ;;		_processOctave
 44675 ;;		_displayTest
 44676 ;;		_Function_H_1
 44677 ;;		_Function_H_6_2
 44678 ;;		_Function_H_7
 44679 ;; This function uses a non-reentrant model
 44680 ;;
 44681                           
 44682                           	psect	text135
 44683  0097C8                     __ptext135:
 44684                           	opt stack 0
 44685  0097C8                     _strcpy:
 44686                           	opt stack 20
 44687                           
 44688                           ;incstack = 0
 44689  0097C8  C060  F064         	movff	strcpy@to,strcpy@cp
 44690  0097CC  C061  F065         	movff	strcpy@to+1,strcpy@cp+1
 44691  0097D0  D005               	goto	l6220
 44692  0097D2  0100               	movlb	0	; () banked
 44693  0097D4  4B64               	infsnz	strcpy@cp& (0+255),f,b
 44694  0097D6  2B65               	incf	(strcpy@cp+1)& (0+255),f,b
 44695  0097D8  4B62               	infsnz	strcpy@from& (0+255),f,b
 44696  0097DA  2B63               	incf	(strcpy@from+1)& (0+255),f,b
 44697  0097DC                     l6220:
 44698                           
 44699                           ; BSR set to: 0
 44700  0097DC  C062  FFF6         	movff	strcpy@from,tblptrl
 44701  0097E0  C063  FFF7         	movff	strcpy@from+1,tblptrh
 44702  0097E4                     	if	0	;tblptru may be non-zero
 44703  0097E4                     	endif
 44704  0097E4                     	if	0	;tblptru may be non-zero
 44705  0097E4                     	endif
 44706  0097E4  C064  FFD9         	movff	strcpy@cp,fsr2l
 44707  0097E8  C065  FFDA         	movff	strcpy@cp+1,fsr2h
 44708  0097EC  0008               	tblrd		*
 44709  0097EE  CFF5 FFDF          	movff	tablat,indf2
 44710  0097F2  50DF               	movf	indf2,w,c
 44711  0097F4  B4D8               	btfsc	status,2,c
 44712  0097F6  0012               	return	
 44713  0097F8  D7EC               	goto	l6221
 44714  0097FA                     __end_of_strcpy:
 44715                           	opt stack 0
 44716                           tblptru	equ	0xFF8
 44717                           tblptrh	equ	0xFF7
 44718                           tblptrl	equ	0xFF6
 44719                           tablat	equ	0xFF5
 44720                           prodh	equ	0xFF4
 44721                           prodl	equ	0xFF3
 44722                           intcon	equ	0xFF2
 44723                           intcon2	equ	0xFF1
 44724                           indf0	equ	0xFEF
 44725                           postinc0	equ	0xFEE
 44726                           postdec0	equ	0xFED
 44727                           fsr0h	equ	0xFEA
 44728                           fsr0l	equ	0xFE9
 44729                           wreg	equ	0xFE8
 44730                           postinc1	equ	0xFE6
 44731                           postdec1	equ	0xFE5
 44732                           plusw1	equ	0xFE3
 44733                           fsr1h	equ	0xFE2
 44734                           fsr1l	equ	0xFE1
 44735                           indf2	equ	0xFDF
 44736                           postinc2	equ	0xFDE
 44737                           postdec2	equ	0xFDD
 44738                           plusw2	equ	0xFDB
 44739                           fsr2h	equ	0xFDA
 44740                           fsr2l	equ	0xFD9
 44741                           status	equ	0xFD8
 44742                           
 44743 ;; *************** function _Lcd_Start *****************
 44744 ;; Defined at:
 44745 ;;		line 94 in file "lcd.c"
 44746 ;; Parameters:    Size  Location     Type
 44747 ;;		None
 44748 ;; Auto vars:     Size  Location     Type
 44749 ;;  i               2    4[BANK0 ] int 
 44750 ;; Return value:  Size  Location     Type
 44751 ;;                  1    wreg      void 
 44752 ;; Registers used:
 44753 ;;		wreg, status,2, status,0, cstack
 44754 ;; Tracked objects:
 44755 ;;		On entry : 0/0
 44756 ;;		On exit  : 0/0
 44757 ;;		Unchanged: 0/0
 44758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44760 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44761 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44762 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44763 ;;Total ram usage:        3 bytes
 44764 ;; Hardware stack levels used:    1
 44765 ;; Hardware stack levels required when called:    7
 44766 ;; This function calls:
 44767 ;;		_Lcd_Cmd
 44768 ;;		_Lcd_SetBit
 44769 ;; This function is called by:
 44770 ;;		_main
 44771 ;; This function uses a non-reentrant model
 44772 ;;
 44773                           
 44774                           	psect	text136
 44775  0083D8                     __ptext136:
 44776                           	opt stack 0
 44777  0083D8                     _Lcd_Start:
 44778                           	opt stack 23
 44779                           
 44780                           ;lcd.c: 96: Lcd_SetBit(0x00);
 44781                           
 44782                           ;incstack = 0
 44783  0083D8  0E00               	movlw	0
 44784  0083DA  EC15  F04C         	call	_Lcd_SetBit
 44785                           
 44786                           ;lcd.c: 97: for(int i=1065244; i<=0; i--) __nop();
 44787  0083DE  0E41               	movlw	65
 44788  0083E0  0100               	movlb	0	; () banked
 44789  0083E2  6F65               	movwf	(Lcd_Start@i+1)& (0+255),b
 44790  0083E4  0E1C               	movlw	28
 44791  0083E6  6F64               	movwf	Lcd_Start@i& (0+255),b
 44792  0083E8                     l33458:
 44793                           
 44794                           ; BSR set to: 0
 44795  0083E8  BF65               	btfsc	(Lcd_Start@i+1)& (0+255),7,b
 44796  0083EA  D005               	goto	l46
 44797  0083EC  5165               	movf	(Lcd_Start@i+1)& (0+255),w,b
 44798  0083EE  E109               	bnz	l33466
 44799  0083F0  0564               	decf	Lcd_Start@i& (0+255),w,b
 44800  0083F2  B0D8               	btfsc	status,0,c
 44801  0083F4  D006               	goto	u60740
 44802  0083F6                     l46:
 44803                           
 44804                           ; BSR set to: 0
 44805  0083F6  F000               	nop	
 44806  0083F8  0100               	movlb	0	; () banked
 44807  0083FA  0764               	decf	Lcd_Start@i& (0+255),f,b
 44808  0083FC  A0D8               	btfss	status,0,c
 44809  0083FE  0765               	decf	(Lcd_Start@i+1)& (0+255),f,b
 44810  008400  D7F3               	goto	l33458
 44811  008402                     u60740:
 44812  008402                     l33466:
 44813                           
 44814                           ; BSR set to: 0
 44815                           ;lcd.c: 98: Lcd_Cmd(0x03);
 44816  008402  0E03               	movlw	3
 44817  008404  EC94  F04C         	call	_Lcd_Cmd
 44818                           
 44819                           ;lcd.c: 99: _delay((unsigned long)((5)*(20000000/4000.0)));
 44820  008408  0E21               	movlw	33
 44821  00840A  0100               	movlb	0	; () banked
 44822  00840C  6F63               	movwf	??_Lcd_Start& (0+255),b
 44823  00840E  0E76               	movlw	118
 44824  008410                     u67727:
 44825  008410  2EE8               	decfsz	wreg,f,c
 44826  008412  D7FE               	bra	u67727
 44827  008414  2F63               	decfsz	??_Lcd_Start& (0+255),f,b
 44828  008416  D7FC               	bra	u67727
 44829  008418  F000               	nop	
 44830                           
 44831                           ;lcd.c: 100: Lcd_Cmd(0x03);
 44832  00841A  0E03               	movlw	3
 44833  00841C  EC94  F04C         	call	_Lcd_Cmd
 44834                           
 44835                           ;lcd.c: 101: _delay((unsigned long)((11)*(20000000/4000.0)));
 44836  008420  0E48               	movlw	72
 44837  008422  0100               	movlb	0	; () banked
 44838  008424  6F63               	movwf	??_Lcd_Start& (0+255),b
 44839  008426  0E6C               	movlw	108
 44840  008428                     u67737:
 44841  008428  2EE8               	decfsz	wreg,f,c
 44842  00842A  D7FE               	bra	u67737
 44843  00842C  2F63               	decfsz	??_Lcd_Start& (0+255),f,b
 44844  00842E  D7FC               	bra	u67737
 44845  008430  F000               	nop	
 44846                           
 44847                           ;lcd.c: 102: Lcd_Cmd(0x03);
 44848  008432  0E03               	movlw	3
 44849  008434  EC94  F04C         	call	_Lcd_Cmd
 44850                           
 44851                           ;lcd.c: 103: Lcd_Cmd(0x02);
 44852  008438  0E02               	movlw	2
 44853  00843A  EC94  F04C         	call	_Lcd_Cmd
 44854                           
 44855                           ;lcd.c: 104: Lcd_Cmd(0x02);
 44856  00843E  0E02               	movlw	2
 44857  008440  EC94  F04C         	call	_Lcd_Cmd
 44858                           
 44859                           ;lcd.c: 105: Lcd_Cmd(0x08);
 44860  008444  0E08               	movlw	8
 44861  008446  EC94  F04C         	call	_Lcd_Cmd
 44862                           
 44863                           ;lcd.c: 106: Lcd_Cmd(0x00);
 44864  00844A  0E00               	movlw	0
 44865  00844C  EC94  F04C         	call	_Lcd_Cmd
 44866                           
 44867                           ;lcd.c: 107: Lcd_Cmd(0x0C);
 44868  008450  0E0C               	movlw	12
 44869  008452  EC94  F04C         	call	_Lcd_Cmd
 44870                           
 44871                           ;lcd.c: 108: Lcd_Cmd(0x00);
 44872  008456  0E00               	movlw	0
 44873  008458  EC94  F04C         	call	_Lcd_Cmd
 44874                           
 44875                           ;lcd.c: 109: Lcd_Cmd(0x06);
 44876  00845C  0E06               	movlw	6
 44877  00845E  EC94  F04C         	call	_Lcd_Cmd
 44878  008462  0012               	return		;funcret
 44879  008464                     __end_of_Lcd_Start:
 44880                           	opt stack 0
 44881                           tblptru	equ	0xFF8
 44882                           tblptrh	equ	0xFF7
 44883                           tblptrl	equ	0xFF6
 44884                           tablat	equ	0xFF5
 44885                           prodh	equ	0xFF4
 44886                           prodl	equ	0xFF3
 44887                           intcon	equ	0xFF2
 44888                           intcon2	equ	0xFF1
 44889                           indf0	equ	0xFEF
 44890                           postinc0	equ	0xFEE
 44891                           postdec0	equ	0xFED
 44892                           fsr0h	equ	0xFEA
 44893                           fsr0l	equ	0xFE9
 44894                           wreg	equ	0xFE8
 44895                           postinc1	equ	0xFE6
 44896                           postdec1	equ	0xFE5
 44897                           plusw1	equ	0xFE3
 44898                           fsr1h	equ	0xFE2
 44899                           fsr1l	equ	0xFE1
 44900                           indf2	equ	0xFDF
 44901                           postinc2	equ	0xFDE
 44902                           postdec2	equ	0xFDD
 44903                           plusw2	equ	0xFDB
 44904                           fsr2h	equ	0xFDA
 44905                           fsr2l	equ	0xFD9
 44906                           status	equ	0xFD8
 44907                           
 44908 ;; *************** function _Lcd_Cmd *****************
 44909 ;; Defined at:
 44910 ;;		line 44 in file "lcd.c"
 44911 ;; Parameters:    Size  Location     Type
 44912 ;;  a               1    wreg     unsigned char 
 44913 ;; Auto vars:     Size  Location     Type
 44914 ;;  a               1    2[BANK0 ] unsigned char 
 44915 ;; Return value:  Size  Location     Type
 44916 ;;                  1    wreg      void 
 44917 ;; Registers used:
 44918 ;;		wreg, status,2, cstack
 44919 ;; Tracked objects:
 44920 ;;		On entry : 0/0
 44921 ;;		On exit  : 0/0
 44922 ;;		Unchanged: 0/0
 44923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 44924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44925 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44926 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44927 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 44928 ;;Total ram usage:        2 bytes
 44929 ;; Hardware stack levels used:    1
 44930 ;; Hardware stack levels required when called:    6
 44931 ;; This function calls:
 44932 ;;		_Lcd_SetBit
 44933 ;; This function is called by:
 44934 ;;		_Lcd_Clear
 44935 ;;		_Lcd_Set_Cursor
 44936 ;;		_Lcd_Start
 44937 ;; This function uses a non-reentrant model
 44938 ;;
 44939                           
 44940                           	psect	text137
 44941  009928                     __ptext137:
 44942                           	opt stack 0
 44943  009928                     _Lcd_Cmd:
 44944                           	opt stack 20
 44945                           
 44946                           ;incstack = 0
 44947                           ;Lcd_Cmd@a stored from wreg
 44948  009928  0100               	movlb	0	; () banked
 44949  00992A  6F62               	movwf	Lcd_Cmd@a& (0+255),b
 44950                           
 44951                           ;lcd.c: 46: RE0 = 0;
 44952  00992C  9084               	bcf	3972,0,c	;volatile
 44953                           
 44954                           ;lcd.c: 47: Lcd_SetBit(a);
 44955  00992E  0100               	movlb	0	; () banked
 44956  009930  5162               	movf	Lcd_Cmd@a& (0+255),w,b
 44957  009932  EC15  F04C         	call	_Lcd_SetBit
 44958                           
 44959                           ;lcd.c: 48: RE1 = 1;
 44960  009936  8284               	bsf	3972,1,c	;volatile
 44961                           
 44962                           ;lcd.c: 49: _delay((unsigned long)((4)*(20000000/4000.0)));
 44963  009938  0E1A               	movlw	26
 44964  00993A  0100               	movlb	0	; () banked
 44965  00993C  6F61               	movwf	??_Lcd_Cmd& (0+255),b
 44966  00993E  0EF8               	movlw	248
 44967  009940                     u67747:
 44968  009940  2EE8               	decfsz	wreg,f,c
 44969  009942  D7FE               	bra	u67747
 44970  009944  2F61               	decfsz	??_Lcd_Cmd& (0+255),f,b
 44971  009946  D7FC               	bra	u67747
 44972  009948  F000               	nop	
 44973                           
 44974                           ;lcd.c: 50: RE1 = 0;
 44975  00994A  9284               	bcf	3972,1,c	;volatile
 44976  00994C  0012               	return		;funcret
 44977  00994E                     __end_of_Lcd_Cmd:
 44978                           	opt stack 0
 44979                           tblptru	equ	0xFF8
 44980                           tblptrh	equ	0xFF7
 44981                           tblptrl	equ	0xFF6
 44982                           tablat	equ	0xFF5
 44983                           prodh	equ	0xFF4
 44984                           prodl	equ	0xFF3
 44985                           intcon	equ	0xFF2
 44986                           intcon2	equ	0xFF1
 44987                           indf0	equ	0xFEF
 44988                           postinc0	equ	0xFEE
 44989                           postdec0	equ	0xFED
 44990                           fsr0h	equ	0xFEA
 44991                           fsr0l	equ	0xFE9
 44992                           wreg	equ	0xFE8
 44993                           postinc1	equ	0xFE6
 44994                           postdec1	equ	0xFE5
 44995                           plusw1	equ	0xFE3
 44996                           fsr1h	equ	0xFE2
 44997                           fsr1l	equ	0xFE1
 44998                           indf2	equ	0xFDF
 44999                           postinc2	equ	0xFDE
 45000                           postdec2	equ	0xFDD
 45001                           plusw2	equ	0xFDB
 45002                           fsr2h	equ	0xFDA
 45003                           fsr2l	equ	0xFD9
 45004                           status	equ	0xFD8
 45005                           
 45006 ;; *************** function _Lcd_SetBit *****************
 45007 ;; Defined at:
 45008 ;;		line 21 in file "lcd.c"
 45009 ;; Parameters:    Size  Location     Type
 45010 ;;  data_bit        1    wreg     unsigned char 
 45011 ;; Auto vars:     Size  Location     Type
 45012 ;;  data_bit        1    0[BANK0 ] unsigned char 
 45013 ;; Return value:  Size  Location     Type
 45014 ;;                  1    wreg      void 
 45015 ;; Registers used:
 45016 ;;		wreg
 45017 ;; Tracked objects:
 45018 ;;		On entry : 0/0
 45019 ;;		On exit  : 0/0
 45020 ;;		Unchanged: 0/0
 45021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 45022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45023 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45025 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45026 ;;Total ram usage:        1 bytes
 45027 ;; Hardware stack levels used:    1
 45028 ;; Hardware stack levels required when called:    5
 45029 ;; This function calls:
 45030 ;;		Nothing
 45031 ;; This function is called by:
 45032 ;;		_Lcd_Cmd
 45033 ;;		_Lcd_Start
 45034 ;;		_Lcd_Print_Char
 45035 ;; This function uses a non-reentrant model
 45036 ;;
 45037                           
 45038                           	psect	text138
 45039  00982A                     __ptext138:
 45040                           	opt stack 0
 45041  00982A                     _Lcd_SetBit:
 45042                           	opt stack 20
 45043                           
 45044                           ;incstack = 0
 45045                           ;Lcd_SetBit@data_bit stored from wreg
 45046  00982A  0100               	movlb	0	; () banked
 45047  00982C  6F60               	movwf	Lcd_SetBit@data_bit& (0+255),b
 45048                           
 45049                           ;lcd.c: 23: if(data_bit& 1)
 45050  00982E  0100               	movlb	0	; () banked
 45051  009830  A160               	btfss	Lcd_SetBit@data_bit& (0+255),0,b
 45052  009832  D002               	goto	l23
 45053                           
 45054                           ; BSR set to: 0
 45055                           ;lcd.c: 24: RD4 = 1;
 45056  009834  8883               	bsf	3971,4,c	;volatile
 45057  009836  D001               	goto	l24
 45058  009838                     l23:
 45059                           
 45060                           ; BSR set to: 0
 45061                           ;lcd.c: 25: else
 45062                           ;lcd.c: 26: RD4 = 0;
 45063  009838  9883               	bcf	3971,4,c	;volatile
 45064  00983A                     l24:
 45065                           
 45066                           ; BSR set to: 0
 45067                           ;lcd.c: 28: if(data_bit& 2)
 45068                           
 45069                           ; BSR set to: 0
 45070  00983A  A360               	btfss	Lcd_SetBit@data_bit& (0+255),1,b
 45071  00983C  D002               	goto	l25
 45072                           
 45073                           ; BSR set to: 0
 45074                           ;lcd.c: 29: RD5 = 1;
 45075  00983E  8A83               	bsf	3971,5,c	;volatile
 45076  009840  D001               	goto	l26
 45077  009842                     l25:
 45078                           
 45079                           ; BSR set to: 0
 45080                           ;lcd.c: 30: else
 45081                           ;lcd.c: 31: RD5 = 0;
 45082  009842  9A83               	bcf	3971,5,c	;volatile
 45083  009844                     l26:
 45084                           
 45085                           ; BSR set to: 0
 45086                           ;lcd.c: 33: if(data_bit& 4)
 45087                           
 45088                           ; BSR set to: 0
 45089  009844  A560               	btfss	Lcd_SetBit@data_bit& (0+255),2,b
 45090  009846  D002               	goto	l27
 45091                           
 45092                           ; BSR set to: 0
 45093                           ;lcd.c: 34: RD6 = 1;
 45094  009848  8C83               	bsf	3971,6,c	;volatile
 45095  00984A  D001               	goto	l28
 45096  00984C                     l27:
 45097                           
 45098                           ; BSR set to: 0
 45099                           ;lcd.c: 35: else
 45100                           ;lcd.c: 36: RD6 = 0;
 45101  00984C  9C83               	bcf	3971,6,c	;volatile
 45102  00984E                     l28:
 45103                           
 45104                           ; BSR set to: 0
 45105                           ;lcd.c: 38: if(data_bit& 8)
 45106                           
 45107                           ; BSR set to: 0
 45108  00984E  A760               	btfss	Lcd_SetBit@data_bit& (0+255),3,b
 45109  009850  D002               	goto	l29
 45110                           
 45111                           ; BSR set to: 0
 45112                           ;lcd.c: 39: RD7 = 1;
 45113  009852  8E83               	bsf	3971,7,c	;volatile
 45114  009854  0012               	return	
 45115  009856                     l29:
 45116                           
 45117                           ; BSR set to: 0
 45118                           ;lcd.c: 40: else
 45119                           ;lcd.c: 41: RD7 = 0;
 45120  009856  9E83               	bcf	3971,7,c	;volatile
 45121  009858  0012               	return	
 45122  00985A                     __end_of_Lcd_SetBit:
 45123                           	opt stack 0
 45124                           tblptru	equ	0xFF8
 45125                           tblptrh	equ	0xFF7
 45126                           tblptrl	equ	0xFF6
 45127                           tablat	equ	0xFF5
 45128                           prodh	equ	0xFF4
 45129                           prodl	equ	0xFF3
 45130                           intcon	equ	0xFF2
 45131                           intcon2	equ	0xFF1
 45132                           indf0	equ	0xFEF
 45133                           postinc0	equ	0xFEE
 45134                           postdec0	equ	0xFED
 45135                           fsr0h	equ	0xFEA
 45136                           fsr0l	equ	0xFE9
 45137                           wreg	equ	0xFE8
 45138                           postinc1	equ	0xFE6
 45139                           postdec1	equ	0xFE5
 45140                           plusw1	equ	0xFE3
 45141                           fsr1h	equ	0xFE2
 45142                           fsr1l	equ	0xFE1
 45143                           indf2	equ	0xFDF
 45144                           postinc2	equ	0xFDE
 45145                           postdec2	equ	0xFDD
 45146                           plusw2	equ	0xFDB
 45147                           fsr2h	equ	0xFDA
 45148                           fsr2l	equ	0xFD9
 45149                           status	equ	0xFD8
 45150                           
 45151 ;; *************** function _ADC_Initialize *****************
 45152 ;; Defined at:
 45153 ;;		line 22 in file "adc.c"
 45154 ;; Parameters:    Size  Location     Type
 45155 ;;		None
 45156 ;; Auto vars:     Size  Location     Type
 45157 ;;		None
 45158 ;; Return value:  Size  Location     Type
 45159 ;;                  1    wreg      void 
 45160 ;; Registers used:
 45161 ;;		wreg, status,2
 45162 ;; Tracked objects:
 45163 ;;		On entry : 0/0
 45164 ;;		On exit  : 0/0
 45165 ;;		Unchanged: 0/0
 45166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 45167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45171 ;;Total ram usage:        0 bytes
 45172 ;; Hardware stack levels used:    1
 45173 ;; Hardware stack levels required when called:    5
 45174 ;; This function calls:
 45175 ;;		Nothing
 45176 ;; This function is called by:
 45177 ;;		_main
 45178 ;; This function uses a non-reentrant model
 45179 ;;
 45180                           
 45181                           	psect	text139
 45182  009A58                     __ptext139:
 45183                           	opt stack 0
 45184  009A58                     _ADC_Initialize:
 45185                           	opt stack 25
 45186                           
 45187                           ;adc.c: 24: CMCON = 0x7;
 45188                           
 45189                           ; BSR set to: 0
 45190                           ;incstack = 0
 45191  009A58  0E07               	movlw	7
 45192  009A5A  6EB4               	movwf	4020,c	;volatile
 45193                           
 45194                           ;adc.c: 25: ADCON0 = 0b00000000;
 45195  009A5C  0E00               	movlw	0
 45196  009A5E  6EC2               	movwf	4034,c	;volatile
 45197                           
 45198                           ;adc.c: 26: ADCON1 = 0b00001110;
 45199  009A60  0E0E               	movlw	14
 45200  009A62  6EC1               	movwf	4033,c	;volatile
 45201                           
 45202                           ;adc.c: 27: ADCON2 = 0b10000010;
 45203  009A64  0E82               	movlw	130
 45204  009A66  6EC0               	movwf	4032,c	;volatile
 45205                           
 45206                           ;adc.c: 31: ADON = 1;
 45207  009A68  80C2               	bsf	4034,0,c	;volatile
 45208  009A6A  0012               	return		;funcret
 45209  009A6C                     __end_of_ADC_Initialize:
 45210                           	opt stack 0
 45211                           tblptru	equ	0xFF8
 45212                           tblptrh	equ	0xFF7
 45213                           tblptrl	equ	0xFF6
 45214                           tablat	equ	0xFF5
 45215                           prodh	equ	0xFF4
 45216                           prodl	equ	0xFF3
 45217                           intcon	equ	0xFF2
 45218                           intcon2	equ	0xFF1
 45219                           indf0	equ	0xFEF
 45220                           postinc0	equ	0xFEE
 45221                           postdec0	equ	0xFED
 45222                           fsr0h	equ	0xFEA
 45223                           fsr0l	equ	0xFE9
 45224                           wreg	equ	0xFE8
 45225                           postinc1	equ	0xFE6
 45226                           postdec1	equ	0xFE5
 45227                           plusw1	equ	0xFE3
 45228                           fsr1h	equ	0xFE2
 45229                           fsr1l	equ	0xFE1
 45230                           indf2	equ	0xFDF
 45231                           postinc2	equ	0xFDE
 45232                           postdec2	equ	0xFDD
 45233                           plusw2	equ	0xFDB
 45234                           fsr2h	equ	0xFDA
 45235                           fsr2l	equ	0xFD9
 45236                           status	equ	0xFD8
 45237                           
 45238 ;; *************** function _ISR *****************
 45239 ;; Defined at:
 45240 ;;		line 381 in file "main.c"
 45241 ;; Parameters:    Size  Location     Type
 45242 ;;		None
 45243 ;; Auto vars:     Size  Location     Type
 45244 ;;		None
 45245 ;; Return value:  Size  Location     Type
 45246 ;;                  1    wreg      void 
 45247 ;; Registers used:
 45248 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 45249 ;; Tracked objects:
 45250 ;;		On entry : 0/0
 45251 ;;		On exit  : 0/0
 45252 ;;		Unchanged: 0/0
 45253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 45254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45256 ;;      Temps:         24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45257 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45258 ;;Total ram usage:       24 bytes
 45259 ;; Hardware stack levels used:    1
 45260 ;; Hardware stack levels required when called:    4
 45261 ;; This function calls:
 45262 ;;		___lbmod
 45263 ;;		_display
 45264 ;;		_encoderInputsBuxton
 45265 ;;		_playArpeggio
 45266 ;; This function is called by:
 45267 ;;		Interrupt level 2
 45268 ;; This function uses a non-reentrant model
 45269 ;;
 45270                           
 45271                           	psect	intcode
 45272  000008                     __pintcode:
 45273                           	opt stack 0
 45274  000008                     _ISR:
 45275                           	opt stack 11
 45276                           
 45277                           ;incstack = 0
 45278  000008  EDE9  F029         	call	int_func,f	;refresh shadow registers
 45279                           tblptru	equ	0xFF8
 45280                           tblptrh	equ	0xFF7
 45281                           tblptrl	equ	0xFF6
 45282                           tablat	equ	0xFF5
 45283                           prodh	equ	0xFF4
 45284                           prodl	equ	0xFF3
 45285                           intcon	equ	0xFF2
 45286                           intcon2	equ	0xFF1
 45287                           indf0	equ	0xFEF
 45288                           postinc0	equ	0xFEE
 45289                           postdec0	equ	0xFED
 45290                           fsr0h	equ	0xFEA
 45291                           fsr0l	equ	0xFE9
 45292                           wreg	equ	0xFE8
 45293                           postinc1	equ	0xFE6
 45294                           postdec1	equ	0xFE5
 45295                           plusw1	equ	0xFE3
 45296                           fsr1h	equ	0xFE2
 45297                           fsr1l	equ	0xFE1
 45298                           indf2	equ	0xFDF
 45299                           postinc2	equ	0xFDE
 45300                           postdec2	equ	0xFDD
 45301                           plusw2	equ	0xFDB
 45302                           fsr2h	equ	0xFDA
 45303                           fsr2l	equ	0xFD9
 45304                           status	equ	0xFD8
 45305                           
 45306                           	psect	intcode_body
 45307  0053D2                     __pintcode_body:
 45308                           	opt stack 11
 45309  0053D2                     int_func:
 45310                           	opt stack 11
 45311  0053D2  0006               	pop		; remove dummy address from shadow register refresh
 45312  0053D4  CFE9 F013          	movff	fsr0l,??_ISR+1
 45313  0053D8  CFEA F014          	movff	fsr0h,??_ISR+2
 45314  0053DC  CFE1 F015          	movff	fsr1l,??_ISR+3
 45315  0053E0  CFE2 F016          	movff	fsr1h,??_ISR+4
 45316  0053E4  CFD9 F017          	movff	fsr2l,??_ISR+5
 45317  0053E8  CFDA F018          	movff	fsr2h,??_ISR+6
 45318  0053EC  CFF3 F019          	movff	prodl,??_ISR+7
 45319  0053F0  CFF4 F01A          	movff	prodh,??_ISR+8
 45320  0053F4  CFF6 F01B          	movff	tblptrl,??_ISR+9
 45321  0053F8  CFF7 F01C          	movff	tblptrh,??_ISR+10
 45322  0053FC  CFF8 F01D          	movff	tblptru,??_ISR+11
 45323  005400  CFF5 F01E          	movff	tablat,??_ISR+12
 45324  005404  C03E  F01F         	movff	btemp,??_ISR+13
 45325  005408  C03F  F020         	movff	btemp+1,??_ISR+14
 45326  00540C  C040  F021         	movff	btemp+2,??_ISR+15
 45327  005410  C041  F022         	movff	btemp+3,??_ISR+16
 45328  005414  C042  F023         	movff	btemp+4,??_ISR+17
 45329  005418  C043  F024         	movff	btemp+5,??_ISR+18
 45330  00541C  C044  F025         	movff	btemp+6,??_ISR+19
 45331  005420  C045  F026         	movff	btemp+7,??_ISR+20
 45332  005424  C047  F027         	movff	btemp+9,??_ISR+21
 45333  005428  C048  F028         	movff	btemp+10,??_ISR+22
 45334  00542C  C049  F029         	movff	btemp+11,??_ISR+23
 45335  005430  EE16  F0B2         	lfsr	1,___inthi_sp
 45336                           
 45337                           ;main.c: 384: if(TMR2IF==1){
 45338  005434  A29E               	btfss	3998,1,c	;volatile
 45339  005436  D005               	goto	i2l5017
 45340                           
 45341                           ;main.c: 385: display();
 45342  005438  EC00  F04D         	call	_display	;wreg free
 45343                           
 45344                           ;main.c: 387: TMR2 = 0x83;
 45345  00543C  0E83               	movlw	131
 45346  00543E  6ECC               	movwf	4044,c	;volatile
 45347                           
 45348                           ;main.c: 388: TMR2IF = 0;
 45349  005440  929E               	bcf	3998,1,c	;volatile
 45350  005442                     i2l5017:
 45351                           
 45352                           ;main.c: 389: }
 45353                           ;main.c: 392: if(TMR1IF==1){
 45354  005442  A09E               	btfss	3998,0,c	;volatile
 45355  005444  D00C               	goto	i2l5018
 45356                           
 45357                           ;main.c: 393: count_ISR++;
 45358  005446  0E01               	movlw	1
 45359  005448  0102               	movlb	2	; () banked
 45360  00544A  2764               	addwf	_count_ISR& (0+255),f,b
 45361  00544C  0E00               	movlw	0
 45362  00544E  2365               	addwfc	(_count_ISR+1)& (0+255),f,b
 45363  005450  2366               	addwfc	(_count_ISR+2)& (0+255),f,b
 45364  005452  2367               	addwfc	(_count_ISR+3)& (0+255),f,b
 45365                           
 45366                           ; BSR set to: 2
 45367                           ;main.c: 394: TMR1 = 0xEC78;
 45368  005454  0EEC               	movlw	236
 45369  005456  6ECF               	movwf	4047,c	;volatile
 45370  005458  0E78               	movlw	120
 45371  00545A  6ECE               	movwf	4046,c	;volatile
 45372                           
 45373                           ; BSR set to: 2
 45374                           ;main.c: 395: TMR1IF = 0;
 45375  00545C  909E               	bcf	3998,0,c	;volatile
 45376  00545E                     i2l5018:
 45377                           
 45378                           ;main.c: 396: }
 45379                           ;main.c: 399: if(INT0IF==1) {
 45380                           
 45381                           ; BSR set to: 2
 45382  00545E  A2F2               	btfss	intcon,1,c	;volatile
 45383  005460  D00B               	goto	i2l5019
 45384                           
 45385                           ;main.c: 400: _delay((unsigned long)((10)*(20000000/4000.0)));
 45386  005462  0E41               	movlw	65
 45387  005464  6E12               	movwf	??_ISR& (0+255),c
 45388  005466  0EEE               	movlw	238
 45389  005468                     i2u6775_47:
 45390  005468  2EE8               	decfsz	wreg,f,c
 45391  00546A  D7FE               	bra	i2u6775_47
 45392  00546C  2E12               	decfsz	??_ISR& (0+255),f,c
 45393  00546E  D7FC               	bra	i2u6775_47
 45394  005470  D000               	nop2	
 45395                           
 45396                           ;main.c: 401: if(RB0 == 0){encoder_click = 1;}
 45397  005472  A081               	btfss	3969,0,c	;volatile
 45398  005474  8605               	bsf	_encoder_click/(0+8),_encoder_click& (0+7),c
 45399                           
 45400                           ;main.c: 402: INT0IF = 0;
 45401  005476  92F2               	bcf	intcon,1,c	;volatile
 45402  005478                     i2l5019:
 45403                           
 45404                           ;main.c: 403: }
 45405                           ;main.c: 406: if(RBIF==1) {
 45406  005478  A0F2               	btfss	intcon,0,c	;volatile
 45407  00547A  D003               	goto	i2l5021
 45408                           
 45409                           ;main.c: 407: encoderInputsBuxton();
 45410  00547C  EC7C  F043         	call	_encoderInputsBuxton	;wreg free
 45411                           
 45412                           ;main.c: 409: RBIF = 0;
 45413  005480  90F2               	bcf	intcon,0,c	;volatile
 45414  005482                     i2l5021:
 45415                           
 45416                           ;main.c: 410: }
 45417                           ;main.c: 414: if(TMR0IF==1) {
 45418  005482  A4F2               	btfss	intcon,2,c	;volatile
 45419  005484  D04C               	goto	i2l5022
 45420                           
 45421                           ;main.c: 423: TMR0IE = 0;
 45422  005486  9AF2               	bcf	intcon,5,c	;volatile
 45423                           
 45424                           ;main.c: 426: if((finishLastNote == 0) && ((TIMER_OVERFLOWS % NOTE_LENGTH_PULSES) == 0))
      +                          {
 45425  005488  BE02               	btfsc	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 45426  00548A  D02D               	goto	i2l5027
 45427  00548C  504C               	movf	_NOTE_LENGTH_PULSES,w,c
 45428  00548E  6EE6               	movwf	postinc1,c
 45429  005490  502D               	movf	_TIMER_OVERFLOWS,w,c
 45430  005492  6EE6               	movwf	postinc1,c
 45431  005494  ECA5  F041         	call	___lbmod	;wreg free
 45432  005498  503E               	movf	btemp,w,c
 45433  00549A  A4D8               	btfss	status,2,c
 45434  00549C  D024               	goto	i2l5027
 45435                           
 45436                           ;main.c: 429: if((ARPEGGIO_TYPE == AS_PRESSED) || (ARPEGGIO_TYPE == UP) || (ARPEGGIO_TYP
      +                          E == DOWN) || (ARPEGGIO_TYPE == UP_DOWN) || (ARPEGGIO_TYPE == DOWN_UP)){
 45437  00549E  0E06               	movlw	6
 45438  0054A0  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 45439  0054A2  B4D8               	btfsc	status,2,c
 45440  0054A4  D00D               	goto	i2u6740_40
 45441  0054A6  5034               	movf	_ARPEGGIO_TYPE,w,c
 45442  0054A8  B4D8               	btfsc	status,2,c
 45443  0054AA  D00A               	goto	i2u6740_40
 45444  0054AC  0434               	decf	_ARPEGGIO_TYPE,w,c
 45445  0054AE  B4D8               	btfsc	status,2,c
 45446  0054B0  D007               	goto	i2u6740_40
 45447  0054B2  0E02               	movlw	2
 45448  0054B4  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 45449  0054B6  B4D8               	btfsc	status,2,c
 45450  0054B8  D003               	goto	i2u6740_40
 45451  0054BA  0E03               	movlw	3
 45452  0054BC  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 45453  0054BE  B4D8               	btfsc	status,2,c
 45454  0054C0                     i2u6740_40:
 45455                           
 45456                           ;main.c: 430: stored_octave = which_octave;
 45457  0054C0  C031  F030         	movff	_which_octave,_stored_octave
 45458                           
 45459                           ;main.c: 431: }
 45460                           ;main.c: 452: ARPEGGIO_IS_PLAYING = 1;
 45461  0054C4  8806               	bsf	_ARPEGGIO_IS_PLAYING/(0+8),_ARPEGGIO_IS_PLAYING& (0+7),c
 45462                           
 45463                           ;main.c: 453: playArpeggio();
 45464  0054C6  ECD2  F008         	call	_playArpeggio	;wreg free
 45465                           
 45466                           ;main.c: 454: ARPEGGIO_IS_PLAYING = 0;
 45467  0054CA  9806               	bcf	_ARPEGGIO_IS_PLAYING/(0+8),_ARPEGGIO_IS_PLAYING& (0+7),c
 45468                           
 45469                           ;main.c: 457: suppress_note_on = 0;
 45470  0054CC  9C02               	bcf	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 45471                           
 45472                           ;main.c: 458: suppress_note_off = 0;
 45473  0054CE  9A02               	bcf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45474                           
 45475                           ;main.c: 459: flag1 = 0;
 45476  0054D0  9402               	bcf	_flag1/(0+8),_flag1& (0+7),c
 45477                           
 45478                           ;main.c: 460: flag2 = 0;
 45479  0054D2  9202               	bcf	_flag2/(0+8),_flag2& (0+7),c
 45480                           
 45481                           ;main.c: 463: if((ARPEGGIO_TYPE == RANDOM) || (ARPEGGIO_TYPE == RANDOM_NON_REPEATING)) {
 45482  0054D4  0E05               	movlw	5
 45483  0054D6  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 45484  0054D8  B4D8               	btfsc	status,2,c
 45485  0054DA  D003               	goto	i2u6742_40
 45486  0054DC  0E04               	movlw	4
 45487  0054DE  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 45488  0054E0  B4D8               	btfsc	status,2,c
 45489  0054E2                     i2u6742_40:
 45490                           
 45491                           ;main.c: 464: stored_octave = which_octave;
 45492  0054E2  C031  F030         	movff	_which_octave,_stored_octave
 45493  0054E6                     i2l5027:
 45494                           
 45495                           ;main.c: 465: }
 45496                           ;main.c: 466: }
 45497                           ;main.c: 487: if(lastNoteMode == 1){
 45498  0054E6  B803               	btfsc	_lastNoteMode/(0+8),_lastNoteMode& (0+7),c
 45499                           
 45500                           ;main.c: 488: if((finishLastNote == 1) && ((TIMER_OVERFLOWS % NOTE_LENGTH_PULSES) == 0))
      +                          {
 45501  0054E8  AE02               	btfss	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 45502  0054EA  D00C               	goto	i2l5031
 45503  0054EC  504C               	movf	_NOTE_LENGTH_PULSES,w,c
 45504  0054EE  6EE6               	movwf	postinc1,c
 45505  0054F0  502D               	movf	_TIMER_OVERFLOWS,w,c
 45506  0054F2  6EE6               	movwf	postinc1,c
 45507  0054F4  ECA5  F041         	call	___lbmod	;wreg free
 45508  0054F8  503E               	movf	btemp,w,c
 45509  0054FA  A4D8               	btfss	status,2,c
 45510  0054FC  D003               	goto	i2l5031
 45511                           
 45512                           ;main.c: 497: finishLastNote = 0;
 45513  0054FE  9E02               	bcf	_finishLastNote/(0+8),_finishLastNote& (0+7),c
 45514                           
 45515                           ;main.c: 500: TIMER_OVERFLOWS = NOTE_LENGTH_PULSES;
 45516  005500  C04C  F02D         	movff	_NOTE_LENGTH_PULSES,_TIMER_OVERFLOWS
 45517  005504                     i2l5031:
 45518                           
 45519                           ;main.c: 501: }
 45520                           ;main.c: 502: }
 45521                           ;main.c: 504: TIMER_OVERFLOWS++;
 45522  005504  2A2D               	incf	_TIMER_OVERFLOWS,f,c
 45523                           
 45524                           ;main.c: 506: if(TIMER_OVERFLOWS >= (NOTE_LENGTH_PULSES)){TIMER_OVERFLOWS = 0;}
 45525  005506  504C               	movf	_NOTE_LENGTH_PULSES,w,c
 45526  005508  5C2D               	subwf	_TIMER_OVERFLOWS,w,c
 45527  00550A  A0D8               	btfss	status,0,c
 45528  00550C  D002               	goto	i2l5032
 45529  00550E  0E00               	movlw	0
 45530  005510  6E2D               	movwf	_TIMER_OVERFLOWS,c
 45531  005512                     i2l5032:
 45532                           
 45533                           ;main.c: 508: TMR0 = TIMER_PRELOAD;
 45534  005512  C17C  FFD6         	movff	_TIMER_PRELOAD,4054	;volatile
 45535  005516  C17D  FFD7         	movff	_TIMER_PRELOAD+1,4055	;volatile
 45536                           
 45537                           ;main.c: 509: TMR0IF = 0;
 45538  00551A  94F2               	bcf	intcon,2,c	;volatile
 45539                           
 45540                           ;main.c: 510: TMR0IE = 1;
 45541  00551C  8AF2               	bsf	intcon,5,c	;volatile
 45542  00551E                     i2l5022:
 45543  00551E  C029  F049         	movff	??_ISR+23,btemp+11
 45544  005522  C028  F048         	movff	??_ISR+22,btemp+10
 45545  005526  C027  F047         	movff	??_ISR+21,btemp+9
 45546  00552A  C026  F045         	movff	??_ISR+20,btemp+7
 45547  00552E  C025  F044         	movff	??_ISR+19,btemp+6
 45548  005532  C024  F043         	movff	??_ISR+18,btemp+5
 45549  005536  C023  F042         	movff	??_ISR+17,btemp+4
 45550  00553A  C022  F041         	movff	??_ISR+16,btemp+3
 45551  00553E  C021  F040         	movff	??_ISR+15,btemp+2
 45552  005542  C020  F03F         	movff	??_ISR+14,btemp+1
 45553  005546  C01F  F03E         	movff	??_ISR+13,btemp
 45554  00554A  C01E  FFF5         	movff	??_ISR+12,tablat
 45555  00554E  C01D  FFF8         	movff	??_ISR+11,tblptru
 45556  005552  C01C  FFF7         	movff	??_ISR+10,tblptrh
 45557  005556  C01B  FFF6         	movff	??_ISR+9,tblptrl
 45558  00555A  C01A  FFF4         	movff	??_ISR+8,prodh
 45559  00555E  C019  FFF3         	movff	??_ISR+7,prodl
 45560  005562  C018  FFDA         	movff	??_ISR+6,fsr2h
 45561  005566  C017  FFD9         	movff	??_ISR+5,fsr2l
 45562  00556A  C016  FFE2         	movff	??_ISR+4,fsr1h
 45563  00556E  C015  FFE1         	movff	??_ISR+3,fsr1l
 45564  005572  C014  FFEA         	movff	??_ISR+2,fsr0h
 45565  005576  C013  FFE9         	movff	??_ISR+1,fsr0l
 45566  00557A  0011               	retfie		f
 45567  00557C                     __end_of_ISR:
 45568                           	opt stack 0
 45569                           tblptru	equ	0xFF8
 45570                           tblptrh	equ	0xFF7
 45571                           tblptrl	equ	0xFF6
 45572                           tablat	equ	0xFF5
 45573                           prodh	equ	0xFF4
 45574                           prodl	equ	0xFF3
 45575                           intcon	equ	0xFF2
 45576                           intcon2	equ	0xFF1
 45577                           indf0	equ	0xFEF
 45578                           postinc0	equ	0xFEE
 45579                           postdec0	equ	0xFED
 45580                           fsr0h	equ	0xFEA
 45581                           fsr0l	equ	0xFE9
 45582                           wreg	equ	0xFE8
 45583                           postinc1	equ	0xFE6
 45584                           postdec1	equ	0xFE5
 45585                           plusw1	equ	0xFE3
 45586                           fsr1h	equ	0xFE2
 45587                           fsr1l	equ	0xFE1
 45588                           indf2	equ	0xFDF
 45589                           postinc2	equ	0xFDE
 45590                           postdec2	equ	0xFDD
 45591                           plusw2	equ	0xFDB
 45592                           fsr2h	equ	0xFDA
 45593                           fsr2l	equ	0xFD9
 45594                           status	equ	0xFD8
 45595                           
 45596 ;; *************** function _playArpeggio *****************
 45597 ;; Defined at:
 45598 ;;		line 277 in file "arpeggio.c"
 45599 ;; Parameters:    Size  Location     Type
 45600 ;;		None
 45601 ;; Auto vars:     Size  Location     Type
 45602 ;;		None
 45603 ;; Return value:  Size  Location     Type
 45604 ;;                  1    wreg      void 
 45605 ;; Registers used:
 45606 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+3, btemp+4, btemp
      ++5, btemp+6, btemp+7, btemp+9, btemp+10, btemp+11, prodl, prodh, cstack
 45607 ;; Tracked objects:
 45608 ;;		On entry : 0/0
 45609 ;;		On exit  : 0/0
 45610 ;;		Unchanged: 0/0
 45611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 45612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45614 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45615 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 45616 ;;Total ram usage:        6 bytes
 45617 ;; Hardware stack levels used:    1
 45618 ;; Hardware stack levels required when called:    3
 45619 ;; This function calls:
 45620 ;;		___awmod
 45621 ;;		_noteOff
 45622 ;;		_noteOn
 45623 ;;		_rand
 45624 ;;		_random_pitches
 45625 ;;		_random_pitches_non_repeating
 45626 ;;		_sort_pitches
 45627 ;; This function is called by:
 45628 ;;		_ISR
 45629 ;; This function uses a non-reentrant model
 45630 ;;
 45631                           
 45632                           	psect	text141
 45633  0011A4                     __ptext141:
 45634                           	opt stack 0
 45635  0011A4                     _playArpeggio:
 45636                           	opt stack 11
 45637                           
 45638                           ;arpeggio.c: 280: if(NUM_NOTES_PRESSED == 0){return;}
 45639                           
 45640                           ;incstack = 0
 45641  0011A4  502E               	movf	_NUM_NOTES_PRESSED,w,c
 45642  0011A6  B4D8               	btfsc	status,2,c
 45643  0011A8  0012               	return	
 45644                           
 45645                           ;arpeggio.c: 288: if(ARPEGGIO_TYPE == UP | ARPEGGIO_TYPE == UP_DOWN | ARPEGGIO_TYPE == A
      +                          S_PRESSED) {
 45646  0011AA  5034               	movf	_ARPEGGIO_TYPE,w,c
 45647  0011AC  B4D8               	btfsc	status,2,c
 45648  0011AE  D008               	goto	i2u6085_40
 45649  0011B0  0E02               	movlw	2
 45650  0011B2  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 45651  0011B4  B4D8               	btfsc	status,2,c
 45652  0011B6  D004               	goto	i2u6085_40
 45653  0011B8  0E06               	movlw	6
 45654  0011BA  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 45655  0011BC  A4D8               	btfss	status,2,c
 45656  0011BE  D0B7               	goto	i2l5544
 45657  0011C0                     i2u6085_40:
 45658                           
 45659                           ;arpeggio.c: 290: if(startingDirection == UP){
 45660  0011C0  5033               	movf	_startingDirection,w,c
 45661  0011C2  B4D8               	btfsc	status,2,c
 45662                           
 45663                           ;arpeggio.c: 292: if((overflow == 1) && (which_octave > 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 45664  0011C4  A802               	btfss	_overflow/(0+8),_overflow& (0+7),c
 45665  0011C6  D027               	goto	i2l5533
 45666  0011C8  5031               	movf	_which_octave,w,c
 45667  0011CA  0A80               	xorlw	128
 45668  0011CC  0F7F               	addlw	-129
 45669  0011CE  B0D8               	btfsc	status,0,c
 45670  0011D0  B602               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45671  0011D2  D021               	goto	i2l5533
 45672  0011D4  B402               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 45673  0011D6  D01F               	goto	i2l5533
 45674                           
 45675                           ;arpeggio.c: 295: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((which_oct
      +                          ave - 1) * 12),velocity);
 45676  0011D8  5050               	movf	_velocity,w,c
 45677  0011DA  6EE6               	movwf	postinc1,c
 45678  0011DC  0EFF               	movlw	255
 45679  0011DE  6E0C               	movwf	??_playArpeggio& (0+255),c
 45680  0011E0  0EFF               	movlw	255
 45681  0011E2  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45682  0011E4  502E               	movf	_NUM_NOTES_PRESSED,w,c
 45683  0011E6  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45684  0011E8  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45685  0011EA  500C               	movf	??_playArpeggio,w,c
 45686  0011EC  260E               	addwf	??_playArpeggio+2,f,c
 45687  0011EE  500D               	movf	??_playArpeggio+1,w,c
 45688  0011F0  220F               	addwfc	??_playArpeggio+3,f,c
 45689  0011F2  500E               	movf	??_playArpeggio+2,w,c
 45690  0011F4  242A               	addwf	_arpeggioPtr,w,c
 45691  0011F6  6ED9               	movwf	fsr2l,c
 45692  0011F8  500F               	movf	??_playArpeggio+3,w,c
 45693  0011FA  202B               	addwfc	_arpeggioPtr+1,w,c
 45694  0011FC  6EDA               	movwf	fsr2h,c
 45695  0011FE  50DF               	movf	indf2,w,c
 45696  001200  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 45697  001202  0431               	decf	_which_octave,w,c
 45698  001204  0D0C               	mullw	12
 45699  001206  50F3               	movf	prodl,w,c
 45700  001208  2410               	addwf	??_playArpeggio+4,w,c
 45701  00120A  6EE6               	movwf	postinc1,c
 45702  00120C  503D               	movf	_channel,w,c
 45703  00120E  6EE6               	movwf	postinc1,c
 45704  001210  ECA0  F04A         	call	_noteOff	;wreg free
 45705                           
 45706                           ;arpeggio.c: 296: overflow = 0;
 45707  001214  9802               	bcf	_overflow/(0+8),_overflow& (0+7),c
 45708  001216                     i2l5533:
 45709                           
 45710                           ;arpeggio.c: 297: }
 45711                           ;arpeggio.c: 298: }
 45712                           ;arpeggio.c: 300: if(startingDirection == DOWN){
 45713  001216  0433               	decf	_startingDirection,w,c
 45714  001218  B4D8               	btfsc	status,2,c
 45715                           
 45716                           ;arpeggio.c: 302: if((overflow == 1) && (which_octave > 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 45717  00121A  A802               	btfss	_overflow/(0+8),_overflow& (0+7),c
 45718  00121C  D029               	goto	i2l5535
 45719  00121E  5031               	movf	_which_octave,w,c
 45720  001220  0A80               	xorlw	128
 45721  001222  0F7F               	addlw	-129
 45722  001224  B0D8               	btfsc	status,0,c
 45723  001226  B602               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45724  001228  D023               	goto	i2l5535
 45725  00122A  B402               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 45726  00122C  D021               	goto	i2l5535
 45727                           
 45728                           ;arpeggio.c: 303: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((which_oct
      +                          ave - OCTAVES) * 12),velocity);
 45729  00122E  5050               	movf	_velocity,w,c
 45730  001230  6EE6               	movwf	postinc1,c
 45731  001232  0EFF               	movlw	255
 45732  001234  6E0C               	movwf	??_playArpeggio& (0+255),c
 45733  001236  0EFF               	movlw	255
 45734  001238  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45735  00123A  502E               	movf	_NUM_NOTES_PRESSED,w,c
 45736  00123C  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45737  00123E  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45738  001240  500C               	movf	??_playArpeggio,w,c
 45739  001242  260E               	addwf	??_playArpeggio+2,f,c
 45740  001244  500D               	movf	??_playArpeggio+1,w,c
 45741  001246  220F               	addwfc	??_playArpeggio+3,f,c
 45742  001248  500E               	movf	??_playArpeggio+2,w,c
 45743  00124A  242A               	addwf	_arpeggioPtr,w,c
 45744  00124C  6ED9               	movwf	fsr2l,c
 45745  00124E  500F               	movf	??_playArpeggio+3,w,c
 45746  001250  202B               	addwfc	_arpeggioPtr+1,w,c
 45747  001252  6EDA               	movwf	fsr2h,c
 45748  001254  50DF               	movf	indf2,w,c
 45749  001256  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 45750  001258  504D               	movf	_OCTAVES,w,c
 45751  00125A  0800               	sublw	0
 45752  00125C  2431               	addwf	_which_octave,w,c
 45753  00125E  0D0C               	mullw	12
 45754  001260  50F3               	movf	prodl,w,c
 45755  001262  2410               	addwf	??_playArpeggio+4,w,c
 45756  001264  6EE6               	movwf	postinc1,c
 45757  001266  503D               	movf	_channel,w,c
 45758  001268  6EE6               	movwf	postinc1,c
 45759  00126A  ECA0  F04A         	call	_noteOff	;wreg free
 45760                           
 45761                           ;arpeggio.c: 304: overflow = 0;
 45762  00126E  9802               	bcf	_overflow/(0+8),_overflow& (0+7),c
 45763  001270                     i2l5535:
 45764                           
 45765                           ;arpeggio.c: 305: }
 45766                           ;arpeggio.c: 306: }
 45767                           ;arpeggio.c: 308: if(octave_overflow == 1){
 45768  001270  A602               	btfss	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45769  001272  D05D               	goto	i2l5544
 45770                           
 45771                           ;arpeggio.c: 309: if(startingDirection == UP) {
 45772  001274  5033               	movf	_startingDirection,w,c
 45773  001276  A4D8               	btfss	status,2,c
 45774  001278  D021               	goto	i2l5537
 45775                           
 45776                           ;arpeggio.c: 311: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )) + ((OCTAVES - 1) * 12),velocity);}
 45777  00127A  B202               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 45778  00127C  D01E               	goto	i2l5538
 45779  00127E  5050               	movf	_velocity,w,c
 45780  001280  6EE6               	movwf	postinc1,c
 45781  001282  0EFF               	movlw	255
 45782  001284  6E0C               	movwf	??_playArpeggio& (0+255),c
 45783  001286  0EFF               	movlw	255
 45784  001288  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45785  00128A  502E               	movf	_NUM_NOTES_PRESSED,w,c
 45786  00128C  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45787  00128E  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45788  001290  500C               	movf	??_playArpeggio,w,c
 45789  001292  260E               	addwf	??_playArpeggio+2,f,c
 45790  001294  500D               	movf	??_playArpeggio+1,w,c
 45791  001296  220F               	addwfc	??_playArpeggio+3,f,c
 45792  001298  500E               	movf	??_playArpeggio+2,w,c
 45793  00129A  242A               	addwf	_arpeggioPtr,w,c
 45794  00129C  6ED9               	movwf	fsr2l,c
 45795  00129E  500F               	movf	??_playArpeggio+3,w,c
 45796  0012A0  202B               	addwfc	_arpeggioPtr+1,w,c
 45797  0012A2  6EDA               	movwf	fsr2h,c
 45798  0012A4  50DF               	movf	indf2,w,c
 45799  0012A6  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 45800  0012A8  044D               	decf	_OCTAVES,w,c
 45801  0012AA  0D0C               	mullw	12
 45802  0012AC  50F3               	movf	prodl,w,c
 45803  0012AE  2410               	addwf	??_playArpeggio+4,w,c
 45804  0012B0  6EE6               	movwf	postinc1,c
 45805  0012B2  503D               	movf	_channel,w,c
 45806  0012B4  6EE6               	movwf	postinc1,c
 45807  0012B6  ECA0  F04A         	call	_noteOff	;wreg free
 45808  0012BA                     i2l5538:
 45809                           
 45810                           ;arpeggio.c: 312: octave_overflow = 0;
 45811  0012BA  9602               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45812  0012BC                     i2l5537:
 45813                           
 45814                           ;arpeggio.c: 313: }
 45815                           ;arpeggio.c: 315: if(startingDirection == DOWN){
 45816  0012BC  0433               	decf	_startingDirection,w,c
 45817  0012BE  A4D8               	btfss	status,2,c
 45818  0012C0  D01C               	goto	i2l5539
 45819                           
 45820                           ;arpeggio.c: 317: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )),velocity);}
 45821  0012C2  B202               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 45822  0012C4  D019               	goto	i2l5540
 45823  0012C6  5050               	movf	_velocity,w,c
 45824  0012C8  6EE6               	movwf	postinc1,c
 45825  0012CA  0EFF               	movlw	255
 45826  0012CC  6E0C               	movwf	??_playArpeggio& (0+255),c
 45827  0012CE  0EFF               	movlw	255
 45828  0012D0  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45829  0012D2  502E               	movf	_NUM_NOTES_PRESSED,w,c
 45830  0012D4  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45831  0012D6  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45832  0012D8  500C               	movf	??_playArpeggio,w,c
 45833  0012DA  260E               	addwf	??_playArpeggio+2,f,c
 45834  0012DC  500D               	movf	??_playArpeggio+1,w,c
 45835  0012DE  220F               	addwfc	??_playArpeggio+3,f,c
 45836  0012E0  500E               	movf	??_playArpeggio+2,w,c
 45837  0012E2  242A               	addwf	_arpeggioPtr,w,c
 45838  0012E4  6ED9               	movwf	fsr2l,c
 45839  0012E6  500F               	movf	??_playArpeggio+3,w,c
 45840  0012E8  202B               	addwfc	_arpeggioPtr+1,w,c
 45841  0012EA  6EDA               	movwf	fsr2h,c
 45842  0012EC  50DF               	movf	indf2,w,c
 45843  0012EE  6EE6               	movwf	postinc1,c
 45844  0012F0  503D               	movf	_channel,w,c
 45845  0012F2  6EE6               	movwf	postinc1,c
 45846  0012F4  ECA0  F04A         	call	_noteOff	;wreg free
 45847  0012F8                     i2l5540:
 45848                           
 45849                           ;arpeggio.c: 318: octave_overflow = 0;
 45850  0012F8  9602               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45851  0012FA                     i2l5539:
 45852                           
 45853                           ;arpeggio.c: 319: }
 45854                           ;arpeggio.c: 323: if(skipFirstLast == 1){
 45855  0012FA  AA03               	btfss	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 45856  0012FC  D012               	goto	i2l5543
 45857                           
 45858                           ;arpeggio.c: 324: if(NUM_NOTES_PRESSED > 1){
 45859  0012FE  0E01               	movlw	1
 45860  001300  642E               	cpfsgt	_NUM_NOTES_PRESSED,c
 45861  001302  D003               	goto	i2l5542
 45862                           
 45863                           ;arpeggio.c: 325: which_note = 1;
 45864  001304  0E01               	movlw	1
 45865  001306  6E32               	movwf	_which_note,c
 45866                           
 45867                           ;arpeggio.c: 326: suppress_note_off = 1;
 45868  001308  8A02               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 45869  00130A                     i2l5542:
 45870                           
 45871                           ;arpeggio.c: 327: }
 45872                           ;arpeggio.c: 331: if((NUM_NOTES_PRESSED == 1) && (OCTAVES > 1)){
 45873  00130A  042E               	decf	_NUM_NOTES_PRESSED,w,c
 45874  00130C  A4D8               	btfss	status,2,c
 45875  00130E  D009               	goto	i2l5543
 45876  001310  0E01               	movlw	1
 45877  001312  644D               	cpfsgt	_OCTAVES,c
 45878  001314  D006               	goto	i2l5543
 45879                           
 45880                           ;arpeggio.c: 332: flag1 = 1;
 45881  001316  8402               	bsf	_flag1/(0+8),_flag1& (0+7),c
 45882                           
 45883                           ;arpeggio.c: 334: which_note = 0;
 45884  001318  0E00               	movlw	0
 45885  00131A  6E32               	movwf	_which_note,c
 45886                           
 45887                           ;arpeggio.c: 335: which_octave--;
 45888  00131C  0631               	decf	_which_octave,f,c
 45889                           
 45890                           ;arpeggio.c: 336: stored_octave = which_octave;
 45891  00131E  C031  F030         	movff	_which_octave,_stored_octave
 45892  001322                     i2l5543:
 45893                           
 45894                           ;arpeggio.c: 337: }
 45895                           ;arpeggio.c: 338: }
 45896                           ;arpeggio.c: 341: if(ARPEGGIO_TYPE == UP_DOWN) {ARPEGGIO_TYPE = DOWN_UP;}
 45897  001322  0E02               	movlw	2
 45898  001324  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 45899  001326  A4D8               	btfss	status,2,c
 45900  001328  D002               	goto	i2l5544
 45901  00132A  0E03               	movlw	3
 45902  00132C  6E34               	movwf	_ARPEGGIO_TYPE,c
 45903  00132E                     i2l5544:
 45904                           
 45905                           ;arpeggio.c: 342: }
 45906                           ;arpeggio.c: 343: }
 45907                           ;arpeggio.c: 346: if(ARPEGGIO_TYPE == DOWN | ARPEGGIO_TYPE == DOWN_UP) {
 45908  00132E  0434               	decf	_ARPEGGIO_TYPE,w,c
 45909  001330  B4D8               	btfsc	status,2,c
 45910  001332  D004               	goto	i2u6107_40
 45911  001334  0E03               	movlw	3
 45912  001336  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 45913  001338  A4D8               	btfss	status,2,c
 45914  00133A  D0BE               	goto	i2l5560
 45915  00133C                     i2u6107_40:
 45916                           
 45917                           ;arpeggio.c: 348: if(startingDirection == UP){
 45918  00133C  5033               	movf	_startingDirection,w,c
 45919  00133E  B4D8               	btfsc	status,2,c
 45920                           
 45921                           ;arpeggio.c: 350: if((overflow == 1) && (which_octave < 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 45922  001340  A802               	btfss	_overflow/(0+8),_overflow& (0+7),c
 45923  001342  D025               	goto	i2l5549
 45924  001344  BE31               	btfsc	_which_octave,7,c
 45925  001346  B602               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45926  001348  D022               	goto	i2l5549
 45927  00134A  B402               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 45928  00134C  D020               	goto	i2l5549
 45929                           
 45930                           ;arpeggio.c: 351: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((OCTAVES +
      +                           which_octave) * 12),velocity);
 45931  00134E  5050               	movf	_velocity,w,c
 45932  001350  6EE6               	movwf	postinc1,c
 45933  001352  0EFF               	movlw	255
 45934  001354  6E0C               	movwf	??_playArpeggio& (0+255),c
 45935  001356  0EFF               	movlw	255
 45936  001358  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45937  00135A  502E               	movf	_NUM_NOTES_PRESSED,w,c
 45938  00135C  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45939  00135E  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45940  001360  500C               	movf	??_playArpeggio,w,c
 45941  001362  260E               	addwf	??_playArpeggio+2,f,c
 45942  001364  500D               	movf	??_playArpeggio+1,w,c
 45943  001366  220F               	addwfc	??_playArpeggio+3,f,c
 45944  001368  500E               	movf	??_playArpeggio+2,w,c
 45945  00136A  242A               	addwf	_arpeggioPtr,w,c
 45946  00136C  6ED9               	movwf	fsr2l,c
 45947  00136E  500F               	movf	??_playArpeggio+3,w,c
 45948  001370  202B               	addwfc	_arpeggioPtr+1,w,c
 45949  001372  6EDA               	movwf	fsr2h,c
 45950  001374  50DF               	movf	indf2,w,c
 45951  001376  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 45952  001378  5031               	movf	_which_octave,w,c
 45953  00137A  244D               	addwf	_OCTAVES,w,c
 45954  00137C  0D0C               	mullw	12
 45955  00137E  50F3               	movf	prodl,w,c
 45956  001380  2410               	addwf	??_playArpeggio+4,w,c
 45957  001382  6EE6               	movwf	postinc1,c
 45958  001384  503D               	movf	_channel,w,c
 45959  001386  6EE6               	movwf	postinc1,c
 45960  001388  ECA0  F04A         	call	_noteOff	;wreg free
 45961                           
 45962                           ;arpeggio.c: 352: overflow = 0;
 45963  00138C  9802               	bcf	_overflow/(0+8),_overflow& (0+7),c
 45964  00138E                     i2l5549:
 45965                           
 45966                           ;arpeggio.c: 353: }
 45967                           ;arpeggio.c: 354: }
 45968                           ;arpeggio.c: 356: if(startingDirection == DOWN) {
 45969  00138E  0433               	decf	_startingDirection,w,c
 45970  001390  B4D8               	btfsc	status,2,c
 45971                           
 45972                           ;arpeggio.c: 358: if((overflow == 1) && (which_octave < 0) && (octave_overflow == 0) && 
      +                          (flag1 == 0)){
 45973  001392  A802               	btfss	_overflow/(0+8),_overflow& (0+7),c
 45974  001394  D024               	goto	i2l5551
 45975  001396  BE31               	btfsc	_which_octave,7,c
 45976  001398  B602               	btfsc	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 45977  00139A  D021               	goto	i2l5551
 45978  00139C  B402               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 45979  00139E  D01F               	goto	i2l5551
 45980                           
 45981                           ;arpeggio.c: 359: noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1)) + ((which_oct
      +                          ave + 1) * 12),velocity);
 45982  0013A0  5050               	movf	_velocity,w,c
 45983  0013A2  6EE6               	movwf	postinc1,c
 45984  0013A4  0EFF               	movlw	255
 45985  0013A6  6E0C               	movwf	??_playArpeggio& (0+255),c
 45986  0013A8  0EFF               	movlw	255
 45987  0013AA  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 45988  0013AC  502E               	movf	_NUM_NOTES_PRESSED,w,c
 45989  0013AE  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 45990  0013B0  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 45991  0013B2  500C               	movf	??_playArpeggio,w,c
 45992  0013B4  260E               	addwf	??_playArpeggio+2,f,c
 45993  0013B6  500D               	movf	??_playArpeggio+1,w,c
 45994  0013B8  220F               	addwfc	??_playArpeggio+3,f,c
 45995  0013BA  500E               	movf	??_playArpeggio+2,w,c
 45996  0013BC  242A               	addwf	_arpeggioPtr,w,c
 45997  0013BE  6ED9               	movwf	fsr2l,c
 45998  0013C0  500F               	movf	??_playArpeggio+3,w,c
 45999  0013C2  202B               	addwfc	_arpeggioPtr+1,w,c
 46000  0013C4  6EDA               	movwf	fsr2h,c
 46001  0013C6  50DF               	movf	indf2,w,c
 46002  0013C8  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 46003  0013CA  2831               	incf	_which_octave,w,c
 46004  0013CC  0D0C               	mullw	12
 46005  0013CE  50F3               	movf	prodl,w,c
 46006  0013D0  2410               	addwf	??_playArpeggio+4,w,c
 46007  0013D2  6EE6               	movwf	postinc1,c
 46008  0013D4  503D               	movf	_channel,w,c
 46009  0013D6  6EE6               	movwf	postinc1,c
 46010  0013D8  ECA0  F04A         	call	_noteOff	;wreg free
 46011                           
 46012                           ;arpeggio.c: 360: overflow = 0;
 46013  0013DC  9802               	bcf	_overflow/(0+8),_overflow& (0+7),c
 46014  0013DE                     i2l5551:
 46015                           
 46016                           ;arpeggio.c: 361: }
 46017                           ;arpeggio.c: 362: }
 46018                           ;arpeggio.c: 364: if(octave_overflow == 1){
 46019  0013DE  A602               	btfss	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 46020  0013E0  D06B               	goto	i2l5560
 46021                           
 46022                           ;arpeggio.c: 366: if(startingDirection == UP){
 46023  0013E2  5033               	movf	_startingDirection,w,c
 46024  0013E4  A4D8               	btfss	status,2,c
 46025  0013E6  D025               	goto	i2l5553
 46026                           
 46027                           ;arpeggio.c: 368: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )) + (((OCTAVES * - 1) + OCTAVES) * 12),velocity);}
 46028  0013E8  B202               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 46029  0013EA  D022               	goto	i2l5554
 46030  0013EC  5050               	movf	_velocity,w,c
 46031  0013EE  6EE6               	movwf	postinc1,c
 46032  0013F0  0EFF               	movlw	255
 46033  0013F2  6E0C               	movwf	??_playArpeggio& (0+255),c
 46034  0013F4  0EFF               	movlw	255
 46035  0013F6  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 46036  0013F8  502E               	movf	_NUM_NOTES_PRESSED,w,c
 46037  0013FA  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 46038  0013FC  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 46039  0013FE  500C               	movf	??_playArpeggio,w,c
 46040  001400  260E               	addwf	??_playArpeggio+2,f,c
 46041  001402  500D               	movf	??_playArpeggio+1,w,c
 46042  001404  220F               	addwfc	??_playArpeggio+3,f,c
 46043  001406  500E               	movf	??_playArpeggio+2,w,c
 46044  001408  242A               	addwf	_arpeggioPtr,w,c
 46045  00140A  6ED9               	movwf	fsr2l,c
 46046  00140C  500F               	movf	??_playArpeggio+3,w,c
 46047  00140E  202B               	addwfc	_arpeggioPtr+1,w,c
 46048  001410  6EDA               	movwf	fsr2h,c
 46049  001412  50DF               	movf	indf2,w,c
 46050  001414  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 46051  001416  504D               	movf	_OCTAVES,w,c
 46052  001418  0D01               	mullw	1
 46053  00141A  50F3               	movf	prodl,w,c
 46054  00141C  0800               	sublw	0
 46055  00141E  244D               	addwf	_OCTAVES,w,c
 46056  001420  0D0C               	mullw	12
 46057  001422  50F3               	movf	prodl,w,c
 46058  001424  2410               	addwf	??_playArpeggio+4,w,c
 46059  001426  6EE6               	movwf	postinc1,c
 46060  001428  503D               	movf	_channel,w,c
 46061  00142A  6EE6               	movwf	postinc1,c
 46062  00142C  ECA0  F04A         	call	_noteOff	;wreg free
 46063  001430                     i2l5554:
 46064                           
 46065                           ;arpeggio.c: 369: octave_overflow = 0;
 46066  001430  9602               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 46067  001432                     i2l5553:
 46068                           
 46069                           ;arpeggio.c: 370: }
 46070                           ;arpeggio.c: 372: if(startingDirection == DOWN){
 46071  001432  0433               	decf	_startingDirection,w,c
 46072  001434  A4D8               	btfss	status,2,c
 46073  001436  D026               	goto	i2l5555
 46074                           
 46075                           ;arpeggio.c: 374: if(flag2 == 0) {noteOff(channel,*(arpeggioPtr + (NUM_NOTES_PRESSED - 1
      +                          )) + (((OCTAVES * - 1) + 1) * 12),velocity);}
 46076  001438  B202               	btfsc	_flag2/(0+8),_flag2& (0+7),c
 46077  00143A  D023               	goto	i2l5556
 46078  00143C  5050               	movf	_velocity,w,c
 46079  00143E  6EE6               	movwf	postinc1,c
 46080  001440  0EFF               	movlw	255
 46081  001442  6E0C               	movwf	??_playArpeggio& (0+255),c
 46082  001444  0EFF               	movlw	255
 46083  001446  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 46084  001448  502E               	movf	_NUM_NOTES_PRESSED,w,c
 46085  00144A  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 46086  00144C  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 46087  00144E  500C               	movf	??_playArpeggio,w,c
 46088  001450  260E               	addwf	??_playArpeggio+2,f,c
 46089  001452  500D               	movf	??_playArpeggio+1,w,c
 46090  001454  220F               	addwfc	??_playArpeggio+3,f,c
 46091  001456  500E               	movf	??_playArpeggio+2,w,c
 46092  001458  242A               	addwf	_arpeggioPtr,w,c
 46093  00145A  6ED9               	movwf	fsr2l,c
 46094  00145C  500F               	movf	??_playArpeggio+3,w,c
 46095  00145E  202B               	addwfc	_arpeggioPtr+1,w,c
 46096  001460  6EDA               	movwf	fsr2h,c
 46097  001462  50DF               	movf	indf2,w,c
 46098  001464  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 46099  001466  504D               	movf	_OCTAVES,w,c
 46100  001468  0D01               	mullw	1
 46101  00146A  50F3               	movf	prodl,w,c
 46102  00146C  0800               	sublw	0
 46103  00146E  6E11               	movwf	(??_playArpeggio+5)& (0+255),c
 46104  001470  2811               	incf	??_playArpeggio+5,w,c
 46105  001472  0D0C               	mullw	12
 46106  001474  50F3               	movf	prodl,w,c
 46107  001476  2410               	addwf	??_playArpeggio+4,w,c
 46108  001478  6EE6               	movwf	postinc1,c
 46109  00147A  503D               	movf	_channel,w,c
 46110  00147C  6EE6               	movwf	postinc1,c
 46111  00147E  ECA0  F04A         	call	_noteOff	;wreg free
 46112  001482                     i2l5556:
 46113                           
 46114                           ;arpeggio.c: 375: octave_overflow = 0;
 46115  001482  9602               	bcf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 46116  001484                     i2l5555:
 46117                           
 46118                           ;arpeggio.c: 376: }
 46119                           ;arpeggio.c: 380: if(skipFirstLast == 1){
 46120  001484  AA03               	btfss	_skipFirstLast/(0+8),_skipFirstLast& (0+7),c
 46121  001486  D012               	goto	i2l5559
 46122                           
 46123                           ;arpeggio.c: 381: if(NUM_NOTES_PRESSED > 1){
 46124  001488  0E01               	movlw	1
 46125  00148A  642E               	cpfsgt	_NUM_NOTES_PRESSED,c
 46126  00148C  D003               	goto	i2l5558
 46127                           
 46128                           ;arpeggio.c: 382: which_note = 1;
 46129  00148E  0E01               	movlw	1
 46130  001490  6E32               	movwf	_which_note,c
 46131                           
 46132                           ;arpeggio.c: 383: suppress_note_off = 1;
 46133  001492  8A02               	bsf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 46134  001494                     i2l5558:
 46135                           
 46136                           ;arpeggio.c: 384: }
 46137                           ;arpeggio.c: 388: if((NUM_NOTES_PRESSED == 1) && (OCTAVES > 1)){
 46138  001494  042E               	decf	_NUM_NOTES_PRESSED,w,c
 46139  001496  A4D8               	btfss	status,2,c
 46140  001498  D009               	goto	i2l5559
 46141  00149A  0E01               	movlw	1
 46142  00149C  644D               	cpfsgt	_OCTAVES,c
 46143  00149E  D006               	goto	i2l5559
 46144                           
 46145                           ;arpeggio.c: 389: flag1 = 1;
 46146  0014A0  8402               	bsf	_flag1/(0+8),_flag1& (0+7),c
 46147                           
 46148                           ;arpeggio.c: 391: which_note = 0;
 46149  0014A2  0E00               	movlw	0
 46150  0014A4  6E32               	movwf	_which_note,c
 46151                           
 46152                           ;arpeggio.c: 392: which_octave++;
 46153  0014A6  2A31               	incf	_which_octave,f,c
 46154                           
 46155                           ;arpeggio.c: 393: stored_octave = which_octave;
 46156  0014A8  C031  F030         	movff	_which_octave,_stored_octave
 46157  0014AC                     i2l5559:
 46158                           
 46159                           ;arpeggio.c: 394: }
 46160                           ;arpeggio.c: 395: }
 46161                           ;arpeggio.c: 397: if(ARPEGGIO_TYPE == DOWN_UP) {ARPEGGIO_TYPE = UP_DOWN;}
 46162  0014AC  0E03               	movlw	3
 46163  0014AE  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 46164  0014B0  A4D8               	btfss	status,2,c
 46165  0014B2  D002               	goto	i2l5560
 46166  0014B4  0E02               	movlw	2
 46167  0014B6  6E34               	movwf	_ARPEGGIO_TYPE,c
 46168  0014B8                     i2l5560:
 46169                           
 46170                           ;arpeggio.c: 398: }
 46171                           ;arpeggio.c: 399: }
 46172                           ;arpeggio.c: 402: if(ARPEGGIO_TYPE == RANDOM | ARPEGGIO_TYPE == RANDOM_NON_REPEATING){
 46173  0014B8  0E05               	movlw	5
 46174  0014BA  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 46175  0014BC  B4D8               	btfsc	status,2,c
 46176  0014BE  D004               	goto	i2u6129_40
 46177  0014C0  0E04               	movlw	4
 46178  0014C2  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 46179  0014C4  A4D8               	btfss	status,2,c
 46180  0014C6  D05A               	goto	i2l5566
 46181  0014C8                     i2u6129_40:
 46182                           
 46183                           ;arpeggio.c: 404: last_octave = which_octave;
 46184  0014C8  C031  F17E         	movff	_which_octave,_last_octave
 46185                           
 46186                           ;arpeggio.c: 406: if((overflow == 1) && (flag1 == 0)){
 46187  0014CC  B802               	btfsc	_overflow/(0+8),_overflow& (0+7),c
 46188  0014CE  B402               	btfsc	_flag1/(0+8),_flag1& (0+7),c
 46189  0014D0  D00E               	goto	i2l5564
 46190                           
 46191                           ;arpeggio.c: 407: noteOff(channel,last_note + (last_octave * 12),velocity);
 46192  0014D2  5050               	movf	_velocity,w,c
 46193  0014D4  6EE6               	movwf	postinc1,c
 46194  0014D6  0101               	movlb	1	; () banked
 46195  0014D8  517E               	movf	_last_octave& (0+255),w,b
 46196  0014DA  0D0C               	mullw	12
 46197  0014DC  50F3               	movf	prodl,w,c
 46198  0014DE  0100               	movlb	0	; () banked
 46199  0014E0  25ED               	addwf	_last_note& (0+255),w,b
 46200  0014E2  6EE6               	movwf	postinc1,c
 46201  0014E4  503D               	movf	_channel,w,c
 46202  0014E6  6EE6               	movwf	postinc1,c
 46203  0014E8  ECA0  F04A         	call	_noteOff	;wreg free
 46204                           
 46205                           ;arpeggio.c: 408: overflow = 0;
 46206  0014EC  9802               	bcf	_overflow/(0+8),_overflow& (0+7),c
 46207  0014EE                     i2l5564:
 46208                           
 46209                           ;arpeggio.c: 409: }
 46210                           ;arpeggio.c: 411: if((which_note > 0) && (suppress_note_off == 0)){noteOff(channel,*(arp
      +                          eggioPtr + (which_note - 1)) + (which_octave * 12),velocity);}
 46211  0014EE  5032               	movf	_which_note,w,c
 46212  0014F0  A4D8               	btfss	status,2,c
 46213  0014F2  BA02               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 46214  0014F4  D01E               	goto	i2l5565
 46215  0014F6  5050               	movf	_velocity,w,c
 46216  0014F8  6EE6               	movwf	postinc1,c
 46217  0014FA  0EFF               	movlw	255
 46218  0014FC  6E0C               	movwf	??_playArpeggio& (0+255),c
 46219  0014FE  0EFF               	movlw	255
 46220  001500  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 46221  001502  5032               	movf	_which_note,w,c
 46222  001504  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 46223  001506  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 46224  001508  500C               	movf	??_playArpeggio,w,c
 46225  00150A  260E               	addwf	??_playArpeggio+2,f,c
 46226  00150C  500D               	movf	??_playArpeggio+1,w,c
 46227  00150E  220F               	addwfc	??_playArpeggio+3,f,c
 46228  001510  500E               	movf	??_playArpeggio+2,w,c
 46229  001512  242A               	addwf	_arpeggioPtr,w,c
 46230  001514  6ED9               	movwf	fsr2l,c
 46231  001516  500F               	movf	??_playArpeggio+3,w,c
 46232  001518  202B               	addwfc	_arpeggioPtr+1,w,c
 46233  00151A  6EDA               	movwf	fsr2h,c
 46234  00151C  50DF               	movf	indf2,w,c
 46235  00151E  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 46236  001520  5031               	movf	_which_octave,w,c
 46237  001522  0D0C               	mullw	12
 46238  001524  50F3               	movf	prodl,w,c
 46239  001526  2410               	addwf	??_playArpeggio+4,w,c
 46240  001528  6EE6               	movwf	postinc1,c
 46241  00152A  503D               	movf	_channel,w,c
 46242  00152C  6EE6               	movwf	postinc1,c
 46243  00152E  ECA0  F04A         	call	_noteOff	;wreg free
 46244  001532                     i2l5565:
 46245                           
 46246                           ;arpeggio.c: 412: which_octave = rand() % OCTAVES;
 46247  001532  504D               	movf	_OCTAVES,w,c
 46248  001534  6EE6               	movwf	postinc1,c
 46249  001536  0E00               	movlw	0
 46250  001538  6EE6               	movwf	postinc1,c
 46251  00153A  EC32  F042         	call	_rand	;wreg free
 46252  00153E  C03E  FFE6         	movff	btemp,postinc1
 46253  001542  C03F  FFE6         	movff	btemp+1,postinc1
 46254  001546  ECA8  F034         	call	___awmod	;wreg free
 46255  00154A  503E               	movf	btemp,w,c
 46256  00154C  6E31               	movwf	_which_octave,c
 46257                           
 46258                           ;arpeggio.c: 413: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           (which_octave * 12),velocity);}
 46259  00154E  BC02               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 46260  001550  D015               	goto	i2l5566
 46261  001552  5050               	movf	_velocity,w,c
 46262  001554  6EE6               	movwf	postinc1,c
 46263  001556  5032               	movf	_which_note,w,c
 46264  001558  0D01               	mullw	1
 46265  00155A  50F3               	movf	prodl,w,c
 46266  00155C  242A               	addwf	_arpeggioPtr,w,c
 46267  00155E  6ED9               	movwf	fsr2l,c
 46268  001560  50F4               	movf	prodh,w,c
 46269  001562  202B               	addwfc	_arpeggioPtr+1,w,c
 46270  001564  6EDA               	movwf	fsr2h,c
 46271  001566  50DF               	movf	indf2,w,c
 46272  001568  6E0C               	movwf	??_playArpeggio& (0+255),c
 46273  00156A  5031               	movf	_which_octave,w,c
 46274  00156C  0D0C               	mullw	12
 46275  00156E  50F3               	movf	prodl,w,c
 46276  001570  240C               	addwf	??_playArpeggio,w,c
 46277  001572  6EE6               	movwf	postinc1,c
 46278  001574  503D               	movf	_channel,w,c
 46279  001576  6EE6               	movwf	postinc1,c
 46280  001578  EC10  F046         	call	_noteOn	;wreg free
 46281  00157C                     i2l5566:
 46282                           
 46283                           ;arpeggio.c: 414: }
 46284                           ;arpeggio.c: 416: if((ARPEGGIO_TYPE == UP) | (ARPEGGIO_TYPE == UP_DOWN | ARPEGGIO_TYPE =
      +                          = AS_PRESSED)) {
 46285  00157C  5034               	movf	_ARPEGGIO_TYPE,w,c
 46286  00157E  B4D8               	btfsc	status,2,c
 46287  001580  D008               	goto	i2u6137_40
 46288  001582  0E02               	movlw	2
 46289  001584  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 46290  001586  B4D8               	btfsc	status,2,c
 46291  001588  D004               	goto	i2u6137_40
 46292  00158A  0E06               	movlw	6
 46293  00158C  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 46294  00158E  A4D8               	btfss	status,2,c
 46295  001590  D07F               	goto	i2l5577
 46296  001592                     i2u6137_40:
 46297                           
 46298                           ;arpeggio.c: 418: SORT_DIRECTION = 0;
 46299  001592  9C04               	bcf	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 46300                           
 46301                           ;arpeggio.c: 419: sort_pitches();
 46302  001594  EC91  F032         	call	_sort_pitches	;wreg free
 46303                           
 46304                           ;arpeggio.c: 421: if(startingDirection == UP){
 46305  001598  5033               	movf	_startingDirection,w,c
 46306  00159A  A4D8               	btfss	status,2,c
 46307  00159C  D039               	goto	i2l5574
 46308                           
 46309                           ;arpeggio.c: 423: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + (which_octave * 12),velocity);}
 46310  00159E  5032               	movf	_which_note,w,c
 46311  0015A0  A4D8               	btfss	status,2,c
 46312  0015A2  BA02               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 46313  0015A4  D01E               	goto	i2l5573
 46314  0015A6  5050               	movf	_velocity,w,c
 46315  0015A8  6EE6               	movwf	postinc1,c
 46316  0015AA  0EFF               	movlw	255
 46317  0015AC  6E0C               	movwf	??_playArpeggio& (0+255),c
 46318  0015AE  0EFF               	movlw	255
 46319  0015B0  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 46320  0015B2  5032               	movf	_which_note,w,c
 46321  0015B4  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 46322  0015B6  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 46323  0015B8  500C               	movf	??_playArpeggio,w,c
 46324  0015BA  260E               	addwf	??_playArpeggio+2,f,c
 46325  0015BC  500D               	movf	??_playArpeggio+1,w,c
 46326  0015BE  220F               	addwfc	??_playArpeggio+3,f,c
 46327  0015C0  500E               	movf	??_playArpeggio+2,w,c
 46328  0015C2  242A               	addwf	_arpeggioPtr,w,c
 46329  0015C4  6ED9               	movwf	fsr2l,c
 46330  0015C6  500F               	movf	??_playArpeggio+3,w,c
 46331  0015C8  202B               	addwfc	_arpeggioPtr+1,w,c
 46332  0015CA  6EDA               	movwf	fsr2h,c
 46333  0015CC  50DF               	movf	indf2,w,c
 46334  0015CE  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 46335  0015D0  5031               	movf	_which_octave,w,c
 46336  0015D2  0D0C               	mullw	12
 46337  0015D4  50F3               	movf	prodl,w,c
 46338  0015D6  2410               	addwf	??_playArpeggio+4,w,c
 46339  0015D8  6EE6               	movwf	postinc1,c
 46340  0015DA  503D               	movf	_channel,w,c
 46341  0015DC  6EE6               	movwf	postinc1,c
 46342  0015DE  ECA0  F04A         	call	_noteOff	;wreg free
 46343  0015E2                     i2l5573:
 46344                           
 46345                           ;arpeggio.c: 424: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           (which_octave * 12),velocity);}
 46346  0015E2  BC02               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 46347  0015E4  D015               	goto	i2l5574
 46348  0015E6  5050               	movf	_velocity,w,c
 46349  0015E8  6EE6               	movwf	postinc1,c
 46350  0015EA  5032               	movf	_which_note,w,c
 46351  0015EC  0D01               	mullw	1
 46352  0015EE  50F3               	movf	prodl,w,c
 46353  0015F0  242A               	addwf	_arpeggioPtr,w,c
 46354  0015F2  6ED9               	movwf	fsr2l,c
 46355  0015F4  50F4               	movf	prodh,w,c
 46356  0015F6  202B               	addwfc	_arpeggioPtr+1,w,c
 46357  0015F8  6EDA               	movwf	fsr2h,c
 46358  0015FA  50DF               	movf	indf2,w,c
 46359  0015FC  6E0C               	movwf	??_playArpeggio& (0+255),c
 46360  0015FE  5031               	movf	_which_octave,w,c
 46361  001600  0D0C               	mullw	12
 46362  001602  50F3               	movf	prodl,w,c
 46363  001604  240C               	addwf	??_playArpeggio,w,c
 46364  001606  6EE6               	movwf	postinc1,c
 46365  001608  503D               	movf	_channel,w,c
 46366  00160A  6EE6               	movwf	postinc1,c
 46367  00160C  EC10  F046         	call	_noteOn	;wreg free
 46368  001610                     i2l5574:
 46369                           
 46370                           ;arpeggio.c: 425: }
 46371                           ;arpeggio.c: 427: if(startingDirection == DOWN) {
 46372  001610  0433               	decf	_startingDirection,w,c
 46373  001612  A4D8               	btfss	status,2,c
 46374  001614  D03D               	goto	i2l5577
 46375                           
 46376                           ;arpeggio.c: 429: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + ((which_octave - (OCTAVES - 1)) * 12),velocity);}
 46377  001616  5032               	movf	_which_note,w,c
 46378  001618  A4D8               	btfss	status,2,c
 46379  00161A  BA02               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 46380  00161C  D020               	goto	i2l5576
 46381  00161E  5050               	movf	_velocity,w,c
 46382  001620  6EE6               	movwf	postinc1,c
 46383  001622  0EFF               	movlw	255
 46384  001624  6E0C               	movwf	??_playArpeggio& (0+255),c
 46385  001626  0EFF               	movlw	255
 46386  001628  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 46387  00162A  5032               	movf	_which_note,w,c
 46388  00162C  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 46389  00162E  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 46390  001630  500C               	movf	??_playArpeggio,w,c
 46391  001632  260E               	addwf	??_playArpeggio+2,f,c
 46392  001634  500D               	movf	??_playArpeggio+1,w,c
 46393  001636  220F               	addwfc	??_playArpeggio+3,f,c
 46394  001638  500E               	movf	??_playArpeggio+2,w,c
 46395  00163A  242A               	addwf	_arpeggioPtr,w,c
 46396  00163C  6ED9               	movwf	fsr2l,c
 46397  00163E  500F               	movf	??_playArpeggio+3,w,c
 46398  001640  202B               	addwfc	_arpeggioPtr+1,w,c
 46399  001642  6EDA               	movwf	fsr2h,c
 46400  001644  50DF               	movf	indf2,w,c
 46401  001646  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 46402  001648  044D               	decf	_OCTAVES,w,c
 46403  00164A  0800               	sublw	0
 46404  00164C  2431               	addwf	_which_octave,w,c
 46405  00164E  0D0C               	mullw	12
 46406  001650  50F3               	movf	prodl,w,c
 46407  001652  2410               	addwf	??_playArpeggio+4,w,c
 46408  001654  6EE6               	movwf	postinc1,c
 46409  001656  503D               	movf	_channel,w,c
 46410  001658  6EE6               	movwf	postinc1,c
 46411  00165A  ECA0  F04A         	call	_noteOff	;wreg free
 46412  00165E                     i2l5576:
 46413                           
 46414                           ;arpeggio.c: 430: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           ((which_octave - (OCTAVES - 1)) * 12),velocity);}
 46415  00165E  BC02               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 46416  001660  D017               	goto	i2l5577
 46417  001662  5050               	movf	_velocity,w,c
 46418  001664  6EE6               	movwf	postinc1,c
 46419  001666  5032               	movf	_which_note,w,c
 46420  001668  0D01               	mullw	1
 46421  00166A  50F3               	movf	prodl,w,c
 46422  00166C  242A               	addwf	_arpeggioPtr,w,c
 46423  00166E  6ED9               	movwf	fsr2l,c
 46424  001670  50F4               	movf	prodh,w,c
 46425  001672  202B               	addwfc	_arpeggioPtr+1,w,c
 46426  001674  6EDA               	movwf	fsr2h,c
 46427  001676  50DF               	movf	indf2,w,c
 46428  001678  6E0C               	movwf	??_playArpeggio& (0+255),c
 46429  00167A  044D               	decf	_OCTAVES,w,c
 46430  00167C  0800               	sublw	0
 46431  00167E  2431               	addwf	_which_octave,w,c
 46432  001680  0D0C               	mullw	12
 46433  001682  50F3               	movf	prodl,w,c
 46434  001684  240C               	addwf	??_playArpeggio,w,c
 46435  001686  6EE6               	movwf	postinc1,c
 46436  001688  503D               	movf	_channel,w,c
 46437  00168A  6EE6               	movwf	postinc1,c
 46438  00168C  EC10  F046         	call	_noteOn	;wreg free
 46439  001690                     i2l5577:
 46440                           
 46441                           ;arpeggio.c: 431: }
 46442                           ;arpeggio.c: 432: }
 46443                           ;arpeggio.c: 434: if((ARPEGGIO_TYPE == DOWN) | (ARPEGGIO_TYPE == DOWN_UP)) {
 46444  001690  0434               	decf	_ARPEGGIO_TYPE,w,c
 46445  001692  B4D8               	btfsc	status,2,c
 46446  001694  D004               	goto	i2u6147_40
 46447  001696  0E03               	movlw	3
 46448  001698  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 46449  00169A  A4D8               	btfss	status,2,c
 46450  00169C  D082               	goto	i2l5586
 46451  00169E                     i2u6147_40:
 46452                           
 46453                           ;arpeggio.c: 436: SORT_DIRECTION = 1;
 46454  00169E  8C04               	bsf	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 46455                           
 46456                           ;arpeggio.c: 437: sort_pitches();
 46457  0016A0  EC91  F032         	call	_sort_pitches	;wreg free
 46458                           
 46459                           ;arpeggio.c: 439: suppress_note_on = 0;
 46460  0016A4  9C02               	bcf	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 46461                           
 46462                           ;arpeggio.c: 441: if(startingDirection == UP){
 46463  0016A6  5033               	movf	_startingDirection,w,c
 46464  0016A8  A4D8               	btfss	status,2,c
 46465  0016AA  D03F               	goto	i2l5583
 46466                           
 46467                           ;arpeggio.c: 443: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + ((which_octave + (OCTAVES - 1)) * 12),velocity);}
 46468  0016AC  5032               	movf	_which_note,w,c
 46469  0016AE  A4D8               	btfss	status,2,c
 46470  0016B0  BA02               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 46471  0016B2  D021               	goto	i2l5582
 46472  0016B4  5050               	movf	_velocity,w,c
 46473  0016B6  6EE6               	movwf	postinc1,c
 46474  0016B8  0EFF               	movlw	255
 46475  0016BA  6E0C               	movwf	??_playArpeggio& (0+255),c
 46476  0016BC  0EFF               	movlw	255
 46477  0016BE  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 46478  0016C0  5032               	movf	_which_note,w,c
 46479  0016C2  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 46480  0016C4  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 46481  0016C6  500C               	movf	??_playArpeggio,w,c
 46482  0016C8  260E               	addwf	??_playArpeggio+2,f,c
 46483  0016CA  500D               	movf	??_playArpeggio+1,w,c
 46484  0016CC  220F               	addwfc	??_playArpeggio+3,f,c
 46485  0016CE  500E               	movf	??_playArpeggio+2,w,c
 46486  0016D0  242A               	addwf	_arpeggioPtr,w,c
 46487  0016D2  6ED9               	movwf	fsr2l,c
 46488  0016D4  500F               	movf	??_playArpeggio+3,w,c
 46489  0016D6  202B               	addwfc	_arpeggioPtr+1,w,c
 46490  0016D8  6EDA               	movwf	fsr2h,c
 46491  0016DA  50DF               	movf	indf2,w,c
 46492  0016DC  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 46493  0016DE  504D               	movf	_OCTAVES,w,c
 46494  0016E0  2431               	addwf	_which_octave,w,c
 46495  0016E2  6E11               	movwf	(??_playArpeggio+5)& (0+255),c
 46496  0016E4  0411               	decf	??_playArpeggio+5,w,c
 46497  0016E6  0D0C               	mullw	12
 46498  0016E8  50F3               	movf	prodl,w,c
 46499  0016EA  2410               	addwf	??_playArpeggio+4,w,c
 46500  0016EC  6EE6               	movwf	postinc1,c
 46501  0016EE  503D               	movf	_channel,w,c
 46502  0016F0  6EE6               	movwf	postinc1,c
 46503  0016F2  ECA0  F04A         	call	_noteOff	;wreg free
 46504  0016F6                     i2l5582:
 46505                           
 46506                           ;arpeggio.c: 444: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           ((which_octave + (OCTAVES - 1)) * 12),velocity);}
 46507  0016F6  BC02               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 46508  0016F8  D018               	goto	i2l5583
 46509  0016FA  5050               	movf	_velocity,w,c
 46510  0016FC  6EE6               	movwf	postinc1,c
 46511  0016FE  5032               	movf	_which_note,w,c
 46512  001700  0D01               	mullw	1
 46513  001702  50F3               	movf	prodl,w,c
 46514  001704  242A               	addwf	_arpeggioPtr,w,c
 46515  001706  6ED9               	movwf	fsr2l,c
 46516  001708  50F4               	movf	prodh,w,c
 46517  00170A  202B               	addwfc	_arpeggioPtr+1,w,c
 46518  00170C  6EDA               	movwf	fsr2h,c
 46519  00170E  50DF               	movf	indf2,w,c
 46520  001710  6E0C               	movwf	??_playArpeggio& (0+255),c
 46521  001712  504D               	movf	_OCTAVES,w,c
 46522  001714  2431               	addwf	_which_octave,w,c
 46523  001716  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 46524  001718  040D               	decf	??_playArpeggio+1,w,c
 46525  00171A  0D0C               	mullw	12
 46526  00171C  50F3               	movf	prodl,w,c
 46527  00171E  240C               	addwf	??_playArpeggio,w,c
 46528  001720  6EE6               	movwf	postinc1,c
 46529  001722  503D               	movf	_channel,w,c
 46530  001724  6EE6               	movwf	postinc1,c
 46531  001726  EC10  F046         	call	_noteOn	;wreg free
 46532  00172A                     i2l5583:
 46533                           
 46534                           ;arpeggio.c: 445: }
 46535                           ;arpeggio.c: 447: if(startingDirection == DOWN){
 46536  00172A  0433               	decf	_startingDirection,w,c
 46537  00172C  A4D8               	btfss	status,2,c
 46538  00172E  D039               	goto	i2l5586
 46539                           
 46540                           ;arpeggio.c: 449: if((which_note > 0) && (suppress_note_off == 0)) {noteOff(channel,*(ar
      +                          peggioPtr + (which_note - 1)) + ((which_octave) * 12),velocity);}
 46541  001730  5032               	movf	_which_note,w,c
 46542  001732  A4D8               	btfss	status,2,c
 46543  001734  BA02               	btfsc	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 46544  001736  D01E               	goto	i2l5585
 46545  001738  5050               	movf	_velocity,w,c
 46546  00173A  6EE6               	movwf	postinc1,c
 46547  00173C  0EFF               	movlw	255
 46548  00173E  6E0C               	movwf	??_playArpeggio& (0+255),c
 46549  001740  0EFF               	movlw	255
 46550  001742  6E0D               	movwf	(??_playArpeggio+1)& (0+255),c
 46551  001744  5032               	movf	_which_note,w,c
 46552  001746  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 46553  001748  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 46554  00174A  500C               	movf	??_playArpeggio,w,c
 46555  00174C  260E               	addwf	??_playArpeggio+2,f,c
 46556  00174E  500D               	movf	??_playArpeggio+1,w,c
 46557  001750  220F               	addwfc	??_playArpeggio+3,f,c
 46558  001752  500E               	movf	??_playArpeggio+2,w,c
 46559  001754  242A               	addwf	_arpeggioPtr,w,c
 46560  001756  6ED9               	movwf	fsr2l,c
 46561  001758  500F               	movf	??_playArpeggio+3,w,c
 46562  00175A  202B               	addwfc	_arpeggioPtr+1,w,c
 46563  00175C  6EDA               	movwf	fsr2h,c
 46564  00175E  50DF               	movf	indf2,w,c
 46565  001760  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 46566  001762  5031               	movf	_which_octave,w,c
 46567  001764  0D0C               	mullw	12
 46568  001766  50F3               	movf	prodl,w,c
 46569  001768  2410               	addwf	??_playArpeggio+4,w,c
 46570  00176A  6EE6               	movwf	postinc1,c
 46571  00176C  503D               	movf	_channel,w,c
 46572  00176E  6EE6               	movwf	postinc1,c
 46573  001770  ECA0  F04A         	call	_noteOff	;wreg free
 46574  001774                     i2l5585:
 46575                           
 46576                           ;arpeggio.c: 450: if(suppress_note_on == 0){noteOn(channel,*(arpeggioPtr + which_note) +
      +                           (which_octave * 12),velocity);}
 46577  001774  BC02               	btfsc	_suppress_note_on/(0+8),_suppress_note_on& (0+7),c
 46578  001776  D015               	goto	i2l5586
 46579  001778  5050               	movf	_velocity,w,c
 46580  00177A  6EE6               	movwf	postinc1,c
 46581  00177C  5032               	movf	_which_note,w,c
 46582  00177E  0D01               	mullw	1
 46583  001780  50F3               	movf	prodl,w,c
 46584  001782  242A               	addwf	_arpeggioPtr,w,c
 46585  001784  6ED9               	movwf	fsr2l,c
 46586  001786  50F4               	movf	prodh,w,c
 46587  001788  202B               	addwfc	_arpeggioPtr+1,w,c
 46588  00178A  6EDA               	movwf	fsr2h,c
 46589  00178C  50DF               	movf	indf2,w,c
 46590  00178E  6E0C               	movwf	??_playArpeggio& (0+255),c
 46591  001790  5031               	movf	_which_octave,w,c
 46592  001792  0D0C               	mullw	12
 46593  001794  50F3               	movf	prodl,w,c
 46594  001796  240C               	addwf	??_playArpeggio,w,c
 46595  001798  6EE6               	movwf	postinc1,c
 46596  00179A  503D               	movf	_channel,w,c
 46597  00179C  6EE6               	movwf	postinc1,c
 46598  00179E  EC10  F046         	call	_noteOn	;wreg free
 46599  0017A2                     i2l5586:
 46600                           
 46601                           ;arpeggio.c: 451: }
 46602                           ;arpeggio.c: 452: }
 46603                           ;arpeggio.c: 454: last_note = *(arpeggioPtr + which_note);
 46604  0017A2  5032               	movf	_which_note,w,c
 46605  0017A4  0D01               	mullw	1
 46606  0017A6  50F3               	movf	prodl,w,c
 46607  0017A8  242A               	addwf	_arpeggioPtr,w,c
 46608  0017AA  6ED9               	movwf	fsr2l,c
 46609  0017AC  50F4               	movf	prodh,w,c
 46610  0017AE  202B               	addwfc	_arpeggioPtr+1,w,c
 46611  0017B0  6EDA               	movwf	fsr2h,c
 46612  0017B2  50DF               	movf	indf2,w,c
 46613  0017B4  0100               	movlb	0	; () banked
 46614  0017B6  6FED               	movwf	_last_note& (0+255),b
 46615                           
 46616                           ; BSR set to: 0
 46617                           ;arpeggio.c: 455: which_note++;
 46618  0017B8  2A32               	incf	_which_note,f,c
 46619                           
 46620                           ; BSR set to: 0
 46621                           ;arpeggio.c: 456: suppress_note_off = 0;
 46622  0017BA  9A02               	bcf	_suppress_note_off/(0+8),_suppress_note_off& (0+7),c
 46623                           
 46624                           ; BSR set to: 0
 46625                           ;arpeggio.c: 468: if((ARPEGGIO_TYPE == UP) | (ARPEGGIO_TYPE == UP_DOWN) | (ARPEGGIO_TYPE
      +                           == RANDOM) | (ARPEGGIO_TYPE == RANDOM_NON_REPEATING) | ARPEGGIO_TYPE == AS_PRESSED) {
 46626  0017BC  5034               	movf	_ARPEGGIO_TYPE,w,c
 46627  0017BE  B4D8               	btfsc	status,2,c
 46628  0017C0  D010               	goto	i2u6160_40
 46629                           
 46630                           ; BSR set to: 0
 46631  0017C2  0E02               	movlw	2
 46632  0017C4  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 46633  0017C6  B4D8               	btfsc	status,2,c
 46634  0017C8  D00C               	goto	i2u6160_40
 46635                           
 46636                           ; BSR set to: 0
 46637  0017CA  0E05               	movlw	5
 46638  0017CC  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 46639  0017CE  B4D8               	btfsc	status,2,c
 46640  0017D0  D008               	goto	i2u6160_40
 46641                           
 46642                           ; BSR set to: 0
 46643  0017D2  0E04               	movlw	4
 46644  0017D4  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 46645  0017D6  B4D8               	btfsc	status,2,c
 46646  0017D8  D004               	goto	i2u6160_40
 46647                           
 46648                           ; BSR set to: 0
 46649  0017DA  0E06               	movlw	6
 46650  0017DC  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 46651  0017DE  A4D8               	btfss	status,2,c
 46652  0017E0  D037               	goto	i2l5598
 46653  0017E2                     i2u6160_40:
 46654                           
 46655                           ; BSR set to: 0
 46656                           ;arpeggio.c: 470: if(which_note >= (NUM_NOTES_PRESSED)){
 46657                           
 46658                           ; BSR set to: 0
 46659  0017E2  502E               	movf	_NUM_NOTES_PRESSED,w,c
 46660  0017E4  5C32               	subwf	_which_note,w,c
 46661  0017E6  A0D8               	btfss	status,0,c
 46662  0017E8  D01D               	goto	i2l5597
 46663                           
 46664                           ; BSR set to: 0
 46665                           ;arpeggio.c: 472: which_note = 0;
 46666  0017EA  0E00               	movlw	0
 46667  0017EC  6E32               	movwf	_which_note,c
 46668                           
 46669                           ;arpeggio.c: 475: if((ARPEGGIO_TYPE == UP) | (ARPEGGIO_TYPE == UP_DOWN) | ARPEGGIO_TYPE 
      +                          == AS_PRESSED) {
 46670  0017EE  5034               	movf	_ARPEGGIO_TYPE,w,c
 46671  0017F0  B4D8               	btfsc	status,2,c
 46672  0017F2  D007               	goto	i2u6164_40
 46673                           
 46674                           ; BSR set to: 0
 46675  0017F4  0E02               	movlw	2
 46676  0017F6  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 46677  0017F8  B4D8               	btfsc	status,2,c
 46678  0017FA  D003               	goto	i2u6164_40
 46679                           
 46680                           ; BSR set to: 0
 46681  0017FC  0E06               	movlw	6
 46682  0017FE  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 46683  001800  B4D8               	btfsc	status,2,c
 46684  001802                     i2u6164_40:
 46685                           
 46686                           ; BSR set to: 0
 46687                           ;arpeggio.c: 476: which_octave++;
 46688                           
 46689                           ; BSR set to: 0
 46690  001802  2A31               	incf	_which_octave,f,c
 46691                           
 46692                           ; BSR set to: 0
 46693                           ;arpeggio.c: 477: }
 46694                           ;arpeggio.c: 479: overflow = 1;
 46695                           
 46696                           ; BSR set to: 0
 46697  001804  8802               	bsf	_overflow/(0+8),_overflow& (0+7),c
 46698                           
 46699                           ; BSR set to: 0
 46700                           ;arpeggio.c: 480: flag1 = 0;
 46701  001806  9402               	bcf	_flag1/(0+8),_flag1& (0+7),c
 46702                           
 46703                           ; BSR set to: 0
 46704                           ;arpeggio.c: 483: if(ARPEGGIO_TYPE == RANDOM) {
 46705  001808  0E05               	movlw	5
 46706  00180A  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 46707  00180C  B4D8               	btfsc	status,2,c
 46708                           
 46709                           ; BSR set to: 0
 46710                           ;arpeggio.c: 484: if(AUTO_RANDOMIZE == 0) {random_pitches();}
 46711  00180E  BC03               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 46712  001810  D002               	goto	i2l5595
 46713                           
 46714                           ; BSR set to: 0
 46715  001812  ECD7  F045         	call	_random_pitches	;wreg free
 46716  001816                     i2l5595:
 46717                           
 46718                           ;arpeggio.c: 485: }
 46719                           ;arpeggio.c: 486: if(ARPEGGIO_TYPE == RANDOM_NON_REPEATING) {
 46720  001816  0E04               	movlw	4
 46721  001818  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 46722  00181A  B4D8               	btfsc	status,2,c
 46723                           
 46724                           ;arpeggio.c: 487: if(AUTO_RANDOMIZE == 0) {random_pitches_non_repeating();}
 46725  00181C  BC03               	btfsc	_AUTO_RANDOMIZE/(0+8),_AUTO_RANDOMIZE& (0+7),c
 46726  00181E  D002               	goto	i2l5597
 46727  001820  ECB4  F03C         	call	_random_pitches_non_repeating	;wreg free
 46728  001824                     i2l5597:
 46729                           
 46730                           ;arpeggio.c: 488: }
 46731                           ;arpeggio.c: 489: }
 46732                           ;arpeggio.c: 491: if(which_octave>=OCTAVES) {
 46733  001824  504D               	movf	_OCTAVES,w,c
 46734  001826  6E0C               	movwf	??_playArpeggio& (0+255),c
 46735  001828  6A0D               	clrf	(??_playArpeggio+1)& (0+255),c
 46736  00182A  C031  F00E         	movff	_which_octave,??_playArpeggio+2
 46737  00182E  6A0F               	clrf	(??_playArpeggio+3)& (0+255),c
 46738  001830  BE0E               	btfsc	(??_playArpeggio+2)& (0+255),7,c
 46739  001832  060F               	decf	(??_playArpeggio+3)& (0+255),f,c
 46740  001834  500C               	movf	??_playArpeggio,w,c
 46741  001836  5C0E               	subwf	??_playArpeggio+2,w,c
 46742  001838  500F               	movf	??_playArpeggio+3,w,c
 46743  00183A  0A80               	xorlw	128
 46744  00183C  6E10               	movwf	(??_playArpeggio+4)& (0+255),c
 46745  00183E  500D               	movf	??_playArpeggio+1,w,c
 46746  001840  0A80               	xorlw	128
 46747  001842  5810               	subwfb	(??_playArpeggio+4)& (0+255),w,c
 46748  001844  A0D8               	btfss	status,0,c
 46749  001846  D004               	goto	i2l5598
 46750                           
 46751                           ;arpeggio.c: 492: which_octave = 0;
 46752  001848  0E00               	movlw	0
 46753  00184A  6E31               	movwf	_which_octave,c
 46754                           
 46755                           ;arpeggio.c: 493: octave_overflow = 1;
 46756  00184C  8602               	bsf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 46757                           
 46758                           ;arpeggio.c: 494: flag2 = 0;
 46759  00184E  9202               	bcf	_flag2/(0+8),_flag2& (0+7),c
 46760  001850                     i2l5598:
 46761                           
 46762                           ;arpeggio.c: 495: }
 46763                           ;arpeggio.c: 496: }
 46764                           ;arpeggio.c: 499: if((ARPEGGIO_TYPE == DOWN) | (ARPEGGIO_TYPE == DOWN_UP)) {
 46765  001850  0434               	decf	_ARPEGGIO_TYPE,w,c
 46766  001852  B4D8               	btfsc	status,2,c
 46767  001854  D004               	goto	i2u6171_40
 46768  001856  0E03               	movlw	3
 46769  001858  1834               	xorwf	_ARPEGGIO_TYPE,w,c
 46770  00185A  A4D8               	btfss	status,2,c
 46771  00185C  0012               	return	
 46772  00185E                     i2u6171_40:
 46773                           
 46774                           ;arpeggio.c: 501: if(which_note>=(NUM_NOTES_PRESSED)){
 46775  00185E  502E               	movf	_NUM_NOTES_PRESSED,w,c
 46776  001860  5C32               	subwf	_which_note,w,c
 46777  001862  A0D8               	btfss	status,0,c
 46778  001864  D005               	goto	i2l5602
 46779                           
 46780                           ;arpeggio.c: 502: which_note = 0;
 46781  001866  0E00               	movlw	0
 46782  001868  6E32               	movwf	_which_note,c
 46783                           
 46784                           ;arpeggio.c: 503: which_octave--;
 46785  00186A  0631               	decf	_which_octave,f,c
 46786                           
 46787                           ;arpeggio.c: 504: overflow = 1;
 46788  00186C  8802               	bsf	_overflow/(0+8),_overflow& (0+7),c
 46789                           
 46790                           ;arpeggio.c: 505: flag1 = 0;
 46791  00186E  9402               	bcf	_flag1/(0+8),_flag1& (0+7),c
 46792  001870                     i2l5602:
 46793                           
 46794                           ;arpeggio.c: 506: }
 46795                           ;arpeggio.c: 507: if(which_octave <= (OCTAVES * -1)) {
 46796  001870  C031  F00C         	movff	_which_octave,??_playArpeggio
 46797  001874  6A0D               	clrf	(??_playArpeggio+1)& (0+255),c
 46798  001876  BE0C               	btfsc	??_playArpeggio& (0+255),7,c
 46799  001878  060D               	decf	(??_playArpeggio+1)& (0+255),f,c
 46800  00187A  504D               	movf	_OCTAVES,w,c
 46801  00187C  0D01               	mullw	1
 46802  00187E  1EF3               	comf	prodl,f,c
 46803  001880  1EF4               	comf	prodh,f,c
 46804  001882  4AF3               	infsnz	prodl,f,c
 46805  001884  2AF4               	incf	prodh,f,c
 46806  001886  500C               	movf	??_playArpeggio,w,c
 46807  001888  5CF3               	subwf	prodl,w,c
 46808  00188A  50F4               	movf	prodh,w,c
 46809  00188C  0A80               	xorlw	128
 46810  00188E  6E0E               	movwf	(??_playArpeggio+2)& (0+255),c
 46811  001890  500D               	movf	??_playArpeggio+1,w,c
 46812  001892  0A80               	xorlw	128
 46813  001894  580E               	subwfb	(??_playArpeggio+2)& (0+255),w,c
 46814  001896  A0D8               	btfss	status,0,c
 46815  001898  0012               	return	
 46816                           
 46817                           ;arpeggio.c: 508: which_octave = 0;
 46818  00189A  0E00               	movlw	0
 46819  00189C  6E31               	movwf	_which_octave,c
 46820                           
 46821                           ;arpeggio.c: 509: octave_overflow = 1;
 46822  00189E  8602               	bsf	_octave_overflow/(0+8),_octave_overflow& (0+7),c
 46823                           
 46824                           ;arpeggio.c: 510: flag2 = 0;
 46825  0018A0  9202               	bcf	_flag2/(0+8),_flag2& (0+7),c
 46826  0018A2  0012               	return	
 46827  0018A4                     __end_of_playArpeggio:
 46828                           	opt stack 0
 46829                           tblptru	equ	0xFF8
 46830                           tblptrh	equ	0xFF7
 46831                           tblptrl	equ	0xFF6
 46832                           tablat	equ	0xFF5
 46833                           prodh	equ	0xFF4
 46834                           prodl	equ	0xFF3
 46835                           intcon	equ	0xFF2
 46836                           intcon2	equ	0xFF1
 46837                           indf0	equ	0xFEF
 46838                           postinc0	equ	0xFEE
 46839                           postdec0	equ	0xFED
 46840                           fsr0h	equ	0xFEA
 46841                           fsr0l	equ	0xFE9
 46842                           wreg	equ	0xFE8
 46843                           postinc1	equ	0xFE6
 46844                           postdec1	equ	0xFE5
 46845                           plusw1	equ	0xFE3
 46846                           fsr1h	equ	0xFE2
 46847                           fsr1l	equ	0xFE1
 46848                           indf2	equ	0xFDF
 46849                           postinc2	equ	0xFDE
 46850                           postdec2	equ	0xFDD
 46851                           plusw2	equ	0xFDB
 46852                           fsr2h	equ	0xFDA
 46853                           fsr2l	equ	0xFD9
 46854                           status	equ	0xFD8
 46855                           
 46856 ;; *************** function _sort_pitches *****************
 46857 ;; Defined at:
 46858 ;;		line 222 in file "arpeggio.c"
 46859 ;; Parameters:    Size  Location     Type
 46860 ;;		None
 46861 ;; Auto vars:     Size  Location     Type
 46862 ;;  j               1    3[COMRAM] unsigned char 
 46863 ;;  i               1    4[COMRAM] unsigned char 
 46864 ;;  a               1    2[COMRAM] unsigned char 
 46865 ;; Return value:  Size  Location     Type
 46866 ;;                  1    wreg      void 
 46867 ;; Registers used:
 46868 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 46869 ;; Tracked objects:
 46870 ;;		On entry : 0/0
 46871 ;;		On exit  : 0/0
 46872 ;;		Unchanged: 0/0
 46873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 46874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46875 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46876 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46877 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 46878 ;;Total ram usage:        5 bytes
 46879 ;; Hardware stack levels used:    1
 46880 ;; This function calls:
 46881 ;;		Nothing
 46882 ;; This function is called by:
 46883 ;;		_playArpeggio
 46884 ;; This function uses a non-reentrant model
 46885 ;;
 46886                           
 46887                           	psect	text142
 46888  006522                     __ptext142:
 46889                           	opt stack 0
 46890  006522                     _sort_pitches:
 46891                           	opt stack 13
 46892                           
 46893                           ;arpeggio.c: 224: if(NUM_NOTES_PRESSED == 0){return;}
 46894                           
 46895                           ;incstack = 0
 46896  006522  502E               	movf	_NUM_NOTES_PRESSED,w,c
 46897  006524  B4D8               	btfsc	status,2,c
 46898  006526  0012               	return	
 46899                           
 46900                           ;arpeggio.c: 226: unsigned char a;
 46901                           ;arpeggio.c: 227: for(unsigned char i = 0; i < NUM_NOTES_PRESSED; ++i){
 46902  006528  0E00               	movlw	0
 46903  00652A  6E0B               	movwf	sort_pitches@i,c
 46904  00652C  D081               	goto	i2l5501
 46905  00652E                     
 46906                           ;arpeggio.c: 228: for(unsigned char j = i + 1; j < NUM_NOTES_PRESSED; ++j){
 46907  00652E  280B               	incf	sort_pitches@i,w,c
 46908  006530  6E0A               	movwf	sort_pitches@j,c
 46909  006532  D079               	goto	i2l5503
 46910  006534                     i2l5504:
 46911                           
 46912                           ;arpeggio.c: 234: if(SORT_DIRECTION == 0) {
 46913  006534  BC04               	btfsc	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 46914  006536  D03A               	goto	i2l5506
 46915                           
 46916                           ;arpeggio.c: 235: if(ARPEGGIO_SORTED[i] > ARPEGGIO_SORTED[j]){
 46917  006538  500B               	movf	sort_pitches@i,w,c
 46918  00653A  0D01               	mullw	1
 46919  00653C  0E78               	movlw	low _ARPEGGIO_SORTED
 46920  00653E  24F3               	addwf	prodl,w,c
 46921  006540  6ED9               	movwf	fsr2l,c
 46922  006542  0E02               	movlw	high _ARPEGGIO_SORTED
 46923  006544  20F4               	addwfc	prodh,w,c
 46924  006546  6EDA               	movwf	fsr2h,c
 46925  006548  500A               	movf	sort_pitches@j,w,c
 46926  00654A  0D01               	mullw	1
 46927  00654C  0E78               	movlw	low _ARPEGGIO_SORTED
 46928  00654E  24F3               	addwf	prodl,w,c
 46929  006550  6EE9               	movwf	fsr0l,c
 46930  006552  0E02               	movlw	high _ARPEGGIO_SORTED
 46931  006554  20F4               	addwfc	prodh,w,c
 46932  006556  6EEA               	movwf	fsr0h,c
 46933  006558  50DE               	movf	postinc2,w,c
 46934  00655A  5CEE               	subwf	postinc0,w,c
 46935  00655C  B0D8               	btfsc	status,0,c
 46936  00655E  D026               	goto	i2l5506
 46937                           
 46938                           ;arpeggio.c: 236: a = ARPEGGIO_SORTED[i];
 46939  006560  500B               	movf	sort_pitches@i,w,c
 46940  006562  0D01               	mullw	1
 46941  006564  0E78               	movlw	low _ARPEGGIO_SORTED
 46942  006566  24F3               	addwf	prodl,w,c
 46943  006568  6ED9               	movwf	fsr2l,c
 46944  00656A  0E02               	movlw	high _ARPEGGIO_SORTED
 46945  00656C  20F4               	addwfc	prodh,w,c
 46946  00656E  6EDA               	movwf	fsr2h,c
 46947  006570  50DF               	movf	indf2,w,c
 46948  006572  6E09               	movwf	sort_pitches@a,c
 46949                           
 46950                           ;arpeggio.c: 237: ARPEGGIO_SORTED[i] = ARPEGGIO_SORTED[j];
 46951  006574  500A               	movf	sort_pitches@j,w,c
 46952  006576  0D01               	mullw	1
 46953  006578  0E78               	movlw	low _ARPEGGIO_SORTED
 46954  00657A  24F3               	addwf	prodl,w,c
 46955  00657C  6ED9               	movwf	fsr2l,c
 46956  00657E  0E02               	movlw	high _ARPEGGIO_SORTED
 46957  006580  20F4               	addwfc	prodh,w,c
 46958  006582  6EDA               	movwf	fsr2h,c
 46959  006584  500B               	movf	sort_pitches@i,w,c
 46960  006586  0D01               	mullw	1
 46961  006588  0E78               	movlw	low _ARPEGGIO_SORTED
 46962  00658A  24F3               	addwf	prodl,w,c
 46963  00658C  6EE9               	movwf	fsr0l,c
 46964  00658E  0E02               	movlw	high _ARPEGGIO_SORTED
 46965  006590  20F4               	addwfc	prodh,w,c
 46966  006592  6EEA               	movwf	fsr0h,c
 46967  006594  CFDF FFEF          	movff	indf2,indf0
 46968                           
 46969                           ;arpeggio.c: 238: ARPEGGIO_SORTED[j] = a;
 46970  006598  500A               	movf	sort_pitches@j,w,c
 46971  00659A  0D01               	mullw	1
 46972  00659C  0E78               	movlw	low _ARPEGGIO_SORTED
 46973  00659E  24F3               	addwf	prodl,w,c
 46974  0065A0  6ED9               	movwf	fsr2l,c
 46975  0065A2  0E02               	movlw	high _ARPEGGIO_SORTED
 46976  0065A4  20F4               	addwfc	prodh,w,c
 46977  0065A6  6EDA               	movwf	fsr2h,c
 46978  0065A8  C009  FFDF         	movff	sort_pitches@a,indf2
 46979  0065AC                     i2l5506:
 46980                           
 46981                           ;arpeggio.c: 239: }
 46982                           ;arpeggio.c: 240: }
 46983                           ;arpeggio.c: 242: if(SORT_DIRECTION == 1) {
 46984  0065AC  AC04               	btfss	_SORT_DIRECTION/(0+8),_SORT_DIRECTION& (0+7),c
 46985  0065AE  D03A               	goto	i2l5508
 46986                           
 46987                           ;arpeggio.c: 243: if(ARPEGGIO_SORTED[i] < ARPEGGIO_SORTED[j]){
 46988  0065B0  500A               	movf	sort_pitches@j,w,c
 46989  0065B2  0D01               	mullw	1
 46990  0065B4  0E78               	movlw	low _ARPEGGIO_SORTED
 46991  0065B6  24F3               	addwf	prodl,w,c
 46992  0065B8  6ED9               	movwf	fsr2l,c
 46993  0065BA  0E02               	movlw	high _ARPEGGIO_SORTED
 46994  0065BC  20F4               	addwfc	prodh,w,c
 46995  0065BE  6EDA               	movwf	fsr2h,c
 46996  0065C0  500B               	movf	sort_pitches@i,w,c
 46997  0065C2  0D01               	mullw	1
 46998  0065C4  0E78               	movlw	low _ARPEGGIO_SORTED
 46999  0065C6  24F3               	addwf	prodl,w,c
 47000  0065C8  6EE9               	movwf	fsr0l,c
 47001  0065CA  0E02               	movlw	high _ARPEGGIO_SORTED
 47002  0065CC  20F4               	addwfc	prodh,w,c
 47003  0065CE  6EEA               	movwf	fsr0h,c
 47004  0065D0  50DE               	movf	postinc2,w,c
 47005  0065D2  5CEE               	subwf	postinc0,w,c
 47006  0065D4  B0D8               	btfsc	status,0,c
 47007  0065D6  D026               	goto	i2l5508
 47008                           
 47009                           ;arpeggio.c: 244: a = ARPEGGIO_SORTED[i];
 47010  0065D8  500B               	movf	sort_pitches@i,w,c
 47011  0065DA  0D01               	mullw	1
 47012  0065DC  0E78               	movlw	low _ARPEGGIO_SORTED
 47013  0065DE  24F3               	addwf	prodl,w,c
 47014  0065E0  6ED9               	movwf	fsr2l,c
 47015  0065E2  0E02               	movlw	high _ARPEGGIO_SORTED
 47016  0065E4  20F4               	addwfc	prodh,w,c
 47017  0065E6  6EDA               	movwf	fsr2h,c
 47018  0065E8  50DF               	movf	indf2,w,c
 47019  0065EA  6E09               	movwf	sort_pitches@a,c
 47020                           
 47021                           ;arpeggio.c: 245: ARPEGGIO_SORTED[i] = ARPEGGIO_SORTED[j];
 47022  0065EC  500A               	movf	sort_pitches@j,w,c
 47023  0065EE  0D01               	mullw	1
 47024  0065F0  0E78               	movlw	low _ARPEGGIO_SORTED
 47025  0065F2  24F3               	addwf	prodl,w,c
 47026  0065F4  6ED9               	movwf	fsr2l,c
 47027  0065F6  0E02               	movlw	high _ARPEGGIO_SORTED
 47028  0065F8  20F4               	addwfc	prodh,w,c
 47029  0065FA  6EDA               	movwf	fsr2h,c
 47030  0065FC  500B               	movf	sort_pitches@i,w,c
 47031  0065FE  0D01               	mullw	1
 47032  006600  0E78               	movlw	low _ARPEGGIO_SORTED
 47033  006602  24F3               	addwf	prodl,w,c
 47034  006604  6EE9               	movwf	fsr0l,c
 47035  006606  0E02               	movlw	high _ARPEGGIO_SORTED
 47036  006608  20F4               	addwfc	prodh,w,c
 47037  00660A  6EEA               	movwf	fsr0h,c
 47038  00660C  CFDF FFEF          	movff	indf2,indf0
 47039                           
 47040                           ;arpeggio.c: 246: ARPEGGIO_SORTED[j] = a;
 47041  006610  500A               	movf	sort_pitches@j,w,c
 47042  006612  0D01               	mullw	1
 47043  006614  0E78               	movlw	low _ARPEGGIO_SORTED
 47044  006616  24F3               	addwf	prodl,w,c
 47045  006618  6ED9               	movwf	fsr2l,c
 47046  00661A  0E02               	movlw	high _ARPEGGIO_SORTED
 47047  00661C  20F4               	addwfc	prodh,w,c
 47048  00661E  6EDA               	movwf	fsr2h,c
 47049  006620  C009  FFDF         	movff	sort_pitches@a,indf2
 47050  006624                     i2l5508:
 47051  006624  2A0A               	incf	sort_pitches@j,f,c
 47052  006626                     i2l5503:
 47053  006626  502E               	movf	_NUM_NOTES_PRESSED,w,c
 47054  006628  5C0A               	subwf	sort_pitches@j,w,c
 47055  00662A  A0D8               	btfss	status,0,c
 47056  00662C  D783               	goto	i2l5504
 47057  00662E  2A0B               	incf	sort_pitches@i,f,c
 47058  006630                     i2l5501:
 47059  006630  502E               	movf	_NUM_NOTES_PRESSED,w,c
 47060  006632  5C0B               	subwf	sort_pitches@i,w,c
 47061  006634  B0D8               	btfsc	status,0,c
 47062  006636  0012               	return	
 47063  006638  D77A               	goto	i2l5502
 47064  00663A                     __end_of_sort_pitches:
 47065                           	opt stack 0
 47066                           tblptru	equ	0xFF8
 47067                           tblptrh	equ	0xFF7
 47068                           tblptrl	equ	0xFF6
 47069                           tablat	equ	0xFF5
 47070                           prodh	equ	0xFF4
 47071                           prodl	equ	0xFF3
 47072                           intcon	equ	0xFF2
 47073                           intcon2	equ	0xFF1
 47074                           indf0	equ	0xFEF
 47075                           postinc0	equ	0xFEE
 47076                           postdec0	equ	0xFED
 47077                           fsr0h	equ	0xFEA
 47078                           fsr0l	equ	0xFE9
 47079                           wreg	equ	0xFE8
 47080                           postinc1	equ	0xFE6
 47081                           postdec1	equ	0xFE5
 47082                           plusw1	equ	0xFE3
 47083                           fsr1h	equ	0xFE2
 47084                           fsr1l	equ	0xFE1
 47085                           indf2	equ	0xFDF
 47086                           postinc2	equ	0xFDE
 47087                           postdec2	equ	0xFDD
 47088                           plusw2	equ	0xFDB
 47089                           fsr2h	equ	0xFDA
 47090                           fsr2l	equ	0xFD9
 47091                           status	equ	0xFD8
 47092                           
 47093 ;; *************** function _encoderInputsBuxton *****************
 47094 ;; Defined at:
 47095 ;;		line 27 in file "encoder.c"
 47096 ;; Parameters:    Size  Location     Type
 47097 ;;		None
 47098 ;; Auto vars:     Size  Location     Type
 47099 ;;  pinstate        1    5[COMRAM] unsigned char 
 47100 ;;  tempB           1    4[COMRAM] unsigned char 
 47101 ;;  tempA           1    3[COMRAM] unsigned char 
 47102 ;; Return value:  Size  Location     Type
 47103 ;;                  1    wreg      void 
 47104 ;; Registers used:
 47105 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 47106 ;; Tracked objects:
 47107 ;;		On entry : 0/0
 47108 ;;		On exit  : 0/0
 47109 ;;		Unchanged: 0/0
 47110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 47111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47112 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47113 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47114 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47115 ;;Total ram usage:        6 bytes
 47116 ;; Hardware stack levels used:    1
 47117 ;; This function calls:
 47118 ;;		Nothing
 47119 ;; This function is called by:
 47120 ;;		_ISR
 47121 ;; This function uses a non-reentrant model
 47122 ;;
 47123                           
 47124                           	psect	text143
 47125  0086F8                     __ptext143:
 47126                           	opt stack 0
 47127  0086F8                     _encoderInputsBuxton:
 47128                           	opt stack 14
 47129                           
 47130                           ;encoder.c: 30: if(encoderPolarity == 0){
 47131                           
 47132                           ;incstack = 0
 47133  0086F8  B805               	btfsc	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 47134  0086FA  D006               	goto	i2l858
 47135                           
 47136                           ;encoder.c: 31: encoderA = RB5;
 47137  0086FC  8C05               	bsf	_encoderA/(0+8),_encoderA& (0+7),c
 47138  0086FE  AA81               	btfss	3969,5,c	;volatile
 47139  008700  9C05               	bcf	_encoderA/(0+8),_encoderA& (0+7),c
 47140                           
 47141                           ;encoder.c: 32: encoderB = RB4;
 47142  008702  8A05               	bsf	_encoderB/(0+8),_encoderB& (0+7),c
 47143  008704  A881               	btfss	3969,4,c	;volatile
 47144  008706  9A05               	bcf	_encoderB/(0+8),_encoderB& (0+7),c
 47145  008708                     i2l858:
 47146                           
 47147                           ;encoder.c: 33: }
 47148                           ;encoder.c: 36: if(encoderPolarity == 1){
 47149  008708  A805               	btfss	_encoderPolarity/(0+8),_encoderPolarity& (0+7),c
 47150  00870A  D006               	goto	i2l859
 47151                           
 47152                           ;encoder.c: 37: encoderA = RB4;
 47153  00870C  8C05               	bsf	_encoderA/(0+8),_encoderA& (0+7),c
 47154  00870E  A881               	btfss	3969,4,c	;volatile
 47155  008710  9C05               	bcf	_encoderA/(0+8),_encoderA& (0+7),c
 47156                           
 47157                           ;encoder.c: 38: encoderB = RB5;
 47158  008712  8A05               	bsf	_encoderB/(0+8),_encoderB& (0+7),c
 47159  008714  AA81               	btfss	3969,5,c	;volatile
 47160  008716  9A05               	bcf	_encoderB/(0+8),_encoderB& (0+7),c
 47161  008718                     i2l859:
 47162                           
 47163                           ;encoder.c: 39: }
 47164                           ;encoder.c: 42: unsigned char tempA = encoderA << 1;
 47165  008718  AC05               	btfss	_encoderA/(0+8),_encoderA& (0+7),c
 47166  00871A  D003               	goto	i2u3831_40
 47167  00871C  6A07               	clrf	??_encoderInputsBuxton& (0+255),c
 47168  00871E  2A07               	incf	??_encoderInputsBuxton& (0+255),f,c
 47169  008720  D001               	goto	i2u3832_48
 47170  008722                     i2u3831_40:
 47171  008722  6A07               	clrf	??_encoderInputsBuxton& (0+255),c
 47172  008724                     i2u3832_48:
 47173  008724  90D8               	bcf	status,0,c
 47174  008726  3407               	rlcf	??_encoderInputsBuxton,w,c
 47175  008728  6E0A               	movwf	encoderInputsBuxton@tempA,c
 47176                           
 47177                           ;encoder.c: 43: unsigned char tempB = encoderB;
 47178  00872A  0E00               	movlw	0
 47179  00872C  BA05               	btfsc	_encoderB/(0+8),_encoderB& (0+7),c
 47180  00872E  0E01               	movlw	1
 47181  008730  6E0B               	movwf	encoderInputsBuxton@tempB,c
 47182                           
 47183                           ;encoder.c: 44: unsigned char pinstate = tempA | tempB;
 47184  008732  500A               	movf	encoderInputsBuxton@tempA,w,c
 47185  008734  100B               	iorwf	encoderInputsBuxton@tempB,w,c
 47186  008736  6E0C               	movwf	encoderInputsBuxton@pinstate,c
 47187                           
 47188                           ;encoder.c: 46: state = ttable[state & 0xf][pinstate];
 47189  008738  C0EE  F007         	movff	_state,??_encoderInputsBuxton
 47190  00873C  0E0F               	movlw	15
 47191  00873E  1607               	andwf	??_encoderInputsBuxton,f,c
 47192  008740  5007               	movf	??_encoderInputsBuxton,w,c
 47193  008742  0D04               	mullw	4
 47194  008744  0E3D               	movlw	low _ttable
 47195  008746  6E08               	movwf	(??_encoderInputsBuxton+1)& (0+255),c
 47196  008748  0EF3               	movlw	high _ttable
 47197  00874A  6E09               	movwf	(??_encoderInputsBuxton+2)& (0+255),c
 47198  00874C  50F3               	movf	prodl,w,c
 47199  00874E  2608               	addwf	??_encoderInputsBuxton+1,f,c
 47200  008750  50F4               	movf	prodh,w,c
 47201  008752  2209               	addwfc	??_encoderInputsBuxton+2,f,c
 47202  008754  500C               	movf	encoderInputsBuxton@pinstate,w,c
 47203  008756  0D01               	mullw	1
 47204  008758  50F3               	movf	prodl,w,c
 47205  00875A  2608               	addwf	??_encoderInputsBuxton+1,f,c
 47206  00875C  50F4               	movf	prodh,w,c
 47207  00875E  2209               	addwfc	??_encoderInputsBuxton+2,f,c
 47208  008760  C008  FFF6         	movff	??_encoderInputsBuxton+1,tblptrl
 47209  008764  C009  FFF7         	movff	??_encoderInputsBuxton+2,tblptrh
 47210  008768                     	if	0	;tblptru may be non-zero
 47211  008768                     	endif
 47212  008768                     	if	0	;tblptru may be non-zero
 47213  008768                     	endif
 47214  008768  0008               	tblrd		*
 47215  00876A  CFF5 F0EE          	movff	tablat,_state
 47216                           
 47217                           ;encoder.c: 47: encoder_direction = state & 0x30;
 47218  00876E  0100               	movlb	0	; () banked
 47219  008770  51EE               	movf	_state& (0+255),w,b
 47220  008772  0B30               	andlw	48
 47221  008774  6E35               	movwf	_encoder_direction,c
 47222                           
 47223                           ; BSR set to: 0
 47224  008776  0012               	return		;funcret
 47225  008778                     __end_of_encoderInputsBuxton:
 47226                           	opt stack 0
 47227                           tblptru	equ	0xFF8
 47228                           tblptrh	equ	0xFF7
 47229                           tblptrl	equ	0xFF6
 47230                           tablat	equ	0xFF5
 47231                           prodh	equ	0xFF4
 47232                           prodl	equ	0xFF3
 47233                           intcon	equ	0xFF2
 47234                           intcon2	equ	0xFF1
 47235                           indf0	equ	0xFEF
 47236                           postinc0	equ	0xFEE
 47237                           postdec0	equ	0xFED
 47238                           fsr0h	equ	0xFEA
 47239                           fsr0l	equ	0xFE9
 47240                           wreg	equ	0xFE8
 47241                           postinc1	equ	0xFE6
 47242                           postdec1	equ	0xFE5
 47243                           plusw1	equ	0xFE3
 47244                           fsr1h	equ	0xFE2
 47245                           fsr1l	equ	0xFE1
 47246                           indf2	equ	0xFDF
 47247                           postinc2	equ	0xFDE
 47248                           postdec2	equ	0xFDD
 47249                           plusw2	equ	0xFDB
 47250                           fsr2h	equ	0xFDA
 47251                           fsr2l	equ	0xFD9
 47252                           status	equ	0xFD8
 47253                           
 47254 ;; *************** function _display *****************
 47255 ;; Defined at:
 47256 ;;		line 22 in file "segment.c"
 47257 ;; Parameters:    Size  Location     Type
 47258 ;;		None
 47259 ;; Auto vars:     Size  Location     Type
 47260 ;;		None
 47261 ;; Return value:  Size  Location     Type
 47262 ;;                  1    wreg      void 
 47263 ;; Registers used:
 47264 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, tbl
      +ptrl, tblptrh, tblptru, prodl, prodh, cstack
 47265 ;; Tracked objects:
 47266 ;;		On entry : 0/0
 47267 ;;		On exit  : 0/0
 47268 ;;		Unchanged: 0/0
 47269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 47270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47274 ;;Total ram usage:        0 bytes
 47275 ;; Hardware stack levels used:    1
 47276 ;; Hardware stack levels required when called:    2
 47277 ;; This function calls:
 47278 ;;		_displayDigits
 47279 ;;		_displayString
 47280 ;; This function is called by:
 47281 ;;		_ISR
 47282 ;; This function uses a non-reentrant model
 47283 ;;
 47284                           
 47285                           	psect	text144
 47286  009A00                     __ptext144:
 47287                           	opt stack 0
 47288  009A00                     _display:
 47289                           	opt stack 12
 47290                           
 47291                           ;segment.c: 23: if (DISPLAY_MODE == 0) {displayDigits();}
 47292                           
 47293                           ; BSR set to: 0
 47294                           ;incstack = 0
 47295  009A00  0100               	movlb	0	; () banked
 47296  009A02  51EF               	movf	_DISPLAY_MODE& (0+255),w,b
 47297  009A04  B4D8               	btfsc	status,2,c
 47298                           
 47299                           ; BSR set to: 0
 47300  009A06  ECDB  F01C         	call	_displayDigits	;wreg free
 47301                           
 47302                           ;segment.c: 24: if (DISPLAY_MODE == 1) {displayString();}
 47303  009A0A  0100               	movlb	0	; () banked
 47304  009A0C  05EF               	decf	_DISPLAY_MODE& (0+255),w,b
 47305  009A0E  A4D8               	btfss	status,2,c
 47306  009A10  0012               	return	
 47307                           
 47308                           ; BSR set to: 0
 47309  009A12  EC1D  F033         	call	_displayString	;wreg free
 47310  009A16  0012               	return	
 47311  009A18                     __end_of_display:
 47312                           	opt stack 0
 47313                           tblptru	equ	0xFF8
 47314                           tblptrh	equ	0xFF7
 47315                           tblptrl	equ	0xFF6
 47316                           tablat	equ	0xFF5
 47317                           prodh	equ	0xFF4
 47318                           prodl	equ	0xFF3
 47319                           intcon	equ	0xFF2
 47320                           intcon2	equ	0xFF1
 47321                           indf0	equ	0xFEF
 47322                           postinc0	equ	0xFEE
 47323                           postdec0	equ	0xFED
 47324                           fsr0h	equ	0xFEA
 47325                           fsr0l	equ	0xFE9
 47326                           wreg	equ	0xFE8
 47327                           postinc1	equ	0xFE6
 47328                           postdec1	equ	0xFE5
 47329                           plusw1	equ	0xFE3
 47330                           fsr1h	equ	0xFE2
 47331                           fsr1l	equ	0xFE1
 47332                           indf2	equ	0xFDF
 47333                           postinc2	equ	0xFDE
 47334                           postdec2	equ	0xFDD
 47335                           plusw2	equ	0xFDB
 47336                           fsr2h	equ	0xFDA
 47337                           fsr2l	equ	0xFD9
 47338                           status	equ	0xFD8
 47339                           
 47340 ;; *************** function _displayString *****************
 47341 ;; Defined at:
 47342 ;;		line 174 in file "segment.c"
 47343 ;; Parameters:    Size  Location     Type
 47344 ;;		None
 47345 ;; Auto vars:     Size  Location     Type
 47346 ;;  i               1    1[COMRAM] unsigned char 
 47347 ;; Return value:  Size  Location     Type
 47348 ;;                  1    wreg      void 
 47349 ;; Registers used:
 47350 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 47351 ;; Tracked objects:
 47352 ;;		On entry : 0/0
 47353 ;;		On exit  : 0/0
 47354 ;;		Unchanged: 0/0
 47355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 47356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47357 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47358 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47359 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47360 ;;Total ram usage:        2 bytes
 47361 ;; Hardware stack levels used:    1
 47362 ;; This function calls:
 47363 ;;		Nothing
 47364 ;; This function is called by:
 47365 ;;		_display
 47366 ;; This function uses a non-reentrant model
 47367 ;;
 47368                           
 47369                           	psect	text145
 47370  00663A                     __ptext145:
 47371                           	opt stack 0
 47372  00663A                     _displayString:
 47373                           	opt stack 13
 47374                           
 47375                           ;segment.c: 176: static unsigned char letter[4];
 47376                           ;segment.c: 177: static unsigned char letter_counter;
 47377                           ;segment.c: 180: for(unsigned char i=0;i<4;i++) {
 47378                           
 47379                           ;incstack = 0
 47380  00663A  0E00               	movlw	0
 47381  00663C  6E08               	movwf	displayString@i,c
 47382  00663E                     i2l23150:
 47383  00663E  0E03               	movlw	3
 47384  006640  6408               	cpfsgt	displayString@i,c
 47385  006642  D001               	goto	i2l3009
 47386  006644  D02A               	goto	i2u3764_40
 47387  006646                     i2l3009:
 47388                           
 47389                           ;segment.c: 181: if(string_to_display[i] > (unsigned char) 'z') {letter[i] = 'z';}
 47390  006646  5008               	movf	displayString@i,w,c
 47391  006648  0D01               	mullw	1
 47392  00664A  0EFB               	movlw	low _string_to_display
 47393  00664C  24F3               	addwf	prodl,w,c
 47394  00664E  6ED9               	movwf	fsr2l,c
 47395  006650  0E01               	movlw	high _string_to_display
 47396  006652  20F4               	addwfc	prodh,w,c
 47397  006654  6EDA               	movwf	fsr2h,c
 47398  006656  0E7A               	movlw	122
 47399  006658  64DF               	cpfsgt	indf2,c
 47400  00665A  D00A               	goto	i2l3011
 47401  00665C  5008               	movf	displayString@i,w,c
 47402  00665E  0D01               	mullw	1
 47403  006660  0E00               	movlw	low displayString@letter
 47404  006662  24F3               	addwf	prodl,w,c
 47405  006664  6ED9               	movwf	fsr2l,c
 47406  006666  0E01               	movlw	high displayString@letter
 47407  006668  20F4               	addwfc	prodh,w,c
 47408  00666A  6EDA               	movwf	fsr2h,c
 47409  00666C  0E7A               	movlw	122
 47410  00666E  D012               	goto	L28
 47411  006670                     i2l3011:
 47412                           
 47413                           ;segment.c: 182: else letter[i] = string_to_display[i] - '0';
 47414  006670  5008               	movf	displayString@i,w,c
 47415  006672  0D01               	mullw	1
 47416  006674  0E00               	movlw	low displayString@letter
 47417  006676  24F3               	addwf	prodl,w,c
 47418  006678  6ED9               	movwf	fsr2l,c
 47419  00667A  0E01               	movlw	high displayString@letter
 47420  00667C  20F4               	addwfc	prodh,w,c
 47421  00667E  6EDA               	movwf	fsr2h,c
 47422  006680  5008               	movf	displayString@i,w,c
 47423  006682  0D01               	mullw	1
 47424  006684  0EFB               	movlw	low _string_to_display
 47425  006686  24F3               	addwf	prodl,w,c
 47426  006688  6EE9               	movwf	fsr0l,c
 47427  00668A  0E01               	movlw	high _string_to_display
 47428  00668C  20F4               	addwfc	prodh,w,c
 47429  00668E  6EEA               	movwf	fsr0h,c
 47430  006690  50EF               	movf	indf0,w,c
 47431  006692  0FD0               	addlw	208
 47432  006694                     L28:
 47433  006694  6EDF               	movwf	indf2,c
 47434  006696  2A08               	incf	displayString@i,f,c
 47435  006698  D7D2               	goto	i2l23150
 47436  00669A                     i2u3764_40:
 47437                           
 47438                           ;segment.c: 183: }
 47439                           ;segment.c: 185: if(letter_counter == 0){
 47440  00669A  0100               	movlb	0	; () banked
 47441  00669C  51E9               	movf	displayString@letter_counter& (0+255),w,b
 47442  00669E  A4D8               	btfss	status,2,c
 47443  0066A0  D00F               	goto	i2l3013
 47444                           
 47445                           ; BSR set to: 0
 47446                           ;segment.c: 187: PORTC &= 0xF0;
 47447  0066A2  0EF0               	movlw	240
 47448  0066A4  1682               	andwf	3970,f,c	;volatile
 47449                           
 47450                           ; BSR set to: 0
 47451                           ;segment.c: 190: PORTD = seg_ascii[letter[0]];
 47452  0066A6  0101               	movlb	1	; () banked
 47453  0066A8  5100               	movf	displayString@letter& (0+255),w,b
 47454  0066AA  0D01               	mullw	1
 47455  0066AC  0E20               	movlw	low _seg_ascii
 47456  0066AE  24F3               	addwf	prodl,w,c
 47457  0066B0  6EF6               	movwf	tblptrl,c
 47458  0066B2  0EF2               	movlw	high _seg_ascii
 47459  0066B4  20F4               	addwfc	prodh,w,c
 47460  0066B6  6EF7               	movwf	tblptrh,c
 47461  0066B8                     	if	0	;There are less than 3 active tblptr bytes
 47462  0066B8                     	endif
 47463  0066B8  0008               	tblrd		*
 47464  0066BA  CFF5 FF83          	movff	tablat,3971	;volatile
 47465                           
 47466                           ; BSR set to: 1
 47467                           ;segment.c: 192: PORTC |= 0x1;
 47468  0066BE  8082               	bsf	3970,0,c	;volatile
 47469  0066C0                     i2l3013:
 47470                           
 47471                           ;segment.c: 193: }
 47472                           ;segment.c: 194: if(letter_counter == 1){
 47473                           
 47474                           ; BSR set to: 1
 47475  0066C0  0100               	movlb	0	; () banked
 47476  0066C2  05E9               	decf	displayString@letter_counter& (0+255),w,b
 47477  0066C4  A4D8               	btfss	status,2,c
 47478  0066C6  D00F               	goto	i2l3014
 47479                           
 47480                           ; BSR set to: 0
 47481                           ;segment.c: 196: PORTC &= 0xF0;
 47482  0066C8  0EF0               	movlw	240
 47483  0066CA  1682               	andwf	3970,f,c	;volatile
 47484                           
 47485                           ; BSR set to: 0
 47486                           ;segment.c: 198: PORTD = seg_ascii[letter[1]];
 47487  0066CC  0101               	movlb	1	; () banked
 47488  0066CE  5101               	movf	(displayString@letter+1)& (0+255),w,b
 47489  0066D0  0D01               	mullw	1
 47490  0066D2  0E20               	movlw	low _seg_ascii
 47491  0066D4  24F3               	addwf	prodl,w,c
 47492  0066D6  6EF6               	movwf	tblptrl,c
 47493  0066D8  0EF2               	movlw	high _seg_ascii
 47494  0066DA  20F4               	addwfc	prodh,w,c
 47495  0066DC  6EF7               	movwf	tblptrh,c
 47496  0066DE                     	if	0	;There are less than 3 active tblptr bytes
 47497  0066DE                     	endif
 47498  0066DE  0008               	tblrd		*
 47499  0066E0  CFF5 FF83          	movff	tablat,3971	;volatile
 47500                           
 47501                           ; BSR set to: 1
 47502                           ;segment.c: 200: PORTC |= 0x2;
 47503  0066E4  8282               	bsf	3970,1,c	;volatile
 47504  0066E6                     i2l3014:
 47505                           
 47506                           ;segment.c: 201: }
 47507                           ;segment.c: 202: if(letter_counter == 2){
 47508                           
 47509                           ; BSR set to: 1
 47510  0066E6  0E02               	movlw	2
 47511  0066E8  0100               	movlb	0	; () banked
 47512  0066EA  19E9               	xorwf	displayString@letter_counter& (0+255),w,b
 47513  0066EC  A4D8               	btfss	status,2,c
 47514  0066EE  D00F               	goto	i2l3015
 47515                           
 47516                           ; BSR set to: 0
 47517                           ;segment.c: 204: PORTC &= 0xF0;
 47518  0066F0  0EF0               	movlw	240
 47519  0066F2  1682               	andwf	3970,f,c	;volatile
 47520                           
 47521                           ; BSR set to: 0
 47522                           ;segment.c: 206: PORTD = seg_ascii[letter[2]];
 47523  0066F4  0101               	movlb	1	; () banked
 47524  0066F6  5102               	movf	(displayString@letter+2)& (0+255),w,b
 47525  0066F8  0D01               	mullw	1
 47526  0066FA  0E20               	movlw	low _seg_ascii
 47527  0066FC  24F3               	addwf	prodl,w,c
 47528  0066FE  6EF6               	movwf	tblptrl,c
 47529  006700  0EF2               	movlw	high _seg_ascii
 47530  006702  20F4               	addwfc	prodh,w,c
 47531  006704  6EF7               	movwf	tblptrh,c
 47532  006706                     	if	0	;There are less than 3 active tblptr bytes
 47533  006706                     	endif
 47534  006706  0008               	tblrd		*
 47535  006708  CFF5 FF83          	movff	tablat,3971	;volatile
 47536                           
 47537                           ; BSR set to: 1
 47538                           ;segment.c: 208: PORTC |= 0x4;
 47539  00670C  8482               	bsf	3970,2,c	;volatile
 47540  00670E                     i2l3015:
 47541                           
 47542                           ;segment.c: 209: }
 47543                           ;segment.c: 210: if(letter_counter == 3){
 47544                           
 47545                           ; BSR set to: 1
 47546  00670E  0E03               	movlw	3
 47547  006710  0100               	movlb	0	; () banked
 47548  006712  19E9               	xorwf	displayString@letter_counter& (0+255),w,b
 47549  006714  A4D8               	btfss	status,2,c
 47550  006716  D00F               	goto	i2l3016
 47551                           
 47552                           ; BSR set to: 0
 47553                           ;segment.c: 212: PORTC &= 0xF0;
 47554  006718  0EF0               	movlw	240
 47555  00671A  1682               	andwf	3970,f,c	;volatile
 47556                           
 47557                           ; BSR set to: 0
 47558                           ;segment.c: 214: PORTD = seg_ascii[letter[3]];
 47559  00671C  0101               	movlb	1	; () banked
 47560  00671E  5103               	movf	(displayString@letter+3)& (0+255),w,b
 47561  006720  0D01               	mullw	1
 47562  006722  0E20               	movlw	low _seg_ascii
 47563  006724  24F3               	addwf	prodl,w,c
 47564  006726  6EF6               	movwf	tblptrl,c
 47565  006728  0EF2               	movlw	high _seg_ascii
 47566  00672A  20F4               	addwfc	prodh,w,c
 47567  00672C  6EF7               	movwf	tblptrh,c
 47568  00672E                     	if	0	;There are less than 3 active tblptr bytes
 47569  00672E                     	endif
 47570  00672E  0008               	tblrd		*
 47571  006730  CFF5 FF83          	movff	tablat,3971	;volatile
 47572                           
 47573                           ; BSR set to: 1
 47574                           ;segment.c: 216: PORTC |= 0x8;
 47575  006734  8682               	bsf	3970,3,c	;volatile
 47576  006736                     i2l3016:
 47577                           
 47578                           ;segment.c: 217: }
 47579                           ;segment.c: 220: letter_counter++;
 47580                           
 47581                           ; BSR set to: 1
 47582  006736  0100               	movlb	0	; () banked
 47583  006738  2BE9               	incf	displayString@letter_counter& (0+255),f,b
 47584                           
 47585                           ; BSR set to: 0
 47586                           ;segment.c: 222: if(letter_counter > 3){letter_counter = 0;}
 47587  00673A  0E03               	movlw	3
 47588  00673C  65E9               	cpfsgt	displayString@letter_counter& (0+255),b
 47589  00673E  0012               	return	
 47590                           
 47591                           ; BSR set to: 0
 47592  006740  0E00               	movlw	0
 47593  006742  6FE9               	movwf	displayString@letter_counter& (0+255),b
 47594  006744  0012               	return	
 47595  006746                     __end_of_displayString:
 47596                           	opt stack 0
 47597                           tblptru	equ	0xFF8
 47598                           tblptrh	equ	0xFF7
 47599                           tblptrl	equ	0xFF6
 47600                           tablat	equ	0xFF5
 47601                           prodh	equ	0xFF4
 47602                           prodl	equ	0xFF3
 47603                           intcon	equ	0xFF2
 47604                           intcon2	equ	0xFF1
 47605                           indf0	equ	0xFEF
 47606                           postinc0	equ	0xFEE
 47607                           postdec0	equ	0xFED
 47608                           fsr0h	equ	0xFEA
 47609                           fsr0l	equ	0xFE9
 47610                           wreg	equ	0xFE8
 47611                           postinc1	equ	0xFE6
 47612                           postdec1	equ	0xFE5
 47613                           plusw1	equ	0xFE3
 47614                           fsr1h	equ	0xFE2
 47615                           fsr1l	equ	0xFE1
 47616                           indf2	equ	0xFDF
 47617                           postinc2	equ	0xFDE
 47618                           postdec2	equ	0xFDD
 47619                           plusw2	equ	0xFDB
 47620                           fsr2h	equ	0xFDA
 47621                           fsr2l	equ	0xFD9
 47622                           status	equ	0xFD8
 47623                           
 47624 ;; *************** function _displayDigits *****************
 47625 ;; Defined at:
 47626 ;;		line 55 in file "segment.c"
 47627 ;; Parameters:    Size  Location     Type
 47628 ;;		None
 47629 ;; Auto vars:     Size  Location     Type
 47630 ;;  highByte        1    4[COMRAM] unsigned char 
 47631 ;;  lowByte         1    3[COMRAM] unsigned char 
 47632 ;; Return value:  Size  Location     Type
 47633 ;;                  1    wreg      void 
 47634 ;; Registers used:
 47635 ;;		wreg, fsr1l, fsr1h, status,2, status,0, btemp, btemp+1, btemp+2, btemp+10, btemp+11, tblptrl, tblptrh, tblptru, prod
      +l, prodh
 47636 ;; Tracked objects:
 47637 ;;		On entry : 0/0
 47638 ;;		On exit  : 0/0
 47639 ;;		Unchanged: 0/0
 47640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 47641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47642 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47643 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47644 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 47645 ;;Total ram usage:        5 bytes
 47646 ;; Hardware stack levels used:    1
 47647 ;; Hardware stack levels required when called:    1
 47648 ;; This function calls:
 47649 ;;		___awdiv
 47650 ;;		___awmod
 47651 ;; This function is called by:
 47652 ;;		_display
 47653 ;; This function uses a non-reentrant model
 47654 ;;
 47655                           
 47656                           	psect	text146
 47657  0039B6                     __ptext146:
 47658                           	opt stack 0
 47659  0039B6                     _displayDigits:
 47660                           	opt stack 12
 47661                           
 47662                           ;segment.c: 61: static unsigned char digit[4];
 47663                           ;segment.c: 62: static unsigned char digit_counter;
 47664                           ;segment.c: 63: static signed int number_to_display_last;
 47665                           ;segment.c: 64: static signed int number_to_display_temp;
 47666                           ;segment.c: 67: if(number_to_display != number_to_display_last){
 47667                           
 47668                           ; BSR set to: 0
 47669                           ;incstack = 0
 47670  0039B6  0101               	movlb	1	; () banked
 47671  0039B8  517A               	movf	displayDigits@number_to_display_last& (0+255),w,b
 47672  0039BA  184A               	xorwf	_number_to_display,w,c
 47673  0039BC  E104               	bnz	i2u5984_40
 47674  0039BE  517B               	movf	(displayDigits@number_to_display_last+1)& (0+255),w,b
 47675  0039C0  184B               	xorwf	_number_to_display+1,w,c
 47676  0039C2  B4D8               	btfsc	status,2,c
 47677  0039C4  D0B7               	goto	i2l2970
 47678  0039C6                     i2u5984_40:
 47679                           
 47680                           ; BSR set to: 1
 47681                           ;segment.c: 69: if(DIGIT_MODE == 0) {
 47682  0039C6  5039               	movf	_DIGIT_MODE,w,c
 47683  0039C8  A4D8               	btfss	status,2,c
 47684  0039CA  D066               	goto	i2l2971
 47685                           
 47686                           ; BSR set to: 1
 47687                           ;segment.c: 71: if(number_to_display >= 0){number_to_display_temp = number_to_display;}
 47688  0039CC  BE4B               	btfsc	_number_to_display+1,7,c
 47689  0039CE  D004               	goto	i2l2972
 47690                           
 47691                           ; BSR set to: 1
 47692  0039D0  C04A  F0E6         	movff	_number_to_display,displayDigits@number_to_display_temp
 47693  0039D4  C04B  F0E7         	movff	_number_to_display+1,displayDigits@number_to_display_temp+1
 47694  0039D8                     i2l2972:
 47695                           
 47696                           ; BSR set to: 1
 47697                           ;segment.c: 72: if(number_to_display < 0){number_to_display_temp = 0 - number_to_display
      +                          ;}
 47698                           
 47699                           ; BSR set to: 1
 47700  0039D8  AE4B               	btfss	_number_to_display+1,7,c
 47701  0039DA  D00C               	goto	i2l2973
 47702                           
 47703                           ; BSR set to: 1
 47704  0039DC  C04A  F007         	movff	_number_to_display,??_displayDigits
 47705  0039E0  C04B  F008         	movff	_number_to_display+1,??_displayDigits+1
 47706  0039E4  1E07               	comf	??_displayDigits,f,c
 47707  0039E6  1E08               	comf	??_displayDigits+1,f,c
 47708  0039E8  4A07               	infsnz	??_displayDigits,f,c
 47709  0039EA  2A08               	incf	??_displayDigits+1,f,c
 47710  0039EC  C007  F0E6         	movff	??_displayDigits,displayDigits@number_to_display_temp
 47711  0039F0  C008  F0E7         	movff	??_displayDigits+1,displayDigits@number_to_display_temp+1
 47712  0039F4                     i2l2973:
 47713                           
 47714                           ; BSR set to: 1
 47715                           ;segment.c: 74: digit[0] = (number_to_display_temp / 1000) % 10;
 47716                           
 47717                           ; BSR set to: 1
 47718  0039F4  0E0A               	movlw	10
 47719  0039F6  6EE6               	movwf	postinc1,c
 47720  0039F8  0E00               	movlw	0
 47721  0039FA  6EE6               	movwf	postinc1,c
 47722  0039FC  0EE8               	movlw	232
 47723  0039FE  6EE6               	movwf	postinc1,c
 47724  003A00  0E03               	movlw	3
 47725  003A02  6EE6               	movwf	postinc1,c
 47726  003A04  C0E6  FFE6         	movff	displayDigits@number_to_display_temp,postinc1
 47727  003A08  C0E7  FFE6         	movff	displayDigits@number_to_display_temp+1,postinc1
 47728  003A0C  ECF8  F031         	call	___awdiv	;wreg free
 47729  003A10  C03E  FFE6         	movff	btemp,postinc1
 47730  003A14  C03F  FFE6         	movff	btemp+1,postinc1
 47731  003A18  ECA8  F034         	call	___awmod	;wreg free
 47732  003A1C  503E               	movf	btemp,w,c
 47733  003A1E  0100               	movlb	0	; () banked
 47734  003A20  6FCD               	movwf	displayDigits@digit& (0+255),b
 47735                           
 47736                           ;segment.c: 75: digit[1] = (number_to_display_temp / 100) % 10;
 47737  003A22  0E0A               	movlw	10
 47738  003A24  6EE6               	movwf	postinc1,c
 47739  003A26  0E00               	movlw	0
 47740  003A28  6EE6               	movwf	postinc1,c
 47741  003A2A  0E64               	movlw	100
 47742  003A2C  6EE6               	movwf	postinc1,c
 47743  003A2E  0E00               	movlw	0
 47744  003A30  6EE6               	movwf	postinc1,c
 47745  003A32  C0E6  FFE6         	movff	displayDigits@number_to_display_temp,postinc1
 47746  003A36  C0E7  FFE6         	movff	displayDigits@number_to_display_temp+1,postinc1
 47747  003A3A  ECF8  F031         	call	___awdiv	;wreg free
 47748  003A3E  C03E  FFE6         	movff	btemp,postinc1
 47749  003A42  C03F  FFE6         	movff	btemp+1,postinc1
 47750  003A46  ECA8  F034         	call	___awmod	;wreg free
 47751  003A4A  503E               	movf	btemp,w,c
 47752  003A4C  0100               	movlb	0	; () banked
 47753  003A4E  6FCE               	movwf	(displayDigits@digit+1)& (0+255),b
 47754                           
 47755                           ;segment.c: 76: digit[2] = (number_to_display_temp / 10) % 10;
 47756  003A50  0E0A               	movlw	10
 47757  003A52  6EE6               	movwf	postinc1,c
 47758  003A54  0E00               	movlw	0
 47759  003A56  6EE6               	movwf	postinc1,c
 47760  003A58  0E0A               	movlw	10
 47761  003A5A  6EE6               	movwf	postinc1,c
 47762  003A5C  0E00               	movlw	0
 47763  003A5E  6EE6               	movwf	postinc1,c
 47764  003A60  C0E6  FFE6         	movff	displayDigits@number_to_display_temp,postinc1
 47765  003A64  C0E7  FFE6         	movff	displayDigits@number_to_display_temp+1,postinc1
 47766  003A68  ECF8  F031         	call	___awdiv	;wreg free
 47767  003A6C  C03E  FFE6         	movff	btemp,postinc1
 47768  003A70  C03F  FFE6         	movff	btemp+1,postinc1
 47769  003A74  ECA8  F034         	call	___awmod	;wreg free
 47770  003A78  503E               	movf	btemp,w,c
 47771  003A7A  0100               	movlb	0	; () banked
 47772  003A7C  6FCF               	movwf	(displayDigits@digit+2)& (0+255),b
 47773                           
 47774                           ;segment.c: 77: digit[3] = number_to_display_temp % 10;
 47775  003A7E  0E0A               	movlw	10
 47776  003A80  6EE6               	movwf	postinc1,c
 47777  003A82  0E00               	movlw	0
 47778  003A84  6EE6               	movwf	postinc1,c
 47779  003A86  C0E6  FFE6         	movff	displayDigits@number_to_display_temp,postinc1
 47780  003A8A  C0E7  FFE6         	movff	displayDigits@number_to_display_temp+1,postinc1
 47781  003A8E  ECA8  F034         	call	___awmod	;wreg free
 47782  003A92  503E               	movf	btemp,w,c
 47783  003A94  0100               	movlb	0	; () banked
 47784  003A96  6FD0               	movwf	(displayDigits@digit+3)& (0+255),b
 47785  003A98                     i2l2971:
 47786                           
 47787                           ;segment.c: 78: }
 47788                           ;segment.c: 80: if(DIGIT_MODE == 1) {
 47789                           
 47790                           ; BSR set to: 0
 47791  003A98  0439               	decf	_DIGIT_MODE,w,c
 47792  003A9A  A4D8               	btfss	status,2,c
 47793  003A9C  D023               	goto	i2l2974
 47794                           
 47795                           ;segment.c: 81: digit[0] = (number_to_display >> 12) % 16;
 47796  003A9E  C04A  F007         	movff	_number_to_display,??_displayDigits
 47797  003AA2  C04B  F008         	movff	_number_to_display+1,??_displayDigits+1
 47798  003AA6  0E0C               	movlw	12
 47799  003AA8  6E09               	movwf	(??_displayDigits+2)& (0+255),c
 47800  003AAA                     i2u5989_45:
 47801  003AAA  3408               	rlcf	??_displayDigits+1,w,c
 47802  003AAC  3208               	rrcf	??_displayDigits+1,f,c
 47803  003AAE  3207               	rrcf	??_displayDigits,f,c
 47804  003AB0  2E09               	decfsz	(??_displayDigits+2)& (0+255),f,c
 47805  003AB2  D7FB               	goto	i2u5989_45
 47806  003AB4  5007               	movf	??_displayDigits,w,c
 47807  003AB6  0B0F               	andlw	15
 47808  003AB8  0100               	movlb	0	; () banked
 47809  003ABA  6FCD               	movwf	displayDigits@digit& (0+255),b
 47810                           
 47811                           ;segment.c: 82: digit[1] = (number_to_display >> 8) % 16;
 47812  003ABC  504B               	movf	_number_to_display+1,w,c
 47813  003ABE  0B0F               	andlw	15
 47814  003AC0  6FCE               	movwf	(displayDigits@digit+1)& (0+255),b
 47815                           
 47816                           ;segment.c: 83: digit[2] = (number_to_display >> 4) % 16;
 47817  003AC2  C04A  F007         	movff	_number_to_display,??_displayDigits
 47818  003AC6  C04B  F008         	movff	_number_to_display+1,??_displayDigits+1
 47819  003ACA  0E04               	movlw	4
 47820  003ACC  6E09               	movwf	(??_displayDigits+2)& (0+255),c
 47821  003ACE                     i2u5990_45:
 47822  003ACE  3408               	rlcf	??_displayDigits+1,w,c
 47823  003AD0  3208               	rrcf	??_displayDigits+1,f,c
 47824  003AD2  3207               	rrcf	??_displayDigits,f,c
 47825  003AD4  2E09               	decfsz	(??_displayDigits+2)& (0+255),f,c
 47826  003AD6  D7FB               	goto	i2u5990_45
 47827  003AD8  5007               	movf	??_displayDigits,w,c
 47828  003ADA  0B0F               	andlw	15
 47829  003ADC  6FCF               	movwf	(displayDigits@digit+2)& (0+255),b
 47830                           
 47831                           ;segment.c: 84: digit[3] = number_to_display % 16;
 47832  003ADE  504A               	movf	_number_to_display,w,c
 47833  003AE0  0B0F               	andlw	15
 47834  003AE2  6FD0               	movwf	(displayDigits@digit+3)& (0+255),b
 47835  003AE4                     i2l2974:
 47836                           
 47837                           ;segment.c: 85: }
 47838                           ;segment.c: 87: if(DIGIT_MODE == 2) {
 47839  003AE4  0E02               	movlw	2
 47840  003AE6  1839               	xorwf	_DIGIT_MODE,w,c
 47841  003AE8  A4D8               	btfss	status,2,c
 47842  003AEA  D020               	goto	i2l2975
 47843                           
 47844                           ;segment.c: 89: unsigned char lowByte = number_to_display & 0x7F;
 47845  003AEC  504A               	movf	_number_to_display,w,c
 47846  003AEE  0B7F               	andlw	127
 47847  003AF0  6E0A               	movwf	displayDigits@lowByte,c
 47848                           
 47849                           ;segment.c: 90: unsigned char highByte = (number_to_display >> 7) & 0x7F;
 47850  003AF2  C04A  F007         	movff	_number_to_display,??_displayDigits
 47851  003AF6  C04B  F008         	movff	_number_to_display+1,??_displayDigits+1
 47852  003AFA  0E07               	movlw	7
 47853  003AFC  6E09               	movwf	(??_displayDigits+2)& (0+255),c
 47854  003AFE                     i2u5992_45:
 47855  003AFE  3408               	rlcf	??_displayDigits+1,w,c
 47856  003B00  3208               	rrcf	??_displayDigits+1,f,c
 47857  003B02  3207               	rrcf	??_displayDigits,f,c
 47858  003B04  2E09               	decfsz	(??_displayDigits+2)& (0+255),f,c
 47859  003B06  D7FB               	goto	i2u5992_45
 47860  003B08  5007               	movf	??_displayDigits,w,c
 47861  003B0A  0B7F               	andlw	127
 47862  003B0C  6E0B               	movwf	displayDigits@highByte,c
 47863                           
 47864                           ;segment.c: 92: digit[0] = (highByte >> 4) % 0x8;
 47865  003B0E  380B               	swapf	displayDigits@highByte,w,c
 47866  003B10  0B0F               	andlw	15
 47867  003B12  0B07               	andlw	7
 47868  003B14  0100               	movlb	0	; () banked
 47869  003B16  6FCD               	movwf	displayDigits@digit& (0+255),b
 47870                           
 47871                           ;segment.c: 93: digit[1] = highByte % 16;
 47872  003B18  500B               	movf	displayDigits@highByte,w,c
 47873  003B1A  0B0F               	andlw	15
 47874  003B1C  6FCE               	movwf	(displayDigits@digit+1)& (0+255),b
 47875                           
 47876                           ;segment.c: 94: digit[2] = (lowByte >> 4) % 0x8;
 47877  003B1E  380A               	swapf	displayDigits@lowByte,w,c
 47878  003B20  0B0F               	andlw	15
 47879  003B22  0B07               	andlw	7
 47880  003B24  6FCF               	movwf	(displayDigits@digit+2)& (0+255),b
 47881                           
 47882                           ;segment.c: 95: digit[3] = lowByte % 16;
 47883  003B26  500A               	movf	displayDigits@lowByte,w,c
 47884  003B28  0B0F               	andlw	15
 47885  003B2A  6FD0               	movwf	(displayDigits@digit+3)& (0+255),b
 47886  003B2C                     i2l2975:
 47887                           
 47888                           ;segment.c: 97: }
 47889                           ;segment.c: 100: number_to_display_last = number_to_display;
 47890                           
 47891                           ; BSR set to: 0
 47892  003B2C  C04A  F17A         	movff	_number_to_display,displayDigits@number_to_display_last
 47893  003B30  C04B  F17B         	movff	_number_to_display+1,displayDigits@number_to_display_last+1
 47894  003B34                     i2l2970:
 47895                           
 47896                           ;segment.c: 101: }
 47897                           ;segment.c: 106: if (DIGIT_MODE == 0 || DIGIT_MODE == 1 || DIGIT_MODE == 2) {
 47898  003B34  5039               	movf	_DIGIT_MODE,w,c
 47899  003B36  B4D8               	btfsc	status,2,c
 47900  003B38  D007               	goto	i2u5995_40
 47901  003B3A  0439               	decf	_DIGIT_MODE,w,c
 47902  003B3C  B4D8               	btfsc	status,2,c
 47903  003B3E  D004               	goto	i2u5995_40
 47904  003B40  0E02               	movlw	2
 47905  003B42  1839               	xorwf	_DIGIT_MODE,w,c
 47906  003B44  A4D8               	btfss	status,2,c
 47907  003B46  D08B               	goto	i2l2999
 47908  003B48                     i2u5995_40:
 47909                           
 47910                           ;segment.c: 111: if(digit_counter == 0){
 47911  003B48  0100               	movlb	0	; () banked
 47912  003B4A  51EA               	movf	displayDigits@digit_counter& (0+255),w,b
 47913  003B4C  A4D8               	btfss	status,2,c
 47914  003B4E  D022               	goto	i2l2986
 47915                           
 47916                           ; BSR set to: 0
 47917                           ;segment.c: 112: RC3 = 0;
 47918  003B50  9682               	bcf	3970,3,c	;volatile
 47919                           
 47920                           ; BSR set to: 0
 47921                           ;segment.c: 116: if(DIGIT_MODE == 0 && number_to_display < 0){
 47922  003B52  5039               	movf	_DIGIT_MODE,w,c
 47923  003B54  B4D8               	btfsc	status,2,c
 47924                           
 47925                           ; BSR set to: 0
 47926  003B56  AE4B               	btfss	_number_to_display+1,7,c
 47927  003B58  D00A               	goto	i2l2980
 47928                           
 47929                           ; BSR set to: 0
 47930                           ;segment.c: 119: if(digit[1] > 0){PORTD = 0x40; RC0 = 1;}
 47931  003B5A  51CE               	movf	(displayDigits@digit+1)& (0+255),w,b
 47932  003B5C  B4D8               	btfsc	status,2,c
 47933  003B5E  D003               	goto	i2l2981
 47934                           
 47935                           ; BSR set to: 0
 47936  003B60  0E40               	movlw	64
 47937  003B62  6E83               	movwf	3971,c	;volatile
 47938                           
 47939                           ; BSR set to: 0
 47940  003B64  8082               	bsf	3970,0,c	;volatile
 47941  003B66                     i2l2981:
 47942                           
 47943                           ; BSR set to: 0
 47944                           ;segment.c: 120: if(light_decimal_points == 1){PORTD |= 0x80;}
 47945                           
 47946                           ; BSR set to: 0
 47947  003B66  A406               	btfss	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 47948  003B68  D015               	goto	i2l2986
 47949                           
 47950                           ; BSR set to: 0
 47951  003B6A  8E83               	bsf	3971,7,c	;volatile
 47952                           
 47953                           ; BSR set to: 0
 47954                           ;segment.c: 121: }
 47955  003B6C  D013               	goto	i2l2986
 47956  003B6E                     i2l2980:
 47957                           
 47958                           ; BSR set to: 0
 47959                           ;segment.c: 123: else {
 47960                           ;segment.c: 124: PORTD = seg_bcd_hex[digit[0]];
 47961                           
 47962                           ; BSR set to: 0
 47963  003B6E  51CD               	movf	displayDigits@digit& (0+255),w,b
 47964  003B70  0D01               	mullw	1
 47965  003B72  0E59               	movlw	low _seg_bcd_hex
 47966  003B74  24F3               	addwf	prodl,w,c
 47967  003B76  6EF6               	movwf	tblptrl,c
 47968  003B78  0EF3               	movlw	high _seg_bcd_hex
 47969  003B7A  20F4               	addwfc	prodh,w,c
 47970  003B7C  6EF7               	movwf	tblptrh,c
 47971  003B7E                     	if	0	;There are less than 3 active tblptr bytes
 47972  003B7E                     	endif
 47973  003B7E  0008               	tblrd		*
 47974  003B80  CFF5 FF83          	movff	tablat,3971	;volatile
 47975                           
 47976                           ; BSR set to: 0
 47977                           ;segment.c: 125: if(light_decimal_points == 1){PORTD |= 0x80;}
 47978  003B84  B406               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 47979                           
 47980                           ; BSR set to: 0
 47981  003B86  8E83               	bsf	3971,7,c	;volatile
 47982                           
 47983                           ; BSR set to: 0
 47984                           ;segment.c: 126: if(digit[0] == 0){RC0 = 0;}
 47985                           
 47986                           ; BSR set to: 0
 47987  003B88  51CD               	movf	displayDigits@digit& (0+255),w,b
 47988  003B8A  A4D8               	btfss	status,2,c
 47989  003B8C  D002               	goto	i2l2985
 47990                           
 47991                           ; BSR set to: 0
 47992  003B8E  9082               	bcf	3970,0,c	;volatile
 47993  003B90  D001               	goto	i2l2986
 47994  003B92                     i2l2985:
 47995                           
 47996                           ; BSR set to: 0
 47997                           ;segment.c: 127: else{RC0 = 1;}
 47998  003B92  8082               	bsf	3970,0,c	;volatile
 47999  003B94                     i2l2986:
 48000                           
 48001                           ; BSR set to: 0
 48002                           ;segment.c: 128: }
 48003                           ;segment.c: 129: }
 48004                           ;segment.c: 130: if(digit_counter == 1){
 48005                           
 48006                           ; BSR set to: 0
 48007                           
 48008                           ; BSR set to: 0
 48009                           
 48010                           ; BSR set to: 0
 48011  003B94  05EA               	decf	displayDigits@digit_counter& (0+255),w,b
 48012  003B96  A4D8               	btfss	status,2,c
 48013  003B98  D024               	goto	i2l2992
 48014                           
 48015                           ; BSR set to: 0
 48016                           ;segment.c: 131: RC0 = 0;
 48017  003B9A  9082               	bcf	3970,0,c	;volatile
 48018                           
 48019                           ; BSR set to: 0
 48020                           ;segment.c: 134: PORTD = seg_bcd_hex[digit[1]];
 48021  003B9C  51CE               	movf	(displayDigits@digit+1)& (0+255),w,b
 48022  003B9E  0D01               	mullw	1
 48023  003BA0  0E59               	movlw	low _seg_bcd_hex
 48024  003BA2  24F3               	addwf	prodl,w,c
 48025  003BA4  6EF6               	movwf	tblptrl,c
 48026  003BA6  0EF3               	movlw	high _seg_bcd_hex
 48027  003BA8  20F4               	addwfc	prodh,w,c
 48028  003BAA  6EF7               	movwf	tblptrh,c
 48029  003BAC                     	if	0	;There are less than 3 active tblptr bytes
 48030  003BAC                     	endif
 48031  003BAC  0008               	tblrd		*
 48032  003BAE  CFF5 FF83          	movff	tablat,3971	;volatile
 48033                           
 48034                           ; BSR set to: 0
 48035                           ;segment.c: 135: if(light_decimal_points == 1){PORTD |= 0x80;}
 48036  003BB2  B406               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 48037                           
 48038                           ; BSR set to: 0
 48039  003BB4  8E83               	bsf	3971,7,c	;volatile
 48040                           
 48041                           ; BSR set to: 0
 48042                           ;segment.c: 136: if(digit[0] == 0 && digit[1] == 0){RC1 = 0;}
 48043                           
 48044                           ; BSR set to: 0
 48045  003BB6  51CD               	movf	displayDigits@digit& (0+255),w,b
 48046  003BB8  A4D8               	btfss	status,2,c
 48047  003BBA  D005               	goto	i2l2989
 48048                           
 48049                           ; BSR set to: 0
 48050  003BBC  51CE               	movf	(displayDigits@digit+1)& (0+255),w,b
 48051  003BBE  A4D8               	btfss	status,2,c
 48052  003BC0  D002               	goto	i2l2989
 48053                           
 48054                           ; BSR set to: 0
 48055  003BC2  9282               	bcf	3970,1,c	;volatile
 48056  003BC4  D001               	goto	i2l2990
 48057  003BC6                     i2l2989:
 48058                           
 48059                           ; BSR set to: 0
 48060                           ;segment.c: 137: else{RC1 = 1;}
 48061  003BC6  8282               	bsf	3970,1,c	;volatile
 48062  003BC8                     i2l2990:
 48063                           
 48064                           ; BSR set to: 0
 48065                           ;segment.c: 139: if(DIGIT_MODE == 0 && number_to_display < 0){
 48066                           
 48067                           ; BSR set to: 0
 48068  003BC8  5039               	movf	_DIGIT_MODE,w,c
 48069  003BCA  B4D8               	btfsc	status,2,c
 48070                           
 48071                           ; BSR set to: 0
 48072  003BCC  AE4B               	btfss	_number_to_display+1,7,c
 48073  003BCE  D009               	goto	i2l2992
 48074                           
 48075                           ; BSR set to: 0
 48076                           ;segment.c: 141: if(digit[2] > 0 && digit[1] == 0){PORTD = 0x40; RC1 = 1;}
 48077  003BD0  51CF               	movf	(displayDigits@digit+2)& (0+255),w,b
 48078  003BD2  B4D8               	btfsc	status,2,c
 48079  003BD4  D006               	goto	i2l2992
 48080                           
 48081                           ; BSR set to: 0
 48082  003BD6  51CE               	movf	(displayDigits@digit+1)& (0+255),w,b
 48083  003BD8  A4D8               	btfss	status,2,c
 48084  003BDA  D003               	goto	i2l2992
 48085                           
 48086                           ; BSR set to: 0
 48087  003BDC  0E40               	movlw	64
 48088  003BDE  6E83               	movwf	3971,c	;volatile
 48089                           
 48090                           ; BSR set to: 0
 48091  003BE0  8282               	bsf	3970,1,c	;volatile
 48092  003BE2                     i2l2992:
 48093                           
 48094                           ; BSR set to: 0
 48095                           ;segment.c: 142: }
 48096                           ;segment.c: 143: }
 48097                           ;segment.c: 144: if(digit_counter == 2){
 48098                           
 48099                           ; BSR set to: 0
 48100                           
 48101                           ; BSR set to: 0
 48102                           
 48103                           ; BSR set to: 0
 48104  003BE2  0E02               	movlw	2
 48105  003BE4  19EA               	xorwf	displayDigits@digit_counter& (0+255),w,b
 48106  003BE6  A4D8               	btfss	status,2,c
 48107  003BE8  D027               	goto	i2l2998
 48108                           
 48109                           ; BSR set to: 0
 48110                           ;segment.c: 145: RC1 = 0;
 48111  003BEA  9282               	bcf	3970,1,c	;volatile
 48112                           
 48113                           ; BSR set to: 0
 48114                           ;segment.c: 148: PORTD = seg_bcd_hex[digit[2]];
 48115  003BEC  51CF               	movf	(displayDigits@digit+2)& (0+255),w,b
 48116  003BEE  0D01               	mullw	1
 48117  003BF0  0E59               	movlw	low _seg_bcd_hex
 48118  003BF2  24F3               	addwf	prodl,w,c
 48119  003BF4  6EF6               	movwf	tblptrl,c
 48120  003BF6  0EF3               	movlw	high _seg_bcd_hex
 48121  003BF8  20F4               	addwfc	prodh,w,c
 48122  003BFA  6EF7               	movwf	tblptrh,c
 48123  003BFC                     	if	0	;There are less than 3 active tblptr bytes
 48124  003BFC                     	endif
 48125  003BFC  0008               	tblrd		*
 48126  003BFE  CFF5 FF83          	movff	tablat,3971	;volatile
 48127                           
 48128                           ; BSR set to: 0
 48129                           ;segment.c: 149: if(light_decimal_points == 1){PORTD |= 0x80;}
 48130  003C02  B406               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 48131                           
 48132                           ; BSR set to: 0
 48133  003C04  8E83               	bsf	3971,7,c	;volatile
 48134                           
 48135                           ; BSR set to: 0
 48136                           ;segment.c: 150: if(digit[0] == 0 && digit[1] == 0 && digit[2] == 0){RC2 = 0;}
 48137                           
 48138                           ; BSR set to: 0
 48139  003C06  51CD               	movf	displayDigits@digit& (0+255),w,b
 48140  003C08  A4D8               	btfss	status,2,c
 48141  003C0A  D008               	goto	i2l2995
 48142                           
 48143                           ; BSR set to: 0
 48144  003C0C  51CE               	movf	(displayDigits@digit+1)& (0+255),w,b
 48145  003C0E  A4D8               	btfss	status,2,c
 48146  003C10  D005               	goto	i2l2995
 48147                           
 48148                           ; BSR set to: 0
 48149  003C12  51CF               	movf	(displayDigits@digit+2)& (0+255),w,b
 48150  003C14  A4D8               	btfss	status,2,c
 48151  003C16  D002               	goto	i2l2995
 48152                           
 48153                           ; BSR set to: 0
 48154  003C18  9482               	bcf	3970,2,c	;volatile
 48155  003C1A  D001               	goto	i2l2996
 48156  003C1C                     i2l2995:
 48157                           
 48158                           ; BSR set to: 0
 48159                           ;segment.c: 151: else{RC2 = 1;}
 48160  003C1C  8482               	bsf	3970,2,c	;volatile
 48161  003C1E                     i2l2996:
 48162                           
 48163                           ; BSR set to: 0
 48164                           ;segment.c: 153: if(DIGIT_MODE == 0 && number_to_display < 0){
 48165                           
 48166                           ; BSR set to: 0
 48167  003C1E  5039               	movf	_DIGIT_MODE,w,c
 48168  003C20  B4D8               	btfsc	status,2,c
 48169                           
 48170                           ; BSR set to: 0
 48171  003C22  AE4B               	btfss	_number_to_display+1,7,c
 48172  003C24  D009               	goto	i2l2998
 48173                           
 48174                           ; BSR set to: 0
 48175                           ;segment.c: 154: if(digit[3] > 0 && digit[2] == 0){PORTD = 0x40; RC2 = 1;}
 48176  003C26  51D0               	movf	(displayDigits@digit+3)& (0+255),w,b
 48177  003C28  B4D8               	btfsc	status,2,c
 48178  003C2A  D006               	goto	i2l2998
 48179                           
 48180                           ; BSR set to: 0
 48181  003C2C  51CF               	movf	(displayDigits@digit+2)& (0+255),w,b
 48182  003C2E  A4D8               	btfss	status,2,c
 48183  003C30  D003               	goto	i2l2998
 48184                           
 48185                           ; BSR set to: 0
 48186  003C32  0E40               	movlw	64
 48187  003C34  6E83               	movwf	3971,c	;volatile
 48188                           
 48189                           ; BSR set to: 0
 48190  003C36  8482               	bsf	3970,2,c	;volatile
 48191  003C38                     i2l2998:
 48192                           
 48193                           ; BSR set to: 0
 48194                           ;segment.c: 155: }
 48195                           ;segment.c: 156: }
 48196                           ;segment.c: 157: if(digit_counter == 3){
 48197                           
 48198                           ; BSR set to: 0
 48199                           
 48200                           ; BSR set to: 0
 48201                           
 48202                           ; BSR set to: 0
 48203  003C38  0E03               	movlw	3
 48204  003C3A  19EA               	xorwf	displayDigits@digit_counter& (0+255),w,b
 48205  003C3C  A4D8               	btfss	status,2,c
 48206  003C3E  D00F               	goto	i2l2999
 48207                           
 48208                           ; BSR set to: 0
 48209                           ;segment.c: 158: RC2 = 0;
 48210  003C40  9482               	bcf	3970,2,c	;volatile
 48211                           
 48212                           ; BSR set to: 0
 48213                           ;segment.c: 161: PORTD = seg_bcd_hex[digit[3]];
 48214  003C42  51D0               	movf	(displayDigits@digit+3)& (0+255),w,b
 48215  003C44  0D01               	mullw	1
 48216  003C46  0E59               	movlw	low _seg_bcd_hex
 48217  003C48  24F3               	addwf	prodl,w,c
 48218  003C4A  6EF6               	movwf	tblptrl,c
 48219  003C4C  0EF3               	movlw	high _seg_bcd_hex
 48220  003C4E  20F4               	addwfc	prodh,w,c
 48221  003C50  6EF7               	movwf	tblptrh,c
 48222  003C52                     	if	0	;There are less than 3 active tblptr bytes
 48223  003C52                     	endif
 48224  003C52  0008               	tblrd		*
 48225  003C54  CFF5 FF83          	movff	tablat,3971	;volatile
 48226                           
 48227                           ; BSR set to: 0
 48228                           ;segment.c: 162: if(light_decimal_points == 1){PORTD |= 0x80;}
 48229  003C58  B406               	btfsc	_light_decimal_points/(0+8),_light_decimal_points& (0+7),c
 48230                           
 48231                           ; BSR set to: 0
 48232  003C5A  8E83               	bsf	3971,7,c	;volatile
 48233                           
 48234                           ; BSR set to: 0
 48235                           ;segment.c: 163: RC3 = 1;
 48236                           
 48237                           ; BSR set to: 0
 48238  003C5C  8682               	bsf	3970,3,c	;volatile
 48239  003C5E                     i2l2999:
 48240                           
 48241                           ;segment.c: 164: }
 48242                           ;segment.c: 165: }
 48243                           ;segment.c: 168: digit_counter++;
 48244                           
 48245                           ; BSR set to: 0
 48246  003C5E  0100               	movlb	0	; () banked
 48247  003C60  2BEA               	incf	displayDigits@digit_counter& (0+255),f,b
 48248                           
 48249                           ; BSR set to: 0
 48250                           ;segment.c: 169: if(digit_counter > 3){digit_counter = 0;}
 48251  003C62  0E03               	movlw	3
 48252  003C64  65EA               	cpfsgt	displayDigits@digit_counter& (0+255),b
 48253  003C66  0012               	return	
 48254                           
 48255                           ; BSR set to: 0
 48256  003C68  0E00               	movlw	0
 48257  003C6A  6FEA               	movwf	displayDigits@digit_counter& (0+255),b
 48258  003C6C  0012               	return	
 48259  003C6E                     __end_of_displayDigits:
 48260                           	opt stack 0
 48261                           tblptru	equ	0xFF8
 48262                           tblptrh	equ	0xFF7
 48263                           tblptrl	equ	0xFF6
 48264                           tablat	equ	0xFF5
 48265                           prodh	equ	0xFF4
 48266                           prodl	equ	0xFF3
 48267                           intcon	equ	0xFF2
 48268                           intcon2	equ	0xFF1
 48269                           indf0	equ	0xFEF
 48270                           postinc0	equ	0xFEE
 48271                           postdec0	equ	0xFED
 48272                           fsr0h	equ	0xFEA
 48273                           fsr0l	equ	0xFE9
 48274                           wreg	equ	0xFE8
 48275                           postinc1	equ	0xFE6
 48276                           postdec1	equ	0xFE5
 48277                           plusw1	equ	0xFE3
 48278                           fsr1h	equ	0xFE2
 48279                           fsr1l	equ	0xFE1
 48280                           indf2	equ	0xFDF
 48281                           postinc2	equ	0xFDE
 48282                           postdec2	equ	0xFDD
 48283                           plusw2	equ	0xFDB
 48284                           fsr2h	equ	0xFDA
 48285                           fsr2l	equ	0xFD9
 48286                           status	equ	0xFD8
 48287                           tblptru	equ	0xFF8
 48288                           tblptrh	equ	0xFF7
 48289                           tblptrl	equ	0xFF6
 48290                           tablat	equ	0xFF5
 48291                           prodh	equ	0xFF4
 48292                           prodl	equ	0xFF3
 48293                           intcon	equ	0xFF2
 48294                           intcon2	equ	0xFF1
 48295                           indf0	equ	0xFEF
 48296                           postinc0	equ	0xFEE
 48297                           postdec0	equ	0xFED
 48298                           fsr0h	equ	0xFEA
 48299                           fsr0l	equ	0xFE9
 48300                           wreg	equ	0xFE8
 48301                           postinc1	equ	0xFE6
 48302                           postdec1	equ	0xFE5
 48303                           plusw1	equ	0xFE3
 48304                           fsr1h	equ	0xFE2
 48305                           fsr1l	equ	0xFE1
 48306                           indf2	equ	0xFDF
 48307                           postinc2	equ	0xFDE
 48308                           postdec2	equ	0xFDD
 48309                           plusw2	equ	0xFDB
 48310                           fsr2h	equ	0xFDA
 48311                           fsr2l	equ	0xFD9
 48312                           status	equ	0xFD8
 48313                           
 48314                           	psect	rparam
 48315  0000                     tblptru	equ	0xFF8
 48316                           tblptrh	equ	0xFF7
 48317                           tblptrl	equ	0xFF6
 48318                           tablat	equ	0xFF5
 48319                           prodh	equ	0xFF4
 48320                           prodl	equ	0xFF3
 48321                           intcon	equ	0xFF2
 48322                           intcon2	equ	0xFF1
 48323                           indf0	equ	0xFEF
 48324                           postinc0	equ	0xFEE
 48325                           postdec0	equ	0xFED
 48326                           fsr0h	equ	0xFEA
 48327                           fsr0l	equ	0xFE9
 48328                           wreg	equ	0xFE8
 48329                           postinc1	equ	0xFE6
 48330                           postdec1	equ	0xFE5
 48331                           plusw1	equ	0xFE3
 48332                           fsr1h	equ	0xFE2
 48333                           fsr1l	equ	0xFE1
 48334                           indf2	equ	0xFDF
 48335                           postinc2	equ	0xFDE
 48336                           postdec2	equ	0xFDD
 48337                           plusw2	equ	0xFDB
 48338                           fsr2h	equ	0xFDA
 48339                           fsr2l	equ	0xFD9
 48340                           status	equ	0xFD8
 48341                           
 48342                           	psect	temp
 48343  00003E                     btemp:
 48344                           	opt stack 0
 48345  00003E                     	ds	12
 48346  0000                     wtemp0	set	btemp
 48347  0000                     wtemp1	set	btemp+2
 48348  0000                     wtemp2	set	btemp+4
 48349  0000                     wtemp3	set	btemp+6
 48350  0000                     wtemp4	set	btemp+8
 48351  0000                     wtemp5	set	btemp+10
 48352  0000                     wtemp6	set	btemp+1
 48353  0000                     ttemp0	set	btemp
 48354  0000                     ttemp1	set	btemp+3
 48355  0000                     ttemp2	set	btemp+6
 48356  0000                     ttemp3	set	btemp+9
 48357  0000                     ltemp0	set	btemp
 48358  0000                     ltemp1	set	btemp+4
 48359  0000                     ltemp2	set	btemp+8
 48360                           tblptru	equ	0xFF8
 48361                           tblptrh	equ	0xFF7
 48362                           tblptrl	equ	0xFF6
 48363                           tablat	equ	0xFF5
 48364                           prodh	equ	0xFF4
 48365                           prodl	equ	0xFF3
 48366                           intcon	equ	0xFF2
 48367                           intcon2	equ	0xFF1
 48368                           indf0	equ	0xFEF
 48369                           postinc0	equ	0xFEE
 48370                           postdec0	equ	0xFED
 48371                           fsr0h	equ	0xFEA
 48372                           fsr0l	equ	0xFE9
 48373                           wreg	equ	0xFE8
 48374                           postinc1	equ	0xFE6
 48375                           postdec1	equ	0xFE5
 48376                           plusw1	equ	0xFE3
 48377                           fsr1h	equ	0xFE2
 48378                           fsr1l	equ	0xFE1
 48379                           indf2	equ	0xFDF
 48380                           postinc2	equ	0xFDE
 48381                           postdec2	equ	0xFDD
 48382                           plusw2	equ	0xFDB
 48383                           fsr2h	equ	0xFDA
 48384                           fsr2l	equ	0xFD9
 48385                           status	equ	0xFD8


Data Sizes:
    Strings     667
    Constant    5281
    Data        242
    BSS         381
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           83     35      70
    BANK0           160    109     160
    BANK1           256     81     256
    BANK2           256      0     232
    BANK3           256      0     137
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0

Pointer List with Targets:

    strcpy@from	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_61(CODE[5]), STR_59(CODE[5]), STR_56(CODE[5]), STR_54(CODE[5]), 
		 -> STR_44(CODE[5]), STR_43(CODE[5]), STR_41(CODE[5]), STR_9(CODE[5]), 
		 -> STR_8(CODE[5]), STR_7(CODE[5]), STR_6(CODE[5]), STR_5(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[5]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 5
		 -> string_to_display(BANK1[5]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 5
		 -> string_to_display(BANK1[5]), 

    arpeggioPtr	PTR unsigned char  size(2) Largest target is 16
		 -> NULL(NULL[0]), ARPEGGIO_RANDOM(BANK2[16]), ARPEGGIO_SORTED(BANK2[16]), ARPEGGIO(BANK1[16]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 5
		 -> string_to_display(BANK1[5]), 

    playThisNote8@mode_p	PTR unsigned char  size(2) Largest target is 15
		 -> locrian_key(CODE[15]), aeolian_key(CODE[15]), mixolydian_key(CODE[15]), lydian_key(CODE[15]), 
		 -> phrygian_key(CODE[15]), dorian_key(CODE[15]), ionian_key(CODE[15]), 

    playSeventh@seventh_p	PTR unsigned char  size(2) Largest target is 4
		 -> diminished_7th(BANK2[4]), half_diminished_7th(BANK2[4]), minor_7th(BANK2[4]), major_7th(BANK2[4]), 
		 -> dominant_7th(BANK2[4]), 

    playTriad@triad_p	PTR unsigned char  size(2) Largest target is 3
		 -> diminished_triad(BANK2[3]), augmented_triad(BANK2[3]), minor_triad(BANK2[3]), major_triad(BANK2[3]), 

    Lcd_Print_String@a	PTR unsigned char  size(2) Largest target is 2397
		 -> STR_75(CODE[16]), STR_74(CODE[12]), STR_73(CODE[10]), STR_72(CODE[12]), 
		 -> STR_71(CODE[10]), STR_70(CODE[12]), STR_69(CODE[10]), STR_68(CODE[12]), 
		 -> STR_67(CODE[10]), STR_66(CODE[12]), STR_65(CODE[13]), STR_64(CODE[15]), 
		 -> STR_63(CODE[15]), STR_62(CODE[16]), STR_60(CODE[14]), STR_58(CODE[12]), 
		 -> STR_57(CODE[15]), STR_55(CODE[14]), STR_53(CODE[15]), STR_52(CODE[17]), 
		 -> STR_51(CODE[9]), STR_50(CODE[10]), STR_49(CODE[13]), STR_48(CODE[13]), 
		 -> STR_47(CODE[17]), STR_46(CODE[14]), STR_45(CODE[14]), STR_42(CODE[15]), 
		 -> STR_40(CODE[16]), STR_39(CODE[17]), STR_38(CODE[13]), STR_37(CODE[17]), 
		 -> STR_36(CODE[8]), STR_35(CODE[8]), STR_34(CODE[12]), STR_33(CODE[17]), 
		 -> STR_32(CODE[15]), STR_31(CODE[14]), STR_30(CODE[17]), STR_29(CODE[15]), 
		 -> STR_28(CODE[17]), STR_27(CODE[14]), STR_26(CODE[16]), STR_25(CODE[14]), 
		 -> STR_24(CODE[12]), LCD_STRINGS(CODE[2397]), STR_23(CODE[13]), STR_22(CODE[17]), 
		 -> STR_21(CODE[16]), STR_20(CODE[5]), STR_19(CODE[11]), STR_18(CODE[11]), 
		 -> STR_17(CODE[11]), STR_16(CODE[10]), STR_15(CODE[11]), STR_14(CODE[11]), 
		 -> STR_13(CODE[11]), STR_12(CODE[10]), string2display(BANK1[5]), STR_11(CODE[17]), 
		 -> STR_10(CODE[17]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_playArpeggio
    _playArpeggio->_sort_pitches
    _display->_displayDigits

Critical Paths under _main in BANK0

    _main->_selectSlotOnBoot
    _panic_button->_controlChange
    _Lcd_Clear->_Lcd_Cmd
    _Function_H_6->_Function_H_6_1
    _Function_H_2->_calculate_pulse_length
    _exitFunction->_Lcd_Print_String
    _Function_G_3->_Lcd_Print_String
    _loadFromEEPROM->_calculate_pulse_length
    _calculate_pulse_length->___fltol
    _exitLoad->_Lcd_Print_String
    _exitSave->_Lcd_Print_String
    _eepromExit->_Lcd_Print_String
    _Function_D->_Function_D_3
    _Function_D->_Function_D_4
    _Function_D->_Function_D_5
    _Function_D_5->_setControllerNumbers
    _Function_D_4->_setControllerNumbers
    _Function_D_3->_setControllerNumbers
    _calculate_alpha->___fldiv
    ___fldiv->___flmul
    _Function_C->_Function_C_2
    _Function_C->_Function_C_3
    _digitalInputs->_processOctave
    _processOctave->_doTheUnLatch
    _doTheUnLatch->_playThisNote8
    _doTheLatch->_strcpy
    _processKeyboard->_keyboard_eight_note_efficient
    _keyboard_sharps_only_efficient->_playThisNotePentatonic
    _playThisNotePentatonic->_add_notes_to_arpeggio
    _keyboard_eight_note_efficient->_playThisNote8
    _playThisNote8->_add_notes_to_arpeggio
    _playDiatonicTriadMinor->_wait_one_pulse
    _playDiatonicTriadMajor->_wait_one_pulse
    _playDiatonicSeventhMinor->_wait_one_pulse
    _playDiatonicSeventhMajor->_wait_one_pulse
    _keyboard_all_note_efficient->_playThisNote
    _playThisNote->_add_notes_to_arpeggio
    _playTriad->_wait_one_pulse
    _playSeventh->_wait_one_pulse
    _setupArpeggio->_copy_array
    _delete_notes_from_arpeggio->_rotateArrayLeft
    _add_notes_to_arpeggio->_rotateArrayLeft
    _processDrumpad->_controlChange
    _processDrumpad->_noteOffDrum
    _processDrumpad->_noteOnDrum
    _keyboardTranspose->_printThisNumber
    _analogInputs->_readPotentiometers
    _readPotentiometers->___fltol
    _processPotentiometers->_controlChange
    _processPotentiometers->_pitchBend
    _map->___aldiv
    ___fltol->___fladd
    ___flneg->___fldiv
    ___flmul->___xxtofl
    ___fladd->___flneg
    _clear_row2->_Lcd_Print_String
    _clear_row1->_Lcd_Print_String
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Print_String->_Lcd_Print_Char
    _Lcd_Print_Char->_Lcd_SetBit
    _initializeSaveSlotsOnce->_saveToEEPROM
    _saveToEEPROM->_Write_b_eep
    _initializeMenuArray->___wmul
    _displayTest->_strcpy
    _Lcd_Start->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_SetBit

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _selectSlotOnBoot->_loadFromEEPROM
    _Function_G_2->_loadFromEEPROM
    _setControllerNumbers->_analogInputs
    _Function_C_3->_analogInputs
    _Function_C_2->_analogInputs
    _un_block_code->_analogInputs
    _analogInputs->_readPotentiometers

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0 59302742
                                             80 BANK1      1     1      0
                     _ADC_Initialize
                          _Lcd_Start
                         _Read_b_eep
                       _analogInputs
                    _calculate_alpha
             _calculate_pulse_length
                      _digitalInputs
                        _displayTest
                _initializeMenuArray
            _initializeSaveSlotsOnce
                           _menu_lcd
                       _panic_button
               _processEncoderBuxton
                   _selectSlotOnBoot
                              _setup
                              _srand
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _selectSlotOnBoot                                     1     1      0   15019
                                            108 BANK0      1     1      0
                         _Read_b_eep
                     _loadFromEEPROM
 ---------------------------------------------------------------------------------
 (1) _panic_button                                         0     0      0   23155
                      _controlChange
 ---------------------------------------------------------------------------------
 (1) _menu_lcd                                             0     0      0 58032258
                         _Function_A
                         _Function_B
                         _Function_C
                         _Function_D
                         _Function_E
                         _Function_F
                         _Function_G
                         _Function_H
                          _Lcd_Clear
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                            ___lbmod
                             ___wmul
                       _exitFunction
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     155
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Function_H                                           0     0      0 23309898
                       _Function_H_1
                       _Function_H_2
                       _Function_H_3
                       _Function_H_4
                       _Function_H_5
                       _Function_H_6
                       _Function_H_7
                       _Function_H_8
                       _Function_H_9
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_9                                         0     0      0 6213665
                     _Function_H_9_1
                     _Function_H_9_2
                     _Function_H_9_3
                     _Function_H_9_4
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_4                                       0     0      0 1242733
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_3                                       0     0      0 1242733
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_2                                       0     0      0 1242733
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_9_1                                       0     0      0 1242733
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_8                                         0     0      0 3686917
                     _Function_H_8_1
                     _Function_H_8_2
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_8_2                                       0     0      0 1222092
                   _Lcd_Print_String
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_8_1                                       0     0      0 1234497
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_7                                         0     0      0 1237486
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
                             _strcpy
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_6                                         0     0      0 4234228
                     _Function_H_6_1
                     _Function_H_6_2
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_6_2                                       0     0      0 1237486
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
                             _strcpy
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _Function_H_6_1                                       1     1      0 1766414
                                            103 BANK0      1     1      0
                   _Lcd_Print_String
                         _clear_row1
                         _clear_row2
                         _doTheLatch
                       _doTheUnLatch
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_5                                         2     2      0 1242863
                                            103 BANK0      2     2      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_4                                         0     0      0 1245112
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _setupArpeggio
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_3                                         0     0      0 1227122
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _clear_row2
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_2                                         0     0      0 1238168
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
             _calculate_pulse_length
                         _clear_row2
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_H_1                                         1     1      0 1754009
                                            103 BANK0      1     1      0
                   _Lcd_Print_String
                         _clear_row2
                       _doTheUnLatch
                             _strcpy
                      _un_block_code
 ---------------------------------------------------------------------------------
 (2) _Function_G                                           0     0      0 5150764
                       _Function_G_1
                       _Function_G_2
                       _Function_G_3
                       _Function_G_4
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                         _eepromExit
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_G_4                                         0     0      0 1266318
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                       _exitFunction
                      _un_block_code
 ---------------------------------------------------------------------------------
 (2) _exitFunction                                         2     2      0   22195
                                             14 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (3) _Function_G_3                                         2     2      0   35990
                                             14 BANK0      2     2      0
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                         _clear_row1
                         _clear_row2
 ---------------------------------------------------------------------------------
 (3) _Function_G_2                                         0     0      0 1302955
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                         _eepromExit
                           _exitLoad
                     _loadFromEEPROM
                      _un_block_code
 ---------------------------------------------------------------------------------
 (2) _loadFromEEPROM                                      80    80      0   14442
                                              0 BANK1     80    80      0
                         _Read_b_eep
             _calculate_pulse_length
 ---------------------------------------------------------------------------------
 (3) _calculate_pulse_length                              10     8      2   11046
                                             98 BANK0     10     8      2
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) _exitLoad                                             2     2      0   22195
                                             14 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (3) _Function_G_1                                         0     0      0 1292978
                           _Busy_eep
                   _Lcd_Print_String
                        _Write_b_eep
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                         _eepromExit
                           _exitSave
                       _saveToEEPROM
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _exitSave                                             2     2      0   22195
                                             14 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (3) _eepromExit                                           2     2      0   22195
                                             14 BANK0      2     2      0
                   _Lcd_Print_String
                         _clear_row1
 ---------------------------------------------------------------------------------
 (2) _Function_F                                           0     0      0 1243195
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _clear_row2
                         _int2string
                      _programChange
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _programChange                                        3     1      2   16073
                                              0 BANK0      3     1      2
                            ___lbmod
         _key_press_release_note_off
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (2) _Function_E                                           0     0      0 3659762
                       _Function_E_1
                       _Function_E_2
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_E_2                                         0     0      0 1214717
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_E_1                                         0     0      0 1214717
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (2) _Function_D                                           0     0      0 11068096
                       _Function_D_1
                       _Function_D_2
                       _Function_D_3
                       _Function_D_4
                       _Function_D_5
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_D_5                                         1     1      0 2458476
                                            105 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _setControllerNumbers
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_D_4                                         1     1      0 2458476
                                            105 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _setControllerNumbers
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_D_3                                         1     1      0 2458476
                                            105 BANK0      1     1      0
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
               _setControllerNumbers
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _setControllerNumbers                                 2     2      0 1215709
                                            103 BANK0      2     2      0
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                       _analogInputs
                      _digitalInputs
                         _int2string
 ---------------------------------------------------------------------------------
 (3) _Function_D_2                                         0     0      0 1219508
                           _Busy_eep
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                        _Write_b_eep
                    _calculate_alpha
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _calculate_alpha                                      0     0      0    3401
                            ___fldiv
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) ___fldiv                                             25    17      8    2475
                                             39 BANK0     25    17      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) _Function_D_1                                         0     0      0 1242832
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
            _setControllerResolution
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _setControllerResolution                              1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Function_C                                           0     0      0 7368697
                       _Function_C_1
                       _Function_C_2
                       _Function_C_3
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_C_3                                         2     2      0 2447818
                                            103 BANK0      2     2      0
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                            ___lbmod
                             ___wmul
                       _analogInputs
                         _clear_row1
                         _clear_row2
                      _digitalInputs
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_C_2                                         2     2      0 2447818
                                            103 BANK0      2     2      0
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
                            ___lbmod
                             ___wmul
                       _analogInputs
                         _clear_row1
                         _clear_row2
                      _digitalInputs
                         _int2string
                      _un_block_code
 ---------------------------------------------------------------------------------
 (4) _int2string                                           6     4      2    2415
                                              0 BANK0      6     4      2
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (19) ___awdiv                                             8     4      4     575
 ---------------------------------------------------------------------------------
 (3) _Function_C_1                                         0     0      0 1242733
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (2) _Function_B                                           0     0      0 1230328
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (2) _Function_A                                           0     0      0 4958527
                       _Function_A_1
                       _Function_A_2
                       _Function_A_3
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_A_3                                         0     0      0 1242733
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_A_2                                         0     0      0 1242733
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _Function_A_1                                         0     0      0 1242733
                   _Lcd_Print_String
                            ___lbmod
                             ___wmul
                         _clear_row1
                         _clear_row2
                      _un_block_code
 ---------------------------------------------------------------------------------
 (3) _un_block_code                                        0     0      0 1199897
                       _analogInputs
                      _digitalInputs
               _processEncoderBuxton
 ---------------------------------------------------------------------------------
 (1) _processEncoderBuxton                                 7     7      0       0
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (4) _digitalInputs                                        0     0      0 1147489
                 _buttonInputsSerial
                  _keyboardTranspose
                     _processDrumpad
                    _processKeyboard
                      _processOctave
 ---------------------------------------------------------------------------------
 (5) _processOctave                                        2     2      0  559530
                                             30 BANK0      2     2      0
                            ___awmod
                             ___wmul
                         _doTheLatch
                       _doTheUnLatch
         _key_press_release_note_off
                    _printThisNumber
                     _random_pitches
       _random_pitches_non_repeating
                      _resetArpeggio
                             _strcpy
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (6) _doTheUnLatch                                         4     4      0  528894
                                             26 BANK0      4     4      0
                       _playThisNote
                      _playThisNote8
             _playThisNotePentatonic
                             _strcpy
 ---------------------------------------------------------------------------------
 (6) _doTheLatch                                           0     0      0    2989
                             _strcpy
 ---------------------------------------------------------------------------------
 (5) _processKeyboard                                      0     0      0  531005
        _keyboard_all_note_efficient
      _keyboard_eight_note_efficient
     _keyboard_sharps_only_efficient
 ---------------------------------------------------------------------------------
 (6) _keyboard_sharps_only_efficient                       2     2      0   61256
                                             23 BANK0      2     2      0
             _playThisNotePentatonic
 ---------------------------------------------------------------------------------
 (7) _playThisNotePentatonic                               7     6      1   59896
                                             17 BANK0      6     5      1
              _add_notes_to_arpeggio
         _delete_notes_from_arpeggio
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (6) _keyboard_eight_note_efficient                        2     2      0  294908
                                             26 BANK0      2     2      0
                      _playThisNote8
 ---------------------------------------------------------------------------------
 (7) _playThisNote8                                        9     8      1  292868
                                             17 BANK0      9     8      1
              _add_notes_to_arpeggio
         _delete_notes_from_arpeggio
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
           _playDiatonicSeventhMajor
           _playDiatonicSeventhMinor
             _playDiatonicTriadMajor
             _playDiatonicTriadMinor
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (8) _playDiatonicTriadMinor                               8     7      1   57926
                                              1 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (8) _playDiatonicTriadMajor                               8     7      1   57678
                                              1 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (8) _playDiatonicSeventhMinor                             8     7      1   57926
                                              1 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (8) _playDiatonicSeventhMajor                             8     7      1   57678
                                              1 BANK0      8     7      1
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (6) _keyboard_all_note_efficient                          1     1      0  174841
                                             22 BANK0      1     1      0
                       _playThisNote
 ---------------------------------------------------------------------------------
 (7) _playThisNote                                         5     5      0  173141
                                             17 BANK0      5     5      0
              _add_notes_to_arpeggio
         _delete_notes_from_arpeggio
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                        _playSeventh
                          _playTriad
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (8) _playTriad                                            9     9      0   57600
                                              1 BANK0      9     9      0
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (8) _playSeventh                                          9     9      0   57603
                                              1 BANK0      9     9      0
              _finish_arpeggio_setup
         _key_press_release_note_off
                            _noteOff
                             _noteOn
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (18) _noteOn                                              3     0      3   27168
                            _noteOff
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (8) _finish_arpeggio_setup                                0     0      0    2379
                      _resetArpeggio
                      _setupArpeggio
 ---------------------------------------------------------------------------------
 (9) _setupArpeggio                                        0     0      0    2379
                         _copy_array
                     _random_pitches
       _random_pitches_non_repeating
 ---------------------------------------------------------------------------------
 (18) _random_pitches_non_repeating                        3     3      0    1157
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (18) _random_pitches                                      2     2      0    1061
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (19) _rand                                                0     0      0     214
                             ___lmul
 ---------------------------------------------------------------------------------
 (19) ___awmod                                             6     2      4     745
 ---------------------------------------------------------------------------------
 (10) _copy_array                                          1     1      0     161
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _resetArpeggio                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _delete_notes_from_arpeggio                           2     2      0     387
                                              9 BANK0      2     2      0
                     _findArrayIndex
                    _rotateArrayLeft
 ---------------------------------------------------------------------------------
 (9) _findArrayIndex                                       3     3      0     161
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (8) _add_notes_to_arpeggio                                8     8      0     223
                                              9 BANK0      8     8      0
                    _rotateArrayLeft
 ---------------------------------------------------------------------------------
 (9) _rotateArrayLeft                                      9     9      0     161
                                              0 BANK0      9     9      0
 ---------------------------------------------------------------------------------
 (5) _processDrumpad                                       0     0      0   42555
                      _controlChange
                        _noteOffDrum
                         _noteOnDrum
 ---------------------------------------------------------------------------------
 (6) _noteOnDrum                                           3     1      2   16653
                                              0 BANK0      3     1      2
                            _noteOff
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (6) _noteOffDrum                                          3     1      2    2747
                                              0 BANK0      3     1      2
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (5) _keyboardTranspose                                    0     0      0   14263
         _key_press_release_note_off
                    _printThisNumber
                     _wait_one_pulse
 ---------------------------------------------------------------------------------
 (6) _wait_one_pulse                                       1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _printThisNumber                                      2     0      2     481
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _buttonInputsSerial                                   6     6      0     136
                                              0 BANK0      6     6      0
                              _clock
                               _load
 ---------------------------------------------------------------------------------
 (6) _load                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _clock                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _analogInputs                                         7     7      0   52408
                                              7 BANK1      7     7      0
                 _readPotentiometers
 ---------------------------------------------------------------------------------
 (5) _readPotentiometers                                  12    12      0   52408
                                             98 BANK0      5     5      0
                                              0 BANK1      7     7      0
                           _ADC_Read
                            ___fladd
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _map
              _processPotentiometers
 ---------------------------------------------------------------------------------
 (6) _processPotentiometers                                6     6      0   40251
                                              3 BANK0      6     6      0
                      _controlChange
                          _pitchBend
 ---------------------------------------------------------------------------------
 (7) _pitchBend                                            3     1      2   16253
                                              0 BANK0      3     1      2
                            ___lbmod
         _key_press_release_note_off
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (2) _controlChange                                        3     1      2   23155
                                              0 BANK0      3     1      2
                            ___lbmod
         _key_press_release_note_off
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (3) _key_press_release_note_off                           0     0      0   13751
                            _noteOff
 ---------------------------------------------------------------------------------
 (19) _noteOff                                             3     0      3   13751
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (19) _sendUSB                                             8     5      3     584
 ---------------------------------------------------------------------------------
 (19) _sendOut                                             8     5      3     599
 ---------------------------------------------------------------------------------
 (17) ___lbmod                                             4     2      2     804
 ---------------------------------------------------------------------------------
 (6) _map                                                 40    20     20    1956
                                             14 BANK0     40    20     20
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (20) ___lmul                                             12     4      8     214
 ---------------------------------------------------------------------------------
 (7) ___aldiv                                             14     6      8     625
                                              0 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4     926
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     517
                                             88 BANK0     10     6      4
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flneg                                              4     0      4     245
                                             64 BANK0      4     0      4
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             25    17      8    3053
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             20    12      8    3762
                                             68 BANK0     20    12      8
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (6) _ADC_Read                                             5     3      2      34
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (3) _clear_row2                                           0     0      0   12405
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
 ---------------------------------------------------------------------------------
 (3) _clear_row1                                           0     0      0   12405
                   _Lcd_Print_String
                     _Lcd_Set_Cursor
 ---------------------------------------------------------------------------------
 (4) _Lcd_Set_Cursor                                       5     4      1    2615
                                              3 BANK0      5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (4) _Lcd_Print_String                                     6     4      2    9790
                                              8 BANK0      6     4      2
                     _Lcd_Print_Char
                            ___lbmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _Lcd_Print_Char                                       7     7      0     390
                                              1 BANK0      7     7      0
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (1) _initializeSaveSlotsOnce                              1     1      0    6401
                                             84 BANK0      1     1      0
                           _Busy_eep
                         _Read_b_eep
                        _Write_b_eep
                       _saveToEEPROM
 ---------------------------------------------------------------------------------
 (4) _saveToEEPROM                                        80    80      0    4465
                                              4 BANK0     80    80      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (4) _Write_b_eep                                          4     1      3    1390
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (4) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2     512
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initializeMenuArray                                  3     3      0    7596
                                              6 BANK0      3     3      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    7432
                                              0 BANK0      6     2      4
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _displayTest                                          2     2      0    2989
                                              6 BANK0      2     2      0
                             _strcpy
 ---------------------------------------------------------------------------------
 (6) _strcpy                                               6     2      4    2989
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Start                                            3     3      0     347
                                              3 BANK0      3     3      0
                            _Lcd_Cmd
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (5) _Lcd_Cmd                                              2     2      0     155
                                              1 BANK0      2     2      0
                         _Lcd_SetBit
 ---------------------------------------------------------------------------------
 (6) _Lcd_SetBit                                           1     1      0     124
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (16) _ISR                                                24    24      0   46933
                                             11 COMRAM    24    24      0
                            ___lbmod
                            _display
                _encoderInputsBuxton
                       _playArpeggio
 ---------------------------------------------------------------------------------
 (17) _playArpeggio                                        6     6      0   44476
                                              5 COMRAM     6     6      0
                            ___awmod
                            _noteOff
                             _noteOn
                               _rand
                     _random_pitches
       _random_pitches_non_repeating
                       _sort_pitches
 ---------------------------------------------------------------------------------
 (18) _sort_pitches                                        5     5      0     380
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 (18) _random_pitches_non_repeating                        3     3      0    1157
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (18) _random_pitches                                      2     2      0    1061
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (19) _rand                                                0     0      0     214
                             ___lmul
 ---------------------------------------------------------------------------------
 (20) ___lmul                                             12     4      8     214
 ---------------------------------------------------------------------------------
 (18) _noteOn                                              3     0      3   27168
                            _noteOff
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (19) _noteOff                                             3     0      3   13751
                            _sendOut
                            _sendUSB
 ---------------------------------------------------------------------------------
 (19) _sendUSB                                             8     5      3     584
 ---------------------------------------------------------------------------------
 (19) _sendOut                                             8     5      3     599
 ---------------------------------------------------------------------------------
 (17) _encoderInputsBuxton                                 6     6      0      69
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (17) _display                                             0     0      0    1584
                      _displayDigits
                      _displayString
 ---------------------------------------------------------------------------------
 (18) _displayString                                       2     2      0     134
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (18) _displayDigits                                       5     5      0    1450
                                              0 COMRAM     5     5      0
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (19) ___awmod                                             6     2      4     745
 ---------------------------------------------------------------------------------
 (19) ___awdiv                                             8     4      4     575
 ---------------------------------------------------------------------------------
 (17) ___lbmod                                             4     2      2     804
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 20
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Initialize
   _Lcd_Start
     _Lcd_Cmd
       _Lcd_SetBit
     _Lcd_SetBit
   _Read_b_eep
   _analogInputs
     _readPotentiometers
       _ADC_Read
       ___fladd
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul
         ___xxtofl (ARG)
       ___flneg
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___fladd (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _map
         ___aldiv
           ___lmul (ARG)
         ___lmul
       _processPotentiometers
         _controlChange
           ___lbmod
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _sendOut
           _sendUSB
         _pitchBend
           ___lbmod
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _sendOut
           _sendUSB
   _calculate_alpha
     ___fldiv
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___xxtofl
   _calculate_pulse_length
     ___fladd
       ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___flneg (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___fldiv
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___flmul
       ___xxtofl (ARG)
     ___flneg
       ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___fltol
       ___fladd (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___flneg (ARG)
         ___fldiv (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___xxtofl
   _digitalInputs
     _buttonInputsSerial
       _clock
       _load
     _keyboardTranspose
       _key_press_release_note_off
         _noteOff
           _sendOut
           _sendUSB
       _printThisNumber
       _wait_one_pulse
     _processDrumpad
       _controlChange
         ___lbmod
         _key_press_release_note_off
           _noteOff
             _sendOut
             _sendUSB
         _sendOut
         _sendUSB
       _noteOffDrum
         _sendOut
         _sendUSB
       _noteOnDrum
         _noteOff
           _sendOut
           _sendUSB
         _sendOut
         _sendUSB
     _processKeyboard
       _keyboard_all_note_efficient
         _playThisNote
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _playSeventh
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playTriad
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _wait_one_pulse
       _keyboard_eight_note_efficient
         _playThisNote8
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _playDiatonicSeventhMajor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicSeventhMinor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicTriadMajor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicTriadMinor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _wait_one_pulse
       _keyboard_sharps_only_efficient
         _playThisNotePentatonic
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _wait_one_pulse
     _processOctave
       ___awmod
       ___wmul
         ___lbmod (ARG)
       _doTheLatch
         _strcpy
       _doTheUnLatch
         _playThisNote
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _playSeventh
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playTriad
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _wait_one_pulse
         _playThisNote8
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _playDiatonicSeventhMajor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicSeventhMinor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicTriadMajor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _playDiatonicTriadMinor
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _wait_one_pulse
         _playThisNotePentatonic
           _add_notes_to_arpeggio
             _rotateArrayLeft
           _delete_notes_from_arpeggio
             _findArrayIndex
             _rotateArrayLeft
           _finish_arpeggio_setup
             _resetArpeggio
             _setupArpeggio
               _copy_array
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
           _key_press_release_note_off
             _noteOff
               _sendOut
               _sendUSB
           _noteOff
             _sendOut
             _sendUSB
           _noteOn
             _noteOff
               _sendOut
               _sendUSB
             _sendOut
             _sendUSB
           _wait_one_pulse
         _strcpy
       _key_press_release_note_off
         _noteOff
           _sendOut
           _sendUSB
       _printThisNumber
       _random_pitches
         ___awmod
         _rand
           ___lmul
       _random_pitches_non_repeating
         ___awmod
         _rand
           ___lmul
       _resetArpeggio
       _strcpy
       _wait_one_pulse
   _displayTest
     _strcpy
   _initializeMenuArray
     ___wmul
       ___lbmod (ARG)
   _initializeSaveSlotsOnce
     _Busy_eep
     _Read_b_eep
     _Write_b_eep
     _saveToEEPROM
       _Busy_eep
       _Write_b_eep
   _menu_lcd
     _Function_A
       _Function_A_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_A_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_A_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_B
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_C
       _Function_C_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_C_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_C_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_D
       _Function_D_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _setControllerResolution
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_D_2
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _Write_b_eep
         _calculate_alpha
           ___fldiv
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_D_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _setControllerNumbers
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _int2string
             ___awdiv
             ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_D_4
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _setControllerNumbers
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _int2string
             ___awdiv
             ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_D_5
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _setControllerNumbers
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _int2string
             ___awdiv
             ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_E
       _Function_E_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_E_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_F
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       _Lcd_Set_Cursor
         _Lcd_Cmd
           _Lcd_SetBit
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _int2string
         ___awdiv
         ___awmod
       _programChange
         ___lbmod
         _key_press_release_note_off
           _noteOff
             _sendOut
             _sendUSB
         _sendOut
         _sendUSB
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_G
       _Function_G_1
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _eepromExit
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _exitSave
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _saveToEEPROM
           _Busy_eep
           _Write_b_eep
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_G_2
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _eepromExit
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _exitLoad
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _loadFromEEPROM
           _Read_b_eep
           _calculate_pulse_length
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fldiv
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_G_3
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
       _Function_G_4
         _Busy_eep
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Write_b_eep
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _exitFunction
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _eepromExit
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Function_H
       _Function_H_1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _doTheUnLatch
           _playThisNote
             _add_notes_to_arpeggio
               _rotateArrayLeft
             _delete_notes_from_arpeggio
               _findArrayIndex
               _rotateArrayLeft
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _playSeventh
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _playTriad
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _wait_one_pulse
           _playThisNote8
             _add_notes_to_arpeggio
               _rotateArrayLeft
             _delete_notes_from_arpeggio
               _findArrayIndex
               _rotateArrayLeft
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _playDiatonicSeventhMajor
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _playDiatonicSeventhMinor
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _playDiatonicTriadMajor
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _playDiatonicTriadMinor
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _wait_one_pulse
           _playThisNotePentatonic
             _add_notes_to_arpeggio
               _rotateArrayLeft
             _delete_notes_from_arpeggio
               _findArrayIndex
               _rotateArrayLeft
             _finish_arpeggio_setup
               _resetArpeggio
               _setupArpeggio
                 _copy_array
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _noteOff
               _sendOut
               _sendUSB
             _noteOn
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
             _wait_one_pulse
           _strcpy
         _strcpy
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _calculate_pulse_length
           ___fladd
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___fldiv
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul
             ___xxtofl (ARG)
           ___flneg
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___fltol
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_3
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _int2string
           ___awdiv
           ___awmod
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_4
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _setupArpeggio
           _copy_array
           _random_pitches
             ___awmod
             _rand
               ___lmul
           _random_pitches_non_repeating
             ___awmod
             _rand
               ___lmul
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_5
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_6
         _Function_H_6_1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _doTheLatch
             _strcpy
           _doTheUnLatch
             _playThisNote
               _add_notes_to_arpeggio
                 _rotateArrayLeft
               _delete_notes_from_arpeggio
                 _findArrayIndex
                 _rotateArrayLeft
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _playSeventh
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _playTriad
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _wait_one_pulse
             _playThisNote8
               _add_notes_to_arpeggio
                 _rotateArrayLeft
               _delete_notes_from_arpeggio
                 _findArrayIndex
                 _rotateArrayLeft
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _playDiatonicSeventhMajor
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _playDiatonicSeventhMinor
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _playDiatonicTriadMajor
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _playDiatonicTriadMinor
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _wait_one_pulse
             _playThisNotePentatonic
               _add_notes_to_arpeggio
                 _rotateArrayLeft
               _delete_notes_from_arpeggio
                 _findArrayIndex
                 _rotateArrayLeft
               _finish_arpeggio_setup
                 _resetArpeggio
                 _setupArpeggio
                   _copy_array
                   _random_pitches
                     ___awmod
                     _rand
                       ___lmul
                   _random_pitches_non_repeating
                     ___awmod
                     _rand
                       ___lmul
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _noteOff
                 _sendOut
                 _sendUSB
               _noteOn
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
               _wait_one_pulse
             _strcpy
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Function_H_6_2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _strcpy
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_7
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _strcpy
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_8
         _Function_H_8_1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Function_H_8_2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Function_H_9
         _Function_H_9_1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Function_H_9_2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Function_H_9_3
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Function_H_9_4
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           ___lbmod
           ___wmul
             ___lbmod (ARG)
           _clear_row1
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _clear_row2
             _Lcd_Print_String
               _Lcd_Print_Char
                 _Lcd_SetBit
               ___lbmod (ARG)
               ___wmul (ARG)
                 ___lbmod (ARG)
             _Lcd_Set_Cursor
               _Lcd_Cmd
                 _Lcd_SetBit
           _un_block_code
             _analogInputs
               _readPotentiometers
                 _ADC_Read
                 ___fladd
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul
                   ___xxtofl (ARG)
                 ___flneg
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fltol
                   ___fladd (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___flneg (ARG)
                       ___fldiv (ARG)
                         ___flmul (ARG)
                           ___xxtofl (ARG)
                         ___xxtofl (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl
                 _map
                   ___aldiv
                     ___lmul (ARG)
                   ___lmul
                 _processPotentiometers
                   _controlChange
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
                   _pitchBend
                     ___lbmod
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _sendOut
                     _sendUSB
             _digitalInputs
               _buttonInputsSerial
                 _clock
                 _load
               _keyboardTranspose
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _wait_one_pulse
               _processDrumpad
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _noteOffDrum
                   _sendOut
                   _sendUSB
                 _noteOnDrum
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
               _processKeyboard
                 _keyboard_all_note_efficient
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_eight_note_efficient
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                 _keyboard_sharps_only_efficient
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
               _processOctave
                 ___awmod
                 ___wmul
                   ___lbmod (ARG)
                 _doTheLatch
                   _strcpy
                 _doTheUnLatch
                   _playThisNote
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playSeventh
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playTriad
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNote8
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _playDiatonicSeventhMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicSeventhMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMajor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _playDiatonicTriadMinor
                       _finish_arpeggio_setup
                         _resetArpeggio
                         _setupArpeggio
                           _copy_array
                           _random_pitches
                             ___awmod
                             _rand
                               ___lmul
                           _random_pitches_non_repeating
                             ___awmod
                             _rand
                               ___lmul
                       _key_press_release_note_off
                         _noteOff
                           _sendOut
                           _sendUSB
                       _noteOff
                         _sendOut
                         _sendUSB
                       _noteOn
                         _noteOff
                           _sendOut
                           _sendUSB
                         _sendOut
                         _sendUSB
                       _wait_one_pulse
                     _wait_one_pulse
                   _playThisNotePentatonic
                     _add_notes_to_arpeggio
                       _rotateArrayLeft
                     _delete_notes_from_arpeggio
                       _findArrayIndex
                       _rotateArrayLeft
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _strcpy
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _printThisNumber
                 _random_pitches
                   ___awmod
                   _rand
                     ___lmul
                 _random_pitches_non_repeating
                   ___awmod
                   _rand
                     ___lmul
                 _resetArpeggio
                 _strcpy
                 _wait_one_pulse
             _processEncoderBuxton
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         ___lbmod
         ___wmul
           ___lbmod (ARG)
         _clear_row1
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _clear_row2
           _Lcd_Print_String
             _Lcd_Print_Char
               _Lcd_SetBit
             ___lbmod (ARG)
             ___wmul (ARG)
               ___lbmod (ARG)
           _Lcd_Set_Cursor
             _Lcd_Cmd
               _Lcd_SetBit
         _un_block_code
           _analogInputs
             _readPotentiometers
               _ADC_Read
               ___fladd
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul
                 ___xxtofl (ARG)
               ___flneg
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fltol
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___fldiv (ARG)
                       ___flmul (ARG)
                         ___xxtofl (ARG)
                       ___xxtofl (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl
               _map
                 ___aldiv
                   ___lmul (ARG)
                 ___lmul
               _processPotentiometers
                 _controlChange
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
                 _pitchBend
                   ___lbmod
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _sendOut
                   _sendUSB
           _digitalInputs
             _buttonInputsSerial
               _clock
               _load
             _keyboardTranspose
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _wait_one_pulse
             _processDrumpad
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _noteOffDrum
                 _sendOut
                 _sendUSB
               _noteOnDrum
                 _noteOff
                   _sendOut
                   _sendUSB
                 _sendOut
                 _sendUSB
             _processKeyboard
               _keyboard_all_note_efficient
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_eight_note_efficient
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
               _keyboard_sharps_only_efficient
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
             _processOctave
               ___awmod
               ___wmul
                 ___lbmod (ARG)
               _doTheLatch
                 _strcpy
               _doTheUnLatch
                 _playThisNote
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playSeventh
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playTriad
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNote8
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _playDiatonicSeventhMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicSeventhMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMajor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _playDiatonicTriadMinor
                     _finish_arpeggio_setup
                       _resetArpeggio
                       _setupArpeggio
                         _copy_array
                         _random_pitches
                           ___awmod
                           _rand
                             ___lmul
                         _random_pitches_non_repeating
                           ___awmod
                           _rand
                             ___lmul
                     _key_press_release_note_off
                       _noteOff
                         _sendOut
                         _sendUSB
                     _noteOff
                       _sendOut
                       _sendUSB
                     _noteOn
                       _noteOff
                         _sendOut
                         _sendUSB
                       _sendOut
                       _sendUSB
                     _wait_one_pulse
                   _wait_one_pulse
                 _playThisNotePentatonic
                   _add_notes_to_arpeggio
                     _rotateArrayLeft
                   _delete_notes_from_arpeggio
                     _findArrayIndex
                     _rotateArrayLeft
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _strcpy
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _printThisNumber
               _random_pitches
                 ___awmod
                 _rand
                   ___lmul
               _random_pitches_non_repeating
                 ___awmod
                 _rand
                   ___lmul
               _resetArpeggio
               _strcpy
               _wait_one_pulse
           _processEncoderBuxton
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       ___lbmod
       ___wmul
         ___lbmod (ARG)
       _clear_row2
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
       _un_block_code
         _analogInputs
           _readPotentiometers
             _ADC_Read
             ___fladd
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul
               ___xxtofl (ARG)
             ___flneg
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___fldiv (ARG)
                     ___flmul (ARG)
                       ___xxtofl (ARG)
                     ___xxtofl (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _map
               ___aldiv
                 ___lmul (ARG)
               ___lmul
             _processPotentiometers
               _controlChange
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
               _pitchBend
                 ___lbmod
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _sendOut
                 _sendUSB
         _digitalInputs
           _buttonInputsSerial
             _clock
             _load
           _keyboardTranspose
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _wait_one_pulse
           _processDrumpad
             _controlChange
               ___lbmod
               _key_press_release_note_off
                 _noteOff
                   _sendOut
                   _sendUSB
               _sendOut
               _sendUSB
             _noteOffDrum
               _sendOut
               _sendUSB
             _noteOnDrum
               _noteOff
                 _sendOut
                 _sendUSB
               _sendOut
               _sendUSB
           _processKeyboard
             _keyboard_all_note_efficient
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_eight_note_efficient
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
             _keyboard_sharps_only_efficient
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
           _processOctave
             ___awmod
             ___wmul
               ___lbmod (ARG)
             _doTheLatch
               _strcpy
             _doTheUnLatch
               _playThisNote
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playSeventh
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playTriad
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNote8
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _playDiatonicSeventhMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicSeventhMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMajor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _playDiatonicTriadMinor
                   _finish_arpeggio_setup
                     _resetArpeggio
                     _setupArpeggio
                       _copy_array
                       _random_pitches
                         ___awmod
                         _rand
                           ___lmul
                       _random_pitches_non_repeating
                         ___awmod
                         _rand
                           ___lmul
                   _key_press_release_note_off
                     _noteOff
                       _sendOut
                       _sendUSB
                   _noteOff
                     _sendOut
                     _sendUSB
                   _noteOn
                     _noteOff
                       _sendOut
                       _sendUSB
                     _sendOut
                     _sendUSB
                   _wait_one_pulse
                 _wait_one_pulse
               _playThisNotePentatonic
                 _add_notes_to_arpeggio
                   _rotateArrayLeft
                 _delete_notes_from_arpeggio
                   _findArrayIndex
                   _rotateArrayLeft
                 _finish_arpeggio_setup
                   _resetArpeggio
                   _setupArpeggio
                     _copy_array
                     _random_pitches
                       ___awmod
                       _rand
                         ___lmul
                     _random_pitches_non_repeating
                       ___awmod
                       _rand
                         ___lmul
                 _key_press_release_note_off
                   _noteOff
                     _sendOut
                     _sendUSB
                 _noteOff
                   _sendOut
                   _sendUSB
                 _noteOn
                   _noteOff
                     _sendOut
                     _sendUSB
                   _sendOut
                   _sendUSB
                 _wait_one_pulse
               _strcpy
             _key_press_release_note_off
               _noteOff
                 _sendOut
                 _sendUSB
             _printThisNumber
             _random_pitches
               ___awmod
               _rand
                 ___lmul
             _random_pitches_non_repeating
               ___awmod
               _rand
                 ___lmul
             _resetArpeggio
             _strcpy
             _wait_one_pulse
         _processEncoderBuxton
     _Lcd_Clear
       _Lcd_Cmd
         _Lcd_SetBit
     _Lcd_Print_String
       _Lcd_Print_Char
         _Lcd_SetBit
       ___lbmod (ARG)
       ___wmul (ARG)
         ___lbmod (ARG)
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_SetBit
     ___lbmod
     ___wmul
       ___lbmod (ARG)
     _exitFunction
       _Lcd_Print_String
         _Lcd_Print_Char
           _Lcd_SetBit
         ___lbmod (ARG)
         ___wmul (ARG)
           ___lbmod (ARG)
       _clear_row1
         _Lcd_Print_String
           _Lcd_Print_Char
             _Lcd_SetBit
           ___lbmod (ARG)
           ___wmul (ARG)
             ___lbmod (ARG)
         _Lcd_Set_Cursor
           _Lcd_Cmd
             _Lcd_SetBit
   _panic_button
     _controlChange
       ___lbmod
       _key_press_release_note_off
         _noteOff
           _sendOut
           _sendUSB
       _sendOut
       _sendUSB
   _processEncoderBuxton
   _selectSlotOnBoot
     _Read_b_eep
     _loadFromEEPROM
       _Read_b_eep
       _calculate_pulse_length
         ___fladd
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fldiv
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flmul
           ___xxtofl (ARG)
         ___flneg
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___fladd (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___fldiv (ARG)
                 ___flmul (ARG)
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___fldiv (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___fldiv (ARG)
               ___flmul (ARG)
                 ___xxtofl (ARG)
               ___xxtofl (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___xxtofl
   _setup
   _srand

 _ISR (ROOT)
   ___lbmod
   _display
     _displayDigits
       ___awdiv
       ___awmod
     _displayString
   _encoderInputsBuxton
   _playArpeggio
     ___awmod
     _noteOff
       _sendOut
       _sendUSB
     _noteOn
       _noteOff
         _sendOut
         _sendUSB
       _sendOut
       _sendUSB
     _rand
       ___lmul
     _random_pitches
       ___awmod
       _rand
         ___lmul
     _random_pitches_non_repeating
       ___awmod
       _rand
         ___lmul
     _sort_pitches

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             CFF      0       0      31        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      89      11       53.5%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      E8       9       90.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100     51     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6D      A0       5      100.0%
BITCOMRAM           53      0       7       0        8.4%
COMRAM              53     23      46       1       84.3%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0      25       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     357      20        0.0%
DATA                 0      0     37C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Feb 24 19:21:02 2024

                   _arpeggiatorAutoLatchOnOffMenu 0120                           playThisNote8@temp_pitch 0077  
                       ?_playDiatonicSeventhMinor 0061                           _readPotentiometers$5910 0199  
                                    ___fldiv@aexp 009F                                      ___fldiv@bexp 009E  
                              _RESET_ON_KEY_PRESS 0024                                      ___fldiv@sign 0093  
                                    ?_displayTest 0007                                                l23 9838  
                                              l24 983A                                                l40 9148  
                                              l25 9842                                                l26 9844  
                                              l42 9172                                                l27 984C  
                                              l51 8626                                                l28 984E  
                                              l52 863E                                                l29 9856  
                                              l53 865C                                                l46 83F6  
                                              l54 8674                                                l58 85BC  
                                              l59 8582                                                l94 9746  
                   __size_of_processEncoderBuxton 0A28                               ___wmul@multiplicand 0062  
                                     __CFG_BORV$3 000000                                    ?_programChange 0060  
                                 _GLOBAL_CC_VALUE 0181                   __size_of_playDiatonicTriadMajor 0190  
                                    __CFG_CP0$OFF 000000                                      __CFG_CP1$OFF 000000  
                                    __CFG_CP2$OFF 000000                                      __CFG_CP3$OFF 000000  
                                     __CFG_OSC$HS 000000                   __size_of_playDiatonicTriadMinor 0262  
                        _LAST_NOTE_MODE_KEY_PRESS 001B                           playDiatonicTriadMajor@i 0066  
                            __end_of_doTheUnLatch 53D2                                               l500 9514  
                                             l504 94CC                                               l466 6DEA  
                                             l491 92B2                                               l484 8C88  
                                             l901 047A                                               l911 0564  
                                             l903 048C                                               l496 924E  
                                             l920 0616                                               l913 059E  
                                             l905 049E                                               l930 0720  
                                             l922 065C                                               l914 05AC  
                                             l931 072E                                               l907 04E4  
                                             l940 07BC                                               l924 06A2  
                                             l916 05BE                                               l933 0768  
                                             l925 06B0                                               l909 052A  
                                             l950 080C                                               l942 07CC  
                                             l934 0776                                               l926 06BE  
                                             l918 05D0                                               l935 0784  
                                             l927 06CC                                               l871 00F8  
                                             l960 085C                                               l952 081C  
                                             l944 07DC                                               l936 0792  
                                             l937 07A0                                               l929 0712  
                                             l881 0256                                               l873 013E  
                                             l970 08B0                                               l962 086C  
                                             l954 082C                                               l946 07EC  
                                             l891 03B4                                               l883 029C  
                                             l875 0184                                               l867 006C  
                                             l980 08F8                                               l972 08BC  
                                             l964 087C                                               l956 083C  
                                             l948 07FC                                               l893 03C8  
                                             l885 02E2                                               l877 01CA  
                                             l869 00B2                                               l982 0908  
                                             l974 08CC                                               l966 0890  
                                             l958 084C                                               l991 095A  
                                             l895 03DC                                               l887 0328  
                                             l879 0210                                               l984 0918  
                                             l976 08DC                                               l968 08A4  
                                             l993 096A                                               l897 0422  
                                             l889 036E                                               l986 0928  
                                             l978 08EC                                               l995 097A  
                                             l987 0936                                               l899 0468  
                                             _GIE 007F97                              _RESET_ON_KEY_RELEASE 0023  
                                             l997 098A                                               l989 0948  
                                             _BPM 00FF                                               l998 0998  
                                             l999 09A6                                      __CFG_CPB$OFF 000000  
                                             _RB0 007C08                                               _RB1 007C09  
                                             _RB2 007C0A                                               _RC0 007C10  
                                             _RA5 007C05                                               _RC1 007C11  
                                             _RB4 007C0C                                               _RC2 007C12  
                                             _RB5 007C0D                                               _RC3 007C13  
                                             _RE0 007C20                                               _RC4 007C14  
                                             _RE1 007C21                                               _RC5 007C15  
                                             _RD4 007C1C                                               _RE2 007C22  
                                             _RD5 007C1D                                               _RD6 007C1E  
                                             _RD7 007C1F                                      __CFG_CPD$OFF 000000  
                                             _ISR 0008                                               _PSA 007EAB  
                                             _map 6746                           playDiatonicTriadMinor@i 0067  
                            __size_of_Write_b_eep 0042                                               prod 000FF3  
                                             wreg 000FE8                                    ?_displayDigits 0007  
                                _GLOBAL_CC_NUMBER 0182                                  ??_wait_one_pulse 0060  
                                    ___flmul@aexp 007B                                      ___flmul@bexp 0080  
                  __end_of_playThisNotePentatonic 5716                                      ___flmul@sign 007A  
                                    ___flmul@temp 0085                                      ___flmul@prod 0081  
                        loadFromEEPROM@slotNumber 01E6                                      __CFG_LVP$OFF 000000  
                                            ?_ISR 0007                       _potentiometer_filtered_last 0200  
                                    ___fltol@exp1 00C1                                      __CFG_WDT$OFF 000000  
                                            l1000 09B4                                              l1010 0A28  
                                            l1002 09C4                                              l1011 0A36  
                                            l1003 09D2                                    ?_displayString 0007  
                                            l1004 09E0                                              l1006 09F0  
                                            l1007 09FE                                              l1008 0A0C  
                                            l1009 0A1A                                              l1410 5654  
                                            l1411 5672                                              l1500 59F2  
                                            l1420 5700                                              l1412 56A8  
                                            l1404 55B0                                              l1421 570E  
                                            l1413 5696                                              l1405 55D8  
                                            l1502 5A16                                              l1430 3FF2  
                                            l1503 5A1E                                              l1511 6870  
                                            l1407 5608                                              l1431 4014  
                                            l2400 2518                                              l1504 5A32  
                                            l1520 68E4                                              l1512 6886  
                                            l1408 5630                                              l1440 4146  
                                            l1432 4036                                              l2401 252E  
                                            l1601 2944                                              l1417 56CC  
                                            l1441 4168                                              l1433 4058  
                                            l1425 3F48                                              l2410 25F0  
                                            l2402 2548                                              l1450 5C10  
                                            l1522 6910                                              l1514 68C2  
                                            l1530 1DF8                                              l1610 2A76  
                                            l1602 2978                                              l1442 418A  
                                            l1434 407A                                              l1426 3F6A  
                                            l2411 2606                                              l2403 2562  
                                            l1451 5BDA                                              l1523 6918  
                                            l1515 68AE                                              l1531 1E12  
                                            l1611 2AAE                                              l1419 56F8  
                                            l1443 41AC                                              l1435 409C  
                                            l1427 3F8C                                              l2412 2620  
                                            l2404 25D0                                              l1452 5BE2  
                                            l1524 6926                                              l1540 1EFC  
                                            l1532 1E2C                                              l1620 2B1C  
                                            l1612 2AFA                                              l1604 29C2  
                                            l1436 40BE                                              l1428 3FAE  
                                            l2421 26C2                                              l2413 263A  
                                            l2405 2584                                              l1461 5CE4  
                                            l1453 5BEA                                              l1525 693E  
                                            l1541 1F16                                              l1533 1E46  
                                            l1701 487C                                              l1613 2AD2  
                                            l1605 2A06                                              l1437 40E0  
                                            l1429 3FD0                                              l2430 275E  
                                            l2422 26D8                                              l2406 259A  
                                            l1462 5C9C                                              l1550 2000  
                                            l1542 1F30                                              l1534 1E60  
                                            l1710 495E                                              l1630 2BBE  
                                            l1622 2B3A                                              l1438 4102  
                                            l2431 2774                                              l2415 265A  
                                            l2407 25B4                                              l1471 5D2A  
                                            l1519 692E                                              l1551 201A  
                                            l1543 1F4A                                              l1535 1E7A  
                                            l1711 4966                                              l1703 48A8  
                                            l1615 2AF0                                              l1607 2A28  
                                            l1439 4124                                              l2424 26F6  
                                            l2416 2670                                              l2408 25CE  
                                            l1480 58FC                                              l1472 5D32  
                                            l1464 5CAA                                              l1456 5C20  
                                            l1448 5BF4                                              l1560 2104  
                                            l1552 2034                                              l1544 1F64  
                                            l1536 1E94                                              l1712 497A  
                                            l1704 4904                                              l1608 2A46  
                                            l2433 2792                                              l2425 270C  
                                            l2409 263C                                              l1481 58B8  
                                            l1473 5D46                                              l1449 5BD0  
                                            l1561 211E                                              l1553 204E  
                                            l1545 1F7E                                              l1537 1EAE  
                                            l1529 1DDE                                              l1721 49C4  
                                            l1625 2B5E                                              l2434 27A8  
                                            l2418 268E                                              l1490 595A  
                                            l1482 58C0                                              l1458 5C46  
                                            l1570 2208                                              l1562 2138  
                                            l1554 2068                                              l1546 1F98  
                                            l1538 1EC8                                              l1730 4ADE  
                                            l1722 49EC                                              l1626 2B66  
                                            l5010 931A                                              l2427 272A  
                                            l2419 26A4                                              l1483 58C8  
                                            l1459 5C6E                                              l1571 2222  
                                            l1563 2152                                              l1555 2082  
                                            l1547 1FB2                                              l1539 1EE2  
                                            l1651 5B0E                                              l1643 5A50  
                                            l1635 2BD8                                              l1619 2BC4  
                                            l1627 2B8A                                              l4052 0A4A  
                                            l5004 93DA                                              l2436 27C8  
                                            l2428 2740                                              l2380 2368  
                                            l1492 59D0                                              l1484 58D0  
                                            l1572 223C                                              l1564 216C  
                                            l1556 209C                                              l1548 1FCC  
                                            l1740 4BDA                                              l1732 4B0A  
                                            l1724 4A4A                                              l1708 493A  
                                            l1636 2BEC                                              l3500 1C2E  
                                            l4061 0C36                                              l2381 237E  
                                            l1493 5988                                              l1469 5D06  
                                            l1573 2256                                              l1565 2186  
                                            l1557 20B6                                              l1549 1FE6  
                                            l1733 4B66                                              l1725 4AA2  
                                            l1645 5A90                                              l1637 2C00  
                                            l4062 1176                                              l4070 0E60  
                                            l4054 0A9A                                              l2390 2440  
                                            l2382 2398                                              l2374 2348  
                                            l1478 58DA                                              l1574 2270  
                                            l1566 21A0                                              l1558 20D0  
                                            l1718 4998                                              l1646 5AD2  
                                            l1582 2824                                              l1590 281A  
                                            l1750 2CC2                                              l3510 1D7E  
                                            l3502 1C6C                                              l4055 0AAC  
                                            l2391 2456                                              l2383 23B2  
                                            l2375 22FC                                              l1495 5996  
                                            l1487 590C                                              l1479 58AE  
                                            l1575 228A                                              l1567 21BA  
                                            l1559 20EA                                              l1671 583E  
                                            l1727 4B78                                              l1655 5B82  
                                            l1583 27E8                                              l1751 2CE4  
                                            l2392 2470                                              l2384 2420  
                                            l2376 2312                                              l1576 22A4  
                                            l1568 21D4                                              l1672 57DC  
                                            l1736 4B9A                                              l1728 4AD0  
                                            l1648 5B60                                              l1584 2852  
                                            l1760 2E16                                              l1752 2D06  
                                            l3600 74BA                                              l3512 1DBC  
                                            l3504 1D04                                              l4073 0FB0  
                                            l4065 0D2A                                              l4057 0BFA  
                                            l2393 248A                                              l2385 23D4  
                                            l2377 232C                                              l1489 5932  
                                            l1577 22BE                                              l1569 21EE  
                                            l1681 5884                                              l1657 5BA6  
                                            l1649 5B00                                              l1585 27F2  
                                            l1761 2E38                                              l1753 2D28  
                                            l3450 4E2A                                              l4074 0FEC  
                                            l2394 24F8                                              l2386 23EA  
                                            l2378 2346                                              l1682 588C  
                                            l1674 57EA                                              l1666 572C  
                                            l1738 4BBE                                              l1658 5BAE  
                                            l1594 2882                                              l1586 27FA  
                                            l1770 2F6A                                              l1762 2E5A  
                                            l1754 2D4A                                              l1746 2C3A  
                                            l3610 88FA                                              l4091 4438  
                                            l2395 24AC                                              l2387 2404  
                                            l2379 23B4                                              l1683 58A0  
                                            l1739 4BC6                                              l1659 5BC2  
                                            l1595 28AA                                              l1587 2802  
                                            l1771 2F8C                                              l1763 2E7C  
                                            l1755 2D6C                                              l1747 2C5C  
                                            l4084 4264                                              l4076 1100  
                                            l2820 4550                                              l2812 4492  
                                            l2396 24C2                                              l2388 241E  
                                            l1668 576C                                              l1692 4762  
                                            l1588 280A                                              l1772 2FAE  
                                            l1764 2E9E                                              l1756 2D8E  
                                            l1748 2C7E                                              l3508 1D40  
                                            l3700 8858                                              l5052 6C32  
                                            l6101 339C                                              l4085 4298  
                                            l4077 1138                                              l4069 0DC6  
                                            l2821 4568                                              l2813 44AA  
                                            l2397 24DC                                              l2389 248C  
                                            l1669 57AE                                              l1693 478A  
                                            l1597 28DA                                              l1589 2812  
                                            l1773 2FD0                                              l1765 2EC0  
                                            l1757 2DB0                                              l1749 2CA0  
                                            l3701 87FE                                              l3541 6F5C  
                                            l6110 3404                                              l6102 3398  
                                            l4086 42D6                                              l4078 114C  
                                            l2830 463C                                              l2822 4580  
                                            l2814 44C2                                              l2398 24F6  
                                            l1598 2902                                              l1774 2FF2  
                                            l1766 2EE2                                              l1758 2DD2  
                                            l2910 39A4                                              l2902 38C0  
                                            l3470 9868                                              l3702 8856  
                                            l3550 6F96                                              l5046 6C1A  
                                            l4087 4316                                              l4079 119A  
                                            l2831 4654                                              l2823 4596  
                                            l2815 44DA                                              l2399 2564  
                                            l1679 5860                                              l1695 47E8  
                                            l1767 2F04                                              l1759 2DF4  
                                            l2903 38EC                                              l3463 76AE  
                                            l3631 632E                                              l3543 6FB0  
                                            l3551 6FA0                                              l6120 34E0  
                                            l2840 46FC                                              l2832 466C  
                                            l2824 45AE                                              l2816 44F2  
                                            l1696 4840                                              l1768 2F26  
                                            l3616 7BD8                                              l3464 76B8  
                                            l3720 938E                                              l3552 6FAA  
                                            l3544 6F64                                              l3449 4EA2  
                                            l6113 34BC                                              l4089 43E8  
                                            l2841 470A                                              l2833 4684  
                                            l2825 45C6                                              l2817 450A  
                                            l1689 4736                                              l1769 2F48  
                                            l3609 895C                                              l3617 7B7E  
                                            l3465 76C0                                              l3633 6372  
                                            l3721 93C4                                              l5049 6C2C  
                                            l6114 349A                                              l6106 33E4  
                                            l6210 32B0                                              l2834 469C  
                                            l2826 45DE                                              l2818 4522  
                                            l1698 4918                                              l2906 3964  
                                            l3562 7196                                              l3618 7BD6  
                                            l3634 636C                                              l3626 631C  
                                            l3490 1AC0                                              l3482 1952  
                                            l3810 71B0                                              l3546 6F6E  
                                            l6123 3504                                              l6115 34A8  
                                            l6107 33E0                                              l6203 3278  
                                            l2835 46B4                                              l2827 45F6  
                                            l2819 453A                                              l1699 486E  
                                            l3563 70DA                                              l3635 63AA  
                                            l3627 62C2                                              l3651 6238  
                                            l3707 830A                                              l3547 6F78  
                                            l6220 97DC                                              l6132 35D6  
                                            l6124 3508                                              l6116 34AC  
                                            l6212 32F4                                              l6204 325A  
                                            l2836 46C8                                              l2828 460C  
                                            l2860 52B4                                              l3636 63A4  
                                            l3628 631A                                              l3652 6232  
                                            l3644 61E2                                              l3660 81F2  
                                            l3492 1B16                                              l3484 19A8  
                                            l3708 82C2                                              l3812 71EC  
                                            l3820 8D7C                                              l3900 8A3C  
                                            l3548 6F82                                              l6221 97D2  
                                            l6141 3616                                              l6109 3440  
                                            l6213 3312                                              l2829 4624  
                                            l2909 3978                                              l3573 7418  
                                            l3637 63EA                                              l3653 6270  
                                            l3645 6188                                              l3661 81AA  
                                            l3485 1B1C                                              l3709 8308  
                                            l3733 8E98                                              l3813 7220  
                                            l3821 8D96                                              l3549 6F8C  
                                            l6150 368C                                              l6134 35EC  
                                            l6230 60AA                                              l5430 98AA  
                                            l2838 46EC                                              l2870 5366  
                                            l2854 525E                                              l3566 7134  
                                            l3574 735C                                              l3654 626A  
                                            l3646 61E0                                              l3662 81F0  
                                            l3494 1BB4                                              l3478 18B2  
                                            l3726 9376                                              l3734 8E50  
                                            l3750 7F8E                                              l3822 8DC4  
                                            l3830 9046                                   ??_un_block_code 00C7  
                                            ?_map 006E                                              l6127 35A2  
                                            l6119 351A                                              l6215 3336  
                                            l6231 609E                                              l2871 539C  
                                            l2863 52FA                                              l3567 717C  
                                            l3655 62B0                                              l3487 1A0C  
                                            l3479 19AE                                              l3719 93C6  
                                            l3727 933E                                              l3735 8E96  
                                            l3743 8DE8                                              l3751 7F36  
                                            l3815 7264                                              l6144 365C  
                                            l6136 35F6                                              l6216 3354  
                                            l2848 531C                                              l3584 7342  
                                            l3672 855A                                              l3680 905E  
                                            l3488 1A48                                              l3728 9374  
                                            l3744 8E02                                              l3752 7F8C  
                                            l3760 7E96                                              l6129 35B2  
                                            l6241 6138                                              l6233 60E8  
                                            l5441 9788                                              l2857 5278  
                                            l2881 36B8                                              l3577 73B6  
                                            l3585 7286                                              l3649 61F4  
                                            l3673 8500                                              l3681 908C  
                                            l3489 1A84                                              l3745 8E30  
                                            l4473 4BFE                                              l3761 7EEC  
                                            l3809 7222                                              l3905 8FDC  
                                            l6242 616A                                              l6234 60D0  
                                            l6226 606A                                              l5426 98A2  
                                            l5434 6ADA                                              l2866 531A  
                                            l2882 36C4                                              l3578 73FE  
                                            l3674 8558                                              l6170 3DD4  
                                            l6162 3CE0                                              l3498 1BF0  
                                            l3754 7FA2                                              l4474 4C0E  
                                            l3842 78B4                                              l3906 8F9E  
                                            l3914 8CE2                                              l4483 503C  
                                            l6227 607A                                              l5451 5D60  
                                            l5435 6B2A                                              l2891 37AE  
                                            l2883 36FA                                              l3595 74C4  
                                            l6163 3CDC                                              l3755 7FC4  
                                            l4475 4C1E                                              l3763 7F02  
                                            l3835 7870                                              l3851 7B4E  
                                            l3915 8C9A                                              l3923 7E7A  
                                            l4484 504C                                              l6148 3682  
                                            l6236 611A                                              l6228 6098  
                                            l5460 5E2C                                              l5452 5D72  
                                            l3588 72E0                                              l3596 742A  
                                            l6172 3DFA                                              l4476 4C2E  
                                            l3764 7F24                                              l3828 8FFE  
                                            l3836 7816                                              l3852 7AF4  
                                            l3908 8FC0                                              l3916 8CE0  
                                            l3924 7E00                                              l3932 7DDA  
                                            l4485 505C                                              l6149 368A  
                                            l6237 610E                                              l5461 5E52  
                                            l2869 5342                                              l2893 3842  
                                            l3589 7328                                              l6165 3D26  
                                            l3693 88D2                                              l4477 4C3C  
                                            l3781 827A                                              l3829 9018  
                                            l3837 786E                                              l3853 7B4C  
                                            l3861 8014                                              l3909 8FDA  
                                            l3933 7D60                                              l3941 7D3A  
                                            l4486 506C                                              l5462 5E78  
                                            l5446 99BA                                              l2894 3828  
                                            l2886 3734                                              l6182 3E68  
                                            l6158 3CA0                                              l3686 8AB4  
                                            l3694 8878                                              l4478 4C72  
                                            l3774 80D6                                              l3782 8232  
                                            l3862 802E                                              l3870 7A2A  
                                            l3926 7E5E                                              l3942 7CC0  
                                            l3950 7C9A                                              l5463 5E9E  
                                            l5455 5E7A                                              l5471 95F0  
                                            l5447 99C4                                              l3599 7472  
                                            l6175 3E30                                              l6167 3D4E  
                                            l6159 3C9C                                              l3679 908E  
                                            l3687 8A5A                                              l3695 88D0  
                                            l3759 7EEE                                              l3775 807C  
                                            l3783 8278                                              l3839 78A2  
                                            l3927 7E78                                              l3935 7DBE  
                                            l3951 7C20                                              l6192 304A  
                                            l5720 750E                                              l5464 5EBE  
                                            l5456 5DA6                                              l5480 8B68  
                                            l2896 3832                                              l2888 37BE  
                                            l6184 3EAC                                              l6176 3E12  
                                            l6168 3DFC                                              l3688 8AB2  
                                            l3776 80D4                                              l3848 7AD6  
                                            l3872 7A78                                              l3880 8D4E  
                                            l3936 7DD8                                              l3944 7D1E  
                                            l3960 810C                                              l4489 5212  
                                            l6193 3046                                              l5721 7526  
                                            l5457 5DCE                                              l5481 8B7E  
                                            l2889 379E                                              l6185 3ED0  
                                            l6169 3DAC                                              l3873 7AAC  
                                            l3945 7D38                                              l3953 7C7E  
                                            l3961 8162                                              l3793 7798  
                                            l6194 305A                                              l5458 5DF2  
                                            l2898 38FC                                              l6186 3EFA  
                                            l3858 8030                                              l3890 7920  
                                            l3954 7C98                                              l3794 7752  
                                            l5723 7554                                              l5459 5E0A  
                                            l2899 38AC                                              l6187 3F06  
                                            l3859 7FE0                                              l3891 7954  
                                            l3795 7796                                              l6196 308A  
                                            l5724 7548                                              l5484 8B94  
                                            l6188 3F08                                              l6197 3086  
                                            l3869 7AAE                                              l5662 95B2  
                                            l6198 309A                                              l5902 7096  
                                            l5494 910A                                              l3878 8D50  
                                            l6199 30B8                                              l5903 708A  
                                            l5727 7588                                              l5495 90C0  
                                            l3879 8D08                                              l3887 7956  
                                            l3959 8164                                              l5728 7596  
                                            l3888 78CE                                              l3896 8A3E  
                                            l5905 70B2                                              l5729 75AC  
                                            l3897 89EE                                              l3899 8A22  
                                            l5676 75D6                                              l5871 9818  
                                            l4997 87A0                                              l5894 7006  
                                            l4999 87BE                                              l5896 7072  
                                            l5897 7062                                              _ADON 007E10  
                           __size_of_sort_pitches 0118                                              STR_1 FFE6  
                                            STR_2 FFE1                                              STR_3 FFFA  
                                            STR_4 FFF0                                              STR_5 FFDC  
                                            STR_6 FFEB                                              STR_7 FFF5  
                                            STR_8 FFD7                                              STR_9 FD70  
                                            _BRGH 007D62                            __end_of_random_pitches 8C20  
                                            _CREN 007D5C                                              _T0CS 007EAD  
                                            _IPEN 007E87                                              _PEIE 007F96  
                                            _RBIE 007F93                                              _RBIF 007F90  
                                            _TMR0 000FD6                                              _TMR1 000FCE  
                                            _TMR2 000FCC                                              _SPEN 007D5F  
                                            _PPQN 01F9                                              _TRMT 007D61  
                                            _TXIF 007CF4                                              _TXEN 007D65  
                                            _SYNC 007D64                          _LAST_NOTE_MODE_TRANSPOSE 0019  
                                            _main 6B4E                                              _drum 0036  
                                            _load 9A90                                              _rand 8464  
                                            fsr0h 000FEA                                              fsr1h 000FE2  
                                            indf0 000FEF                                              fsr2h 000FDA  
                                            fsr0l 000FE9                                              indf2 000FDF  
                                            fsr1l 000FE1                                              map@x 006E  
                                            fsr2l 000FD9                                              btemp 003E  
                                __end_of_ADC_Read 9760                      ??_key_press_release_note_off 0060  
                                            prodh 000FF4                                              prodl 000FF3  
              keyboard_eight_note_efficient@index 007B                                   ??_setupArpeggio 0061  
                                            start 000C                                Lcd_Print_Char@i_59 0066  
              keyboard_eight_note_efficient@pitch 007A                                     __CFG_IESO$OFF 000000  
                                 ___fldiv@new_exp 0098                                Lcd_Print_Char@data 0063  
                            __end_of_analogInputs 941C                                    _drumCCTypeMenu 0162  
                                 __end_of_Lcd_Cmd 994E                                     __CFG_MCLRE$ON 000000  
                                 _rotateArrayLeft 8962                                      ___param_bank 000000  
                                           ??_ISR 0012                                             ??_map 0082  
                 __end_of_setControllerResolution 9886                         _arpeggiatorLatchOnOffMenu 0123  
                                      _Lcd_SetBit 982A                                             l30200 4550  
                                           l30212 4580                                             l30222 45AE  
                                           l30206 4568                                             l30240 45F6  
                                           l30216 4596                                             l30152 4492  
                            programChange@channel 0062                                             l30234 45DE  
                                           l30170 44DA                                             l30402 37BE  
                                           l30500 0A42                                             l30252 4624  
                                           l30228 45C6                                             l30164 44C2  
                                           l30270 466C                                             l30246 460C  
                                           l30182 450A                                             l30158 44AA  
                                           l31400 6E6C                                             l30264 4654  
                                           l30176 44F2                                             l31240 3EFA  
                                           l30282 469C                                             l30258 463C  
                                           l30194 453A                                             l30516 0AA4  
                                           l30276 4684                                             l30188 4522  
                                           l33012 8C5A                                             l32054 7624  
                                           l31406 6E70                                             l30622 87B6  
                                           l31430 9860                                             l30528 0BF2  
                                           l30608 8798                                             l30288 46B4  
                                           l33032 8C0C                                             l33040 797A  
                                           l30464 38FC                                             l31370 6DBA  
                                           l33026 8BBE                                             l33050 7A00  
                                           l33018 8C86                                             l31380 6E02  
                                           l31374 6DC8                                             l31366 6DA2  
                                           l31536 1C6A                                             l27004 57E2  
                                           l31584 1DBA                                             l27042 5884  
                                           l27106 4AD6                                             l27150 4BBE  
                                           l27062 4990                                             l33466 8402  
                                           l33458 83E8                                             l31778 51D8  
                                           l32922 642A                                             l26524 960E  
                                           l26620 5CA2                                             l32916 6414  
                                           l32756 7ACE                                             l26534 963C  
                                           l32950 650C                                             l32942 64DA  
                                           l27352 6910                                             l32928 6448  
                                           l32970 6998                                             l32962 6970  
                                           l26722 598E                                             l26810 5B06  
                                           l32980 6A08                                             l27516 2B5E  
                                           l32966 6982                                             l26590 5C18  
                                           l26910 4874                                             l27278 56F8  
                                           l26760 5A16                                             l26658 5D2A  
                                           l32988 6A3A                                             l26692 5904  
                                           l26780 5A48                                     ___fltol@sign1 00C0  
                                           l26848 5BA6                                             l33986 83B4  
                                           l33978 8358                                             l26954 495E  
                                           l26866 472E                                   __end_of___aldiv 75BE  
                                           l26974 5724                                   __end_of___fladd 36A8  
                                           ?_main 0007                                             ?_load 0007  
                                 __end_of___fldiv 3F24                                   __end_of___awdiv 6522  
                                ?_calculate_alpha 0007                                   __end_of___flneg 982A  
                                           _EEADR 000FA9                                             STR_10 FD64  
                                           STR_11 FD64                                             STR_12 FD6B  
                                           STR_20 FFC3                                             STR_13 FF9E  
                                           STR_21 FDFD                                             STR_14 FF88  
                                           STR_30 FDA8                                             STR_22 FD75  
                                           STR_15 FF93                                             STR_23 FF18  
                                           STR_31 FEC4                                             STR_16 FD6B  
                                           STR_24 FF58                                             STR_32 FE4D  
                                           STR_40 FE3D                                             STR_17 FF9E  
                                           STR_41 FFCD                                             STR_25 FED2  
                                           STR_33 FD97                                             STR_18 FF88  
                                           STR_50 FE8E                                             STR_34 FF4C  
                                           STR_42 FE98                                             STR_26 FE2D  
                                           STR_19 FF93                                             STR_51 FF0F  
                                           STR_43 FFD2                                             STR_35 FFBB  
                                           STR_27 FEE0                                             STR_44 FFCD  
                                           STR_36 FFB3                                             STR_60 FEFC  
                                           STR_52 FDDB                                             STR_28 FDCA  
                                 __end_of___awmod 6A50                                             STR_61 FFC8  
                                           STR_45 FEB6                                             STR_53 FE89  
                                           STR_29 FE6B                                             STR_37 FD86  
                                           STR_54 FFDC                                             STR_70 FF7C  
                                           STR_38 FF25                                             STR_46 FEEE  
                                           STR_62 FE1D                                             STR_71 FFA9  
                                           STR_55 FF0A                                             STR_63 FEA7  
                                           STR_39 FDEC                                             STR_47 FDB9  
                                           STR_72 FF7C                                             STR_56 FFF0  
                                           STR_48 FF32                                             STR_64 FE7A  
                                           STR_73 FFA9                                             STR_49 FDDF  
                                           STR_65 FF3F                                             STR_57 FE5C  
                                           STR_74 FF7C                                             STR_66 FF70  
                                           STR_58 FF64                                             STR_59 FF6B  
                                           STR_67 FFA9                                             STR_75 FE0D  
                                           STR_68 FF7C                                   __end_of___lbmod 83D8  
                                           STR_69 FFA9                                   __end_of___flmul 336A  
                                 __end_of___fltol 70C4                                             _CMCON 000FB4  
                                           _T0CON 000FD5                                             _T1CON 000FCD  
                                           _T2CON 000FCA                                             _LATCH 0022  
                                           u52110 35FA                                             u51410 5254  
                                           u52140 3612                                             u52300 30A6  
                                           u52310 321C                                             u52400 3320  
                                           u51440 526E                                             u51370 523A  
                                           u52315 3212                                             u46020 5960  
                                           u60420 8958                                             u52190 3668  
                                           u51710 53A8                                             u51550 52EE  
                                           u51470 5288                                             u52360 32AC  
                                           u52440 7024                                             u55000 0D08  
                                           u47000 4AA8                                             u52610 863E  
                                           u60435 895A                                             u55020 0D88  
                                           u45340 8B76                                             u46300 5B52  
                                           u51580 530E                                             u52445 701A  
                                           u52630 8674                                             u52390 3302  
                                           u55030 0E1A                                             u51670 5374  
                                           u52480 709C                                             u52560 6124  
                                           u45360 8B8C                                             u46080 59C0  
                                           u46400 5BB6                                             u46240 5AD8  
                                           u48000 2B34                                             u51930 3470  
                                           u55130 11A0                                             u52730 8F04  
                                           u60740 8402                                             u55220 85B2  
                                           u51940 3480                                             u45380 8BA4  
                                           u46180 5A26                                             u46500 4846  
                                           u52660 8ECA                                             u55230 85EA  
                                           u51950 3482                                             u55070 0FD4  
                                           u55150 87B2                                             u52750 8F1A  
                                           u45560 9894                                             u45800 5C74  
                                           u47080 4B6A                                             u48120 2BAA  
                                           u55170 87D8                                             u55227 85A8  
                                           u51795 436A                                             u51980 34C4  
                                           u55180 87DA                                             u47180 4BCE  
                                           u48140 2BB2                                             u48060 2B7C  
                                           u55237 85E0                                             u57110 6EB6  
                                           u54630 377E                                             u45575 9896  
                                           u48240 7558                                             u57104 6EA4  
                                           u46800 582E                                             u58000 803E  
                                           u57105 6EA0                                             u45860 5CD4  
                                           u46900 5894                                             u46740 57B4  
                                           u46580 4908                                             u58100 7ABC  
                                           u57125 6EB8                                             u54830 3944  
                                           u54750 388C                                             u57055 95C0  
                                           u58015 8040                                             u57056 95C2  
                                           u54920 0AA0                                             u45960 5D3A  
                                           u46680 496E                                             u58040 8064  
                                           u54690 3808                                             u54940 0BEE  
                                           u56700 92FE                                             u58220 8FEA  
                           _processPotentiometers 41D2                                             u47920 2AEA  
                                           u59120 80E4                                             u58160 8A4C  
                                           u58400 7D48                                             u59210 726E  
                                           u54980 0CF6                                             u58340 7DE8  
                                           u59205 724A                                             u57710 4CA2  
                                           u59135 80E6                                             u57800 4DC6  
                                           u58280 7E88                                             u57705 4C98  
                                           u56930 3E64                                             u57730 4CEE  
                                           u57900 4E02                                             u57820 4DD2  
                                           u57660 4C72                                             u58460 7CA8  
                                           u57725 4CA4                                             u57750 4D8E  
                                           u57670 4C8A                                             u59190 7248  
                                           u59350 789E                                             u59510 7964  
                                           u57815 4DC8                                             u56960 3EBA  
                                           u57920 4E0E                                             u57840 4DDE  
                                           u57745 4CF0                                             u67505 6BA0  
                                           i2l858 8708                                             u56970 3EDE  
                                           u57770 4DB6                                             u57690 4C96  
                                           u59370 78B0                                             i2l859 8718  
                                           u57915 4E04                                             u57835 4DD4  
                                           u58660 7BF4                                             u57940 4E1A  
                                           u57860 4DEA                                             u57765 4D90  
                                           u57685 4C8C                                             u67550 6C16  
                                           u67607 969C                                             u57935 4E10  
                                           u57855 4DE0                                             u57880 4DF6  
                                           u58905 856A                                             u67617 96D6  
                                           u57785 4DB8                                             u59810 8C1A  
                                           u67570 6C28                                             u67490 6B9E  
                                           u67707 869E                                             u59635 84BE  
                                           u58675 7BF6                                             u67627 9710  
                                           u57875 4DEC                                             u59740 69C0  
                                           u59636 84C4                                             u67717 86CC  
                                           u67637 6E62                                             u59637 84D2  
                                           u59830 7A0E                                             u59670 6470  
                                           u67727 8410                                             u67647 6EBA  
                                           u57895 4DF8                                             u59760 6A26  
                                           u67737 8428                                             u67657 6EC4  
                                           u59690 64F8                                             u58890 8568  
                                           u67747 9940                                             u67667 6ECE  
                                           u67587 9662                                     _controlChange 9232  
                                           u67677 6EF8                                             u67597 9220  
                                           u67687 6DF2                                             u67697 973E  
                                           _SPBRG 000FAF                                             _PORTA 000F80  
                                           _PORTB 000F81                                             _PORTC 000F82  
                                           _PORTD 000F83                                             _PORTE 000F84  
                                    _sort_pitches 6522                           __size_of_Lcd_Set_Cursor 0062  
                                           _TRISA 000F92                                             _TRISB 000F93  
                                           _TRISC 000F94                                             _TRISD 000F95  
                                           _TRISE 000F96                                             _TXREG 000FAD  
                  ?_keyboard_eight_note_efficient 0007                                     __CFG_PWRT$OFF 000000  
                           __end_of_playThisNote8 2C16                                     __CFG_WRT0$OFF 000000  
                                   __CFG_WRT1$OFF 000000                        __size_of_keyboardTranspose 02A6  
                                   __CFG_WRT2$OFF 000000                                     __CFG_WRT3$OFF 000000  
                     encoderInputsBuxton@pinstate 000C                                    __CFG_EBTR0$OFF 000000  
                                  __CFG_FCMEN$OFF 000000                                    __CFG_EBTR1$OFF 000000  
                                  __CFG_EBTR2$OFF 000000                                    __CFG_EBTR3$OFF 000000  
                                   __CFG_WRTB$OFF 000000                                   __end_of_display 9A18  
                                   __CFG_WRTC$OFF 000000                                     __CFG_WRTD$OFF 000000  
                                  Read_b_eep@badd 0060                                   ??_processOctave 007E  
                                  __CFG_EBTRB$OFF 000000                                             _flag1 0012  
                                           _flag2 0011                                     _transposeMenu 0168  
                                           _clock 9A96                   ?_keyboard_sharps_only_efficient 0007  
                ??_keyboard_sharps_only_efficient 0077               __size_of_key_press_release_note_off 0174  
                          Write_b_eep@GIE_BIT_VAL 0063                                             _randx 01F2  
                                           _setup 8AC6                                             _srand 9A6C  
                                           _state 00EE                                   __end_of_sendUSB 6F08  
                                     copy_array@i 0060                                   __end_of_sendOut 6E24  
                                  __pbitbssCOMRAM 0008                                   __end_of_noteOff 9584  
                                  __CFG_BOREN$OFF 000000                                             tablat 000FF5  
                                           ltemp0 003E                                             ltemp1 0042  
                                           ltemp2 0046                            _playDiatonicTriadMajor 5A3A  
                                _suppress_note_on 0016                    __size_of_finish_arpeggio_setup 001E  
                          _playDiatonicTriadMinor 4720                                             plusw1 000FE3  
                                           plusw2 000FDB                     __end_of_finish_arpeggio_setup 99CE  
                       __size_of_Lcd_Print_String 0084                __end_of_delete_notes_from_arpeggio 9794  
                      _delete_notes_from_arpeggio 9760                                             ttemp0 003E  
                                           ttemp1 0041                                             ttemp2 0044  
                                           ttemp3 0047                    keyboardTranspose@semitone_temp 00EB  
                                           status 000FD8                                     _UN_LATCH_MODE 0021  
                                           wtemp0 003E                                             wtemp1 0040  
                                           wtemp2 0042                                             wtemp3 0044  
                                           wtemp4 0046                                             wtemp5 0048  
                                           wtemp6 003F                                _encoder_state_last 017F  
                            _LAST_NOTE_MODE_RESET 0018                           __size_of_Lcd_Print_Char 0084  
                           Function_C_2@printOnce 0009                       __size_of_buttonInputsSerial 007C  
                                   ?_Function_A_1 0007                                     ?_Function_A_2 0007  
                                   ?_Function_A_3 0007                                     ?_Function_C_1 0007  
                                   ?_Function_C_2 0007                                     ?_Function_C_3 0007  
                                   ?_Function_D_1 0007                                     ?_Function_D_2 0007  
                                   ?_Function_D_3 0007                                     ?_Function_D_4 0007  
                                   ?_Function_E_1 0007                                     ?_Function_D_5 0007  
                                   ?_Function_E_2 0007                                     ?_Function_G_1 0007  
                                   ?_Function_G_2 0007                                     ?_Function_G_3 0007  
                                   ?_Function_G_4 0007                                     ?_Function_H_1 0007  
                                   ?_Function_H_2 0007                                     ?_Function_H_3 0007  
                                   ?_Function_H_4 0007                                     ?_Function_H_5 0007  
                                   ?_Function_H_6 0007                                     ?_Function_H_7 0007  
                                   ?_Function_H_8 0007                                     ?_Function_H_9 0007  
                                 __initialization 6C44                                      __end_of_main 6C44  
                                    __end_of_load 9A96                                      __end_of_rand 84EC  
                                 ??_programChange 0062                                        _Read_b_eep 99CE  
                                __end_of_Busy_eep 9AA2                             Function_C_3@printOnce 0008  
                             _half_diminished_7th 02CC                           _initializeSaveSlotsOnce 9466  
                                      _Function_A 741E                                        _Function_B 88E8  
                                      _Function_C 8198                                        _Function_D 82BA  
                                      _Function_E 8E48                                        _Function_F 8DDA  
                                      _Function_G 822A                                        _Function_H 7748  
                         __size_of_loadFromEEPROM 023C                                            ??_main 01E9  
                          _arpeggiatorOctavesMenu 012F                                            ??_load 0060  
                             _ARPEGGIO_IS_PLAYING 0034                                    ?_controlChange 0060  
                              __size_of_Lcd_Clear 0016                                     __activetblptr 000002  
                                 ??_displayDigits 0007                                      ?_playSeventh 0007  
                              __size_of_Lcd_Start 008C                        rotateArrayLeft@array_index 0067  
                            displayDigits@lowByte 000A                                   ??_displayString 0007  
                                          ?_clock 0007                                            _ADCON0 000FC2  
                                          _ADCON1 000FC1                                            _ADCON2 000FC0  
                                          _ADRESH 000FC4                                            _EEADRH 000FAA  
                                          _ADRESL 000FC3                                            _EEDATA 000FA8  
                                          _EECON2 000FA7                                            _T08BIT 007EAE  
                                          ?_setup 0007                                            ?_srand 0060  
                    calculate_pulse_length@s_tick 00C4                                   __CFG_BBSIZ$1024 000000  
                                    ?_noteOffDrum 0060                     _which_functions_are_unblocked 002A  
                             saveToEEPROM@to_save 0064                                            _INT0IE 007F94  
                                          _INT0IF 007F91                                     ?_exitFunction 0007  
                                          i2l3011 6670                                            i2l3013 66C0  
                                          i2l3014 66E6                                            i2l3015 670E  
                                          i2l3016 6736                                            i2l3009 6646  
                                          i2l5021 5482                                            i2l5022 551E  
                                          i2l5031 5504                                            i2l5032 5512  
                                          i2l5017 5442                                            i2l5018 545E  
                                          i2l5027 54E6                                            i2l5019 5478  
                                          i2l5501 6630                                            i2l5502 652E  
                                          i2l5503 6626                                            i2l5504 6534  
                                          i2l2970 3B34                                            i2l5506 65AC  
                                          i2l5602 1870                                            i2l2971 3A98  
                                          i2l2980 3B6E                                            i2l2972 39D8  
                                          i2l5508 6624                                            i2l5540 12F8  
                                          i2l2981 3B66                                            i2l2973 39F4  
                                          i2l5533 1216                                            i2l2990 3BC8  
                                          i2l2974 3AE4                                            i2l5542 130A  
                                          i2l2975 3B2C                                            i2l5551 13DE  
                                          i2l5543 1322                                            i2l5535 1270  
                                          i2l2992 3BE2                                            i2l5560 14B8  
                                          i2l5544 132E                                            i2l2985 3B92  
                                          i2l5553 1432                                            i2l5537 12BC  
                                          i2l2986 3B94                                            i2l5554 1430  
                                          i2l5538 12BA                                            i2l2995 3C1C  
                                          i2l5555 1484                                            i2l5539 12FA  
                                          i2l2996 3C1E                                            i2l5564 14EE  
                                          i2l5556 1482                                            i2l2989 3BC6  
                                          i2l5573 15E2                                            i2l5565 1532  
                                          i2l5549 138E                                            i2l2998 3C38  
                                          i2l5582 16F6                                            i2l5574 1610  
                                          i2l5566 157C                                            i2l5558 1494  
                                          i2l2999 3C5E                                            i2l5583 172A  
                                          i2l5559 14AC                                            i2l5576 165E  
                                          i2l5585 1774                                            i2l5577 1690  
                                          i2l5586 17A2                                            i2l5595 1816  
                                          i2l5597 1824                                            i2l5598 1850  
                                       ??_Lcd_Cmd 0061                                            _TMR0IE 007F95  
                                          _TMR0IF 007F92                                            _TMR1IE 007CE8  
                                          _TMR1IF 007CF0                                            _TMR2IE 007CE9  
                                          _TMR2IF 007CF1                                            _TMR0ON 007EAF  
                                          _TMR1ON 007E68                                            _TMR2ON 007E52  
                         __end_of_rotateArrayLeft 89DA                                            _ON_OFF 0031  
                                __end_of___xxtofl 617C                      __size_of_initializeMenuArray 0202  
                        __end_of_selectSlotOnBoot 9990                                    ??_Function_A_1 00C7  
                                  ??_Function_A_2 00C7                                    ??_Function_A_3 00C7  
                                  ??_Function_C_1 00C7                                    ??_Function_C_2 00C7  
                                  ??_Function_C_3 00C7                                    ??_Function_D_1 00C7  
                                  ??_Function_D_2 00C7                                    ??_Function_D_3 00C9  
                                  ??_Function_D_4 00C9                                    ??_Function_D_5 00C9  
                                  ??_Function_E_1 00C7                                    ??_Function_E_2 00C7  
                                  ??_Function_G_1 00C7                                    ??_Function_G_2 00CC  
                                  ??_Function_G_3 006E                                    ??_Function_G_4 00C7  
                                  ??_Function_H_1 00C7                                    ??_Function_H_2 00CC  
                                  ??_Function_H_3 00C7                                    ??_Function_H_4 00C7  
                                  ??_Function_H_5 00C7                                    ??_Function_H_6 00C8  
                                  ??_Function_H_7 00C7                                    ??_Function_H_8 00C7  
                                  ??_Function_H_9 00C7                                     ?_panic_button 0007  
                           __end_of_resetArpeggio 9604                                    __CFG_XINST$OFF 000000  
                         __size_of_Function_H_6_1 009C                           __size_of_Function_H_6_2 00AA  
                         __size_of_Function_H_8_1 0076                           __size_of_Function_H_8_2 0064  
                         __size_of_Function_H_9_1 00A0                           __size_of_Function_H_9_2 00A0  
                         __size_of_Function_H_9_3 00A0                           __size_of_Function_H_9_4 00A0  
                                ??_processDrumpad 0063                          readPotentiometers@i_3437 019D  
                        readPotentiometers@i_3438 019F                                            ___lmul 75BE  
                                ascii@LCD_STRINGS E8C3                                         ??___aldiv 0068  
                                       ??___fladd 00AC                                            ___wmul 9900  
                                       ??___fldiv 008F                                         ??___flneg 00A4  
                                       ??___flmul 0076                                         ??___fltol 00BC  
                           __size_of_doTheUnLatch 01BE                           ??_add_notes_to_arpeggio 0069  
                                     ?_Lcd_SetBit 0007                                  __end_of_exitLoad 96B4  
                                __end_of_exitSave 96EE                                            _octave 004F  
                                          clear_0 6CEA                                            clear_1 6CF6  
                                          clear_2 6D02                                            clear_3 6D0E  
                                          clear_4 6D26                                  __end_of_menu_lcd 6FE6  
                                          _noteOn 8C20                            ?_processPotentiometers 0007  
                                          _ttable F33D                              __size_of_displayTest 0080  
                                          _strcpy 97C8                                         ??_display 000C  
                       _arpeggiatorNoteLengthMenu 0129                                 _programChangeMenu 0144  
                               _latch_was_pressed 001F                                      __pdataCOMRAM 004A  
                                       ?_ADC_Read 0060                          __size_of_printThisNumber 0014  
                               _suppress_note_off 0015                                      __mediumconst E8C2  
                keyboard_all_note_efficient@pitch 0076                                            tblptrh 000FF7  
                                          tblptrl 000FF6                                            tblptru 000FF8  
                                          srand@x 0060                                    ??_exitFunction 006E  
                                 Lcd_Set_Cursor@a 0064                                   Lcd_Set_Cursor@b 0063  
                                 Lcd_Set_Cursor@y 0066                                   Lcd_Set_Cursor@z 0065  
                    __size_of_encoderInputsBuxton 0080                                   noteOnDrum@pitch 0060  
                       loadFromEEPROM@baseAddress 01E4                                      ___xxtofl@arg 006A  
                                    ___xxtofl@exp 0069                              selectSlotOnBoot@slot 00CC  
                           __size_of_analogInputs 004C                                      ___xxtofl@val 0060  
                      _LAST_NOTE_MODE_KEY_RELEASE 001A                                        __accesstop 0060  
                         __end_of__initialization 6D2C                                   __CFG_PBADEN$OFF 000000  
                                      ___flneg@f1 00A0                __end_of_key_press_release_note_off 5EC2  
                      _key_press_release_note_off 5D4E                                     _MAX_NUM_NOTES F39D  
                                    _doTheUnLatch 5214                                 __end_of_Lcd_Clear 9A44  
                        __size_of_processKeyboard 006C                                     ___rparam_used 000001  
                                  ??_panic_button 0063                                 _button_state_last 00D5  
                                      ___fltol@f1 00B8                             __end_of_digitalInputs 9330  
                               __end_of_Lcd_Start 8464                     processPotentiometers@highByte 0067  
                   __size_of_setControllerNumbers 051E                                    __pcstackCOMRAM 0007  
                                      ___inthi_sp 06B2                            _diatonic_seventh_major F2A7  
                       ??_initializeSaveSlotsOnce 00B4                      ?_keyboard_all_note_efficient 0007  
                            initializeMenuArray@i 0068                                      __pidataBANK0 9A7C  
                                    __pidataBANK1 9A18                                      __pidataBANK2 9176  
                                    __pidataBANK3 8F20                            _diatonic_seventh_minor F26B  
                             buttonInputsSerial@i 0064                                     __end_of_clock 9A9C  
                                     ?_Read_b_eep 0060                                     _stored_octave 0030  
                                   __end_of_setup 8B3A                                     __end_of_srand 9A7C  
                                 ??_controlChange 0062                                       ?_Function_A 0007  
                                     ?_Function_B 0007                                       ?_Function_C 0007  
                                     ?_Function_D 0007                                       ?_Function_E 0007  
                                     ?_Function_F 0007                                       ?_Function_G 0007  
                                     ?_Function_H 0007                       _arpeggiatorLastNoteModeMenu 00DD  
                    _CONTROL_CHANGE_IS_BEING_SENT 0033                               ADC_Read@adc_channel 0064  
                         Function_C_2@array_index 00C8                                     ?_playArpeggio 0007  
                            _number_of_interrupts 02C4                                    _Lcd_Set_Cursor 9114  
                                      ??_ADC_Read 0062                                     ?_saveToEEPROM 0007  
                                    _analogInputs 93D0                      __end_of_pentatonic_major_key F39D  
                                 _slidepotsCCMenu 014D                        add_notes_to_arpeggio@pitch 0070  
                                playSeventh@pitch 0069  delete_notes_from_arpeggio@INDEX_TO_SHIFT_LEFT_AT 006A  
                      __end_of_readPotentiometers 11A4                                           ??_clock 0060  
                                 findArrayIndex@i 0062                      __end_of_processEncoderBuxton 0A3C  
                                         ??_setup 0060                                           ??_srand 0062  
                           displayDigits@highByte 000B                                        __pbssBANK0 00CD  
                                      __pbssBANK1 0100                                        __pbssBANK2 0200  
                                      __pbssBANK3 0369                                        _doTheLatch 9990  
                                   ?_playThisNote 0007                                  _Lcd_Print_String 8570  
                       keyboardTranspose@keyPress 000D                               __size_of_Lcd_SetBit 0030  
                                       ?_Busy_eep 0007                      __end_of_pentatonic_minor_key F392  
                                ?_rotateArrayLeft 0007                            _drum_button_state_last 0037  
                                  _Lcd_Print_Char 85F4                          ??_calculate_pulse_length 00C4  
                    ??_delete_notes_from_arpeggio 0069                                      _DISPLAY_MODE 00EF  
                                      _clear_row1 98D8                                        _clear_row2 98B0  
                                         ?___wmul 0060                            saveToEEPROM@byte_count 00B2  
                    playDiatonicTriadMajor@i_1713 0067                                __size_of_playTriad 0184  
                              __size_of_pitchBend 0048                     ??_keyboard_all_note_efficient 0076  
                              Lcd_SetBit@data_bit 0060                                    _loadFromEEPROM 4BE2  
                          __end_of_Lcd_Set_Cursor 9176                                     ??_Write_b_eep 0063  
                                  ??_playArpeggio 000C                           __size_of_ADC_Initialize 0014  
                                         ?_strcpy 0060                           Function_C_3@array_index 00C8  
                                Function_H_1@temp 00C7                                 _number_to_display 004A  
                                         i2l23150 663E                                        _eepromMenu 013B  
                                      _eepromExit 96EE                           __size_of_findArrayIndex 003C  
                                  ??_saveToEEPROM 0064                                           _INTEDG0 007F8E  
                                         _DRUM_CC 00F5                                         ?___xxtofl 0060  
                                         _OCTAVES 004D                findArrayIndex@pitch_of_key_release 0061  
                            __end_of_Function_A_1 719C                  int2string@number_to_display_temp 0064  
                            __end_of_Function_A_2 741E                              __end_of_Function_A_3 7348  
                            __end_of_Function_C_1 7C0C                              __end_of_Function_C_2 63F0  
                            __end_of_Function_C_3 62B6                              __end_of_Function_D_1 8570  
                            __end_of_Function_D_2 90B2                              __end_of_Function_D_3 8AC6  
                            __end_of_Function_D_4 88E8                              __end_of_Function_D_5 886E  
                            __end_of_Function_E_1 93D0                              __end_of_Function_E_2 9380  
                            __end_of_Function_G_1 7FCC                              __end_of_Function_G_2 7F2C  
                            __end_of_Function_G_3 9232                              __end_of_Function_G_4 8102  
                            __end_of_Function_H_1 7272                              __end_of_Function_H_2 8DDA  
                            __end_of_Function_H_3 9050                              __end_of_Function_H_4 78BA  
                            __end_of_Function_H_5 7B6A                              __end_of_Function_H_6 8D6C  
                            __end_of_Function_H_7 7968                              __end_of_Function_H_8 8CFE  
                            __end_of_Function_H_9 8198                          ?_setControllerResolution 0007  
                            __size_of_playSeventh 0192                   __end_of_initializeSaveSlotsOnce 94B0  
                         ?_playDiatonicTriadMajor 0061                           ?_playDiatonicTriadMinor 0061  
                                      _drumCCMenu 015C                                    ??_playThisNote 0071  
             _arpeggiatorLastNoteModeKeyPressMenu 0111                                 ??_printThisNumber 0062  
                             __size_of_Read_b_eep 001A                                  doTheUnLatch@once 000C  
                                      _int2string 7684                                   _ARPEGGIO_RANDOM 0268  
                                 Lcd_Print_Char@i 0064                             __end_of_un_block_code 9A00  
                                      _dorian_key FD46                                        ??_Busy_eep 0060  
                                         _Lcd_Cmd 9928                            __end_of_Lcd_Print_Char 8678  
                                      _drumNNMenu 015F                                         ?_exitLoad 0007  
                            __size_of_noteOffDrum 0034                                        _copy_array 90B2  
                                       ?_exitSave 0007                       ?_delete_notes_from_arpeggio 0007  
                                 _ARPEGGIO_SORTED 0278                               __size_of_Function_A 00D2  
                             __size_of_Function_B 007A                               __size_of_Function_C 0092  
                             __size_of_Function_D 0090                               __size_of_Function_E 006C  
                             __size_of_Function_F 006E                               __size_of_Function_G 0090  
                             __size_of_Function_H 00C0                                         ?_menu_lcd 0007  
                        _playDiatonicSeventhMajor 5716                   ??_keyboard_eight_note_efficient 007A  
                        _playDiatonicSeventhMinor 4982                                           __Hparam 0000  
                                    _CONTROL_MODE 000E                         playDiatonicSeventhMajor@i 0066  
                                  _mixolydian_key FD19                                           __Lparam 0000  
                               _potentiometer_raw 0369                             __end_of_setupArpeggio 8BAE  
                                  _Function_H_6_1 7FCC                                    _Function_H_6_2 7A16  
                                  _Function_H_8_1 89DA                                    _Function_H_8_2 8F8A  
                                  _Function_H_9_1 7DEC                                    _Function_H_9_2 7D4C  
                                  _Function_H_9_3 7CAC                                    _Function_H_9_4 7C0C  
          __end_of_keyboard_sharps_only_efficient 41D2           __size_of_keyboard_sharps_only_efficient 02AE  
                  _keyboard_sharps_only_efficient 3F24                         playDiatonicSeventhMinor@i 0067  
                                         ___aldiv 74F0                                           ___fladd 336A  
                                 _midiChannelMenu 0147                                           ___fldiv 3C6E  
                                         ___awdiv 63F0                                           ___flneg 97FA  
                                 __size_of___lmul 00C6                                           ___awmod 6950  
                                         ___lbmod 834A                                           ___flmul 3018  
                          __end_of_loadFromEEPROM 4E1E                                           ___fltol 6FE6  
                                 __size_of___wmul 0028                                 ??_processKeyboard 007C  
                            __end_of_exitFunction 967A                                   __CFG_STVREN$OFF 000000  
                                         _channel 003D                                           __pcinit 6C44  
                                         __ramtop 0D00                                   ?_Lcd_Set_Cursor 0063  
                                      _ionian_key FD55                                   __size_of_noteOn 0070  
                                         _ema_sum 0240                                 __end_of_major_key F387  
                                         __ptext0 6B4E                                           __ptext1 9A6C  
                                         __ptext2 8AC6                                           __ptext3 9970  
                                         __ptext4 994E                                           __ptext5 6F08  
                                         __ptext6 9A2E                                           __ptext7 7748  
                                         __ptext8 8102                                           __ptext9 7C0C  
                                         _command 01FA                                _NOTE_LENGTH_PULSES 004C  
                                         _display 9A00                                   __size_of_strcpy 0032  
                                    __size_of_ISR 5574                               _initializeMenuArray 4E1E  
                                    __size_of_map 0106                                        ??___xxtofl 0064  
                          saveToEEPROM@slotNumber 00B1                              __end_of_panic_button 9970  
                              Function_H_6_1@temp 00C7                                           _sendUSB 6E24  
                                ___aldiv@dividend 0060                    __end_of_playDiatonicTriadMajor 5BCA  
                                         _sendOut 6D36                    __end_of_playDiatonicTriadMinor 4982  
                                rotateArrayLeft@i 0068                                           _noteOff 9540  
                              _GLOBAL_STATUS_BYTE 0183                                  noteOffDrum@pitch 0060  
                             __end_of_Write_b_eep 95C6             _arpeggiatorLastNoteModeKeyReleaseMenu 010E  
                                playTriad@triad_p 0065                                 __end_of_seg_ascii F26B  
                         saveToEEPROM@baseAddress 00AF                          __end_ofascii@LCD_STRINGS F220  
            __size_of_keyboard_all_note_efficient 051A                                 __end_of_minor_key F378  
                        __size_of_calculate_alpha 004A                   setControllerNumbers@array_index 00C8  
                                       _DRUM_MODE 000F                                         _DRUM_NOTE 01EA  
                                  __pintcode_body 53D2              __end_of_random_pitches_non_repeating 7A16  
           __size_of_random_pitches_non_repeating 00AE                             __end_of_processOctave 39B6  
                    _random_pitches_non_repeating 7968                              end_of_initialization 6D2C  
                               __end_of_playTriad 5D4E                                       ?_doTheLatch 0007  
                               __end_of_pitchBend 9540                                   ?_Lcd_Print_Char 0007  
                                      ??_exitLoad 006E                                     __Lmediumconst E8C2  
                            _light_decimal_points 0032                                           int_func 53D2  
                                      ??_exitSave 006E                                        ??_menu_lcd 00CC  
                      __end_of_buttonInputsSerial 87F4                                        _noteOnDrum 928A  
                                  displayString@i 0008                            __end_of_mixolydian_key FD28  
                         __size_of_wait_one_pulse 002A                              ?_initializeMenuArray 0007  
                          __end_of_Function_H_6_1 8068                            __end_of_Function_H_6_2 7AC0  
                          __end_of_Function_H_8_1 8A50                            __end_of_Function_H_8_2 8FEE  
                          __end_of_Function_H_9_1 7E8C                            __end_of_Function_H_9_2 7DEC  
                          __end_of_Function_H_9_3 7D4C                            __end_of_Function_H_9_4 7CAC  
                           _finish_arpeggio_setup 99B0                                        _noteNumber 003B  
                                       i2u6107_40 133C                                         i2u3831_40 8722  
                                       i2u6160_40 17E2                                         i2u3832_48 8724  
                                       i2u6137_40 1592                                         i2u6129_40 14C8  
                                       i2u6171_40 185E                                         i2u6147_40 169E  
                                       i2u3764_40 669A                                         i2u6164_40 1802  
                                       i2u6085_40 11C0                                 ?_selectSlotOnBoot 0007  
                               pitchBend@highByte 0061                                        _lydian_key FD28  
                                       i2u6740_40 54C0                                         i2u6742_40 54E2  
                                       i2u5990_45 3ACE                   __size_of_calculate_pulse_length 0166  
                                       i2u6775_47 5468                                         i2u5984_40 39C6  
                                       i2u5992_45 3AFE                                       ?_clear_row1 0007  
                                     ?_clear_row2 0007                                         i2u5995_40 3B48  
                                       i2u5989_45 3AAA                                    _diatonic_major F310  
                                  _diatonic_minor F2E3                            __size_of_playThisNote8 0434  
                            _pentatonic_major_key F392                                    _joystickCCMenu 014A  
                                       _PRESCALER 01F8                                        _potsCCMenu 0150  
                                ___aldiv@quotient 006A                                ??_selectSlotOnBoot 00CC  
                                         postdec0 000FED                                           postdec1 000FE5  
                                         postdec2 000FDD                                           postinc0 000FEE  
                                         postinc1 000FE6                                           postinc2 000FDE  
                         ??_processPotentiometers 0063                                   _drumChannelMenu 013E  
                                 ?_loadFromEEPROM 0007                               noteOffDrum@velocity 0061  
                              controlChange@value 0061                               _encoderInputsBuxton 86F8  
                                    ??_Lcd_SetBit 0060                              _processEncoderBuxton 0014  
                           __end_of_programChange 94F8                                 playThisNote@pitch 0075  
                  __size_of_add_notes_to_arpeggio 00FE                          ??_playThisNotePentatonic 0072  
                   __end_of_add_notes_to_arpeggio 6B4E                                    _string2display 0194  
                               _encoder_direction 0035                              _pentatonic_minor_key F387  
                                      _which_mode 00F2                                        _which_note 0032  
                                     ?_eepromExit 0007                                       ___fladd@grs 00B7  
                           __end_of_displayDigits 3C6E                                     ___xxtofl@sign 0068  
                           loadFromEEPROM@to_load 0199                                       ___fldiv@grs 009A  
                                     ___fldiv@rem 0094                                 __size_of_ADC_Read 0038  
                           __end_of_displayString 6746                              ?_encoderInputsBuxton 0007  
                    playDiatonicTriadMinor@i_1723 0068                                   _TIMER_OVERFLOWS 002D  
                                    _dominant_7th 02D8                               __end_of_aeolian_key FD19  
                                      map@out_max 007E                                        map@out_min 007A  
                                     ?_int2string 0060                              _arpeggiatorLatchMenu 0126  
                                      _statusByte 003C                                       ___flmul@grs 007C  
                            _arpeggiatorOnOffMenu 0135                                       ?_copy_array 0007  
                              programChange@data1 0060                                programChange@data2 0061  
                      _potentiometer_filtered_now 0220                                __end_of_Lcd_SetBit 985A  
                           ??_initializeMenuArray 0066                       ?_key_press_release_note_off 0007  
                            __end_of_playArpeggio 18A4                        _arpeggiatorUnLatchModeMenu 011D  
                          __end_of_diatonic_major F33D                                   ?_Function_H_6_1 0007  
                                 ?_Function_H_6_2 0007                                   ?_Function_H_8_1 0007  
                                 ?_Function_H_8_2 0007                                   ?_Function_H_9_1 0007  
                                 ?_Function_H_9_2 0007                                   ?_Function_H_9_3 0007  
                                 ?_Function_H_9_4 0007                            __end_of_diatonic_minor F310  
                            __end_of_saveToEEPROM 5214                                  _print_row_2_once 0028  
                                       _Lcd_Clear 9A2E             __end_of_keyboard_eight_note_efficient 3018  
          __size_of_keyboard_eight_note_efficient 0402                     _keyboard_eight_note_efficient 2C16  
                              displayDigits@digit 00CD                       _calculate_pulse_length$5911 00C8  
                                   ??_displayTest 0066                                      ??_Read_b_eep 0062  
                                       _Lcd_Start 83D8                             ?_processEncoderBuxton 0007  
                                  __end_of___lmul 7684                                    __end_of___wmul 9928  
                                   __pidataCOMRAM 9A87                              __end_of_playThisNote 6950  
                                    ??_Function_A 00C7                                      ??_Function_B 00C7  
                                    ??_Function_C 00C9                                      ??_Function_D 00CA  
                                    ??_Function_E 00C7                                      ??_Function_F 00C7  
                                    ??_Function_G 00CC                                      ??_Function_H 00CC  
                           __size_of_Function_A_1 00D8                             __size_of_Function_A_2 00D6  
                             __size_of_doTheLatch 0020                             __size_of_Function_A_3 00D6  
                           __size_of_Function_C_1 00A2                             __size_of_Function_C_2 013A  
                           __size_of_Function_C_3 013A                             __size_of_Function_D_1 0084  
                           __size_of_Function_D_2 0062                             __size_of_Function_D_3 0076  
                           __size_of_Function_D_4 007A                             __size_of_Function_D_5 007A  
                           __size_of_Function_E_1 0050                             __size_of_Function_E_2 0050  
                           __size_of_Function_G_1 00A0                             __size_of_Function_G_2 00A0  
                           __size_of_Function_G_3 005C                             __size_of_Function_G_4 009A  
                           __size_of_Function_H_1 00D6                             __size_of_Function_H_2 006E  
                           __size_of_Function_H_3 0062                             __size_of_Function_H_4 00B2  
                           __size_of_Function_H_5 00AA                             __size_of_Function_H_6 006E  
                           __size_of_Function_H_7 00AE                             __size_of_Function_H_8 006E  
                           __size_of_Function_H_9 0096                                    _ADC_Initialize 9A58  
                        __end_of_Lcd_Print_String 85F4                          setControllerResolution@i 0060  
                                     _Write_b_eep 9584                       playThisNotePentatonic@index 0071  
                                  __end_of_noteOn 8C90                                    _TRANSPOSE_MODE 0027  
                     playThisNotePentatonic@pitch 0007                                    _findArrayIndex 9604  
                                  __end_of_ttable F359                              _arpeggiatorTempoMenu 0132  
                                  __end_of_strcpy 97FA                      __end_of_setControllerNumbers 1DC2  
                                   __pbitnvCOMRAM 0290                               start_initialization 6C44  
                          _calculate_pulse_length 5EC2                                 _encoder_state_now 0180  
                                     __end_of_ISR 557C                                     _playThisNote8 27E2  
                          __size_of_resetArpeggio 003E                                       __end_of_map 684C  
                             __size_of_clear_row1 0028                               __size_of_clear_row2 0028  
                              wait_one_pulse@mode 0060                             ??_encoderInputsBuxton 0007  
                               playSeventh@i_1696 0068                  playThisNotePentatonic@temp_pitch 0076  
                              __end_of_Read_b_eep 99E8                    __end_of_diatonic_seventh_major F2E3  
                          ?_finish_arpeggio_setup 0007                    __end_of_diatonic_seventh_minor F2A7  
                                     ?_noteOnDrum 0060                                 Lcd_Print_String@a 0068  
                               Lcd_Print_String@i 006C                                      _lastNoteMode 001C  
                               ??_calculate_alpha 00A0                                __end_of_Function_A 74F0  
                              __end_of_Function_B 8962                                __end_of_Function_C 822A  
                              __end_of_Function_D 834A                                __end_of_Function_E 8EB4  
                              __end_of_Function_F 8E48                                __end_of_Function_G 82BA  
                              __end_of_Function_H 7808                                 __size_of_Busy_eep 0006  
                              _readPotentiometers 0A3C                               __size_of_eepromExit 003A  
                                   _ARPEGGIO_TYPE 0034                             __size_of_exitFunction 003A  
                                    _Function_A_1 70C4                                      _Function_A_2 7348  
                                    _Function_A_3 7272                                      _Function_C_1 7B6A  
                                    _Function_C_2 62B6                                      _Function_C_3 617C  
                                    _Function_D_1 84EC                                      _Function_D_2 9050  
                                    _Function_D_3 8A50                                      _Function_D_4 886E  
                                    _Function_D_5 87F4                                      _Function_E_1 9380  
                                    _Function_E_2 9330                                      _Function_G_1 7F2C  
                                    _Function_G_2 7E8C                                      _Function_G_3 91D6  
                                    _Function_G_4 8068                                      _Function_H_1 719C  
                                    _Function_H_2 8D6C                                      _Function_H_3 8FEE  
                                    _Function_H_4 7808                                      _Function_H_5 7AC0  
                                    _Function_H_6 8CFE                                      _Function_H_7 78BA  
                                    _Function_H_8 8C90                                      _Function_H_9 8102  
                                 _encoderPolarity 002C                                        ?_Lcd_Clear 0007  
                             displayString@letter 0100                                          ??___wmul 0064  
                                      ?_Lcd_Start 0007                            __end_of_ADC_Initialize 9A6C  
                         readPotentiometers@count 0260                               ?_readPotentiometers 0007  
                                     __pdataBANK0 00F5                                       __pdataBANK1 01EA  
                                     __pdataBANK2 0288                                       __pdataBANK3 0300  
                                __CFG_LPT1OSC$OFF 000000                               __end_of_LCD_STRINGS FCFB  
                           __size_of_panic_button 0022                        Lcd_Print_Char@Lower_Nibble 0061  
                          __end_of_findArrayIndex 9640                               __size_of_int2string 00C4  
                             _encoderPolarityMenu 0138                             __end_of_controlChange 928A  
                                        ??_strcpy 0064                   __size_of_playThisNotePentatonic 019A  
                                       ___fladd@a 00A8                                         ___fladd@b 00A4  
                             __size_of_copy_array 0062                                   _printThisNumber 9A44  
                                   ?_sort_pitches 0007                                         ___fldiv@a 008B  
                                       ___fldiv@b 0087                                     _TIMER_PRELOAD 017C  
                             __end_of_displayTest 86F8                           Function_D_3@array_index 00C9  
                         __size_of_processDrumpad 0506                                         ___flmul@a 0072  
                                       ___flmul@b 006E                                       __pbssCOMRAM 002A  
                                     _aeolian_key FD0A                                  _button_state_now 00D9  
                      displayDigits@digit_counter 00EA                                    ?_playThisNote8 0071  
                                   __pcstackBANK0 0060                                     __pcstackBANK1 0199  
                          __size_of_digitalInputs 0052                        ??_playDiatonicSeventhMajor 0062  
                _arpeggiatorLastNoteModeResetMenu 0108                        ??_playDiatonicSeventhMinor 0062  
                               __size_of___xxtofl 0154                                     sort_pitches@a 0009  
                     displayString@letter_counter 00E9                                     sort_pitches@i 000B  
                                   sort_pitches@j 000A                              ??_readPotentiometers 00C2  
                          processPotentiometers@i 0068                                      _exitFunction 9640  
                                     _ARPEGGIO_ON 0025                                          ?_Lcd_Cmd 0007  
                                    _keyboardMenu 0174                                   _processKeyboard 8EB4  
                                  _wait_one_pulse 9886                                  printThisNumber@n 0060  
                        ?_initializeSaveSlotsOnce 0007                             _drum_button_state_now 0038  
                __size_of_setControllerResolution 002C                                 __size_of_exitLoad 003A  
                            __end_of_phrygian_key FD46                                 __size_of_exitSave 003A  
                             readPotentiometers@i 019E                                 __size_of_menu_lcd 00DE  
                                    _panic_button 994E                                     _resetArpeggio 95C6  
                   setControllerNumbers@printOnce 000A                                  ??_Lcd_Set_Cursor 0064  
                                       _ema_alpha 0104                                     Function_H_5@i 00C8  
                                       __pintcode 0008                                     __pmediumconst E8C2  
                          ??_processEncoderBuxton 0060                                          ?___aldiv 0060  
                                        ?___fladd 00A4                                   _arpeggiatorMenu 00E0  
                                        ?___fldiv 0087                          __size_of_rotateArrayLeft 0078  
                                       __ptext100 8778                                         __ptext101 9A90  
                                       __ptext110 6E24                                         __ptext102 9A96  
                                        ?___flneg 00A0                                         __ptext111 6D36  
                                       __ptext103 93D0                                         __ptext120 336A  
                                       __ptext112 834A                                         __ptext104 0A3C  
                                       __ptext121 9728                                         __ptext113 6746  
                                       __ptext105 41D2                                         __ptext130 9A9C  
                                       __ptext122 98B0                                         __ptext114 75BE  
                                       __ptext106 94F8                                         __ptext131 99CE  
                                       __ptext123 98D8                                         __ptext115 74F0  
                                       __ptext107 9232                                         __ptext132 4E1E  
                                       __ptext124 9114                                         __ptext116 6028  
                                       __ptext108 5D4E                                         __ptext141 11A4  
                                       __ptext133 9900                                         __ptext125 8570  
                                       __ptext117 6FE6                                         __ptext109 9540  
                                       __ptext142 6522                                         __ptext134 8678  
                                       __ptext126 85F4                                         __ptext118 97FA  
                                       __ptext143 86F8                                         __ptext135 97C8  
                                       __ptext127 9466                                         __ptext119 3018  
                                       __ptext144 9A00                                         __ptext136 83D8  
                                       __ptext128 5020                                         __ptext145 663A  
                                       __ptext137 9928                                         __ptext129 9584  
                                       __ptext146 39B6                                         __ptext138 982A  
                                       __ptext139 9A58                                          ?___flmul 006E  
                                        ?___fltol 00B8                                   ?_ADC_Initialize 0007  
                                      playTriad@i 0067                                       _ARRAY_INDEX 00EC  
            _arpeggiatorLastNoteModeTransposeMenu 010B                                    _diminished_7th 02C8  
                                 ?_findArrayIndex 0007                                       _ema_integer 00FE  
                                  ??_sort_pitches 0007                                          ?_display 0007  
                                   ??_playSeventh 0061                    playDiatonicSeventhMajor@i_1718 0067  
                             __size_of_noteOnDrum 0054                                         _count_ISR 0264  
                   controlChange@controllerNumber 0060                          encoderInputsBuxton@tempA 000A  
                        encoderInputsBuxton@tempB 000B                           Function_D_4@array_index 00C9  
                                       _major_7th 02D4                                   playTriad@i_1691 0068  
                                        _ADC_Read 9728                                         _major_key F378  
                                       _last_note 00ED                                  ??_Lcd_Print_Char 0061  
                                       _menuArray 0300                                      _patch_number 00F4  
                                  __size_of_clock 0006                                      playSeventh@i 0067  
                                        _ARPEGGIO 0184                             __size_of_playArpeggio 0700  
                                   ??_noteOffDrum 0062                                    __size_of_setup 0074  
                                  __size_of_srand 0010                                      ??_doTheLatch 0066  
                          __end_of_wait_one_pulse 98B0                             __size_of_saveToEEPROM 01F4  
                                       _minor_7th 02D0                                   ___aldiv@divisor 0064  
                              noteOffDrum@channel 0062                                         _seg_ascii F220  
                                 ___aldiv@counter 0068                            _playThisNotePentatonic 557C  
                                       _minor_key F369                                    ___wmul@product 0064  
                                       _playTriad 5BCA                              int2string@isNegative 000B  
                                       _pitchBend 94F8                                  ??_loadFromEEPROM 00CC  
                                pitchBend@channel 0062                                         _savesMenu 00E3  
                                     _arpeggioPtr 002A                                    ?_resetArpeggio 0007  
                                   _digitalInputs 92DE                                          Lcd_Cmd@a 0062  
                                    ??_clear_row1 006E                                      ??_clear_row2 006E  
                            _setControllerNumbers 18A4                                       _LCD_STRINGS F39E  
                           __size_of_playThisNote 0104                                          _GO_nDONE 007E11  
             __end_of_keyboard_all_note_efficient 22DC                       _keyboard_all_note_efficient 1DC2  
                                     ??_Lcd_Clear 0063                                  __CFG_WDTPS$32768 000000  
      initializeSaveSlotsOnce@initializeSlotsOnce 00B4                                          _HYST_VAL 01F6  
                                _diminished_triad 02DC                           __end_of_printThisNumber 9A58  
                                     ??_Lcd_Start 0063                                  pitchBend@lowByte 0060  
                                     _displayTest 8678                               __end_of_locrian_key FD0A  
                                        _POT_MODE 002F                               __end_of_seg_bcd_hex F369  
                  key_press_release_note_off@temp 00E8                    __size_of_processPotentiometers 02A8  
                              _buttonInputsSerial 8778                     __end_of_processPotentiometers 447A  
                                       map@in_max 0076                                         map@in_min 0072  
                                       _triadMenu 016E                          buttonInputsSerial@i_4482 0065  
                              __end_of_doTheLatch 99B0                                 ___wmul@multiplier 0060  
                                   _skipFirstLast 001D                            __size_of_un_block_code 0018  
                                 ??_playThisNote8 0072                                      _playArpeggio 11A4  
                                 Write_b_eep@badd 0060                                   Write_b_eep@bdat 0062  
                                    ??_eepromExit 006E                      _arpeggiatorSkipFirstLastMenu 0114  
                       __size_of_selectSlotOnBoot 0020                      _arpeggiatorRandomizeSkipMenu 011A  
                         Function_D_5@array_index 00C9                               ?_buttonInputsSerial 0007  
                                    _saveToEEPROM 5020                           __end_of_processKeyboard 8F20  
                          __size_of_setupArpeggio 0074                                 _string_to_display 01FB  
                              __end_of_clear_row1 9900                                __end_of_clear_row2 98D8  
                             __end_of_playSeventh 5A3A                                         copy_data0 6C58  
                                       copy_data1 6C78                                         copy_data2 6C98  
                                       copy_data3 6CB8                                         copy_data4 6CD8  
                                ??_Function_H_6_1 00C7                                  ??_Function_H_6_2 00C7  
                                ??_Function_H_8_1 00C7                                  ??_Function_H_8_2 00C7  
                                ??_Function_H_9_1 00C7                                  ??_Function_H_9_2 00C7  
                                ??_Function_H_9_3 00C7                                  ??_Function_H_9_4 00C7  
             displayDigits@number_to_display_last 017A                      _arpeggiatorRandomizeTypeMenu 0117  
                                    ??_int2string 0062                                   ?_wait_one_pulse 0007  
             displayDigits@number_to_display_temp 00E6                                      _playThisNote 684C  
                                        _Busy_eep 9A9C                                      ??_copy_array 0060  
                           __end_of_MAX_NUM_NOTES F39E                                 _NUM_NOTES_PRESSED 002E  
                         __size_of_random_pitches 0072                                     ?_doTheUnLatch 0007  
                                __size_of_Lcd_Cmd 0026                                        ?_playTriad 0007  
                                      _EECON1bits 000FA6                                        ?_pitchBend 0060  
                             __end_of_noteOffDrum 97C8                                   _octave_overflow 0013  
                                  ?_digitalInputs 0007                              ??_buttonInputsSerial 0060  
                                     _major_triad 02E5                                          __Hrparam 0000  
                           ?_setControllerNumbers 0007                               _arpeggiatorTypeMenu 012C  
                                        __Lrparam 0000                                   _augmented_triad 02DF  
                              __end_of_eepromExit 9728                                        _DIGIT_MODE 0039  
                                __size_of___aldiv 00CE                                  __size_of___fladd 033E  
                                __size_of___fldiv 02B6                                  __size_of___awdiv 0132  
                                __size_of___flneg 0030                                       _last_octave 017E  
                                __size_of___awmod 0100                                  __size_of___lbmod 008E  
                                __size_of___flmul 0352                                  __size_of___fltol 00DE  
                                     _drumchannel 0051                            __size_of_processOctave 030E  
                            playSeventh@seventh_p 0065                                      ?_Write_b_eep 0060  
                         ?_calculate_pulse_length 00C2                                 ?_Lcd_Print_String 0068  
                              __end_of_int2string 7748                                 ??_rotateArrayLeft 0060  
                              __end_of_dorian_key FD55                                    _processDrumpad 22DC  
                                __size_of_display 0018                                __end_of_copy_array 9114  
                                        ___xxtofl 6028                             _add_notes_to_arpeggio 6A50  
                              ??_Lcd_Print_String 006A                                     ?_analogInputs 0007  
                                 _mainChannelMenu 0141                  __end_of_playDiatonicSeventhMajor 58A8  
                __end_of_playDiatonicSeventhMinor 4BE2                                  __size_of_sendUSB 00E4  
                                 _calculate_alpha 941C                                  __size_of_sendOut 00EE  
                                __size_of_noteOff 0044                                          __ptext10 7CAC  
                                        __ptext11 7D4C                                          __ptext20 7AC0  
                                        __ptext12 7DEC                                          __ptext21 7808  
                                        __ptext13 8C90                                          __ptext30 4BE2  
                                        __ptext22 8FEE                                          __ptext14 8F8A  
                                        __ptext31 5EC2                                          __ptext23 8D6C  
                                        __ptext15 89DA                                          __ptext40 9380  
                                        __ptext32 967A                                          __ptext24 719C  
                                        __ptext16 78BA                                          __ptext41 82BA  
                                        __ptext33 7F2C                                          __ptext25 822A  
                                        __ptext17 8CFE                                          __ptext50 985A  
                                        __ptext42 87F4                                          __ptext34 96B4  
                                        __ptext26 8068                                          __ptext18 7A16  
                                        __ptext51 8198                                          __ptext43 886E  
                                        __ptext35 96EE                                          __ptext27 9640  
                                        __ptext19 7FCC                                          __ptext60 7348  
                                        __ptext52 617C                                          __ptext44 8A50  
                                        __ptext36 8DDA                                          __ptext28 91D6  
                                        __ptext61 70C4                                          __ptext53 62B6  
                                        __ptext45 18A4                                          __ptext37 94B0  
                                        __ptext29 7E8C                                          __ptext70 557C  
                                        __ptext62 99E8                                          __ptext54 7684  
                                        __ptext46 9050                                          __ptext38 8E48  
                                        __ptext71 2C16                                          __ptext63 0014  
                                        __ptext55 63F0                                          __ptext47 941C  
                                        __ptext39 9330                                          __ptext80 58A8  
                                        __ptext72 27E2                                          __ptext64 92DE  
                                        __ptext56 7B6A                                          __ptext48 3C6E  
                                        __ptext81 8C20                                          __ptext73 4720  
                                        __ptext65 36A8                                          __ptext57 88E8  
                                        __ptext49 84EC                                          __ptext90 9760  
                                        __ptext82 99B0                                          __ptext74 5A3A  
                                        __ptext66 5214                                          __ptext58 741E  
                                        __ptext91 9604                                          __ptext83 8B3A  
                                        __ptext75 4982                                          __ptext67 9990  
                                        __ptext59 7272                                          __ptext92 6A50  
                                        __ptext84 7968                                          __ptext76 5716  
                                        __ptext68 8EB4                                          __ptext93 8962  
                                        __ptext85 8BAE                                          __ptext77 1DC2  
                                        __ptext69 3F24                                          __ptext94 22DC  
                                        __ptext86 8464                                          __ptext78 684C  
                                        __ptext95 928A                                          __ptext87 6950  
                                        __ptext79 5BCA                                          __ptext96 9794  
                                        __ptext88 90B2                                          __ptext97 447A  
                                        __ptext89 95C6                                          __ptext98 9886  
                                        __ptext99 9A44                       __end_of_initializeMenuArray 5020  
                                        _encoderA 002E                                          _encoderB 002D  
                         ??_finish_arpeggio_setup 0061                                          _mainMenu 0177  
                    processPotentiometers@lowByte 0066                               _DISPLAY_STEP_NUMBER 0010  
                                      strcpy@from 0062                                          _drumMenu 0165  
                                  ??_doTheUnLatch 007A                            __size_of_programChange 0048  
                                        _exitLoad 967A                                          _keyboard 00D1  
                                   __size_of_main 00F6                                          _exitSave 96B4  
                               _startingDirection 0033                                          _modeMenu 0171  
                                   __size_of_load 0006                                     __size_of_rand 0088  
                                   _un_block_code 99E8                                      ??_noteOnDrum 0062  
                   playDiatonicSeventhMajor@index 0061                                          _menu_lcd 6F08  
                                        _parallel 002F                                   ??_resetArpeggio 0060  
                   playDiatonicSeventhMajor@pitch 0068                           _setControllerResolution 985A  
                            __end_of_sort_pitches 663A                                    playTriad@pitch 0069  
                              __end_of_ionian_key FD64                                       _locrian_key FCFB  
                  playDiatonicSeventhMinor@i_1728 0068                                       _seg_bcd_hex F359  
                                        _semitone 003A                            __size_of_displayDigits 02B8  
                                      _AUTO_LATCH 0020                                     _potsAlphaMenu 0153  
                                   _setupArpeggio 8B3A                               playThisNote8@mode_p 0078  
                                        _potsMenu 0159                                          _velocity 0050  
                                        _overflow 0014                                  ?_printThisNumber 0060  
                      Lcd_Print_Char@Upper_Nibble 0062                    __end_of_calculate_pulse_length 6028  
                                     _minor_triad 02E2                            __size_of_displayString 010C  
                        ??_playDiatonicTriadMajor 0062                          ??_playDiatonicTriadMinor 0062  
                                   _FIRST_READING 0030                                 _note_off_was_sent 0290  
                     playDiatonicTriadMajor@index 0061                            __end_of_processDrumpad 27E2  
                     playDiatonicTriadMajor@pitch 0068                              controlChange@channel 0062  
                     __end_of_encoderInputsBuxton 8778                                    ??_analogInputs 01A0  
                                     _playSeventh 58A8                                        _INTCONbits 000FF2  
                              __end_of_noteOnDrum 92DE                                      _phrygian_key FD37  
                                ?_processKeyboard 0007                                     _encoder_click 002B  
                              __end_of_lydian_key FD37                                 _keyboardTranspose 447A  
                                     _noteOffDrum 9794                                          intlevel2 0000  
                              ?_keyboardTranspose 0007                                     _processOctave 36A8  
                                  ?_un_block_code 0007                                    _AUTO_RANDOMIZE 001E  
                                 ??_digitalInputs 0080                   delete_notes_from_arpeggio@pitch 0069  
                                     ??_playTriad 0061                            ??_setControllerNumbers 00C7  
                                     ??_pitchBend 0062                                    _SORT_DIRECTION 0026  
                                  _iterator_focus 00FD                                  int2string@number 0060  
             initializeMenuArray@NumberOfElements 0067                                  ??_ADC_Initialize 0060  
                             ??_keyboardTranspose 0062                          _NOTE_LENGTH_PULSES_ARRAY 02B8  
                                  ?_setupArpeggio 0007                                     _which_seventh 00F0  
                                ??_findArrayIndex 0060                                playThisNote8@index 0071  
                                  _lcd_print_once 0029                                playThisNote8@pitch 0076  
                   playDiatonicSeventhMinor@index 0061                     playDiatonicSeventhMinor@pitch 0066  
             keyboard_sharps_only_efficient@index 0078                                    _finishLastNote 0017  
                              Lcd_Set_Cursor@temp 0067               keyboard_sharps_only_efficient@pitch 0077  
                        loadFromEEPROM@byte_count 01E7                                     _programChange 94B0  
                                      Lcd_Start@i 0064                           __end_of_calculate_alpha 9466  
                                 ?_processDrumpad 0007                  __size_of_initializeSaveSlotsOnce 004A  
                                  _inputPotsArray 0288                            ?_add_notes_to_arpeggio 0007  
                                _selectSlotOnBoot 9970                                       _seventhMenu 016B  
                                        strcpy@cp 0064                                          strcpy@to 0060  
                               noteOnDrum@channel 0062                                      _which_octave 0031  
                       __end_of_keyboardTranspose 4720                                      _which_screen 004E  
                                    ___aldiv@sign 0069                                      _potsResoMenu 0156  
                                   _displayDigits 39B6                       playDiatonicTriadMinor@index 0061  
                              noteOnDrum@velocity 0061                       playDiatonicTriadMinor@pitch 0066  
             __size_of_delete_notes_from_arpeggio 0034                                     ___fladd@signs 00B4  
                         ?_playThisNotePentatonic 0071                                    ?_processOctave 0007  
                     __size_of_readPotentiometers 0768                                     _displayString 663A  
                       ??_setControllerResolution 0060                                       _which_triad 00F1  
                                   _KEYBOARD_MODE 00F3                                      ___fladd@aexp 00B5  
                                    ___fladd@bexp 00B6                                    _random_pitches 8BAE  
                                    _toggle_state 002C                            __size_of_controlChange 0058  
               __size_of_playDiatonicSeventhMajor 0192                 __size_of_playDiatonicSeventhMinor 0260  
                       ?_playDiatonicSeventhMajor 0061  
